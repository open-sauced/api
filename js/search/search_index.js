var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/interfaces/AllContributionsCount.html",[0,2.914,1,3.741]],["body/interfaces/AllContributionsCount.html",[0,1.671,1,4.8,2,2.146,3,0.025,4,0.025,5,0.022,6,1.137,7,1.894,8,3.037,9,2.408,10,0.109,11,0.66,12,5.82,13,0.611,14,0.115,15,0.005,16,0.089,17,0.804,18,1.358,19,0.386,20,1.424,21,3.771,22,0.663,23,1.156,24,0.853,25,0.978,26,1.052,27,1.83,28,2.24,29,2.05,30,2.898,31,1.282,32,2.262,33,2.262,34,2.146,35,2.05,36,2.408,37,2.647,38,2.05,39,4.03,40,5.384,41,2.408,42,1.967,43,3.583,44,3.583,45,3.246,46,2.408,47,1.967,48,2.262,49,2.146,50,5.117,51,2.602,52,2.146,53,2.602,54,3.246,55,2.408,56,3.246,57,2.262,58,2.408,59,0.028,60,0.1,61,1.967,62,0.789,63,2.408,64,0.876,65,1.699,66,2.408,67,1.237,68,2.37,69,2.15,70,2.408,71,1.416,72,1.329,73,2.602,74,3.546,75,6.506,76,0.994,77,2.096,78,4.094,79,5.82,80,3,81,2.602,82,3.408,83,3.264,84,2.602,85,4.106,86,6.242,87,4.734,88,2.339,89,4.121,90,3.867,91,3.195,92,4.734,93,2.525,94,5.308,95,4.734,96,7.548,97,2.408,98,3.378,99,5.45,100,3.604,101,2.05,102,2.143,103,2.602,104,3.813,105,2.602,106,3.399,107,2.602,108,5.774,109,3.583,110,6.09,111,4.121,112,2.602,113,4.121,114,2.602,115,4.121,116,2.602,117,1.116,118,2.45,119,1.159,120,2.602,121,2.602,122,1.677,123,1.828,124,2.602,125,2.24,126,2.602,127,2.602,128,6.342,129,2.602,130,5.117,131,4.121,132,4.121,133,4.121,134,4.121,135,2.602,136,4.121,137,2.602,138,4.448,139,2.602,140,2.602,141,2.109,142,2.602,143,2.718,144,2.007,145,2.602,146,2.602,147,2.146,148,2.146,149,1.772,150,2.146,151,2.602,152,2.602,153,4.121,154,2.602,155,5.82,156,2.602,157,5.438,158,2.602,159,2.602,160,6.562,161,6.32,162,2.602,163,2.602,164,2.602,165,5.117,166,2.602,167,2.602,168,2.602,169,2.602,170,5.117,171,2.602,172,2.602,173,2.602,174,2.602,175,5.117,176,2.602,177,2.262,178,2.262,179,2.602,180,2.602,181,2.602,182,2.146,183,2.602,184,2.602,185,2.602,186,2.602,187,1.068,188,2.408,189,2.602,190,2.05,191,2.408,192,2.408,193,1.306,194,2.602,195,1.894,196,2.602,197,1.259,198,1.547,199,1.894,200,2.602,201,1.671,202,3.813,203,1.892,204,2.146,205,2.602,206,2.408,207,2.602,208,0.54,209,2.408,210,3.813,211,2.602,212,2.602,213,1.83,214,1.894,215,2.602,216,2.602,217,2.602,218,2.602,219,2.602,220,2.602,221,2.602,222,7.068,223,2.602,224,2.408,225,2.146,226,2.602,227,5.865,228,6.242,229,5.564,230,5.117,231,5.117,232,5.117,233,5.117,234,5.117,235,4.111,236,5.117,237,2.602,238,2.602,239,0.002,240,0.002]],["title/modules/ApiServicesModule.html",[241,1.291,242,3.09]],["body/modules/ApiServicesModule.html",[3,0.064,4,0.064,5,0.057,15,0.005,16,0.085,19,0.989,59,0.071,60,0.257,239,0.004,240,0.004,241,2.27,242,6.307,243,2.782,244,3.484,245,6.675,246,6.675,247,6.675,248,5.658,249,3.484,250,2.87,251,2.825,252,7.433,253,7.433,254,3.661,255,3.79,256,7.433]],["title/modules/AppModule.html",[241,1.291,257,3.944]],["body/modules/AppModule.html",[3,0.023,4,0.023,5,0.021,7,1.782,8,1.277,14,0.217,15,0.005,16,0.101,19,0.363,22,0.623,24,0.802,27,2.76,29,1.927,59,0.026,60,0.094,62,0.742,64,1.32,65,1.145,74,1.491,102,1.19,122,1.286,197,2.72,208,1.276,239,0.002,240,0.002,241,1.117,243,1.02,244,1.715,249,1.715,250,1.052,251,1.036,254,1.124,257,8.163,258,2.447,259,2.447,260,5.172,261,5.416,262,5.416,263,5.416,264,5.172,265,4.963,266,5.416,267,5.416,268,5.416,269,5.416,270,5.416,271,5.416,272,5.416,273,4.781,274,5.172,275,4.963,276,4.34,277,5.416,278,5.416,279,5.172,280,5.416,281,5.416,282,5.416,283,4.34,284,5.172,285,5.416,286,2.725,287,2.874,288,0.552,289,2.725,290,4.37,291,6.259,292,0.126,293,2.725,294,0.533,295,0.671,296,0.248,297,2.725,298,0.552,299,1.927,300,2.725,301,2.725,302,1.277,303,5.62,304,4.625,305,1.491,306,3.924,307,2.264,308,3.924,309,2.264,310,2.725,311,2.018,312,4.37,313,5.47,314,5.47,315,2.725,316,2.725,317,2.264,318,2.264,319,2.264,320,3.631,321,3.631,322,3.631,323,3.631,324,3.631,325,3.631,326,3.631,327,3.631,328,3.631,329,4.37,330,1.85,331,2.725,332,1.97,333,1.455,334,1.934,335,1.491,336,2.857,337,2.725,338,2.673,339,1.927,340,2.857,341,2.127,342,2.857,343,2.127,344,2.857,345,2.127,346,2.857,347,2.725,348,3.19,349,2.857,350,2.725,351,2.76,352,2.725,353,2.447,354,2.725,355,2.725,356,2.725,357,2.725,358,2.725,359,1.85,360,2.127,361,2.725,362,4.37,363,2.127,364,2.725,365,2.725,366,2.593,367,2.447,368,2.966,369,4.37,370,3.091,371,2.447,372,3.091,373,3.091,374,2.725,375,2.264,376,1.85,377,2.725,378,2.725,379,3.412,380,2.447,381,3.091,382,2.264,383,3.091,384,2.725,385,1.491,386,2.264,387,2.391,388,3.247,389,1.617,390,2.966,391,1.453,392,2.127,393,2.391,394,4.852,395,1.617,396,2.725,397,2.857,398,2.018,399,2.966,400,2.127,401,2.857,402,2.447,403,2.593,404,1.389,405,1.782,406,2.966,407,2.018,408,3.237,409,1.491,410,2.966,411,2.127,412,2.966,413,2.127,414,2.966,415,2.127,416,2.725,417,2.76,418,2.264,419,2.725,420,1.02,421,1.491,422,2.127,423,2.725,424,4.37,425,2.725,426,2.127,427,2.447,428,2.725,429,2.447,430,2.857,431,3.091,432,2.018,433,3.091,434,2.725,435,2.725,436,2.725,437,2.725,438,2.725,439,2.916,440,4.37,441,5.47,442,4.37,443,9.261,444,2.725,445,3.412,446,2.725,447,3.412,448,2.725,449,2.391,450,2.725,451,3.924,452,2.725,453,3.412,454,2.725,455,4.37,456,2.333,457,4.37,458,2.966,459,2.725,460,3.924,461,3.924,462,2.725,463,4.37,464,3.924,465,2.725,466,5.47,467,3.631,468,2.725,469,2.725,470,2.725,471,2.725,472,2.725,473,2.725,474,2.725,475,2.725,476,2.725,477,2.725,478,2.725,479,2.725,480,2.018,481,2.725,482,2.725,483,2.264,484,2.725,485,2.725,486,2.725,487,2.725,488,2.725,489,2.725,490,2.725,491,2.725,492,2.725,493,2.447,494,2.725,495,2.725,496,1.782,497,2.264,498,1.927,499,2.018,500,2.725,501,2.264,502,1.927,503,2.725,504,1.145,505,2.725,506,2.725]],["title/classes/ApplyUserCouponDto.html",[60,0.175,507,3.944]],["body/classes/ApplyUserCouponDto.html",[3,0.064,4,0.064,5,0.057,10,0.277,11,1.271,14,0.375,15,0.005,16,0.084,59,0.07,60,0.306,76,1.24,208,1.647,239,0.004,240,0.004,292,0.341,507,6.907,508,1.842,509,7.945,510,6.634,511,9.47,512,0.792,513,2.808,514,6.552,515,4.318,516,1.837,517,7.387,518,7.387,519,3.26,520,1.048,521,3.416,522,2.203,523,0.983,524,6.138]],["title/controllers/AuthController.html",[525,1.156,526,3.944]],["body/controllers/AuthController.html",[3,0.022,4,0.022,5,0.02,10,0.098,13,1.03,14,0.381,15,0.005,16,0.087,19,0.347,59,0.025,60,0.09,62,0.709,65,1.598,68,1.841,71,1.529,72,2.02,76,0.329,77,3.023,85,1.197,102,1.147,123,2.033,208,1.884,239,0.002,240,0.002,288,0.854,292,0.375,294,1.585,295,0.913,296,0.739,298,1.644,311,1.93,334,3.171,335,1.426,502,1.843,507,6.333,512,0.869,514,4.96,520,0.37,523,1.045,525,0.596,526,3.29,527,0.718,528,2.34,529,0.96,530,3.754,531,6.097,532,6.097,533,4.214,534,6.097,535,6.097,536,6.097,537,6.696,538,6.696,539,6.097,540,2.605,541,2.605,542,3.293,543,3.785,544,4.637,545,2.861,546,5.564,547,5.609,548,3.785,549,6.097,550,2.605,551,3.264,552,2.605,553,2.605,554,3.29,555,3.502,556,2.605,557,2.904,558,4.766,559,2.605,560,2.605,561,6.266,562,2.605,563,4.214,564,6.434,565,2.605,566,2.605,567,2.605,568,2.605,569,2.605,570,3.785,571,6.097,572,5.307,573,5.307,574,2.755,575,2.605,576,2.605,577,4.134,578,4.761,579,2.605,580,5.262,581,5.066,582,5.506,583,4.066,584,2.605,585,2.605,586,2.605,587,6.097,588,2.605,589,2.605,590,7.297,591,5.594,592,2.605,593,5.057,594,6.097,595,4.214,596,2.605,597,2.605,598,5.594,599,2.605,600,4.96,601,2.605,602,2.605,603,2.605,604,7.284,605,2.605,606,2.605,607,2.605,608,1.843,609,1.299,610,1.175,611,3.829,612,3.491,613,3.727,614,3.378,615,3.118,616,0.96,617,1.843,618,2.833,619,2.034,620,3.602,621,2.34,622,3.602,623,2.34,624,5.307,625,2.605,626,2.605,627,2.605,628,2.605,629,2.605,630,3.754,631,2.605,632,5.228,633,2.605,634,2.605,635,2.605,636,1.093,637,2.34,638,2.34,639,2.605,640,2.605,641,2.605,642,0.905,643,2.605,644,3.727,645,3.035,646,2.605,647,2.605,648,4.143,649,4.214,650,3.785,651,3.785,652,1.654,653,1.865,654,4.214,655,5.307,656,1.171,657,3.785,658,5.307,659,1.593,660,2.605,661,1.426,662,0.777,663,2.165,664,3.785,665,3.785,666,3.785,667,3.502,668,3.29,669,3.502,670,3.502,671,3.502,672,2.057,673,3.502,674,3.502,675,3.502,676,3.785,677,3.785,678,3.785,679,2.605,680,1.426,681,1.768,682,2.605,683,2.605,684,2.605,685,2.605,686,2.605,687,2.605,688,4.214,689,1.843,690,2.605,691,2.605,692,2.605,693,2.605,694,2.605,695,2.605,696,2.605,697,2.605,698,3.502,699,2.605,700,4.766,701,2.605,702,2.605,703,2.605,704,2.605,705,2.605,706,2.605,707,2.605,708,2.605,709,2.605,710,2.605,711,2.605,712,2.605,713,2.605,714,4.143,715,2.605,716,2.605,717,2.605,718,2.605,719,2.034,720,2.605,721,2.605,722,2.605,723,2.605,724,2.605,725,2.605]],["title/modules/AuthModule.html",[241,1.291,260,3.573]],["body/modules/AuthModule.html",[3,0.053,4,0.053,5,0.047,15,0.005,16,0.097,19,0.814,59,0.058,60,0.211,208,1.138,239,0.003,240,0.003,241,2.011,243,2.288,244,3.086,249,3.086,250,2.36,251,2.324,254,3.243,255,3.357,260,7.496,264,6.877,265,6.599,283,5.77,284,6.877,287,3.299,359,4.149,370,4.324,371,5.49,375,5.079,429,5.49,526,6.789,527,2.169,636,4.334,637,5.49,726,5.49,727,5.49,728,5.49,729,5.49,730,6.877,731,7.653,732,6.113,733,7.865,734,5.079,735,5.49,736,6.113,737,6.113]],["title/classes/BakeRepoDto.html",[60,0.175,738,3.429]],["body/classes/BakeRepoDto.html",[3,0.059,4,0.059,5,0.052,10,0.255,11,1.209,14,0.396,15,0.005,16,0.08,59,0.065,60,0.291,76,1.205,239,0.004,240,0.004,292,0.389,456,2.17,508,1.696,512,0.902,513,3.198,516,1.981,519,3.366,520,0.965,521,3.249,522,2.029,523,1.12,642,2.921,672,4.787,738,5.711,739,8.203,740,6.11,741,7.657,742,2.599,743,7.556,744,6.232,745,6.11,746,6.803,747,4.658,748,8.414,749,5.711,750,8.414,751,8.414,752,5.039,753,6.803,754,5.501,755,3.723]],["title/controllers/BlogSummaryController.html",[525,1.156,756,3.944]],["body/controllers/BlogSummaryController.html",[3,0.055,4,0.055,5,0.049,10,0.238,14,0.319,15,0.005,16,0.092,19,0.845,59,0.061,60,0.22,68,1.489,71,1.197,72,1.816,102,1.729,123,1.644,239,0.004,240,0.004,288,1.633,292,0.293,294,1.241,295,0.681,296,0.579,298,1.287,391,2.112,504,1.664,512,0.681,520,0.901,523,0.845,525,1.453,527,1.751,529,2.34,542,3.557,577,3.236,609,3.166,610,2.863,611,3.703,612,4.201,615,3.015,616,2.34,636,2.663,642,2.205,644,2.918,645,2.376,756,6.291,757,6.695,758,5.275,759,6.349,760,8.057,761,6.349,762,7.273,763,5.702,764,7.236,765,5.089,766,7.236,767,8.057,768,6.349,769,4.302,770,3.565,771,5.702,772,8.057,773,1.998,774,4.928,775,4.201,776,2.975,777,3.036,778,6.556,779,4.957,780,6.261,781,4.957,782,6.349,783,6.349,784,2.27,785,5.702,786,6.349,787,6.349,788,2.413]],["title/modules/BlogSummaryModule.html",[241,1.291,261,3.741]],["body/modules/BlogSummaryModule.html",[3,0.06,4,0.06,5,0.054,15,0.005,16,0.092,19,0.934,59,0.067,60,0.243,239,0.004,240,0.004,241,2.192,243,2.625,244,3.364,249,3.364,250,2.709,251,2.666,254,3.535,255,3.66,261,7.677,273,6.58,287,3.597,420,2.625,421,3.839,422,5.477,527,2.364,756,7.229,757,5.828,778,5.196,780,7.443,781,5.477,789,6.299,790,6.299,791,6.299,792,7.015,793,6.299,794,4.761,795,6.299]],["title/injectables/BlogSummaryService.html",[17,0.885,780,3.573]],["body/injectables/BlogSummaryService.html",[3,0.051,4,0.051,5,0.045,10,0.22,13,0.915,14,0.338,15,0.005,16,0.081,17,1.345,19,0.783,59,0.056,60,0.203,62,1.602,65,2.238,68,1.799,71,1.446,72,1.751,74,3.22,76,1.215,199,3.847,239,0.003,240,0.003,288,1.555,292,0.394,294,1.669,295,0.915,296,0.778,298,1.555,420,2.202,421,3.22,498,4.162,542,3.188,661,3.22,680,3.22,762,6.702,764,6.89,765,3.716,773,2.414,777,2.813,778,6.951,779,4.594,780,5.427,784,2.104,796,1.877,797,8.125,798,4.889,799,5.427,800,4.162,801,5.551,802,5.284,803,7.673,804,5.884,805,5.683,806,5.916,807,6.638,808,5.284,809,5.222,810,3.994,811,4.162,812,4.162,813,3.847,814,4.358,815,5.284,816,2.604,817,4.162,818,4.358,819,4.358,820,4.358,821,4.358,822,4.889,823,3.994,824,4.594,825,5.284,826,5.284,827,4.162,828,5.582,829,3.599,830,5.884,831,5.884,832,5.427,833,4.162,834,4.358,835,5.284,836,4.889,837,4.162,838,4.951,839,3.599,840,4.162,841,4.162]],["title/interfaces/ChatResponse.html",[0,2.914,842,3.944]],["body/interfaces/ChatResponse.html",[0,3.618,2,4.646,3,0.054,4,0.054,5,0.048,10,0.235,11,1.149,13,0.672,14,0.367,15,0.005,16,0.084,17,1.401,19,0.835,59,0.06,60,0.217,68,2.063,71,1.182,72,1.287,76,1.111,102,1.708,123,2.07,147,4.646,148,4.646,149,3.836,150,4.646,187,2.311,208,1.168,239,0.004,240,0.004,304,4.942,305,3.432,421,3.432,499,4.646,577,3.197,609,3.127,648,6.242,784,2.243,788,2.384,801,3.618,823,4.257,828,6.06,842,6.871,843,4.897,844,5.211,845,8.323,846,6.643,847,8.79,848,5.633,849,5.633,850,3.618,851,5.633,852,7.18,853,5.754,854,5.633,855,5.633,856,3.961,857,5.633,858,5.633,859,4.646,860,5.633,861,5.211,862,5.633,863,5.633,864,5.633,865,2.057,866,5.633,867,4.897,868,5.633,869,5.633,870,1.895,871,5.633,872,5.633,873,3.432,874,5.633,875,5.633,876,5.633]],["title/controllers/CodeExplanationController.html",[525,1.156,877,3.944]],["body/controllers/CodeExplanationController.html",[3,0.055,4,0.055,5,0.049,10,0.238,14,0.319,15,0.005,16,0.092,19,0.846,59,0.061,60,0.22,68,1.491,71,1.199,72,1.817,102,1.732,123,1.646,198,3.396,239,0.004,240,0.004,288,1.635,292,0.294,294,1.243,295,0.682,296,0.58,298,1.289,391,2.116,512,0.682,515,4.324,520,0.903,523,0.846,525,1.455,527,1.754,529,2.344,542,2.842,577,3.242,609,3.171,610,2.868,611,3.707,612,4.206,615,3.019,616,2.344,636,2.668,642,2.208,644,2.923,645,2.38,769,4.307,770,3.571,773,2.001,774,4.934,775,4.206,776,2.981,777,3.041,784,2.274,788,2.418,877,6.298,878,3.443,879,5.475,880,5.712,881,4.017,882,6.298,883,6.36,884,7.48,885,6.36,886,8.066,887,5.975,888,7.244,889,4.934,890,5.285,891,6.36,892,5.712,893,6.266,894,5.712,895,4.711,896,4.711,897,6.36,898,4.966,899,6.013,900,6.36]],["title/injectables/CodeExplanationService.html",[17,0.885,893,3.573]],["body/injectables/CodeExplanationService.html",[3,0.053,4,0.053,5,0.047,10,0.229,13,0.931,14,0.344,15,0.005,16,0.083,17,1.377,19,0.812,59,0.058,60,0.211,62,1.662,65,2.277,68,1.842,71,1.481,72,1.782,74,3.339,76,1.097,123,1.58,239,0.003,240,0.003,288,1.592,292,0.401,294,1.698,295,0.931,296,0.792,298,1.592,420,2.284,421,3.339,515,4.241,661,3.339,680,3.339,765,3.854,773,2.472,777,2.918,784,2.182,796,1.947,799,5.557,800,4.317,801,5.605,805,5.819,806,5.998,809,4.805,810,4.142,811,4.317,812,4.317,813,3.99,814,4.52,816,2.701,817,4.317,827,4.317,828,5.136,832,5.557,833,4.317,834,4.52,837,4.317,838,5.02,839,3.733,840,4.317,841,4.317,878,3.916,879,6.227,884,6.795,888,7.055,892,5.48,893,5.557,901,5.48,902,7.856,903,6.103,904,7.856,905,6.103,906,6.103,907,3.99,908,5.071,909,5.071,910,5.071]],["title/controllers/CodeRefactorSuggestionController.html",[525,1.156,911,3.944]],["body/controllers/CodeRefactorSuggestionController.html",[3,0.054,4,0.054,5,0.048,10,0.235,14,0.317,15,0.005,16,0.091,19,0.835,59,0.06,60,0.217,68,1.471,71,1.182,72,1.805,102,1.708,123,1.624,198,3.349,239,0.004,240,0.004,288,1.62,292,0.29,294,1.226,295,0.672,296,0.572,298,1.271,391,2.086,512,0.672,515,4.296,520,0.89,523,0.835,525,1.435,527,1.73,529,2.311,542,2.817,577,3.197,609,3.127,610,2.828,611,3.674,612,4.169,615,2.992,616,2.311,636,2.631,642,2.178,644,2.882,645,2.347,769,4.269,770,3.522,773,1.974,774,4.89,775,4.169,776,2.939,777,2.999,784,2.243,788,2.384,878,3.413,879,5.427,881,3.961,882,6.242,887,5.922,889,4.89,890,5.211,895,4.646,896,4.646,898,4.897,899,6.498,911,6.242,912,7.25,913,5.633,914,6.272,915,7.459,916,6.272,917,7.995,918,5.655,919,6.272,920,4.897,921,6.225,922,5.211,923,6.272,924,6.272]],["title/injectables/CodeRefactorSuggestionService.html",[17,0.885,921,3.573]],["body/injectables/CodeRefactorSuggestionService.html",[3,0.05,4,0.05,5,0.044,10,0.217,13,0.908,14,0.335,15,0.005,16,0.081,17,1.331,19,0.771,59,0.055,60,0.2,62,1.576,65,2.221,68,1.78,71,1.431,72,1.738,74,3.168,76,1.07,123,1.499,239,0.003,240,0.003,288,1.539,292,0.391,294,1.656,295,0.908,296,0.772,298,1.539,420,2.167,421,3.168,498,4.095,515,4.765,523,0.771,574,3.785,661,3.168,680,3.168,719,4.52,765,3.657,773,2.389,777,2.768,784,2.07,796,1.847,799,5.37,800,4.095,801,5.526,805,5.623,806,5.879,809,4.644,810,3.93,811,4.095,812,4.095,813,3.785,814,4.288,816,2.562,817,4.095,818,4.288,819,4.288,820,4.288,821,4.288,827,4.095,828,4.964,832,5.37,833,4.095,834,4.288,837,4.095,838,4.92,839,3.541,840,4.095,841,4.095,878,3.838,879,6.103,899,5.75,907,3.785,908,7.038,909,4.811,910,4.811,912,7.096,915,6.66,920,4.52,921,5.37,925,4.811,926,6.818,927,5.199,928,6.818,929,5.199,930,5.199,931,5.199,932,5.199,933,2.661,934,4.288,935,3.93,936,6.818,937,5.199,938,2.951,939,5.199]],["title/controllers/CodeTestSuggestionController.html",[525,1.156,940,3.944]],["body/controllers/CodeTestSuggestionController.html",[3,0.055,4,0.055,5,0.049,10,0.237,14,0.319,15,0.005,16,0.092,19,0.843,59,0.06,60,0.219,68,1.486,71,1.195,72,1.814,102,1.726,123,1.641,198,3.384,239,0.004,240,0.004,288,1.631,292,0.293,294,1.239,295,0.679,296,0.578,298,1.285,391,2.108,512,0.679,515,4.317,520,0.899,523,0.843,525,1.45,527,1.748,529,2.336,542,2.836,577,3.23,609,3.16,610,2.858,611,3.699,612,4.197,615,3.012,616,2.336,636,2.659,642,2.201,644,2.913,645,2.372,769,4.297,770,3.559,773,1.994,774,4.923,775,4.197,776,2.97,777,3.03,784,2.266,788,2.409,878,3.436,879,5.463,881,4.003,882,6.284,887,5.961,889,4.923,890,5.266,895,4.695,896,4.695,898,4.948,899,6.003,920,4.948,922,5.266,940,6.284,941,5.692,942,6.338,943,7.474,944,6.338,945,8.048,946,6.581,947,6.338,948,6.256,949,6.338,950,6.338]],["title/injectables/CodeTestSuggestionService.html",[17,0.885,948,3.573]],["body/injectables/CodeTestSuggestionService.html",[3,0.051,4,0.051,5,0.045,10,0.221,13,0.917,14,0.339,15,0.005,16,0.082,17,1.348,19,0.786,59,0.056,60,0.204,62,1.607,65,2.242,68,1.803,71,1.449,72,1.754,74,3.23,239,0.003,240,0.003,288,1.558,292,0.395,294,1.671,295,0.917,296,0.779,298,1.558,420,2.209,421,3.23,498,4.176,515,4.701,523,0.786,574,3.86,661,3.23,680,3.23,719,4.609,765,3.729,773,2.419,777,2.822,784,2.111,796,1.883,799,5.439,800,4.176,801,5.556,806,5.027,810,4.007,811,4.176,812,4.176,813,3.86,816,2.612,817,4.176,818,4.372,819,4.372,820,4.372,821,4.372,827,4.176,828,5.027,832,5.439,833,4.176,837,4.176,838,4.957,839,3.611,840,4.176,841,4.176,878,3.867,879,6.149,899,5.219,907,3.86,908,7.105,909,4.905,920,4.609,925,4.905,927,5.301,929,5.301,930,5.301,931,5.301,932,5.301,933,2.713,934,4.372,935,4.007,936,6.905,937,5.301,938,3.009,939,5.301,943,6.71,946,6.813,948,5.439,951,7.689,952,7.689,953,7.689,954,5.903]],["title/classes/CollaboratorsDto.html",[60,0.175,955,3.944]],["body/classes/CollaboratorsDto.html",[3,0.062,4,0.062,5,0.055,6,3.405,10,0.268,11,1.247,13,1.001,14,0.394,15,0.005,16,0.089,31,3.84,59,0.068,60,0.323,208,1.616,239,0.004,240,0.004,292,0.331,439,3.46,508,1.784,512,0.767,513,2.719,516,1.801,519,3.198,520,1.015,522,2.133,523,0.952,955,6.774,956,6.424,957,5.543,958,4.872,959,6.774,960,4.74,961,2.085,962,5.944,963,7.153,964,3.915,965,5.944,966,7.153]],["title/classes/CommitAuthorDto.html",[60,0.175,967,4.197]],["body/classes/CommitAuthorDto.html",[3,0.064,4,0.064,5,0.057,10,0.277,11,1.271,14,0.375,15,0.005,16,0.084,59,0.07,60,0.306,76,1.24,239,0.004,240,0.004,292,0.341,508,1.842,512,0.792,513,2.808,516,1.837,519,3.26,520,1.048,521,3.416,522,2.203,523,0.983,593,5.25,662,2.638,967,7.35,968,6.634,969,9.47,970,5.588,971,6.005,972,7.387,973,7.387,974,5.472]],["title/injectables/CommitAuthorsService.html",[17,0.885,975,3.573]],["body/injectables/CommitAuthorsService.html",[3,0.051,4,0.051,5,0.045,10,0.221,13,0.916,14,0.338,15,0.005,16,0.094,17,1.346,18,3.599,19,0.784,20,2.81,22,1.348,23,2.35,24,1.734,25,1.988,26,2.139,59,0.056,60,0.204,62,2.091,64,1.781,65,2.013,67,3.865,68,2.123,69,3.599,71,1.611,72,1.975,77,2.928,82,3.465,83,3.338,102,1.605,119,2.431,123,1.526,239,0.003,240,0.003,248,5.235,288,1.557,292,0.418,294,1.67,295,0.916,296,0.779,298,1.732,349,3.853,656,1.885,788,2.24,796,1.88,975,5.433,976,8.432,977,5.293,978,7.681,979,6.898,980,5.894,981,5.894,982,7.681,983,5.894,984,7.681,985,5.894,986,6.898,987,5.894,988,2.017,989,1.625,990,3.722,991,4.897,992,5.894,993,5.894,994,4,995,3.722,996,4.601,997,4.355,998,2.939]],["title/classes/CommitsDto.html",[60,0.175,999,4.197]],["body/classes/CommitsDto.html",[3,0.064,4,0.064,5,0.057,10,0.278,11,1.275,14,0.376,15,0.005,16,0.085,59,0.071,60,0.307,76,1.241,239,0.004,240,0.004,292,0.343,508,1.85,512,0.795,513,2.82,516,1.841,519,3.268,520,1.053,521,3.424,522,2.212,523,0.987,970,5.601,999,7.369,1000,6.662,1001,8.519,1002,7.964,1003,8.868,1004,7.418,1005,7.418,1006,6.662]],["title/injectables/CommitsService.html",[17,0.885,1007,3.573]],["body/injectables/CommitsService.html",[3,0.047,4,0.047,5,0.042,10,0.203,13,1.06,14,0.347,15,0.005,16,0.092,17,1.274,18,3.407,19,0.722,20,2.72,22,1.241,23,2.163,24,1.596,25,1.83,26,1.969,59,0.052,60,0.188,62,1.98,64,1.639,65,1.906,67,3.741,68,2.142,69,3.407,71,1.652,72,2.029,77,3.042,82,3.705,83,3.564,102,1.477,119,2.544,123,1.404,239,0.003,240,0.003,248,5.129,288,1.474,292,0.422,294,1.713,295,0.939,296,0.799,298,1.776,351,3.426,656,2.253,788,2.062,796,1.73,988,1.856,989,1.496,990,3.426,994,4.936,995,4.593,996,4.235,997,4.18,998,2.705,1007,5.143,1008,4.872,1009,7.271,1010,7.271,1011,6.53,1012,5.425,1013,5.425,1014,7.271,1015,5.425,1016,7.271,1017,5.425,1018,7.271,1019,5.425,1020,6.53,1021,5.425,1022,4.507,1023,5.425,1024,5.425,1025,5.425,1026,5.425]],["title/modules/ContributionModule.html",[241,1.291,262,3.741]],["body/modules/ContributionModule.html",[3,0.057,4,0.057,5,0.051,15,0.005,16,0.098,19,0.885,24,1.958,59,0.063,60,0.23,64,2.01,197,2.891,239,0.004,240,0.004,241,2.121,243,2.49,244,3.256,249,3.256,250,2.569,251,2.529,254,3.422,255,3.542,262,7.61,276,5.897,287,3.481,302,3.118,330,4.516,332,3,333,3.552,334,3.672,335,3.641,336,5.425,387,4.541,388,3.948,389,3.948,527,2.288,742,1.812,1027,5.975,1028,5.975,1029,5.975,1030,6.653,1031,7.393,1032,6.653,1033,7.06,1034,5.528,1035,5.975,1036,6.653,1037,4.706]],["title/classes/ContributionPageMetaDto.html",[49,3.741,60,0.175]],["body/classes/ContributionPageMetaDto.html",[1,7.135,3,0.047,4,0.047,5,0.042,6,3.235,10,0.205,11,1.052,13,1.102,14,0.407,15,0.005,16,0.079,49,5.424,59,0.052,60,0.19,62,1.994,118,4.698,119,1.849,125,4.837,149,3.353,187,2.02,195,4.788,239,0.003,240,0.003,292,0.452,294,1.072,295,0.588,296,0.5,439,2.186,456,1.749,504,2.707,508,1.367,512,1.033,513,3.661,516,2.032,519,2.699,520,0.778,523,0.73,747,3.574,870,2.213,961,2.267,988,2.506,1038,6.107,1039,4.923,1040,2.543,1041,6.576,1042,6.576,1043,3.365,1044,3.229,1045,6.576,1046,4.923,1047,6.518,1048,7.323,1049,5.391,1050,5.18,1051,5.717,1052,5.037,1053,5.482,1054,4.061,1055,5.482,1056,6.084,1057,6.576,1058,5.482,1059,4.555,1060,5.482,1061,3.584,1062,5.482,1063,4.28,1064,5.482,1065,3.878,1066,4.923,1067,3,1068,4.923,1069,5.482]],["title/classes/ContributionPageOptionsDto.html",[60,0.175,1070,3.741]],["body/classes/ContributionPageOptionsDto.html",[3,0.047,4,0.047,5,0.042,10,0.203,11,1.043,13,0.978,14,0.396,15,0.005,16,0.078,31,3.211,59,0.069,60,0.251,78,3.49,93,2.595,100,2.847,117,2.483,119,2.463,141,2.485,143,3.671,187,3.225,239,0.003,240,0.003,292,0.434,296,0.925,504,2.676,508,1.349,512,1.007,520,0.768,522,1.613,652,2.847,653,3.211,816,2.393,870,1.634,933,2.485,988,1.851,989,1.492,1040,2.52,1043,3.335,1044,2.995,1052,4.874,1070,5.375,1071,6.029,1072,2.96,1073,5.173,1074,3.971,1075,3.784,1076,7.584,1077,3.572,1078,7.354,1079,3.874,1080,4.372,1081,5.375,1082,5.408,1083,4.857,1084,2.757,1085,3.699,1086,2.697,1087,2.888,1088,3.12,1089,4.083,1090,2.757,1091,2.96,1092,3.037,1093,2.757,1094,3.037,1095,3.211,1096,2.82,1097,2.96,1098,2.96,1099,3.699,1100,3.037,1101,2.757,1102,3.037,1103,3.211,1104,3.21,1105,3.098,1106,4.186,1107,5.375,1108,6.029,1109,5.408]],["title/injectables/ContributionService.html",[17,0.885,1031,3.573]],["body/injectables/ContributionService.html",[3,0.04,4,0.04,5,0.036,10,0.176,13,1.099,14,0.327,15,0.005,16,0.095,17,1.155,18,2.202,19,0.625,20,3.016,22,1.075,23,1.874,24,1.383,25,1.585,26,1.705,59,0.045,60,0.162,62,1.794,64,2.299,65,1.995,68,2.248,71,0.886,72,1.936,76,0.961,77,2.809,78,3.687,80,6.421,82,3.344,85,2.159,88,4.712,90,3.189,91,1.786,92,3.904,93,1.68,94,2.967,95,3.904,97,3.904,99,3.91,100,2.585,102,1.794,104,3.904,118,3.518,119,1.663,122,1.383,123,1.705,125,4.026,157,4.161,160,5.144,161,4.66,197,2.042,208,0.875,239,0.003,240,0.003,288,1.335,292,0.381,294,1.612,295,0.884,296,0.752,298,1.542,334,2.079,335,2.571,336,3.072,387,2.571,388,2.788,389,2.788,796,1.499,988,1.608,989,1.296,1031,4.66,1034,3.904,1044,1.608,1067,2.571,1070,6.109,1075,4.529,1076,3.904,1078,4.219,1089,2.343,1090,2.395,1110,4.219,1111,4.472,1112,5.917,1113,7.609,1114,4.698,1115,6.833,1116,6.833,1117,4.698,1118,6.588,1119,4.472,1120,4.698,1121,3.189,1122,4.698,1123,4.698,1124,4.698,1125,4.698,1126,3.072,1127,3.323,1128,3.904,1129,3.668,1130,4.219,1131,3.48,1132,4.219,1133,4.219,1134,4.698,1135,4.219,1136,4.219,1137,4.698,1138,4.219,1139,4.219,1140,4.698,1141,4.219,1142,3.904,1143,4.698,1144,3.904,1145,3.904,1146,3.189,1147,2.874,1148,2.874,1149,4.219,1150,6.588,1151,4.698,1152,4.698,1153,4.698,1154,4.698,1155,4.219,1156,4.698,1157,4.698,1158,2.638,1159,4.698,1160,3.189,1161,3.668,1162,4.698,1163,4.698,1164,4.698,1165,4.88]],["title/classes/ContributionsByProjectDto.html",[54,3.573,60,0.175]],["body/classes/ContributionsByProjectDto.html",[3,0.06,4,0.06,5,0.054,6,3.356,10,0.262,11,1.229,13,0.991,14,0.391,15,0.005,16,0.088,54,6.05,59,0.067,60,0.32,78,3.941,100,3.356,117,2.249,143,4.218,239,0.004,240,0.004,292,0.323,296,0.78,504,2.423,508,1.742,512,0.749,520,0.992,522,2.084,523,0.93,961,1.679,964,3.824,1038,6.335,1077,2.656,1095,3.092,1099,3.561,1101,3.561,1103,3.785,1105,3.651,1166,6.275,1167,6.987,1168,4.031,1169,5.592,1170,5.455,1171,5.455]],["title/classes/ContributionsPageDto.html",[52,3.741,60,0.175]],["body/classes/ContributionsPageDto.html",[3,0.055,4,0.055,5,0.049,6,3.667,10,0.24,11,1.166,14,0.396,15,0.005,16,0.089,52,6.008,59,0.061,60,0.308,62,1.747,125,4.937,239,0.004,240,0.004,292,0.411,294,1.254,295,0.688,296,0.585,439,3.235,504,2.581,508,1.6,512,0.869,519,3.278,520,0.911,522,1.913,873,5.275,958,3.603,960,4.342,964,3.511,988,2.196,1038,6.923,1065,7.072,1067,3.511,1172,5.763,1173,7.285,1174,6.543,1175,8.112,1176,5.763,1177,5.763,1178,5.763,1179,6.417,1180,5.763,1181,5.763,1182,7.988,1183,4.195,1184,5.763,1185,5.763]],["title/classes/ContributionsTimeframeDto.html",[39,3.573,60,0.175]],["body/classes/ContributionsTimeframeDto.html",[3,0.055,4,0.055,5,0.049,6,3.496,10,0.241,11,1.169,13,0.955,14,0.39,15,0.005,16,0.089,34,7.411,37,3.715,38,4.555,39,5.751,59,0.061,60,0.308,78,3.849,100,3.19,109,6.956,117,2.397,138,6.956,143,4.134,239,0.004,240,0.004,292,0.376,296,0.853,504,2.335,508,1.606,512,0.871,520,0.914,522,1.92,523,0.857,961,1.547,964,3.524,1038,6.599,1077,3.09,1079,3.438,1080,4.341,1095,2.85,1099,3.282,1101,3.282,1103,3.943,1104,3.822,1105,3.803,1106,3.715,1168,3.715,1169,5.315,1170,5.028,1171,5.028,1186,5.783,1187,5.783,1188,6.44,1189,6.44,1190,5.783]],["title/classes/Contributor.html",[31,2.235,60,0.175]],["body/classes/Contributor.html",[3,0.057,4,0.057,5,0.051,6,3.537,8,4.224,10,0.247,11,1.187,13,0.966,14,0.393,15,0.005,16,0.086,31,4.179,59,0.079,60,0.327,76,1.228,88,4.955,208,1.678,239,0.004,240,0.004,292,0.382,295,0.885,439,2.634,456,2.107,508,1.647,516,1.871,519,3.48,520,0.937,521,3.19,522,1.969,523,1.199,656,2.145,747,4.032,754,5.401,957,3.92,958,3.708,960,4.399,964,3.614,1191,7.489,1192,5.488,1193,6.604,1194,6.604,1195,4.672,1196,4.672,1197,4.171,1198,5.156,1199,5.931,1200,5.488]],["title/controllers/ContributorController.html",[525,1.156,1201,3.944]],["body/controllers/ContributorController.html",[3,0.055,4,0.055,5,0.049,10,0.239,14,0.32,15,0.005,16,0.095,19,0.849,25,2.153,26,2.317,31,2.825,59,0.061,60,0.221,71,1.203,72,1.82,77,2.615,119,2.041,197,4.182,198,4.316,239,0.004,240,0.004,288,1.638,292,0.295,294,1.248,295,0.684,296,0.582,298,1.294,385,3.493,391,2.689,504,1.673,512,0.684,520,0.906,525,1.46,527,1.76,529,2.352,542,2.848,614,3.278,615,3.025,616,2.352,642,2.216,645,2.389,784,2.282,957,5.266,989,1.76,1201,6.312,1202,5.732,1203,9.624,1204,6.383,1205,6.909,1206,4.983,1207,7.26,1208,5.988,1209,5.286,1210,4.663,1211,6.383,1212,6.276,1213,6.383,1214,3.451,1215,2.878,1216,2.991,1217,2.878,1218,2.991,1219,5.604,1220,4.728,1221,5.286,1222,5.303,1223,6.383,1224,5.732,1225,4.983,1226,5.732,1227,6.383]],["title/controllers/ContributorInsightsController.html",[525,1.156,1228,3.944]],["body/controllers/ContributorInsightsController.html",[3,0.041,4,0.041,5,0.036,10,0.176,14,0.374,15,0.005,16,0.088,19,0.626,25,1.587,26,1.708,31,2.082,59,0.045,60,0.163,71,1.555,72,2.034,77,3.053,78,2.63,100,3.534,102,1.796,119,2.383,143,3.778,144,2.323,197,3.309,239,0.003,240,0.003,288,1.336,292,0.381,294,1.613,295,0.885,296,0.752,298,1.672,385,2.574,391,2.193,504,1.233,512,0.885,520,0.668,525,1.076,527,1.297,529,1.734,542,3.326,614,3.523,615,3.252,616,1.734,642,1.633,645,3.088,742,2.57,784,1.682,907,4.312,918,6.371,957,5.602,959,6.443,1212,6.785,1214,3.709,1215,2.121,1216,2.205,1217,2.121,1218,2.205,1219,4.809,1220,3.484,1221,4.312,1222,3.909,1224,4.225,1226,7.411,1228,5.149,1229,7.803,1230,4.225,1231,4.704,1232,8.689,1233,8.689,1234,8.689,1235,8.689,1236,4.704,1237,7.4,1238,4.704,1239,7.843,1240,6.671,1241,6.594,1242,4.139,1243,8.252,1244,4.704,1245,4.704,1246,4.704,1247,4.704,1248,4.704,1249,4.704,1250,6.594,1251,4.704,1252,4.704,1253,4.704,1254,4.704,1255,4.225,1256,4.704,1257,4.704,1258,4.704,1259,4.704,1260,4.704,1261,4.704,1262,4.704,1263,4.704,1264,4.704]],["title/modules/ContributorModule.html",[241,1.291,263,3.741]],["body/modules/ContributorModule.html",[3,0.061,4,0.061,5,0.055,15,0.005,16,0.096,19,0.948,24,2.097,31,3.153,59,0.068,60,0.246,64,2.153,197,3.761,239,0.004,240,0.004,241,2.213,243,2.667,244,3.396,249,3.396,250,2.751,251,2.708,263,7.483,275,6.857,287,3.631,302,3.339,385,3.899,386,5.92,387,3.899,388,4.229,389,4.229,527,2.387,1201,7.279,1228,7.279,1265,7.125,1266,7.125,1267,7.125,1268,7.125,1269,7.125,1270,6.399]],["title/classes/ContributorPullRequestsDto.html",[60,0.175,1271,3.741]],["body/classes/ContributorPullRequestsDto.html",[3,0.048,4,0.048,5,0.043,10,0.208,11,1.06,13,0.986,14,0.397,15,0.005,16,0.079,59,0.07,60,0.255,78,3.525,93,2.637,100,2.894,117,2.492,119,2.477,141,2.546,143,3.707,187,3.257,239,0.003,240,0.003,292,0.437,296,0.928,504,2.629,508,1.382,512,1.014,520,0.786,522,1.652,816,2.452,870,1.674,933,2.546,988,1.896,989,1.528,1040,2.561,1043,3.389,1044,2.524,1052,4.913,1074,4.036,1075,3.846,1077,3.597,1079,3.938,1080,4.426,1084,2.824,1085,3.759,1086,2.763,1087,2.958,1088,3.196,1089,4.588,1090,2.824,1091,3.032,1092,3.111,1093,2.824,1094,3.111,1095,3.264,1096,2.889,1097,3.032,1098,3.032,1099,3.759,1100,3.111,1101,2.824,1102,3.111,1103,3.264,1104,3.289,1105,3.148,1106,4.254,1240,5.463,1271,5.463,1272,6.128,1273,4.604,1274,8.29,1275,7.646,1276,7.444,1277,5.541,1278,5.541,1279,5.541]],["title/modules/CouponModule.html",[241,1.291,264,3.573]],["body/modules/CouponModule.html",[3,0.062,4,0.062,5,0.056,15,0.005,16,0.093,19,0.965,24,2.135,59,0.069,60,0.251,64,2.192,239,0.004,240,0.004,241,2.237,243,2.715,244,3.433,249,3.433,250,2.801,251,2.757,254,3.608,255,3.735,264,7.259,287,3.043,302,3.399,433,5.131,630,7.474,1280,6.514,1281,6.514,1282,6.514,1283,7.254,1284,6.514,1285,7.254,1286,7.254]],["title/injectables/CouponService.html",[17,0.885,630,3.573]],["body/injectables/CouponService.html",[3,0.054,4,0.054,5,0.048,10,0.233,14,0.347,15,0.005,16,0.088,17,1.393,18,2.914,19,0.828,20,2.868,22,1.423,23,2.48,24,1.83,59,0.059,60,0.215,62,2.165,64,1.879,65,1.63,67,3.944,68,2.055,69,3.726,71,1.652,72,2.003,76,1.233,82,2.521,83,2.702,98,2.44,102,1.693,123,1.61,235,3.403,239,0.004,240,0.004,288,1.611,292,0.427,294,1.713,295,0.94,296,0.799,298,1.776,433,4.398,514,4.606,515,4.509,630,5.624,773,2.502,788,2.363,796,1.984,998,3.1,1284,5.584,1287,5.584,1288,7.951,1289,7.951,1290,6.218,1291,6.218,1292,7.951,1293,6.218,1294,7.951,1295,6.218,1296,7.951,1297,6.218,1298,6.218,1299,6.218,1300,6.218,1301,6.218,1302,5.584,1303,1.887,1304,6.218,1305,5.584,1306,6.218]],["title/classes/CreateBlogSummaryDto.html",[60,0.175,762,3.741]],["body/classes/CreateBlogSummaryDto.html",[3,0.046,4,0.046,5,0.041,10,0.202,11,1.04,13,0.936,14,0.413,15,0.005,16,0.069,59,0.051,60,0.25,76,1.295,117,1.76,141,2.474,239,0.003,240,0.003,292,0.434,508,1.343,512,1.006,513,3.567,516,2.024,519,3.534,520,0.764,521,3.519,522,1.606,523,1.249,542,3.434,762,5.359,766,6.497,778,7.455,807,6.447,809,5.575,829,4.425,853,5.959,961,2.099,1168,3.106,1307,8.611,1308,4.474,1309,8.171,1310,8.171,1311,7.338,1312,5.359,1313,4.835,1314,4.835,1315,6.052,1316,3.988,1317,5.359,1318,5.359,1319,5.359,1320,5.359,1321,5.359,1322,5.359,1323,5.359,1324,5.359,1325,5.359,1326,4.835,1327,3.688,1328,3.809,1329,4.835,1330,3.809,1331,4.835,1332,4.474,1333,6.011,1334,6.011,1335,6.011,1336,6.789,1337,4.835,1338,5.161,1339,3.195,1340,3.195,1341,3.809,1342,3.809,1343,3.809,1344,3.809,1345,3.809,1346,4.474,1347,3.988]],["title/classes/CreateEndorsementDto.html",[60,0.175,1348,3.573]],["body/classes/CreateEndorsementDto.html",[3,0.047,4,0.079,5,0.042,10,0.204,11,1.049,13,1.01,14,0.412,15,0.005,16,0.07,20,2.266,59,0.052,60,0.252,76,1.19,117,1.776,193,3.709,208,1.636,239,0.003,240,0.003,292,0.435,296,0.665,496,4.773,508,1.361,512,1.01,513,3.48,516,2.077,519,3.472,520,0.774,521,3.392,522,1.627,523,1.254,656,2.078,662,3.111,672,4.287,744,5.407,961,2.264,965,4.535,1095,2.415,1103,3.231,1105,3.116,1338,5.548,1348,5.164,1349,8.641,1350,4.535,1351,7.388,1352,7.388,1353,7.388,1354,7.388,1355,7.81,1356,6.556,1357,5.457,1358,5.457,1359,5.7,1360,5.457,1361,5.457,1362,5.457,1363,5.457,1364,6.066,1365,4.535,1366,5.457,1367,5.457,1368,5.457,1369,5.457,1370,5.457,1371,5.457,1372,4.901,1373,5.457,1374,4.261]],["title/classes/CreateInsightDto.html",[60,0.175,1375,3.741]],["body/classes/CreateInsightDto.html",[3,0.054,4,0.054,5,0.048,10,0.233,11,1.144,14,0.408,15,0.005,16,0.088,20,2.471,59,0.059,60,0.303,76,1.167,203,3.617,239,0.004,240,0.004,292,0.405,295,1.024,420,2.331,439,3.175,456,1.987,508,1.553,512,0.94,513,3.334,516,2.029,519,3.407,520,0.884,521,3.074,522,1.857,523,1.167,582,5.403,656,1.374,747,4.512,752,4.614,754,5.204,755,3.409,958,4.469,960,4.512,962,5.175,964,3.409,1044,3.164,1196,5.63,1197,5.541,1198,6.215,1375,5.896,1376,7.681,1377,5.175,1378,4.712,1379,6.229,1380,5.594,1381,6.229,1382,6.388,1383,6.229,1384,4.228,1385,5.175,1386,4.614,1387,6.229,1388,3.934]],["title/classes/CreateInsightMemberDto.html",[60,0.175,1389,3.944]],["body/classes/CreateInsightMemberDto.html",[3,0.063,4,0.063,5,0.056,10,0.273,11,1.262,14,0.373,15,0.005,16,0.084,59,0.07,60,0.304,76,1.235,239,0.004,240,0.004,292,0.337,508,1.82,512,0.782,513,2.774,516,1.823,519,3.236,520,1.036,522,2.176,523,0.971,593,5.936,974,5.406,1376,7.297,1378,4.983,1386,6.505,1389,6.856,1390,6.064,1391,6.856,1392,7.887,1393,6.554,1394,7.298,1395,7.887]],["title/classes/CreateIssueSummaryDto.html",[60,0.175,1396,3.741]],["body/classes/CreateIssueSummaryDto.html",[3,0.045,4,0.045,5,0.04,10,0.194,11,1.013,13,0.922,14,0.414,15,0.005,16,0.067,59,0.049,60,0.244,76,1.306,117,1.715,141,2.382,239,0.003,240,0.003,292,0.439,508,1.293,512,1.018,513,3.609,516,2.006,519,3.561,520,0.736,521,3.584,522,1.546,523,1.304,542,3.405,794,6.925,807,6.364,809,5.502,829,4.313,853,5.882,961,2.067,1168,2.99,1308,4.307,1311,7.197,1312,5.936,1313,4.655,1314,4.655,1315,5.936,1316,3.839,1317,5.223,1318,5.223,1319,5.223,1320,5.223,1321,5.223,1322,5.223,1323,5.223,1324,5.223,1325,5.223,1326,4.655,1327,3.594,1328,3.667,1329,4.655,1330,3.667,1331,4.655,1332,4.307,1333,5.859,1334,5.859,1335,5.859,1336,6.659,1337,4.655,1338,5.062,1339,3.076,1340,3.076,1341,3.667,1342,3.667,1343,3.667,1344,3.667,1345,3.667,1346,4.307,1347,3.839,1396,5.223,1397,8.677,1398,8.014,1399,8.014,1400,8.014,1401,4.786,1402,5.183]],["title/classes/CreateLogDto.html",[60,0.175,1403,3.944]],["body/classes/CreateLogDto.html",[3,0.061,4,0.061,5,0.054,10,0.263,11,1.234,14,0.367,15,0.005,16,0.067,59,0.067,60,0.297,76,1.272,239,0.004,240,0.004,292,0.428,296,0.918,480,6.864,496,6.059,504,2.718,508,1.753,512,0.993,521,3.727,522,2.096,850,5.346,1105,4.12,1403,6.702,1404,8.668,1405,6.312,1406,9.267,1407,7.028,1408,7.028,1409,7.028]],["title/classes/CreateUserCollaborationDto.html",[60,0.175,1410,3.944]],["body/classes/CreateUserCollaborationDto.html",[3,0.058,4,0.058,5,0.052,10,0.254,11,1.207,14,0.395,15,0.005,16,0.08,59,0.065,60,0.29,76,1.291,208,1.698,239,0.004,240,0.004,292,0.388,391,2.792,449,5.361,508,1.69,512,0.9,513,3.191,516,1.979,519,3.361,520,0.962,521,3.521,522,2.021,523,1.117,806,4.431,850,5.651,1359,6.554,1410,6.554,1411,7.577,1412,5.632,1413,7.059,1414,8.394,1415,8.394,1416,7.539,1417,6.778,1418,6.778,1419,6.778,1420,6.778,1421,5.632,1422,3.709,1423,4.794,1424,6.778,1425,6.087]],["title/classes/CreateUserHighlightDto.html",[60,0.175,1426,3.741]],["body/classes/CreateUserHighlightDto.html",[3,0.043,4,0.043,5,0.039,10,0.188,11,0.991,14,0.415,15,0.005,16,0.066,59,0.048,60,0.238,76,1.323,117,1.221,144,2.43,199,5.547,201,5.131,208,1.753,239,0.003,240,0.003,292,0.425,296,0.773,404,5.067,420,3.175,439,3.143,508,1.251,512,0.985,513,3.225,516,2.081,519,3.278,520,0.712,521,3.549,522,1.496,523,1.223,662,3.082,672,4.341,755,2.746,794,4.681,806,3.281,829,5.44,856,3.169,938,3.515,958,3.872,960,4.141,1077,1.907,1095,3.052,1103,3.487,1105,3.364,1168,2.895,1183,3.281,1411,7.822,1421,4.169,1425,4.506,1426,5.108,1427,4.506,1428,6.152,1429,7.88,1430,5.018,1431,5.018,1432,6.193,1433,4.356,1434,5.384,1435,3.052,1436,5.018,1437,5.018,1438,4.218,1439,5.73,1440,6.193,1441,6.193,1442,4.506,1443,5.018,1444,5.018,1445,5.018,1446,7.076,1447,5.018,1448,6.896,1449,6.896,1450,5.018,1451,6.193,1452,5.018,1453,5.018,1454,6.896,1455,4.506,1456,2.978,1457,4.506,1458,2.221,1459,5.018,1460,4.506]],["title/classes/CreateUserListDto.html",[60,0.175,1195,3.573]],["body/classes/CreateUserListDto.html",[3,0.053,4,0.053,5,0.047,6,3.614,8,4.462,10,0.231,11,1.137,13,0.848,14,0.405,15,0.005,16,0.083,31,4.075,59,0.075,60,0.318,76,1.231,88,4.45,208,1.715,239,0.004,240,0.004,292,0.403,295,1.021,439,3.154,456,1.967,508,1.537,512,0.936,513,3.318,516,2.023,519,3.394,520,0.875,521,3.054,522,1.838,523,1.162,656,1.926,747,4.495,752,4.566,754,5.17,846,5.122,957,5.181,958,4.44,960,4.495,964,3.374,1191,7.652,1192,5.122,1195,5.593,1196,5.593,1197,5.514,1198,6.174,1199,5.536,1200,5.122,1461,6.165,1462,6.165,1463,6.165,1464,6.165,1465,6.165]],["title/injectables/CustomLogger.html",[17,0.885,1466,3.741]],["body/injectables/CustomLogger.html",[3,0.041,4,0.041,5,0.037,10,0.179,11,0.959,14,0.368,15,0.005,16,0.079,17,1.17,19,0.637,59,0.046,60,0.165,62,1.303,65,2.014,71,1.648,72,2.08,74,4.55,76,1.343,117,1.164,239,0.003,240,0.003,288,1.353,292,0.429,294,1.77,295,0.971,296,0.826,298,1.772,304,5.218,305,2.619,480,6.476,496,6.863,504,2.014,773,2.751,796,1.527,838,5.085,850,5.85,1040,2.317,1121,6.147,1466,5.692,1467,8.512,1468,4.297,1469,7.684,1470,9.293,1471,6.901,1472,6.908,1473,7.684,1474,6.901,1475,6.674,1476,8.314,1477,6.406,1478,6.674,1479,6.674,1480,4.785,1481,6.674,1482,8.314,1483,4.785,1484,6.674,1485,4.785,1486,6.674,1487,4.785,1488,6.674,1489,4.785,1490,4.785,1491,4.785,1492,4.297,1493,4.785,1494,4.785,1495,4.785,1496,4.785,1497,8.744,1498,4.785,1499,4.785,1500,6.674]],["title/modules/CustomerModule.html",[241,1.291,265,3.429]],["body/modules/CustomerModule.html",[3,0.062,4,0.062,5,0.056,15,0.005,16,0.093,19,0.965,24,2.135,59,0.069,60,0.251,64,2.192,239,0.004,240,0.004,241,2.237,243,2.715,244,3.433,249,3.433,250,2.801,251,2.757,254,3.608,255,3.735,265,6.966,287,3.043,302,3.399,373,5.131,622,7.172,1501,6.514,1502,6.514,1503,6.514,1504,7.254,1505,6.514,1506,7.254,1507,7.254]],["title/injectables/CustomerService.html",[17,0.885,622,3.429]],["body/injectables/CustomerService.html",[3,0.052,4,0.052,5,0.046,10,0.226,13,1.038,14,0.362,15,0.005,16,0.087,17,1.365,19,0.801,20,2.833,22,1.378,23,2.401,24,1.772,59,0.057,60,0.208,62,2.121,64,1.819,65,1.578,67,3.896,68,1.826,71,1.72,72,2.07,76,1.223,82,3.158,83,3.384,239,0.003,240,0.003,288,1.578,292,0.437,294,1.784,295,0.978,296,0.832,298,1.85,373,4.259,551,2.744,622,5.287,656,2.085,773,2.716,796,1.921,998,3.883,1505,5.407,1508,5.407,1509,6.994,1510,7.788,1511,7.788,1512,6.021,1513,6.021,1514,7.788,1515,7.788,1516,8.197,1517,6.021,1518,6.021,1519,7.788,1520,6.021,1521,7.788,1522,6.021,1523,6.021,1524,6.021,1525,6.021,1526,6.021,1527,6.021]],["title/classes/DatabaseLoggerMiddleware.html",[60,0.175,363,3.944]],["body/classes/DatabaseLoggerMiddleware.html",[3,0.074,4,0.039,5,0.035,10,0.17,11,0.926,13,0.802,14,0.371,15,0.005,16,0.071,19,0.606,22,1.041,59,0.061,60,0.157,62,1.239,65,2.336,71,1.794,76,1.311,102,1.239,117,1.107,239,0.003,240,0.003,288,1.306,292,0.44,294,2.018,295,1.02,296,0.853,298,1.857,299,6.07,317,3.781,318,3.781,319,3.781,363,5.838,458,5.825,480,5.539,504,1.96,508,1.135,661,2.49,680,2.49,773,2.559,838,3.525,850,4.95,1121,6.353,1214,3.995,1472,7.404,1474,6.715,1528,8.667,1529,3.781,1530,5.352,1531,7.478,1532,6.442,1533,6.442,1534,6.442,1535,6.442,1536,6.442,1537,6.442,1538,6.442,1539,6.442,1540,6.442,1541,10.43,1542,4.55,1543,6.442,1544,4.55,1545,6.442,1546,4.55,1547,6.442,1548,4.55,1549,6.442,1550,4.55,1551,1.757,1552,6.442,1553,4.55,1554,6.442,1555,4.55,1556,4.55,1557,4.55,1558,4.55,1559,4.55,1560,8.132,1561,4.55,1562,7.478,1563,4.55,1564,4.086,1565,4.55,1566,7.478,1567,4.55,1568,4.55,1569,4.55]],["title/entities/DbBakedRepo.html",[346,3.303,1303,1.088]],["body/entities/DbBakedRepo.html",[3,0.05,4,0.05,5,0.045,10,0.219,11,1.098,13,0.967,14,0.397,15,0.005,16,0.086,20,2.982,22,1.337,59,0.056,60,0.202,76,0.965,122,1.72,193,3.837,239,0.003,240,0.003,292,0.417,295,0.627,346,4.995,351,5.7,512,0.967,516,1.994,520,0.83,523,1.133,656,1.991,662,3.061,672,3.729,743,6.861,744,5.659,865,1.917,961,1.836,1040,2.03,1073,3.692,1158,5.258,1303,1.645,1327,3.894,1570,8.41,1571,4.135,1572,8.511,1573,2.913,1574,5.846,1575,4.534,1576,4.534,1577,5.404,1578,5.25,1579,4.33,1580,7.64,1581,5.846,1582,6.348,1583,3.541,1584,4.079,1585,5.659,1586,5.846,1587,7.64,1588,5.25,1589,3.729,1590,2.816,1591,5.659,1592,2.915,1593,3.089,1594,2.001,1595,2.001,1596,3.511,1597,5.25,1598,5.846,1599,3.372,1600,5.186,1601,5.846]],["title/entities/DbCommitAuthors.html",[349,3.303,1303,1.088]],["body/entities/DbCommitAuthors.html",[3,0.054,4,0.054,5,0.049,10,0.237,11,1.154,13,0.861,14,0.388,15,0.005,16,0.089,22,1.445,59,0.06,60,0.218,76,1.014,91,3.052,122,1.859,239,0.004,240,0.004,292,0.408,295,0.677,349,5.251,351,5.869,456,2.562,512,0.946,516,1.667,520,0.896,523,0.841,656,2.05,662,3.036,865,2.071,961,1.518,970,5.072,971,5.451,1040,2.193,1073,3.989,1158,5.387,1303,1.729,1327,4.093,1573,2.161,1575,4.766,1576,4.766,1577,5.68,1579,4.678,1583,3.151,1584,4.288,1585,4.678,1589,3.92,1590,2.959,1591,5.948,1592,3.149,1593,2.748,1594,2.161,1595,2.161,1596,4.058,1597,5.672,1599,3.643,1600,4.287,1602,5.672,1603,8.83,1604,5.248,1605,6.316,1606,8.031,1607,6.316,1608,6.316,1609,6.316]],["title/entities/DbCommits.html",[351,3.191,1303,1.088]],["body/entities/DbCommits.html",[3,0.042,4,0.042,5,0.038,10,0.184,11,0.975,13,0.978,14,0.407,15,0.005,16,0.084,22,1.122,59,0.047,60,0.17,76,1.061,122,1.443,144,2.391,239,0.003,240,0.003,292,0.432,295,0.834,346,5.493,348,2.499,349,5.493,351,4.286,512,1.003,516,2.035,520,0.696,523,1.174,656,2.103,662,3.103,742,1.848,865,1.608,961,1.87,970,6.023,971,4.607,1001,6.99,1002,6.095,1006,6.095,1040,1.702,1073,3.096,1158,2.752,1303,1.461,1327,4.282,1573,3.019,1575,4.986,1576,4.986,1577,5.942,1582,6.467,1583,3.58,1584,3.623,1585,3.631,1589,3.312,1590,3.251,1592,2.444,1593,3.123,1594,1.678,1595,1.678,1596,3.577,1599,2.828,1600,3.328,1610,4.402,1611,8.821,1612,8.821,1613,8.821,1614,8.821,1615,7.784,1616,3.539,1617,4.902,1618,4.381,1619,4.902,1620,6.786,1621,3.384,1622,4.485,1623,4.902,1624,4.902,1625,4.902,1626,6.786,1627,4.902,1628,6.786,1629,4.902,1630,4.902,1631,4.902,1632,3.967,1633,3.967,1634,4.902,1635,4.902,1636,4.902]],["title/entities/DbContribution.html",[336,3.303,1303,1.088]],["body/entities/DbContribution.html",[3,0.034,4,0.034,5,0.03,10,0.147,11,0.832,13,0.964,14,0.406,15,0.005,16,0.072,20,1.798,22,0.899,31,3.583,59,0.037,60,0.136,76,0.959,91,2.886,93,2.715,98,2.98,117,2.187,122,1.156,144,3.168,193,3.651,195,2.568,197,2.517,198,3.092,208,1.078,239,0.003,240,0.003,292,0.431,295,0.814,296,0.772,332,3.424,333,2.097,336,3.786,456,2.422,512,1.001,516,2.057,520,0.557,523,1.197,583,2.827,652,2.7,653,3.045,656,1.786,662,3.1,672,3.952,742,2.205,744,4.29,865,1.288,870,2.295,935,3.931,961,1.653,1040,1.364,1107,5.096,1108,5.716,1242,3.489,1303,1.247,1327,3.87,1435,3.36,1458,2.563,1551,3.472,1573,2.899,1575,4.507,1576,4.507,1577,5.371,1583,2.98,1584,3.092,1585,2.909,1589,2.827,1590,3.122,1592,1.958,1593,2.999,1594,1.344,1595,1.344,1596,3.162,1600,2.666,1616,2.048,1618,3.02,1621,2.888,1622,4.054,1632,2.952,1633,2.952,1637,3.527,1638,3.358,1639,5.201,1640,3.927,1641,3.927,1642,5.201,1643,5.201,1644,5.201,1645,3.927,1646,2.563,1647,3.959,1648,3.617,1649,7.758,1650,2.661,1651,4.264,1652,1.805,1653,3.839,1654,3.908,1655,3.927,1656,2.331,1657,3.927,1658,5.791,1659,3.927,1660,4.521,1661,4.812,1662,2.778,1663,3.927,1664,3.927,1665,3.927,1666,3.927,1667,2.661,1668,3.092,1669,3.252,1670,2.481,1671,3.927,1672,5.791,1673,3.927,1674,3.927,1675,2.888,1676,2.517,1677,3.169,1678,3.045,1679,2.265,1680,3.263,1681,3.927,1682,3.527]],["title/entities/DbContributionStatTimeframe.html",[42,3.429,1303,1.088]],["body/entities/DbContributionStatTimeframe.html",[3,0.038,4,0.038,5,0.034,6,3.652,10,0.167,11,0.912,13,1.1,14,0.415,15,0.005,16,0.061,22,1.019,42,4.307,59,0.042,60,0.154,76,1.213,88,4.897,91,3.791,93,3.435,122,1.311,177,5.77,178,5.77,208,1.789,213,2.814,239,0.003,240,0.003,292,0.421,295,0.478,456,3.341,512,0.976,516,2.071,523,1.212,865,1.461,881,5.087,933,2.916,934,4.7,961,2.046,1158,4.78,1160,5.017,1303,1.366,1401,5.779,1433,5.087,1551,3.11,1573,3.116,1590,3.43,1593,3.185,1594,1.525,1595,1.525,1621,4.245,1622,5.129,1647,3.266,1668,4.3,1683,7.734,1684,3.702,1685,5.77,1686,5.77,1687,6.259,1688,5.919,1689,4.455,1690,4.001,1691,4.149,1692,5.266,1693,4.455,1694,4.001,1695,4.954,1696,4.455,1697,7.233,1698,7.233,1699,7.233,1700,5.272,1701,4.001,1702,4.001]],["title/entities/DbContributionsProjects.html",[45,3.573,1303,1.088]],["body/entities/DbContributionsProjects.html",[3,0.048,4,0.048,5,0.043,6,3.613,10,0.208,11,1.061,13,1.015,14,0.411,15,0.005,16,0.07,22,1.27,45,5.222,59,0.053,60,0.192,76,1.267,91,3.73,93,3.162,122,1.633,188,6.893,191,6.893,193,3.74,195,6.02,213,3.505,239,0.003,240,0.003,292,0.409,295,0.987,420,2.763,456,3.312,496,4.827,512,0.948,516,2.038,523,1.177,656,1.629,742,2.578,865,1.82,961,1.774,1303,1.589,1423,5.222,1456,4.381,1573,3.026,1590,3.393,1593,3.151,1594,1.899,1595,1.899,1621,3.681,1622,4.721,1683,7.65,1687,6.255,1688,5.824,1700,6.134,1703,4.984,1704,7.383,1705,5.55,1706,6.63,1707,5.55,1708,6.904,1709,5.55,1710,5.222,1711,5.55]],["title/entities/DbContributorCategoryTimeframe.html",[47,3.429,1303,1.088]],["body/entities/DbContributorCategoryTimeframe.html",[3,0.04,4,0.04,5,0.035,6,3.605,10,0.172,11,0.932,13,1.087,14,0.413,15,0.005,16,0.062,22,1.052,37,4.969,47,4.404,59,0.044,60,0.159,76,1.221,91,3.753,93,3.355,102,2.502,122,1.353,177,5.87,178,5.87,182,6.381,213,2.903,239,0.003,240,0.003,292,0.413,295,0.493,456,3.323,512,0.958,516,2.05,523,1.19,865,1.508,933,2.981,934,4.806,957,5.569,961,1.963,1054,6.622,1061,5.845,1303,1.397,1433,5.159,1551,3.915,1573,3.06,1590,3.386,1593,3.144,1594,1.573,1595,1.573,1621,4.073,1622,5.01,1643,7.336,1647,3.312,1668,4.361,1684,3.819,1688,5.86,1690,4.128,1694,4.128,1697,7.336,1698,9.104,1699,7.336,1700,5.391,1701,4.128,1702,4.128,1712,8.251,1713,5.826,1714,4.597,1715,5.826,1716,4.597]],["title/entities/DbCoupon.html",[433,3.573,1303,1.088]],["body/entities/DbCoupon.html",[3,0.051,4,0.051,5,0.045,10,0.22,11,1.103,14,0.394,15,0.005,16,0.073,22,1.346,59,0.056,60,0.203,76,1.078,98,3.011,117,1.866,122,1.732,144,3.502,239,0.003,240,0.003,292,0.394,295,0.631,296,0.825,404,3.911,433,5.427,512,0.915,514,6.702,515,4.167,516,1.998,523,1.136,524,6.375,652,3.35,662,2.996,865,1.93,938,3.911,1040,2.043,1302,7.667,1303,1.652,1433,5.715,1434,7.064,1435,4.004,1458,3.395,1551,3.494,1573,2.014,1583,3.011,1589,3.745,1592,3.826,1593,2.626,1594,2.014,1595,2.014,1646,3.395,1647,4.03,1648,3.862,1650,3.526,1652,2.704,1653,3.862,1654,3.932,1675,3.826,1676,3.334,1678,3.778,1717,5.284,1718,5.884,1719,5.884,1720,5.884,1721,7.673,1722,3.994,1723,5.884,1724,5.884]],["title/entities/DbCustomer.html",[373,3.573,1303,1.088]],["body/entities/DbCustomer.html",[3,0.058,4,0.058,5,0.052,10,0.254,11,1.207,13,0.9,14,0.361,15,0.005,16,0.08,22,1.551,59,0.065,60,0.234,76,1.06,122,1.995,208,1.563,239,0.004,240,0.004,292,0.388,295,0.727,373,5.938,376,5.698,512,0.9,516,1.979,523,1.117,656,2.161,662,2.976,698,6.975,865,2.223,1040,2.353,1084,4.279,1303,1.807,1327,4.279,1516,8.19,1573,2.873,1575,4.982,1576,4.982,1583,3.294,1589,4.097,1590,3.094,1592,3.379,1593,3.121,1594,2.32,1595,2.32,1600,4.601,1725,6.087,1726,6.087,1727,6.778,1728,6.778,1729,6.778,1730,6.778,1731,3.241,1732,6.087]],["title/entities/DbEmoji.html",[401,3.303,1303,1.088]],["body/entities/DbEmoji.html",[3,0.04,4,0.04,5,0.035,10,0.172,11,0.932,13,0.695,14,0.401,15,0.005,16,0.078,22,1.05,59,0.044,60,0.159,76,1.129,91,2.464,98,3.203,117,1.986,122,1.351,144,3.149,187,2.389,239,0.003,240,0.003,292,0.433,295,0.958,296,0.815,394,2.9,401,4.238,403,4.845,404,4.389,405,3.002,456,2.068,512,1.005,516,2.049,520,0.652,523,1.189,583,3.164,652,2.948,653,3.325,656,1.657,662,3.106,672,4.203,865,1.506,870,1.959,938,4.161,961,1.805,1049,3.002,1242,2.979,1303,1.396,1435,2.869,1458,2.032,1551,3.451,1573,2.794,1579,3.4,1583,2.543,1590,3.009,1591,4.801,1593,2.947,1594,1.571,1595,1.571,1596,3.453,1621,2.289,1638,3.668,1646,2.869,1647,3.92,1648,3.485,1650,2.979,1651,3.64,1652,2.11,1653,3.815,1654,3.883,1656,2.725,1667,2.979,1668,3.461,1669,3.64,1670,2.9,1675,3.232,1676,2.817,1677,3.547,1678,3.325,1679,2.648,1733,4.123,1734,7.514,1735,5.566,1736,6.374,1737,4.591,1738,4.591,1739,7.324,1740,4.801,1741,5.386,1742,4.591,1743,4.094,1744,3.814,1745,4.591,1746,4.591,1747,4.591,1748,5.386,1749,6.482,1750,4.591,1751,4.591,1752,4.591,1753,4.591,1754,3.232,1755,4.123,1756,3.002,1757,4.591]],["title/entities/DbEndorsement.html",[417,3.191,1303,1.088]],["body/entities/DbEndorsement.html",[3,0.04,4,0.074,5,0.036,10,0.173,11,0.936,13,0.96,14,0.414,15,0.005,16,0.062,20,2.021,22,1.057,59,0.044,60,0.16,76,1.187,98,2.555,117,1.584,122,1.36,144,2.294,193,3.4,208,1.525,239,0.003,240,0.003,292,0.434,295,0.495,296,0.856,417,4.113,496,4.257,512,1.007,516,2.052,523,1.25,652,2.959,656,2.107,662,3.108,672,3.178,865,1.515,870,1.968,961,2.295,1303,1.402,1327,4.564,1351,6.771,1352,6.771,1353,6.771,1354,6.771,1355,7.831,1356,5.847,1359,5.084,1364,5.41,1372,5.847,1374,3.607,1435,2.882,1458,2.045,1551,2.514,1573,3.149,1575,5.315,1576,5.315,1583,2.555,1590,3.391,1593,3.215,1594,1.581,1595,1.581,1621,3.759,1646,2.045,1647,3.32,1648,2.78,1650,2.992,1652,2.123,1653,2.78,1654,2.83,1667,2.992,1676,2.83,1678,2.882,1731,3.113,1743,4.113,1744,3.839,1754,3.247,1756,3.021,1758,4.149,1759,4.62,1760,4.62,1761,4.62,1762,5.847,1763,4.62,1764,4.62,1765,6.511,1766,5.41,1767,4.62,1768,6.392,1769,4.62,1770,4.62,1771,4.62,1772,3.607]],["title/classes/DbFilteredUser.html",[60,0.175,1773,3.944]],["body/classes/DbFilteredUser.html",[3,0.061,4,0.061,5,0.054,10,0.264,11,1.237,14,0.341,15,0.005,16,0.067,59,0.067,60,0.244,76,1.221,85,3.954,88,5.051,208,1.602,239,0.004,240,0.004,292,0.398,296,0.784,508,1.759,512,0.922,516,2.007,523,1.145,662,3.005,865,2.314,1388,5.863,1422,4.708,1573,2.945,1593,3.177,1594,2.415,1595,2.415,1773,6.718,1774,8.337,1775,5.863,1776,7.727,1777,7.149,1778,7.149,1779,7.056,1780,6.336]],["title/entities/DbInsight.html",[366,2.998,1303,1.088]],["body/entities/DbInsight.html",[3,0.031,4,0.031,5,0.028,10,0.137,11,0.789,13,0.785,14,0.4,15,0.005,16,0.075,22,0.836,59,0.035,60,0.126,76,0.925,91,2.086,98,3.237,117,2.191,122,1.075,144,2.907,203,2.718,208,1.594,239,0.002,240,0.002,292,0.436,295,0.917,296,0.752,334,3.243,335,1.999,348,1.862,366,3.257,368,4.974,420,2.054,456,2.971,512,1.012,515,1.783,516,2.079,520,0.518,523,1.221,652,2.586,653,2.917,656,1.888,662,3.113,747,4.027,829,3.357,865,1.198,870,2.493,961,1.319,1040,1.268,1044,2.508,1050,5.835,1051,6.441,1196,3.882,1197,4.163,1242,2.522,1303,1.182,1327,3.735,1378,5.079,1386,2.706,1435,3.651,1456,3.257,1458,2.917,1551,3.186,1573,2.929,1575,4.349,1576,4.349,1577,3.882,1579,2.706,1583,2.153,1589,2.679,1590,3.154,1591,4.065,1592,2.736,1593,3.013,1594,1.25,1595,1.25,1596,3.029,1616,1.905,1618,2.862,1621,1.822,1622,2.93,1632,2.797,1633,2.797,1638,3.217,1646,2.917,1647,3.826,1648,3.522,1650,2.522,1652,1.679,1653,3.522,1654,3.585,1667,3.791,1675,2.736,1676,2.385,1677,3.003,1678,3.243,1722,2.48,1731,3.504,1754,2.736,1781,3.281,1782,6.591,1783,5.919,1784,6.591,1785,2.985,1786,3.653,1787,3.882,1788,3.653,1789,3.281,1790,3.653,1791,5.488,1792,5.477,1793,3.653,1794,4.065,1795,3.653,1796,3.653,1797,3.653,1798,3.653,1799,4.928,1800,5.488,1801,3.653,1802,5.488,1803,3.653,1804,4.928,1805,3.653,1806,3.882,1807,2.706,1808,3.653,1809,5.488,1810,4.285,1811,2.852,1812,3.653,1813,3.653,1814,2.389,1815,2.852]],["title/entities/DbInsightMember.html",[399,3.429,1303,1.088]],["body/entities/DbInsightMember.html",[3,0.033,4,0.033,5,0.029,10,0.144,11,0.818,13,0.805,14,0.402,15,0.005,16,0.054,22,0.878,59,0.037,60,0.133,76,1.128,91,3.193,98,2.945,117,2.043,122,1.129,144,3.271,208,1.06,239,0.003,240,0.003,292,0.429,295,0.9,296,0.886,399,3.863,456,2.849,512,0.995,516,2.093,523,1.235,555,4.729,593,4.455,652,2.662,653,3.003,656,1.918,662,3.094,865,1.258,870,2.699,938,3.826,961,1.804,974,2.841,1040,1.332,1242,2.615,1303,1.225,1327,2.901,1378,4.281,1386,6.876,1391,7.59,1433,3.594,1435,3.717,1458,3.322,1551,3.449,1573,2.875,1575,3.378,1576,3.378,1583,2.233,1589,2.778,1590,3.205,1592,2.838,1593,2.976,1594,1.313,1595,1.313,1621,1.912,1638,3.312,1646,3.322,1647,4.001,1648,3.813,1650,2.615,1652,1.763,1653,3.813,1654,3.881,1662,2.713,1667,3.86,1675,2.838,1676,2.473,1677,3.114,1678,3.548,1688,3.378,1722,2.604,1731,3.589,1743,3.594,1754,2.838,1756,2.508,1768,4.443,1777,4.729,1778,3.187,1785,2.579,1787,4.026,1806,4.026,1807,2.841,1816,7.826,1817,3.445,1818,5.939,1819,5.026,1820,6.093,1821,6.785,1822,3.445,1823,5.026,1824,3.836,1825,3.836,1826,3.836,1827,2.995,1828,3.836,1829,2.346,1830,3.836,1831,6.741,1832,3.836,1833,3.836,1834,5.111,1835,4.729,1836,3.836,1837,3.445,1838,3.836,1839,3.836,1840,3.836,1841,3.445]],["title/entities/DbInsightRepo.html",[368,3.429,1303,1.088]],["body/entities/DbInsightRepo.html",[3,0.04,4,0.04,5,0.036,10,0.175,11,0.944,13,0.964,14,0.402,15,0.005,16,0.079,22,1.071,59,0.045,60,0.162,76,0.83,98,3.231,117,2.003,122,1.377,144,2.901,193,3.423,239,0.003,240,0.003,292,0.427,295,0.883,296,0.751,366,4.886,368,4.46,407,3.466,420,2.459,512,0.99,516,2.056,520,0.664,523,1.197,652,2.979,656,2.113,662,3.088,742,2.567,755,2.561,865,1.535,870,2.488,938,3.349,961,1.824,1040,1.625,1303,1.415,1378,5.088,1388,4.796,1435,3.644,1438,4.019,1458,2.908,1551,3.179,1571,3.31,1573,2.818,1578,4.203,1583,2.578,1588,4.203,1589,3.207,1590,3.034,1592,3.276,1593,2.968,1594,1.602,1595,1.602,1596,3.019,1616,2.44,1618,3.426,1632,3.349,1633,3.349,1638,3.706,1646,2.908,1647,3.822,1648,3.515,1650,3.019,1652,2.151,1653,3.515,1654,3.578,1667,3.784,1675,3.276,1676,2.855,1678,3.36,1722,3.177,1731,4.299,1754,3.276,1787,4.648,1789,4.203,1816,7.832,1819,6.424,1829,4.019,1842,4.203,1843,4.68,1844,3.654,1845,4.203,1846,4.68,1847,4.68,1848,4.203,1849,4.203,1850,4.68]],["title/entities/DbLog.html",[383,3.573,1303,1.088]],["body/entities/DbLog.html",[3,0.057,4,0.057,5,0.051,10,0.25,11,1.195,14,0.386,15,0.005,16,0.064,22,1.528,59,0.064,60,0.231,76,1.287,122,1.965,144,2.93,239,0.004,240,0.004,292,0.451,295,0.716,383,5.883,480,6.709,496,5.922,512,1.046,652,3.554,656,1.998,662,3.15,850,5.225,1040,2.319,1303,1.791,1589,4.06,1590,3.717,1676,3.936,1754,3.329,1851,5.997,1852,6.678,1853,6.678,1854,6.678,1855,6.678,1856,6.678,1857,6.678,1858,6.678,1859,6.678]],["title/entities/DbPRInsight.html",[406,3.429,1303,1.088]],["body/entities/DbPRInsight.html",[3,0.039,4,0.039,5,0.034,10,0.168,11,0.916,13,1.054,14,0.416,15,0.005,16,0.061,20,1.978,22,1.026,59,0.043,60,0.155,76,0.805,91,3.736,93,3.515,94,2.831,98,2.501,99,5.414,100,2.501,117,2.391,122,1.319,144,3.007,187,2.349,198,4.734,201,5.115,239,0.003,240,0.003,292,0.41,295,0.48,388,5.414,391,3.034,406,4.326,456,3.135,512,0.95,516,2.041,523,1.18,656,1.636,662,3.041,865,1.47,878,3.894,961,2.381,1040,1.556,1107,6.568,1303,1.372,1551,2.461,1573,3.035,1583,2.501,1584,3.403,1589,3.111,1590,3.268,1592,3.178,1593,3.122,1594,1.534,1595,1.534,1621,4.027,1622,3.403,1647,2.584,1653,2.721,1654,2.77,1667,2.929,1668,3.403,1669,3.579,1860,4.026,1861,7.416,1862,7.416,1863,5.493,1864,7.416,1865,5.724,1866,8.867,1867,4.483,1868,4.483,1869,8.077,1870,6.373,1871,6.373,1872,6.373,1873,8.077,1874,4.483,1875,4.483,1876,4.483,1877,4.483,1878,6.373,1879,5.724,1880,5.724,1881,6.373,1882,6.373,1883,4.483,1884,5.724,1885,4.483]],["title/entities/DbPullRequest.html",[387,2.764,1303,1.088]],["body/entities/DbPullRequest.html",[3,0.017,4,0.05,5,0.016,10,0.076,11,0.49,13,0.99,14,0.408,15,0.005,16,0.042,20,1.059,22,0.462,59,0.019,60,0.07,76,1.201,91,2.689,93,1.22,94,1.274,98,2.991,117,2.192,122,0.594,144,3.037,193,1.998,197,4.309,201,4.972,229,3.282,235,1.866,239,0.002,240,0.002,292,0.445,295,0.624,296,0.904,387,1.866,388,5.741,391,3.298,420,1.276,449,3.459,456,2.749,483,4.329,512,1.033,516,2.13,520,0.286,523,1.287,583,2.543,652,1.739,653,1.961,656,1.285,662,3.137,672,1.665,742,0.929,747,3.454,755,1.104,829,3.562,865,0.662,870,1.031,878,4.13,938,4.26,961,1.771,971,3.536,1040,0.701,1077,1.296,1158,3.27,1242,2.394,1303,0.734,1388,2.799,1401,3.953,1422,1.104,1438,2.086,1439,2.834,1551,2.943,1573,3.269,1583,1.338,1589,1.665,1590,3.255,1592,1.006,1593,3.284,1594,0.69,1595,0.69,1596,1.567,1604,1.676,1621,2.904,1622,4.069,1646,0.893,1647,3.654,1648,3.253,1650,1.567,1653,3.253,1654,3.312,1660,2.663,1661,4.329,1667,3.502,1668,4.069,1669,4.279,1676,1.482,1678,1.509,1679,3.36,1688,2.024,1844,1.575,1886,1.812,1887,4.431,1888,4.431,1889,4.431,1890,4.431,1891,4.431,1892,3.681,1893,4.431,1894,5.824,1895,4.431,1896,5.824,1897,4.431,1898,5.824,1899,6.731,1900,3.681,1901,4.431,1902,5.824,1903,4.431,1904,4.431,1905,5.23,1906,4.431,1907,4.431,1908,5.21,1909,2.663,1910,2.018,1911,5.21,1912,5.21,1913,3.411,1914,2.018,1915,2.018,1916,2.018,1917,2.018,1918,2.018,1919,2.018,1920,2.834,1921,3.411,1922,3.406,1923,2.018,1924,3.411,1925,4.679,1926,2.018,1927,2.018,1928,3.063,1929,2.018,1930,1.812,1931,2.018,1932,3.063,1933,2.018,1934,5.21,1935,2.018,1936,2.018,1937,3.411,1938,1.812,1939,2.018,1940,3.411,1941,2.018,1942,2.018,1943,3.411,1944,3.411,1945,4.431,1946,3.411,1947,3.411,1948,3.411,1949,3.411,1950,3.411,1951,2.018,1952,2.018,1953,3.411,1954,2.018,1955,2.018,1956,2.018,1957,2.018,1958,1.812,1959,2.018,1960,3.411,1961,2.018,1962,2.018,1963,2.018,1964,2.018,1965,2.018,1966,2.018,1967,4.679,1968,2.018,1969,2.018,1970,2.018,1971,2.018,1972,2.018,1973,2.018,1974,2.018,1975,2.018,1976,3.411,1977,3.411,1978,3.411,1979,3.063,1980,2.018,1981,2.018,1982,2.018,1983,1.812,1984,2.018,1985,1.676,1986,5.593,1987,5.21,1988,1.812,1989,2.018,1990,2.018,1991,2.018,1992,2.018,1993,1.812,1994,2.018]],["title/classes/DbPullRequestContributor.html",[60,0.175,1212,3.573]],["body/classes/DbPullRequestContributor.html",[3,0.055,4,0.055,5,0.049,10,0.239,11,1.163,13,0.868,14,0.352,15,0.005,16,0.061,59,0.061,60,0.221,76,1.022,144,2.852,187,2.983,197,4.056,201,4.669,229,6.578,239,0.004,240,0.004,292,0.41,296,0.738,391,3.362,449,4.429,508,1.594,512,0.952,516,2.042,523,1.182,583,3.95,653,3.93,656,1.785,662,3.042,865,2.097,878,3.984,971,6.336,1212,5.725,1221,6.103,1242,3.719,1573,3.039,1593,3.194,1594,2.188,1595,2.188,1647,3.282,1648,3.455,1667,3.719,1668,4.321,1669,4.544,1679,4.669,1785,3.375,1993,7.268,1995,5.742,1996,6.394,1997,6.394,1998,6.394]],["title/entities/DbPullRequestReview.html",[390,3.429,1303,1.088]],["body/entities/DbPullRequestReview.html",[3,0.039,4,0.039,5,0.035,10,0.169,11,0.918,13,0.685,14,0.39,15,0.005,16,0.071,22,1.029,59,0.043,60,0.156,76,1.022,98,3.484,117,2.16,122,1.324,144,3.465,197,3.968,201,5.121,239,0.003,240,0.003,292,0.422,295,0.482,296,0.851,387,4.427,388,5.538,389,2.67,390,4.338,391,3.322,449,3.497,512,0.979,516,2.042,523,1.181,583,3.119,652,2.916,653,3.289,656,1.639,662,3.075,865,1.476,878,3.984,961,1.081,1040,1.562,1303,0.969,1422,2.462,1551,3.428,1573,2.924,1583,2.507,1589,3.119,1590,2.739,1592,2.243,1593,3.038,1594,1.54,1595,1.54,1632,3.257,1633,3.257,1646,1.991,1647,3.988,1648,3.79,1650,2.937,1653,3.79,1654,3.858,1667,4.08,1668,4.74,1669,4.985,1676,2.777,1678,2.828,1679,4.287,1905,7.674,1925,5.739,1930,4.041,1938,4.041,1958,4.041,1983,4.041,1986,5.31,1999,4.041,2000,7.431,2001,6.674,2002,7.431,2003,9.627,2004,4.499,2005,6.39,2006,4.499,2007,6.39,2008,4.499,2009,4.499,2010,6.39,2011,4.499,2012,6.39,2013,4.499,2014,4.499,2015,4.499,2016,4.499,2017,4.499,2018,4.041]],["title/entities/DbRepoLoginContributions.html",[1131,3.741,1303,1.088]],["body/entities/DbRepoLoginContributions.html",[3,0.041,4,0.041,5,0.037,8,3.13,10,0.179,11,0.96,13,1.109,14,0.412,15,0.005,16,0.064,22,1.096,59,0.046,60,0.166,76,0.844,88,5.17,91,3.78,93,3.488,122,1.41,208,1.921,239,0.003,240,0.003,292,0.419,295,0.514,296,0.609,456,3.336,512,0.971,516,2.065,523,1.206,662,2.293,865,1.572,881,5.254,938,3.405,961,2.102,1131,4.948,1158,4.912,1160,5.22,1303,1.438,1401,5.938,1422,2.622,1573,3.101,1590,3.426,1593,3.181,1594,1.64,1595,1.64,1621,4.362,1622,5.208,1685,6.004,1686,6.004,1687,6.408,1688,5.903,1691,4.367,1692,5.439,1695,5.215,2019,8.348,2020,4.303,2021,4.792,2022,4.792,2023,4.792,2024,5.215,2025,3.549,2026,4.792,2027,4.792,2028,4.792,2029,4.792]],["title/entities/DbRepoToUserStargazers.html",[344,3.303,1303,1.088]],["body/entities/DbRepoToUserStargazers.html",[3,0.039,4,0.039,5,0.035,10,0.17,11,0.925,13,0.955,14,0.403,15,0.005,16,0.082,20,1.998,22,1.04,59,0.043,60,0.157,91,2.446,98,3.189,117,1.977,122,1.337,144,3.138,193,3.867,208,1.705,239,0.003,240,0.003,292,0.432,295,0.801,296,0.812,332,3.664,334,3.597,335,2.487,344,4.208,348,2.316,456,2.053,512,1.003,516,2.003,520,0.645,523,1.142,583,3.141,652,2.932,653,3.307,656,2.02,662,3.103,742,2.336,865,1.49,870,1.945,961,1.796,1242,2.958,1303,1.386,1435,2.848,1458,2.011,1551,3.439,1573,2.557,1583,3.495,1584,3.436,1590,2.754,1593,2.781,1594,1.555,1595,1.555,1596,3.735,1616,3.356,1618,4.238,1632,3.809,1633,3.809,1638,3.647,1646,2.848,1647,3.912,1648,3.469,1650,2.958,1651,3.614,1652,2.088,1653,3.802,1654,3.871,1656,2.697,1667,2.958,1668,3.436,1669,3.614,1670,2.87,1675,3.209,1676,2.797,1677,3.522,1678,3.307,1679,2.622,1731,3.077,1754,3.209,1785,3.26,1829,3.936,2030,4.081,2031,7.999,2032,4.545,2033,4.545,2034,4.369,2035,3.085,2036,4.545,2037,4.545,2038,4.545,2039,4.545,2040,4.545,2041,4.545,2042,4.545,2043,4.545,2044,4.545,2045,4.545,2046,4.081]],["title/entities/DbRepoToUserStars.html",[340,3.303,1303,1.088]],["body/entities/DbRepoToUserStars.html",[3,0.039,4,0.039,5,0.035,10,0.17,11,0.925,13,0.955,14,0.403,15,0.005,16,0.082,20,1.998,22,1.04,59,0.043,60,0.157,91,2.446,98,3.189,117,1.977,122,1.337,144,3.138,193,3.867,208,1.705,239,0.003,240,0.003,292,0.432,295,0.801,296,0.812,332,3.664,334,3.597,335,2.487,340,4.208,348,2.316,456,2.053,512,1.003,516,2.003,520,0.645,523,1.142,583,3.141,652,2.932,653,3.307,656,2.02,662,3.103,742,2.336,865,1.49,870,1.945,961,1.796,1242,2.958,1303,1.386,1435,2.848,1458,2.011,1551,3.439,1573,2.557,1583,3.495,1584,3.436,1590,2.754,1593,2.781,1594,1.555,1595,1.555,1596,3.735,1616,3.356,1618,4.238,1632,3.809,1633,3.809,1638,3.647,1646,2.848,1647,3.912,1648,3.469,1650,2.958,1651,3.614,1652,2.088,1653,3.802,1654,3.871,1656,2.697,1667,2.958,1668,3.436,1669,3.614,1670,2.87,1675,3.209,1676,2.797,1677,3.522,1678,3.307,1679,2.622,1731,3.077,1754,3.209,1785,3.26,1829,3.936,2034,4.369,2035,3.085,2047,4.081,2048,7.401,2049,4.545,2050,4.545,2051,4.545,2052,4.545,2053,4.545,2054,4.545,2055,4.545,2056,4.545,2057,4.545,2058,4.545,2059,4.545,2060,4.545,2061,4.081]],["title/entities/DbRepoToUserSubmissions.html",[342,3.303,1303,1.088]],["body/entities/DbRepoToUserSubmissions.html",[3,0.037,4,0.037,5,0.033,10,0.161,11,0.891,13,0.938,14,0.402,15,0.005,16,0.08,20,1.924,22,0.986,59,0.041,60,0.149,91,2.356,98,3.114,117,2.045,122,1.269,144,3.084,193,3.79,208,1.679,239,0.003,240,0.003,292,0.434,295,0.778,296,0.841,332,3.578,334,3.512,335,2.359,342,4.053,348,2.198,420,2.32,456,2.682,512,1.007,516,2.026,520,0.612,523,1.165,583,3.025,652,2.848,653,3.212,656,1.989,662,3.108,742,2.289,747,3.025,865,1.414,870,1.873,961,1.744,1050,4.385,1242,2.848,1303,1.335,1435,2.743,1456,3.679,1458,1.908,1551,3.38,1573,2.716,1583,3.434,1584,3.309,1590,2.924,1593,2.877,1594,1.476,1595,1.476,1596,3.646,1616,3.232,1618,4.138,1632,3.699,1633,3.699,1638,3.542,1646,2.743,1647,3.868,1648,3.736,1650,2.848,1651,3.48,1652,1.981,1653,3.736,1654,3.803,1656,2.559,1667,2.848,1668,3.309,1669,3.48,1670,2.723,1675,3.091,1676,2.694,1677,3.392,1678,3.212,1679,2.487,1731,2.964,1754,3.091,1785,3.195,1792,3.582,1829,3.791,2018,5.567,2034,4.208,2035,2.927,2062,3.872,2063,7.257,2064,8.287,2065,4.311,2066,4.311,2067,4.311,2068,6.199,2069,4.311,2070,4.311,2071,4.311,2072,4.311,2073,4.311,2074,4.311,2075,4.311,2076,4.311,2077,4.311,2078,4.311,2079,3.872]],["title/entities/DbRepoToUserVotes.html",[338,3.09,1303,1.088]],["body/entities/DbRepoToUserVotes.html",[3,0.039,4,0.039,5,0.035,10,0.17,11,0.925,13,0.955,14,0.403,15,0.005,16,0.082,20,1.998,22,1.04,59,0.043,60,0.157,91,2.446,98,3.189,117,1.977,122,1.337,144,3.138,193,3.867,208,1.705,239,0.003,240,0.003,292,0.432,295,0.801,296,0.812,332,3.664,334,3.597,335,2.487,338,3.936,348,2.316,456,2.053,512,1.003,516,2.003,520,0.645,523,1.142,583,3.141,652,2.932,653,3.307,656,2.02,662,3.103,742,2.336,865,1.49,870,1.945,961,1.796,1242,2.958,1303,1.386,1435,2.848,1458,2.011,1551,3.439,1573,2.557,1583,3.495,1584,3.436,1590,2.754,1593,2.781,1594,1.555,1595,1.555,1596,3.735,1616,3.356,1618,4.238,1632,3.809,1633,3.809,1638,3.647,1646,2.848,1647,3.912,1648,3.469,1650,2.958,1651,3.614,1652,2.088,1653,3.802,1654,3.871,1656,2.697,1667,2.958,1668,3.436,1669,3.614,1670,2.87,1675,3.209,1676,2.797,1677,3.522,1678,3.307,1679,2.622,1731,3.077,1754,3.209,1785,3.26,1829,3.936,2034,4.369,2035,3.085,2080,4.081,2081,7.401,2082,4.545,2083,4.545,2084,4.545,2085,4.545,2086,4.545,2087,4.545,2088,4.545,2089,4.545,2090,4.545,2091,4.545,2092,4.545,2093,4.545,2094,4.081]],["title/entities/DbSubscription.html",[381,3.573,1303,1.088]],["body/entities/DbSubscription.html",[3,0.026,4,0.026,5,0.024,10,0.115,11,0.69,13,0.717,14,0.401,15,0.005,16,0.056,22,0.702,37,3.412,59,0.029,60,0.106,76,1.052,91,1.825,98,3.723,117,2.344,122,0.903,144,3.575,187,1.131,208,0.894,239,0.002,240,0.002,292,0.434,295,0.329,296,0.865,381,3.397,456,1.532,512,1.008,516,2.095,520,0.436,523,1.238,652,2.321,656,1.602,662,3.108,747,3.265,865,1.007,870,2.912,933,3.074,934,5.703,938,3.924,965,2.551,1040,1.066,1061,4.374,1303,1.034,1435,4.265,1458,3.788,1551,3.663,1573,2.485,1583,2.625,1589,2.344,1590,3.428,1592,1.531,1593,2.635,1594,1.051,1595,1.051,1596,2.207,1604,2.551,1622,3.572,1646,3.788,1647,4.153,1648,4.114,1650,3.074,1651,5.411,1652,1.411,1653,4.05,1654,4.123,1662,5.89,1676,2.087,1678,3.875,1785,2.248,2095,7.407,2096,2.757,2097,5.312,2098,5.312,2099,5.312,2100,5.312,2101,5.312,2102,5.312,2103,4.618,2104,5.312,2105,6.033,2106,4.929,2107,5.312,2108,5.312,2109,4.802,2110,3.07,2111,6.501,2112,3.07,2113,4.802,2114,3.07,2115,3.07,2116,6.69,2117,3.07,2118,3.07,2119,3.07,2120,3.07,2121,3.07,2122,3.07,2123,4.313,2124,3.07,2125,3.07,2126,3.07,2127,3.07,2128,3.07,2129,3.07,2130,6.69,2131,3.07,2132,3.07,2133,3.07,2134,3.07,2135,3.07,2136,3.07,2137,3.07,2138,3.07]],["title/classes/DbTimezone.html",[60,0.175,2139,3.741]],["body/classes/DbTimezone.html",[3,0.065,4,0.065,5,0.058,6,3.506,10,0.281,11,1.284,14,0.297,15,0.005,16,0.072,59,0.072,60,0.26,76,1.246,239,0.004,240,0.004,292,0.347,508,1.873,512,0.805,516,1.855,523,0.999,662,2.844,689,7.13,865,2.463,1573,2.57,1593,3.057,1594,2.57,1595,2.57,2139,6.617,2140,6.745,2141,8.934,2142,7.51]],["title/classes/DbTopUser.html",[60,0.175,2143,3.944]],["body/classes/DbTopUser.html",[3,0.064,4,0.064,5,0.057,10,0.279,11,1.278,14,0.295,15,0.005,16,0.071,59,0.071,60,0.258,76,1.123,88,5.126,208,1.656,239,0.004,240,0.004,292,0.344,296,0.81,409,4.865,508,1.857,512,0.798,516,1.846,523,0.991,662,2.834,865,2.443,1422,4.865,1573,2.549,1593,3.042,1594,2.549,1595,2.549,1775,6.189,1780,6.689,2143,6.941,2144,7.984]],["title/entities/DbUserCollaboration.html",[412,3.429,1303,1.088]],["body/entities/DbUserCollaboration.html",[3,0.029,4,0.029,5,0.026,10,0.126,11,0.74,13,0.752,14,0.4,15,0.005,16,0.067,22,0.768,59,0.032,60,0.116,76,1.008,91,3.035,98,2.754,117,2.086,122,0.988,144,3.339,208,1.833,239,0.002,240,0.002,292,0.428,295,0.671,296,0.864,334,3.679,391,2.656,412,3.494,456,2.547,512,0.993,516,2.054,520,0.477,523,1.194,593,4.165,652,2.456,653,2.77,656,2.014,662,3.091,850,4.366,865,1.101,870,2.712,961,1.919,1040,1.166,1242,2.366,1303,1.108,1327,3.577,1413,7.329,1416,4.623,1423,2.375,1433,4.433,1435,3.534,1458,3.349,1551,3.466,1573,2.59,1575,4.165,1576,4.165,1583,2.02,1589,2.513,1590,3.063,1592,2.567,1593,2.733,1594,1.149,1595,1.149,1596,2.877,1616,2.684,1618,3.66,1621,2.567,1632,3.191,1633,3.191,1638,3.055,1646,3.349,1647,4.012,1648,3.831,1650,2.366,1652,1.543,1653,3.831,1654,3.9,1662,3.641,1667,3.67,1675,2.567,1676,2.237,1677,2.817,1678,3.534,1722,2.279,1731,2.461,1743,3.251,1754,2.567,1756,2.195,1762,4.623,1766,4.277,1768,4.019,1785,2.877,1787,3.641,1806,3.641,1807,2.487,1810,5.479,1811,4.019,1815,4.019,1822,3.016,1823,4.637,1827,2.622,1834,6.303,1835,5.831,2106,5.137,2145,5.735,2146,3.016,2147,6.26,2148,6.26,2149,5.622,2150,7.568,2151,5.148,2152,3.358,2153,3.358,2154,3.358,2155,3.358,2156,5.148,2157,4.623,2158,5.148,2159,3.358,2160,3.358,2161,3.358,2162,5.148,2163,3.358,2164,3.358,2165,3.358,2166,3.358,2167,5.148,2168,3.358,2169,5.148,2170,3.358,2171,2.121,2172,3.358]],["title/entities/DbUserHighlight.html",[393,2.764,1303,1.088]],["body/entities/DbUserHighlight.html",[3,0.024,4,0.048,5,0.022,10,0.106,11,0.646,13,0.684,14,0.407,15,0.005,16,0.067,22,0.646,59,0.027,60,0.098,76,1.199,88,3.554,91,2.823,98,2.506,117,2.078,122,0.831,144,3.287,197,2.775,199,4.175,201,1.628,208,1.7,239,0.002,240,0.002,292,0.439,295,0.916,296,0.888,334,2.826,391,2.124,393,2.46,403,3.79,404,5.151,405,1.846,409,2.46,420,2.78,439,2.234,456,3.028,512,1.017,516,2.098,520,0.401,523,1.242,652,2.197,653,2.478,656,1.718,662,3.119,672,3.403,742,1.224,747,3.947,755,2.46,829,4.265,856,1.783,865,0.926,938,4.122,958,3.585,960,2.194,961,1.08,1040,0.98,1303,0.968,1388,3.537,1422,1.545,1428,4.372,1432,4.036,1433,5.108,1434,6.314,1435,3.579,1438,4.543,1439,3.735,1440,4.036,1441,4.036,1446,2.535,1451,5.735,1455,4.036,1458,2.826,1460,2.535,1551,3.123,1573,3.037,1579,2.091,1583,2.506,1589,2.194,1590,2.98,1591,3.329,1593,3.083,1594,0.966,1595,0.966,1596,2.574,1616,1.472,1618,3.33,1622,2.4,1632,2.854,1633,2.291,1638,2.734,1646,2.826,1647,3.783,1648,3.452,1650,2.065,1652,1.297,1653,3.452,1654,3.514,1662,1.997,1675,2.241,1676,1.953,1677,2.46,1678,3.086,1688,4.408,1722,1.916,1731,3.053,1735,4.148,1748,3.735,1754,2.241,1777,3.735,1778,2.346,1785,2.65,1787,3.179,1794,5.164,1806,3.179,1807,2.091,1810,3.509,1811,2.204,1815,2.204,1837,2.535,1844,2.204,1986,5.306,2025,2.091,2145,5.848,2171,1.783,2173,2.535,2174,6.972,2175,4.653,2176,2.823,2177,2.823,2178,5.306,2179,4.495,2180,2.823,2181,2.823,2182,4.036,2183,2.823,2184,2.823,2185,2.823,2186,2.823,2187,2.823,2188,2.823,2189,2.823,2190,2.823,2191,3.735,2192,2.823,2193,2.823,2194,2.823,2195,4.495,2196,2.823,2197,2.823,2198,2.823,2199,2.823,2200,2.823,2201,2.823,2202,2.823,2203,2.823,2204,4.495,2205,2.823,2206,2.823,2207,2.823,2208,2.823,2209,2.535,2210,2.823]],["title/entities/DbUserHighlightReaction.html",[403,2.998,1303,1.088]],["body/entities/DbUserHighlightReaction.html",[3,0.033,4,0.033,5,0.029,10,0.142,11,0.811,13,0.897,14,0.403,15,0.005,16,0.08,22,0.867,59,0.036,60,0.131,76,0.943,91,3.615,98,2.929,117,1.816,122,1.116,144,2.947,208,1.558,239,0.003,240,0.003,292,0.434,295,0.8,296,0.884,334,2.982,393,3.688,395,2.25,401,4.406,402,3.405,403,4.736,404,5.151,456,3.095,512,1.007,516,1.975,520,0.538,523,1.113,583,2.754,652,2.644,653,2.982,656,2.006,662,3.045,865,1.243,870,1.705,938,2.876,961,2.186,1242,2.593,1303,1.215,1435,2.497,1458,1.678,1551,3.23,1573,2.554,1583,3.493,1584,3.012,1590,2.941,1593,2.862,1594,1.297,1595,1.297,1596,3.667,1616,3.514,1618,4.361,1621,3.36,1632,3.804,1633,3.804,1638,3.289,1646,2.497,1647,3.754,1648,3.186,1650,2.593,1651,3.168,1652,1.742,1653,3.571,1654,3.635,1656,2.25,1667,2.593,1668,3.012,1669,3.168,1670,2.395,1675,2.813,1676,2.452,1677,3.087,1678,2.982,1679,2.187,1688,3.348,1731,2.698,1736,7.426,1739,6.23,1743,4.714,1744,3.15,1754,2.813,1756,3.689,1785,3.033,2145,5.818,2171,2.395,2191,6.63,2211,3.405,2212,6.23,2213,5.261,2214,3.791,2215,3.791,2216,3.791,2217,3.791,2218,3.791,2219,3.791,2220,3.791,2221,3.791,2222,3.791,2223,3.791,2224,3.791,2225,3.791,2226,3.791,2227,3.791,2228,3.791,2229,3.791,2230,3.405,2231,3.791,2232,3.791,2233,3.791,2234,3.791,2235,3.791]],["title/classes/DbUserHighlightReactionResponse.html",[60,0.175,2236,3.429]],["body/classes/DbUserHighlightReactionResponse.html",[3,0.057,4,0.057,5,0.051,10,0.248,11,1.189,14,0.357,15,0.005,16,0.09,59,0.079,60,0.312,76,1.228,85,3.8,119,2.088,239,0.004,240,0.004,292,0.306,296,0.754,394,4.179,403,3.927,404,4.215,405,4.326,420,2.476,439,3.298,504,2.477,508,1.65,512,0.709,516,1.873,520,0.939,521,3.483,522,1.973,523,1.101,742,2.252,755,3.621,856,4.179,960,4.036,988,2.264,989,1.825,1040,2.871,1072,3.621,1095,2.928,1103,3.992,1105,3.851,1183,4.326,1739,6.456,2212,5.166,2213,5.166,2236,5.613,2237,6.871,2238,7.495,2239,6.456,2240,6.871,2241,6.616,2242,5.942,2243,6.616,2244,5.942,2245,4.179,2246,4.179,2247,5.942,2248,5.942,2249,5.942]],["title/classes/DbUserHighlightRepo.html",[60,0.175,2250,3.741]],["body/classes/DbUserHighlightRepo.html",[3,0.063,4,0.063,5,0.057,10,0.276,11,1.268,14,0.291,15,0.005,16,0.07,59,0.07,60,0.254,76,1.114,239,0.004,240,0.004,292,0.34,295,0.946,296,0.804,404,4.996,420,3.303,508,1.835,512,0.789,516,1.832,523,0.979,662,2.819,742,2.403,755,4.829,865,2.413,1388,5.971,1438,5.398,1571,5.204,1573,2.518,1593,3.02,1594,2.518,1595,2.518,2250,6.536,2251,7.925,2252,7.357]],["title/entities/DbUserList.html",[430,3.303,1303,1.088]],["body/entities/DbUserList.html",[3,0.035,4,0.035,5,0.031,6,3.685,8,4.006,10,0.151,11,0.848,13,0.632,14,0.394,15,0.005,16,0.073,22,0.922,59,0.038,60,0.139,76,0.971,91,2.243,98,3.354,117,2.203,122,1.185,144,3.012,208,1.592,239,0.003,240,0.003,292,0.427,295,0.947,296,0.779,334,3.401,335,2.204,430,3.858,431,6.644,439,2.353,456,2.727,512,0.99,516,2.065,520,0.572,523,1.205,652,2.74,653,3.09,656,1.948,662,3.088,747,3.752,865,1.321,870,2.583,961,0.968,1040,1.399,1050,5.437,1051,6.001,1196,4.173,1197,4.41,1242,2.711,1303,1.27,1327,3.007,1378,4.616,1435,3.783,1458,3.09,1551,3.301,1573,2.8,1575,3.502,1576,3.502,1577,4.173,1583,2.315,1589,2.88,1590,3.015,1592,2.942,1593,2.926,1594,1.378,1595,1.378,1596,2.711,1616,2.1,1618,3.076,1621,2.008,1622,3.15,1632,3.007,1633,3.007,1638,3.408,1646,3.09,1647,3.905,1648,3.649,1650,2.711,1652,1.851,1653,3.649,1654,3.715,1667,3.929,1675,2.942,1676,2.564,1677,3.229,1678,3.401,1722,2.734,1731,2.821,1743,3.727,1754,2.942,1756,2.634,1783,6.27,1785,3.11,1787,4.173,1792,4.902,1794,4.37,1806,4.173,1807,2.983,1810,4.606,1811,3.145,1815,3.145,1827,3.145,2253,3.617,2254,6.982,2255,4.028,2256,4.028,2257,4.028,2258,4.028,2259,4.028,2260,5.9,2261,4.028,2262,4.37,2263,4.028,2264,4.028,2265,4.028,2266,4.028,2267,4.028,2268,4.028]],["title/entities/DbUserListContributor.html",[27,3.191,1303,1.088]],["body/entities/DbUserListContributor.html",[3,0.038,4,0.064,5,0.034,6,3.717,8,4.753,10,0.277,11,0.912,13,0.68,14,0.395,15,0.005,16,0.077,22,1.019,27,4.008,31,2.808,59,0.042,60,0.154,76,1.175,88,4.339,91,3.062,98,2.49,117,1.544,122,1.311,144,2.838,199,4.149,208,1.789,213,2.814,239,0.003,240,0.003,292,0.43,295,0.68,296,0.848,334,3.564,335,2.438,409,3.472,431,6.7,449,4.659,456,2.823,512,0.998,516,2.038,520,0.632,523,1.178,652,2.9,656,1.878,662,3.097,742,1.728,865,1.461,870,1.917,938,4.105,961,1.07,1200,3.702,1303,1.366,1422,2.438,1435,2.808,1458,1.972,1551,3.11,1573,2.913,1583,3.472,1590,3.137,1592,3.164,1593,3.028,1594,1.525,1595,1.525,1596,3.396,1616,2.323,1618,3.309,1632,3.234,1633,3.234,1638,3.608,1646,1.972,1647,3.588,1648,2.709,1651,3.563,1652,2.047,1653,3.438,1654,3.5,1656,2.644,1675,3.164,1676,2.757,1678,2.808,1688,3.766,1731,3.034,1743,5.087,1754,3.164,1756,4.149,1785,3.236,1827,3.478,1829,2.725,2024,4.954,2025,3.3,2269,4.001,2270,6.637,2271,7.391,2272,4.455,2273,4.455,2274,4.455,2275,4.455,2276,4.455,2277,4.455,2278,4.455,2279,4.455,2280,4.455,2281,4.455,2282,4.455,2283,4.455]],["title/entities/DbUserListContributorStat.html",[30,3.191,1303,1.088]],["body/entities/DbUserListContributorStat.html",[3,0.041,4,0.041,5,0.037,8,3.13,10,0.179,11,0.96,13,1.109,14,0.412,15,0.005,16,0.064,22,1.096,30,4.219,59,0.046,60,0.166,76,0.844,88,5.17,91,3.78,93,3.488,122,1.41,208,1.921,213,3.026,239,0.003,240,0.003,292,0.419,295,0.514,296,0.609,456,3.336,512,0.971,516,2.065,523,1.206,662,2.293,865,1.572,881,5.254,938,3.405,961,2.102,1158,4.912,1160,5.22,1303,1.438,1401,5.938,1422,2.622,1573,3.101,1590,3.426,1593,3.181,1594,1.64,1595,1.64,1621,4.362,1622,5.208,1685,6.004,1686,6.004,1687,6.408,1688,5.903,1691,4.367,1692,5.439,1695,5.215,2024,5.215,2025,3.549,2284,8.348,2285,4.303,2286,4.792,2287,4.792,2288,4.792,2289,4.792,2290,4.792,2291,4.792]],["title/entities/DbUserListContributorStat-1.html",[30,2.654,187,1.549,1303,0.905]],["body/entities/DbUserListContributorStat-1.html",[3,0.041,4,0.041,5,0.036,6,3.629,8,4.495,10,0.176,11,0.948,13,1.107,14,0.411,15,0.005,16,0.063,22,1.076,30,4.165,31,4.093,59,0.045,60,0.163,76,0.833,88,5.157,91,3.768,93,3.475,122,1.384,208,1.846,213,2.971,239,0.003,240,0.003,292,0.416,295,0.504,296,0.601,431,6.542,456,3.33,512,0.965,516,2.058,523,1.199,662,2.27,865,1.543,881,5.212,938,3.361,961,2.088,1158,4.879,1160,5.168,1303,1.42,1401,5.898,1422,2.574,1573,3.082,1590,3.408,1593,3.165,1594,1.61,1595,1.61,1621,4.332,1622,5.189,1685,5.945,1686,5.945,1687,6.371,1688,5.884,1691,4.312,1692,5.395,1695,5.149,2024,5.149,2025,3.484,2292,4.225,2293,4.704,2294,4.704,2295,4.704,2296,4.704,2297,4.704,2298,4.704]],["title/entities/DbUserNotification.html",[410,3.429,1303,1.088]],["body/entities/DbUserNotification.html",[3,0.035,4,0.061,5,0.031,10,0.153,11,0.859,13,0.922,14,0.411,15,0.005,16,0.079,22,0.937,59,0.039,60,0.142,76,1.086,98,2.344,117,1.453,122,1.205,144,3.03,208,1.867,239,0.003,240,0.003,292,0.429,295,0.64,296,0.86,334,3.429,404,3.044,410,4.055,512,0.995,516,2.07,520,0.581,523,1.211,656,2.108,662,3.093,850,4.752,865,1.343,870,1.805,961,1.694,1040,1.422,1049,3.905,1106,3.446,1303,1.286,1327,4.383,1392,5.364,1422,3.269,1433,3.773,1435,3.429,1458,2.643,1551,2.992,1573,2.943,1575,5.104,1576,5.104,1583,2.344,1585,3.034,1589,2.915,1590,3.272,1592,2.042,1593,3.039,1594,1.402,1595,1.402,1596,2.745,1600,2.781,1616,2.136,1618,3.115,1621,2.978,1622,4.137,1632,3.044,1633,3.044,1646,2.643,1647,3.69,1648,3.307,1650,2.745,1652,1.882,1653,3.307,1654,3.367,1662,2.898,1667,2.745,1676,2.596,1678,3.12,1731,2.856,1732,5.364,1785,2.68,1804,5.364,1835,4.963,2145,5.767,2171,2.587,2299,3.679,2300,6.331,2301,7.398,2302,6.331,2303,6.331,2304,5.858,2305,4.096,2306,4.096,2307,5.973,2308,4.096,2309,8.677,2310,4.096,2311,4.225,2312,4.096,2313,4.096,2314,4.096,2315,5.973,2316,4.096,2317,5.973,2318,4.096,2319,5.364,2320,4.096,2321,4.096,2322,5.222,2323,4.096,2324,4.096,2325,3.679,2326,4.096,2327,3.679,2328,4.096,2329,4.096]],["title/entities/DbUserOrganization.html",[414,3.429,1303,1.088]],["body/entities/DbUserOrganization.html",[3,0.042,4,0.042,5,0.037,10,0.29,11,0.969,13,0.975,14,0.403,15,0.005,16,0.08,22,1.111,59,0.046,60,0.168,91,2.563,98,2.646,117,1.64,122,1.429,144,2.948,199,4.408,208,1.84,239,0.003,240,0.003,292,0.431,295,0.83,296,0.763,334,4.129,409,3.689,414,4.576,456,2.151,512,1,516,1.975,520,0.689,523,1.113,652,3.039,656,2.058,662,3.1,742,1.836,865,1.593,870,2.037,961,1.861,1303,1.452,1435,2.984,1458,2.149,1551,3.231,1573,2.65,1583,3.57,1584,3.6,1590,2.854,1593,2.863,1594,1.662,1595,1.662,1596,3.845,1616,3.516,1618,4.363,1632,3.947,1633,3.947,1638,3.78,1646,2.149,1647,3.689,1648,2.878,1651,3.786,1652,2.232,1653,3.572,1654,3.636,1656,2.882,1675,3.362,1676,2.93,1678,2.984,1731,3.224,1754,3.362,1785,3.341,1829,4.124,2034,4.576,2035,3.296,2145,5.819,2171,3.067,2330,4.361,2331,8.791,2332,6.955,2333,4.856,2334,4.856,2335,8.367,2336,4.856,2337,4.856,2338,6.742,2339,4.856,2340,4.856,2341,4.856,2342,4.856,2343,6.742]],["title/entities/DbUserRepo.html",[372,3.573,1303,1.088]],["body/entities/DbUserRepo.html",[3,0.047,4,0.047,5,0.042,6,3.707,10,0.206,11,1.056,13,1.013,14,0.382,15,0.005,16,0.07,22,1.26,59,0.053,60,0.19,76,0.928,98,2.882,117,1.787,122,1.621,144,2.588,193,3.726,208,1.759,239,0.003,240,0.003,292,0.424,295,0.886,296,0.67,370,6.682,372,5.196,420,2.749,512,0.984,516,2.08,523,1.222,652,3.243,656,1.823,662,3.081,742,2.572,755,3.014,865,1.806,870,2.22,938,3.744,1040,1.912,1303,1.581,1388,5.22,1435,3.25,1438,4.493,1458,2.437,1551,2.836,1571,3.896,1573,3.017,1583,3.707,1589,3.585,1590,2.707,1592,2.746,1593,3.143,1594,1.885,1595,1.885,1600,3.738,1646,2.437,1647,3.575,1648,3.135,1650,3.375,1652,2.531,1653,3.135,1654,3.192,1667,3.375,1676,3.192,1678,3.25,1726,4.946,1731,3.951,1785,3.141,1844,4.3,1848,4.946,2209,6.596,2344,5.507,2345,5.507,2346,7.345,2347,5.507,2348,5.507,2349,5.507]],["title/entities/DbUserToUserFollows.html",[397,3.303,1303,1.088]],["body/entities/DbUserToUserFollows.html",[3,0.043,4,0.043,5,0.038,10,0.185,11,0.982,13,0.981,14,0.404,15,0.005,16,0.075,22,1.132,59,0.047,60,0.171,91,2.597,98,3.31,117,2.052,122,1.456,144,3.224,208,1.828,239,0.003,240,0.003,292,0.423,295,0.531,296,0.834,397,4.466,456,2.179,512,0.981,516,2.039,520,0.702,523,1.178,583,3.334,652,3.07,653,3.462,656,1.726,662,3.077,865,1.623,870,2.064,961,1.88,1242,3.139,1303,1.471,1435,3.023,1458,2.19,1551,3.534,1573,2.677,1583,3.591,1584,3.647,1590,2.883,1593,2.887,1594,1.694,1595,1.694,1596,3.139,1638,3.818,1646,3.023,1647,3.981,1648,3.601,1650,3.139,1651,3.836,1652,2.274,1653,3.907,1654,3.977,1656,2.937,1667,3.139,1668,3.647,1669,3.836,1670,3.126,1675,3.406,1676,2.969,1677,3.738,1678,3.462,1679,2.855,1731,3.266,1754,3.406,1785,2.974,1829,4.178,2034,4.637,2035,3.359,2145,5.737,2350,4.445,2351,6.5,2352,6.212,2353,4.949,2354,4.949,2355,6.135,2356,4.949,2357,4.949,2358,4.949,2359,4.949,2360,4.445]],["title/entities/DbUserTopRepo.html",[408,3.741,1303,1.088]],["body/entities/DbUserTopRepo.html",[3,0.038,4,0.038,5,0.034,10,0.275,11,0.903,13,0.944,14,0.401,15,0.005,16,0.081,20,1.949,22,1.004,59,0.042,60,0.152,91,2.387,98,3.139,117,1.946,122,1.292,144,3.103,193,3.817,199,4.106,208,1.688,239,0.003,240,0.003,292,0.428,295,0.786,296,0.803,332,3.607,333,2.344,334,3.541,408,4.651,409,5.48,456,2.003,512,0.994,516,1.988,520,0.623,523,1.127,583,3.065,652,2.877,653,3.244,656,2,662,3.092,742,2.639,865,1.44,870,1.897,961,1.762,1242,2.886,1303,1.352,1435,2.779,1458,1.943,1551,3.4,1571,3.105,1573,2.509,1583,3.455,1584,3.353,1590,2.702,1593,2.738,1594,1.502,1595,1.502,1596,3.677,1616,3.274,1618,4.172,1632,3.737,1633,3.737,1638,3.578,1646,2.779,1647,3.883,1648,3.415,1651,3.526,1652,2.017,1653,3.759,1654,3.827,1656,2.605,1667,2.886,1668,3.353,1669,3.526,1670,2.773,1675,3.131,1676,2.729,1677,3.436,1678,3.244,1679,2.532,1731,3.002,1754,3.131,1785,3.218,1829,3.841,1842,3.942,1845,3.942,2034,4.262,2035,2.98,2145,5.773,2171,2.773,2361,4.39,2362,5.217,2363,4.39,2364,4.39,2365,4.39,2366,4.39,2367,4.39,2368,4.39,2369,4.39,2370,4.39,2371,4.39,2372,4.39]],["title/controllers/EmojiController.html",[525,1.156,2373,3.944]],["body/controllers/EmojiController.html",[3,0.057,4,0.057,5,0.051,10,0.247,14,0.327,15,0.005,16,0.095,19,0.877,59,0.063,60,0.228,71,1.243,72,1.847,119,2.503,239,0.004,240,0.004,288,1.672,292,0.305,294,1.288,295,0.707,296,0.601,298,1.336,401,5.394,512,0.707,520,0.936,523,0.877,525,1.508,527,1.818,529,2.429,542,2.907,613,3.791,614,3.345,615,3.088,616,2.429,642,2.289,645,2.467,773,2.074,784,2.357,988,2.256,989,1.818,1210,4.759,1214,2.814,1215,2.972,1216,3.089,1217,2.972,1218,3.089,1755,8.726,2373,6.442,2374,5.92,2375,9.438,2376,6.592,2377,4.663,2378,5.6,2379,6.592,2380,6.592,2381,4.205,2382,6.592,2383,6.37,2384,5.92,2385,5.478,2386,6.592,2387,6.592,2388,6.592,2389,6.592,2390,6.592]],["title/modules/EmojiModule.html",[241,1.291,266,3.741]],["body/modules/EmojiModule.html",[3,0.063,4,0.063,5,0.056,15,0.005,16,0.095,19,0.969,24,2.143,59,0.069,60,0.252,64,2.201,239,0.004,240,0.004,241,2.242,243,2.726,244,3.442,249,3.442,250,2.812,251,2.768,254,3.617,266,7.521,287,3.055,302,3.413,401,4.762,527,2.419,2373,7.349,2383,7.183,2384,6.541,2385,6.052,2391,6.541,2392,6.541,2393,7.283,2394,7.283,2395,7.283]],["title/injectables/EmojiService.html",[17,0.885,2383,3.573]],["body/injectables/EmojiService.html",[3,0.055,4,0.055,5,0.049,10,0.239,14,0.32,15,0.005,16,0.095,17,1.415,19,0.848,20,2.894,22,1.458,23,2.541,24,1.875,25,2.15,26,2.313,59,0.061,60,0.22,62,2.199,64,1.925,65,1.67,67,3.979,68,2.186,71,1.522,72,1.819,82,2.584,83,2.769,102,2.199,118,4.312,119,2.481,122,1.875,123,2.09,125,4.55,239,0.004,240,0.004,288,1.637,292,0.41,294,1.578,295,0.866,296,0.736,298,1.637,401,4.166,773,2.005,796,2.033,988,2.764,989,1.757,1067,3.487,1111,5.482,1119,5.482,1146,4.325,1147,3.897,1148,3.897,2383,5.712,2385,5.294,2396,5.722,2397,6.371,2398,6.371,2399,8.075,2400,6.371,2401,6.371,2402,6.371,2403,6.371,2404,6.371,2405,5.294]],["title/controllers/EndorsementController.html",[525,1.156,2406,3.944]],["body/controllers/EndorsementController.html",[3,0.029,4,0.029,5,0.026,10,0.126,14,0.385,15,0.005,16,0.084,19,0.447,59,0.032,60,0.116,65,0.88,68,1.207,71,1.657,72,2.072,76,1.28,102,1.402,119,2.621,123,1.333,208,1.548,239,0.002,240,0.002,288,1.043,292,0.396,294,1.676,295,0.919,296,0.782,298,1.738,417,5.986,449,4.693,504,1.349,512,0.919,520,0.477,523,0.685,525,0.768,527,0.926,529,1.238,542,3.424,554,4.019,557,1.838,570,4.623,577,2.624,609,2.567,610,1.514,612,2.684,613,2.877,614,3.565,615,3.359,616,1.238,618,3.342,619,2.622,642,1.166,645,3.291,656,1.761,742,2.486,773,2.699,784,1.201,859,2.487,918,3.641,988,1.149,989,0.926,1210,5.177,1214,3.409,1215,1.514,1216,1.574,1217,1.514,1218,1.574,1348,6.22,1355,7.127,1706,4.623,1710,2.375,1772,7.231,2377,2.375,2381,3.577,2406,4.019,2407,3.016,2408,7.568,2409,7.018,2410,7.568,2411,7.018,2412,6.797,2413,7.568,2414,7.568,2415,7.018,2416,3.358,2417,3.358,2418,3.358,2419,3.358,2420,3.358,2421,5.148,2422,3.358,2423,3.016,2424,5.265,2425,5.148,2426,3.358,2427,3.358,2428,3.358,2429,3.358,2430,6.797,2431,3.358,2432,4.623,2433,3.358,2434,3.358,2435,3.016,2436,3.358,2437,5.044,2438,3.358,2439,3.358,2440,3.358,2441,5.831,2442,3.358,2443,3.358,2444,3.358,2445,3.358,2446,3.358,2447,3.358,2448,3.813,2449,2.487,2450,3.358,2451,3.358,2452,1.574,2453,4.093,2454,3.016,2455,3.016,2456,2.79,2457,2.79,2458,2.487,2459,3.016,2460,3.358,2461,3.016,2462,3.358,2463,2.79,2464,3.358,2465,3.016,2466,3.358,2467,6.797,2468,3.358,2469,3.358,2470,3.358,2471,3.358,2472,3.358,2473,3.358,2474,3.641,2475,3.494,2476,3.358,2477,3.358,2478,4.623,2479,3.358,2480,3.358,2481,3.358,2482,3.358,2483,3.358,2484,3.358,2485,4.277,2486,4.019,2487,3.358,2488,3.358,2489,3.358,2490,3.016,2491,3.358,2492,3.358]],["title/modules/EndorsementModule.html",[241,1.291,267,3.741]],["body/modules/EndorsementModule.html",[3,0.056,4,0.056,5,0.05,15,0.005,16,0.098,19,0.865,24,1.912,59,0.062,60,0.225,64,1.963,239,0.004,240,0.004,241,2.09,242,6.041,243,2.432,244,3.208,249,3.208,250,2.509,251,2.47,254,3.371,255,3.49,260,6.986,267,7.75,283,5.862,287,3.43,302,3.045,353,5.835,359,4.41,417,4.104,527,2.255,1355,5.073,2406,6.985,2453,6.812,2454,5.835,2457,5.399,2458,6.056,2459,5.835,2493,5.835,2494,5.835,2495,5.835,2496,6.498,2497,6.498,2498,4.596,2499,4.596,2500,5.835,2501,6.498]],["title/injectables/EndorsementService.html",[17,0.885,2453,3.303]],["body/injectables/EndorsementService.html",[3,0.034,4,0.034,5,0.03,10,0.146,13,0.905,14,0.369,15,0.005,16,0.083,17,1.008,18,2.697,19,0.518,20,2.347,22,0.891,23,1.553,24,1.146,59,0.037,60,0.135,62,1.567,64,1.177,65,1.508,67,3.228,68,2.103,71,1.727,72,2.118,76,1.28,82,4.035,83,3.67,85,2.644,87,3.235,90,2.643,102,1.06,119,2.664,123,1.49,203,2.823,204,5.07,208,1.072,239,0.003,240,0.003,248,4.665,288,1.166,292,0.437,294,1.821,295,0.999,296,0.849,298,1.888,417,2.459,551,2.976,574,3.762,656,1.668,742,2.537,773,2.823,788,1.48,796,1.242,988,1.332,989,1.074,990,2.459,995,5.334,997,3.489,998,1.941,1111,3.906,1119,3.906,1161,4.493,1348,5.707,1599,4.872,1772,4.493,2412,5.168,2432,3.496,2435,5.168,2437,3.635,2453,3.762,2455,3.496,2456,3.235,2457,3.235,2478,5.168,2502,3.496,2503,5.754,2504,5.754,2505,5.754,2506,3.635,2507,3.906,2508,3.893,2509,3.893,2510,5.754,2511,3.893,2512,5.754,2513,3.893,2514,3.893,2515,5.754,2516,3.893,2517,5.754,2518,3.893,2519,5.754,2520,3.893,2521,3.893,2522,5.754,2523,3.893,2524,3.635,2525,3.893,2526,5.754,2527,3.893,2528,3.893,2529,3.893,2530,3.893,2531,3.893,2532,3.893,2533,8.068,2534,3.893,2535,6.845,2536,3.893,2537,6.845,2538,5.754,2539,5.754,2540,3.893,2541,5.754,2542,3.893,2543,3.893,2544,3.893,2545,3.893,2546,3.893,2547,3.893]],["title/guards/EndorsementTokenGuard.html",[2458,3.741,2548,4.197]],["body/guards/EndorsementTokenGuard.html",[3,0.058,4,0.058,5,0.051,10,0.251,14,0.33,15,0.005,16,0.079,17,1.459,19,0.89,59,0.064,60,0.231,62,1.822,68,2.288,71,1.709,239,0.004,240,0.004,288,1.688,292,0.385,294,1.627,295,0.893,296,0.759,298,1.356,304,5.586,305,3.661,391,2.225,439,2.668,445,5.223,456,2.656,747,3.265,784,2.392,859,4.955,1530,5.559,1710,4.732,2458,6.167,2463,5.559,2465,8.142,2549,6.69,2550,8.142,2551,6.008,2552,9.487,2553,5.223,2554,6.69,2555,8.327,2556,8.52,2557,6.69,2558,9.066,2559,6.69,2560,6.69,2561,6.69,2562,6.69,2563,6.69,2564,8.327]],["title/classes/FilterListContributorsDto.html",[60,0.175,2565,3.741]],["body/classes/FilterListContributorsDto.html",[3,0.04,4,0.04,5,0.036,6,3.687,10,0.173,11,0.936,13,1.049,14,0.41,15,0.005,16,0.072,31,3.337,59,0.044,60,0.261,71,0.871,76,1.281,100,2.959,117,2.178,143,2.731,187,3.568,190,4.606,201,3.756,239,0.003,240,0.003,292,0.425,296,0.901,439,3.747,504,2.347,508,1.152,512,0.96,516,1.951,520,0.656,521,3.161,522,1.378,523,0.867,668,5.887,689,5.333,816,2.882,870,2.608,960,4.213,961,1.967,964,2.528,1043,3.465,1044,2.58,1077,3.404,1085,3.319,1086,3.247,1093,2.355,1103,4.072,1105,3.928,1169,4.93,1183,4.257,1242,2.992,1339,2.742,1340,2.742,1422,2.528,1551,1.784,1660,5.084,1979,5.847,2242,5.847,2565,4.823,2566,8.438,2567,3.607,2568,7.54,2569,4.823,2570,5.333,2571,4.606,2572,4.149,2573,4.62,2574,4.149,2575,4.62,2576,6.511,2577,6.511,2578,6.511,2579,8.187,2580,4.62,2581,4.62,2582,6.511,2583,6.511,2584,5.41,2585,4.62,2586,4.62,2587,4.62,2588,3.607,2589,4.62,2590,6.771,2591,4.257,2592,4.823,2593,4.149,2594,4.62,2595,4.62,2596,4.62,2597,6.511,2598,6.511,2599,4.62,2600,4.62,2601,3.607,2602,3.422,2603,3.422]],["title/classes/FilterOptionsDto.html",[60,0.175,2604,3.573]],["body/classes/FilterOptionsDto.html",[3,0.043,4,0.043,5,0.038,10,0.187,11,0.987,13,0.952,14,0.404,15,0.005,16,0.081,59,0.048,60,0.238,76,1.242,78,3.376,93,2.457,100,2.696,117,2.436,119,2.418,141,2.293,143,3.551,187,3.12,239,0.003,240,0.003,292,0.449,296,0.942,420,2.571,504,2.739,508,1.244,512,1.042,516,1.426,520,0.708,521,3.269,522,1.488,742,2.139,755,2.731,816,2.208,870,1.508,933,2.293,989,1.895,1040,2.385,1043,3.157,1044,2.689,1052,4.74,1072,2.731,1074,3.76,1075,3.582,1077,3.374,1079,3.668,1080,4.195,1084,2.543,1085,3.502,1086,2.488,1087,2.664,1088,2.879,1089,3.918,1090,2.543,1091,2.731,1092,2.802,1093,2.543,1094,2.802,1095,3.04,1096,2.602,1097,2.731,1098,2.731,1099,3.502,1100,2.802,1101,2.543,1102,2.802,1103,3.928,1104,2.962,1105,3.789,1106,2.879,1365,4.146,2246,4.963,2571,4.86,2604,4.86,2605,7.972,2606,4.963,2607,5.333,2608,5.795,2609,3.696,2610,4.146,2611,3.896,2612,4.146,2613,3.53,2614,3.896,2615,4.481,2616,3.387,2617,3.696]],["title/classes/FilteredUsersDto.html",[60,0.175,2618,3.944]],["body/classes/FilteredUsersDto.html",[3,0.05,4,0.05,5,0.044,8,3.55,10,0.216,11,1.089,13,1.046,14,0.408,15,0.005,16,0.081,59,0.055,60,0.292,71,1.088,76,1.134,85,3.481,117,2.373,187,3.724,239,0.003,240,0.003,292,0.415,296,0.819,449,5.103,504,2.624,508,1.439,512,0.907,513,2.194,519,2.792,520,0.819,522,1.721,523,0.768,816,3.353,870,2.818,961,1.82,964,3.158,1043,3.887,1044,2.894,1077,3.215,1085,3.861,1086,3.777,1093,2.942,1103,3.743,1105,3.61,1169,5.53,1214,3.234,1339,3.425,1340,3.425,1421,4.795,1457,5.183,2246,4.785,2569,5.612,2570,5.983,2574,5.183,2588,4.506,2591,4.953,2592,5.612,2593,5.183,2602,4.275,2603,4.275,2618,5.915,2619,8.375,2620,4.506,2621,5.183,2622,5.183,2623,5.359,2624,5.771,2625,5.183,2626,5.183]],["title/classes/FollowManyUsersDto.html",[60,0.175,2627,3.944]],["body/classes/FollowManyUsersDto.html",[3,0.061,4,0.061,5,0.055,10,0.267,11,1.246,14,0.37,15,0.005,16,0.083,59,0.068,60,0.3,76,1.225,239,0.004,240,0.004,292,0.33,439,3.722,508,1.78,512,0.765,513,2.714,516,1.799,519,3.194,520,1.013,521,3.346,522,2.129,523,0.95,662,2.782,856,4.509,958,4.866,960,4.736,1183,4.668,1422,3.907,1442,6.412,2239,7.762,2352,5.882,2620,5.574,2627,6.766,2628,7.783,2629,6.419,2630,7.139,2631,7.139,2632,7.139]],["title/classes/GenerateCodeExplanationDto.html",[60,0.175,884,3.741]],["body/classes/GenerateCodeExplanationDto.html",[3,0.051,4,0.051,5,0.046,10,0.222,11,1.109,13,0.973,14,0.407,15,0.005,16,0.074,59,0.057,60,0.267,76,1.24,117,1.876,141,2.726,239,0.003,240,0.003,292,0.419,508,1.479,512,0.973,513,3.45,515,4.955,516,2.002,519,3.467,520,0.842,521,3.31,522,1.769,523,1.351,809,5.755,853,6.151,878,4.016,884,5.713,961,2.181,1168,3.422,1312,4.394,1315,6.349,1316,4.394,1317,5.713,1318,5.713,1319,5.713,1320,5.713,1321,5.713,1322,5.713,1323,5.713,1324,5.713,1325,5.713,1327,3.932,1328,4.196,1330,4.196,1338,5.414,1339,3.521,1340,3.521,1341,4.196,1342,4.196,1343,4.196,1344,4.196,1345,4.196,1347,4.394,2633,6.969,2634,5.327,2635,6.692,2636,5.932,2637,5.932,2638,5.932,2639,5.932]],["title/classes/GenerateCodeRefactorSuggestionDto.html",[60,0.175,915,3.741]],["body/classes/GenerateCodeRefactorSuggestionDto.html",[3,0.051,4,0.051,5,0.045,10,0.22,11,1.103,13,0.97,14,0.407,15,0.005,16,0.073,59,0.056,60,0.265,76,1.238,117,1.866,141,2.704,239,0.003,240,0.003,292,0.418,508,1.467,512,0.97,513,3.439,515,4.948,516,1.998,519,3.458,520,0.835,521,3.297,522,1.755,523,1.281,809,5.74,853,6.135,878,4.006,899,6.142,912,6.951,915,5.683,961,2.174,1168,3.394,1312,4.358,1315,6.324,1316,4.358,1317,5.683,1318,5.683,1319,5.683,1320,5.683,1321,5.683,1322,5.683,1323,5.683,1324,5.683,1325,5.683,1327,3.911,1328,4.162,1330,4.162,1338,5.392,1339,3.492,1340,3.492,1341,4.162,1342,4.162,1343,4.162,1344,4.162,1345,4.162,1347,4.358,2633,6.951,2635,6.666,2640,4.889,2641,5.884,2642,5.284,2643,5.884,2644,5.284]],["title/classes/GenerateCodeTestSuggestionDto.html",[60,0.175,943,3.741]],["body/classes/GenerateCodeTestSuggestionDto.html",[3,0.056,4,0.056,5,0.05,10,0.242,11,1.172,13,1.005,14,0.405,15,0.005,16,0.078,59,0.062,60,0.282,76,1.128,141,2.975,239,0.004,240,0.004,292,0.413,508,1.614,512,0.957,513,3.395,515,4.991,516,1.947,519,3.455,520,0.919,521,3.15,522,1.931,523,1.286,853,6.319,878,4.003,899,5.537,943,6.042,946,6.632,961,2.253,1312,4.795,1327,4.158,1328,4.58,1330,4.58,1338,5.641,1339,3.842,1340,3.842,1341,4.58,1342,4.58,1343,4.58,1344,4.58,1345,4.58,2633,6.945,2635,6.973,2640,5.379,2642,5.814,2644,5.814,2645,6.474]],["title/classes/GeneratePullRequestDescriptionDto.html",[60,0.175,2646,3.741]],["body/classes/GeneratePullRequestDescriptionDto.html",[3,0.044,4,0.044,5,0.039,10,0.191,11,1.001,13,0.915,14,0.41,15,0.005,16,0.066,59,0.049,60,0.241,76,1.292,117,1.694,141,2.338,197,4.106,201,4.923,239,0.003,240,0.003,292,0.426,296,0.778,391,3.143,439,2.777,508,1.269,512,0.989,513,3.244,516,2.05,519,3.294,520,0.722,521,3.296,522,1.517,523,1.354,807,6.323,809,5.467,853,5.844,867,5.436,878,4.034,960,3.399,961,2.051,970,4.398,1095,3.081,1103,3.513,1105,3.388,1168,2.935,1315,5.879,1316,3.769,1317,5.157,1318,5.157,1319,5.157,1320,5.157,1321,5.157,1322,5.157,1323,5.157,1324,5.157,1325,5.157,1327,3.549,1328,3.599,1330,3.599,1332,4.228,1333,5.785,1334,5.785,1335,5.785,1336,6.595,1338,5.013,1339,3.02,1340,3.02,1341,3.599,1342,3.599,1343,3.599,1344,3.599,1345,3.599,1346,4.228,1347,3.769,1909,3.973,2633,6.999,2635,6.197,2646,5.157,2647,4.57,2648,7.938,2649,8.027,2650,5.089,2651,5.089,2652,5.089,2653,5.089,2654,5.089,2655,5.089,2656,5.089,2657,5.089,2658,5.089,2659,5.089,2660,5.089,2661,4.57,2662,5.089,2663,5.089,2664,5.089,2665,5.089]],["title/controllers/HealthController.html",[525,1.156,2666,3.944]],["body/controllers/HealthController.html",[3,0.048,4,0.048,5,0.043,10,0.208,15,0.005,16,0.084,19,0.741,59,0.053,60,0.193,62,1.516,65,2.484,71,1.394,72,2.138,239,0.003,240,0.003,288,1.499,292,0.342,298,1.499,304,4.665,305,3.046,309,4.625,420,3.313,453,4.346,497,4.625,501,6.147,502,6.519,504,1.459,512,0.793,520,0.79,525,1.274,527,1.535,529,2.051,542,3.12,614,3.369,615,3.109,616,2.051,642,3.357,645,2.768,773,2.328,1456,5.255,2666,5.776,2667,4.999,2668,9.475,2669,9.475,2670,5.567,2671,7.398,2672,7.398,2673,5.567,2674,5.567,2675,7.398,2676,5.567,2677,7.398,2678,7.398,2679,7.398,2680,8.309,2681,7.398,2682,7.398,2683,5.567,2684,5.567,2685,5.567,2686,5.567,2687,5.567,2688,6.643,2689,7.398,2690,5.567,2691,5.567,2692,5.567,2693,5.567,2694,5.567,2695,5.567,2696,7.398,2697,5.567,2698,5.567,2699,5.567,2700,5.567,2701,5.567,2702,5.567,2703,5.567,2704,5.567,2705,5.567,2706,5.567,2707,5.567,2708,5.567,2709,5.567,2710,5.567,2711,5.567,2712,5.567]],["title/modules/HealthModule.html",[241,1.291,268,3.741]],["body/modules/HealthModule.html",[3,0.067,4,0.067,5,0.06,15,0.005,16,0.092,19,1.034,59,0.074,60,0.269,239,0.004,240,0.004,241,2.33,243,2.907,268,6.751,287,3.259,308,8.185,309,6.455,527,2.514,2666,7.552,2713,7.769,2714,7.769]],["title/controllers/HighlightController.html",[525,1.156,2715,3.944]],["body/controllers/HighlightController.html",[3,0.031,4,0.031,5,0.028,8,2.545,10,0.135,13,1.039,14,0.396,15,0.005,16,0.089,19,0.479,25,1.215,26,1.308,28,1.758,59,0.034,60,0.125,71,1.605,72,2.059,77,3.108,78,2.166,119,2.447,203,2.239,208,1.011,239,0.002,240,0.002,288,1.101,292,0.394,294,1.665,295,0.98,296,0.776,298,1.726,348,1.836,391,2.174,393,4.909,394,2.275,395,2.138,404,4.795,409,2.972,504,0.944,512,0.913,520,0.511,523,1.092,525,0.824,527,0.993,529,1.328,542,3.386,547,5.019,551,3.271,557,1.971,609,1.796,610,1.624,611,3.003,613,3.344,614,3.554,615,3.281,616,1.328,636,1.511,642,1.251,644,2.495,645,3.187,656,2.075,769,4.381,775,3.794,776,1.688,784,1.288,961,1.972,988,1.233,989,1.498,1210,5.057,1214,1.538,1215,1.624,1216,1.688,1217,1.624,1218,1.688,1642,4.877,1735,4.841,1794,6.078,1863,4.022,2236,3.686,2245,5.379,2250,4.841,2424,4.922,2448,4.022,2452,1.688,2507,3.686,2715,4.24,2716,3.235,2717,6.308,2718,6.535,2719,7.276,2720,6.534,2721,7.276,2722,7.276,2723,7.276,2724,6.535,2725,3.602,2726,3.602,2727,5.43,2728,3.321,2729,5.43,2730,4.24,2731,5.389,2732,4.877,2733,4.841,2734,3.602,2735,3.602,2736,3.235,2737,5.869,2738,3.602,2739,3.235,2740,3.235,2741,3.602,2742,3.602,2743,3.602,2744,2.993,2745,3.602,2746,3.602,2747,3.235,2748,3.602,2749,3.602,2750,3.235,2751,3.235,2752,3.235,2753,3.235,2754,3.602,2755,3.602,2756,3.602,2757,5.43,2758,3.602,2759,4.085,2760,3.885,2761,1.923,2762,4.273,2763,3.602,2764,2.812,2765,3.602,2766,3.602,2767,3.602,2768,2.993,2769,5.43,2770,3.602,2771,3.235,2772,3.235,2773,3.602,2774,3.602,2775,3.602,2776,3.321,2777,3.602,2778,3.602,2779,3.602,2780,3.235,2781,3.602,2782,3.602,2783,3.235,2784,3.235,2785,3.602,2786,3.235,2787,3.235,2788,3.602,2789,3.602]],["title/modules/HighlightModule.html",[241,1.291,269,3.741]],["body/modules/HighlightModule.html",[3,0.063,4,0.063,5,0.056,15,0.005,16,0.095,19,0.969,24,2.143,59,0.069,60,0.252,64,2.201,239,0.004,240,0.004,241,2.242,243,2.726,244,3.442,249,3.442,250,2.812,251,2.768,269,7.521,283,6.026,287,3.679,302,3.413,359,4.944,393,3.986,394,4.6,395,4.323,527,2.419,2715,7.349,2790,7.283,2791,7.283,2792,7.283,2793,6.541,2794,7.283]],["title/classes/HighlightOptionsDto.html",[60,0.175,2245,3.191]],["body/classes/HighlightOptionsDto.html",[3,0.046,4,0.046,5,0.041,10,0.199,11,1.03,13,0.972,14,0.398,15,0.005,16,0.083,59,0.068,60,0.28,76,1.097,78,3.463,85,2.438,93,2.561,100,2.811,117,2.421,119,2.453,141,2.438,143,3.643,187,3.2,239,0.003,240,0.003,292,0.432,296,0.922,394,3.351,403,3.149,404,4.133,405,3.469,420,2.681,439,2.857,504,2.683,508,1.323,512,1.002,516,1.684,520,0.753,521,3.132,522,1.582,523,0.953,742,2.469,755,2.903,816,2.348,870,1.603,933,2.438,960,2.589,988,1.816,989,1.463,1040,2.816,1043,3.292,1044,2.451,1052,4.842,1072,2.903,1074,3.92,1075,3.735,1077,3.447,1079,2.833,1080,2.833,1084,2.704,1085,3.651,1086,2.645,1087,2.833,1088,3.06,1089,4.044,1090,2.704,1091,2.903,1092,2.979,1093,2.704,1094,2.979,1095,3.589,1096,2.766,1097,2.903,1098,2.903,1099,3.651,1100,2.979,1101,2.704,1102,2.979,1103,3.589,1105,3.462,1183,3.469,1739,4.142,2212,4.142,2213,4.142,2236,3.601,2237,5.952,2238,4.408,2239,4.142,2240,4.408,2244,4.764,2245,4.524,2246,4.524,2247,4.764,2248,4.764,2249,4.764,2611,4.142,2795,5.305]],["title/injectables/HttpLoggerMiddleware.html",[17,0.885,360,3.944]],["body/injectables/HttpLoggerMiddleware.html",[3,0.054,4,0.054,5,0.048,10,0.233,11,1.143,14,0.246,15,0.005,16,0.088,17,1.393,19,0.828,59,0.076,60,0.215,65,2.298,68,2.166,71,1.652,102,2.165,117,1.934,149,5.651,239,0.004,240,0.004,288,1.611,292,0.367,294,1.215,295,0.667,296,0.567,298,1.26,299,4.398,317,5.167,318,5.167,319,5.167,360,6.844,391,3.248,458,6.271,499,5.889,796,1.984,823,6.823,850,4.587,1077,2.363,1529,5.167,1530,5.167,1766,5.167,2796,7.872,2797,5.889,2798,7.951,2799,9.238,2800,6.218,2801,7.951,2802,6.218,2803,7.951,2804,5.584,2805,5.167,2806,6.218,2807,6.218,2808,5.584,2809,6.218,2810,6.218,2811,7.951,2812,8.297,2813,7.951,2814,6.218,2815,6.218,2816,6.218,2817,6.218,2818,6.218,2819,6.218]],["title/controllers/InsightController.html",[525,1.156,2820,3.944]],["body/controllers/InsightController.html",[3,0.045,4,0.045,5,0.04,10,0.196,13,1.052,14,0.389,15,0.005,16,0.091,19,0.695,59,0.05,60,0.181,68,1.224,71,0.984,72,1.908,77,2.79,102,1.422,123,1.834,208,1.498,239,0.003,240,0.003,288,1.436,292,0.327,294,1.385,295,0.925,296,0.646,298,1.436,366,4.774,391,1.737,504,1.369,512,0.76,520,0.741,523,1.148,525,1.195,527,1.44,529,1.924,542,3.039,544,3.783,545,3.544,547,4.334,551,3.277,557,2.857,610,2.354,611,3.256,612,3.695,613,3.696,614,3.261,615,3.01,616,1.924,636,2.19,642,1.813,644,2.399,645,2.652,656,2.164,769,3.783,770,2.931,775,3.695,776,2.447,784,1.867,788,1.984,961,2.073,1044,3.183,1378,5.001,1814,3.413,2381,2.661,2424,3.979,2449,3.867,2452,2.447,2507,4.81,2759,4.516,2760,4.295,2761,2.788,2820,5.532,2821,4.689,2822,8.626,2823,8.626,2824,5.221,2825,4.076,2826,5.888,2827,5.221,2828,6.363,2829,5.532,2830,5.221,2831,5.221,2832,5.221,2833,4.338,2834,5.012,2835,4.689,2836,4.689,2837,5.221,2838,5.012,2839,7.086,2840,5.248,2841,4.076,2842,4.338,2843,3.867,2844,5.08,2845,3.544,2846,5.221,2847,4.338,2848,4.076,2849,5.221,2850,5.888,2851,4.338,2852,5.221,2853,4.689,2854,5.221]],["title/injectables/InsightMemberService.html",[17,0.885,2855,3.429]],["body/injectables/InsightMemberService.html",[3,0.037,4,0.037,5,0.033,10,0.161,13,1.007,14,0.357,15,0.005,16,0.088,17,1.085,18,2.902,19,0.573,20,2.462,21,3.872,22,0.985,23,1.717,24,1.267,25,1.453,26,1.563,59,0.041,60,0.149,62,1.686,64,1.301,65,1.901,67,3.386,68,2.114,69,2.902,71,1.771,72,2.081,76,1.232,77,2.83,82,3.548,83,3.152,85,1.979,102,1.173,117,1.048,119,2.209,123,1.877,235,3.389,239,0.003,240,0.003,248,4.813,288,1.255,292,0.426,294,1.762,295,0.966,296,0.822,298,1.827,399,4.923,400,3.362,439,3.163,456,1.374,551,2.96,656,1.853,659,5.351,773,2.282,788,1.637,796,1.374,988,1.474,989,1.188,990,2.72,995,2.72,997,4.283,998,3.088,1077,1.637,1161,3.362,1378,2.195,1814,2.816,2405,3.578,2506,3.912,2524,3.912,2844,5.009,2845,2.923,2853,3.867,2855,4.204,2856,7.806,2857,3.867,2858,5.562,2859,7.253,2860,5.562,2861,6.193,2862,5.562,2863,4.306,2864,7.253,2865,4.306,2866,6.193,2867,6.193,2868,4.306,2869,7.546,2870,4.306,2871,4.306,2872,7.923,2873,8.402,2874,7.931,2875,4.306,2876,6.193,2877,4.306,2878,4.306,2879,6.193,2880,4.306,2881,5.562,2882,4.306,2883,3.362,2884,4.306,2885,4.306,2886,4.306,2887,4.306,2888,4.306,2889,4.306,2890,4.306,2891,6.193,2892,4.306,2893,4.306,2894,3.867,2895,4.306,2896,4.306,2897,4.306,2898,4.306,2899,4.306,2900,4.306,2901,4.306]],["title/classes/InsightOptionsDto.html",[60,0.175,2902,4.197]],["body/classes/InsightOptionsDto.html",[3,0.042,4,0.042,5,0.038,10,0.183,11,0.974,13,0.945,14,0.401,15,0.005,16,0.074,37,2.824,59,0.065,60,0.234,76,1.204,78,3.349,93,2.424,100,2.66,117,2.446,119,2.407,141,2.25,143,3.522,187,3.094,203,2.019,239,0.003,240,0.003,292,0.447,296,0.94,409,2.679,504,2.734,508,1.221,512,1.037,520,0.695,521,3.242,522,1.46,742,2.118,816,2.166,870,1.479,933,2.25,957,2.905,988,1.675,989,1.35,1040,2.354,1043,3.116,1044,2.32,1049,3.201,1052,4.707,1072,2.679,1074,3.71,1075,3.535,1077,3.467,1079,3.62,1080,4.153,1083,4.396,1084,2.495,1085,3.456,1086,2.441,1087,2.614,1088,2.824,1089,3.878,1090,2.495,1091,2.679,1092,2.749,1093,2.495,1094,2.749,1095,3,1096,2.553,1097,2.679,1098,2.679,1099,3.456,1100,2.749,1101,2.495,1102,2.749,1103,3.902,1104,2.905,1105,3.764,1106,3.911,1240,5.022,1922,3.201,2246,4.913,2571,3.463,2591,3.201,2606,4.913,2607,5.28,2608,5.761,2609,3.626,2613,4.796,2617,3.626,2902,5.634,2903,6.883,2904,4.896,2905,4.896,2906,7.778,2907,4.896,2908,4.896,2909,4.068,2910,4.068,2911,4.068,2912,4.068,2913,4.068]],["title/classes/InsightPageOptionsDto.html",[60,0.175,2914,3.573]],["body/classes/InsightPageOptionsDto.html",[3,0.052,4,0.052,5,0.047,10,0.227,11,1.125,13,1.016,14,0.4,15,0.005,16,0.058,59,0.058,60,0.21,78,3.652,93,2.8,100,3.073,117,2.479,119,2.526,141,2.79,143,3.841,187,3.374,239,0.003,240,0.003,292,0.438,296,0.929,504,2.672,508,1.514,512,1.016,816,2.687,870,1.835,933,2.79,988,2.078,989,1.674,1040,2.719,1043,3.598,1044,2.966,1052,5.06,1072,3.323,1074,4.285,1075,4.083,1077,3.602,1079,3.242,1080,3.242,1084,3.095,1085,3.991,1086,3.027,1087,3.242,1088,3.502,1089,4.322,1090,3.095,1091,3.323,1092,3.409,1093,3.095,1094,3.409,1095,3.465,1096,3.166,1097,3.323,1098,3.323,1099,3.991,1100,3.409,1101,3.095,1102,3.409,2903,4.74,2914,5.539]],["title/injectables/InsightRepoService.html",[17,0.885,2915,3.573]],["body/injectables/InsightRepoService.html",[3,0.05,4,0.05,5,0.044,10,0.217,13,1.027,14,0.335,15,0.005,16,0.093,17,1.331,19,0.771,20,2.791,22,1.325,23,2.309,24,1.704,59,0.055,60,0.2,62,2.067,64,1.75,65,1.99,68,1.357,71,1.431,72,1.965,123,1.499,193,2.61,203,2.387,239,0.003,240,0.003,288,1.539,292,0.391,294,1.656,295,0.908,296,0.772,298,1.539,348,2.951,368,3.93,426,4.52,456,1.847,642,2.01,656,1.277,661,3.168,672,2.826,680,3.168,681,5.153,738,5.153,741,4.52,742,2.448,749,3.93,773,2.665,796,1.847,838,3.168,839,3.541,873,3.168,970,3.657,1063,4.52,1378,2.951,1382,5.879,1384,3.93,1385,4.811,1388,3.657,1819,4.288,2856,7.471,2872,6.308,2883,4.52,2915,5.37,2916,5.199,2917,7.592,2918,7.592,2919,5.79,2920,6.383,2921,5.79,2922,7.592,2923,7.592,2924,5.79,2925,7.592,2926,5.79,2927,4.52,2928,5.199,2929,4.52,2930,5.79,2931,4.811,2932,5.199,2933,4.811,2934,4.811,2935,5.199,2936,4.811,2937,5.79,2938,5.199,2939,5.199,2940,5.199,2941,4.811,2942,4.811,2943,5.199,2944,5.79,2945,4.811,2946,5.199,2947,5.79]],["title/modules/InsightsModule.html",[241,1.291,270,3.741]],["body/modules/InsightsModule.html",[3,0.05,4,0.05,5,0.045,15,0.005,16,0.099,19,0.777,24,1.718,59,0.056,60,0.202,64,1.764,208,1.421,239,0.003,240,0.003,241,1.951,242,5.873,243,2.184,244,2.995,249,2.995,250,2.254,251,2.218,254,3.147,255,3.258,270,7.781,274,6.791,283,5.698,287,3.202,302,2.735,348,2.975,359,3.962,366,3.464,368,5.181,399,5.181,400,4.557,426,4.557,427,5.241,527,2.105,1378,4.335,2498,4.128,2499,4.128,2820,6.64,2843,4.323,2844,6.482,2845,3.962,2855,6.517,2883,5.959,2915,7.26,2948,5.241,2949,5.241,2950,5.836,2951,5.241,2952,5.836,2953,6.64,2954,6.64,2955,7.632,2956,4.557,2957,5.836,2958,4.849,2959,5.836]],["title/injectables/InsightsService.html",[17,0.885,2844,3.191]],["body/injectables/InsightsService.html",[3,0.037,4,0.037,5,0.033,10,0.161,13,1.007,14,0.347,15,0.005,16,0.09,17,1.086,18,2.905,19,0.574,20,2.463,21,3.875,22,0.986,23,1.72,24,1.269,25,1.455,26,1.565,59,0.041,60,0.149,62,1.688,64,1.303,65,1.625,67,3.387,68,2.163,69,2.905,71,1.65,72,2.049,76,0.917,77,2.566,82,3.218,83,1.874,91,2.356,102,1.976,118,3.309,119,1.565,122,1.269,123,2.054,125,3.873,203,1.778,208,0.803,235,3.971,239,0.003,240,0.003,288,1.256,292,0.417,294,1.711,295,0.938,296,0.798,298,1.774,366,3.679,426,3.366,456,1.375,551,3.311,642,1.497,656,1.854,659,5.353,661,2.359,672,3.025,680,2.359,681,4.208,738,4.208,741,3.366,742,1.174,749,2.927,773,2.497,788,1.639,796,1.375,838,2.359,839,2.637,873,2.359,970,2.723,988,1.476,989,1.189,997,3.699,998,2.15,1044,1.476,1063,3.366,1067,2.359,1146,2.927,1147,2.637,1148,2.637,1378,4.461,1599,2.487,1638,2.104,1785,2.356,1814,2.819,1818,3.193,1819,3.193,1823,3.193,1841,3.872,1849,5.567,2506,3.915,2524,3.915,2843,3.193,2844,3.915,2914,5.613,2920,5.896,2927,3.366,2928,3.872,2929,3.366,2931,3.582,2932,3.872,2933,3.582,2934,3.582,2935,3.872,2936,3.582,2938,3.872,2939,3.872,2940,3.872,2941,3.582,2942,3.582,2943,3.872,2960,3.872,2961,6.199,2962,4.385,2963,6.199,2964,6.199,2965,4.311,2966,4.311,2967,6.199,2968,6.199,2969,4.311,2970,4.311,2971,4.839,2972,4.311,2973,4.311,2974,6.199,2975,4.311,2976,6.199,2977,4.311,2978,3.582,2979,4.311,2980,6.199,2981,4.311,2982,4.311,2983,6.199,2984,6.199,2985,4.311,2986,4.311,2987,4.311,2988,4.311,2989,4.311,2990,4.311,2991,6.199,2992,3.872,2993,4.311,2994,4.311,2995,4.311,2996,4.311,2997,4.311,2998,4.311]],["title/controllers/IssueSummaryController.html",[525,1.156,2999,3.944]],["body/controllers/IssueSummaryController.html",[3,0.055,4,0.055,5,0.049,10,0.239,14,0.321,15,0.005,16,0.092,19,0.851,59,0.061,60,0.221,68,1.499,71,1.205,72,1.822,102,1.741,123,1.655,239,0.004,240,0.004,288,1.64,292,0.295,294,1.25,295,0.685,296,0.583,298,1.296,391,2.127,504,1.676,512,0.685,520,0.907,523,0.851,525,1.463,527,1.763,529,2.356,542,3.562,577,3.259,609,3.188,610,2.883,611,3.719,612,4.22,615,3.029,616,2.356,636,2.682,642,2.22,644,2.938,645,2.393,758,5.313,763,5.742,765,5.112,769,4.321,770,3.59,771,5.742,773,2.012,774,4.95,775,4.22,776,2.996,777,3.057,779,4.992,781,4.992,784,2.286,785,5.742,788,2.43,794,6.028,1396,7.286,1691,4.181,2999,6.319,3000,6.319,3001,8.382,3002,6.394,3003,6.394,3004,8.094,3005,6.281,3006,6.394,3007,6.394,3008,6.394,3009,6.394]],["title/modules/IssueSummaryModule.html",[241,1.291,271,3.741]],["body/modules/IssueSummaryModule.html",[3,0.06,4,0.06,5,0.054,15,0.005,16,0.092,19,0.934,59,0.067,60,0.243,239,0.004,240,0.004,241,2.192,243,2.625,244,3.364,249,3.364,250,2.709,251,2.666,254,3.535,255,3.66,271,7.677,273,6.58,287,3.597,420,2.625,421,3.839,422,5.477,527,2.364,781,5.477,793,6.299,794,5.82,795,6.299,2999,7.229,3000,5.477,3005,7.443,3010,6.299,3011,6.299,3012,6.299,3013,7.015]],["title/injectables/IssueSummaryService.html",[17,0.885,3005,3.573]],["body/injectables/IssueSummaryService.html",[3,0.05,4,0.05,5,0.044,10,0.216,13,0.907,14,0.335,15,0.005,16,0.081,17,1.328,19,0.768,59,0.055,60,0.2,62,1.571,65,2.217,68,1.776,71,1.428,72,1.735,74,3.158,76,1.209,239,0.003,240,0.003,288,1.535,292,0.391,294,1.653,295,0.907,296,0.771,298,1.535,420,2.16,421,3.158,498,4.082,523,0.768,542,3.286,661,3.158,680,3.158,765,3.645,773,2.384,777,2.759,779,4.506,784,2.064,794,6.497,796,1.841,798,4.795,799,5.359,800,4.082,801,5.521,802,5.183,805,5.612,806,5.871,807,6.597,808,5.183,809,5.173,810,3.917,811,4.082,812,4.082,813,3.773,814,4.275,816,2.554,817,4.082,818,4.275,819,4.275,820,4.275,821,4.275,822,4.795,823,3.917,824,4.506,825,5.183,826,5.183,827,4.082,828,4.953,829,3.53,832,5.359,833,4.082,834,4.275,835,5.183,836,4.795,837,4.082,838,4.914,839,3.53,840,4.082,841,4.082,935,3.917,1096,3.009,1396,6.652,1401,5.143,1691,3.773,3000,7.011,3001,6.804,3005,5.359,3014,7.576,3015,5.771,3016,5.183,3017,5.771,3018,5.183,3019,7.576,3020,5.771,3021,5.771,3022,5.771,3023,5.771]],["title/modules/LogModule.html",[241,1.291,272,3.741]],["body/modules/LogModule.html",[3,0.06,4,0.06,5,0.054,15,0.005,16,0.096,19,0.932,24,2.06,59,0.067,60,0.242,239,0.004,240,0.004,241,2.189,243,2.62,244,3.36,249,3.36,250,2.703,251,2.661,254,3.531,255,3.656,272,7.675,287,2.937,302,3.281,303,7.69,305,3.831,383,4.952,458,4.752,467,5.817,1466,7.792,1477,7.116,1492,6.287,3024,6.287,3025,6.287,3026,6.287,3027,7.001,3028,6.287,3029,7.001,3030,7.001]],["title/injectables/LogService.html",[17,0.885,1477,3.573]],["body/injectables/LogService.html",[3,0.059,4,0.059,5,0.052,10,0.255,14,0.333,15,0.005,16,0.094,17,1.475,19,0.905,20,2.962,22,1.557,23,2.713,24,2.002,59,0.065,60,0.235,62,2.291,65,1.783,68,1.595,71,1.282,72,1.874,123,1.761,239,0.004,240,0.004,288,1.705,292,0.389,294,1.645,295,0.902,296,0.767,298,1.379,383,4.812,439,2.713,467,5.653,773,2.141,777,3.253,796,2.17,873,3.723,1403,7.451,1472,5.653,1477,5.952,3028,6.11,3031,6.11,3032,8.414,3033,6.803,3034,6.803,3035,8.414,3036,8.414,3037,6.803,3038,6.803,3039,6.803,3040,8.414,3041,6.803,3042,6.803,3043,6.803]],["title/modules/OpenAiModule.html",[241,1.291,273,3.303]],["body/modules/OpenAiModule.html",[3,0.064,4,0.064,5,0.057,15,0.005,16,0.084,19,0.985,59,0.071,60,0.256,239,0.004,240,0.004,241,2.264,243,2.77,244,3.475,249,3.475,250,2.859,251,2.814,254,3.652,255,3.781,273,6.737,420,2.77,421,4.051,801,6.11,810,5.025,843,5.78,3044,6.648,3045,6.648,3046,6.648,3047,7.403]],["title/injectables/OpenAiService.html",[17,0.885,801,2.914]],["body/injectables/OpenAiService.html",[0,3.422,3,0.051,4,0.051,5,0.046,10,0.222,13,0.919,14,0.339,15,0.005,16,0.082,17,1.352,19,0.789,59,0.057,60,0.205,62,1.615,68,2.01,71,1.118,72,1.758,76,1.24,102,1.615,123,1.997,147,4.394,148,4.394,149,3.628,150,4.394,187,2.186,208,1.105,239,0.003,240,0.003,288,1.563,292,0.356,294,1.508,295,0.827,296,0.703,298,1.202,304,5.415,305,3.246,421,4.69,499,4.394,577,3.024,609,2.958,648,6.022,773,1.867,784,2.121,788,2.255,796,1.892,801,4.449,823,4.027,828,5.934,842,6.022,843,6.692,844,4.929,845,5.327,847,8.661,848,5.327,849,5.327,850,3.422,851,6.927,852,8.151,853,6.151,854,5.327,855,5.327,856,3.747,857,5.327,858,5.327,859,4.394,860,5.327,861,4.929,862,5.327,863,5.327,864,5.327,865,1.946,866,5.327,867,4.632,868,5.327,869,6.927,870,1.793,871,5.327,872,5.327,873,3.246,874,5.327,875,5.327,876,5.327,2553,4.632,3048,7.713,3049,5.932,3050,5.932]],["title/classes/PageDto.html",[25,1.704,60,0.175]],["body/classes/PageDto.html",[3,0.056,4,0.056,5,0.05,10,0.244,11,1.176,14,0.397,15,0.005,16,0.09,25,2.761,59,0.062,60,0.31,62,1.772,125,4.951,239,0.004,240,0.004,292,0.414,294,1.272,295,0.698,296,0.593,439,3.264,504,2.59,508,1.623,512,0.877,519,3.3,520,0.924,522,1.941,873,5.298,958,3.655,960,4.37,964,3.562,1044,2.228,1065,7.095,1067,3.562,1173,7.351,1174,6.571,1176,5.846,1177,5.846,1178,5.846,1180,5.846,1181,5.846,1182,8.041,1183,4.256,1184,5.846,1185,5.846,3051,5.846,3052,8.185,3053,6.509]],["title/classes/PageMetaDto.html",[60,0.175,125,2.466]],["body/classes/PageMetaDto.html",[3,0.045,4,0.045,5,0.04,10,0.194,11,1.014,13,1.094,14,0.406,15,0.005,16,0.067,59,0.05,60,0.18,62,1.922,118,4.806,119,1.311,125,3.445,149,4.317,187,3.172,239,0.003,240,0.003,292,0.439,294,1.015,295,0.556,296,0.473,439,2.815,456,2.252,504,2.72,508,1.294,512,0.995,513,3.529,516,2.093,519,3.501,520,0.737,523,1.236,747,4.201,870,2.72,961,2.323,1041,7.202,1042,7.202,1043,3.685,1044,3.45,1045,7.202,1046,4.662,1047,6.374,1049,4.615,1050,6.087,1051,6.719,1054,5.228,1056,7.151,1057,7.729,1059,5.865,1061,4.615,1063,5.511,1065,3.672,1066,4.662,2602,5.94,2603,5.228,3054,7.547,3055,4.662,3056,7.058,3057,5.191,3058,5.191,3059,5.191,3060,5.191,3061,5.191,3062,5.191,3063,5.191,3064,5.191,3065,5.191,3066,5.191,3067,5.191,3068,5.191]],["title/interfaces/PageMetaParameters.html",[0,2.914,1047,3.741]],["body/interfaces/PageMetaParameters.html",[0,4.415,2,5.669,3,0.066,4,0.066,5,0.059,10,0.287,11,1.299,13,1.03,14,0.358,15,0.005,16,0.073,59,0.073,118,5.302,119,2.638,239,0.004,240,0.004,989,2.111,1044,2.619,1047,6.692,1065,5.414,3054,5.975,3069,6.873]],["title/classes/PageOptionsDto.html",[60,0.175,119,1.275]],["body/classes/PageOptionsDto.html",[3,0.042,4,0.042,5,0.038,10,0.184,11,0.978,13,1.091,14,0.408,15,0.005,16,0.08,59,0.047,60,0.27,71,0.928,78,3.735,93,3.009,100,3.302,117,2.477,119,1.718,141,3.127,143,4.004,187,3.614,239,0.003,240,0.003,292,0.422,296,0.894,504,2.669,508,1.227,512,0.947,520,0.699,522,1.468,523,0.906,816,3.012,870,2.057,933,3.127,961,2.022,964,2.694,1043,3.585,1044,2.67,1072,2.694,1074,4.269,1075,4.067,1077,3.358,1079,2.628,1080,3.634,1084,3.976,1085,3.469,1086,3.393,1087,2.628,1089,4.669,1090,3.976,1091,2.694,1093,2.509,1095,3.012,1096,3.549,1097,3.724,1098,2.694,1099,3.469,1101,2.509,1103,4.043,1104,2.921,1105,3.9,1106,2.839,1129,3.843,1168,2.839,1169,5.775,1170,3.843,1171,5.313,1339,2.921,1340,2.921,2569,5.041,2570,5.518,2588,3.843,2591,4.45,2592,5.041,2602,3.646,2603,3.646,2612,4.09,2614,3.843,3054,7.312,3070,4.922,3071,4.922,3072,4.922,3073,4.922,3074,4.922,3075,4.09,3076,4.922,3077,4.922]],["title/injectables/PagerService.html",[17,0.885,248,2.697]],["body/injectables/PagerService.html",[0,3.881,3,0.058,4,0.058,5,0.052,10,0.252,14,0.331,15,0.005,16,0.095,17,1.464,19,0.895,21,4.461,22,1.539,25,2.27,59,0.064,60,0.233,68,1.959,71,1.268,72,1.864,82,3.388,102,2.275,118,4.461,119,2.468,122,1.98,123,1.741,125,4.64,239,0.004,240,0.004,248,4.461,288,1.693,292,0.311,294,1.633,295,0.721,296,0.613,298,1.363,773,2.117,796,2.146,989,1.855,994,4.566,1067,3.681,1147,4.115,1148,4.115,1303,1.448,3078,5.59,3079,8.162,3080,6.727,3081,7.422,3082,6.727,3083,6.041,3084,6.041,3085,4.983,3086,7.504,3087,6.041,3088,6.041]],["title/interfaces/PaginationInput.html",[0,2.914,3081,3.944]],["body/interfaces/PaginationInput.html",[0,3.932,2,5.049,3,0.059,4,0.059,5,0.052,10,0.255,11,1.211,14,0.334,15,0.005,16,0.095,17,1.476,19,0.907,21,5.099,22,1.559,25,2.3,59,0.065,60,0.236,68,1.975,71,1.285,72,1.398,82,3.979,102,2.294,118,4.498,119,2.621,122,2.006,123,1.764,125,4.661,239,0.004,240,0.004,248,3.639,989,1.88,994,4.627,1067,3.73,1147,4.169,1148,4.169,3078,5.664,3079,6.121,3081,7.138,3083,6.121,3084,6.121,3085,5.049,3086,7.565,3087,6.121,3088,6.121]],["title/controllers/PizzaOvenController.html",[525,1.156,3089,3.944]],["body/controllers/PizzaOvenController.html",[3,0.028,4,0.028,5,0.025,10,0.123,13,1.022,14,0.4,15,0.005,16,0.088,19,0.438,20,2.156,25,1.11,26,1.194,59,0.031,60,0.114,62,0.896,65,1.62,68,0.772,71,1.556,72,2.06,77,3.053,102,0.896,119,2.503,123,0.852,203,2.09,239,0.002,240,0.002,288,1.027,292,0.394,294,1.665,295,1.001,296,0.777,298,1.727,346,4.54,348,1.677,349,4.54,351,4.386,391,1.095,504,1.62,512,0.913,520,0.467,523,0.924,525,0.753,527,0.908,529,1.213,542,3.387,577,1.677,609,2.527,612,2.643,613,3.191,614,3.455,615,3.271,616,1.213,642,1.143,645,3.189,656,2.26,738,5.377,742,1.891,749,4.196,769,2.706,770,1.848,774,3.1,775,2.643,788,1.251,961,2.145,970,5.897,971,5.377,975,3.585,979,6.236,986,2.955,988,1.126,989,0.908,991,2.734,1007,4.372,1011,6.236,1020,2.955,1022,2.734,1158,3.899,1210,4.915,1214,2.639,1215,1.484,1216,1.542,1217,1.484,1218,1.542,1582,7.08,2381,3.151,2424,5.3,2449,4.579,2452,1.542,2740,2.955,2759,4.448,2760,4.229,2776,3.1,2780,2.955,2812,4.552,2920,4.042,2927,2.569,2929,2.569,2934,5.136,2941,5.136,3089,3.957,3090,6.825,3091,2.955,3092,6.236,3093,6.944,3094,6.944,3095,7.499,3096,7.499,3097,5.551,3098,2.955,3099,3.291,3100,3.291,3101,4.826,3102,3.291,3103,3.291,3104,3.291,3105,3.291,3106,3.291,3107,3.291,3108,3.291,3109,3.291,3110,3.291,3111,3.291,3112,3.291,3113,3.291,3114,3.291,3115,3.291,3116,4.552,3117,3.291,3118,3.291,3119,3.291,3120,3.291,3121,5.068,3122,5.068,3123,3.291,3124,3.291,3125,3.291,3126,3.291,3127,3.291,3128,3.291,3129,2.437,3130,5.068,3131,3.291,3132,3.291,3133,5.068,3134,5.068,3135,2.955,3136,2.734,3137,2.955,3138,2.955,3139,3.291,3140,3.291,3141,3.291,3142,3.291,3143,3.291,3144,3.291,3145,3.291,3146,3.291,3147,3.291,3148,3.291,3149,3.291,3150,3.291,3151,3.291,3152,3.291,3153,3.291,3154,3.291,3155,3.291,3156,3.291,3157,3.291,3158,3.291,3159,3.291,3160,3.291,3161,3.291,3162,3.291,3163,3.291,3164,5.068,3165,3.291,3166,3.291,3167,3.291,3168,3.291]],["title/modules/PizzaOvenModule.html",[241,1.291,274,3.573]],["body/modules/PizzaOvenModule.html",[3,0.053,4,0.053,5,0.047,15,0.005,16,0.098,19,0.815,24,1.802,59,0.058,60,0.212,64,1.85,239,0.003,240,0.003,241,2.013,242,5.949,243,2.291,244,3.089,249,3.089,250,2.364,251,2.327,254,3.247,255,3.361,274,7.403,287,3.303,302,2.869,306,7.07,307,5.088,346,4.003,348,3.121,349,5.148,351,4.973,527,2.171,749,5.344,970,3.868,975,7.31,991,5.088,1007,7.31,1022,5.088,2498,4.331,2499,4.331,2920,6.757,2927,4.781,3089,6.794,3090,4.781,3136,5.088,3137,5.499,3138,5.499,3169,5.499,3170,5.499,3171,5.499,3172,6.123,3173,6.123,3174,6.123,3175,6.123]],["title/injectables/PizzaOvenService.html",[17,0.885,2920,3.303]],["body/injectables/PizzaOvenService.html",[3,0.044,4,0.044,5,0.04,10,0.193,13,0.857,14,0.34,15,0.005,16,0.095,17,1.232,18,3.295,19,0.687,20,2.665,22,1.181,23,2.058,24,1.519,25,1.741,26,1.873,59,0.049,60,0.178,62,1.914,64,1.56,65,2.251,67,3.665,68,2.224,69,3.295,71,1.618,72,2.008,76,0.888,77,2.998,82,3.242,83,3.055,102,1.405,119,2.34,123,1.336,239,0.003,240,0.003,248,5.064,288,1.425,292,0.415,294,1.678,295,0.92,296,0.783,298,1.74,304,5.325,305,2.824,307,4.288,346,3.374,348,2.631,445,4.03,447,4.03,504,1.353,656,1.764,672,2.519,738,5.828,741,4.03,788,1.962,796,1.646,873,2.824,988,1.766,989,1.423,990,3.26,994,3.503,995,3.26,996,4.03,997,4.076,998,2.573,2920,4.597,2929,4.03,2936,4.288,2942,4.288,3090,7.237,3092,6.314,3097,6.314,3098,6.314,3135,4.635,3136,4.288,3176,4.635,3177,7.031,3178,5.161,3179,9.484,3180,5.161,3181,7.031,3182,5.161,3183,7.031,3184,5.161,3185,5.161,3186,7.031,3187,5.161,3188,5.161,3189,5.161,3190,5.161,3191,5.161,3192,5.161,3193,5.161,3194,5.161,3195,5.161,3196,5.161,3197,5.161,3198,5.161]],["title/classes/PullRequestContributorInsightsDto.html",[60,0.175,1237,3.741]],["body/classes/PullRequestContributorInsightsDto.html",[3,0.047,4,0.047,5,0.042,10,0.204,11,1.049,13,1.031,14,0.405,15,0.005,16,0.084,31,3.231,59,0.052,60,0.284,76,0.922,78,3.503,93,2.611,100,2.865,117,2.454,119,2.468,141,2.508,143,3.685,187,3.374,239,0.003,240,0.003,292,0.435,296,0.926,391,2.428,504,2.644,508,1.361,512,1.01,520,0.774,521,2.819,522,1.627,816,3.231,870,2.206,878,3.116,933,2.508,961,1.311,964,2.986,988,1.868,989,1.505,1040,2.535,1043,3.78,1044,2.498,1052,4.888,1074,3.995,1075,3.807,1077,3.48,1079,2.914,1080,2.914,1084,3.721,1085,3.721,1086,3.64,1087,2.914,1089,4.102,1090,2.782,1091,2.986,1092,3.064,1093,2.782,1094,3.064,1095,3.231,1096,2.846,1097,2.986,1098,2.986,1099,3.721,1100,3.064,1101,2.782,1102,3.064,1103,3.641,1105,3.512,1169,4.773,1221,4.773,1237,5.407,1339,3.239,1340,3.239,2591,3.568,2592,4.042,2606,5.196,2613,3.86,3075,4.535,3199,4.901,3200,5.457,3201,5.457]],["title/classes/PullRequestContributorOptionsDto.html",[60,0.175,1205,3.741]],["body/classes/PullRequestContributorOptionsDto.html",[3,0.042,4,0.042,5,0.038,10,0.183,11,0.974,13,0.945,14,0.403,15,0.005,16,0.08,31,3.9,59,0.047,60,0.234,76,1.237,78,3.347,93,2.422,100,2.658,117,2.383,119,2.406,141,2.247,143,3.52,187,3.092,239,0.003,240,0.003,292,0.447,296,0.939,391,2.931,420,2.535,504,2.734,508,1.219,512,1.037,516,1.742,520,0.694,521,3.24,522,1.458,742,2.116,755,2.675,816,2.164,870,1.477,878,3.762,933,2.247,988,1.673,989,1.868,1040,2.352,1043,3.113,1044,2.318,1052,4.705,1072,2.675,1074,3.707,1075,3.532,1077,3.349,1079,3.617,1080,4.15,1084,2.492,1085,3.453,1086,2.438,1087,2.61,1088,2.82,1089,3.875,1090,2.492,1091,2.675,1092,2.745,1093,2.492,1094,2.745,1095,2.998,1096,2.549,1097,2.675,1098,2.675,1099,3.453,1100,2.745,1101,2.492,1102,2.745,1103,3.9,1104,2.901,1105,3.762,1106,2.82,1205,5.017,1221,5.761,2246,4.909,2262,3.621,2571,4.791,2606,4.909,2607,5.276,2608,5.758,2609,3.621,2610,4.062,2611,3.817,2612,4.062,2613,3.458,2614,3.817,2615,4.39,2616,3.319,2617,3.621,3202,4.39]],["title/controllers/PullRequestController.html",[525,1.156,3203,3.944]],["body/controllers/PullRequestController.html",[3,0.038,4,0.038,5,0.034,10,0.167,13,0.794,14,0.381,15,0.005,16,0.094,19,0.595,25,1.509,26,1.623,59,0.043,60,0.155,62,1.218,65,1.941,71,1.521,72,2.015,76,0.803,77,3.013,99,2.654,119,2.456,143,1.876,190,4.5,197,4.305,198,4.552,239,0.003,240,0.003,288,1.289,292,0.373,294,1.577,295,0.914,296,0.735,298,1.635,385,4.665,387,4.665,389,2.654,390,4.319,391,3.236,392,3.491,406,4.319,407,3.312,504,1.941,512,0.865,520,0.635,525,1.023,527,1.233,529,1.648,542,3.283,614,3.457,615,3.19,616,1.648,642,1.553,645,3.019,656,1.881,856,2.824,878,3.639,881,2.824,895,3.312,896,3.312,988,1.53,989,2.042,1044,1.53,1206,3.491,1207,5.714,1208,4.712,1209,4.16,1210,4.654,1214,1.909,1215,2.016,1216,2.095,1217,2.016,1218,2.095,1219,4.678,1220,3.312,1225,3.491,1242,2.924,1814,4.16,2424,3.572,2449,3.312,2452,2.095,2584,5.286,2604,5.707,2731,5.976,2744,3.715,2759,3.572,2760,3.397,2768,3.715,2845,3.035,3203,4.967,3204,4.016,3205,8.068,3206,8.068,3207,8.068,3208,8.068,3209,4.471,3210,4.471,3211,4.471,3212,4.471,3213,4.471,3214,4.471,3215,6.362,3216,4.471,3217,4.471,3218,4.471,3219,6.362,3220,4.471,3221,4.471,3222,5.976,3223,4.471,3224,4.016,3225,5.486,3226,4.016,3227,4.5,3228,5.239,3229,4.016,3230,4.471,3231,5.714,3232,4.471,3233,4.471,3234,4.471,3235,4.471,3236,4.471,3237,3.491,3238,4.471,3239,4.471,3240,4.471,3241,4.471,3242,4.471,3243,4.471,3244,4.471]],["title/controllers/PullRequestDescriptionController.html",[525,1.156,3245,3.944]],["body/controllers/PullRequestDescriptionController.html",[3,0.054,4,0.054,5,0.048,10,0.235,14,0.317,15,0.005,16,0.091,19,0.835,59,0.06,60,0.217,68,1.471,71,1.182,72,1.805,102,1.708,123,1.624,197,3.474,198,3.349,201,4.612,239,0.004,240,0.004,288,1.62,292,0.29,294,1.226,295,0.672,296,0.572,298,1.271,385,4.375,391,3.184,512,0.672,520,0.89,523,1.303,525,1.435,527,1.73,529,2.311,542,2.817,577,3.197,582,4.257,609,3.127,610,2.828,611,3.674,612,4.169,615,2.992,616,2.311,636,2.631,642,2.178,644,2.882,645,2.347,769,4.269,770,3.522,773,1.974,774,4.89,775,4.169,776,2.939,777,2.999,784,2.243,788,2.384,878,3.413,881,3.961,882,7.236,887,5.922,889,4.89,895,4.646,896,4.646,898,4.897,918,5.655,2646,7.459,3245,6.242,3246,5.633,3247,6.272,3248,6.272,3249,6.272,3250,6.272,3251,5.633,3252,6.225,3253,5.633,3254,6.272,3255,6.272]],["title/injectables/PullRequestDescriptionService.html",[17,0.885,3252,3.573]],["body/injectables/PullRequestDescriptionService.html",[3,0.049,4,0.049,5,0.044,10,0.212,13,0.899,14,0.332,15,0.005,16,0.08,17,1.313,19,0.755,59,0.054,60,0.196,62,1.544,65,2.198,68,1.756,71,1.412,72,1.72,74,3.104,76,1.203,197,3.255,201,3.272,239,0.003,240,0.003,288,1.518,292,0.387,294,1.639,295,0.899,296,0.764,298,1.518,385,4.881,391,3.168,420,2.122,421,3.104,498,4.012,515,2.768,523,1.187,661,3.104,680,3.104,765,3.582,773,2.357,777,2.712,784,2.028,796,1.809,799,5.298,800,4.012,801,5.495,805,5.548,806,5.832,807,6.559,809,5.129,810,3.85,811,4.012,812,4.012,813,3.708,814,4.201,816,2.51,817,4.012,818,4.201,819,4.201,820,4.201,821,4.201,822,4.712,823,3.85,827,4.012,828,4.897,832,5.298,833,4.012,834,4.201,836,4.712,837,4.012,838,4.881,839,3.469,840,4.012,841,4.012,867,5.847,878,3.807,907,3.708,910,4.712,926,6.726,928,6.726,935,3.85,2646,6.606,2649,5.093,3016,5.093,3018,5.093,3251,5.093,3252,5.298,3256,5.093,3257,5.672,3258,5.672,3259,5.672,3260,5.672,3261,5.672,3262,5.672,3263,5.672,3264,5.672,3265,5.672,3266,5.672,3267,5.672,3268,5.672]],["title/injectables/PullRequestInsightsService.html",[17,0.885,3227,3.573]],["body/injectables/PullRequestInsightsService.html",[3,0.036,4,0.036,5,0.032,10,0.155,13,0.978,14,0.374,15,0.005,16,0.087,17,1.054,18,2.818,19,0.55,20,2.415,21,4.414,22,0.946,23,1.649,24,1.217,59,0.039,60,0.143,62,1.637,64,1.249,65,1.858,67,3.322,68,2.088,71,1.467,72,1.233,74,4.872,76,1.124,77,1.337,78,3.297,82,2.873,83,3.08,93,3.184,99,6.039,100,3.053,102,1.126,106,4.454,108,4.253,110,5.013,117,2.099,123,1.07,143,1.734,144,2.742,157,4.476,187,2.216,203,1.705,204,3.062,239,0.003,240,0.003,288,1.219,292,0.411,294,1.686,295,0.886,296,0.754,298,1.748,304,4.999,305,2.262,385,4.992,391,3.094,406,4.082,407,3.062,788,1.571,796,1.319,856,2.611,870,1.817,878,3.894,989,1.14,997,3.612,1077,2.958,1096,2.156,1126,2.703,1127,2.924,1174,2.806,1209,2.703,1242,2.763,1438,2.528,1863,6.39,1865,3.712,2604,6.102,2606,2.611,3085,3.062,3224,3.712,3225,3.062,3227,4.253,3237,4.695,3269,3.712,3270,6.013,3271,6.013,3272,7.781,3273,6.013,3274,6.013,3275,4.134,3276,5.624,3277,4.134,3278,6.013,3279,4.134,3280,4.134,3281,4.134,3282,6.013,3283,4.134,3284,4.134,3285,4.134,3286,4.134,3287,4.134,3288,4.134,3289,4.454,3290,2.924,3291,3.062,3292,4.134,3293,4.134,3294,5.4,3295,5.4,3296,5.4,3297,5.4,3298,5.4,3299,4.134,3300,3.712,3301,4.134,3302,3.712,3303,4.996,3304,5.888,3305,6.013,3306,5.4,3307,3.712,3308,3.712,3309,5.888,3310,3.712,3311,6.013,3312,4.134,3313,4.134,3314,4.134,3315,4.134,3316,5.4,3317,4.134,3318,4.134,3319,4.996,3320,4.134,3321,6.013,3322,4.134,3323,4.134,3324,4.134,3325,4.134,3326,4.134,3327,4.134,3328,4.134,3329,3.712,3330,3.712,3331,4.134]],["title/modules/PullRequestModule.html",[241,1.291,275,3.429]],["body/modules/PullRequestModule.html",[3,0.045,4,0.045,5,0.04,15,0.005,16,0.099,19,0.691,24,1.528,59,0.05,60,0.18,64,1.569,197,4.035,239,0.003,240,0.003,241,1.804,243,1.943,244,2.77,249,2.77,250,2.004,251,1.973,254,2.91,255,3.013,273,6.07,275,7.148,287,2.961,302,2.433,385,2.841,387,2.841,389,3.081,390,4.791,391,3.088,392,4.053,406,4.791,407,3.845,420,1.943,421,2.841,422,4.053,515,4.532,527,1.947,877,6.261,878,2.216,893,6.568,894,4.662,911,6.261,912,5.228,921,6.568,922,5.865,940,6.261,946,3.672,948,6.568,1219,6.366,1220,3.845,1270,4.662,2845,3.524,3203,6.261,3225,5.94,3227,6.568,3228,7.13,3229,4.662,3245,6.261,3252,6.568,3253,4.662,3290,3.672,3332,4.662,3333,4.662,3334,4.662,3335,4.662,3336,6.568,3337,5.191,3338,4.662,3339,5.191,3340,5.191,3341,5.191,3342,5.191,3343,5.191]],["title/classes/PullRequestPageOptionsDto.html",[60,0.175,3222,3.741]],["body/classes/PullRequestPageOptionsDto.html",[3,0.034,4,0.034,5,0.031,10,0.149,11,0.841,13,0.873,14,0.403,15,0.005,16,0.073,31,3.07,59,0.066,60,0.202,75,5.138,76,1.268,78,3.049,93,2.093,100,2.296,117,2.361,119,2.28,141,1.831,143,3.207,187,2.818,239,0.003,240,0.003,292,0.448,296,0.941,391,3.065,420,2.861,504,2.747,508,0.993,512,1.04,516,1.875,520,0.565,521,3.288,522,1.188,652,2.296,653,2.59,742,1.889,755,2.18,816,1.763,870,1.204,878,3.933,933,1.831,988,1.363,989,1.614,1040,2.032,1043,2.689,1044,3.25,1052,4.349,1072,2.18,1073,4.381,1074,3.202,1075,3.052,1077,3.237,1079,4.082,1080,4.699,1084,2.03,1085,2.983,1086,1.986,1087,2.127,1088,2.298,1089,3.459,1090,2.03,1091,2.18,1092,2.237,1093,2.03,1094,2.237,1095,2.59,1096,2.077,1097,2.18,1098,2.18,1099,2.983,1100,2.237,1101,2.03,1102,2.237,1103,4.078,1104,2.364,1105,3.933,1106,4.698,1221,6.024,1422,2.18,1743,3.696,1756,2.604,1892,4.863,1900,4.863,1985,4.863,2106,4.709,2246,4.381,2262,2.951,2571,5.408,2572,3.577,2606,4.381,2607,4.709,2608,5.378,2609,2.951,2611,3.11,2613,2.818,2614,3.11,2616,2.704,2617,2.951,3202,3.577,3222,4.335,3344,3.984,3345,3.984,3346,3.984,3347,7.904,3348,6.937,3349,3.984,3350,3.577,3351,3.984,3352,3.984,3353,7.647,3354,3.984,3355,3.984,3356,3.984,3357,3.984,3358,3.984]],["title/injectables/PullRequestReviewService.html",[17,0.885,3228,3.573]],["body/injectables/PullRequestReviewService.html",[3,0.058,4,0.058,5,0.052,10,0.254,13,0.978,14,0.333,15,0.005,16,0.091,17,1.473,19,0.904,20,2.96,22,1.554,23,2.708,24,1.998,59,0.065,60,0.235,62,2.288,64,2.052,65,1.78,71,1.28,72,1.872,77,2.718,239,0.004,240,0.004,288,1.703,292,0.388,294,1.643,295,0.901,296,0.766,298,1.376,385,4.995,390,4.609,391,3.172,392,5.302,656,1.498,796,2.166,878,3.896,2001,6.098,3225,5.03,3228,5.945,3359,6.098,3360,8.404,3361,6.791,3362,6.791,3363,8.404,3364,8.404,3365,6.791,3366,8.404,3367,6.791,3368,6.791]],["title/injectables/PullRequestService.html",[17,0.885,1219,3.191]],["body/injectables/PullRequestService.html",[3,0.023,4,0.023,5,0.02,10,0.1,13,0.776,14,0.34,15,0.005,16,0.089,17,0.753,19,0.355,20,1.919,22,0.61,23,1.064,24,0.785,25,0.9,26,0.968,31,2.999,59,0.025,60,0.092,62,1.169,64,0.806,65,1.776,67,2.639,68,2.409,69,2.012,71,1.365,72,1.941,76,1.083,77,2.775,78,3.968,82,3.774,83,2.343,85,1.225,93,2.21,94,4.28,99,5.188,100,3.208,101,5.386,102,1.972,106,3.181,108,3.038,110,3.038,117,1.312,118,4.065,119,2.389,122,1.587,123,1.6,125,4.097,143,2.262,144,1.9,157,5.164,160,4.826,161,3.814,187,1.583,192,3.568,203,2.986,204,5.364,214,1.743,225,3.181,227,4.209,228,6.327,229,1.975,239,0.002,240,0.002,288,0.87,292,0.41,294,1.677,295,0.92,296,0.782,298,1.771,304,4.275,305,1.459,385,4.929,387,1.459,389,1.583,391,2.056,580,1.684,653,1.18,774,1.631,796,0.851,870,1.629,878,3.845,988,1.47,989,1.705,1043,1.225,1044,0.913,1054,1.975,1061,1.743,1067,1.459,1077,1.014,1089,1.33,1090,2.189,1111,2.915,1116,3.857,1119,1.81,1126,1.743,1127,1.886,1128,2.216,1129,2.082,1136,2.395,1144,3.568,1145,3.568,1146,1.81,1147,1.631,1148,3.298,1155,2.395,1165,3.181,1205,5.867,1209,2.808,1212,3.814,1219,2.712,1222,2.216,1237,5.364,1242,1.973,1255,2.395,1271,4.578,1275,2.216,1276,2.395,1438,1.631,1785,1.014,1863,4.578,2570,1.886,2606,5.301,2608,1.684,2616,1.81,3222,3.993,3225,1.975,3226,5.551,3237,3.353,3276,3.904,3289,5.364,3290,1.886,3291,1.975,3294,3.857,3295,3.857,3296,3.857,3297,3.857,3298,3.857,3300,2.395,3302,2.395,3303,3.568,3304,3.568,3306,2.395,3307,2.395,3308,2.395,3309,4.48,3310,2.395,3319,5.136,3369,2.395,3370,5.391,3371,5.391,3372,4.294,3373,4.294,3374,4.294,3375,3.857,3376,5.391,3377,4.294,3378,4.294,3379,6.181,3380,2.667,3381,4.842,3382,2.667,3383,2.667,3384,2.667,3385,2.667,3386,2.667,3387,2.667,3388,2.667,3389,2.667,3390,2.667,3391,2.667,3392,2.667,3393,2.667,3394,2.667,3395,2.395,3396,2.667,3397,2.667,3398,2.667,3399,2.667,3400,4.294,3401,5.391,3402,2.667,3403,2.667,3404,4.294,3405,2.667,3406,2.667,3407,2.667,3408,2.395,3409,2.667,3410,2.667,3411,2.667,3412,5.945,3413,7.241,3414,4.294,3415,4.294,3416,4.294,3417,2.667,3418,2.667,3419,2.667,3420,3.857,3421,3.857,3422,4.294,3423,4.294,3424,6.181,3425,5.551,3426,2.667,3427,2.667,3428,2.667,3429,2.667,3430,2.667,3431,2.216,3432,2.667,3433,6.181,3434,2.667,3435,6.181,3436,2.667,3437,2.667,3438,2.667,3439,4.842,3440,5.391,3441,6.181,3442,2.667,3443,4.294,3444,4.294,3445,4.294,3446,4.294,3447,2.667]],["title/controllers/RepoContributionsController.html",[525,1.156,1033,3.944]],["body/controllers/RepoContributionsController.html",[3,0.03,4,0.03,5,0.027,10,0.132,13,1.035,14,0.39,15,0.005,16,0.085,19,0.469,25,1.189,26,1.28,59,0.034,60,0.122,65,0.924,68,1.687,71,1.356,72,1.921,76,1.264,77,2.816,78,3.974,88,4.309,93,2.573,100,3.417,117,1.299,119,2.055,123,1.863,143,3.019,144,2.536,195,5.693,203,1.454,208,1.201,239,0.002,240,0.002,288,1.083,292,0.333,294,1.407,295,0.956,296,0.656,298,1.458,336,4.217,439,1.406,456,2.596,504,1.4,512,0.771,520,0.5,523,1.246,525,0.806,527,0.972,529,1.299,542,3.068,613,3.554,614,3.136,615,2.894,616,1.299,642,1.855,645,2.693,656,1.795,742,2.825,784,1.261,907,3.493,933,3.307,960,2.607,961,2.184,989,0.972,997,3.668,1031,4.562,1033,4.171,1034,2.929,1035,3.166,1044,1.206,1054,5.33,1070,6.262,1075,4.883,1077,2.03,1112,6.945,1130,3.166,1131,5.33,1132,3.166,1133,3.166,1214,2.753,1215,1.589,1216,1.652,1217,1.589,1218,1.652,1649,2.929,1880,6.463,2378,5.911,2381,3.942,2424,4.569,2437,5.914,2452,1.652,2474,4.562,2475,4.378,2731,3.957,2759,2.999,2760,2.852,2776,2.156,2933,5.979,3101,2.752,3448,6.945,3449,3.166,3450,7.733,3451,7.733,3452,6.45,3453,3.525,3454,3.525,3455,8.138,3456,5.342,3457,5.342,3458,3.525,3459,3.525,3460,3.525,3461,3.525,3462,3.525,3463,5.342,3464,6.799,3465,5.342,3466,3.525,3467,3.525,3468,3.525,3469,3.525,3470,3.525,3471,3.525,3472,5.342,3473,3.525,3474,3.525,3475,3.525,3476,6.945,3477,3.53,3478,2.305,3479,2.493,3480,2.493,3481,3.525,3482,5.342,3483,2.493,3484,5.342,3485,5.342,3486,3.525,3487,4.562,3488,3.525,3489,5.342,3490,5.342,3491,3.525,3492,3.525,3493,3.525,3494,3.525]],["title/controllers/RepoController.html",[525,1.156,3495,3.944]],["body/controllers/RepoController.html",[3,0.042,4,0.042,5,0.037,10,0.181,13,0.828,14,0.387,15,0.005,16,0.091,19,0.644,20,2.593,25,1.632,26,1.756,59,0.046,60,0.167,71,1.574,72,2.043,76,1.147,77,3.074,119,2.109,203,3.62,239,0.003,240,0.003,288,1.363,292,0.386,294,1.632,295,0.941,296,0.761,298,1.693,332,4.202,504,1.268,512,0.895,520,0.686,523,0.895,525,1.107,527,1.334,529,1.782,542,3.349,613,3.551,614,3.559,615,3.285,616,1.782,642,1.679,645,3.126,656,1.936,742,2.628,784,1.73,961,1.615,989,1.854,1044,1.655,1111,5.67,1119,3.283,1206,3.776,1208,4.98,1209,4.396,1210,4.818,1214,2.065,1215,2.181,1216,2.266,1217,2.181,1218,2.266,1225,3.776,2381,3.939,2424,5.336,2437,5.275,2449,3.582,2452,2.266,2475,3.283,2506,5.275,2524,3.055,2623,3.421,2744,4.019,2759,3.775,2760,3.59,2768,4.019,2825,3.776,2848,3.776,2956,3.776,3101,3.776,3477,4.229,3479,3.421,3480,3.421,3483,3.421,3487,3.421,3495,5.249,3496,4.343,3497,8.352,3498,7.501,3499,5.109,3500,4.756,3501,4.837,3502,4.837,3503,6.187,3504,4.837,3505,6.038,3506,4.837,3507,4.343,3508,4.837,3509,4.837,3510,4.837,3511,4.019,3512,6.038,3513,4.837,3514,4.837,3515,4.837,3516,4.564,3517,4.837,3518,3.421,3519,4.837,3520,4.837]],["title/modules/RepoFilterModule.html",[241,1.291,3336,3.573]],["body/modules/RepoFilterModule.html",[3,0.064,4,0.064,5,0.057,15,0.005,16,0.085,19,0.987,59,0.071,60,0.257,239,0.004,240,0.004,241,2.267,243,2.776,244,3.48,249,3.48,250,2.864,251,2.82,254,3.657,255,3.786,742,2.02,3276,6.692,3291,5.494,3336,7.291,3521,6.662,3522,6.662,3523,6.662,3524,6.163,3525,7.418]],["title/injectables/RepoFilterService.html",[17,0.885,3276,3.191]],["body/injectables/RepoFilterService.html",[3,0.044,4,0.044,5,0.039,10,0.298,13,0.747,14,0.315,15,0.005,16,0.081,17,1.221,19,0.678,21,4.56,22,1.166,59,0.049,60,0.176,68,1.195,71,0.96,74,3.814,76,1.129,78,3.567,82,2.826,91,2.649,93,2.84,94,3.219,98,2.735,99,3.024,100,1.999,117,1.695,157,5.017,161,4.93,203,2.101,224,5.791,239,0.003,240,0.003,288,1.413,292,0.322,294,1.553,295,0.747,296,0.635,298,1.413,299,3.604,543,7.669,742,2.163,796,1.626,873,4.347,889,4.263,918,6.041,989,1.922,1043,2.342,1077,2.649,1086,3.961,1174,3.459,1208,5.162,1209,6.456,1214,2.975,1599,2.939,1741,4.234,1884,4.576,1922,3.332,2452,4.327,2604,6.041,2606,4.402,2607,3.459,2608,3.219,2616,3.459,3085,3.774,3276,4.402,3289,5.162,3316,6.259,3329,4.576,3330,4.576,3524,6.6,3526,4.576,3527,6.97,3528,6.97,3529,6.97,3530,5.096,3531,6.97,3532,5.096,3533,6.97,3534,4.234,3535,6.6,3536,5.096,3537,5.096,3538,5.096,3539,5.096,3540,5.096,3541,5.096,3542,7.943,3543,5.096,3544,5.096,3545,5.096,3546,6.259,3547,5.096,3548,5.096,3549,6.97,3550,5.096,3551,5.096,3552,5.096,3553,5.096,3554,4.576,3555,4.576,3556,5.096,3557,5.096]],["title/classes/RepoInfo.html",[60,0.175,1382,3.303]],["body/classes/RepoInfo.html",[3,0.06,4,0.06,5,0.053,10,0.26,11,1.224,13,0.913,14,0.398,15,0.005,16,0.081,59,0.066,60,0.294,76,1.213,239,0.004,240,0.004,292,0.393,295,0.913,420,3.186,508,1.729,512,0.913,513,3.236,516,1.995,519,3.395,520,0.984,521,3.287,522,2.068,523,1.133,656,2.175,742,2.616,745,6.227,755,3.794,961,2.046,1338,5.377,1382,5.566,1438,5.207,1776,8.273,3558,6.823,3559,6.227,3560,6.934,3561,6.934,3562,6.934,3563,6.227]],["title/modules/RepoModule.html",[241,1.291,276,2.998]],["body/modules/RepoModule.html",[3,0.059,4,0.059,5,0.053,15,0.005,16,0.096,19,0.919,24,2.033,59,0.066,60,0.239,64,2.087,239,0.004,240,0.004,241,2.171,243,2.585,244,3.333,249,3.333,250,2.667,251,2.626,254,3.502,255,3.625,276,6.136,287,3.563,302,3.237,332,3.114,527,2.342,1037,4.886,2956,5.393,3290,4.886,3336,7.093,3338,6.203,3477,5.747,3495,7.18,3511,5.739,3564,6.203,3565,6.907,3566,6.203,3567,6.203,3568,6.907,3569,6.907]],["title/classes/RepoPageOptionsDto.html",[60,0.175,3499,3.09]],["body/classes/RepoPageOptionsDto.html",[3,0.044,4,0.044,5,0.039,10,0.19,11,0.998,13,0.957,14,0.391,15,0.005,16,0.076,37,2.923,59,0.076,60,0.24,78,3.398,93,2.483,100,2.724,117,2.459,119,2.427,141,2.329,143,3.574,187,3.14,203,2.089,239,0.003,240,0.003,292,0.426,295,0.744,296,0.915,409,2.773,504,2.65,508,1.264,512,0.988,520,0.719,522,1.511,652,2.724,653,3.073,816,2.242,870,1.531,933,2.329,957,3.007,988,1.734,989,1.397,1040,2.411,1043,3.191,1044,2.916,1049,3.313,1052,4.765,1072,2.773,1073,5.002,1074,3.799,1075,3.62,1077,3.504,1079,3.707,1080,4.229,1081,6.991,1084,2.583,1085,3.539,1086,2.526,1087,2.705,1088,2.923,1089,3.949,1090,2.583,1091,2.773,1092,2.845,1093,2.583,1094,2.845,1095,3.073,1096,2.642,1097,2.773,1098,2.773,1099,3.539,1100,2.845,1101,2.583,1102,2.845,1103,3.073,1104,3.007,1105,2.964,1106,4.569,1240,5.143,1691,4.539,1922,3.313,2591,3.313,2909,4.21,2910,4.21,2911,4.21,2912,4.21,2913,4.21,3499,4.247,3558,5.143,3570,6.581,3571,4.551,3572,5.067,3573,4.551,3574,5.421,3575,6.235,3576,6.235,3577,5.769,3578,5.769,3579,5.769,3580,5.769,3581,5.769,3582,5.067]],["title/classes/RepoSearchOptionsDto.html",[60,0.175,3503,3.741]],["body/classes/RepoSearchOptionsDto.html",[3,0.042,4,0.042,5,0.037,10,0.182,11,0.968,13,0.942,14,0.402,15,0.005,16,0.08,59,0.046,60,0.233,76,1.201,78,3.335,93,2.409,100,2.643,117,2.458,119,2.218,141,2.229,143,3.508,187,3.082,239,0.003,240,0.003,292,0.452,296,0.945,504,2.744,508,1.209,512,1.048,520,0.688,521,3.229,522,1.446,742,2.277,816,2.146,870,1.465,933,2.229,989,1.858,1040,2.339,1043,3.095,1044,2.649,1052,4.855,1072,2.654,1073,4.254,1074,3.686,1075,3.512,1077,3.457,1079,4.132,1080,4.465,1081,5.732,1084,2.472,1085,3.433,1086,2.418,1087,2.589,1088,2.797,1089,3.859,1090,2.472,1091,2.654,1092,2.723,1093,2.472,1094,2.723,1095,2.981,1096,2.529,1097,2.654,1098,2.654,1099,3.433,1100,2.723,1101,2.472,1102,2.723,1103,3.888,1104,2.878,1105,3.751,1106,2.797,1365,4.029,2246,4.888,2571,3.43,2606,4.888,2607,5.253,2608,5.744,2609,3.592,2610,4.029,2613,4.765,2616,3.292,2617,3.592,2623,6.215,3350,4.355,3499,5.115,3503,4.989,3558,6.508,3570,4.029,3571,4.355,3583,4.85,3584,4.85,3585,4.85]],["title/injectables/RepoService.html",[17,0.885,3477,2.764]],["body/injectables/RepoService.html",[3,0.023,4,0.023,5,0.02,10,0.098,13,0.933,14,0.338,15,0.005,16,0.086,17,0.743,18,2.5,19,0.349,20,1.902,21,3.59,22,0.601,23,1.047,24,0.773,25,0.886,26,0.953,59,0.025,60,0.091,62,1.155,64,0.794,65,2.064,67,2.615,68,2.291,69,1.988,71,1.484,72,1.903,76,1.215,77,2.631,78,3.931,82,3.529,83,2.319,85,1.207,88,1.338,90,1.782,91,1.612,93,1.517,94,2.679,98,2.094,99,5.98,100,3.673,101,3,102,1.958,106,1.945,108,1.857,110,3,117,1.49,118,3.271,119,2.198,122,1.248,123,1.74,125,3.693,143,2.57,157,3.869,161,5.753,187,2.902,193,1.184,195,2.773,206,2.182,208,0.489,210,4.433,214,1.717,227,2.05,239,0.002,240,0.002,288,0.86,292,0.395,294,1.669,295,0.933,296,0.761,298,1.693,304,4.249,305,1.437,332,1.184,336,2.773,338,1.606,340,1.717,342,1.717,344,1.717,420,0.983,483,4.433,551,2.866,600,1.945,656,1.483,742,1.831,773,0.826,788,1.612,796,0.838,870,2.458,988,1.452,989,1.689,997,3.665,998,2.115,1044,0.899,1067,1.437,1077,2.028,1081,1.945,1089,1.309,1090,2.162,1111,3.622,1119,1.782,1121,2.879,1126,1.717,1127,1.857,1128,2.182,1129,2.05,1138,3.809,1139,3.809,1141,2.358,1142,2.182,1144,3.524,1145,3.524,1146,1.782,1147,2.594,1148,2.594,1165,3.142,1174,1.782,1209,1.717,1303,1.149,1682,2.358,1785,0.998,1863,5.833,2046,2.358,2061,2.358,2079,2.358,2094,2.358,2437,1.659,2463,2.182,2506,2.679,2524,1.659,2607,1.782,2608,1.659,2616,1.782,2623,1.857,2945,3.524,3085,1.945,3237,6.149,3276,3.869,3289,3.142,3290,1.857,3291,1.945,3303,6.544,3304,6.544,3309,2.182,3319,3.524,3375,3.809,3381,4.792,3395,3.809,3412,3.312,3420,2.358,3421,2.358,3431,2.182,3477,2.321,3498,3.809,3499,3.747,3503,4.537,3507,3.809,3511,2.182,3512,3.809,3554,3.809,3570,2.182,3574,4.166,3577,2.182,3578,2.182,3579,2.182,3580,2.182,3581,2.182,3586,2.358,3587,4.241,3588,4.241,3589,4.241,3590,4.241,3591,5.336,3592,2.626,3593,2.626,3594,4.241,3595,4.241,3596,2.626,3597,2.626,3598,5.336,3599,2.626,3600,2.626,3601,2.626,3602,2.626,3603,4.241,3604,2.626,3605,4.241,3606,2.626,3607,2.626,3608,2.626,3609,2.626,3610,5.336,3611,2.626,3612,2.626,3613,4.241,3614,2.626,3615,4.241,3616,2.626,3617,2.626,3618,2.626,3619,2.626,3620,2.626,3621,4.241,3622,2.626,3623,2.626,3624,2.626,3625,2.626,3626,2.626,3627,2.626,3628,6.723,3629,6.723,3630,2.358,3631,2.358,3632,2.358,3633,2.626,3634,2.626,3635,2.626,3636,2.626,3637,2.626,3638,2.626,3639,2.626,3640,2.626,3641,2.626,3642,2.626,3643,4.241,3644,4.241,3645,4.241,3646,4.241,3647,4.241,3648,4.241,3649,4.241,3650,2.626,3651,2.626,3652,2.626,3653,2.626,3654,2.626,3655,2.626,3656,2.626,3657,2.626,3658,2.626,3659,2.626,3660,2.626,3661,2.626,3662,2.626,3663,2.626,3664,2.358,3665,5.336,3666,2.626,3667,2.626,3668,2.626,3669,4.241,3670,2.358,3671,2.626,3672,4.241,3673,2.626,3674,2.626,3675,2.626,3676,2.626,3677,2.626,3678,2.626,3679,2.626,3680,2.182,3681,2.626,3682,2.626,3683,4.241,3684,2.626,3685,2.626,3686,2.626,3687,2.626,3688,2.626]],["title/controllers/RepoStarController.html",[525,1.156,3689,3.944]],["body/controllers/RepoStarController.html",[3,0.03,4,0.03,5,0.027,10,0.131,13,1.072,14,0.39,15,0.005,16,0.088,19,0.465,25,1.179,26,1.268,59,0.033,60,0.121,65,0.916,68,1.68,71,1.452,72,1.977,76,1.18,77,2.933,119,1.34,123,1.855,203,2.646,208,0.988,239,0.002,240,0.002,288,1.075,292,0.356,294,1.506,295,0.904,296,0.702,298,1.916,332,2.893,333,1.866,340,5.037,341,2.728,504,1.391,512,0.826,520,0.496,523,1.244,525,0.799,527,0.964,529,1.288,542,3.195,544,2.833,551,3.587,557,1.912,610,1.575,611,3.727,613,3.54,614,3.289,615,3.035,616,1.288,636,1.466,642,1.843,644,3.54,645,2.883,656,2.062,742,2.844,776,1.637,784,1.25,961,1.721,989,0.964,997,3.652,1044,1.196,1210,3.061,1214,2.265,1215,1.575,1216,1.637,1217,1.575,1218,1.637,1384,2.372,2048,8.405,2381,3.652,2424,5.092,2437,5.485,2452,1.637,2474,3.754,2475,3.602,2759,3.602,2760,3.425,2761,1.866,2834,5.068,3477,3.511,3478,2.285,3479,2.472,3480,2.472,3483,3.754,3487,3.754,3499,4.382,3500,2.472,3516,2.372,3518,2.472,3574,2.728,3689,4.143,3690,7.284,3691,3.138,3692,7.164,3693,7.704,3694,7.704,3695,7.164,3696,7.704,3697,3.494,3698,3.494,3699,5.953,3700,7.164,3701,7.164,3702,5.307,3703,5.01,3704,5.068,3705,3.494,3706,3.494,3707,3.494,3708,3.494,3709,3.494,3710,3.494,3711,3.494,3712,7.284,3713,3.494,3714,3.494,3715,3.494,3716,4.684,3717,2.728,3718,3.494,3719,3.494,3720,3.494,3721,3.494,3722,2.588,3723,5.229,3724,4.538,3725,3.138,3726,2.728,3727,3.494,3728,3.494,3729,3.494,3730,5.307,3731,3.494,3732,3.494,3733,3.494,3734,5.307,3735,3.494]],["title/controllers/RepoStargazeController.html",[525,1.156,3736,3.944]],["body/controllers/RepoStargazeController.html",[3,0.03,4,0.03,5,0.027,10,0.132,13,1.073,14,0.39,15,0.005,16,0.088,19,0.469,25,1.188,26,1.278,59,0.034,60,0.122,65,0.923,68,1.686,71,1.457,72,1.98,76,1.182,77,2.939,119,1.348,123,1.862,203,2.658,208,0.994,239,0.002,240,0.002,288,1.082,292,0.357,294,1.511,295,0.906,296,0.705,298,1.92,332,2.906,333,1.88,344,5.054,345,2.749,504,1.399,512,0.829,520,0.5,523,1.246,525,0.806,527,0.971,529,1.298,542,3.202,544,2.85,551,3.59,557,1.927,610,1.588,611,3.738,613,3.552,614,3.299,615,3.044,616,1.298,636,1.477,642,1.853,644,3.552,645,2.893,656,2.065,742,2.857,776,1.65,784,1.259,961,1.728,989,0.971,997,3.666,1044,1.205,1210,3.079,1214,2.279,1215,1.588,1216,1.65,1217,1.588,1218,1.65,1384,2.39,2031,5.789,2311,5.754,2352,6.494,2381,3.666,2424,5.103,2437,5.498,2452,1.65,2474,3.776,2475,3.623,2759,3.619,2760,3.442,2761,1.88,2776,3.265,3477,3.527,3478,2.302,3479,2.491,3480,2.491,3483,3.776,3487,3.776,3499,4.399,3500,2.491,3516,2.39,3518,2.491,3632,3.163,3702,5.328,3703,5.022,3717,4.168,3722,2.608,3723,5.247,3726,2.749,3736,4.168,3737,7.306,3738,3.163,3739,7.73,3740,7.73,3741,7.73,3742,7.73,3743,7.73,3744,3.522,3745,3.522,3746,5.338,3747,7.193,3748,6.459,3749,3.522,3750,3.522,3751,3.522,3752,3.522,3753,3.522,3754,3.522,3755,3.522,3756,3.522,3757,3.522,3758,5.338,3759,3.522,3760,3.522,3761,3.522,3762,3.522,3763,4.56,3764,3.163,3765,3.522,3766,3.522,3767,4.168,3768,5.338,3769,3.522,3770,3.522,3771,4.794,3772,5.338,3773,3.522]],["title/controllers/RepoSubmitController.html",[525,1.156,3774,3.944]],["body/controllers/RepoSubmitController.html",[3,0.03,4,0.03,5,0.027,10,0.13,13,1.071,14,0.39,15,0.005,16,0.088,19,0.463,25,1.174,26,1.264,59,0.033,60,0.12,65,0.912,68,1.676,71,1.45,72,1.976,76,1.179,77,2.93,119,1.336,123,1.851,203,2.639,208,0.985,239,0.002,240,0.002,288,1.072,292,0.355,294,1.503,295,0.902,296,0.701,298,1.915,332,2.886,333,1.858,342,5.028,343,2.718,504,1.387,512,0.824,520,0.494,523,1.243,525,0.796,527,0.96,529,1.283,542,3.192,544,2.825,551,3.585,557,1.905,610,1.569,611,3.722,613,3.534,614,3.284,615,3.031,616,1.283,636,1.46,642,1.837,644,3.534,645,2.878,656,2.06,742,2.844,776,1.631,784,1.245,961,1.718,989,0.96,997,3.644,1044,1.191,1210,3.052,1214,2.259,1215,1.569,1216,1.631,1217,1.569,1218,1.631,1384,2.363,2064,9.047,2381,3.644,2424,5.087,2437,5.479,2452,1.631,2474,3.743,2475,3.591,2759,3.594,2760,3.417,2761,1.858,2776,3.236,2834,5.058,3477,3.502,3478,2.276,3479,2.462,3480,2.462,3483,3.743,3487,3.743,3499,4.373,3500,2.462,3516,2.363,3518,2.462,3631,3.126,3699,5.941,3702,5.296,3703,5.004,3704,5.058,3716,4.675,3717,2.718,3722,2.578,3723,5.22,3726,2.718,3774,4.131,3775,7.273,3776,3.126,3777,7.691,3778,7.691,3779,7.691,3780,7.691,3781,7.691,3782,3.481,3783,3.481,3784,7.15,3785,7.15,3786,3.481,3787,3.481,3788,3.481,3789,3.481,3790,3.481,3791,3.481,3792,3.481,3793,8.099,3794,3.481,3795,3.481,3796,3.481,3797,3.481,3798,3.481,3799,3.481,3800,3.481,3801,4.527,3802,3.126,3803,3.126,3804,3.481,3805,3.481,3806,5.291,3807,3.481,3808,3.481,3809,5.291,3810,3.481]],["title/controllers/RepoVoteController.html",[525,1.156,3811,3.944]],["body/controllers/RepoVoteController.html",[3,0.028,4,0.028,5,0.025,10,0.12,13,1.083,14,0.393,15,0.005,16,0.087,19,0.426,25,1.079,26,1.161,59,0.03,60,0.111,65,0.838,68,1.603,71,1.476,72,1.991,76,1.156,77,2.864,80,5.119,119,1.252,123,1.77,203,2.503,208,1.521,239,0.002,240,0.002,288,1.005,292,0.362,294,1.53,295,0.929,296,0.714,298,1.967,332,2.737,333,1.707,338,4.527,339,2.262,504,1.299,512,0.839,520,0.454,523,1.249,525,0.732,527,0.882,529,1.178,542,3.226,544,4.18,551,3.6,557,1.75,610,1.442,611,3.753,613,3.401,614,3.312,615,3.057,616,1.178,636,1.341,642,1.721,644,3.598,645,2.93,656,2.02,742,2.832,773,1.006,776,1.498,784,1.143,961,1.881,989,0.882,997,3.486,1044,1.094,1210,2.859,1214,2.116,1215,1.442,1216,1.498,1217,1.442,1218,1.498,1384,2.17,2081,8.312,2381,3.486,2424,5.141,2437,5.331,2452,1.498,2474,3.506,2475,3.365,2759,3.84,2760,3.651,2761,1.707,2834,4.838,3477,3.322,3478,2.091,3479,2.262,3480,2.262,3483,3.506,3487,3.506,3499,4.183,3500,2.262,3516,2.17,3518,2.262,3630,2.872,3699,5.682,3702,5.066,3703,4.869,3704,4.838,3716,4.471,3717,2.496,3722,2.368,3723,5.024,3726,2.496,3811,3.87,3812,7.335,3813,2.872,3814,6.839,3815,7.401,3816,7.401,3817,6.142,3818,6.839,3819,7.401,3820,3.198,3821,3.198,3822,6.839,3823,6.839,3824,3.198,3825,3.198,3826,3.198,3827,3.198,3828,3.198,3829,3.198,3830,3.198,3831,6.914,3832,3.198,3833,2.872,3834,3.198,3835,3.198,3836,4.497,3837,3.198,3838,3.198,3839,3.198,3840,3.198,3841,3.198,3842,3.198,3843,3.198,3844,3.198,3845,2.368,3846,3.198,3847,4.294,3848,2.872,3849,3.198,3850,3.198,3851,3.198,3852,3.198,3853,3.198,3854,3.198,3855,4.957,3856,3.198,3857,3.198,3858,3.198,3859,4.957,3860,3.198]],["title/modules/StarModule.html",[241,1.291,277,3.741]],["body/modules/StarModule.html",[3,0.059,4,0.059,5,0.052,15,0.005,16,0.097,19,0.909,24,2.01,59,0.065,60,0.236,64,2.064,239,0.004,240,0.004,241,2.156,243,2.556,244,3.309,249,3.309,250,2.637,251,2.596,254,3.478,255,3.6,276,5.935,277,7.643,287,3.538,302,3.2,330,4.636,332,3.079,333,3.646,340,5.514,341,5.332,527,2.326,742,1.859,1037,4.831,3689,7.144,3724,7.418,3725,6.133,3861,6.133,3862,6.829,3863,6.133,3864,6.133,3865,6.829,3866,6.829]],["title/injectables/StarService.html",[17,0.885,3724,3.573]],["body/injectables/StarService.html",[3,0.048,4,0.048,5,0.043,10,0.208,13,1.092,14,0.329,15,0.005,16,0.084,17,1.296,18,2.609,19,0.741,20,2.748,22,1.274,23,2.22,24,1.638,59,0.053,60,0.193,62,2.014,64,1.682,65,1.459,67,3.779,68,2.161,69,3.467,71,1.669,72,1.944,77,2.864,80,6.322,82,3,83,3.215,102,2.262,123,2.292,193,2.51,239,0.003,240,0.003,288,1.499,292,0.409,294,1.624,295,0.891,296,0.757,298,1.684,340,3.64,341,4.346,551,3.566,742,2.014,788,3.158,796,1.776,998,3.689,1785,2.116,2048,4.625,3703,4.267,3704,3.938,3712,6.643,3724,5.233,3867,4.999,3868,7.398,3869,7.398,3870,5.567,3871,5.567,3872,7.398,3873,5.567,3874,7.398,3875,5.567,3876,7.398,3877,5.567,3878,3.516,3879,5.567,3880,5.567,3881,7.398,3882,7.398,3883,9.475,3884,7.398,3885,5.021,3886,5.567,3887,5.567,3888,4.123,3889,5.567]],["title/modules/StargazeModule.html",[241,1.291,278,3.741]],["body/modules/StargazeModule.html",[3,0.059,4,0.059,5,0.052,15,0.005,16,0.097,19,0.909,24,2.01,59,0.065,60,0.236,64,2.064,239,0.004,240,0.004,241,2.156,243,2.556,244,3.309,249,3.309,250,2.637,251,2.596,254,3.478,255,3.6,276,5.935,278,7.643,287,3.538,302,3.2,330,4.636,332,3.079,333,3.646,344,5.514,345,5.332,527,2.326,742,1.859,1037,4.831,3736,7.144,3763,7.418,3764,6.133,3890,6.133,3891,6.133,3892,6.133,3893,6.829,3894,6.829,3895,6.829]],["title/injectables/StargazeService.html",[17,0.885,3763,3.573]],["body/injectables/StargazeService.html",[3,0.048,4,0.048,5,0.043,10,0.207,13,1.091,14,0.328,15,0.005,16,0.084,17,1.291,18,2.593,19,0.736,20,2.742,22,1.266,23,2.207,24,1.628,59,0.053,60,0.191,62,2.006,64,1.672,65,1.45,67,3.77,68,2.156,69,3.452,71,1.665,72,1.94,77,2.857,80,6.312,82,3.581,83,3.202,102,2.255,123,2.286,193,2.494,239,0.003,240,0.003,288,1.493,292,0.408,294,1.619,295,0.888,296,0.755,298,1.679,344,3.617,345,4.32,551,3.563,742,2.255,788,3.148,796,1.765,998,3.673,1785,2.103,2311,3.914,3703,4.25,3748,6.616,3763,5.211,3878,3.494,3885,5.001,3888,4.098,3896,4.969,3897,7.367,3898,7.367,3899,5.533,3900,5.533,3901,7.367,3902,5.533,3903,7.367,3904,5.533,3905,7.367,3906,5.533,3907,5.533,3908,5.533,3909,7.367,3910,7.367,3911,9.459,3912,7.367,3913,5.533,3914,5.533,3915,5.533]],["title/modules/StripeModule.html",[241,1.291,730,3.573]],["body/modules/StripeModule.html",[3,0.064,4,0.064,5,0.057,15,0.005,16,0.085,19,0.987,59,0.071,60,0.257,239,0.004,240,0.004,241,2.267,243,2.776,244,3.48,249,3.48,250,2.864,251,2.82,254,3.657,255,3.786,287,3.112,620,7.191,730,7.291,3916,6.662,3917,6.662,3918,6.662,3919,7.418,3920,7.418]],["title/injectables/StripeService.html",[17,0.885,620,3.429]],["body/injectables/StripeService.html",[3,0.051,4,0.051,5,0.045,10,0.221,11,1.105,13,0.917,14,0.359,15,0.005,16,0.082,17,1.348,19,0.786,59,0.056,60,0.204,62,1.607,65,2.242,68,1.384,71,1.612,72,1.976,76,1.216,102,1.607,123,1.528,187,2.175,239,0.003,240,0.003,288,1.558,292,0.434,294,1.671,295,0.917,296,0.856,298,1.558,304,5.408,305,3.23,376,6.658,439,2.354,551,2.08,564,5.301,593,5.376,620,5.219,656,1.696,698,6.389,773,2.419,784,2.111,796,1.883,1121,4.007,1509,6.905,1644,5.301,1667,2.713,2103,4.609,2105,4.905,2111,4.609,2123,5.301,2553,4.609,2569,5.695,3464,4.609,3921,5.301,3922,8.551,3923,7.689,3924,7.689,3925,7.689,3926,5.903,3927,7.689,3928,5.903,3929,5.903,3930,5.903,3931,8.551,3932,5.903,3933,5.903,3934,5.903,3935,5.903,3936,5.903,3937,5.903,3938,5.903,3939,5.903,3940,5.903,3941,5.903,3942,5.903,3943,5.301,3944,5.903,3945,5.903,3946,5.903,3947,5.903,3948,5.903,3949,5.903]],["title/modules/StripeSubscriptionModule.html",[241,1.291,279,3.573]],["body/modules/StripeSubscriptionModule.html",[3,0.062,4,0.062,5,0.055,15,0.005,16,0.093,19,0.96,24,2.122,59,0.069,60,0.249,64,2.179,239,0.004,240,0.004,241,2.229,243,2.698,244,3.421,249,3.421,250,2.784,251,2.741,254,3.595,255,3.722,279,7.25,287,3.025,302,3.379,376,4.895,379,5.63,381,5.1,382,5.991,2095,5.63,3950,6.475,3951,6.475,3952,6.475,3953,7.468,3954,7.211,3955,6.475,3956,7.211]],["title/injectables/StripeSubscriptionService.html",[17,0.885,3953,3.573]],["body/injectables/StripeSubscriptionService.html",[3,0.059,4,0.059,5,0.052,10,0.256,14,0.334,15,0.005,16,0.091,17,1.478,19,0.909,20,2.966,22,1.562,23,2.724,24,2.01,59,0.065,60,0.236,62,2.296,64,2.064,65,1.79,67,4.079,71,1.59,72,1.877,239,0.004,240,0.004,288,1.709,292,0.423,294,1.648,295,0.904,296,0.769,298,1.709,376,4.636,381,4.831,382,5.674,659,5.597,773,2.149,796,2.178,2095,7.461,2111,5.332,3953,5.965,3957,6.133,3958,8.433,3959,6.829,3960,6.829,3961,8.433,3962,6.829,3963,8.433,3964,6.829,3965,6.829,3966,6.829,3967,6.829]],["title/modules/StripeWebHookModule.html",[241,1.291,280,3.741]],["body/modules/StripeWebHookModule.html",[3,0.058,4,0.058,5,0.052,15,0.005,16,0.095,19,0.894,59,0.064,60,0.232,239,0.004,240,0.004,241,2.134,243,2.513,244,3.275,249,3.275,250,2.593,251,2.552,254,2.769,255,3.563,265,6.76,279,7.044,280,7.781,283,5.91,287,3.501,359,4.558,375,5.579,376,4.558,379,5.243,380,6.03,527,2.302,730,7.044,735,6.03,3968,6.03,3969,6.03,3970,6.715,3971,7.673,3972,5.243,3973,6.715,3974,6.715]],["title/controllers/StripeWebhookController.html",[525,1.156,3971,3.741]],["body/controllers/StripeWebhookController.html",[3,0.038,4,0.038,5,0.034,10,0.167,14,0.251,15,0.005,16,0.09,19,0.592,37,2.567,59,0.042,60,0.154,62,1.212,65,2.482,68,2.338,71,0.839,72,1.814,76,1.227,102,2.317,123,2.29,208,1.181,239,0.003,240,0.003,288,1.285,292,0.293,294,1.239,295,0.68,296,0.578,298,1.285,304,4.147,305,2.435,376,5.014,379,3.474,458,4.303,512,0.477,520,0.631,525,1.018,527,1.227,529,1.64,551,2.836,609,2.219,614,2.571,616,1.64,618,3.943,619,3.474,620,5.014,621,3.996,622,5.014,623,3.996,642,1.545,652,1.746,656,1.399,661,2.435,680,2.435,681,4.303,700,6.633,773,1.995,774,4.924,788,2.807,838,2.435,856,5.587,870,1.916,1084,2.268,1564,3.996,1743,2.81,1785,1.691,2097,3.996,2098,3.996,2099,3.996,2100,3.996,2101,3.996,2102,3.996,2103,3.474,2104,3.996,2105,3.697,2106,4.303,2107,3.996,2108,3.996,2111,6.906,3535,3.697,3953,5.224,3955,3.996,3971,4.696,3972,5.767,3975,6.137,3976,3.697,3977,6.34,3978,6.34,3979,4.449,3980,8.05,3981,4.449,3982,4.449,3983,6.137,3984,6.34,3985,4.449,3986,6.34,3987,3.697,3988,4.449,3989,3.697,3990,3.474,3991,5.694,3992,5.694,3993,5.694,3994,5.694,3995,4.449,3996,4.449,3997,4.449,3998,7.386,3999,4.449,4000,4.449,4001,4.449,4002,4.449,4003,4.449,4004,4.449,4005,4.449,4006,4.449,4007,7.386,4008,4.449,4009,6.34,4010,4.449,4011,4.449,4012,4.449,4013,4.449,4014,4.449,4015,4.449,4016,4.449,4017,4.449,4018,4.449,4019,4.449,4020,4.449,4021,4.449,4022,4.449,4023,4.449,4024,4.449,4025,4.449,4026,4.449,4027,6.34,4028,4.449,4029,4.449,4030,4.449,4031,4.449,4032,4.449,4033,4.449,4034,7.386,4035,4.449,4036,4.449,4037,4.449,4038,6.633,4039,4.449,4040,3.996,4041,4.449,4042,4.449,4043,4.449,4044,4.449,4045,6.34,4046,4.449,4047,4.449,4048,4.449,4049,4.449,4050,4.449,4051,4.449,4052,4.449,4053,4.449,4054,4.449,4055,4.449]],["title/modules/SubmitModule.html",[241,1.291,281,3.741]],["body/modules/SubmitModule.html",[3,0.059,4,0.059,5,0.052,15,0.005,16,0.097,19,0.909,24,2.01,59,0.065,60,0.236,64,2.064,239,0.004,240,0.004,241,2.156,243,2.556,244,3.309,249,3.309,250,2.637,251,2.596,254,3.478,255,3.6,276,5.935,281,7.643,287,3.538,302,3.2,330,4.636,332,3.079,333,3.646,342,5.514,343,5.332,527,2.326,742,1.859,1037,4.831,3774,7.144,3801,7.418,3802,6.133,4056,6.133,4057,6.133,4058,6.133,4059,6.829,4060,6.829,4061,6.829]],["title/injectables/SubmitService.html",[17,0.885,3801,3.573]],["body/injectables/SubmitService.html",[3,0.048,4,0.048,5,0.043,10,0.208,13,1.092,14,0.329,15,0.005,16,0.084,17,1.296,18,2.609,19,0.741,20,2.748,22,1.274,23,2.22,24,1.638,59,0.053,60,0.193,62,2.014,64,1.682,65,1.459,67,3.779,68,2.161,69,3.467,71,1.669,72,1.944,77,2.864,80,6.322,82,3,83,3.215,102,2.262,123,2.292,193,2.51,239,0.003,240,0.003,288,1.499,292,0.409,294,1.624,295,0.891,296,0.757,298,1.684,342,3.64,343,4.346,551,3.566,742,2.014,788,3.158,796,1.776,998,3.689,1785,2.116,3703,4.267,3704,3.938,3801,5.233,3803,4.999,3878,3.516,3885,5.021,3888,4.123,4062,4.999,4063,7.398,4064,7.398,4065,5.567,4066,5.567,4067,7.398,4068,5.567,4069,7.398,4070,5.567,4071,7.398,4072,5.567,4073,5.567,4074,5.567,4075,7.398,4076,7.398,4077,9.475,4078,7.398,4079,7.398,4080,5.567,4081,5.567,4082,5.567]],["title/classes/SupabaseAuthDto.html",[60,0.175,632,3.944]],["body/classes/SupabaseAuthDto.html",[3,0.024,4,0.024,5,0.021,10,0.103,11,0.634,13,0.788,14,0.397,15,0.005,16,0.026,59,0.026,60,0.095,76,1.285,88,2.249,93,1.578,190,3.121,208,1.903,239,0.002,240,0.002,292,0.453,295,0.827,296,0.943,456,2.345,461,3.963,504,2.774,508,0.688,512,1.05,513,1.048,514,3.268,515,2.154,516,2.154,519,1.626,520,0.391,523,1.304,524,3.666,530,6.963,544,4.71,555,3.666,582,5.987,583,2.154,593,4.091,617,6.567,632,3.445,648,6.027,650,4.953,651,4.953,652,2.164,653,2.441,656,1.217,657,4.953,664,4.953,665,4.953,666,4.953,667,5.727,668,5.381,669,4.582,670,5.727,671,4.582,672,4.037,673,4.582,674,4.582,675,4.582,676,4.953,677,4.953,678,4.953,747,3.588,870,2.563,935,2.995,961,1.766,1050,4.458,1095,4.316,1103,4.337,1107,4.668,1242,2.896,1378,2.249,1435,3.549,1456,2.619,1458,3.549,1551,1.704,1583,1.731,1639,3.963,1647,3.252,1648,3.423,1650,2.028,1651,4.503,1680,3.666,1710,4.458,1731,2.11,1740,3.268,1814,2.885,1922,2.885,1988,3.963,2178,5.236,2309,3.963,4083,8.84,4084,2.477,4085,2.758,4086,2.758,4087,4.412,4088,4.412,4089,2.758,4090,2.758,4091,2.758,4092,3.963,4093,3.963,4094,2.758,4095,3.445,4096,2.758,4097,4.412,4098,2.758,4099,3.963,4100,3.963,4101,2.758,4102,2.758,4103,6.302,4104,4.412,4105,2.758,4106,2.758,4107,6.302,4108,4.412,4109,2.758,4110,4.412,4111,2.758,4112,2.758,4113,3.963,4114,3.963,4115,2.758,4116,4.412,4117,4.412,4118,2.758,4119,4.412,4120,2.758,4121,2.758,4122,2.758,4123,3.963,4124,3.963,4125,2.758,4126,2.758,4127,4.412,4128,3.666,4129,2.758,4130,2.758]],["title/injectables/SupabaseGuard.html",[17,0.885,636,2.119]],["body/injectables/SupabaseGuard.html",[3,0.068,4,0.068,5,0.061,15,0.005,16,0.088,17,1.618,19,1.057,59,0.076,60,0.275,239,0.004,240,0.004,636,3.872,734,6.597,796,2.533,1040,2.757,4131,7.13,4132,7.939,4133,7.939]],["title/injectables/SupabaseStrategy.html",[17,0.885,731,3.741]],["body/injectables/SupabaseStrategy.html",[3,0.057,4,0.057,5,0.051,10,0.25,14,0.329,15,0.005,16,0.09,17,1.458,19,0.889,59,0.064,60,0.231,62,2.466,71,1.259,72,1.858,208,1.244,239,0.004,240,0.004,288,1.686,292,0.419,294,1.626,295,0.892,296,0.758,298,1.686,299,4.723,311,4.946,530,4.723,561,7.878,617,5.883,662,2.48,731,6.16,734,5.548,773,2.101,796,2.13,1040,2.319,1068,5.997,3983,5.548,4134,5.997,4135,8.317,4136,8.317,4137,6.678,4138,8.317,4139,9.058,4140,6.678,4141,8.317,4142,6.678,4143,6.678,4144,6.678,4145,6.678,4146,6.678,4147,6.678,4148,6.678,4149,6.678,4150,6.678,4151,6.678,4152,6.678,4153,6.678,4154,6.678,4155,6.678,4156,6.678,4157,6.678,4158,6.678,4159,6.678]],["title/modules/TierModule.html",[241,1.291,4160,3.741]],["body/modules/TierModule.html",[3,0.064,4,0.064,5,0.057,15,0.005,16,0.085,19,0.991,59,0.071,60,0.258,239,0.004,240,0.004,241,2.273,243,2.787,244,3.488,249,3.488,250,2.876,251,2.831,254,3.666,255,3.795,4160,7.641,4161,6.689,4162,6.689,4163,6.689,4164,7.851,4165,7.448,4166,7.448]],["title/injectables/TierService.html",[17,0.885,4164,3.741]],["body/injectables/TierService.html",[3,0.066,4,0.051,5,0.045,10,0.221,11,1.106,13,0.917,14,0.359,15,0.005,16,0.082,17,1.349,19,0.787,59,0.056,60,0.204,62,1.61,65,2.243,68,1.805,72,1.755,76,1.081,88,4.62,102,2.096,117,1.438,123,1.992,208,1.433,239,0.003,240,0.003,288,1.56,292,0.395,294,1.504,295,1.007,296,0.702,298,1.198,304,5.41,305,3.236,458,6.153,502,4.182,523,0.787,551,2.083,558,8.141,593,5.079,661,4.212,680,4.212,681,5.809,773,1.861,784,2.114,796,1.886,838,3.236,839,3.617,846,6.395,1077,2.247,1710,4.182,2103,4.616,2553,4.616,2797,4.38,4164,5.701,4167,5.31,4168,7.697,4169,7.697,4170,7.697,4171,9.065,4172,5.913,4173,7.697,4174,8.558,4175,5.913,4176,5.913,4177,5.913,4178,5.31,4179,5.913,4180,5.913,4181,7.685,4182,8.558,4183,5.913,4184,7.697,4185,5.913,4186,5.913,4187,5.913]],["title/classes/TopProjectsDto.html",[56,3.573,60,0.175]],["body/classes/TopProjectsDto.html",[3,0.056,4,0.056,5,0.05,6,3.522,10,0.245,11,1.18,13,1.061,14,0.406,15,0.005,16,0.086,56,5.81,59,0.062,60,0.31,78,3.867,100,3.223,117,2.183,143,4.151,193,4.047,239,0.004,240,0.004,292,0.379,296,0.749,504,2.353,508,1.632,512,0.88,513,2.488,516,1.705,519,3.027,520,0.929,522,1.952,523,1.093,656,1.812,742,2.236,961,2.157,964,3.581,1077,2.488,1095,2.896,1099,3.336,1101,3.336,1103,3.635,1105,3.506,1168,3.775,1169,5.37,1170,5.11,1171,5.11,1338,5.188,3563,5.877,4188,8.061,4189,5.877,4190,6.545,4191,6.545,4192,6.545]],["title/classes/TopUsersDto.html",[60,0.175,4193,3.944]],["body/classes/TopUsersDto.html",[3,0.05,4,0.05,5,0.044,8,3.558,10,0.217,11,1.091,13,1.084,14,0.408,15,0.005,16,0.081,59,0.055,60,0.293,71,1.091,93,2.715,117,2.375,187,3.726,208,1.414,239,0.003,240,0.003,292,0.415,296,0.873,504,2.626,508,1.444,512,0.908,520,0.822,522,1.726,523,0.771,551,2.985,656,1.675,816,3.36,870,2.294,961,2.035,964,3.168,1043,3.893,1044,2.899,1077,3.22,1084,4.318,1085,3.87,1086,3.785,1087,3.091,1093,2.951,1095,2.562,1103,3.979,1105,3.838,1169,5.538,1339,3.436,1340,3.436,2246,4.795,2569,5.623,2570,5.992,2588,4.52,2591,4.964,2592,5.623,2602,4.288,2603,4.288,2620,4.52,2621,5.199,2622,5.199,2625,5.199,2626,5.199,3075,4.811,4193,5.927,4194,8.384,4195,7.592,4196,5.79]],["title/classes/UpdateEndorsementDto.html",[60,0.175,4197,4.197]],["body/classes/UpdateEndorsementDto.html",[3,0.068,4,0.068,5,0.061,15,0.005,16,0.088,59,0.076,60,0.274,239,0.004,240,0.004,508,1.975,520,1.124,574,5.179,1040,2.751,1348,5.604,1350,6.582,2456,6.582,4197,7.66,4198,7.114,4199,7.922,4200,7.922]],["title/classes/UpdateInsightDto.html",[60,0.175,2840,3.741]],["body/classes/UpdateInsightDto.html",[3,0.06,4,0.06,5,0.054,10,0.262,11,1.231,14,0.398,15,0.005,16,0.067,20,2.173,59,0.067,60,0.242,76,1.081,203,3.531,239,0.004,240,0.004,292,0.427,295,0.992,439,2.792,508,1.746,512,0.992,513,3.517,516,1.921,574,4.577,582,4.752,747,4.18,752,5.186,958,3.931,960,3.417,962,5.817,1040,2.973,1044,2.931,1052,4.94,1196,4.952,1197,5.409,1198,5.466,1375,7.451,1377,5.817,1378,4.365,1380,6.287,1382,5.599,2840,6.343,2842,5.817,4201,5.817,4202,7.001,4203,7.001,4204,7.001]],["title/classes/UpdateInsightMemberDto.html",[60,0.175,4205,3.944]],["body/classes/UpdateInsightMemberDto.html",[3,0.062,4,0.062,5,0.056,10,0.271,11,1.256,14,0.372,15,0.005,16,0.083,59,0.069,60,0.302,76,1.231,239,0.004,240,0.004,292,0.334,508,1.805,512,0.776,513,2.752,516,1.815,519,3.221,520,1.027,521,3.375,522,2.159,523,0.963,1168,4.176,1378,4.969,1390,6.015,1391,6.823,1818,7.392,1823,6.473,2829,5.652,4201,7.262,4205,6.823,4206,7.239,4207,7.262,4208,6.473,4209,7.239,4210,7.239]],["title/classes/UpdateUserCollaborationDto.html",[60,0.175,4211,3.944]],["body/classes/UpdateUserCollaborationDto.html",[3,0.063,4,0.063,5,0.056,10,0.273,11,1.262,14,0.373,15,0.005,16,0.084,59,0.07,60,0.304,76,1.235,208,1.635,239,0.004,240,0.004,292,0.337,391,2.921,493,7.887,508,1.82,512,0.782,513,2.774,516,1.823,519,3.236,520,1.036,521,3.391,522,2.176,523,0.971,1168,4.21,1412,6.064,1413,6.505,2106,6.789,4211,6.856,4212,6.505,4213,7.298,4214,7.298,4215,6.554,4216,7.298]],["title/classes/UpdateUserDto.html",[60,0.175,590,3.944]],["body/classes/UpdateUserDto.html",[3,0.033,4,0.033,5,0.03,10,0.146,11,0.826,14,0.411,15,0.005,16,0.055,59,0.037,60,0.199,76,1.328,208,1.863,239,0.003,240,0.003,292,0.442,295,0.864,296,0.92,449,4.136,456,1.241,504,2.4,508,0.97,512,1.025,513,2.186,516,2.126,519,2.521,520,0.552,521,3.373,522,1.16,523,1.273,590,4.489,593,4.786,604,8.881,662,3.078,667,6.701,668,6.296,669,5.684,670,6.701,671,5.684,672,4.611,673,5.684,674,5.684,675,5.684,689,5.705,747,3.689,749,4.643,754,3.759,850,3.317,935,3.903,974,2.881,1095,4.122,1103,4.181,1105,4.033,1393,3.493,1395,5.164,1456,2.308,1551,2.22,1710,4.067,1740,4.259,1922,2.543,2239,4.489,2601,5.901,4092,5.164,4093,3.493,4095,4.489,4099,5.164,4100,5.164,4113,5.164,4114,3.493,4123,8.053,4124,3.493,4128,3.232,4208,2.881,4212,7.155,4217,3.493,4218,5.164,4219,3.889,4220,3.889,4221,5.75,4222,3.889,4223,3.889,4224,3.889,4225,3.889,4226,3.889,4227,3.889,4228,3.889,4229,3.889,4230,3.889,4231,3.889,4232,3.889,4233,3.889,4234,3.889,4235,3.889,4236,3.889,4237,3.889,4238,7.558,4239,5.75,4240,5.75,4241,5.75,4242,5.75,4243,3.889,4244,3.889,4245,3.889,4246,3.889,4247,8.065,4248,3.889,4249,3.889,4250,3.889]],["title/classes/UpdateUserEmailPreferencesDto.html",[60,0.175,591,3.944]],["body/classes/UpdateUserEmailPreferencesDto.html",[3,0.054,4,0.054,5,0.048,10,0.235,11,1.149,14,0.403,15,0.005,16,0.076,59,0.06,60,0.276,198,4.269,208,1.908,239,0.004,240,0.004,292,0.407,456,2.807,508,1.564,512,0.943,513,3.345,516,2.032,519,3.416,520,0.89,522,1.87,523,1.171,580,5.05,591,6.242,593,5.976,662,3.075,747,5.061,752,6.519,754,6.06,1413,5.922,1740,5.922,4212,6.865,4251,5.633,4252,8.801,4253,8.801,4254,8.801,4255,6.272,4256,9.268,4257,6.272,4258,7.995,4259,6.272]],["title/classes/UpdateUserProfileInterestsDto.html",[60,0.175,598,3.944]],["body/classes/UpdateUserProfileInterestsDto.html",[3,0.063,4,0.063,5,0.056,10,0.272,11,1.259,14,0.372,15,0.005,16,0.084,59,0.069,60,0.303,76,1.233,208,1.631,239,0.004,240,0.004,292,0.336,439,3.494,508,1.812,512,0.779,513,2.763,516,1.819,519,3.229,520,1.032,522,2.167,523,0.967,598,6.84,600,7.4,662,2.804,958,4.919,960,4.765,2262,5.384,4212,6.489,4260,6.528,4261,6.039,4262,7.269,4263,5.675]],["title/controllers/UserCollaborationController.html",[525,1.156,4264,3.944]],["body/controllers/UserCollaborationController.html",[3,0.035,4,0.035,5,0.031,10,0.152,13,0.993,14,0.351,15,0.005,16,0.093,19,0.541,25,1.371,26,1.475,28,1.984,59,0.039,60,0.141,62,1.107,65,1.557,68,1.925,71,1.119,72,1.957,76,1.037,77,2.865,102,2.102,119,2.165,123,2.22,198,2.17,208,1.891,239,0.003,240,0.003,288,1.204,292,0.357,294,1.509,295,0.827,296,0.704,298,1.564,311,3.01,391,2.852,412,5.24,413,3.173,504,1.557,512,0.827,520,0.577,523,1.093,525,0.93,527,1.121,529,1.498,530,2.875,542,3.121,544,3.171,545,2.759,547,5.022,551,3.461,557,2.224,561,6.414,577,3.027,580,2.567,608,2.875,609,2.961,610,1.832,611,3.547,612,3.097,613,3.225,614,2.846,615,2.889,616,1.498,617,2.875,618,3.747,636,1.705,642,1.411,644,3.225,645,2.626,656,1.548,659,2.486,769,4.384,770,2.282,775,3.659,776,1.905,777,1.943,788,2.257,988,1.391,989,1.121,1214,2.535,1215,1.832,1216,1.905,1217,1.832,1218,1.905,1359,3.173,1410,7.089,1413,6.86,2106,2.759,2377,2.875,2378,4.031,2423,3.65,2452,1.905,2490,3.65,2507,4.031,2728,3.632,2731,3.01,2761,2.17,2834,4.201,2838,4.964,2841,3.173,3129,3.01,3716,3.883,3723,4.031,3878,2.567,4211,6.696,4264,4.637,4265,4.611,4266,3.65,4267,4.064,4268,7.374,4269,7.374,4270,7.719,4271,6.302,4272,4.064,4273,5.939,4274,7.018,4275,3.65,4276,5.333,4277,5.333,4278,4.064,4279,4.064,4280,3.65,4281,7.018,4282,4.064,4283,4.064,4284,4.064,4285,4.064,4286,4.064,4287,3.65,4288,4.064,4289,4.064,4290,4.064,4291,2.567,4292,4.964,4293,3.65,4294,5.939,4295,4.064,4296,2.567,4297,4.064,4298,4.064,4299,4.064,4300,4.064,4301,4.064,4302,4.064,4303,7.018,4304,4.064,4305,5.939,4306,4.064,4307,4.064,4308,4.064,4309,3.65,4310,4.064,4311,4.064]],["title/injectables/UserCollaborationService.html",[17,0.885,4292,3.573]],["body/injectables/UserCollaborationService.html",[3,0.043,4,0.043,5,0.038,10,0.187,13,0.842,14,0.363,15,0.005,16,0.09,17,1.203,18,3.216,19,0.663,20,2.626,21,4.192,22,1.14,23,1.987,24,1.466,25,1.681,26,1.809,28,2.432,59,0.048,60,0.172,62,1.869,64,1.506,65,1.799,67,3.611,68,1.983,69,3.216,71,1.729,72,2.092,76,1.227,77,2.736,82,3.43,83,2.983,102,1.357,119,2.372,123,1.29,208,0.928,235,2.727,239,0.003,240,0.003,248,5.017,288,1.391,292,0.434,294,1.792,295,0.983,296,0.836,298,1.859,412,4.659,413,3.891,551,3.126,656,1.957,659,5.609,773,2.47,788,1.894,796,1.59,988,1.705,989,1.374,990,3.148,995,3.148,997,4.002,998,2.485,1599,2.875,2149,4.475,2506,4.335,2524,4.335,4265,5.375,4268,6.164,4269,7.051,4271,6.164,4280,4.475,4287,6.164,4292,4.855,4309,7.968,4312,4.475,4313,6.864,4314,4.983,4315,4.983,4316,6.864,4317,6.864,4318,4.983,4319,4.983,4320,4.983,4321,4.983,4322,6.864,4323,4.983,4324,4.983,4325,4.983,4326,4.983,4327,4.983,4328,4.983,4329,4.983,4330,4.983,4331,4.983,4332,4.983,4333,4.983,4334,4.983]],["title/controllers/UserController.html",[525,1.156,4335,3.944]],["body/controllers/UserController.html",[3,0.029,4,0.029,5,0.026,8,2.449,10,0.128,14,0.377,15,0.005,16,0.095,19,0.456,25,1.155,26,1.243,28,2.551,57,2.674,59,0.033,60,0.118,62,0.933,65,2.001,68,1.486,71,1.578,72,2.045,76,1.213,77,3.078,85,2.912,119,2.579,123,1.64,197,3.081,198,2.79,203,3.452,208,1.816,239,0.002,240,0.002,288,1.059,292,0.387,294,1.636,295,0.897,296,0.763,298,1.696,332,2.356,333,1.829,334,2.313,385,1.874,387,2.86,388,2.033,389,2.033,393,2.86,395,2.033,409,4.723,414,3.547,415,2.674,449,5.207,512,0.897,520,0.486,523,1.071,525,0.784,527,0.945,529,1.262,542,3.353,546,2.846,613,3.698,614,3.499,615,3.23,616,1.262,618,3.383,642,1.189,645,3.132,662,1.558,775,2.725,988,1.172,989,0.945,1206,2.674,1214,3.259,1215,1.544,1216,1.605,1217,1.544,1218,1.605,1219,4.002,1220,2.537,1225,2.674,1271,5.252,1773,4.08,2143,4.947,2171,2.163,2378,5.463,2381,4.598,2424,3.981,2452,1.605,2485,5.891,2486,5.536,2618,5.536,2623,3.697,2717,5.252,2730,2.674,2737,3.076,2747,3.076,2762,4.143,2764,2.674,2769,2.846,2787,3.076,3231,3.076,3408,3.076,3464,4.08,3477,3.468,3478,2.239,3500,2.423,3505,3.076,3516,2.325,3518,2.423,4193,5.536,4291,2.163,4296,2.163,4335,4.08,4336,3.076,4337,7.635,4338,7.635,4339,7.635,4340,7.635,4341,5.226,4342,5.226,4343,7.09,4344,3.425,4345,3.425,4346,6.687,4347,3.425,4348,3.425,4349,3.425,4350,4.693,4351,3.425,4352,3.425,4353,3.425,4354,3.425,4355,3.425,4356,3.425,4357,3.425,4358,3.425,4359,3.425,4360,3.425,4361,3.425,4362,3.425,4363,3.425,4364,3.425,4365,5.226,4366,3.425,4367,3.425,4368,3.425,4369,5.226,4370,5.226,4371,3.425,4372,3.425,4373,3.425,4374,3.425,4375,3.425,4376,5.226,4377,4.693,4378,3.425,4379,3.425,4380,4.482,4381,3.076,4382,3.425,4383,2.846,4384,3.425,4385,3.425,4386,3.425,4387,3.425,4388,3.425,4389,3.425,4390,4.693,4391,3.425,4392,3.425,4393,3.425,4394,3.425,4395,3.425,4396,3.425,4397,3.425,4398,3.425,4399,3.425]],["title/controllers/UserEndorsementController.html",[525,1.156,4400,3.944]],["body/controllers/UserEndorsementController.html",[3,0.049,4,0.049,5,0.043,10,0.212,13,1.02,14,0.353,15,0.005,16,0.094,19,0.752,59,0.054,60,0.196,71,1.409,72,1.952,119,2.617,208,1.659,239,0.003,240,0.003,288,1.515,292,0.345,294,1.461,295,0.801,296,0.681,298,1.515,417,5.851,418,4.698,504,1.482,512,0.801,520,0.802,525,1.294,527,1.559,529,2.084,542,3.139,544,4.756,551,3.264,610,2.549,611,3.848,614,3.395,615,3.133,616,2.084,636,2.372,642,1.963,644,3.435,645,2.797,773,2.352,776,2.649,784,2.022,988,1.935,989,1.559,1210,5.139,1214,3.574,1215,2.549,1216,2.649,1217,2.549,1218,2.649,1692,4.887,1772,6.955,2424,5.002,2430,6.712,2441,6.21,2453,5.474,2461,5.077,2467,6.712,2761,3.019,4265,4.701,4400,5.835,4401,5.077,4402,5.654,4403,8.908,4404,8.908,4405,5.654,4406,5.654,4407,5.654,4408,5.654,4409,5.654,4410,5.654,4411,5.077,4412,5.654,4413,5.654,4414,5.654,4415,5.654,4416,5.654,4417,5.654,4418,5.654]],["title/injectables/UserFollowService.html",[17,0.885,4419,3.303]],["body/injectables/UserFollowService.html",[3,0.037,4,0.037,5,0.033,10,0.159,13,1.108,14,0.345,15,0.005,16,0.083,17,1.076,18,1.994,19,0.566,20,2.448,22,0.974,23,1.697,24,1.252,28,2.077,59,0.041,60,0.147,62,1.672,64,1.286,65,1.888,67,3.367,68,2.23,69,2.878,71,1.693,72,2.044,77,2.974,82,3.856,83,3.634,85,2.822,102,2.148,122,1.807,123,2.38,208,1.557,214,4.015,235,3.942,239,0.003,240,0.003,288,1.245,292,0.415,294,1.703,295,0.934,296,0.794,298,1.766,397,2.782,398,3.152,551,3.533,618,4.796,773,1.339,788,2.998,796,1.358,998,3.592,1147,2.603,1785,1.618,2311,4.344,2351,3.536,3703,2.455,3878,2.688,3885,2.889,3888,4.548,4265,5.163,4291,2.688,4419,4.015,4420,3.822,4421,6.141,4422,6.141,4423,6.141,4424,6.141,4425,6.141,4426,4.256,4427,5.873,4428,4.256,4429,6.141,4430,6.141,4431,8.413,4432,4.256,4433,4.256,4434,6.141,4435,4.256,4436,6.141,4437,4.256,4438,6.141,4439,8.541,4440,4.256,4441,6.141,4442,4.256,4443,3.323,4444,4.256,4445,4.256,4446,6.141,4447,4.256,4448,7.204,4449,7.887,4450,4.256,4451,7.204,4452,9.195,4453,4.548,4454,6.141,4455,6.141,4456,6.141,4457,4.256,4458,4.256,4459,6.141,4460,4.256,4461,4.256,4462,4.256]],["title/controllers/UserFollowingController.html",[525,1.156,4463,3.944]],["body/controllers/UserFollowingController.html",[3,0.056,4,0.056,5,0.05,8,3.823,10,0.242,14,0.256,15,0.005,16,0.094,19,0.862,28,3.16,59,0.062,60,0.224,65,1.697,68,1.518,71,1.22,72,1.832,76,1.128,77,2.638,85,4.104,123,1.676,208,1.746,239,0.004,240,0.004,288,1.653,292,0.299,294,1.265,295,0.694,296,0.59,298,1.312,334,3.61,397,4.233,398,4.795,449,4.888,504,2.138,512,0.694,520,0.919,523,0.862,525,1.481,527,1.785,529,2.386,542,2.874,613,3.749,615,3.053,616,2.386,618,4.769,642,2.248,645,2.423,784,2.315,889,4.989,2171,4.089,2381,4.158,2452,3.034,2486,5.055,4265,4.58,4291,4.089,4296,4.089,4383,5.379,4419,5.84,4453,6.042,4463,6.369,4464,5.814,4465,9.376,4466,6.474,4467,6.474,4468,5.814,4469,6.474,4470,5.055,4471,6.474,4472,6.474,4473,6.474]],["title/controllers/UserFollowsController.html",[525,1.156,4474,3.944]],["body/controllers/UserFollowsController.html",[3,0.035,4,0.035,5,0.031,10,0.152,13,1.052,14,0.35,15,0.005,16,0.087,19,0.539,28,1.977,59,0.039,60,0.14,65,1.062,68,2.127,71,1.546,72,1.978,76,1.169,77,2.934,85,3.936,98,2.325,123,2.217,208,1.915,239,0.003,240,0.003,288,1.201,292,0.356,294,1.506,295,0.826,296,0.703,298,1.736,397,4.579,398,3,449,5.146,504,1.553,512,0.826,520,0.575,523,1.207,525,0.927,527,1.117,529,1.493,542,3.196,544,3.163,551,3.527,557,2.217,577,3.02,610,1.826,611,3.768,612,3.089,613,3.768,614,2.402,615,3.069,616,1.493,618,3.74,636,1.699,642,1.406,644,3.542,645,2.884,661,2.217,680,2.217,681,4.021,773,1.275,776,1.898,784,1.448,838,3.242,839,2.477,889,3.623,2311,5.451,2352,5.231,2381,4.18,2452,1.898,2485,5.82,2486,5.468,2627,6.688,2629,3,2761,2.163,3670,3.638,3702,5.188,3703,4.446,3722,3,3723,5.231,3767,6.908,3771,5.32,4265,4.604,4291,2.558,4296,2.558,4377,3.638,4383,3.366,4390,6.921,4419,4.579,4453,4.388,4468,6.29,4470,3.162,4474,4.625,4475,3.638,4476,7.004,4477,8.2,4478,8.2,4479,7.004,4480,4.05,4481,4.05,4482,5.924,4483,4.05,4484,4.05,4485,4.05,4486,4.05,4487,4.05,4488,5.924,4489,4.05,4490,4.05,4491,5.924,4492,4.05,4493,4.05,4494,4.05,4495,5.924,4496,4.05,4497,4.05,4498,4.05,4499,4.05,4500,4.05,4501,4.05,4502,4.05,4503,5.924,4504,4.05,4505,4.05,4506,5.924,4507,4.05,4508,4.05,4509,4.05,4510,5.924,4511,4.05,4512,3.638,4513,4.05,4514,4.05]],["title/controllers/UserHighlightsController.html",[525,1.156,4515,3.944]],["body/controllers/UserHighlightsController.html",[3,0.022,4,0.022,5,0.02,10,0.097,13,1.096,14,0.395,15,0.005,16,0.081,19,0.343,25,0.869,26,0.935,28,2.039,59,0.025,60,0.089,68,1.421,71,1.344,72,2.016,76,0.9,77,3.016,85,2.784,102,1.941,119,1.53,123,2.024,203,1.723,208,1.823,239,0.002,240,0.002,288,0.847,292,0.373,294,1.579,295,0.97,296,0.737,298,1.638,348,1.314,391,2.688,393,3.644,395,1.53,403,2.479,404,5.125,405,1.685,504,0.676,512,0.866,520,0.366,523,1.218,525,0.59,527,0.711,529,0.95,542,3.286,544,4.885,545,4.113,547,5.463,551,3.583,554,4.731,557,3.644,577,2.685,580,2.639,583,2.039,608,1.823,609,2.083,610,1.162,611,3.713,612,2.747,613,3.594,614,3.171,615,3.107,616,0.95,636,1.081,642,0.895,644,3.594,645,3.024,656,2.039,672,1.258,769,4.885,770,2.346,775,4.214,776,1.208,777,1.232,784,0.922,788,0.98,829,1.576,961,2.081,989,0.711,1214,2.249,1305,2.314,1426,6.15,1428,2.012,1735,3.902,1736,5.566,2175,2.141,2236,2.836,2245,4.742,2250,3.094,2448,4.488,2452,1.208,2717,3.902,2728,3.706,2730,3.262,2732,5.441,2733,4.488,2750,2.314,2751,2.314,2752,2.314,2753,2.314,2759,4.216,2760,4.009,2761,1.376,2762,3.444,2764,2.012,2771,2.314,2776,4.073,2783,2.314,2784,2.314,2786,2.314,2825,2.012,2833,2.141,2848,2.012,2851,2.141,3129,1.909,3716,3.962,3723,2.836,3767,3.262,3878,1.628,3885,1.749,4263,2.012,4265,4.662,4275,2.314,4296,1.628,4515,3.262,4516,2.314,4517,2.577,4518,6.659,4519,4.731,4520,6.659,4521,6.659,4522,6.659,4523,6.659,4524,6.659,4525,6.059,4526,6.659,4527,2.577,4528,7.023,4529,2.577,4530,2.577,4531,2.577,4532,2.577,4533,2.577,4534,7.315,4535,2.577,4536,4.178,4537,2.314,4538,2.577,4539,5.268,4540,2.577,4541,3.752,4542,2.577,4543,2.577,4544,2.577,4545,2.577,4546,2.577,4547,2.577,4548,2.577,4549,2.577,4550,2.577,4551,6.059,4552,4.178,4553,2.577,4554,2.577,4555,2.577,4556,2.577,4557,2.577,4558,2.577,4559,2.577,4560,2.577,4561,2.141,4562,2.577,4563,2.577,4564,4.178,4565,2.314,4566,2.012,4567,2.577,4568,2.314,4569,2.577,4570,2.577,4571,2.577,4572,2.577,4573,2.577,4574,2.141,4575,5.268,4576,2.577,4577,2.577,4578,2.577,4579,2.577,4580,2.577,4581,2.577,4582,2.577,4583,2.577,4584,2.577,4585,2.577,4586,2.577,4587,2.577,4588,4.178,4589,2.577,4590,2.577,4591,2.577,4592,2.577,4593,2.577,4594,2.577,4595,2.577,4596,2.577,4597,2.577]],["title/injectables/UserHighlightsService.html",[17,0.885,2762,3.303]],["body/injectables/UserHighlightsService.html",[3,0.021,4,0.021,5,0.019,10,0.19,13,1.109,14,0.362,15,0.005,16,0.085,17,0.701,18,2.38,19,0.325,20,2.279,21,2.711,22,0.559,23,0.974,24,0.719,25,0.824,26,0.887,28,1.952,59,0.023,60,0.084,62,1.089,64,1.209,65,1.823,67,2.506,68,2.266,69,1.874,71,1.661,72,2.091,76,1.03,77,2.807,78,1.595,82,3.74,83,2.814,85,2.334,90,1.658,91,1.52,93,1.43,99,1.45,100,0.959,101,1.728,102,1.999,118,2.136,119,2.4,122,1.494,123,2.207,125,2.865,144,0.861,147,1.81,148,1.81,149,1.494,150,1.81,157,1.543,197,1.062,208,1.206,214,3.32,225,2.963,235,3.212,239,0.002,240,0.002,248,3.919,288,0.811,292,0.422,294,1.767,295,0.969,296,0.824,298,1.832,393,2.189,395,1.45,403,2.374,404,4.158,405,1.597,551,3.53,618,3.919,656,1.295,659,3.106,672,1.192,714,3.123,742,1.089,773,2.41,777,1.168,788,1.93,796,0.779,829,1.494,870,0.738,873,2.779,988,1.369,989,1.103,990,1.543,995,3.208,997,3.544,998,2.532,1067,1.337,1111,2.715,1119,2.715,1121,3.984,1126,1.597,1127,1.728,1148,1.494,1165,1.81,1209,1.597,1426,4.348,1428,1.907,1599,2.929,1638,1.952,1735,1.81,1736,1.907,1785,1.52,1909,1.907,2175,2.03,2191,2.03,2212,3.123,2213,1.907,2230,2.194,2236,2.715,2238,2.03,2245,3.707,2351,2.03,2355,2.194,2360,2.194,2506,2.526,2524,2.526,2720,3.592,2739,2.194,2762,2.615,2838,1.728,2894,2.194,2962,2.829,2971,3.123,2992,2.194,3412,1.907,3431,2.03,3535,2.03,3546,3.592,3555,2.194,3664,2.194,3680,3.323,3703,1.409,3878,1.543,3885,1.658,4265,5.179,4291,1.543,4419,4.799,4427,4.799,4439,5.815,4443,1.907,4470,1.907,4528,7.504,4534,7.664,4566,1.907,4568,2.194,4598,2.194,4599,4,4600,4,4601,4,4602,4,4603,4,4604,3.592,4605,4,4606,4,4607,4,4608,4,4609,4,4610,2.443,4611,5.078,4612,2.443,4613,3.592,4614,4,4615,2.443,4616,4,4617,2.443,4618,4,4619,5.815,4620,2.443,4621,2.443,4622,4,4623,2.443,4624,4,4625,2.443,4626,2.443,4627,2.443,4628,3.592,4629,2.443,4630,4,4631,2.443,4632,4,4633,2.443,4634,2.443,4635,4,4636,2.443,4637,4,4638,2.443,4639,2.443,4640,2.443,4641,4,4642,2.443,4643,2.194,4644,2.443,4645,2.194,4646,4,4647,4,4648,2.443,4649,2.443,4650,2.443,4651,4,4652,2.194,4653,2.443,4654,2.443,4655,2.443,4656,2.443,4657,2.443,4658,2.443,4659,2.443,4660,2.443,4661,2.443,4662,2.443,4663,2.443,4664,2.443,4665,2.443,4666,4,4667,2.443,4668,2.443,4669,2.443,4670,2.443,4671,2.443,4672,2.443,4673,2.443,4674,2.443,4675,2.443,4676,2.443,4677,2.443,4678,4,4679,2.443,4680,2.443,4681,2.443,4682,2.194,4683,2.443,4684,2.443,4685,2.443,4686,2.443,4687,2.443,4688,2.443,4689,4,4690,2.443,4691,2.443,4692,2.443,4693,2.443,4694,5.078,4695,2.443,4696,2.443,4697,2.443,4698,4,4699,4,4700,2.443,4701,2.443,4702,2.443,4703,5.078,4704,2.443,4705,2.443,4706,4,4707,2.443,4708,2.443]],["title/controllers/UserInsightMemberController.html",[525,1.156,2954,3.944]],["body/controllers/UserInsightMemberController.html",[3,0.027,4,0.027,5,0.024,10,0.119,13,1.071,14,0.384,15,0.005,16,0.089,19,0.422,25,1.07,26,1.151,59,0.03,60,0.11,62,0.864,65,1.583,68,2.171,71,1.139,72,1.875,76,0.986,77,2.723,102,2.217,119,1.244,123,2.425,208,0.917,239,0.002,240,0.002,288,0.998,292,0.315,294,1.331,295,0.902,296,0.621,298,1.38,366,3.585,391,2.009,399,4.1,400,2.477,456,1.012,504,1.291,512,0.73,520,0.45,523,1.12,525,0.726,527,0.875,529,1.169,542,2.966,547,5.405,551,3.436,557,1.736,577,3.079,580,3.112,582,2.153,583,1.548,608,2.244,609,1.582,610,1.43,611,3.388,612,3.15,613,3.388,614,2.99,615,2.759,616,1.169,618,3.225,619,2.477,636,1.331,642,1.101,644,3.129,645,2.548,656,2.016,659,1.94,769,4.167,770,1.781,775,3.551,776,1.487,777,1.517,788,2.803,961,2.023,989,0.875,1044,1.086,1214,2.103,1215,1.43,1216,1.487,1217,1.43,1218,1.487,1378,5.177,1386,2.35,1389,6.358,1391,7.026,1785,1.873,1818,3.649,1819,2.35,1820,2.849,1823,4.474,1831,2.849,2378,3.344,2381,1.617,2452,1.487,2507,3.344,2728,3.013,2731,3.649,2733,2.35,2759,4.14,2760,3.937,2761,1.694,2776,4.165,2826,4.094,2829,4.716,2834,3.485,2838,5.216,2841,2.477,2843,2.35,2844,3.815,2845,2.153,2847,2.636,2850,4.094,2855,4.1,2858,5.424,2860,4.424,2862,6.622,2869,2.849,2872,6.995,2881,2.849,2883,2.477,2914,4.817,2954,3.846,2958,2.636,2978,2.636,3101,2.477,3703,1.83,3716,3.221,3878,2.004,4205,6.573,4207,6.127,4208,5.462,4277,2.849,4346,4.094,4709,6.127,4710,2.849,4711,2.849,4712,5.424,4713,7.374,4714,3.172,4715,3.172,4716,4.927,4717,4.927,4718,4.927,4719,6.04,4720,3.172,4721,3.172,4722,2.849,4723,3.172,4724,4.927,4725,3.172,4726,3.172,4727,3.172,4728,7.804,4729,3.172,4730,3.172,4731,3.172,4732,3.172,4733,2.849,4734,3.172,4735,3.172,4736,3.172,4737,4.424,4738,4.927,4739,2.849,4740,3.172,4741,3.172,4742,4.927,4743,4.927,4744,6.116,4745,6.622,4746,3.172,4747,3.172,4748,7.009,4749,4.927,4750,3.172,4751,3.172,4752,3.172,4753,3.172,4754,4.927,4755,3.172,4756,3.172,4757,3.172,4758,3.172,4759,3.172,4760,4.927,4761,4.927,4762,4.927,4763,4.927,4764,3.172,4765,3.172,4766,3.172,4767,3.172,4768,3.172,4769,3.172]],["title/controllers/UserInsightsController.html",[525,1.156,2953,3.944]],["body/controllers/UserInsightsController.html",[3,0.032,4,0.032,5,0.029,10,0.139,13,0.97,14,0.365,15,0.005,16,0.091,19,0.495,25,1.255,26,1.351,59,0.035,60,0.129,62,1.013,65,1.747,68,2.122,71,1.256,72,1.856,76,0.842,77,2.687,102,2.262,119,1.405,123,2.229,203,3.049,208,1.648,239,0.002,240,0.002,288,1.128,292,0.308,294,1.303,295,0.89,296,0.607,298,1.351,366,4.389,391,1.851,504,1.458,512,0.714,520,0.528,523,1.105,525,0.851,527,1.026,529,1.371,542,2.927,544,3.948,545,3.777,547,5.414,551,3.435,577,2.836,580,3.514,583,3.253,608,2.632,609,2.774,610,1.678,611,3.398,612,3.475,613,3.398,614,2.999,615,2.768,616,1.371,636,1.561,642,1.292,644,3.062,645,2.494,656,1.746,661,2.036,680,2.036,681,2.526,742,2.155,769,3.948,770,2.089,774,3.403,775,3.475,776,1.744,777,1.779,788,2.533,961,1.337,989,1.026,1044,2.709,1061,2.433,1197,3.514,1214,2.375,1215,1.678,1216,1.744,1217,1.678,1218,1.744,1375,6.557,1378,4.882,1382,2.433,1785,1.414,1799,3.342,1814,4.835,1932,3.342,2377,2.632,2378,3.777,2381,2.836,2452,1.744,2507,2.526,2728,4.076,2759,3.124,2760,2.971,2761,1.987,2776,2.276,2826,5.537,2835,4.997,2836,3.342,2838,3.936,2840,6.557,2841,2.905,2842,4.623,2843,2.756,2844,4.209,2845,2.526,2847,3.092,2850,4.623,2855,4.524,2914,5.231,2915,3.936,2953,4.344,2956,2.905,2958,3.092,2978,3.092,3129,2.756,3716,3.638,3990,2.905,4207,3.092,4208,2.756,4346,4.623,4519,6.641,4561,3.092,4574,3.092,4709,6.145,4711,3.342,4712,7.109,4722,3.342,4733,3.342,4737,4.997,4739,3.342,4744,3.342,4745,3.342,4748,4.997,4770,3.342,4771,7.916,4772,3.721,4773,3.721,4774,3.721,4775,3.721,4776,3.721,4777,3.721,4778,3.721,4779,5.564,4780,3.721,4781,3.721,4782,3.721,4783,3.721,4784,5.564,4785,3.721,4786,5.564,4787,3.721,4788,3.721,4789,3.721,4790,3.721,4791,3.721,4792,3.721,4793,3.721,4794,3.721,4795,3.721,4796,3.721,4797,3.721,4798,3.721,4799,3.721,4800,5.564,4801,3.721,4802,3.721,4803,3.721,4804,3.721,4805,3.721,4806,3.721,4807,3.721,4808,3.721,4809,3.721,4810,3.721,4811,3.721,4812,3.721,4813,3.721,4814,3.721,4815,3.721]],["title/controllers/UserListController.html",[525,1.156,4816,3.944]],["body/controllers/UserListController.html",[3,0.019,4,0.019,5,0.017,6,3.324,7,5.538,8,4.489,10,0.084,13,0.891,14,0.396,15,0.005,16,0.085,19,0.298,25,0.756,26,0.814,27,2.353,28,1.818,29,1.586,31,2.735,38,1.586,59,0.021,60,0.078,68,1.449,71,1.493,72,2.039,75,4.94,76,1.259,77,3.065,85,1.712,102,1.516,119,2.286,123,1.83,208,1.851,239,0.002,240,0.002,288,0.755,292,0.384,294,1.589,295,0.988,296,0.741,298,1.684,334,1.649,335,1.227,391,2.764,393,2.039,394,1.416,395,1.33,430,4.621,432,1.66,439,1.486,504,0.588,512,0.891,520,0.318,523,1.236,525,0.513,527,0.618,529,0.826,542,3.339,544,3.951,545,3.245,546,1.862,547,5.723,551,3.19,554,2.909,557,3.868,577,2.437,580,2.353,583,1.818,608,1.586,609,1.858,610,1.011,611,3.4,612,2.493,613,3.819,614,3.212,615,3.17,616,0.826,636,0.94,642,0.778,644,3.248,645,3.11,656,2.142,662,1.111,769,4.921,770,2.092,775,4.238,776,1.05,777,1.072,784,0.802,955,4.348,957,4.932,961,0.895,988,0.767,989,1.027,1195,5.992,1197,1.416,1214,2.377,1215,1.011,1216,1.05,1217,2.155,1218,1.05,1239,4.627,1794,2.759,2139,2.759,2245,3.517,2377,1.586,2448,5.867,2452,1.05,2565,5.235,2590,2.013,2717,3.541,2728,4.079,2730,1.75,2733,4.94,2736,2.013,2760,4.101,2761,1.197,2769,1.862,2772,2.013,2776,4.079,2825,1.75,2833,1.862,2848,1.75,2851,1.862,2931,6.581,3129,1.66,3534,1.862,3716,2.436,4296,1.416,4541,2.013,4561,1.862,4566,1.75,4574,1.862,4816,2.909,4817,2.013,4818,5.989,4819,5.569,4820,5.569,4821,4.78,4822,6.181,4823,5.569,4824,6.181,4825,6.669,4826,5.569,4827,6.181,4828,6.181,4829,6.181,4830,6.181,4831,2.242,4832,5.569,4833,5.569,4834,2.242,4835,2.242,4836,2.242,4837,2.242,4838,5.989,4839,2.242,4840,3.346,4841,3.725,4842,5.001,4843,2.242,4844,2.242,4845,2.242,4846,2.242,4847,2.242,4848,2.242,4849,2.242,4850,2.242,4851,2.242,4852,2.242,4853,2.242,4854,2.242,4855,2.242,4856,2.242,4857,2.242,4858,4.293,4859,2.242,4860,2.242,4861,2.242,4862,2.242,4863,2.242,4864,2.242,4865,2.242,4866,2.242,4867,2.242,4868,2.242,4869,2.242,4870,2.242,4871,2.242,4872,2.242,4873,2.242,4874,2.242,4875,2.242,4876,3.725,4877,2.242,4878,2.242,4879,2.242,4880,3.725,4881,3.725,4882,2.013,4883,3.381,4884,2.013,4885,2.242,4886,2.013,4887,2.013,4888,2.242,4889,2.242,4890,2.242,4891,2.242,4892,3.725,4893,2.242,4894,2.242,4895,2.242,4896,2.242,4897,2.242,4898,2.242,4899,2.242,4900,2.242,4901,2.242,4902,3.725,4903,2.242,4904,2.242,4905,2.242,4906,2.242,4907,2.242,4908,2.242,4909,2.242,4910,2.242,4911,2.242,4912,2.242,4913,2.242,4914,2.242,4915,2.242,4916,2.242,4917,2.242,4918,2.242,4919,3.725,4920,2.242,4921,2.242,4922,2.242,4923,2.242,4924,2.242,4925,2.242,4926,2.242,4927,2.242,4928,2.242]],["title/modules/UserListModule.html",[241,1.291,282,3.741]],["body/modules/UserListModule.html",[3,0.049,4,0.049,5,0.044,6,2.247,7,3.743,8,4.195,15,0.005,16,0.099,19,0.762,24,1.685,27,4.76,28,4.112,29,4.05,30,4.76,31,2.534,32,4.47,42,5.116,43,4.47,44,5.884,47,5.116,48,4.47,59,0.055,60,0.198,61,6.947,64,1.73,197,2.488,208,1.667,239,0.003,240,0.003,241,1.927,242,5.842,243,2.143,244,2.957,249,2.957,250,2.211,251,2.176,254,3.108,255,3.217,282,7.659,283,5.668,287,3.161,302,2.683,334,3.335,335,3.133,359,3.886,387,4.124,388,3.398,389,3.398,393,4.124,394,3.616,395,3.398,430,4.927,432,4.241,527,2.078,2498,4.05,2499,4.05,4816,6.578,4883,7.239,4884,5.142,4929,5.142,4930,5.725,4931,5.142,4932,5.142,4933,5.725,4934,6.578,4935,5.725,4936,5.142,4937,5.725,4938,5.142]],["title/classes/UserListMostActiveContributorsDto.html",[35,3.573,60,0.175]],["body/classes/UserListMostActiveContributorsDto.html",[3,0.043,4,0.043,5,0.039,6,3.099,10,0.189,11,0.994,13,0.955,14,0.394,15,0.005,16,0.075,33,7.358,34,6.981,35,4.892,37,5.138,59,0.075,60,0.239,78,3.39,93,2.473,100,2.714,102,1.883,109,6.166,117,2.496,119,2.423,138,6.166,141,2.316,143,3.566,182,5.123,187,3.132,239,0.003,240,0.003,292,0.435,296,0.926,504,2.648,508,1.256,512,1.01,520,0.715,522,1.503,816,2.23,870,1.523,933,2.316,988,1.724,989,1.39,1040,2.401,1043,3.178,1044,2.367,1052,4.756,1073,4.988,1074,3.785,1075,3.606,1077,3.582,1079,4.216,1080,4.756,1084,2.568,1085,3.525,1086,2.512,1087,2.69,1088,2.907,1089,3.938,1090,2.568,1091,2.757,1092,2.829,1093,2.568,1094,2.829,1095,3.061,1096,2.627,1097,2.757,1098,2.757,1099,3.525,1100,2.829,1101,2.568,1102,2.829,1103,3.495,1104,2.991,1105,3.371,1106,4.903,1158,3.883,1160,4.695,1187,4.525,1190,4.525,2567,3.934,4939,6.562,4940,5.039,4941,7.897,4942,5.039,4943,5.039,4944,6.211,4945,5.039]],["title/injectables/UserListService.html",[17,0.885,4883,3.573]],["body/injectables/UserListService.html",[3,0.023,4,0.023,5,0.021,6,3.687,7,6.144,8,3.718,10,0.1,13,0.978,14,0.352,15,0.005,16,0.089,17,0.755,18,2.534,19,0.356,20,2.76,21,4.073,22,0.613,23,1.068,24,0.788,25,0.904,26,0.972,27,1.692,28,2.104,29,1.895,31,3.211,38,1.895,59,0.026,60,0.093,62,1.173,63,2.226,64,1.873,65,1.78,66,4.493,67,2.645,68,2.251,69,3.4,70,3.581,71,1.739,72,2.086,75,6.679,76,1.257,77,2.916,78,1.719,82,3.741,83,2.693,85,2.485,86,2.226,90,1.818,93,0.958,94,1.692,99,2.558,100,1.691,101,1.895,102,1.687,119,2.33,123,1.758,125,1.307,143,1.808,157,1.692,197,1.164,208,0.499,209,2.226,213,2.722,214,2.818,225,1.984,235,2.959,239,0.002,240,0.002,248,4.073,288,0.873,292,0.43,294,1.738,295,0.967,296,0.811,298,1.87,334,1.185,335,1.466,387,1.466,388,1.59,389,1.59,393,1.466,394,1.692,395,1.59,404,3.158,430,3.536,432,1.984,449,3.391,551,3.421,656,1.895,659,3.308,689,1.895,773,2.137,777,1.281,788,2.355,796,0.854,907,1.751,988,1.475,989,1.189,990,1.692,995,3.416,997,3.698,998,2.149,1067,1.466,1073,1.692,1115,4.856,1121,3.671,1126,1.751,1127,1.895,1135,2.405,1142,2.226,1149,2.405,1161,2.091,1165,1.984,1195,4.383,1197,1.692,1599,3.119,1785,2.055,2139,3.192,2245,3.914,2270,4.856,2381,1.365,2506,2.722,2524,2.722,2565,5.374,2717,1.984,2828,2.405,2829,2.091,2838,1.895,2962,3.049,2971,3.365,3289,3.192,3412,2.091,3425,2.405,3439,2.405,3534,2.226,3680,4.493,4566,2.091,4604,3.87,4613,4.856,4628,3.87,4643,2.405,4645,2.405,4652,2.405,4838,5.565,4840,3.87,4858,3.87,4882,2.405,4883,3.049,4886,2.405,4946,2.405,4947,4.31,4948,4.31,4949,6.197,4950,6.197,4951,4.31,4952,4.31,4953,4.31,4954,5.408,4955,4.31,4956,5.408,4957,4.31,4958,2.678,4959,2.678,4960,4.31,4961,4.31,4962,2.678,4963,4.31,4964,2.678,4965,2.678,4966,2.678,4967,2.678,4968,4.31,4969,2.678,4970,4.31,4971,2.678,4972,2.678,4973,2.678,4974,4.31,4975,2.678,4976,2.678,4977,2.678,4978,2.678,4979,2.678,4980,2.678,4981,4.31,4982,2.678,4983,2.678,4984,4.31,4985,2.678,4986,2.678,4987,2.678,4988,2.678,4989,4.31,4990,4.31,4991,4.31,4992,2.678,4993,2.678,4994,2.678,4995,2.678,4996,2.678,4997,2.678,4998,2.678,4999,2.678,5000,2.678,5001,2.678,5002,2.678,5003,2.678,5004,5.408,5005,4.31,5006,2.678,5007,2.678,5008,2.678,5009,2.678,5010,2.678,5011,2.678,5012,2.678,5013,2.678,5014,2.678,5015,2.678,5016,2.678,5017,2.678,5018,2.678,5019,4.31,5020,2.678,5021,2.678,5022,2.678,5023,2.678,5024,2.678,5025,2.678,5026,2.678,5027,2.678,5028,2.678,5029,2.678]],["title/controllers/UserListStatsController.html",[525,1.156,4934,3.944]],["body/controllers/UserListStatsController.html",[3,0.03,4,0.03,5,0.027,6,3.179,7,5.297,8,4.429,10,0.13,14,0.4,15,0.005,16,0.09,19,0.464,25,1.175,26,1.265,28,1.701,30,4.045,31,3.585,32,2.72,35,5.06,36,2.895,37,4.857,38,2.465,39,5.956,40,4.399,41,2.895,42,3.594,43,4.134,44,4.134,45,3.745,46,2.895,47,3.594,48,2.72,54,5.06,55,2.895,56,5.06,57,2.72,58,2.895,59,0.033,60,0.12,61,4.347,71,1.45,72,1.976,74,5.172,76,1.277,77,2.931,78,2.112,119,1.617,195,6.179,208,0.649,239,0.002,240,0.002,288,1.073,292,0.355,294,1.504,295,0.987,296,0.701,298,1.559,391,2.559,409,2.897,456,1.689,504,0.913,512,0.825,520,0.494,523,1.206,525,0.797,527,0.961,529,1.284,542,3.193,547,5.543,613,3.723,614,3.285,615,3.032,616,1.284,642,1.21,645,2.879,656,2.231,769,4.839,775,4.225,784,1.246,907,5.673,957,4.246,961,1.272,1214,3.458,1215,1.571,1216,1.633,1217,1.571,1218,1.633,1239,7.53,1423,5.442,1768,4.134,2452,1.633,2733,5.699,2760,4.326,2776,4.706,3464,4.134,3476,4.755,4296,2.201,4818,4.755,4842,3.129,4887,3.129,4934,4.134,4936,3.129,5030,3.129,5031,7.694,5032,8.677,5033,7.694,5034,7.694,5035,3.484,5036,6.404,5037,3.484,5038,6.404,5039,3.484,5040,3.484,5041,3.484,5042,3.484,5043,5.295,5044,7.154,5045,5.295,5046,5.295,5047,5.295,5048,5.295,5049,3.484,5050,6.404,5051,3.484,5052,3.484,5053,3.484,5054,3.484,5055,3.484,5056,3.484,5057,5.295,5058,3.484,5059,5.295,5060,3.484,5061,3.484,5062,3.484,5063,3.484,5064,3.484,5065,3.484,5066,3.484,5067,3.484,5068,3.484,5069,6.404,5070,6.404,5071,3.484,5072,3.484,5073,3.484,5074,3.484,5075,3.484]],["title/injectables/UserListStatsService.html",[17,0.885,61,3.429]],["body/injectables/UserListStatsService.html",[0,1.323,1,3.598,3,0.02,4,0.02,5,0.018,6,3.401,7,5.666,8,4.22,9,1.905,10,0.086,12,2.059,13,0.942,14,0.331,15,0.005,16,0.084,17,0.665,18,1.074,19,0.305,20,1.753,21,4.468,22,0.525,23,0.914,24,0.675,25,0.773,26,0.832,27,1.448,28,1.853,29,1.622,30,2.398,31,1.015,32,1.79,33,1.79,34,1.698,35,3.436,36,1.905,37,2.19,38,1.622,39,5.05,40,4.692,41,1.905,42,1.556,43,2.964,44,2.964,45,2.685,46,1.905,47,1.556,48,1.79,49,1.698,50,4.362,51,2.059,52,1.698,53,2.059,54,3.995,55,1.905,56,3.995,57,1.79,58,1.905,59,0.022,60,0.079,61,2.577,62,1.034,63,1.905,64,0.693,65,2.093,66,3.154,67,2.411,68,2.302,69,1.779,70,1.905,71,1.271,72,1.866,73,4.362,74,4.239,75,7.047,76,1.248,77,2.648,78,4.079,79,5.072,80,2.482,81,2.059,82,3.393,83,2.93,84,2.059,85,3.845,86,5.603,87,4.036,88,1.935,89,3.409,90,3.297,91,2.944,92,4.036,93,2.238,94,4.893,95,4.036,96,6.956,97,1.905,98,3.133,99,5.143,100,3.401,101,1.622,102,1.944,103,2.059,104,3.154,105,2.059,106,2.812,107,2.059,108,5.283,109,2.964,110,5.647,111,3.409,112,2.059,113,3.409,114,2.059,115,3.409,116,2.059,117,1.64,118,2.027,119,1.226,120,2.059,121,2.059,122,1.429,123,1.62,124,2.059,125,1.853,126,2.059,127,4.362,128,6.412,129,2.059,130,4.362,131,3.409,132,3.409,133,3.409,134,3.409,135,2.059,136,3.409,137,4.362,138,4.886,139,2.059,140,2.059,141,2.232,142,3.409,143,3.133,144,1.99,145,2.059,146,2.059,147,1.698,148,1.698,149,1.402,150,1.698,151,2.059,152,2.059,153,3.409,154,2.059,155,5.072,156,2.059,157,5.747,158,2.059,159,2.059,160,6.048,161,5.919,162,2.059,163,2.059,164,2.059,165,4.362,166,2.059,167,2.059,168,2.059,169,2.059,170,4.362,171,2.059,172,2.059,173,2.059,174,2.059,175,4.362,176,2.059,177,1.79,178,1.79,179,2.059,180,2.059,181,2.059,182,1.698,183,4.362,184,2.059,185,2.059,186,2.059,187,0.845,188,1.905,189,2.059,190,1.622,191,1.905,192,1.905,193,1.034,194,2.059,195,1.499,196,2.059,197,0.996,198,1.224,199,1.499,200,2.059,201,1.323,202,3.154,203,1.565,204,1.698,205,2.059,206,1.905,207,2.059,208,0.427,209,1.905,210,3.154,211,2.059,212,2.059,213,1.448,214,1.499,215,2.059,216,2.059,217,2.059,218,2.059,219,2.059,220,2.059,221,2.059,222,6.412,223,2.059,224,1.905,225,1.698,226,4.362,227,5.265,228,5.603,229,4.995,230,4.362,231,4.362,232,4.362,233,4.362,234,4.362,235,3.69,236,4.362,237,4.362,238,4.362,239,0.002,240,0.002,288,0.769,292,0.394,294,1.636,295,0.897,296,0.763,298,1.696,299,3.436,796,0.731,1077,2.147,5076,3.796,5077,3.796,5078,3.796,5079,3.796,5080,2.293,5081,2.293,5082,2.293,5083,2.293,5084,2.293,5085,2.293,5086,2.293,5087,2.293,5088,2.293,5089,2.293,5090,2.293,5091,2.293,5092,2.293,5093,2.293,5094,2.293,5095,2.293,5096,2.293,5097,2.293,5098,2.293,5099,2.293,5100,2.293,5101,2.293,5102,2.293,5103,2.293]],["title/modules/UserModule.html",[241,1.291,283,2.998]],["body/modules/UserModule.html",[3,0.036,4,0.036,5,0.032,15,0.005,16,0.1,19,0.558,24,1.235,28,4.366,59,0.04,60,0.145,64,1.268,197,1.824,208,1.824,239,0.003,240,0.003,241,1.554,242,5.304,243,1.57,244,2.385,249,2.385,250,1.62,251,1.595,254,2.507,255,2.595,275,5.886,276,5.147,283,6.259,287,2.55,302,1.966,330,2.848,332,2.741,333,2.24,334,2.69,348,2.139,366,3.608,367,3.768,385,2.296,386,3.487,393,3.326,395,2.49,397,3.974,398,3.108,403,3.608,404,2.139,405,2.744,408,4.502,409,2.296,410,4.126,411,3.276,412,4.126,413,3.276,414,4.126,415,3.276,417,3.839,418,3.487,430,3.974,431,2.968,432,3.108,527,1.676,618,5.183,2171,2.65,2453,6.347,2498,2.968,2499,2.968,2500,3.768,2762,6.347,2764,3.276,2793,3.768,3276,5.477,3290,2.968,3291,3.108,3477,5.312,3478,2.744,4160,6.423,4264,5.58,4291,2.65,4292,6.134,4293,3.768,4335,6.118,4380,6.867,4381,3.768,4400,5.58,4411,3.768,4419,6.347,4427,5.67,4443,3.276,4463,5.58,4470,3.276,4474,5.58,4515,6.118,4938,3.768,5104,3.768,5105,4.196,5106,3.768,5107,3.768,5108,4.196,5109,5.58,5110,5.58,5111,4.196,5112,4.196,5113,4.196,5114,4.196,5115,4.196,5116,4.196,5117,4.196]],["title/controllers/UserNotificationController.html",[525,1.156,5109,3.944]],["body/controllers/UserNotificationController.html",[3,0.054,4,0.054,5,0.048,10,0.234,13,0.941,14,0.316,15,0.005,16,0.096,19,0.83,25,2.105,26,2.265,28,3.045,59,0.06,60,0.216,71,1.176,72,1.801,77,2.577,119,2.54,208,1.723,239,0.004,240,0.004,288,1.615,292,0.288,294,1.22,295,0.669,296,0.569,298,1.265,410,4.235,411,4.871,512,0.669,520,0.885,523,0.83,525,1.428,527,1.721,529,2.299,542,2.808,544,4.255,545,4.235,547,4.874,551,3.259,610,2.813,611,3.662,613,3.662,614,3.231,615,2.982,616,2.299,636,2.617,642,2.166,644,2.867,645,2.335,776,2.924,784,2.231,988,2.135,989,1.721,1214,3.402,2304,5.184,2377,4.414,2448,5.902,2761,3.331,4265,4.474,4296,3.941,4427,5.74,4443,4.871,4537,5.603,4565,5.603,4682,8.307,5109,6.221,5118,5.603,5119,6.239,5120,9.558,5121,6.239,5122,6.239,5123,6.239,5124,6.239,5125,6.239]],["title/injectables/UserNotificationService.html",[17,0.885,4427,3.303]],["body/injectables/UserNotificationService.html",[3,0.036,4,0.036,5,0.032,10,0.155,13,1.119,14,0.379,15,0.005,16,0.089,17,1.054,19,0.55,20,2.415,21,3.784,22,0.946,23,1.649,24,1.217,25,1.395,26,1.501,28,2.935,59,0.039,60,0.143,62,1.637,64,1.249,65,1.576,67,3.322,68,2.215,69,2.818,71,1.626,72,2.07,82,2.438,83,1.796,85,1.9,102,2.251,118,3.21,119,2.303,122,1.769,123,2.305,125,3.798,144,2.119,214,2.703,239,0.003,240,0.003,288,1.219,292,0.422,294,1.74,295,0.954,296,0.812,298,1.804,404,3.065,410,2.806,411,3.228,551,3.373,580,2.611,618,4.754,656,0.912,659,4.334,714,5.533,773,2.601,796,1.319,850,4.489,988,2.058,989,1.14,994,2.806,1067,2.262,1146,2.806,1147,2.528,1148,2.528,1599,2.385,1692,2.703,1785,2.958,2240,3.435,2300,3.712,2301,6.988,2302,6.988,2303,3.712,2304,3.435,2311,2.924,2322,5.764,2325,3.712,2962,4.253,4265,5.222,4291,2.611,4427,3.931,4431,6.988,4534,7.168,4619,8.193,5126,3.712,5127,6.013,5128,6.013,5129,6.013,5130,6.013,5131,6.013,5132,4.134,5133,4.134,5134,6.013,5135,6.013,5136,4.134,5137,6.013,5138,4.134,5139,6.013,5140,4.134,5141,6.013,5142,4.134,5143,4.134,5144,4.134,5145,5.4,5146,4.134,5147,6.013,5148,4.134,5149,6.013,5150,4.134,5151,4.134,5152,4.134,5153,4.134,5154,3.712,5155,4.134,5156,4.134,5157,4.134,5158,4.134,5159,4.134,5160,4.134,5161,4.134,5162,4.134,5163,4.134,5164,4.134,5165,4.134,5166,4.134,5167,4.134,5168,7.087,5169,7.087,5170,4.134,5171,7.781,5172,4.134,5173,4.134,5174,4.134,5175,4.134,5176,4.134]],["title/classes/UserOnboardingDto.html",[60,0.175,578,3.944]],["body/classes/UserOnboardingDto.html",[3,0.058,4,0.058,5,0.052,10,0.254,11,1.208,14,0.396,15,0.005,16,0.08,59,0.065,60,0.291,76,1.291,208,1.565,239,0.004,240,0.004,292,0.388,439,3.352,508,1.693,512,0.901,513,3.194,516,1.98,519,3.364,520,0.964,521,3.245,522,2.025,523,1.118,578,6.561,600,7.26,662,2.978,689,6.933,958,4.719,960,4.655,1922,4.44,2262,5.03,2601,7.446,4261,5.642,4263,5.302,5177,8.196,5178,6.098,5179,6.791,5180,6.791,5181,6.791]],["title/injectables/UserOrganizationService.html",[17,0.885,4380,3.573]],["body/injectables/UserOrganizationService.html",[3,0.052,4,0.052,5,0.047,10,0.227,13,0.928,14,0.309,15,0.005,16,0.094,17,1.369,19,0.805,20,2.839,21,4.62,22,1.385,23,2.413,24,1.781,25,2.042,26,2.197,28,2.954,59,0.058,60,0.209,62,2.127,64,1.829,65,1.586,67,3.904,68,2.22,69,3.662,71,1.473,72,1.775,82,3.168,83,2.63,102,2.127,118,4.172,119,2.524,122,1.781,123,2.023,125,4.464,208,1.127,239,0.003,240,0.003,288,1.584,292,0.4,294,1.527,295,0.838,296,0.712,298,1.584,414,4.108,415,4.725,551,3.049,773,1.904,796,1.93,988,2.674,989,1.669,994,4.108,1067,3.311,1146,4.108,1147,3.701,1148,3.701,1599,3.491,2332,5.434,2962,5.527,4265,5.135,4380,5.527,5145,7.017,5154,5.434,5182,5.434,5183,6.051,5184,6.051,5185,7.814,5186,6.051,5187,6.051,5188,6.051,5189,6.051,5190,6.051,5191,6.051,5192,6.051]],["title/controllers/UserRecommendationController.html",[525,1.156,5110,3.944]],["body/controllers/UserRecommendationController.html",[3,0.048,4,0.048,5,0.043,10,0.208,13,1.015,14,0.35,15,0.005,16,0.095,19,0.74,59,0.053,60,0.192,65,1.457,68,1.733,71,1.393,72,1.943,119,2.478,123,1.439,203,3.649,208,1.648,239,0.003,240,0.003,288,1.498,292,0.341,294,1.444,295,0.792,296,0.674,298,1.498,332,3.743,333,2.968,504,1.937,512,0.792,520,0.789,525,1.272,527,1.533,529,2.048,542,3.118,544,4.724,551,3.246,600,4.117,610,2.506,611,3.815,614,3.366,615,3.107,616,2.048,618,4.433,636,2.332,642,1.93,644,3.396,645,2.766,714,4.339,773,2.325,776,2.605,784,1.988,918,5.227,988,1.902,989,1.533,1214,3.155,1215,2.506,1216,2.605,1217,2.506,1218,2.605,2378,6.006,2761,2.968,3477,4.543,3478,3.634,3516,5.016,4265,4.662,4291,3.511,4296,3.511,4350,4.991,5110,5.77,5193,4.991,5194,5.558,5195,8.848,5196,8.848,5197,5.558,5198,5.558,5199,8.848,5200,5.558,5201,7.39,5202,5.558,5203,5.558,5204,5.558,5205,5.558,5206,5.558,5207,5.558,5208,5.558,5209,5.558,5210,5.558,5211,5.558,5212,5.558,5213,5.558,5214,5.558,5215,5.558]],["title/classes/UserRepoOptionsDto.html",[60,0.175,5216,3.429]],["body/classes/UserRepoOptionsDto.html",[3,0.052,4,0.052,5,0.047,6,2.378,10,0.227,11,1.124,13,1.015,14,0.4,15,0.005,16,0.058,59,0.058,60,0.21,78,3.65,93,2.797,100,3.069,117,2.479,119,2.525,141,2.786,143,3.839,187,3.372,239,0.003,240,0.003,292,0.438,296,0.929,504,2.671,508,1.511,512,1.015,742,1.65,816,2.683,870,1.832,933,2.786,988,2.074,989,1.672,1040,2.716,1043,3.595,1044,2.677,1052,5.058,1072,3.317,1074,4.28,1075,4.079,1077,3.601,1079,3.236,1080,3.236,1084,3.09,1085,3.987,1086,3.022,1087,3.236,1088,3.497,1089,4.318,1090,3.09,1091,3.317,1092,3.403,1093,3.09,1094,3.403,1095,3.462,1096,3.161,1097,3.317,1098,3.317,1099,3.987,1100,3.403,1101,3.09,1102,3.403,3845,4.49,5216,5.31]],["title/classes/UserRepoOptionsDto-1.html",[60,0.145,187,1.549,5216,2.852]],["body/classes/UserRepoOptionsDto-1.html",[3,0.059,4,0.059,5,0.052,6,3.309,10,0.256,11,1.212,13,0.904,14,0.378,15,0.005,16,0.087,59,0.08,60,0.316,203,3.478,208,1.272,235,3.737,239,0.004,240,0.004,292,0.316,338,5.158,339,4.831,439,3.649,504,2.399,508,1.703,512,0.732,513,2.596,516,1.9,519,3.372,520,0.969,522,2.036,523,1.122,581,7.007,742,1.859,747,4.116,754,5.514,873,3.737,959,7.144,960,4.664,961,2.026,1105,3.6,1584,3.646,2728,5.158,3831,6.584,3836,5.058,3845,6.247,4261,5.674,5216,5.725,5217,5.674,5218,6.829,5219,6.133]],["title/modules/UserReposModule.html",[241,1.291,284,3.573]],["body/modules/UserReposModule.html",[3,0.06,4,0.06,5,0.054,6,2.737,15,0.005,16,0.094,19,0.928,24,2.052,59,0.067,60,0.241,64,2.107,208,1.591,239,0.004,240,0.004,241,2.184,242,6.147,243,2.61,244,3.352,249,3.352,250,2.693,251,2.651,254,3.523,255,3.647,284,7.325,287,3.584,302,3.268,348,3.555,370,4.933,372,4.933,2498,4.933,2499,4.933,5220,6.263,5221,6.263,5222,6.263,5223,6.974,5224,7.788,5225,6.974,5226,6.974,5227,6.974]],["title/injectables/UserReposService.html",[17,0.885,5224,3.741]],["body/injectables/UserReposService.html",[3,0.045,4,0.045,5,0.04,6,3.657,10,0.197,13,0.999,14,0.343,15,0.005,16,0.092,17,1.248,18,3.337,19,0.7,20,2.686,21,4.311,22,1.203,23,2.097,24,1.548,25,1.774,26,1.909,59,0.05,60,0.182,62,1.939,64,1.589,65,1.867,67,3.694,68,2.12,69,3.337,71,1.631,72,2.016,76,1.02,77,2.798,82,3.274,83,2.285,102,1.432,119,1.798,123,1.361,193,2.371,208,0.979,235,2.878,239,0.003,240,0.003,248,5.089,288,1.443,292,0.418,294,1.691,295,0.927,296,0.789,298,1.754,348,2.68,370,6.593,372,5.037,551,3.358,638,4.723,656,1.781,742,2.356,773,1.655,788,1.999,796,1.678,989,1.45,990,3.322,995,3.322,996,4.106,997,4.115,998,2.622,1382,5.657,1384,3.57,1385,4.37,1388,3.322,1785,1.999,2506,4.498,2524,4.498,2945,4.37,2946,4.723,2962,5.037,2971,5.559,5216,5.873,5224,5.274,5228,4.723,5229,7.121,5230,5.259,5231,5.259,5232,7.121,5233,7.121,5234,5.259,5235,5.259,5236,5.259,5237,5.259,5238,5.259,5239,7.121,5240,5.259,5241,5.259,5242,5.259,5243,5.259]],["title/modules/VoteModule.html",[241,1.291,285,3.741]],["body/modules/VoteModule.html",[3,0.059,4,0.059,5,0.052,15,0.005,16,0.097,19,0.909,24,2.01,59,0.065,60,0.236,64,2.064,239,0.004,240,0.004,241,2.156,243,2.556,244,3.309,249,3.309,250,2.637,251,2.596,254,3.478,255,3.6,276,5.935,285,7.643,287,3.538,302,3.2,330,4.636,332,3.079,333,3.646,338,5.158,339,4.831,527,2.326,742,1.859,1037,4.831,3811,7.144,3847,7.418,3848,6.133,5244,6.133,5245,6.133,5246,6.829,5247,6.133,5248,6.829,5249,6.829]],["title/injectables/VoteService.html",[17,0.885,3847,3.573]],["body/injectables/VoteService.html",[3,0.042,4,0.042,5,0.038,10,0.184,13,1.123,14,0.35,15,0.005,16,0.08,17,1.192,18,2.303,19,0.654,20,2.611,22,1.125,23,1.96,24,1.447,59,0.047,60,0.17,62,1.851,64,1.485,65,2.205,67,3.59,68,2.07,69,3.186,71,1.798,72,2.049,77,2.72,80,6.121,82,2.757,83,2.136,102,2.122,123,2.286,193,2.216,235,3.721,239,0.003,240,0.003,288,1.378,292,0.422,294,1.726,295,0.946,296,0.805,298,1.789,338,3.007,339,3.477,439,1.96,456,2.169,551,3.633,742,1.851,773,2.139,788,2.963,796,1.568,873,4.266,998,2.451,1785,1.868,2081,4.084,3703,3.922,3704,3.477,3817,6.106,3831,6.893,3833,6.106,3847,4.809,3878,3.105,3885,4.615,3888,3.641,5250,4.414,5251,6.799,5252,6.799,5253,6.799,5254,4.915,5255,4.915,5256,6.799,5257,4.915,5258,6.799,5259,4.915,5260,4.915,5261,6.799,5262,4.915,5263,6.799,5264,4.915,5265,4.915,5266,4.915,5267,9.686,5268,7.795,5269,7.795,5270,4.915,5271,4.915,5272,4.915,5273,4.915,5274,4.915,5275,4.915]],["title/classes/VotedRepoDto.html",[60,0.175,3836,3.741]],["body/classes/VotedRepoDto.html",[3,0.058,4,0.058,5,0.052,6,3.56,10,0.251,11,1.198,13,0.718,14,0.387,15,0.005,16,0.087,59,0.08,60,0.314,203,2.764,208,1.552,235,4.562,239,0.004,240,0.004,292,0.385,338,5.55,339,4.741,439,3.325,504,1.757,508,1.671,512,0.894,513,2.548,516,1.884,519,3.344,520,0.951,522,1.999,523,1.109,581,5.569,742,2.27,747,4.634,754,5.45,873,4.965,959,5.233,960,4.429,961,1.61,1105,3.873,1584,3.579,2728,4.099,3831,7.623,3836,6.175,3845,6.721,5216,4.55,5217,5.569,5219,6.019,5276,6.702,5277,6.702,5278,6.702]],["title/coverage.html",[5279,5.756]],["body/coverage.html",[0,2.852,1,1.38,5,0.014,6,3.659,7,3.633,8,2.604,9,2.648,14,0.074,15,0.005,17,1.742,25,0.628,27,1.176,30,2.013,31,2.188,35,1.318,37,1.074,39,1.318,42,1.264,45,1.318,47,1.264,49,1.38,52,1.38,54,1.318,56,1.318,60,0.354,61,1.264,93,3.85,102,0.507,119,0.47,125,0.909,197,0.809,208,1.419,239,0.001,240,0.001,248,0.994,320,1.548,321,1.548,322,1.548,323,1.548,324,1.548,325,1.548,326,1.548,327,1.548,328,1.548,332,0.84,334,0.824,336,1.218,338,1.139,340,1.218,342,1.218,344,1.218,346,1.218,349,1.218,351,1.176,360,1.454,363,1.454,366,1.105,368,1.264,370,2.254,372,1.318,373,1.318,381,1.318,383,1.318,385,3.315,387,1.019,388,2.479,390,1.264,391,2.534,393,1.019,397,1.218,399,1.264,401,1.218,403,1.105,404,1.624,406,1.264,408,1.38,409,1.019,410,1.264,412,1.264,414,1.264,417,1.176,421,1.744,430,1.218,431,2.954,433,1.318,507,1.454,509,1.673,510,1.673,515,2.038,525,2.211,526,1.454,528,1.673,530,1.318,551,0.656,578,1.454,590,1.454,591,1.454,593,1.105,598,1.454,618,0.994,620,1.264,622,1.264,630,1.318,632,1.454,636,0.781,663,1.548,731,1.38,738,1.264,739,1.673,740,1.673,742,0.507,756,1.454,757,1.548,758,2.648,762,1.38,778,1.38,780,1.318,794,1.264,797,1.673,798,2.648,801,1.074,842,1.454,843,2.488,844,2.648,877,1.454,878,3.877,879,4.112,880,1.673,884,1.38,893,1.318,901,1.673,911,1.454,912,3.093,913,1.673,915,1.38,921,1.318,925,2.648,940,1.454,941,1.673,943,1.38,946,2.254,948,1.318,955,1.454,956,1.673,967,1.548,968,1.673,975,1.318,976,1.673,977,1.673,999,1.548,1000,1.673,1007,1.318,1008,1.673,1031,1.318,1033,1.454,1038,3.662,1039,1.673,1044,1.692,1047,1.38,1065,1.318,1070,1.38,1071,1.548,1072,4.279,1110,1.673,1126,1.218,1131,1.38,1166,1.673,1172,1.673,1186,1.673,1191,2.648,1192,2.648,1195,1.318,1201,1.454,1202,1.673,1205,1.38,1212,1.318,1215,0.84,1217,0.84,1219,1.176,1221,3.233,1228,1.454,1229,1.673,1230,1.673,1237,1.38,1271,1.38,1272,1.548,1273,1.548,1287,1.673,1303,2.101,1307,1.673,1308,2.648,1348,1.318,1349,1.673,1350,2.648,1375,1.38,1376,2.648,1377,2.648,1378,2.129,1382,1.218,1389,1.454,1390,2.648,1396,1.38,1397,1.673,1403,1.454,1404,1.673,1405,1.673,1410,1.454,1411,2.648,1412,2.648,1426,1.38,1427,1.673,1466,1.38,1467,1.673,1468,1.673,1477,1.318,1508,1.673,1528,1.673,1529,2.648,1570,1.673,1571,3.931,1583,0.731,1602,1.673,1610,1.673,1637,1.673,1683,2.648,1684,2.648,1703,1.673,1712,1.673,1717,1.673,1725,1.673,1733,1.673,1758,1.673,1773,1.454,1774,1.673,1775,2.648,1781,1.673,1816,2.648,1817,1.673,1851,1.673,1860,1.673,1886,1.673,1995,1.673,1999,1.673,2019,1.673,2020,1.673,2030,1.673,2047,1.673,2062,1.673,2080,1.673,2095,2.488,2096,1.673,2139,1.38,2140,1.673,2143,1.454,2144,1.673,2145,4.175,2146,1.673,2173,1.673,2211,1.673,2236,1.264,2237,2.648,2245,1.176,2250,1.38,2251,1.673,2253,1.673,2269,1.673,2284,1.673,2285,1.673,2292,1.673,2299,1.673,2322,1.38,2330,1.673,2350,1.673,2373,1.454,2374,1.673,2383,1.318,2396,1.673,2406,1.454,2407,1.673,2453,1.218,2458,1.38,2502,1.673,2548,1.548,2550,1.673,2551,1.673,2565,1.38,2566,1.673,2567,2.488,2604,1.318,2605,1.673,2618,1.454,2619,1.673,2620,3.261,2623,1.318,2627,1.454,2628,1.673,2629,1.38,2633,3.662,2634,1.673,2640,2.648,2646,1.38,2647,1.673,2666,1.454,2667,1.673,2715,1.454,2716,1.673,2762,1.218,2796,1.673,2805,1.548,2820,1.454,2821,1.673,2840,1.38,2844,1.176,2855,1.264,2856,2.648,2857,1.673,2902,1.548,2903,2.488,2914,1.318,2915,1.318,2916,1.673,2920,1.218,2953,1.454,2954,1.454,2960,1.673,2999,1.454,3000,2.488,3005,1.318,3031,1.673,3051,1.673,3054,3.261,3055,1.673,3069,1.673,3078,2.648,3081,1.454,3089,1.454,3090,2.488,3091,1.673,3176,1.673,3199,1.673,3203,1.454,3204,1.673,3222,1.38,3227,1.318,3228,1.318,3245,1.454,3246,1.673,3252,1.318,3256,1.673,3269,1.673,3276,1.176,3359,1.673,3369,1.673,3448,1.673,3449,1.673,3477,1.019,3495,1.454,3496,1.673,3499,1.139,3503,1.38,3524,1.548,3526,1.673,3558,3.093,3559,1.673,3586,1.673,3689,1.454,3690,1.673,3691,1.673,3724,1.318,3736,1.454,3737,1.673,3738,1.673,3763,1.318,3774,1.454,3775,1.673,3776,1.673,3801,1.318,3811,1.454,3812,1.673,3813,1.673,3836,1.38,3845,3.093,3847,1.318,3867,1.673,3896,1.673,3921,1.673,3953,1.318,3957,1.673,3971,1.38,3972,3.261,3975,2.648,3976,2.648,3987,1.548,3989,1.548,4062,1.673,4083,1.673,4084,1.673,4131,1.673,4134,1.673,4164,1.38,4167,1.673,4188,1.673,4189,1.673,4193,1.454,4194,1.673,4197,1.548,4198,1.673,4201,2.648,4205,1.454,4211,1.454,4212,3.662,4217,1.673,4251,1.673,4260,1.673,4264,1.454,4265,4.39,4266,1.673,4292,1.318,4312,1.673,4335,1.454,4336,1.673,4380,1.318,4400,1.454,4401,1.673,4419,1.218,4420,1.673,4427,1.218,4463,1.454,4464,1.673,4474,1.454,4475,1.673,4515,1.454,4516,1.673,4598,1.673,4709,2.648,4710,1.673,4770,1.673,4816,1.454,4817,1.673,4883,1.318,4934,1.454,4939,1.548,4946,1.673,5030,1.673,5109,1.454,5110,1.454,5118,1.673,5126,1.673,5177,1.673,5178,1.673,5182,1.673,5193,1.673,5216,2.163,5217,2.648,5224,1.38,5228,1.673,5250,1.673,5279,1.548,5280,1.454,5281,1.863,5282,6.058,5283,1.863,5284,8.932,5285,10.201,5286,9.149,5287,2.648,5288,8.848,5289,7.819,5290,9.376,5291,1.673,5292,1.673,5293,7.389,5294,7.617,5295,1.863,5296,1.863,5297,1.673,5298,1.673,5299,1.673,5300,1.673,5301,1.673,5302,1.673,5303,2.862,5304,1.673,5305,1.673,5306,2.862,5307,1.673,5308,1.673,5309,1.673,5310,1.673,5311,1.673,5312,1.673,5313,8.432,5314,5.557,5315,3.187,5316,1.673,5317,1.673,5318,1.673,5319,1.673,5320,1.863,5321,1.673,5322,4.176,5323,1.863,5324,1.863,5325,1.673,5326,3.187,5327,3.187,5328,1.548,5329,1.863,5330,1.863,5331,1.863,5332,1.863]],["title/miscellaneous/enumerations.html",[5333,2.747,5334,5.464]],["body/miscellaneous/enumerations.html",[6,2.005,10,0.191,15,0.005,31,3.09,33,5.452,34,5.172,37,5.457,102,1.901,182,5.172,203,2.88,239,0.003,240,0.003,295,0.749,391,2.646,409,3.821,420,2.613,652,3.626,653,4.09,878,2.181,957,4.144,1044,3.296,1049,4.566,1071,4.246,1072,5.407,1076,5.802,1077,4.091,1081,5.172,1089,3.482,1107,5.172,1108,5.802,1158,3.921,1160,4.74,1221,3.341,1240,6.845,1272,4.246,1273,5.802,1275,5.802,1599,4.028,1691,4.566,1748,4.246,1892,5.802,1900,5.802,1922,4.566,1985,5.802,2145,3.126,2322,5.172,2327,6.271,2352,4.74,2405,5.802,2567,6.211,2591,4.566,2608,4.411,2903,3.99,2909,5.802,2910,5.802,2911,5.802,2912,5.802,2913,5.802,3347,6.271,3353,6.271,3558,3.785,3573,6.271,3574,5.452,3575,6.271,3576,6.271,3577,5.802,3578,5.802,3579,5.802,3580,5.802,3581,5.802,4939,4.246,4944,6.271,5328,5.802,5333,3.341,5334,4.589,5335,5.11,5336,5.11,5337,5.11,5338,6.983,5339,6.983,5340,5.11,5341,6.983,5342,6.983,5343,4.589,5344,5.11,5345,4.589,5346,5.11,5347,4.589]],["title/miscellaneous/functions.html",[5333,2.747,5348,5.464]],["body/miscellaneous/functions.html",[10,0.307,15,0.004,239,0.004,240,0.004,5319,7.373,5321,8.885,5333,5.368,5348,7.373,5349,8.21]],["title/index.html",[10,0.157,5350,3.774,5351,3.491]],["body/index.html",[4,0.034,5,0.044,15,0.004,20,1.793,85,1.799,100,1.536,102,2.064,108,2.769,110,2.769,117,1.405,149,2.394,187,2.129,190,2.769,197,2.511,198,2.09,202,3.253,239,0.003,240,0.003,251,2.196,295,0.42,391,1.922,420,3.167,447,5.361,453,6.313,460,6.808,501,3.253,502,4.857,515,3.352,548,3.515,574,3.777,617,5.986,642,2.384,672,1.911,742,1.066,749,3.922,765,3.649,813,2.559,824,3.056,887,2.899,889,2.394,933,2.655,946,4.087,1061,2.559,1158,2.198,1174,3.922,1208,4.279,1374,3.056,1423,5.72,1438,2.394,1456,4.499,1649,3.253,1661,3.253,1692,3.777,1708,5.919,1713,3.515,1715,5.188,1740,2.899,1741,5.705,1806,2.769,1814,2.559,1909,3.056,1920,3.253,2157,7.599,2352,2.657,2570,2.769,2629,2.899,2728,3.534,2797,5.615,3767,3.056,3943,3.515,3983,3.253,3990,5.919,4095,6.607,4178,3.515,4215,3.515,4218,3.515,4263,3.056,4453,5.99,4512,6.167,5279,3.253,5280,3.056,5352,3.914,5353,7.581,5354,3.914,5355,5.188,5356,3.914,5357,3.914,5358,9.959,5359,6.867,5360,3.515,5361,3.914,5362,3.914,5363,7.599,5364,3.914,5365,3.914,5366,3.914,5367,3.914,5368,6.867,5369,5.777,5370,5.777,5371,6.867,5372,3.914,5373,3.914,5374,5.777,5375,4.8,5376,5.777,5377,5.777,5378,3.515,5379,3.515,5380,5.777,5381,3.914,5382,3.914,5383,3.914,5384,3.914,5385,3.914,5386,3.914,5387,3.914,5388,3.914,5389,3.914,5390,3.914,5391,3.914,5392,3.914,5393,9.672,5394,8.462,5395,3.914,5396,3.914,5397,3.914,5398,6.808,5399,3.914,5400,3.914,5401,3.914,5402,3.914,5403,3.914,5404,7.581,5405,5.777,5406,5.777,5407,5.777,5408,5.777,5409,5.777,5410,3.914,5411,3.914,5412,3.914,5413,3.914,5414,3.914,5415,3.914,5416,3.914,5417,3.914,5418,3.914,5419,3.914,5420,6.867,5421,8.462,5422,3.914,5423,3.914,5424,3.914,5425,3.515,5426,8.753,5427,5.777,5428,3.914,5429,5.777,5430,3.914,5431,3.914,5432,5.777,5433,6.867,5434,3.914,5435,3.914,5436,3.914,5437,3.914,5438,3.914,5439,3.515,5440,3.914,5441,3.914,5442,3.914,5443,3.914,5444,3.914,5445,3.914,5446,5.777,5447,3.914,5448,5.777,5449,3.914,5450,9.329,5451,3.914,5452,3.515,5453,3.515,5454,3.515,5455,3.914,5456,5.777,5457,3.914,5458,7.581,5459,3.914,5460,3.914,5461,5.777,5462,3.914,5463,3.914,5464,3.914,5465,3.914,5466,3.914,5467,3.914,5468,3.914,5469,3.914,5470,3.914,5471,5.777,5472,3.914,5473,3.914,5474,5.188,5475,3.914,5476,3.914,5477,3.914,5478,3.914,5479,3.914,5480,3.914,5481,3.914,5482,3.914,5483,5.777,5484,3.914,5485,5.777,5486,3.914,5487,6.167,5488,3.914,5489,3.914,5490,3.515,5491,5.777,5492,3.914,5493,3.914,5494,3.914,5495,3.914,5496,3.914,5497,3.914,5498,3.914,5499,3.914,5500,3.914,5501,3.914,5502,5.188,5503,3.914,5504,3.914,5505,3.914,5506,3.914,5507,3.515,5508,3.914,5509,7.581,5510,3.914,5511,3.914,5512,3.914,5513,5.777,5514,3.914,5515,5.777,5516,5.777,5517,3.914,5518,5.777,5519,3.914,5520,3.515,5521,3.914,5522,3.914,5523,3.914,5524,3.914,5525,3.914,5526,3.914,5527,3.914,5528,3.914,5529,3.914,5530,3.515,5531,3.914,5532,3.914,5533,3.914,5534,3.914,5535,3.914,5536,3.914,5537,3.515,5538,3.914,5539,3.914,5540,3.914,5541,3.914,5542,3.914,5543,3.914,5544,3.914,5545,5.777,5546,3.914,5547,3.914,5548,3.914,5549,3.914,5550,3.914,5551,2.899,5552,3.056]],["title/license.html",[5350,3.774,5351,3.491,5551,3.112]],["body/license.html",[15,0.004,239,0.004,240,0.004,251,2.616,420,2.575,815,6.18,889,4.209,1433,4.346,1456,4.084,1653,3.919,1660,5.372,1687,4.867,1920,5.717,2178,5.717,2362,5.717,2797,6.276,2804,6.18,3116,6.18,4040,6.18,4181,6.18,4453,5.097,5280,5.372,5360,9.279,5452,7.609,5520,7.609,5551,5.097,5552,5.372,5553,9.181,5554,6.881,5555,8.473,5556,6.881,5557,6.881,5558,6.881,5559,6.881,5560,6.881,5561,6.881,5562,6.881,5563,6.881,5564,6.881,5565,6.881,5566,6.881,5567,6.881,5568,6.881,5569,6.881,5570,8.473,5571,6.881,5572,6.881,5573,6.881,5574,6.881,5575,6.881,5576,6.881,5577,8.473,5578,8.473,5579,6.881,5580,6.881,5581,6.881,5582,6.881,5583,6.881,5584,6.881,5585,6.881,5586,6.881,5587,6.881,5588,6.881,5589,6.881,5590,6.881,5591,6.881,5592,6.881,5593,6.881,5594,6.881,5595,6.881,5596,6.881,5597,6.881,5598,6.881,5599,6.881,5600,6.881,5601,6.881,5602,6.881]],["title/modules.html",[243,2.593]],["body/modules.html",[15,0.004,239,0.004,240,0.004,242,3.764,243,2.303,257,4.805,260,4.353,261,4.559,262,4.559,263,4.559,264,4.353,265,4.178,266,4.559,267,4.559,268,4.559,269,4.559,270,4.559,271,4.559,272,4.559,273,4.024,274,4.353,275,4.178,276,3.653,277,4.559,278,4.559,279,4.353,280,4.559,281,4.559,282,4.559,283,3.653,284,4.353,285,4.559,730,4.353,3336,4.353,4160,4.559,5603,10.74,5604,10.74,5605,10.74,5606,10.749,5607,5.527,5608,5.527]],["title/overview.html",[5609,5.756]],["body/overview.html",[2,2.003,15,0.005,61,5.198,122,0.796,187,0.997,239,0.002,240,0.002,242,5.269,243,1.012,244,1.704,245,2.429,246,2.429,247,2.429,248,4.089,249,1.704,250,1.044,251,1.028,257,8.143,258,2.429,259,2.429,260,6.758,261,5.897,262,5.897,263,5.055,264,5.417,265,5.405,266,5.055,267,6.499,268,4.031,269,5.055,270,6.914,271,5.897,272,5.897,273,5.371,274,6.471,275,6.663,276,5.364,277,5.897,278,5.897,279,5.417,280,6.499,281,5.897,282,6.603,283,6.086,284,5.811,285,5.897,508,0.674,527,0.746,618,4.089,620,5.198,622,5.198,630,5.417,636,3.213,726,2.429,727,2.429,728,2.429,729,2.429,730,5.417,731,5.672,780,5.417,789,2.429,790,2.429,791,2.429,796,0.863,801,4.418,893,3.85,921,3.85,948,3.85,975,5.417,1007,5.417,1027,2.429,1028,2.429,1029,2.429,1031,5.417,1219,4.837,1280,2.429,1281,2.429,1282,2.429,1466,5.672,1477,3.85,1501,2.429,1502,2.429,1503,2.429,1928,2.429,2383,3.85,2391,2.429,2392,2.429,2453,5.512,2493,2.429,2494,2.429,2495,2.429,2548,2.247,2762,5.007,2844,4.837,2855,3.695,2915,5.417,2920,5.007,2948,2.429,2949,2.429,2951,2.429,3005,5.417,3010,2.429,3011,2.429,3012,2.429,3024,2.429,3025,2.429,3026,2.429,3044,2.429,3045,2.429,3046,2.429,3169,2.429,3170,2.429,3171,2.429,3227,3.85,3228,5.417,3252,3.85,3276,5.029,3332,2.429,3333,2.429,3334,2.429,3335,2.429,3336,5.417,3477,4.613,3521,2.429,3522,2.429,3523,2.429,3564,2.429,3566,2.429,3567,2.429,3724,5.417,3763,5.417,3801,5.417,3847,5.417,3861,2.429,3863,2.429,3864,2.429,3890,2.429,3891,2.429,3892,2.429,3916,2.429,3917,2.429,3918,2.429,3950,2.429,3951,2.429,3952,2.429,3953,5.417,3968,2.429,3969,2.429,3971,4.616,4056,2.429,4057,2.429,4058,2.429,4160,5.398,4161,2.429,4162,2.429,4163,2.429,4164,5.672,4292,3.85,4380,5.417,4419,5.007,4427,3.559,4883,5.417,4929,2.429,4931,2.429,4932,2.429,5104,2.429,5106,2.429,5107,2.429,5220,2.429,5221,2.429,5222,2.429,5224,5.672,5244,2.429,5245,2.429,5247,2.429,5609,2.247,5610,2.705,5611,2.705,5612,2.705,5613,2.705,5614,2.705]],["title/properties.html",[11,0.875,5615,4.202]],["body/properties.html",[11,1.084,15,0.005,20,2.341,239,0.004,240,0.004,311,5.586,420,3.352,523,1.004,617,5.335,744,6.634,971,5.119,1456,5.315,1680,6.266,1708,5.888,2507,5.119,5378,6.773,5551,5.586,5552,5.888,5607,6.773,5616,7.542,5617,7.542,5618,7.542,5619,7.542,5620,7.542,5621,7.542,5622,7.542,5623,7.542,5624,6.773,5625,7.542,5626,7.542,5627,7.542,5628,7.542,5629,7.542,5630,7.542,5631,7.542,5632,7.542,5633,7.542,5634,7.542,5635,7.542]],["title/miscellaneous/typealiases.html",[5333,2.747,5636,6.085]],["body/miscellaneous/typealiases.html",[10,0.307,14,0.325,15,0.004,239,0.004,240,0.004,5287,6.822,5333,5.368,5637,8.21,5638,9.411,5639,7.373]],["title/miscellaneous/variables.html",[5333,2.747,5375,5.056]],["body/miscellaneous/variables.html",[3,0.023,8,1.259,10,0.101,11,0.386,13,0.665,14,0.171,15,0.005,68,1.972,71,1.021,72,0.551,74,2.364,76,0.965,93,0.961,102,2.08,117,2.321,123,1.403,144,1.522,149,1.643,198,3.632,208,1.156,239,0.002,240,0.002,250,1.037,320,3.59,321,3.59,322,3.59,323,3.59,324,3.59,325,3.59,326,3.59,327,3.59,328,3.59,391,2.798,420,1.005,439,1.723,445,4.846,447,4.846,449,2.364,451,3.88,453,3.373,456,1.378,458,1.824,464,3.88,496,2.825,497,3.59,499,1.99,502,4.811,515,2.109,523,0.721,530,1.9,551,1.522,557,1.47,574,1.756,582,5.391,583,1.311,614,1.089,663,2.232,672,1.311,719,2.097,773,1.359,813,1.756,816,1.189,823,4.617,824,2.097,838,3.722,859,1.99,861,2.232,865,1.777,870,2.196,873,3.976,889,3.797,933,1.235,938,2.202,958,1.508,974,1.99,1043,3.126,1049,1.756,1056,2.232,1059,3.59,1061,4.059,1077,3.627,1126,2.825,1174,2.932,1183,3.543,1215,1.948,1217,1.948,1242,1.235,1364,3.59,1374,2.097,1423,1.9,1434,2.097,1456,2.564,1471,2.413,1551,1.037,1692,1.756,1708,6.201,1818,1.99,1879,2.413,1967,3.88,2106,2.932,2145,1.643,2182,2.413,2319,2.413,2322,3.2,2352,1.824,2362,3.59,2381,1.369,2441,2.232,2556,3.88,2584,2.232,2601,2.097,2629,1.99,2661,3.88,2688,2.413,2728,2.642,2797,1.99,2805,3.59,2808,2.413,3972,3.373,3975,2.232,3976,3.59,3987,3.59,3989,3.59,3990,2.097,3991,2.413,3992,2.413,3993,2.413,3994,2.413,4038,2.413,4095,2.097,4128,2.232,4208,1.99,4276,3.88,5280,2.097,5287,2.232,5291,2.413,5292,3.88,5297,2.413,5298,3.88,5299,2.413,5300,2.413,5301,3.88,5302,2.413,5303,3.88,5304,3.88,5305,3.88,5306,2.413,5307,4.866,5308,2.413,5309,2.413,5310,2.413,5311,2.413,5312,2.413,5316,2.413,5317,3.88,5318,3.88,5325,2.413,5328,3.59,5333,1.756,5343,2.413,5345,2.413,5347,2.413,5351,2.232,5355,3.88,5363,2.413,5375,2.232,5379,2.413,5398,2.413,5425,3.88,5439,3.88,5453,3.88,5454,2.413,5474,2.413,5487,3.88,5490,2.413,5502,4.866,5507,2.413,5530,2.413,5537,2.413,5551,1.99,5552,2.097,5608,2.413,5609,2.232,5624,2.413,5639,3.88,5640,2.686,5641,2.686,5642,2.686,5643,4.32,5644,4.32,5645,2.686,5646,2.686,5647,2.686,5648,2.686,5649,2.686,5650,2.686,5651,2.686,5652,2.686,5653,2.686,5654,2.686,5655,2.686,5656,2.686,5657,2.686,5658,4.32,5659,2.686,5660,2.686,5661,4.32,5662,2.686,5663,2.686,5664,2.686,5665,2.686,5666,2.686,5667,2.686,5668,2.686,5669,7.637,5670,2.686,5671,2.686,5672,2.686,5673,2.686,5674,2.686,5675,2.686,5676,2.686,5677,2.686,5678,2.686,5679,2.686,5680,2.686,5681,2.686,5682,2.686,5683,6.207,5684,2.686,5685,2.686,5686,2.686,5687,2.686,5688,2.686,5689,4.32,5690,2.686,5691,2.686,5692,4.32,5693,2.686,5694,2.686,5695,4.32,5696,2.686,5697,4.32,5698,2.686,5699,4.32,5700,4.32,5701,2.686,5702,2.686,5703,4.32,5704,2.686,5705,2.686,5706,2.686,5707,2.686,5708,2.686,5709,2.686,5710,2.686,5711,2.686,5712,2.686,5713,2.686,5714,2.686,5715,2.686,5716,2.686,5717,2.686,5718,2.686,5719,2.686,5720,2.686,5721,2.686,5722,4.32,5723,2.686,5724,2.686,5725,2.686,5726,2.686,5727,2.686,5728,2.686,5729,2.686,5730,4.32,5731,2.686,5732,2.686,5733,2.686,5734,2.686,5735,2.686,5736,2.686,5737,2.686,5738,2.686,5739,2.686,5740,2.686,5741,2.686,5742,2.686,5743,2.686,5744,2.686,5745,2.686,5746,2.686,5747,2.686,5748,2.686,5749,2.686,5750,2.686,5751,2.686,5752,2.686,5753,2.686,5754,2.686,5755,2.686,5756,2.686,5757,2.686,5758,2.686,5759,2.686,5760,2.686,5761,4.32,5762,4.32,5763,2.686,5764,2.686,5765,2.686,5766,2.686,5767,5.418,5768,2.686,5769,2.686,5770,2.686,5771,2.686,5772,2.686,5773,4.32,5774,2.686,5775,2.686,5776,4.32,5777,2.686,5778,2.686,5779,2.686,5780,2.686,5781,2.686,5782,2.686,5783,4.32,5784,2.686,5785,2.686,5786,2.686,5787,2.686,5788,2.686,5789,2.686,5790,2.686,5791,2.686,5792,2.686,5793,2.686,5794,2.686,5795,2.686,5796,2.686,5797,2.686,5798,2.686,5799,2.686,5800,2.686,5801,2.686,5802,2.686,5803,2.686,5804,2.686,5805,2.686,5806,2.686,5807,2.686,5808,2.686,5809,6.207,5810,2.686,5811,2.686,5812,4.32,5813,2.686,5814,2.686,5815,2.686,5816,2.686,5817,4.32,5818,6.802,5819,2.686,5820,4.32,5821,4.32,5822,4.32,5823,2.686,5824,2.686,5825,6.207,5826,2.686,5827,2.686,5828,2.686,5829,2.686,5830,2.686,5831,4.32,5832,2.686,5833,2.686,5834,5.418,5835,5.418,5836,4.32,5837,4.32,5838,2.686,5839,4.32,5840,2.686,5841,2.686,5842,4.32,5843,4.32,5844,4.32,5845,2.686,5846,2.686,5847,2.686,5848,2.686,5849,2.686,5850,2.686,5851,2.686,5852,2.686,5853,2.686,5854,2.686,5855,5.418,5856,2.686,5857,2.686,5858,2.686,5859,2.686,5860,2.686,5861,2.686,5862,2.686,5863,2.686,5864,2.686,5865,2.686,5866,2.686,5867,2.686,5868,2.686,5869,2.686,5870,2.686,5871,2.686,5872,2.686,5873,2.686,5874,2.686,5875,2.686,5876,2.686,5877,2.686,5878,6.207,5879,2.686,5880,2.686,5881,2.686,5882,2.686,5883,2.686,5884,2.686,5885,2.686,5886,2.686,5887,2.686,5888,2.686,5889,2.686,5890,2.686,5891,2.686,5892,2.686,5893,2.686,5894,2.686,5895,2.686,5896,2.686,5897,2.686,5898,2.686,5899,4.32,5900,4.32,5901,2.686,5902,2.686]]],"invertedIndex":[["",{"_index":15,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"modules/ApiServicesModule.html":{},"modules/AppModule.html":{},"classes/ApplyUserCouponDto.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"classes/BakeRepoDto.html":{},"controllers/BlogSummaryController.html":{},"modules/BlogSummaryModule.html":{},"injectables/BlogSummaryService.html":{},"interfaces/ChatResponse.html":{},"controllers/CodeExplanationController.html":{},"injectables/CodeExplanationService.html":{},"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"controllers/CodeTestSuggestionController.html":{},"injectables/CodeTestSuggestionService.html":{},"classes/CollaboratorsDto.html":{},"classes/CommitAuthorDto.html":{},"injectables/CommitAuthorsService.html":{},"classes/CommitsDto.html":{},"injectables/CommitsService.html":{},"modules/ContributionModule.html":{},"classes/ContributionPageMetaDto.html":{},"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"classes/ContributionsByProjectDto.html":{},"classes/ContributionsPageDto.html":{},"classes/ContributionsTimeframeDto.html":{},"classes/Contributor.html":{},"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"modules/ContributorModule.html":{},"classes/ContributorPullRequestsDto.html":{},"modules/CouponModule.html":{},"injectables/CouponService.html":{},"classes/CreateBlogSummaryDto.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateInsightDto.html":{},"classes/CreateInsightMemberDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/CreateLogDto.html":{},"classes/CreateUserCollaborationDto.html":{},"classes/CreateUserHighlightDto.html":{},"classes/CreateUserListDto.html":{},"injectables/CustomLogger.html":{},"modules/CustomerModule.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"entities/DbBakedRepo.html":{},"entities/DbCommitAuthors.html":{},"entities/DbCommits.html":{},"entities/DbContribution.html":{},"entities/DbContributionStatTimeframe.html":{},"entities/DbContributionsProjects.html":{},"entities/DbContributorCategoryTimeframe.html":{},"entities/DbCoupon.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"classes/DbFilteredUser.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbPullRequestReview.html":{},"entities/DbRepoLoginContributions.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"classes/DbTimezone.html":{},"classes/DbTopUser.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightReactionResponse.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserListContributorStat.html":{},"entities/DbUserListContributorStat-1.html":{},"entities/DbUserNotification.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"controllers/EmojiController.html":{},"modules/EmojiModule.html":{},"injectables/EmojiService.html":{},"controllers/EndorsementController.html":{},"modules/EndorsementModule.html":{},"injectables/EndorsementService.html":{},"guards/EndorsementTokenGuard.html":{},"classes/FilterListContributorsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/FilteredUsersDto.html":{},"classes/FollowManyUsersDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"controllers/HighlightController.html":{},"modules/HighlightModule.html":{},"classes/HighlightOptionsDto.html":{},"injectables/HttpLoggerMiddleware.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"injectables/InsightRepoService.html":{},"modules/InsightsModule.html":{},"injectables/InsightsService.html":{},"controllers/IssueSummaryController.html":{},"modules/IssueSummaryModule.html":{},"injectables/IssueSummaryService.html":{},"modules/LogModule.html":{},"injectables/LogService.html":{},"modules/OpenAiModule.html":{},"injectables/OpenAiService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaParameters.html":{},"classes/PageOptionsDto.html":{},"injectables/PagerService.html":{},"interfaces/PaginationInput.html":{},"controllers/PizzaOvenController.html":{},"modules/PizzaOvenModule.html":{},"injectables/PizzaOvenService.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestInsightsService.html":{},"modules/PullRequestModule.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestReviewService.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"modules/RepoFilterModule.html":{},"injectables/RepoFilterService.html":{},"classes/RepoInfo.html":{},"modules/RepoModule.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"modules/StarModule.html":{},"injectables/StarService.html":{},"modules/StargazeModule.html":{},"injectables/StargazeService.html":{},"modules/StripeModule.html":{},"injectables/StripeService.html":{},"modules/StripeSubscriptionModule.html":{},"injectables/StripeSubscriptionService.html":{},"modules/StripeWebHookModule.html":{},"controllers/StripeWebhookController.html":{},"modules/SubmitModule.html":{},"injectables/SubmitService.html":{},"classes/SupabaseAuthDto.html":{},"injectables/SupabaseGuard.html":{},"injectables/SupabaseStrategy.html":{},"modules/TierModule.html":{},"injectables/TierService.html":{},"classes/TopProjectsDto.html":{},"classes/TopUsersDto.html":{},"classes/UpdateEndorsementDto.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateInsightMemberDto.html":{},"classes/UpdateUserCollaborationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowingController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"modules/UserListModule.html":{},"classes/UserListMostActiveContributorsDto.html":{},"injectables/UserListService.html":{},"controllers/UserListStatsController.html":{},"injectables/UserListStatsService.html":{},"modules/UserModule.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"classes/UserOnboardingDto.html":{},"injectables/UserOrganizationService.html":{},"controllers/UserRecommendationController.html":{},"classes/UserRepoOptionsDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"modules/UserReposModule.html":{},"injectables/UserReposService.html":{},"modules/VoteModule.html":{},"injectables/VoteService.html":{},"classes/VotedRepoDto.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":93,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"classes/ContributorPullRequestsDto.html":{},"entities/DbContribution.html":{},"entities/DbContributionStatTimeframe.html":{},"entities/DbContributionsProjects.html":{},"entities/DbContributorCategoryTimeframe.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoLoginContributions.html":{},"entities/DbUserListContributorStat.html":{},"entities/DbUserListContributorStat-1.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"injectables/PullRequestInsightsService.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"injectables/RepoFilterService.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"classes/SupabaseAuthDto.html":{},"classes/TopUsersDto.html":{},"injectables/UserHighlightsService.html":{},"classes/UserListMostActiveContributorsDto.html":{},"injectables/UserListService.html":{},"injectables/UserListStatsService.html":{},"classes/UserRepoOptionsDto.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["0)::integer",{"_index":1157,"title":{},"body":{"injectables/ContributionService.html":{}}}],["0.0.0.0",{"_index":5661,"title":{},"body":{"miscellaneous/variables.html":{}}}],["0.7",{"_index":5675,"title":{},"body":{"miscellaneous/variables.html":{}}}],["0/1",{"_index":5285,"title":{},"body":{"coverage.html":{}}}],["0/10",{"_index":5282,"title":{},"body":{"coverage.html":{}}}],["0/11",{"_index":5323,"title":{},"body":{"coverage.html":{}}}],["0/12",{"_index":5315,"title":{},"body":{"coverage.html":{}}}],["0/13",{"_index":5326,"title":{},"body":{"coverage.html":{}}}],["0/14",{"_index":5322,"title":{},"body":{"coverage.html":{}}}],["0/18",{"_index":5327,"title":{},"body":{"coverage.html":{}}}],["0/19",{"_index":5330,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":5290,"title":{},"body":{"coverage.html":{}}}],["0/25",{"_index":5283,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":5284,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":5286,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":5313,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":5294,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":5289,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":5293,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":5314,"title":{},"body":{"coverage.html":{}}}],["01",{"_index":1434,"title":{},"body":{"classes/CreateUserHighlightDto.html":{},"entities/DbCoupon.html":{},"entities/DbUserHighlight.html":{},"miscellaneous/variables.html":{}}}],["01t00:30:00z",{"_index":5897,"title":{},"body":{"miscellaneous/variables.html":{}}}],["04",{"_index":1835,"title":{},"body":{"entities/DbInsightMember.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserNotification.html":{}}}],["08",{"_index":1668,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbContributionStatTimeframe.html":{},"entities/DbContributorCategoryTimeframe.html":{},"entities/DbEmoji.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbPullRequestReview.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{}}}],["0e8a16",{"_index":1947,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["1",{"_index":187,"title":{"entities/DbUserListContributorStat-1.html":{},"classes/UserRepoOptionsDto-1.html":{}},"body":{"interfaces/AllContributionsCount.html":{},"interfaces/ChatResponse.html":{},"classes/ContributionPageMetaDto.html":{},"classes/ContributionPageOptionsDto.html":{},"classes/ContributorPullRequestsDto.html":{},"entities/DbEmoji.html":{},"entities/DbPRInsight.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbSubscription.html":{},"classes/FilterListContributorsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/FilteredUsersDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"injectables/OpenAiService.html":{},"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"injectables/PullRequestInsightsService.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"injectables/StripeService.html":{},"classes/TopUsersDto.html":{},"classes/UserListMostActiveContributorsDto.html":{},"injectables/UserListStatsService.html":{},"classes/UserRepoOptionsDto.html":{},"index.html":{},"overview.html":{}}}],["1.57.0",{"_index":5617,"title":{},"body":{"properties.html":{}}}],["10",{"_index":870,"title":{},"body":{"interfaces/ChatResponse.html":{},"classes/ContributionPageMetaDto.html":{},"classes/ContributionPageOptionsDto.html":{},"classes/ContributorPullRequestsDto.html":{},"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserNotification.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"classes/FilterListContributorsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/FilteredUsersDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"injectables/OpenAiService.html":{},"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"injectables/PullRequestInsightsService.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/StripeWebhookController.html":{},"classes/SupabaseAuthDto.html":{},"classes/TopUsersDto.html":{},"injectables/UserHighlightsService.html":{},"classes/UserListMostActiveContributorsDto.html":{},"classes/UserRepoOptionsDto.html":{},"miscellaneous/variables.html":{}}}],["100",{"_index":1049,"title":{},"body":{"classes/ContributionPageMetaDto.html":{},"entities/DbEmoji.html":{},"entities/DbUserNotification.html":{},"classes/InsightOptionsDto.html":{},"classes/PageMetaDto.html":{},"classes/RepoPageOptionsDto.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["100'})@column({type",{"_index":1746,"title":{},"body":{"entities/DbEmoji.html":{}}}],["1000",{"_index":1086,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/ContributorPullRequestsDto.html":{},"classes/FilterListContributorsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/FilteredUsersDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/RepoFilterService.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/TopUsersDto.html":{},"classes/UserListMostActiveContributorsDto.html":{},"classes/UserRepoOptionsDto.html":{}}}],["1000).toisostring",{"_index":5777,"title":{},"body":{"miscellaneous/variables.html":{}}}],["10000",{"_index":5703,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1024",{"_index":5669,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1045024650",{"_index":1937,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["11",{"_index":3934,"title":{},"body":{"injectables/StripeService.html":{}}}],["12237133",{"_index":1658,"title":{},"body":{"entities/DbContribution.html":{}}}],["12345",{"_index":1199,"title":{},"body":{"classes/Contributor.html":{},"classes/CreateUserListDto.html":{}}}],["12345678",{"_index":1587,"title":{},"body":{"entities/DbBakedRepo.html":{}}}],["123456789",{"_index":2005,"title":{},"body":{"entities/DbPullRequestReview.html":{}}}],["133",{"_index":2328,"title":{},"body":{"entities/DbUserNotification.html":{}}}],["133'})@column({type",{"_index":2314,"title":{},"body":{"entities/DbUserNotification.html":{}}}],["13:24:51.000000",{"_index":1458,"title":{},"body":{"classes/CreateUserHighlightDto.html":{},"entities/DbContribution.html":{},"entities/DbCoupon.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserNotification.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"classes/SupabaseAuthDto.html":{}}}],["13:24:51.000000'})@column({type",{"_index":1662,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbInsightMember.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserNotification.html":{}}}],["13:24:51.000000'})@createdatecolumn({type",{"_index":1652,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbCoupon.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserNotification.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{}}}],["13:24:51.000000'})@deletedatecolumn({type",{"_index":1722,"title":{},"body":{"entities/DbCoupon.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserList.html":{}}}],["13:24:51.000000'})@updatedatecolumn({type",{"_index":1807,"title":{},"body":{"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserList.html":{}}}],["13:24:51.000000})@isdatestring()@isoptional",{"_index":1436,"title":{},"body":{"classes/CreateUserHighlightDto.html":{}}}],["15",{"_index":1644,"title":{},"body":{"entities/DbContribution.html":{},"injectables/StripeService.html":{}}}],["19",{"_index":1435,"title":{},"body":{"classes/CreateUserHighlightDto.html":{},"entities/DbContribution.html":{},"entities/DbCoupon.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserNotification.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"classes/SupabaseAuthDto.html":{}}}],["196",{"_index":2034,"title":{},"body":{"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{}}}],["1})@column({type",{"_index":2126,"title":{},"body":{"entities/DbSubscription.html":{}}}],["2",{"_index":190,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"classes/FilterListContributorsDto.html":{},"controllers/PullRequestController.html":{},"classes/SupabaseAuthDto.html":{},"injectables/UserListStatsService.html":{},"index.html":{}}}],["2.build",{"_index":5419,"title":{},"body":{"index.html":{}}}],["2/3",{"_index":5296,"title":{},"body":{"coverage.html":{}}}],["20",{"_index":1768,"title":{},"body":{"entities/DbEndorsement.html":{},"entities/DbInsightMember.html":{},"entities/DbUserCollaboration.html":{},"controllers/UserListStatsController.html":{}}}],["200",{"_index":5668,"title":{},"body":{"miscellaneous/variables.html":{}}}],["200\\`](https://developer.mozilla.org/en",{"_index":5851,"title":{},"body":{"miscellaneous/variables.html":{}}}],["2016",{"_index":1651,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"classes/SupabaseAuthDto.html":{}}}],["201\\`](https://developer.mozilla.org/en",{"_index":5856,"title":{},"body":{"miscellaneous/variables.html":{}}}],["202",{"_index":3144,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["2022",{"_index":1667,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbPullRequestReview.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserList.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"injectables/StripeService.html":{}}}],["2023",{"_index":1433,"title":{},"body":{"classes/CreateUserHighlightDto.html":{},"entities/DbContributionStatTimeframe.html":{},"entities/DbContributorCategoryTimeframe.html":{},"entities/DbCoupon.html":{},"entities/DbInsightMember.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserNotification.html":{},"license.html":{}}}],["204\\`](https://developer.mozilla.org/en",{"_index":5860,"title":{},"body":{"miscellaneous/variables.html":{}}}],["22:04:29.000000",{"_index":1679,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbPullRequestReview.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{}}}],["22:04:29.000000'})@column({type",{"_index":1925,"title":{},"body":{"entities/DbPullRequest.html":{},"entities/DbPullRequestReview.html":{}}}],["22:04:29.000000'})@createdatecolumn({type",{"_index":1930,"title":{},"body":{"entities/DbPullRequest.html":{},"entities/DbPullRequestReview.html":{}}}],["22:04:29.000000'})@updatedatecolumn({type",{"_index":1670,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{}}}],["234343",{"_index":3563,"title":{},"body":{"classes/RepoInfo.html":{},"classes/TopProjectsDto.html":{}}}],["234343})@isnumber",{"_index":3561,"title":{},"body":{"classes/RepoInfo.html":{}}}],["234343})@type(undefined)@isnumber",{"_index":4191,"title":{},"body":{"classes/TopProjectsDto.html":{}}}],["237133",{"_index":1731,"title":{},"body":{"entities/DbCustomer.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserNotification.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"classes/SupabaseAuthDto.html":{}}}],["237133})@column('bigint",{"_index":2346,"title":{},"body":{"entities/DbUserRepo.html":{}}}],["237133})@primarycolumn('bigint",{"_index":1726,"title":{},"body":{"entities/DbCustomer.html":{},"entities/DbUserRepo.html":{}}}],["24",{"_index":5775,"title":{},"body":{"miscellaneous/variables.html":{}}}],["25",{"_index":1804,"title":{},"body":{"entities/DbInsight.html":{},"entities/DbUserNotification.html":{}}}],["250",{"_index":1341,"title":{},"body":{"classes/CreateBlogSummaryDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{}}}],["25060",{"_index":5439,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["25060:5432",{"_index":5434,"title":{},"body":{"index.html":{}}}],["250})@isnumber()@min(100)@max(500",{"_index":1328,"title":{},"body":{"classes/CreateBlogSummaryDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{}}}],["255",{"_index":1577,"title":{},"body":{"entities/DbBakedRepo.html":{},"entities/DbCommitAuthors.html":{},"entities/DbCommits.html":{},"entities/DbContribution.html":{},"entities/DbInsight.html":{},"entities/DbUserList.html":{}}}],["26t23:55:49.204z",{"_index":1699,"title":{},"body":{"entities/DbContributionStatTimeframe.html":{},"entities/DbContributorCategoryTimeframe.html":{}}}],["28",{"_index":1669,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbPullRequestReview.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{}}}],["287",{"_index":1866,"title":{},"body":{"entities/DbPRInsight.html":{}}}],["3.5",{"_index":5788,"title":{},"body":{"miscellaneous/variables.html":{}}}],["3.run",{"_index":5431,"title":{},"body":{"index.html":{}}}],["30",{"_index":143,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"classes/ContributionPageOptionsDto.html":{},"classes/ContributionsByProjectDto.html":{},"classes/ContributionsTimeframeDto.html":{},"controllers/ContributorInsightsController.html":{},"classes/ContributorPullRequestsDto.html":{},"classes/FilterListContributorsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"controllers/PullRequestController.html":{},"injectables/PullRequestInsightsService.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"classes/TopProjectsDto.html":{},"classes/UserListMostActiveContributorsDto.html":{},"injectables/UserListService.html":{},"injectables/UserListStatsService.html":{},"classes/UserRepoOptionsDto.html":{}}}],["3000",{"_index":5672,"title":{},"body":{"miscellaneous/variables.html":{}}}],["3001",{"_index":5454,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["31",{"_index":5610,"title":{},"body":{"overview.html":{}}}],["31333",{"_index":1762,"title":{},"body":{"entities/DbEndorsement.html":{},"entities/DbUserCollaboration.html":{}}}],["31st",{"_index":3308,"title":{},"body":{"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{}}}],["32",{"_index":2315,"title":{},"body":{"entities/DbUserNotification.html":{}}}],["35",{"_index":5611,"title":{},"body":{"overview.html":{}}}],["365",{"_index":5414,"title":{},"body":{"index.html":{}}}],["38",{"_index":5612,"title":{},"body":{"overview.html":{}}}],["4",{"_index":1928,"title":{},"body":{"entities/DbPullRequest.html":{},"overview.html":{}}}],["400",{"_index":2816,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{}}}],["400\\`](https://developer.mozilla.org/en",{"_index":5867,"title":{},"body":{"miscellaneous/variables.html":{}}}],["401\\`](https://developer.mozilla.org/en",{"_index":5874,"title":{},"body":{"miscellaneous/variables.html":{}}}],["403\\`](https://developer.mozilla.org/en",{"_index":5879,"title":{},"body":{"miscellaneous/variables.html":{}}}],["404\\`](https://developer.mozilla.org/en",{"_index":5882,"title":{},"body":{"miscellaneous/variables.html":{}}}],["42211",{"_index":965,"title":{},"body":{"classes/CollaboratorsDto.html":{},"classes/CreateEndorsementDto.html":{},"entities/DbSubscription.html":{}}}],["42211})@column({type",{"_index":2133,"title":{},"body":{"entities/DbSubscription.html":{}}}],["42211})@isnumber",{"_index":1357,"title":{},"body":{"classes/CreateEndorsementDto.html":{}}}],["426820139",{"_index":5219,"title":{},"body":{"classes/UserRepoOptionsDto-1.html":{},"classes/VotedRepoDto.html":{}}}],["429",{"_index":5830,"title":{},"body":{"miscellaneous/variables.html":{}}}],["429\\`](https://developer.mozilla.org/en",{"_index":5885,"title":{},"body":{"miscellaneous/variables.html":{}}}],["43311",{"_index":2307,"title":{},"body":{"entities/DbUserNotification.html":{}}}],["4456742596",{"_index":1943,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["45",{"_index":5613,"title":{},"body":{"overview.html":{}}}],["498",{"_index":1732,"title":{},"body":{"entities/DbCustomer.html":{},"entities/DbUserNotification.html":{}}}],["498})@column({type",{"_index":1728,"title":{},"body":{"entities/DbCustomer.html":{}}}],["5",{"_index":1922,"title":{},"body":{"entities/DbPullRequest.html":{},"classes/InsightOptionsDto.html":{},"injectables/RepoFilterService.html":{},"classes/RepoPageOptionsDto.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserOnboardingDto.html":{},"miscellaneous/enumerations.html":{}}}],["5'})@isstring",{"_index":5180,"title":{},"body":{"classes/UserOnboardingDto.html":{}}}],["5'})@isstring()@isoptional",{"_index":4235,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["50",{"_index":1084,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/ContributorPullRequestsDto.html":{},"entities/DbCustomer.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"controllers/StripeWebhookController.html":{},"classes/TopUsersDto.html":{},"classes/UserListMostActiveContributorsDto.html":{},"classes/UserRepoOptionsDto.html":{}}}],["500",{"_index":1766,"title":{},"body":{"entities/DbEndorsement.html":{},"entities/DbUserCollaboration.html":{},"injectables/HttpLoggerMiddleware.html":{}}}],["5000",{"_index":5824,"title":{},"body":{"miscellaneous/variables.html":{}}}],["5432",{"_index":5441,"title":{},"body":{"index.html":{}}}],["5736810",{"_index":1371,"title":{},"body":{"classes/CreateEndorsementDto.html":{}}}],["5736810})@isnumber",{"_index":1360,"title":{},"body":{"classes/CreateEndorsementDto.html":{}}}],["57568598",{"_index":1620,"title":{},"body":{"entities/DbCommits.html":{}}}],["5e7c6c7af42d38c57f363c564c58007da448c443",{"_index":1006,"title":{},"body":{"classes/CommitsDto.html":{},"entities/DbCommits.html":{}}}],["5e7c6c7af42d38c57f363c564c58007da448c443'})@column({type",{"_index":1628,"title":{},"body":{"entities/DbCommits.html":{}}}],["5e7c6c7af42d38c57f363c564c58007da448c443'})@isstring",{"_index":1004,"title":{},"body":{"classes/CommitsDto.html":{}}}],["60",{"_index":5776,"title":{},"body":{"miscellaneous/variables.html":{}}}],["60].map(async",{"_index":3240,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["612",{"_index":1960,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["63",{"_index":5614,"title":{},"body":{"overview.html":{}}}],["66",{"_index":5295,"title":{},"body":{"coverage.html":{}}}],["7",{"_index":141,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"classes/ContributionPageOptionsDto.html":{},"classes/ContributorPullRequestsDto.html":{},"classes/CreateBlogSummaryDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/FilterOptionsDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/UserListMostActiveContributorsDto.html":{},"injectables/UserListStatsService.html":{},"classes/UserRepoOptionsDto.html":{}}}],["71359796",{"_index":1584,"title":{},"body":{"entities/DbBakedRepo.html":{},"entities/DbCommitAuthors.html":{},"entities/DbCommits.html":{},"entities/DbContribution.html":{},"entities/DbPRInsight.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"classes/UserRepoOptionsDto-1.html":{},"classes/VotedRepoDto.html":{}}}],["78133",{"_index":1372,"title":{},"body":{"classes/CreateEndorsementDto.html":{},"entities/DbEndorsement.html":{}}}],["78133})@isnumber",{"_index":1362,"title":{},"body":{"classes/CreateEndorsementDto.html":{}}}],["797",{"_index":1387,"title":{},"body":{"classes/CreateInsightDto.html":{}}}],["7})@isnumber()@min(0)@max(10",{"_index":1330,"title":{},"body":{"classes/CreateBlogSummaryDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{}}}],["80",{"_index":5795,"title":{},"body":{"miscellaneous/variables.html":{}}}],["8080:3001",{"_index":5485,"title":{},"body":{"index.html":{}}}],["81233",{"_index":966,"title":{},"body":{"classes/CollaboratorsDto.html":{}}}],["82",{"_index":129,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["86400000).toisostring",{"_index":181,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["90",{"_index":1171,"title":{},"body":{"classes/ContributionsByProjectDto.html":{},"classes/ContributionsTimeframeDto.html":{},"classes/PageOptionsDto.html":{},"classes/TopProjectsDto.html":{}}}],["90'])@isint()@isoptional",{"_index":1099,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/ContributionsByProjectDto.html":{},"classes/ContributionsTimeframeDto.html":{},"classes/ContributorPullRequestsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/TopProjectsDto.html":{},"classes/UserListMostActiveContributorsDto.html":{},"classes/UserRepoOptionsDto.html":{}}}],["9876543",{"_index":1626,"title":{},"body":{"entities/DbCommits.html":{}}}],["_stripe",{"_index":3922,"title":{},"body":{"injectables/StripeService.html":{}}}],["_token",{"_index":2421,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["above",{"_index":5576,"title":{},"body":{"license.html":{}}}],["accept",{"_index":4215,"title":{},"body":{"classes/UpdateUserCollaborationDto.html":{},"index.html":{}}}],["accept'})@isstring()@isin(['accept",{"_index":4213,"title":{},"body":{"classes/UpdateUserCollaborationDto.html":{}}}],["acceptance",{"_index":2151,"title":{},"body":{"entities/DbUserCollaboration.html":{}}}],["accepted",{"_index":1865,"title":{},"body":{"entities/DbPRInsight.html":{},"injectables/PullRequestInsightsService.html":{}}}],["accepted_prs",{"_index":1861,"title":{},"body":{"entities/DbPRInsight.html":{}}}],["accepting",{"_index":4277,"title":{},"body":{"controllers/UserCollaborationController.html":{},"controllers/UserInsightMemberController.html":{}}}],["access",{"_index":1818,"title":{},"body":{"entities/DbInsightMember.html":{},"injectables/InsightsService.html":{},"classes/UpdateInsightMemberDto.html":{},"controllers/UserInsightMemberController.html":{},"miscellaneous/variables.html":{}}}],["accessors",{"_index":2569,"title":{},"body":{"classes/FilterListContributorsDto.html":{},"classes/FilteredUsersDto.html":{},"classes/PageOptionsDto.html":{},"injectables/StripeService.html":{},"classes/TopUsersDto.html":{}}}],["accessroles",{"_index":2873,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["account",{"_index":558,"title":{},"body":{"controllers/AuthController.html":{},"injectables/TierService.html":{}}}],["account'})@apibearerauth()@useguards(supabaseguard)@apiokresponse({type",{"_index":556,"title":{},"body":{"controllers/AuthController.html":{}}}],["action",{"_index":5597,"title":{},"body":{"license.html":{}}}],["active",{"_index":37,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"classes/ContributionsTimeframeDto.html":{},"entities/DbContributorCategoryTimeframe.html":{},"entities/DbSubscription.html":{},"classes/InsightOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"controllers/StripeWebhookController.html":{},"classes/UserListMostActiveContributorsDto.html":{},"controllers/UserListStatsController.html":{},"injectables/UserListStatsService.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["active'})@column({type",{"_index":2128,"title":{},"body":{"entities/DbSubscription.html":{}}}],["active_pull_requests\".\"updated_at",{"_index":3649,"title":{},"body":{"injectables/RepoService.html":{}}}],["activecount",{"_index":165,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["activecountquerybuilder",{"_index":162,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["activecountquerybuilder.getcount",{"_index":166,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["activecountquerybuilder.innerjoin",{"_index":163,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["actual",{"_index":5389,"title":{},"body":{"index.html":{}}}],["add",{"_index":2728,"title":{},"body":{"controllers/HighlightController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"classes/UserRepoOptionsDto-1.html":{},"classes/VotedRepoDto.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["addafeaturedhighlight",{"_index":2727,"title":{},"body":{"controllers/HighlightController.html":{}}}],["addbearerauth",{"_index":5756,"title":{},"body":{"miscellaneous/variables.html":{}}}],["addcustomer",{"_index":1509,"title":{},"body":{"injectables/CustomerService.html":{},"injectables/StripeService.html":{}}}],["addcustomer(id",{"_index":3925,"title":{},"body":{"injectables/StripeService.html":{}}}],["addcustomer(userid",{"_index":1515,"title":{},"body":{"injectables/CustomerService.html":{}}}],["added",{"_index":1909,"title":{},"body":{"entities/DbPullRequest.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"injectables/UserHighlightsService.html":{},"index.html":{}}}],["addfeatured",{"_index":4599,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["addfeatured(highlightid",{"_index":4614,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["addgroupby(\"author_login",{"_index":3429,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["addgroupby(\"emoji_id",{"_index":4695,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["addgroupby(\"users.id",{"_index":3430,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["addhighlightforuser",{"_index":4536,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["addhighlightreactionforuser",{"_index":4518,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["addhighlightreactionforuser(highlightid",{"_index":4527,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["addinsight",{"_index":2961,"title":{},"body":{"injectables/InsightsService.html":{}}}],["addinsight(insight",{"_index":2968,"title":{},"body":{"injectables/InsightsService.html":{}}}],["addinsightforuser",{"_index":4519,"title":{},"body":{"controllers/UserHighlightsController.html":{},"controllers/UserInsightsController.html":{}}}],["addinsightforuser(@body",{"_index":4783,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["addinsightforuser(createhighlightdto",{"_index":4535,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["addinsightforuser(createinsightdto",{"_index":4772,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["addinsightmember",{"_index":2858,"title":{},"body":{"injectables/InsightMemberService.html":{},"controllers/UserInsightMemberController.html":{}}}],["addinsightmember(createinsightmemberdto",{"_index":4714,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["addinsightmember(insightmember",{"_index":2867,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["addinsightrepo",{"_index":2917,"title":{},"body":{"injectables/InsightRepoService.html":{}}}],["addinsightrepo(insightid",{"_index":2923,"title":{},"body":{"injectables/InsightRepoService.html":{}}}],["additional",{"_index":5888,"title":{},"body":{"miscellaneous/variables.html":{}}}],["additions",{"_index":1887,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["addlistforuser",{"_index":4819,"title":{},"body":{"controllers/UserListController.html":{}}}],["addlistforuser(@body",{"_index":4891,"title":{},"body":{"controllers/UserListController.html":{}}}],["addlistforuser(createuserlistdto",{"_index":4831,"title":{},"body":{"controllers/UserListController.html":{}}}],["addmemberforinsight",{"_index":4716,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["addorderby(`\"${orderfield",{"_index":1141,"title":{},"body":{"injectables/ContributionService.html":{},"injectables/RepoService.html":{}}}],["addorderby(`\"contribution\".\"created_at",{"_index":1143,"title":{},"body":{"injectables/ContributionService.html":{}}}],["addorderby(`\"pull_requests\".\"updated_at",{"_index":3411,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["addorderby(`\"repo\".\"created_at",{"_index":3660,"title":{},"body":{"injectables/RepoService.html":{}}}],["addorderby(`\"repos\".\"${orderfield",{"_index":3667,"title":{},"body":{"injectables/RepoService.html":{}}}],["addorderby(`\"updated_at",{"_index":3432,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["address",{"_index":5821,"title":{},"body":{"miscellaneous/variables.html":{}}}],["adds",{"_index":3716,"title":{},"body":{"controllers/RepoStarController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{}}}],["addselect",{"_index":90,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/ContributionService.html":{},"injectables/EndorsementService.html":{},"injectables/RepoService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserListService.html":{},"injectables/UserListStatsService.html":{}}}],["addselect(\"array_agg(users.login",{"_index":4692,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["addselect(\"coalesce(sum(pull_requests.commits",{"_index":1156,"title":{},"body":{"injectables/ContributionService.html":{}}}],["addselect(\"count(emoji_id",{"_index":4691,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["addselect(\"count(pr.id",{"_index":194,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["addselect(\"count(pull_requests.id)::integer",{"_index":1159,"title":{},"body":{"injectables/ContributionService.html":{}}}],["addselect(\"insight_members.invitation_email",{"_index":2896,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["addselect(\"max(pull_requests.updated_at",{"_index":3426,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["addselect(\"r2votes.deleted_at",{"_index":5273,"title":{},"body":{"injectables/VoteService.html":{}}}],["addselect(\"repos.full_name",{"_index":3414,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["addselect(\"repos.id",{"_index":192,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/PullRequestService.html":{},"injectables/UserListStatsService.html":{}}}],["addselect(\"split_part(repos.full_name",{"_index":189,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["addselect(\"user_follows.deleted_at",{"_index":4454,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["addselect(\"user_orgs.user_id",{"_index":3681,"title":{},"body":{"injectables/RepoService.html":{}}}],["addselect(\"users.id",{"_index":3427,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["addselect(\"users.login",{"_index":3680,"title":{},"body":{"injectables/RepoService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserListService.html":{}}}],["addselect(\"users.name",{"_index":2894,"title":{},"body":{"injectables/InsightMemberService.html":{},"injectables/UserHighlightsService.html":{}}}],["addselect((qb",{"_index":3628,"title":{},"body":{"injectables/RepoService.html":{}}}],["addselect(`${interval}::integer",{"_index":3321,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["addserver(`https://${apidomain",{"_index":5742,"title":{},"body":{"miscellaneous/variables.html":{}}}],["addserver(`https://alpha.${apidomain",{"_index":5745,"title":{},"body":{"miscellaneous/variables.html":{}}}],["addserver(`https://beta.${apidomain",{"_index":5743,"title":{},"body":{"miscellaneous/variables.html":{}}}],["addusercollaboration",{"_index":4268,"title":{},"body":{"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{}}}],["addusercollaboration(createusercollaborationdto",{"_index":4272,"title":{},"body":{"controllers/UserCollaborationController.html":{}}}],["addusercollaboration(usercollaboration",{"_index":4317,"title":{},"body":{"injectables/UserCollaborationService.html":{}}}],["adduserfollowerbyuserid",{"_index":4421,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["adduserfollowerbyuserid(userid",{"_index":4430,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["adduserfollowernotification",{"_index":5127,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["adduserfollowernotification(userid",{"_index":5135,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["adduserhighlight",{"_index":4600,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["adduserhighlight(userid",{"_index":4616,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["adduserhighlightnotification",{"_index":5128,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["adduserhighlightnotification(highlightid",{"_index":5137,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["adduserhighlightreaction",{"_index":4601,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["adduserhighlightreaction(userid",{"_index":4618,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["adduserhighlightreactionnotification",{"_index":5129,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["adduserhighlightreactionnotification(userid",{"_index":5139,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["adduserlist",{"_index":4947,"title":{},"body":{"injectables/UserListService.html":{}}}],["adduserlist(userid",{"_index":4961,"title":{},"body":{"injectables/UserListService.html":{}}}],["adduserlistcontributor",{"_index":4948,"title":{},"body":{"injectables/UserListService.html":{}}}],["adduserlistcontributor(listid",{"_index":4963,"title":{},"body":{"injectables/UserListService.html":{}}}],["addusernotification",{"_index":5130,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["addusernotification(usernotification",{"_index":5141,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["adduserrepo",{"_index":5229,"title":{},"body":{"injectables/UserReposService.html":{}}}],["adduserrepo(userid",{"_index":5233,"title":{},"body":{"injectables/UserReposService.html":{}}}],["adjust",{"_index":5512,"title":{},"body":{"index.html":{}}}],["admin",{"_index":4208,"title":{},"body":{"classes/UpdateInsightMemberDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"miscellaneous/variables.html":{}}}],["admin).'})@isoptional",{"_index":4243,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["advised",{"_index":5498,"title":{},"body":{"index.html":{}}}],["ai.module",{"_index":422,"title":{},"body":{"modules/AppModule.html":{},"modules/BlogSummaryModule.html":{},"modules/IssueSummaryModule.html":{},"modules/PullRequestModule.html":{}}}],["ai.module.ts",{"_index":3047,"title":{},"body":{"modules/OpenAiModule.html":{}}}],["ai.service",{"_index":810,"title":{},"body":{"injectables/BlogSummaryService.html":{},"injectables/CodeExplanationService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"injectables/IssueSummaryService.html":{},"modules/OpenAiModule.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["ai.service.ts",{"_index":844,"title":{},"body":{"interfaces/ChatResponse.html":{},"injectables/OpenAiService.html":{},"coverage.html":{}}}],["ai.service.ts:10",{"_index":3049,"title":{},"body":{"injectables/OpenAiService.html":{}}}],["ai.service.ts:13",{"_index":3050,"title":{},"body":{"injectables/OpenAiService.html":{}}}],["ai/open",{"_index":421,"title":{},"body":{"modules/AppModule.html":{},"modules/BlogSummaryModule.html":{},"injectables/BlogSummaryService.html":{},"interfaces/ChatResponse.html":{},"injectables/CodeExplanationService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"modules/IssueSummaryModule.html":{},"injectables/IssueSummaryService.html":{},"modules/OpenAiModule.html":{},"injectables/OpenAiService.html":{},"injectables/PullRequestDescriptionService.html":{},"modules/PullRequestModule.html":{},"coverage.html":{}}}],["alias",{"_index":3610,"title":{},"body":{"injectables/RepoService.html":{}}}],["aliases",{"_index":5637,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["aliasname",{"_index":3613,"title":{},"body":{"injectables/RepoService.html":{}}}],["aliastable",{"_index":3615,"title":{},"body":{"injectables/RepoService.html":{}}}],["alias}count",{"_index":3614,"title":{},"body":{"injectables/RepoService.html":{}}}],["alias}countselect",{"_index":3616,"title":{},"body":{"injectables/RepoService.html":{}}}],["all_contributions",{"_index":12,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["all_prs",{"_index":1862,"title":{},"body":{"entities/DbPRInsight.html":{}}}],["allcontributionscount",{"_index":1,"title":{"interfaces/AllContributionsCount.html":{}},"body":{"interfaces/AllContributionsCount.html":{},"classes/ContributionPageMetaDto.html":{},"injectables/UserListStatsService.html":{},"coverage.html":{}}}],["allcontributionsresult.all_contributions",{"_index":120,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["allerrs",{"_index":4506,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["allerrs.push(e",{"_index":4508,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["allof",{"_index":5684,"title":{},"body":{"miscellaneous/variables.html":{}}}],["allow_promotion_codes",{"_index":3940,"title":{},"body":{"injectables/StripeService.html":{}}}],["allowed",{"_index":5822,"title":{},"body":{"miscellaneous/variables.html":{}}}],["alpha",{"_index":5746,"title":{},"body":{"miscellaneous/variables.html":{}}}],["already",{"_index":3703,"title":{},"body":{"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/SubmitService.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"injectables/VoteService.html":{}}}],["alumni",{"_index":182,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"entities/DbContributorCategoryTimeframe.html":{},"classes/UserListMostActiveContributorsDto.html":{},"injectables/UserListStatsService.html":{},"miscellaneous/enumerations.html":{}}}],["alumnicount",{"_index":175,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["alumnicountquerybuilder",{"_index":172,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["alumnicountquerybuilder.getcount",{"_index":176,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["alumnicountquerybuilder.innerjoin",{"_index":173,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["america/los_angeles",{"_index":2141,"title":{},"body":{"classes/DbTimezone.html":{}}}],["analyze",{"_index":826,"title":{},"body":{"injectables/BlogSummaryService.html":{},"injectables/IssueSummaryService.html":{}}}],["and/or",{"_index":5568,"title":{},"body":{"license.html":{}}}],["ands",{"_index":2425,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["andwhere",{"_index":3675,"title":{},"body":{"injectables/RepoService.html":{}}}],["andwhere(\"insight_members.access",{"_index":2893,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["andwhere(\"insight_members.user_id",{"_index":2892,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["andwhere(\"r2stargazes.user_id",{"_index":3910,"title":{},"body":{"injectables/StargazeService.html":{}}}],["andwhere(\"r2stars.user_id",{"_index":3882,"title":{},"body":{"injectables/StarService.html":{}}}],["andwhere(\"r2submits.user_id",{"_index":4076,"title":{},"body":{"injectables/SubmitService.html":{}}}],["andwhere(\"r2votes.user_id",{"_index":5275,"title":{},"body":{"injectables/VoteService.html":{}}}],["andwhere(\"user_follows.deleted_at",{"_index":4448,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["andwhere(\"user_follows.following_user_id",{"_index":4451,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["andwhere(\"user_highlight_reactions.emoji_id",{"_index":4699,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["andwhere(\"user_highlight_reactions.user_id",{"_index":4698,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["andwhere(\"user_list_contributors.list_id",{"_index":89,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["andwhere(\"user_notifications.type",{"_index":5155,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["andwhere(\"users.timezone",{"_index":5029,"title":{},"body":{"injectables/UserListService.html":{}}}],["andwhere(`\"current_month_prs\".\"author_login",{"_index":236,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["andwhere(`'${startdate}'::timestamp",{"_index":1165,"title":{},"body":{"injectables/ContributionService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserListService.html":{}}}],["andwhere(`(expired_at",{"_index":1301,"title":{},"body":{"injectables/CouponService.html":{}}}],["andwhere(`pull_requests.updated_at",{"_index":3441,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["any(\"repo\".\"topics",{"_index":3674,"title":{},"body":{"injectables/RepoService.html":{}}}],["any(\"repos\".\"topics",{"_index":3541,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["any(\"spam_pull_requests\".\"label_names",{"_index":3553,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["anything",{"_index":818,"title":{},"body":{"injectables/BlogSummaryService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"injectables/IssueSummaryService.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["anytime",{"_index":5766,"title":{},"body":{"miscellaneous/variables.html":{}}}],["api",{"_index":1708,"title":{},"body":{"entities/DbContributionsProjects.html":{},"index.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["api.certificate",{"_index":462,"title":{},"body":{"modules/AppModule.html":{}}}],["api.config.ts",{"_index":5304,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["api.connection",{"_index":444,"title":{},"body":{"modules/AppModule.html":{}}}],["api.database",{"_index":454,"title":{},"body":{"modules/AppModule.html":{}}}],["api.host",{"_index":446,"title":{},"body":{"modules/AppModule.html":{}}}],["api.maxqueryexecutiontime",{"_index":465,"title":{},"body":{"modules/AppModule.html":{}}}],["api.opensauced.pizza",{"_index":5355,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["api.opensauced.pizzaalternatively",{"_index":5486,"title":{},"body":{"index.html":{}}}],["api.password",{"_index":452,"title":{},"body":{"modules/AppModule.html":{}}}],["api.port",{"_index":448,"title":{},"body":{"modules/AppModule.html":{}}}],["api.username",{"_index":450,"title":{},"body":{"modules/AppModule.html":{}}}],["api_domain=your_api_domainreplace",{"_index":5384,"title":{},"body":{"index.html":{}}}],["apiacceptedresponse",{"_index":3134,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["apibadrequestresponse",{"_index":775,"title":{},"body":{"controllers/BlogSummaryController.html":{},"controllers/CodeExplanationController.html":{},"controllers/CodeRefactorSuggestionController.html":{},"controllers/CodeTestSuggestionController.html":{},"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"controllers/IssueSummaryController.html":{},"controllers/PizzaOvenController.html":{},"controllers/PullRequestDescriptionController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"controllers/UserListStatsController.html":{}}}],["apibearerauth",{"_index":611,"title":{},"body":{"controllers/AuthController.html":{},"controllers/BlogSummaryController.html":{},"controllers/CodeExplanationController.html":{},"controllers/CodeRefactorSuggestionController.html":{},"controllers/CodeTestSuggestionController.html":{},"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"controllers/IssueSummaryController.html":{},"controllers/PullRequestDescriptionController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserEndorsementController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"controllers/UserNotificationController.html":{},"controllers/UserRecommendationController.html":{}}}],["apibody",{"_index":612,"title":{},"body":{"controllers/AuthController.html":{},"controllers/BlogSummaryController.html":{},"controllers/CodeExplanationController.html":{},"controllers/CodeRefactorSuggestionController.html":{},"controllers/CodeTestSuggestionController.html":{},"controllers/EndorsementController.html":{},"controllers/InsightController.html":{},"controllers/IssueSummaryController.html":{},"controllers/PizzaOvenController.html":{},"controllers/PullRequestDescriptionController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{}}}],["apiconfig",{"_index":320,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["apiconflictresponse",{"_index":3723,"title":{},"body":{"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{}}}],["apiconnection",{"_index":64,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"modules/AppModule.html":{},"injectables/CommitAuthorsService.html":{},"injectables/CommitsService.html":{},"modules/ContributionModule.html":{},"injectables/ContributionService.html":{},"modules/ContributorModule.html":{},"modules/CouponModule.html":{},"injectables/CouponService.html":{},"modules/CustomerModule.html":{},"injectables/CustomerService.html":{},"modules/EmojiModule.html":{},"injectables/EmojiService.html":{},"modules/EndorsementModule.html":{},"injectables/EndorsementService.html":{},"modules/HighlightModule.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightRepoService.html":{},"modules/InsightsModule.html":{},"injectables/InsightsService.html":{},"modules/PizzaOvenModule.html":{},"injectables/PizzaOvenService.html":{},"injectables/PullRequestInsightsService.html":{},"modules/PullRequestModule.html":{},"injectables/PullRequestReviewService.html":{},"injectables/PullRequestService.html":{},"modules/RepoModule.html":{},"injectables/RepoService.html":{},"modules/StarModule.html":{},"injectables/StarService.html":{},"modules/StargazeModule.html":{},"injectables/StargazeService.html":{},"modules/StripeSubscriptionModule.html":{},"injectables/StripeSubscriptionService.html":{},"modules/SubmitModule.html":{},"injectables/SubmitService.html":{},"injectables/UserCollaborationService.html":{},"injectables/UserFollowService.html":{},"injectables/UserHighlightsService.html":{},"modules/UserListModule.html":{},"injectables/UserListService.html":{},"injectables/UserListStatsService.html":{},"modules/UserModule.html":{},"injectables/UserNotificationService.html":{},"injectables/UserOrganizationService.html":{},"modules/UserReposModule.html":{},"injectables/UserReposService.html":{},"modules/VoteModule.html":{},"injectables/VoteService.html":{}}}],["apidomain",{"_index":5730,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apidomain}](https://${apidomain",{"_index":5816,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apiextramodels(pagedto",{"_index":5682,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apihideproperty",{"_index":1596,"title":{},"body":{"entities/DbBakedRepo.html":{},"entities/DbCommitAuthors.html":{},"entities/DbCommits.html":{},"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbInsight.html":{},"entities/DbInsightRepo.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserNotification.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{}}}],["apihideproperty()@column({type",{"_index":1604,"title":{},"body":{"entities/DbCommitAuthors.html":{},"entities/DbPullRequest.html":{},"entities/DbSubscription.html":{}}}],["apihideproperty()@deletedatecolumn({type",{"_index":1656,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{}}}],["apihideproperty()@manytoone(undefined",{"_index":1616,"title":{},"body":{"entities/DbCommits.html":{},"entities/DbContribution.html":{},"entities/DbInsight.html":{},"entities/DbInsightRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserNotification.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserTopRepo.html":{}}}],["apihideproperty()@onetomany(undefined",{"_index":1579,"title":{},"body":{"entities/DbBakedRepo.html":{},"entities/DbCommitAuthors.html":{},"entities/DbEmoji.html":{},"entities/DbInsight.html":{},"entities/DbUserHighlight.html":{}}}],["apikey",{"_index":5783,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apimodelproperty",{"_index":1593,"title":{},"body":{"entities/DbBakedRepo.html":{},"entities/DbCommitAuthors.html":{},"entities/DbCommits.html":{},"entities/DbContribution.html":{},"entities/DbContributionStatTimeframe.html":{},"entities/DbContributionsProjects.html":{},"entities/DbContributorCategoryTimeframe.html":{},"entities/DbCoupon.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"classes/DbFilteredUser.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbPullRequestReview.html":{},"entities/DbRepoLoginContributions.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"classes/DbTimezone.html":{},"classes/DbTopUser.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserListContributorStat.html":{},"entities/DbUserListContributorStat-1.html":{},"entities/DbUserNotification.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{}}}],["apimodelproperty({description",{"_index":1573,"title":{},"body":{"entities/DbBakedRepo.html":{},"entities/DbCommitAuthors.html":{},"entities/DbCommits.html":{},"entities/DbContribution.html":{},"entities/DbContributionStatTimeframe.html":{},"entities/DbContributionsProjects.html":{},"entities/DbContributorCategoryTimeframe.html":{},"entities/DbCoupon.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"classes/DbFilteredUser.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbPullRequestReview.html":{},"entities/DbRepoLoginContributions.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"classes/DbTimezone.html":{},"classes/DbTopUser.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserListContributorStat.html":{},"entities/DbUserListContributorStat-1.html":{},"entities/DbUserNotification.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{}}}],["apimodelproperty({type",{"_index":2224,"title":{},"body":{"entities/DbUserHighlightReaction.html":{}}}],["apimodelpropertyoptional",{"_index":1678,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbCoupon.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbPullRequest.html":{},"entities/DbPullRequestReview.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserNotification.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{}}}],["apimodelpropertyoptional({description",{"_index":1646,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbCoupon.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbPullRequest.html":{},"entities/DbPullRequestReview.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserNotification.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{}}}],["apinotfoundresponse",{"_index":613,"title":{},"body":{"controllers/AuthController.html":{},"controllers/EmojiController.html":{},"controllers/EndorsementController.html":{},"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"controllers/PizzaOvenController.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserController.html":{},"controllers/UserFollowingController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"controllers/UserListStatsController.html":{},"controllers/UserNotificationController.html":{}}}],["apiokresponse",{"_index":614,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"controllers/EmojiController.html":{},"controllers/EndorsementController.html":{},"controllers/HealthController.html":{},"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"controllers/PizzaOvenController.html":{},"controllers/PullRequestController.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/StripeWebhookController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"controllers/UserListStatsController.html":{},"controllers/UserNotificationController.html":{},"controllers/UserRecommendationController.html":{},"miscellaneous/variables.html":{}}}],["apioperation",{"_index":615,"title":{},"body":{"controllers/AuthController.html":{},"controllers/BlogSummaryController.html":{},"controllers/CodeExplanationController.html":{},"controllers/CodeRefactorSuggestionController.html":{},"controllers/CodeTestSuggestionController.html":{},"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"controllers/EmojiController.html":{},"controllers/EndorsementController.html":{},"controllers/HealthController.html":{},"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"controllers/IssueSummaryController.html":{},"controllers/PizzaOvenController.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"controllers/UserFollowingController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"controllers/UserListStatsController.html":{},"controllers/UserNotificationController.html":{},"controllers/UserRecommendationController.html":{}}}],["apipaginatedresponse",{"_index":1215,"title":{},"body":{"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"controllers/EmojiController.html":{},"controllers/EndorsementController.html":{},"controllers/HighlightController.html":{},"controllers/PizzaOvenController.html":{},"controllers/PullRequestController.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"controllers/UserListStatsController.html":{},"controllers/UserRecommendationController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["apipaginatedresponse(dbbakedrepo",{"_index":3148,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["apipaginatedresponse(dbcommitauthors",{"_index":3157,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["apipaginatedresponse(dbcommits",{"_index":3164,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["apipaginatedresponse(dbcontribution",{"_index":3482,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["apipaginatedresponse(dbemoji",{"_index":2388,"title":{},"body":{"controllers/EmojiController.html":{}}}],["apipaginatedresponse(dbendorsement",{"_index":2467,"title":{},"body":{"controllers/EndorsementController.html":{},"controllers/UserEndorsementController.html":{}}}],["apipaginatedresponse(dbinsight",{"_index":4781,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["apipaginatedresponse(dbinsightmember",{"_index":4741,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["apipaginatedresponse(dbpullrequest",{"_index":3231,"title":{},"body":{"controllers/PullRequestController.html":{},"controllers/UserController.html":{}}}],["apipaginatedresponse(dbpullrequestcontributor",{"_index":1226,"title":{},"body":{"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{}}}],["apipaginatedresponse(dbrepo",{"_index":3516,"title":{},"body":{"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserController.html":{},"controllers/UserRecommendationController.html":{}}}],["apipaginatedresponse(dbuser",{"_index":4910,"title":{},"body":{"controllers/UserListController.html":{}}}],["apipaginatedresponse(dbusercollaboration",{"_index":4297,"title":{},"body":{"controllers/UserCollaborationController.html":{}}}],["apipaginatedresponse(dbuserhighlight",{"_index":2769,"title":{},"body":{"controllers/HighlightController.html":{},"controllers/UserController.html":{},"controllers/UserListController.html":{}}}],["apipaginatedresponse(dbuserhighlightrepo",{"_index":2781,"title":{},"body":{"controllers/HighlightController.html":{}}}],["apipaginatedresponse(dbuserlistcontributor",{"_index":4915,"title":{},"body":{"controllers/UserListController.html":{}}}],["apipaginatedresponse(dbuserlistcontributorstat",{"_index":5067,"title":{},"body":{"controllers/UserListStatsController.html":{}}}],["apipaginatedresponse(dbuserorganization",{"_index":4394,"title":{},"body":{"controllers/UserController.html":{}}}],["apiparam",{"_index":2760,"title":{},"body":{"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"controllers/PizzaOvenController.html":{},"controllers/PullRequestController.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"controllers/UserListStatsController.html":{}}}],["apiproperty",{"_index":519,"title":{},"body":{"classes/ApplyUserCouponDto.html":{},"classes/BakeRepoDto.html":{},"classes/CollaboratorsDto.html":{},"classes/CommitAuthorDto.html":{},"classes/CommitsDto.html":{},"classes/ContributionPageMetaDto.html":{},"classes/ContributionsPageDto.html":{},"classes/Contributor.html":{},"classes/CreateBlogSummaryDto.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateInsightDto.html":{},"classes/CreateInsightMemberDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/CreateUserCollaborationDto.html":{},"classes/CreateUserHighlightDto.html":{},"classes/CreateUserListDto.html":{},"classes/FilteredUsersDto.html":{},"classes/FollowManyUsersDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"classes/RepoInfo.html":{},"classes/SupabaseAuthDto.html":{},"classes/TopProjectsDto.html":{},"classes/UpdateInsightMemberDto.html":{},"classes/UpdateUserCollaborationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"classes/UserOnboardingDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"classes/VotedRepoDto.html":{}}}],["apiproperty({description",{"_index":513,"title":{},"body":{"classes/ApplyUserCouponDto.html":{},"classes/BakeRepoDto.html":{},"classes/CollaboratorsDto.html":{},"classes/CommitAuthorDto.html":{},"classes/CommitsDto.html":{},"classes/ContributionPageMetaDto.html":{},"classes/CreateBlogSummaryDto.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateInsightDto.html":{},"classes/CreateInsightMemberDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/CreateUserCollaborationDto.html":{},"classes/CreateUserHighlightDto.html":{},"classes/CreateUserListDto.html":{},"classes/FilteredUsersDto.html":{},"classes/FollowManyUsersDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"classes/PageMetaDto.html":{},"classes/RepoInfo.html":{},"classes/SupabaseAuthDto.html":{},"classes/TopProjectsDto.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateInsightMemberDto.html":{},"classes/UpdateUserCollaborationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"classes/UserOnboardingDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"classes/VotedRepoDto.html":{}}}],["apiproperty({type",{"_index":1180,"title":{},"body":{"classes/ContributionsPageDto.html":{},"classes/PageDto.html":{}}}],["apipropertyoptional",{"_index":1103,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/ContributionsByProjectDto.html":{},"classes/ContributionsTimeframeDto.html":{},"classes/ContributorPullRequestsDto.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateUserHighlightDto.html":{},"classes/DbUserHighlightReactionResponse.html":{},"classes/FilterListContributorsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/FilteredUsersDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/SupabaseAuthDto.html":{},"classes/TopProjectsDto.html":{},"classes/TopUsersDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserListMostActiveContributorsDto.html":{}}}],["apipropertyoptional()@isstring()@isoptional",{"_index":2613,"title":{},"body":{"classes/FilterOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{}}}],["apipropertyoptional({description",{"_index":1095,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/ContributionsByProjectDto.html":{},"classes/ContributionsTimeframeDto.html":{},"classes/ContributorPullRequestsDto.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateUserHighlightDto.html":{},"classes/DbUserHighlightReactionResponse.html":{},"classes/FilterOptionsDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/SupabaseAuthDto.html":{},"classes/TopProjectsDto.html":{},"classes/TopUsersDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserListMostActiveContributorsDto.html":{},"classes/UserRepoOptionsDto.html":{}}}],["apipropertyoptional({enum",{"_index":1079,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/ContributionsTimeframeDto.html":{},"classes/ContributorPullRequestsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/UserListMostActiveContributorsDto.html":{},"classes/UserRepoOptionsDto.html":{}}}],["apipropertyoptional({isarray",{"_index":2576,"title":{},"body":{"classes/FilterListContributorsDto.html":{}}}],["apipropertyoptional({minimum",{"_index":1085,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/ContributorPullRequestsDto.html":{},"classes/FilterListContributorsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/FilteredUsersDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/TopUsersDto.html":{},"classes/UserListMostActiveContributorsDto.html":{},"classes/UserRepoOptionsDto.html":{}}}],["apipropertyoptional({type",{"_index":2571,"title":{},"body":{"classes/FilterListContributorsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{}}}],["apiquery",{"_index":3476,"title":{},"body":{"controllers/RepoContributionsController.html":{},"controllers/UserListStatsController.html":{}}}],["apiservicesmodule",{"_index":242,"title":{"modules/ApiServicesModule.html":{}},"body":{"modules/ApiServicesModule.html":{},"modules/EndorsementModule.html":{},"modules/InsightsModule.html":{},"modules/PizzaOvenModule.html":{},"modules/UserListModule.html":{},"modules/UserModule.html":{},"modules/UserReposModule.html":{},"modules.html":{},"overview.html":{}}}],["apitags",{"_index":616,"title":{},"body":{"controllers/AuthController.html":{},"controllers/BlogSummaryController.html":{},"controllers/CodeExplanationController.html":{},"controllers/CodeRefactorSuggestionController.html":{},"controllers/CodeTestSuggestionController.html":{},"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"controllers/EmojiController.html":{},"controllers/EndorsementController.html":{},"controllers/HealthController.html":{},"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"controllers/IssueSummaryController.html":{},"controllers/PizzaOvenController.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/StripeWebhookController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"controllers/UserFollowingController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"controllers/UserListStatsController.html":{},"controllers/UserNotificationController.html":{},"controllers/UserRecommendationController.html":{}}}],["apitags(\"authentication",{"_index":641,"title":{},"body":{"controllers/AuthController.html":{}}}],["apitags(\"blog",{"_index":783,"title":{},"body":{"controllers/BlogSummaryController.html":{}}}],["apitags(\"contributors",{"_index":1224,"title":{},"body":{"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{}}}],["apitags(\"emojis",{"_index":2387,"title":{},"body":{"controllers/EmojiController.html":{}}}],["apitags(\"endorsements",{"_index":2461,"title":{},"body":{"controllers/EndorsementController.html":{},"controllers/UserEndorsementController.html":{}}}],["apitags(\"health",{"_index":2684,"title":{},"body":{"controllers/HealthController.html":{}}}],["apitags(\"highlights",{"_index":2767,"title":{},"body":{"controllers/HighlightController.html":{}}}],["apitags(\"insights",{"_index":2847,"title":{},"body":{"controllers/InsightController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["apitags(\"issue",{"_index":3007,"title":{},"body":{"controllers/IssueSummaryController.html":{}}}],["apitags(\"pizza",{"_index":3140,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["apitags(\"pull",{"_index":896,"title":{},"body":{"controllers/CodeExplanationController.html":{},"controllers/CodeRefactorSuggestionController.html":{},"controllers/CodeTestSuggestionController.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{}}}],["apitags(\"repository",{"_index":3480,"title":{},"body":{"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{}}}],["apitags(\"stripe",{"_index":3995,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["apitags(\"user",{"_index":4296,"title":{},"body":{"controllers/UserCollaborationController.html":{},"controllers/UserController.html":{},"controllers/UserFollowingController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserListController.html":{},"controllers/UserListStatsController.html":{},"controllers/UserNotificationController.html":{},"controllers/UserRecommendationController.html":{}}}],["apitoken",{"_index":2558,"title":{},"body":{"guards/EndorsementTokenGuard.html":{}}}],["apiunauthorizedresponse",{"_index":2839,"title":{},"body":{"controllers/InsightController.html":{}}}],["apiunprocessableentityresponse",{"_index":4737,"title":{},"body":{"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["apiversion",{"_index":3933,"title":{},"body":{"injectables/StripeService.html":{}}}],["app",{"_index":5453,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["app.close",{"_index":5772,"title":{},"body":{"miscellaneous/variables.html":{}}}],["app.enablecors",{"_index":5735,"title":{},"body":{"miscellaneous/variables.html":{}}}],["app.enableversioning",{"_index":5736,"title":{},"body":{"miscellaneous/variables.html":{}}}],["app.flushlogs",{"_index":5734,"title":{},"body":{"miscellaneous/variables.html":{}}}],["app.uselogger(app.get(logger",{"_index":5733,"title":{},"body":{"miscellaneous/variables.html":{}}}],["application",{"_index":5449,"title":{},"body":{"index.html":{}}}],["application/json",{"_index":863,"title":{},"body":{"interfaces/ChatResponse.html":{},"injectables/OpenAiService.html":{}}}],["applies",{"_index":543,"title":{},"body":{"controllers/AuthController.html":{},"injectables/RepoFilterService.html":{}}}],["apply",{"_index":548,"title":{},"body":{"controllers/AuthController.html":{},"index.html":{}}}],["applyactivecontributorsfilter",{"_index":226,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["applyactivecontributorsfilter(querybuilder",{"_index":5082,"title":{},"body":{"injectables/UserListStatsService.html":{}}}],["applyalumnicontributorsfilter",{"_index":238,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["applyalumnicontributorsfilter(querybuilder",{"_index":5084,"title":{},"body":{"injectables/UserListStatsService.html":{}}}],["applycouponforuser",{"_index":531,"title":{},"body":{"controllers/AuthController.html":{}}}],["applycouponforuser(@userid",{"_index":718,"title":{},"body":{"controllers/AuthController.html":{}}}],["applycouponforuser(userid",{"_index":540,"title":{},"body":{"controllers/AuthController.html":{}}}],["applydecorators",{"_index":5681,"title":{},"body":{"miscellaneous/variables.html":{}}}],["applynewcontributorsfilter",{"_index":237,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["applynewcontributorsfilter(querybuilder",{"_index":5086,"title":{},"body":{"injectables/UserListStatsService.html":{}}}],["applypagination",{"_index":3079,"title":{},"body":{"injectables/PagerService.html":{},"interfaces/PaginationInput.html":{}}}],["applypagination(undefined",{"_index":3080,"title":{},"body":{"injectables/PagerService.html":{}}}],["applyquerybuilderfilters",{"_index":3527,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["applyquerybuilderfilters(qb",{"_index":3529,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["applyusercoupondto",{"_index":507,"title":{"classes/ApplyUserCouponDto.html":{}},"body":{"classes/ApplyUserCouponDto.html":{},"controllers/AuthController.html":{},"coverage.html":{}}}],["applyusercoupondto.couponcode",{"_index":722,"title":{},"body":{"controllers/AuthController.html":{}}}],["appmodule",{"_index":257,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["approved",{"_index":2018,"title":{},"body":{"entities/DbPullRequestReview.html":{},"entities/DbRepoToUserSubmissions.html":{}}}],["approved'})@column('text",{"_index":2014,"title":{},"body":{"entities/DbPullRequestReview.html":{}}}],["apt",{"_index":3016,"title":{},"body":{"injectables/IssueSummaryService.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["arg",{"_index":1977,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["arising",{"_index":5601,"title":{},"body":{"license.html":{}}}],["array",{"_index":958,"title":{},"body":{"classes/CollaboratorsDto.html":{},"classes/ContributionsPageDto.html":{},"classes/Contributor.html":{},"classes/CreateInsightDto.html":{},"classes/CreateUserHighlightDto.html":{},"classes/CreateUserListDto.html":{},"entities/DbUserHighlight.html":{},"classes/FollowManyUsersDto.html":{},"classes/PageDto.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"classes/UserOnboardingDto.html":{},"miscellaneous/variables.html":{}}}],["array(value",{"_index":2598,"title":{},"body":{"classes/FilterListContributorsDto.html":{}}}],["array.isarray(createinsightdto.repos",{"_index":4785,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["array.isarray(value",{"_index":2597,"title":{},"body":{"classes/FilterListContributorsDto.html":{}}}],["asc",{"_index":2405,"title":{},"body":{"injectables/EmojiService.html":{},"injectables/InsightMemberService.html":{},"miscellaneous/enumerations.html":{}}}],["assets",{"_index":5522,"title":{},"body":{"index.html":{}}}],["assignee",{"_index":1911,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["assignee_avatar",{"_index":1888,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["assignee_login",{"_index":1889,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["associated",{"_index":1687,"title":{},"body":{"entities/DbContributionStatTimeframe.html":{},"entities/DbContributionsProjects.html":{},"entities/DbRepoLoginContributions.html":{},"entities/DbUserListContributorStat.html":{},"entities/DbUserListContributorStat-1.html":{},"license.html":{}}}],["async",{"_index":72,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"controllers/AuthController.html":{},"controllers/BlogSummaryController.html":{},"injectables/BlogSummaryService.html":{},"interfaces/ChatResponse.html":{},"controllers/CodeExplanationController.html":{},"injectables/CodeExplanationService.html":{},"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"controllers/CodeTestSuggestionController.html":{},"injectables/CodeTestSuggestionService.html":{},"injectables/CommitAuthorsService.html":{},"injectables/CommitsService.html":{},"injectables/ContributionService.html":{},"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"injectables/CouponService.html":{},"injectables/CustomLogger.html":{},"injectables/CustomerService.html":{},"controllers/EmojiController.html":{},"injectables/EmojiService.html":{},"controllers/EndorsementController.html":{},"injectables/EndorsementService.html":{},"controllers/HealthController.html":{},"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"controllers/IssueSummaryController.html":{},"injectables/IssueSummaryService.html":{},"injectables/LogService.html":{},"injectables/OpenAiService.html":{},"injectables/PagerService.html":{},"interfaces/PaginationInput.html":{},"controllers/PizzaOvenController.html":{},"injectables/PizzaOvenService.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestReviewService.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeService.html":{},"injectables/StripeSubscriptionService.html":{},"controllers/StripeWebhookController.html":{},"injectables/SubmitService.html":{},"injectables/SupabaseStrategy.html":{},"injectables/TierService.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowingController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"injectables/UserListService.html":{},"controllers/UserListStatsController.html":{},"injectables/UserListStatsService.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"injectables/UserOrganizationService.html":{},"controllers/UserRecommendationController.html":{},"injectables/UserReposService.html":{},"injectables/VoteService.html":{},"miscellaneous/variables.html":{}}}],["auth",{"_index":530,"title":{},"body":{"controllers/AuthController.html":{},"classes/SupabaseAuthDto.html":{},"injectables/SupabaseStrategy.html":{},"controllers/UserCollaborationController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["auth.controller",{"_index":736,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth/auth.module",{"_index":353,"title":{},"body":{"modules/AppModule.html":{},"modules/EndorsementModule.html":{}}}],["auth/supabase.guard",{"_index":776,"title":{},"body":{"controllers/BlogSummaryController.html":{},"controllers/CodeExplanationController.html":{},"controllers/CodeRefactorSuggestionController.html":{},"controllers/CodeTestSuggestionController.html":{},"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"controllers/IssueSummaryController.html":{},"controllers/PullRequestDescriptionController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserEndorsementController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"controllers/UserNotificationController.html":{},"controllers/UserRecommendationController.html":{}}}],["auth/supabase.user.decorator",{"_index":2761,"title":{},"body":{"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserEndorsementController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"controllers/UserNotificationController.html":{},"controllers/UserRecommendationController.html":{}}}],["authcontroller",{"_index":526,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authenticate",{"_index":4135,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["authenticate(req",{"_index":4138,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["authenticated",{"_index":544,"title":{},"body":{"controllers/AuthController.html":{},"controllers/InsightController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"classes/SupabaseAuthDto.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserEndorsementController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"controllers/UserNotificationController.html":{},"controllers/UserRecommendationController.html":{}}}],["authentication",{"_index":5877,"title":{},"body":{"miscellaneous/variables.html":{}}}],["authguard",{"_index":4132,"title":{},"body":{"injectables/SupabaseGuard.html":{}}}],["authguard(\"supabase",{"_index":4133,"title":{},"body":{"injectables/SupabaseGuard.html":{}}}],["authmodule",{"_index":260,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/EndorsementModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":971,"title":{},"body":{"classes/CommitAuthorDto.html":{},"entities/DbCommitAuthors.html":{},"entities/DbCommits.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"controllers/PizzaOvenController.html":{},"properties.html":{}}}],["author/:id",{"_index":3167,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["author/:id')@apioperation({operationid",{"_index":3126,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["author_avatar",{"_index":1890,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["author_email",{"_index":969,"title":{},"body":{"classes/CommitAuthorDto.html":{}}}],["author_login",{"_index":229,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"injectables/PullRequestService.html":{},"injectables/UserListStatsService.html":{}}}],["authorization",{"_index":860,"title":{},"body":{"interfaces/ChatResponse.html":{},"injectables/OpenAiService.html":{}}}],["authorized",{"_index":2828,"title":{},"body":{"controllers/InsightController.html":{},"injectables/UserListService.html":{}}}],["authors",{"_index":3116,"title":{},"body":{"controllers/PizzaOvenController.html":{},"license.html":{}}}],["authors.service",{"_index":3137,"title":{},"body":{"controllers/PizzaOvenController.html":{},"modules/PizzaOvenModule.html":{}}}],["authors.service.ts",{"_index":977,"title":{},"body":{"injectables/CommitAuthorsService.html":{},"coverage.html":{}}}],["authors.service.ts:11",{"_index":981,"title":{},"body":{"injectables/CommitAuthorsService.html":{}}}],["authors.service.ts:18",{"_index":983,"title":{},"body":{"injectables/CommitAuthorsService.html":{}}}],["authors.service.ts:24",{"_index":985,"title":{},"body":{"injectables/CommitAuthorsService.html":{}}}],["authors.service.ts:35",{"_index":987,"title":{},"body":{"injectables/CommitAuthorsService.html":{}}}],["authors/:id",{"_index":3152,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["authors/:id')@apioperation({operationid",{"_index":3104,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["authors/list",{"_index":3156,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["authors/list')@apioperation({operationid",{"_index":3115,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["authuser${relation",{"_index":3656,"title":{},"body":{"injectables/RepoService.html":{}}}],["authuser${relation}.user_id",{"_index":3657,"title":{},"body":{"injectables/RepoService.html":{}}}],["autoloadentities",{"_index":455,"title":{},"body":{"modules/AppModule.html":{}}}],["available",{"_index":5608,"title":{},"body":{"modules.html":{},"miscellaneous/variables.html":{}}}],["avatar",{"_index":1912,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["average",{"_index":2583,"title":{},"body":{"classes/FilterListContributorsDto.html":{}}}],["avg_merge_time",{"_index":5016,"title":{},"body":{"injectables/UserListService.html":{}}}],["await",{"_index":123,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"controllers/AuthController.html":{},"controllers/BlogSummaryController.html":{},"interfaces/ChatResponse.html":{},"controllers/CodeExplanationController.html":{},"injectables/CodeExplanationService.html":{},"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"controllers/CodeTestSuggestionController.html":{},"injectables/CommitAuthorsService.html":{},"injectables/CommitsService.html":{},"injectables/ContributionService.html":{},"injectables/CouponService.html":{},"injectables/EmojiService.html":{},"controllers/EndorsementController.html":{},"injectables/EndorsementService.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"controllers/IssueSummaryController.html":{},"injectables/LogService.html":{},"injectables/OpenAiService.html":{},"injectables/PagerService.html":{},"interfaces/PaginationInput.html":{},"controllers/PizzaOvenController.html":{},"injectables/PizzaOvenService.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeService.html":{},"controllers/StripeWebhookController.html":{},"injectables/SubmitService.html":{},"injectables/TierService.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowingController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"injectables/UserListService.html":{},"injectables/UserListStatsService.html":{},"injectables/UserNotificationService.html":{},"injectables/UserOrganizationService.html":{},"controllers/UserRecommendationController.html":{},"injectables/UserReposService.html":{},"injectables/VoteService.html":{},"miscellaneous/variables.html":{}}}],["aws:main",{"_index":1990,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["aws:main'})@column({type",{"_index":1974,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["back",{"_index":1880,"title":{},"body":{"entities/DbPRInsight.html":{},"controllers/RepoContributionsController.html":{}}}],["backend",{"_index":5622,"title":{},"body":{"properties.html":{}}}],["badrequestexception",{"_index":774,"title":{},"body":{"controllers/BlogSummaryController.html":{},"controllers/CodeExplanationController.html":{},"controllers/CodeRefactorSuggestionController.html":{},"controllers/CodeTestSuggestionController.html":{},"controllers/IssueSummaryController.html":{},"controllers/PizzaOvenController.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestService.html":{},"controllers/StripeWebhookController.html":{},"controllers/UserInsightsController.html":{}}}],["bake",{"_index":2934,"title":{},"body":{"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"controllers/PizzaOvenController.html":{}}}],["baked",{"_index":1582,"title":{},"body":{"entities/DbBakedRepo.html":{},"entities/DbCommits.html":{},"controllers/PizzaOvenController.html":{}}}],["baked_repo",{"_index":1611,"title":{},"body":{"entities/DbCommits.html":{}}}],["baked_repo.commits",{"_index":1635,"title":{},"body":{"entities/DbCommits.html":{}}}],["baked_repo.commits)@joincolumn({name",{"_index":1617,"title":{},"body":{"entities/DbCommits.html":{}}}],["baked_repo_id",{"_index":1612,"title":{},"body":{"entities/DbCommits.html":{}}}],["baked_repos",{"_index":1598,"title":{},"body":{"entities/DbBakedRepo.html":{}}}],["bakedreporepository",{"_index":3181,"title":{},"body":{"injectables/PizzaOvenService.html":{}}}],["bakeoptionsinfo",{"_index":3133,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["bakerepodto",{"_index":738,"title":{"classes/BakeRepoDto.html":{}},"body":{"classes/BakeRepoDto.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"controllers/PizzaOvenController.html":{},"injectables/PizzaOvenService.html":{},"coverage.html":{}}}],["bakerepoinfo",{"_index":2936,"title":{},"body":{"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"injectables/PizzaOvenService.html":{}}}],["bakerepoinfo.url",{"_index":2942,"title":{},"body":{"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"injectables/PizzaOvenService.html":{}}}],["bakerepoinfo.wait",{"_index":3193,"title":{},"body":{"injectables/PizzaOvenService.html":{}}}],["baking",{"_index":751,"title":{},"body":{"classes/BakeRepoDto.html":{}}}],["base",{"_index":5815,"title":{},"body":{"miscellaneous/variables.html":{}}}],["based",{"_index":918,"title":{},"body":{"controllers/CodeRefactorSuggestionController.html":{},"controllers/ContributorInsightsController.html":{},"controllers/EndorsementController.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/RepoFilterService.html":{},"controllers/UserRecommendationController.html":{}}}],["baseentity",{"_index":1589,"title":{},"body":{"entities/DbBakedRepo.html":{},"entities/DbCommitAuthors.html":{},"entities/DbCommits.html":{},"entities/DbContribution.html":{},"entities/DbCoupon.html":{},"entities/DbCustomer.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbPullRequestReview.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserList.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{}}}],["basefilterquerybuilder",{"_index":3587,"title":{},"body":{"injectables/RepoService.html":{}}}],["basefilterquerybuilder(startdate",{"_index":3595,"title":{},"body":{"injectables/RepoService.html":{}}}],["baselistcontributorquerybuilder",{"_index":4949,"title":{},"body":{"injectables/UserListService.html":{}}}],["basequerybuilder",{"_index":67,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/CommitAuthorsService.html":{},"injectables/CommitsService.html":{},"injectables/CouponService.html":{},"injectables/CustomerService.html":{},"injectables/EmojiService.html":{},"injectables/EndorsementService.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightsService.html":{},"injectables/PizzaOvenService.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoService.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeSubscriptionService.html":{},"injectables/SubmitService.html":{},"injectables/UserCollaborationService.html":{},"injectables/UserFollowService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserListService.html":{},"injectables/UserListStatsService.html":{},"injectables/UserNotificationService.html":{},"injectables/UserOrganizationService.html":{},"injectables/UserReposService.html":{},"injectables/VoteService.html":{}}}],["baseuserquerybuilder",{"_index":4950,"title":{},"body":{"injectables/UserListService.html":{}}}],["bdougie",{"_index":1422,"title":{},"body":{"classes/CreateUserCollaborationDto.html":{},"classes/DbFilteredUser.html":{},"entities/DbPullRequest.html":{},"entities/DbPullRequestReview.html":{},"entities/DbRepoLoginContributions.html":{},"classes/DbTopUser.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserListContributorStat.html":{},"entities/DbUserListContributorStat-1.html":{},"entities/DbUserNotification.html":{},"classes/FilterListContributorsDto.html":{},"classes/FollowManyUsersDto.html":{},"classes/PullRequestPageOptionsDto.html":{}}}],["bdougie'})@column('text",{"_index":1958,"title":{},"body":{"entities/DbPullRequest.html":{},"entities/DbPullRequestReview.html":{}}}],["bdougie'})@column({type",{"_index":2025,"title":{},"body":{"entities/DbRepoLoginContributions.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserListContributorStat.html":{},"entities/DbUserListContributorStat-1.html":{}}}],["bdougie'})@isstring",{"_index":1419,"title":{},"body":{"classes/CreateUserCollaborationDto.html":{}}}],["bdougie'})@isstring()@isoptional",{"_index":2572,"title":{},"body":{"classes/FilterListContributorsDto.html":{},"classes/PullRequestPageOptionsDto.html":{}}}],["bearer",{"_index":861,"title":{},"body":{"interfaces/ChatResponse.html":{},"injectables/OpenAiService.html":{},"miscellaneous/variables.html":{}}}],["before",{"_index":5370,"title":{},"body":{"index.html":{}}}],["being",{"_index":5461,"title":{},"body":{"index.html":{}}}],["belongs",{"_index":5023,"title":{},"body":{"injectables/UserListService.html":{}}}],["below",{"_index":813,"title":{},"body":{"injectables/BlogSummaryService.html":{},"injectables/CodeExplanationService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"injectables/IssueSummaryService.html":{},"injectables/PullRequestDescriptionService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["beneficial",{"_index":5462,"title":{},"body":{"index.html":{}}}],["beta",{"_index":5744,"title":{},"body":{"miscellaneous/variables.html":{}}}],["beta.1",{"_index":5618,"title":{},"body":{"properties.html":{}}}],["beta.api.opensauced.pizza",{"_index":5356,"title":{},"body":{"index.html":{}}}],["between",{"_index":222,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["bigint",{"_index":1622,"title":{},"body":{"entities/DbCommits.html":{},"entities/DbContribution.html":{},"entities/DbContributionStatTimeframe.html":{},"entities/DbContributionsProjects.html":{},"entities/DbContributorCategoryTimeframe.html":{},"entities/DbInsight.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoLoginContributions.html":{},"entities/DbSubscription.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributorStat.html":{},"entities/DbUserListContributorStat-1.html":{},"entities/DbUserNotification.html":{}}}],["billing_address_collection",{"_index":3939,"title":{},"body":{"injectables/StripeService.html":{}}}],["binaries",{"_index":5361,"title":{},"body":{"index.html":{}}}],["bio",{"_index":667,"title":{},"body":{"controllers/AuthController.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{}}}],["bits",{"_index":5508,"title":{},"body":{"index.html":{}}}],["block",{"_index":1097,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/ContributorPullRequestsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/UserListMostActiveContributorsDto.html":{},"classes/UserRepoOptionsDto.html":{}}}],["blocks",{"_index":3301,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["blog",{"_index":778,"title":{},"body":{"controllers/BlogSummaryController.html":{},"modules/BlogSummaryModule.html":{},"injectables/BlogSummaryService.html":{},"classes/CreateBlogSummaryDto.html":{},"coverage.html":{}}}],["blog'})@apibearerauth()@useguards(supabaseguard)@apibadrequestresponse({description",{"_index":768,"title":{},"body":{"controllers/BlogSummaryController.html":{}}}],["blog_post",{"_index":1448,"title":{},"body":{"classes/CreateUserHighlightDto.html":{}}}],["blogmarkdown",{"_index":1309,"title":{},"body":{"classes/CreateBlogSummaryDto.html":{}}}],["blogs",{"_index":759,"title":{},"body":{"controllers/BlogSummaryController.html":{}}}],["blogs/issue",{"_index":425,"title":{},"body":{"modules/AppModule.html":{}}}],["blogsummarycontroller",{"_index":756,"title":{"controllers/BlogSummaryController.html":{}},"body":{"controllers/BlogSummaryController.html":{},"modules/BlogSummaryModule.html":{},"coverage.html":{}}}],["blogsummarymodule",{"_index":261,"title":{"modules/BlogSummaryModule.html":{}},"body":{"modules/AppModule.html":{},"modules/BlogSummaryModule.html":{},"modules.html":{},"overview.html":{}}}],["blogsummaryservice",{"_index":780,"title":{"injectables/BlogSummaryService.html":{}},"body":{"controllers/BlogSummaryController.html":{},"modules/BlogSummaryModule.html":{},"injectables/BlogSummaryService.html":{},"coverage.html":{},"overview.html":{}}}],["blogtitle",{"_index":1310,"title":{},"body":{"classes/CreateBlogSummaryDto.html":{}}}],["body",{"_index":577,"title":{},"body":{"controllers/AuthController.html":{},"controllers/BlogSummaryController.html":{},"interfaces/ChatResponse.html":{},"controllers/CodeExplanationController.html":{},"controllers/CodeRefactorSuggestionController.html":{},"controllers/CodeTestSuggestionController.html":{},"controllers/EndorsementController.html":{},"controllers/IssueSummaryController.html":{},"injectables/OpenAiService.html":{},"controllers/PizzaOvenController.html":{},"controllers/PullRequestDescriptionController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{}}}],["body.interests",{"_index":691,"title":{},"body":{"controllers/AuthController.html":{}}}],["body.timezone",{"_index":690,"title":{},"body":{"controllers/AuthController.html":{}}}],["boolean",{"_index":747,"title":{},"body":{"classes/BakeRepoDto.html":{},"classes/ContributionPageMetaDto.html":{},"classes/Contributor.html":{},"classes/CreateInsightDto.html":{},"classes/CreateUserListDto.html":{},"entities/DbInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbSubscription.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserList.html":{},"guards/EndorsementTokenGuard.html":{},"classes/PageMetaDto.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"classes/VotedRepoDto.html":{}}}],["bootstrap",{"_index":5321,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["boxes",{"_index":2665,"title":{},"body":{"classes/GeneratePullRequestDescriptionDto.html":{}}}],["branch",{"_index":1661,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbPullRequest.html":{},"index.html":{}}}],["brandonroberts",{"_index":2632,"title":{},"body":{"classes/FollowManyUsersDto.html":{}}}],["break",{"_index":110,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoService.html":{},"injectables/UserListStatsService.html":{},"index.html":{}}}],["brian",{"_index":1777,"title":{},"body":{"classes/DbFilteredUser.html":{},"entities/DbInsightMember.html":{},"entities/DbUserHighlight.html":{}}}],["browse",{"_index":5606,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":5603,"title":{},"body":{"modules.html":{}}}],["bufferlogs",{"_index":5728,"title":{},"body":{"miscellaneous/variables.html":{}}}],["bug",{"_index":2660,"title":{},"body":{"classes/GeneratePullRequestDescriptionDto.html":{}}}],["bugs",{"_index":5631,"title":{},"body":{"properties.html":{}}}],["build",{"_index":5421,"title":{},"body":{"index.html":{}}}],["builder",{"_index":69,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/CommitAuthorsService.html":{},"injectables/CommitsService.html":{},"injectables/CouponService.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightsService.html":{},"injectables/PizzaOvenService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoService.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/SubmitService.html":{},"injectables/UserCollaborationService.html":{},"injectables/UserFollowService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserListService.html":{},"injectables/UserListStatsService.html":{},"injectables/UserNotificationService.html":{},"injectables/UserOrganizationService.html":{},"injectables/UserReposService.html":{},"injectables/VoteService.html":{}}}],["builder/selectquerybuilder",{"_index":3084,"title":{},"body":{"injectables/PagerService.html":{},"interfaces/PaginationInput.html":{}}}],["builds",{"_index":5483,"title":{},"body":{"index.html":{}}}],["bulkfollow",{"_index":4488,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["business",{"_index":5470,"title":{},"body":{"index.html":{}}}],["c",{"_index":5554,"title":{},"body":{"license.html":{}}}],["ca",{"_index":461,"title":{},"body":{"modules/AppModule.html":{},"classes/SupabaseAuthDto.html":{}}}],["call",{"_index":5847,"title":{},"body":{"miscellaneous/variables.html":{}}}],["canaccess",{"_index":4743,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["canactivate",{"_index":2552,"title":{},"body":{"guards/EndorsementTokenGuard.html":{}}}],["canactivate(host",{"_index":2555,"title":{},"body":{"guards/EndorsementTokenGuard.html":{}}}],["cancel",{"_index":2109,"title":{},"body":{"entities/DbSubscription.html":{}}}],["cancel_at",{"_index":2097,"title":{},"body":{"entities/DbSubscription.html":{},"controllers/StripeWebhookController.html":{}}}],["cancel_at_period_end",{"_index":2098,"title":{},"body":{"entities/DbSubscription.html":{},"controllers/StripeWebhookController.html":{}}}],["cancel_url",{"_index":3946,"title":{},"body":{"injectables/StripeService.html":{}}}],["canceled",{"_index":2113,"title":{},"body":{"entities/DbSubscription.html":{}}}],["canceled_at",{"_index":2099,"title":{},"body":{"entities/DbSubscription.html":{},"controllers/StripeWebhookController.html":{}}}],["canupdate",{"_index":4748,"title":{},"body":{"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["canusermanageinsight",{"_index":2859,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["canusermanageinsight(userid",{"_index":2871,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["card",{"_index":3938,"title":{},"body":{"injectables/StripeService.html":{}}}],["cascade",{"_index":1815,"title":{},"body":{"entities/DbInsight.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserList.html":{}}}],["cascade'})@joincolumn({name",{"_index":1811,"title":{},"body":{"entities/DbInsight.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserList.html":{}}}],["case",{"_index":108,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoService.html":{},"injectables/UserListStatsService.html":{},"index.html":{}}}],["catch",{"_index":680,"title":{},"body":{"controllers/AuthController.html":{},"injectables/BlogSummaryService.html":{},"injectables/CodeExplanationService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"injectables/IssueSummaryService.html":{},"injectables/PullRequestDescriptionService.html":{},"controllers/StripeWebhookController.html":{},"injectables/TierService.html":{},"controllers/UserFollowsController.html":{},"controllers/UserInsightsController.html":{}}}],["category",{"_index":5047,"title":{},"body":{"controllers/UserListStatsController.html":{}}}],["certificate",{"_index":5700,"title":{},"body":{"miscellaneous/variables.html":{}}}],["certificates",{"_index":5404,"title":{},"body":{"index.html":{}}}],["certificates:for",{"_index":5400,"title":{},"body":{"index.html":{}}}],["changed",{"_index":1921,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["changed_files",{"_index":1891,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["changes",{"_index":5504,"title":{},"body":{"index.html":{}}}],["channel",{"_index":5544,"title":{},"body":{"index.html":{}}}],["character",{"_index":1575,"title":{},"body":{"entities/DbBakedRepo.html":{},"entities/DbCommitAuthors.html":{},"entities/DbCommits.html":{},"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserList.html":{},"entities/DbUserNotification.html":{}}}],["characters",{"_index":817,"title":{},"body":{"injectables/BlogSummaryService.html":{},"injectables/CodeExplanationService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"injectables/IssueSummaryService.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["charge",{"_index":5558,"title":{},"body":{"license.html":{}}}],["chatresponse",{"_index":842,"title":{"interfaces/ChatResponse.html":{}},"body":{"interfaces/ChatResponse.html":{},"injectables/OpenAiService.html":{},"coverage.html":{}}}],["check",{"_index":502,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"controllers/HealthController.html":{},"injectables/TierService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["check/insert",{"_index":660,"title":{},"body":{"controllers/AuthController.html":{}}}],["checkaddorg",{"_index":4168,"title":{},"body":{"injectables/TierService.html":{}}}],["checkaddorg(userid",{"_index":4170,"title":{},"body":{"injectables/TierService.html":{}}}],["checkauthsession",{"_index":563,"title":{},"body":{"controllers/AuthController.html":{}}}],["checkin",{"_index":5517,"title":{},"body":{"index.html":{}}}],["checkout",{"_index":571,"title":{},"body":{"controllers/AuthController.html":{}}}],["checkout.session.completed",{"_index":3991,"title":{},"body":{"controllers/StripeWebhookController.html":{},"miscellaneous/variables.html":{}}}],["checkoutsession",{"_index":4050,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["checkoutsession.customer",{"_index":4055,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["checkoutsession.mode",{"_index":4052,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["checkoutsession.subscription",{"_index":4053,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["checkowner",{"_index":2874,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["checks",{"_index":4491,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["chinese",{"_index":1324,"title":{},"body":{"classes/CreateBlogSummaryDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{}}}],["choices",{"_index":845,"title":{},"body":{"interfaces/ChatResponse.html":{},"injectables/OpenAiService.html":{}}}],["chore",{"_index":2658,"title":{},"body":{"classes/GeneratePullRequestDescriptionDto.html":{}}}],["churned",{"_index":1241,"title":{},"body":{"controllers/ContributorInsightsController.html":{}}}],["cito",{"_index":5451,"title":{},"body":{"index.html":{}}}],["claim",{"_index":5594,"title":{},"body":{"license.html":{}}}],["class",{"_index":60,"title":{"classes/ApplyUserCouponDto.html":{},"classes/BakeRepoDto.html":{},"classes/CollaboratorsDto.html":{},"classes/CommitAuthorDto.html":{},"classes/CommitsDto.html":{},"classes/ContributionPageMetaDto.html":{},"classes/ContributionPageOptionsDto.html":{},"classes/ContributionsByProjectDto.html":{},"classes/ContributionsPageDto.html":{},"classes/ContributionsTimeframeDto.html":{},"classes/Contributor.html":{},"classes/ContributorPullRequestsDto.html":{},"classes/CreateBlogSummaryDto.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateInsightDto.html":{},"classes/CreateInsightMemberDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/CreateLogDto.html":{},"classes/CreateUserCollaborationDto.html":{},"classes/CreateUserHighlightDto.html":{},"classes/CreateUserListDto.html":{},"classes/DatabaseLoggerMiddleware.html":{},"classes/DbFilteredUser.html":{},"classes/DbPullRequestContributor.html":{},"classes/DbTimezone.html":{},"classes/DbTopUser.html":{},"classes/DbUserHighlightReactionResponse.html":{},"classes/DbUserHighlightRepo.html":{},"classes/FilterListContributorsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/FilteredUsersDto.html":{},"classes/FollowManyUsersDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoInfo.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/SupabaseAuthDto.html":{},"classes/TopProjectsDto.html":{},"classes/TopUsersDto.html":{},"classes/UpdateEndorsementDto.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateInsightMemberDto.html":{},"classes/UpdateUserCollaborationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"classes/UserListMostActiveContributorsDto.html":{},"classes/UserOnboardingDto.html":{},"classes/UserRepoOptionsDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"classes/VotedRepoDto.html":{}},"body":{"interfaces/AllContributionsCount.html":{},"modules/ApiServicesModule.html":{},"modules/AppModule.html":{},"classes/ApplyUserCouponDto.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"classes/BakeRepoDto.html":{},"controllers/BlogSummaryController.html":{},"modules/BlogSummaryModule.html":{},"injectables/BlogSummaryService.html":{},"interfaces/ChatResponse.html":{},"controllers/CodeExplanationController.html":{},"injectables/CodeExplanationService.html":{},"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"controllers/CodeTestSuggestionController.html":{},"injectables/CodeTestSuggestionService.html":{},"classes/CollaboratorsDto.html":{},"classes/CommitAuthorDto.html":{},"injectables/CommitAuthorsService.html":{},"classes/CommitsDto.html":{},"injectables/CommitsService.html":{},"modules/ContributionModule.html":{},"classes/ContributionPageMetaDto.html":{},"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"classes/ContributionsByProjectDto.html":{},"classes/ContributionsPageDto.html":{},"classes/ContributionsTimeframeDto.html":{},"classes/Contributor.html":{},"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"modules/ContributorModule.html":{},"classes/ContributorPullRequestsDto.html":{},"modules/CouponModule.html":{},"injectables/CouponService.html":{},"classes/CreateBlogSummaryDto.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateInsightDto.html":{},"classes/CreateInsightMemberDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/CreateLogDto.html":{},"classes/CreateUserCollaborationDto.html":{},"classes/CreateUserHighlightDto.html":{},"classes/CreateUserListDto.html":{},"injectables/CustomLogger.html":{},"modules/CustomerModule.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"entities/DbBakedRepo.html":{},"entities/DbCommitAuthors.html":{},"entities/DbCommits.html":{},"entities/DbContribution.html":{},"entities/DbContributionStatTimeframe.html":{},"entities/DbContributionsProjects.html":{},"entities/DbContributorCategoryTimeframe.html":{},"entities/DbCoupon.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"classes/DbFilteredUser.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbPullRequestReview.html":{},"entities/DbRepoLoginContributions.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"classes/DbTimezone.html":{},"classes/DbTopUser.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightReactionResponse.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserListContributorStat.html":{},"entities/DbUserListContributorStat-1.html":{},"entities/DbUserNotification.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"controllers/EmojiController.html":{},"modules/EmojiModule.html":{},"injectables/EmojiService.html":{},"controllers/EndorsementController.html":{},"modules/EndorsementModule.html":{},"injectables/EndorsementService.html":{},"guards/EndorsementTokenGuard.html":{},"classes/FilterListContributorsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/FilteredUsersDto.html":{},"classes/FollowManyUsersDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"controllers/HighlightController.html":{},"modules/HighlightModule.html":{},"classes/HighlightOptionsDto.html":{},"injectables/HttpLoggerMiddleware.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"injectables/InsightRepoService.html":{},"modules/InsightsModule.html":{},"injectables/InsightsService.html":{},"controllers/IssueSummaryController.html":{},"modules/IssueSummaryModule.html":{},"injectables/IssueSummaryService.html":{},"modules/LogModule.html":{},"injectables/LogService.html":{},"modules/OpenAiModule.html":{},"injectables/OpenAiService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{},"injectables/PagerService.html":{},"interfaces/PaginationInput.html":{},"controllers/PizzaOvenController.html":{},"modules/PizzaOvenModule.html":{},"injectables/PizzaOvenService.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestInsightsService.html":{},"modules/PullRequestModule.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestReviewService.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"modules/RepoFilterModule.html":{},"injectables/RepoFilterService.html":{},"classes/RepoInfo.html":{},"modules/RepoModule.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"modules/StarModule.html":{},"injectables/StarService.html":{},"modules/StargazeModule.html":{},"injectables/StargazeService.html":{},"modules/StripeModule.html":{},"injectables/StripeService.html":{},"modules/StripeSubscriptionModule.html":{},"injectables/StripeSubscriptionService.html":{},"modules/StripeWebHookModule.html":{},"controllers/StripeWebhookController.html":{},"modules/SubmitModule.html":{},"injectables/SubmitService.html":{},"classes/SupabaseAuthDto.html":{},"injectables/SupabaseGuard.html":{},"injectables/SupabaseStrategy.html":{},"modules/TierModule.html":{},"injectables/TierService.html":{},"classes/TopProjectsDto.html":{},"classes/TopUsersDto.html":{},"classes/UpdateEndorsementDto.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateInsightMemberDto.html":{},"classes/UpdateUserCollaborationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowingController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"modules/UserListModule.html":{},"classes/UserListMostActiveContributorsDto.html":{},"injectables/UserListService.html":{},"controllers/UserListStatsController.html":{},"injectables/UserListStatsService.html":{},"modules/UserModule.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"classes/UserOnboardingDto.html":{},"injectables/UserOrganizationService.html":{},"controllers/UserRecommendationController.html":{},"classes/UserRepoOptionsDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"modules/UserReposModule.html":{},"injectables/UserReposService.html":{},"modules/VoteModule.html":{},"injectables/VoteService.html":{},"classes/VotedRepoDto.html":{},"coverage.html":{}}}],["classes",{"_index":508,"title":{},"body":{"classes/ApplyUserCouponDto.html":{},"classes/BakeRepoDto.html":{},"classes/CollaboratorsDto.html":{},"classes/CommitAuthorDto.html":{},"classes/CommitsDto.html":{},"classes/ContributionPageMetaDto.html":{},"classes/ContributionPageOptionsDto.html":{},"classes/ContributionsByProjectDto.html":{},"classes/ContributionsPageDto.html":{},"classes/ContributionsTimeframeDto.html":{},"classes/Contributor.html":{},"classes/ContributorPullRequestsDto.html":{},"classes/CreateBlogSummaryDto.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateInsightDto.html":{},"classes/CreateInsightMemberDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/CreateLogDto.html":{},"classes/CreateUserCollaborationDto.html":{},"classes/CreateUserHighlightDto.html":{},"classes/CreateUserListDto.html":{},"classes/DatabaseLoggerMiddleware.html":{},"classes/DbFilteredUser.html":{},"classes/DbPullRequestContributor.html":{},"classes/DbTimezone.html":{},"classes/DbTopUser.html":{},"classes/DbUserHighlightReactionResponse.html":{},"classes/DbUserHighlightRepo.html":{},"classes/FilterListContributorsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/FilteredUsersDto.html":{},"classes/FollowManyUsersDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoInfo.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/SupabaseAuthDto.html":{},"classes/TopProjectsDto.html":{},"classes/TopUsersDto.html":{},"classes/UpdateEndorsementDto.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateInsightMemberDto.html":{},"classes/UpdateUserCollaborationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"classes/UserListMostActiveContributorsDto.html":{},"classes/UserOnboardingDto.html":{},"classes/UserRepoOptionsDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"classes/VotedRepoDto.html":{},"overview.html":{}}}],["clc",{"_index":317,"title":{},"body":{"modules/AppModule.html":{},"classes/DatabaseLoggerMiddleware.html":{},"injectables/HttpLoggerMiddleware.html":{}}}],["clc.green(`{msg",{"_index":492,"title":{},"body":{"modules/AppModule.html":{}}}],["clc.magentabright(message",{"_index":2818,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{}}}],["clc.red(`+${string(time)}ms",{"_index":1565,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["clc.red(message",{"_index":2815,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{}}}],["clc.yellow(`+${string(date.now",{"_index":5687,"title":{},"body":{"miscellaneous/variables.html":{}}}],["clc.yellow(`[{context",{"_index":491,"title":{},"body":{"modules/AppModule.html":{}}}],["cli_split_kwargs",{"_index":1992,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["cli_split_kwargs'})@column('text",{"_index":1972,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["click",{"_index":5529,"title":{},"body":{"index.html":{}}}],["clickable",{"_index":5813,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cliduration",{"_index":2805,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["client",{"_index":5624,"title":{},"body":{"properties.html":{},"miscellaneous/variables.html":{}}}],["clone",{"_index":743,"title":{},"body":{"classes/BakeRepoDto.html":{},"entities/DbBakedRepo.html":{}}}],["clone_url",{"_index":1572,"title":{},"body":{"entities/DbBakedRepo.html":{}}}],["close",{"_index":1924,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["closed",{"_index":1985,"title":{},"body":{"entities/DbPullRequest.html":{},"classes/PullRequestPageOptionsDto.html":{},"miscellaneous/enumerations.html":{}}}],["closed'})@column('text",{"_index":1970,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["closed_at",{"_index":1892,"title":{},"body":{"entities/DbPullRequest.html":{},"classes/PullRequestPageOptionsDto.html":{},"miscellaneous/enumerations.html":{}}}],["closed_pull_requests\".\"updated_at",{"_index":3644,"title":{},"body":{"injectables/RepoService.html":{}}}],["cluster_apiservicesmodule",{"_index":245,"title":{},"body":{"modules/ApiServicesModule.html":{},"overview.html":{}}}],["cluster_apiservicesmodule_exports",{"_index":247,"title":{},"body":{"modules/ApiServicesModule.html":{},"overview.html":{}}}],["cluster_apiservicesmodule_providers",{"_index":246,"title":{},"body":{"modules/ApiServicesModule.html":{},"overview.html":{}}}],["cluster_appmodule",{"_index":258,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":259,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":726,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":729,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":727,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_providers",{"_index":728,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_blogsummarymodule",{"_index":789,"title":{},"body":{"modules/BlogSummaryModule.html":{},"overview.html":{}}}],["cluster_blogsummarymodule_exports",{"_index":790,"title":{},"body":{"modules/BlogSummaryModule.html":{},"overview.html":{}}}],["cluster_blogsummarymodule_imports",{"_index":792,"title":{},"body":{"modules/BlogSummaryModule.html":{}}}],["cluster_blogsummarymodule_providers",{"_index":791,"title":{},"body":{"modules/BlogSummaryModule.html":{},"overview.html":{}}}],["cluster_contributionmodule",{"_index":1027,"title":{},"body":{"modules/ContributionModule.html":{},"overview.html":{}}}],["cluster_contributionmodule_exports",{"_index":1029,"title":{},"body":{"modules/ContributionModule.html":{},"overview.html":{}}}],["cluster_contributionmodule_imports",{"_index":1030,"title":{},"body":{"modules/ContributionModule.html":{}}}],["cluster_contributionmodule_providers",{"_index":1028,"title":{},"body":{"modules/ContributionModule.html":{},"overview.html":{}}}],["cluster_contributormodule",{"_index":1265,"title":{},"body":{"modules/ContributorModule.html":{}}}],["cluster_contributormodule_imports",{"_index":1266,"title":{},"body":{"modules/ContributorModule.html":{}}}],["cluster_couponmodule",{"_index":1280,"title":{},"body":{"modules/CouponModule.html":{},"overview.html":{}}}],["cluster_couponmodule_exports",{"_index":1281,"title":{},"body":{"modules/CouponModule.html":{},"overview.html":{}}}],["cluster_couponmodule_providers",{"_index":1282,"title":{},"body":{"modules/CouponModule.html":{},"overview.html":{}}}],["cluster_customermodule",{"_index":1501,"title":{},"body":{"modules/CustomerModule.html":{},"overview.html":{}}}],["cluster_customermodule_exports",{"_index":1502,"title":{},"body":{"modules/CustomerModule.html":{},"overview.html":{}}}],["cluster_customermodule_providers",{"_index":1503,"title":{},"body":{"modules/CustomerModule.html":{},"overview.html":{}}}],["cluster_emojimodule",{"_index":2391,"title":{},"body":{"modules/EmojiModule.html":{},"overview.html":{}}}],["cluster_emojimodule_providers",{"_index":2392,"title":{},"body":{"modules/EmojiModule.html":{},"overview.html":{}}}],["cluster_endorsementmodule",{"_index":2493,"title":{},"body":{"modules/EndorsementModule.html":{},"overview.html":{}}}],["cluster_endorsementmodule_exports",{"_index":2494,"title":{},"body":{"modules/EndorsementModule.html":{},"overview.html":{}}}],["cluster_endorsementmodule_imports",{"_index":2496,"title":{},"body":{"modules/EndorsementModule.html":{}}}],["cluster_endorsementmodule_providers",{"_index":2495,"title":{},"body":{"modules/EndorsementModule.html":{},"overview.html":{}}}],["cluster_highlightmodule",{"_index":2790,"title":{},"body":{"modules/HighlightModule.html":{}}}],["cluster_highlightmodule_imports",{"_index":2791,"title":{},"body":{"modules/HighlightModule.html":{}}}],["cluster_insightsmodule",{"_index":2948,"title":{},"body":{"modules/InsightsModule.html":{},"overview.html":{}}}],["cluster_insightsmodule_exports",{"_index":2951,"title":{},"body":{"modules/InsightsModule.html":{},"overview.html":{}}}],["cluster_insightsmodule_imports",{"_index":2950,"title":{},"body":{"modules/InsightsModule.html":{}}}],["cluster_insightsmodule_providers",{"_index":2949,"title":{},"body":{"modules/InsightsModule.html":{},"overview.html":{}}}],["cluster_issuesummarymodule",{"_index":3010,"title":{},"body":{"modules/IssueSummaryModule.html":{},"overview.html":{}}}],["cluster_issuesummarymodule_exports",{"_index":3012,"title":{},"body":{"modules/IssueSummaryModule.html":{},"overview.html":{}}}],["cluster_issuesummarymodule_imports",{"_index":3013,"title":{},"body":{"modules/IssueSummaryModule.html":{}}}],["cluster_issuesummarymodule_providers",{"_index":3011,"title":{},"body":{"modules/IssueSummaryModule.html":{},"overview.html":{}}}],["cluster_logmodule",{"_index":3024,"title":{},"body":{"modules/LogModule.html":{},"overview.html":{}}}],["cluster_logmodule_exports",{"_index":3025,"title":{},"body":{"modules/LogModule.html":{},"overview.html":{}}}],["cluster_logmodule_providers",{"_index":3026,"title":{},"body":{"modules/LogModule.html":{},"overview.html":{}}}],["cluster_openaimodule",{"_index":3044,"title":{},"body":{"modules/OpenAiModule.html":{},"overview.html":{}}}],["cluster_openaimodule_exports",{"_index":3046,"title":{},"body":{"modules/OpenAiModule.html":{},"overview.html":{}}}],["cluster_openaimodule_providers",{"_index":3045,"title":{},"body":{"modules/OpenAiModule.html":{},"overview.html":{}}}],["cluster_pizzaovenmodule",{"_index":3169,"title":{},"body":{"modules/PizzaOvenModule.html":{},"overview.html":{}}}],["cluster_pizzaovenmodule_exports",{"_index":3171,"title":{},"body":{"modules/PizzaOvenModule.html":{},"overview.html":{}}}],["cluster_pizzaovenmodule_imports",{"_index":3172,"title":{},"body":{"modules/PizzaOvenModule.html":{}}}],["cluster_pizzaovenmodule_providers",{"_index":3170,"title":{},"body":{"modules/PizzaOvenModule.html":{},"overview.html":{}}}],["cluster_pullrequestmodule",{"_index":3332,"title":{},"body":{"modules/PullRequestModule.html":{},"overview.html":{}}}],["cluster_pullrequestmodule_exports",{"_index":3333,"title":{},"body":{"modules/PullRequestModule.html":{},"overview.html":{}}}],["cluster_pullrequestmodule_imports",{"_index":3335,"title":{},"body":{"modules/PullRequestModule.html":{},"overview.html":{}}}],["cluster_pullrequestmodule_providers",{"_index":3334,"title":{},"body":{"modules/PullRequestModule.html":{},"overview.html":{}}}],["cluster_repofiltermodule",{"_index":3521,"title":{},"body":{"modules/RepoFilterModule.html":{},"overview.html":{}}}],["cluster_repofiltermodule_exports",{"_index":3522,"title":{},"body":{"modules/RepoFilterModule.html":{},"overview.html":{}}}],["cluster_repofiltermodule_providers",{"_index":3523,"title":{},"body":{"modules/RepoFilterModule.html":{},"overview.html":{}}}],["cluster_repomodule",{"_index":3564,"title":{},"body":{"modules/RepoModule.html":{},"overview.html":{}}}],["cluster_repomodule_exports",{"_index":3567,"title":{},"body":{"modules/RepoModule.html":{},"overview.html":{}}}],["cluster_repomodule_imports",{"_index":3565,"title":{},"body":{"modules/RepoModule.html":{}}}],["cluster_repomodule_providers",{"_index":3566,"title":{},"body":{"modules/RepoModule.html":{},"overview.html":{}}}],["cluster_stargazemodule",{"_index":3890,"title":{},"body":{"modules/StargazeModule.html":{},"overview.html":{}}}],["cluster_stargazemodule_exports",{"_index":3891,"title":{},"body":{"modules/StargazeModule.html":{},"overview.html":{}}}],["cluster_stargazemodule_imports",{"_index":3893,"title":{},"body":{"modules/StargazeModule.html":{}}}],["cluster_stargazemodule_providers",{"_index":3892,"title":{},"body":{"modules/StargazeModule.html":{},"overview.html":{}}}],["cluster_starmodule",{"_index":3861,"title":{},"body":{"modules/StarModule.html":{},"overview.html":{}}}],["cluster_starmodule_exports",{"_index":3863,"title":{},"body":{"modules/StarModule.html":{},"overview.html":{}}}],["cluster_starmodule_imports",{"_index":3862,"title":{},"body":{"modules/StarModule.html":{}}}],["cluster_starmodule_providers",{"_index":3864,"title":{},"body":{"modules/StarModule.html":{},"overview.html":{}}}],["cluster_stripemodule",{"_index":3916,"title":{},"body":{"modules/StripeModule.html":{},"overview.html":{}}}],["cluster_stripemodule_exports",{"_index":3917,"title":{},"body":{"modules/StripeModule.html":{},"overview.html":{}}}],["cluster_stripemodule_providers",{"_index":3918,"title":{},"body":{"modules/StripeModule.html":{},"overview.html":{}}}],["cluster_stripesubscriptionmodule",{"_index":3950,"title":{},"body":{"modules/StripeSubscriptionModule.html":{},"overview.html":{}}}],["cluster_stripesubscriptionmodule_exports",{"_index":3951,"title":{},"body":{"modules/StripeSubscriptionModule.html":{},"overview.html":{}}}],["cluster_stripesubscriptionmodule_providers",{"_index":3952,"title":{},"body":{"modules/StripeSubscriptionModule.html":{},"overview.html":{}}}],["cluster_stripewebhookmodule",{"_index":3968,"title":{},"body":{"modules/StripeWebHookModule.html":{},"overview.html":{}}}],["cluster_stripewebhookmodule_exports",{"_index":3969,"title":{},"body":{"modules/StripeWebHookModule.html":{},"overview.html":{}}}],["cluster_stripewebhookmodule_imports",{"_index":3970,"title":{},"body":{"modules/StripeWebHookModule.html":{}}}],["cluster_submitmodule",{"_index":4056,"title":{},"body":{"modules/SubmitModule.html":{},"overview.html":{}}}],["cluster_submitmodule_exports",{"_index":4057,"title":{},"body":{"modules/SubmitModule.html":{},"overview.html":{}}}],["cluster_submitmodule_imports",{"_index":4059,"title":{},"body":{"modules/SubmitModule.html":{}}}],["cluster_submitmodule_providers",{"_index":4058,"title":{},"body":{"modules/SubmitModule.html":{},"overview.html":{}}}],["cluster_tiermodule",{"_index":4161,"title":{},"body":{"modules/TierModule.html":{},"overview.html":{}}}],["cluster_tiermodule_exports",{"_index":4163,"title":{},"body":{"modules/TierModule.html":{},"overview.html":{}}}],["cluster_tiermodule_providers",{"_index":4162,"title":{},"body":{"modules/TierModule.html":{},"overview.html":{}}}],["cluster_userlistmodule",{"_index":4929,"title":{},"body":{"modules/UserListModule.html":{},"overview.html":{}}}],["cluster_userlistmodule_exports",{"_index":4931,"title":{},"body":{"modules/UserListModule.html":{},"overview.html":{}}}],["cluster_userlistmodule_imports",{"_index":4930,"title":{},"body":{"modules/UserListModule.html":{}}}],["cluster_userlistmodule_providers",{"_index":4932,"title":{},"body":{"modules/UserListModule.html":{},"overview.html":{}}}],["cluster_usermodule",{"_index":5104,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_exports",{"_index":5107,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_imports",{"_index":5105,"title":{},"body":{"modules/UserModule.html":{}}}],["cluster_usermodule_providers",{"_index":5106,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_userreposmodule",{"_index":5220,"title":{},"body":{"modules/UserReposModule.html":{},"overview.html":{}}}],["cluster_userreposmodule_exports",{"_index":5222,"title":{},"body":{"modules/UserReposModule.html":{},"overview.html":{}}}],["cluster_userreposmodule_imports",{"_index":5223,"title":{},"body":{"modules/UserReposModule.html":{}}}],["cluster_userreposmodule_providers",{"_index":5221,"title":{},"body":{"modules/UserReposModule.html":{},"overview.html":{}}}],["cluster_votemodule",{"_index":5244,"title":{},"body":{"modules/VoteModule.html":{},"overview.html":{}}}],["cluster_votemodule_exports",{"_index":5247,"title":{},"body":{"modules/VoteModule.html":{},"overview.html":{}}}],["cluster_votemodule_imports",{"_index":5246,"title":{},"body":{"modules/VoteModule.html":{}}}],["cluster_votemodule_providers",{"_index":5245,"title":{},"body":{"modules/VoteModule.html":{},"overview.html":{}}}],["cn=localhost\"please",{"_index":5417,"title":{},"body":{"index.html":{}}}],["coalesce(avg((pull_requests.merged_at::date",{"_index":5014,"title":{},"body":{"injectables/UserListService.html":{}}}],["coalesce(count(\"open_pull_requests\".\"id",{"_index":3639,"title":{},"body":{"injectables/RepoService.html":{}}}],["coalesce(sum(\"pull_requests\".\"commits",{"_index":92,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/ContributionService.html":{},"injectables/UserListStatsService.html":{}}}],["code",{"_index":515,"title":{},"body":{"classes/ApplyUserCouponDto.html":{},"controllers/CodeExplanationController.html":{},"injectables/CodeExplanationService.html":{},"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"controllers/CodeTestSuggestionController.html":{},"injectables/CodeTestSuggestionService.html":{},"injectables/CouponService.html":{},"entities/DbCoupon.html":{},"entities/DbInsight.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"injectables/PullRequestDescriptionService.html":{},"modules/PullRequestModule.html":{},"classes/SupabaseAuthDto.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["code'})@apibearerauth()@useguards(supabaseguard)@apibadrequestresponse({description",{"_index":890,"title":{},"body":{"controllers/CodeExplanationController.html":{},"controllers/CodeRefactorSuggestionController.html":{},"controllers/CodeTestSuggestionController.html":{}}}],["code'})@column({type",{"_index":1803,"title":{},"body":{"entities/DbInsight.html":{}}}],["codeblock",{"_index":936,"title":{},"body":{"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{}}}],["codeexplanationcontroller",{"_index":877,"title":{"controllers/CodeExplanationController.html":{}},"body":{"controllers/CodeExplanationController.html":{},"modules/PullRequestModule.html":{},"coverage.html":{}}}],["codeexplanationservice",{"_index":893,"title":{"injectables/CodeExplanationService.html":{}},"body":{"controllers/CodeExplanationController.html":{},"injectables/CodeExplanationService.html":{},"modules/PullRequestModule.html":{},"coverage.html":{},"overview.html":{}}}],["codename",{"_index":5656,"title":{},"body":{"miscellaneous/variables.html":{}}}],["coderefactorsuggestioncontroller",{"_index":911,"title":{"controllers/CodeRefactorSuggestionController.html":{}},"body":{"controllers/CodeRefactorSuggestionController.html":{},"modules/PullRequestModule.html":{},"coverage.html":{}}}],["coderefactorsuggestionservice",{"_index":921,"title":{"injectables/CodeRefactorSuggestionService.html":{}},"body":{"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"modules/PullRequestModule.html":{},"coverage.html":{},"overview.html":{}}}],["codes",{"_index":5843,"title":{},"body":{"miscellaneous/variables.html":{}}}],["codetestsuggestioncontroller",{"_index":940,"title":{"controllers/CodeTestSuggestionController.html":{}},"body":{"controllers/CodeTestSuggestionController.html":{},"modules/PullRequestModule.html":{},"coverage.html":{}}}],["codetestsuggestionservice",{"_index":948,"title":{"injectables/CodeTestSuggestionService.html":{}},"body":{"controllers/CodeTestSuggestionController.html":{},"injectables/CodeTestSuggestionService.html":{},"modules/PullRequestModule.html":{},"coverage.html":{},"overview.html":{}}}],["collaborate",{"_index":1415,"title":{},"body":{"classes/CreateUserCollaborationDto.html":{}}}],["collaborating",{"_index":2158,"title":{},"body":{"entities/DbUserCollaboration.html":{}}}],["collaboration",{"_index":1413,"title":{},"body":{"classes/CreateUserCollaborationDto.html":{},"entities/DbUserCollaboration.html":{},"classes/UpdateUserCollaborationDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"controllers/UserCollaborationController.html":{}}}],["collaboration'})@apibadrequestresponse({description",{"_index":4274,"title":{},"body":{"controllers/UserCollaborationController.html":{}}}],["collaboration'})@apibearerauth()@useguards(supabaseguard)@apiokresponse({type",{"_index":4289,"title":{},"body":{"controllers/UserCollaborationController.html":{}}}],["collaboration.controller",{"_index":5115,"title":{},"body":{"modules/UserModule.html":{}}}],["collaboration.controller.ts",{"_index":4266,"title":{},"body":{"controllers/UserCollaborationController.html":{},"coverage.html":{}}}],["collaboration.controller.ts:110",{"_index":4290,"title":{},"body":{"controllers/UserCollaborationController.html":{}}}],["collaboration.controller.ts:137",{"_index":4286,"title":{},"body":{"controllers/UserCollaborationController.html":{}}}],["collaboration.controller.ts:55",{"_index":4283,"title":{},"body":{"controllers/UserCollaborationController.html":{}}}],["collaboration.controller.ts:74",{"_index":4279,"title":{},"body":{"controllers/UserCollaborationController.html":{}}}],["collaboration.dto",{"_index":4294,"title":{},"body":{"controllers/UserCollaborationController.html":{}}}],["collaboration.dto.ts",{"_index":1412,"title":{},"body":{"classes/CreateUserCollaborationDto.html":{},"classes/UpdateUserCollaborationDto.html":{},"coverage.html":{}}}],["collaboration.dto.ts:11",{"_index":1420,"title":{},"body":{"classes/CreateUserCollaborationDto.html":{}}}],["collaboration.dto.ts:12",{"_index":4214,"title":{},"body":{"classes/UpdateUserCollaborationDto.html":{}}}],["collaboration.dto.ts:21",{"_index":1418,"title":{},"body":{"classes/CreateUserCollaborationDto.html":{}}}],["collaboration.entity",{"_index":413,"title":{},"body":{"modules/AppModule.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"modules/UserModule.html":{}}}],["collaboration.entity.ts",{"_index":2146,"title":{},"body":{"entities/DbUserCollaboration.html":{},"coverage.html":{}}}],["collaboration.entity.ts:103",{"_index":2166,"title":{},"body":{"entities/DbUserCollaboration.html":{}}}],["collaboration.entity.ts:113",{"_index":2154,"title":{},"body":{"entities/DbUserCollaboration.html":{}}}],["collaboration.entity.ts:123",{"_index":2161,"title":{},"body":{"entities/DbUserCollaboration.html":{}}}],["collaboration.entity.ts:133",{"_index":2152,"title":{},"body":{"entities/DbUserCollaboration.html":{}}}],["collaboration.entity.ts:29",{"_index":2155,"title":{},"body":{"entities/DbUserCollaboration.html":{}}}],["collaboration.entity.ts:37",{"_index":2170,"title":{},"body":{"entities/DbUserCollaboration.html":{}}}],["collaboration.entity.ts:45",{"_index":2164,"title":{},"body":{"entities/DbUserCollaboration.html":{}}}],["collaboration.entity.ts:53",{"_index":2168,"title":{},"body":{"entities/DbUserCollaboration.html":{}}}],["collaboration.entity.ts:61",{"_index":2163,"title":{},"body":{"entities/DbUserCollaboration.html":{}}}],["collaboration.entity.ts:72",{"_index":2160,"title":{},"body":{"entities/DbUserCollaboration.html":{}}}],["collaboration.entity.ts:83",{"_index":2165,"title":{},"body":{"entities/DbUserCollaboration.html":{}}}],["collaboration.entity.ts:93",{"_index":2153,"title":{},"body":{"entities/DbUserCollaboration.html":{}}}],["collaboration.service",{"_index":4293,"title":{},"body":{"controllers/UserCollaborationController.html":{},"modules/UserModule.html":{}}}],["collaboration.service.ts",{"_index":4312,"title":{},"body":{"injectables/UserCollaborationService.html":{},"coverage.html":{}}}],["collaboration.service.ts:12",{"_index":4315,"title":{},"body":{"injectables/UserCollaborationService.html":{}}}],["collaboration.service.ts:19",{"_index":4319,"title":{},"body":{"injectables/UserCollaborationService.html":{}}}],["collaboration.service.ts:25",{"_index":4321,"title":{},"body":{"injectables/UserCollaborationService.html":{}}}],["collaboration.service.ts:39",{"_index":4318,"title":{},"body":{"injectables/UserCollaborationService.html":{}}}],["collaboration.service.ts:43",{"_index":4324,"title":{},"body":{"injectables/UserCollaborationService.html":{}}}],["collaboration.service.ts:47",{"_index":4323,"title":{},"body":{"injectables/UserCollaborationService.html":{}}}],["collaboration.service.ts:51",{"_index":4320,"title":{},"body":{"injectables/UserCollaborationService.html":{}}}],["collaboration.user_id",{"_index":4304,"title":{},"body":{"controllers/UserCollaborationController.html":{}}}],["collaboration_emailed_at",{"_index":2147,"title":{},"body":{"entities/DbUserCollaboration.html":{}}}],["collaborations",{"_index":4281,"title":{},"body":{"controllers/UserCollaborationController.html":{}}}],["collaborator's",{"_index":2024,"title":{},"body":{"entities/DbRepoLoginContributions.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserListContributorStat.html":{},"entities/DbUserListContributorStat-1.html":{}}}],["collaboratorsdto",{"_index":955,"title":{"classes/CollaboratorsDto.html":{}},"body":{"classes/CollaboratorsDto.html":{},"controllers/UserListController.html":{},"coverage.html":{}}}],["collection",{"_index":1057,"title":{},"body":{"classes/ContributionPageMetaDto.html":{},"classes/PageMetaDto.html":{}}}],["color",{"_index":1946,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["colorado",{"_index":2595,"title":{},"body":{"classes/FilterListContributorsDto.html":{}}}],["colorize",{"_index":485,"title":{},"body":{"modules/AppModule.html":{}}}],["colors.util",{"_index":319,"title":{},"body":{"modules/AppModule.html":{},"classes/DatabaseLoggerMiddleware.html":{},"injectables/HttpLoggerMiddleware.html":{}}}],["column",{"_index":1590,"title":{},"body":{"entities/DbBakedRepo.html":{},"entities/DbCommitAuthors.html":{},"entities/DbCommits.html":{},"entities/DbContribution.html":{},"entities/DbContributionStatTimeframe.html":{},"entities/DbContributionsProjects.html":{},"entities/DbContributorCategoryTimeframe.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbPullRequestReview.html":{},"entities/DbRepoLoginContributions.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserListContributorStat.html":{},"entities/DbUserListContributorStat-1.html":{},"entities/DbUserNotification.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{}}}],["column(\"bigint",{"_index":2209,"title":{},"body":{"entities/DbUserHighlight.html":{},"entities/DbUserRepo.html":{}}}],["column(\"boolean",{"_index":1987,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["column(\"integer",{"_index":1984,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["column(\"text",{"_index":1986,"title":{},"body":{"entities/DbPullRequest.html":{},"entities/DbPullRequestReview.html":{},"entities/DbUserHighlight.html":{}}}],["column({type",{"_index":1951,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["columns",{"_index":2232,"title":{},"body":{"entities/DbUserHighlightReaction.html":{}}}],["come",{"_index":1414,"title":{},"body":{"classes/CreateUserCollaborationDto.html":{}}}],["command",{"_index":5426,"title":{},"body":{"index.html":{}}}],["comment",{"_index":1364,"title":{},"body":{"classes/CreateEndorsementDto.html":{},"entities/DbEndorsement.html":{},"miscellaneous/variables.html":{}}}],["comments",{"_index":1401,"title":{},"body":{"classes/CreateIssueSummaryDto.html":{},"entities/DbContributionStatTimeframe.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoLoginContributions.html":{},"entities/DbUserListContributorStat.html":{},"entities/DbUserListContributorStat-1.html":{},"injectables/IssueSummaryService.html":{}}}],["commit",{"_index":970,"title":{},"body":{"classes/CommitAuthorDto.html":{},"classes/CommitsDto.html":{},"entities/DbCommitAuthors.html":{},"entities/DbCommits.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"controllers/PizzaOvenController.html":{},"modules/PizzaOvenModule.html":{}}}],["commit_author",{"_index":1613,"title":{},"body":{"entities/DbCommits.html":{}}}],["commit_author.commits",{"_index":1636,"title":{},"body":{"entities/DbCommits.html":{}}}],["commit_author.commits)@joincolumn({name",{"_index":1624,"title":{},"body":{"entities/DbCommits.html":{}}}],["commit_author_email",{"_index":1603,"title":{},"body":{"entities/DbCommitAuthors.html":{}}}],["commit_author_id",{"_index":1614,"title":{},"body":{"entities/DbCommits.html":{}}}],["commit_authors",{"_index":1609,"title":{},"body":{"entities/DbCommitAuthors.html":{}}}],["commit_authors.entity",{"_index":1634,"title":{},"body":{"entities/DbCommits.html":{}}}],["commit_date",{"_index":1615,"title":{},"body":{"entities/DbCommits.html":{}}}],["commit_hash",{"_index":1001,"title":{},"body":{"classes/CommitsDto.html":{},"entities/DbCommits.html":{}}}],["commitauthordto",{"_index":967,"title":{"classes/CommitAuthorDto.html":{}},"body":{"classes/CommitAuthorDto.html":{},"coverage.html":{}}}],["commitauthorservice",{"_index":3141,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["commitauthorsrepository",{"_index":982,"title":{},"body":{"injectables/CommitAuthorsService.html":{}}}],["commitauthorsservice",{"_index":975,"title":{"injectables/CommitAuthorsService.html":{}},"body":{"injectables/CommitAuthorsService.html":{},"controllers/PizzaOvenController.html":{},"modules/PizzaOvenModule.html":{},"coverage.html":{},"overview.html":{}}}],["commitmessages",{"_index":2648,"title":{},"body":{"classes/GeneratePullRequestDescriptionDto.html":{}}}],["commits",{"_index":1158,"title":{},"body":{"injectables/ContributionService.html":{},"entities/DbBakedRepo.html":{},"entities/DbCommitAuthors.html":{},"entities/DbCommits.html":{},"entities/DbContributionStatTimeframe.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoLoginContributions.html":{},"entities/DbUserListContributorStat.html":{},"entities/DbUserListContributorStat-1.html":{},"controllers/PizzaOvenController.html":{},"classes/UserListMostActiveContributorsDto.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["commits.baked_repo",{"_index":1580,"title":{},"body":{"entities/DbBakedRepo.html":{}}}],["commits.commit_author",{"_index":1606,"title":{},"body":{"entities/DbCommitAuthors.html":{}}}],["commits.entity",{"_index":1597,"title":{},"body":{"entities/DbBakedRepo.html":{},"entities/DbCommitAuthors.html":{}}}],["commits.service",{"_index":3138,"title":{},"body":{"controllers/PizzaOvenController.html":{},"modules/PizzaOvenModule.html":{}}}],["commitsdto",{"_index":999,"title":{"classes/CommitsDto.html":{}},"body":{"classes/CommitsDto.html":{},"coverage.html":{}}}],["commitsrepository",{"_index":1014,"title":{},"body":{"injectables/CommitsService.html":{}}}],["commitsservice",{"_index":1007,"title":{"injectables/CommitsService.html":{}},"body":{"injectables/CommitsService.html":{},"controllers/PizzaOvenController.html":{},"modules/PizzaOvenModule.html":{},"coverage.html":{},"overview.html":{}}}],["committing",{"_index":5499,"title":{},"body":{"index.html":{}}}],["common",{"_index":5842,"title":{},"body":{"miscellaneous/variables.html":{}}}],["common/constants/order",{"_index":1128,"title":{},"body":{"injectables/ContributionService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoService.html":{}}}],["common/decorators/api",{"_index":1216,"title":{},"body":{"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"controllers/EmojiController.html":{},"controllers/EndorsementController.html":{},"controllers/HighlightController.html":{},"controllers/PizzaOvenController.html":{},"controllers/PullRequestController.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"controllers/UserListStatsController.html":{},"controllers/UserRecommendationController.html":{}}}],["common/dtos/filter",{"_index":3224,"title":{},"body":{"controllers/PullRequestController.html":{},"injectables/PullRequestInsightsService.html":{}}}],["common/dtos/page",{"_index":988,"title":{},"body":{"injectables/CommitAuthorsService.html":{},"injectables/CommitsService.html":{},"classes/ContributionPageMetaDto.html":{},"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"classes/ContributionsPageDto.html":{},"classes/ContributorPullRequestsDto.html":{},"classes/DbUserHighlightReactionResponse.html":{},"controllers/EmojiController.html":{},"injectables/EmojiService.html":{},"controllers/EndorsementController.html":{},"injectables/EndorsementService.html":{},"controllers/HighlightController.html":{},"classes/HighlightOptionsDto.html":{},"injectables/InsightMemberService.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"injectables/InsightsService.html":{},"controllers/PizzaOvenController.html":{},"injectables/PizzaOvenService.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"controllers/PullRequestController.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{},"classes/RepoPageOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserListController.html":{},"classes/UserListMostActiveContributorsDto.html":{},"injectables/UserListService.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"injectables/UserOrganizationService.html":{},"controllers/UserRecommendationController.html":{},"classes/UserRepoOptionsDto.html":{}}}],["common/dtos/page.dto",{"_index":26,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/CommitAuthorsService.html":{},"injectables/CommitsService.html":{},"injectables/ContributionService.html":{},"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"injectables/EmojiService.html":{},"controllers/HighlightController.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightsService.html":{},"controllers/PizzaOvenController.html":{},"injectables/PizzaOvenService.html":{},"controllers/PullRequestController.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"injectables/UserListService.html":{},"controllers/UserListStatsController.html":{},"injectables/UserListStatsService.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"injectables/UserOrganizationService.html":{},"injectables/UserReposService.html":{}}}],["common/filters/repo",{"_index":3290,"title":{},"body":{"injectables/PullRequestInsightsService.html":{},"modules/PullRequestModule.html":{},"injectables/PullRequestService.html":{},"modules/RepoModule.html":{},"injectables/RepoService.html":{},"modules/UserModule.html":{}}}],["common/middleware/database",{"_index":364,"title":{},"body":{"modules/AppModule.html":{}}}],["common/middleware/http",{"_index":361,"title":{},"body":{"modules/AppModule.html":{}}}],["common/services/api",{"_index":2498,"title":{},"body":{"modules/EndorsementModule.html":{},"modules/InsightsModule.html":{},"modules/PizzaOvenModule.html":{},"modules/UserListModule.html":{},"modules/UserModule.html":{},"modules/UserReposModule.html":{}}}],["common/services/pager.service",{"_index":990,"title":{},"body":{"injectables/CommitAuthorsService.html":{},"injectables/CommitsService.html":{},"injectables/EndorsementService.html":{},"injectables/InsightMemberService.html":{},"injectables/PizzaOvenService.html":{},"injectables/UserCollaborationService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserListService.html":{},"injectables/UserReposService.html":{}}}],["common/util/datetimes",{"_index":1127,"title":{},"body":{"injectables/ContributionService.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserListService.html":{}}}],["communication",{"_index":5402,"title":{},"body":{"index.html":{}}}],["community",{"_index":5537,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["company",{"_index":670,"title":{},"body":{"controllers/AuthController.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{}}}],["complete",{"_index":5519,"title":{},"body":{"index.html":{}}}],["completion",{"_index":832,"title":{},"body":{"injectables/BlogSummaryService.html":{},"injectables/CodeExplanationService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"injectables/IssueSummaryService.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["completionsurl",{"_index":5790,"title":{},"body":{"miscellaneous/variables.html":{}}}],["complexity",{"_index":5625,"title":{},"body":{"properties.html":{}}}],["component",{"_index":5477,"title":{},"body":{"index.html":{}}}],["computed",{"_index":1870,"title":{},"body":{"entities/DbPRInsight.html":{}}}],["condition",{"_index":5850,"title":{},"body":{"miscellaneous/variables.html":{}}}],["conditions",{"_index":5575,"title":{},"body":{"license.html":{}}}],["conduct",{"_index":5753,"title":{},"body":{"miscellaneous/variables.html":{}}}],["config",{"_index":329,"title":{},"body":{"modules/AppModule.html":{}}}],["config.get(\"api.logging",{"_index":481,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule",{"_index":303,"title":{},"body":{"modules/AppModule.html":{},"modules/LogModule.html":{}}}],["configmodule.forroot",{"_index":436,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":304,"title":{},"body":{"modules/AppModule.html":{},"interfaces/ChatResponse.html":{},"injectables/CustomLogger.html":{},"guards/EndorsementTokenGuard.html":{},"controllers/HealthController.html":{},"injectables/OpenAiService.html":{},"injectables/PizzaOvenService.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoService.html":{},"injectables/StripeService.html":{},"controllers/StripeWebhookController.html":{},"injectables/TierService.html":{}}}],["configservice.get(\"db",{"_index":443,"title":{},"body":{"modules/AppModule.html":{}}}],["configure",{"_index":289,"title":{},"body":{"modules/AppModule.html":{}}}],["configure(consumer",{"_index":290,"title":{},"body":{"modules/AppModule.html":{}}}],["confirmation",{"_index":4088,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["confirmed_at",{"_index":650,"title":{},"body":{"controllers/AuthController.html":{},"classes/SupabaseAuthDto.html":{}}}],["conflictexception",{"_index":3878,"title":{},"body":{"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/SubmitService.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserFollowService.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"injectables/VoteService.html":{}}}],["conflictexception(\"the",{"_index":4751,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["conflictexception(\"you",{"_index":3885,"title":{},"body":{"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/SubmitService.html":{},"injectables/UserFollowService.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"injectables/VoteService.html":{}}}],["conflictexception(`you",{"_index":4457,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["connection",{"_index":2362,"title":{},"body":{"entities/DbUserTopRepo.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["console.error(\"openai",{"_index":840,"title":{},"body":{"injectables/BlogSummaryService.html":{},"injectables/CodeExplanationService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"injectables/IssueSummaryService.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["console.error(`error",{"_index":2939,"title":{},"body":{"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{}}}],["consolelogger",{"_index":1469,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["consoleloggeroptions",{"_index":1476,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["const",{"_index":68,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"controllers/AuthController.html":{},"controllers/BlogSummaryController.html":{},"injectables/BlogSummaryService.html":{},"interfaces/ChatResponse.html":{},"controllers/CodeExplanationController.html":{},"injectables/CodeExplanationService.html":{},"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"controllers/CodeTestSuggestionController.html":{},"injectables/CodeTestSuggestionService.html":{},"injectables/CommitAuthorsService.html":{},"injectables/CommitsService.html":{},"injectables/ContributionService.html":{},"injectables/CouponService.html":{},"injectables/CustomerService.html":{},"injectables/EmojiService.html":{},"controllers/EndorsementController.html":{},"injectables/EndorsementService.html":{},"guards/EndorsementTokenGuard.html":{},"injectables/HttpLoggerMiddleware.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"controllers/IssueSummaryController.html":{},"injectables/IssueSummaryService.html":{},"injectables/LogService.html":{},"injectables/OpenAiService.html":{},"injectables/PagerService.html":{},"interfaces/PaginationInput.html":{},"controllers/PizzaOvenController.html":{},"injectables/PizzaOvenService.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"injectables/RepoFilterService.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeService.html":{},"controllers/StripeWebhookController.html":{},"injectables/SubmitService.html":{},"injectables/TierService.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowingController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"injectables/UserListService.html":{},"injectables/UserListStatsService.html":{},"injectables/UserNotificationService.html":{},"injectables/UserOrganizationService.html":{},"controllers/UserRecommendationController.html":{},"injectables/UserReposService.html":{},"injectables/VoteService.html":{},"miscellaneous/variables.html":{}}}],["constants/order",{"_index":3074,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["constructor",{"_index":62,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/BlogSummaryService.html":{},"injectables/CodeExplanationService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"injectables/CommitAuthorsService.html":{},"injectables/CommitsService.html":{},"classes/ContributionPageMetaDto.html":{},"injectables/ContributionService.html":{},"classes/ContributionsPageDto.html":{},"injectables/CouponService.html":{},"injectables/CustomLogger.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"injectables/EmojiService.html":{},"injectables/EndorsementService.html":{},"guards/EndorsementTokenGuard.html":{},"controllers/HealthController.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"injectables/IssueSummaryService.html":{},"injectables/LogService.html":{},"injectables/OpenAiService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"controllers/PizzaOvenController.html":{},"injectables/PizzaOvenService.html":{},"controllers/PullRequestController.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestReviewService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoService.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeService.html":{},"injectables/StripeSubscriptionService.html":{},"controllers/StripeWebhookController.html":{},"injectables/SubmitService.html":{},"injectables/SupabaseStrategy.html":{},"injectables/TierService.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"injectables/UserFollowService.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"injectables/UserListService.html":{},"injectables/UserListStatsService.html":{},"injectables/UserNotificationService.html":{},"injectables/UserOrganizationService.html":{},"injectables/UserReposService.html":{},"injectables/VoteService.html":{}}}],["constructor(bakedreporepository",{"_index":3178,"title":{},"body":{"injectables/PizzaOvenService.html":{}}}],["constructor(commitauthorsrepository",{"_index":980,"title":{},"body":{"injectables/CommitAuthorsService.html":{}}}],["constructor(commitsrepository",{"_index":1012,"title":{},"body":{"injectables/CommitsService.html":{}}}],["constructor(configservice",{"_index":2553,"title":{},"body":{"guards/EndorsementTokenGuard.html":{},"injectables/OpenAiService.html":{},"injectables/StripeService.html":{},"injectables/TierService.html":{}}}],["constructor(context",{"_index":1475,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["constructor(contributionrepository",{"_index":1114,"title":{},"body":{"injectables/ContributionService.html":{}}}],["constructor(couponrepository",{"_index":1290,"title":{},"body":{"injectables/CouponService.html":{}}}],["constructor(customerrepository",{"_index":1512,"title":{},"body":{"injectables/CustomerService.html":{}}}],["constructor(data",{"_index":1173,"title":{},"body":{"classes/ContributionsPageDto.html":{},"classes/PageDto.html":{}}}],["constructor(emojirepository",{"_index":2397,"title":{},"body":{"injectables/EmojiService.html":{}}}],["constructor(endorsementrepository",{"_index":2508,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["constructor(insightmemberrepository",{"_index":2863,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["constructor(insightreporepository",{"_index":2919,"title":{},"body":{"injectables/InsightRepoService.html":{}}}],["constructor(insightrepository",{"_index":2965,"title":{},"body":{"injectables/InsightsService.html":{}}}],["constructor(logsrepository",{"_index":3033,"title":{},"body":{"injectables/LogService.html":{}}}],["constructor(name",{"_index":1538,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["constructor(openaiservice",{"_index":800,"title":{},"body":{"injectables/BlogSummaryService.html":{},"injectables/CodeExplanationService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"injectables/IssueSummaryService.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["constructor(prinsightrepository",{"_index":3275,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["constructor(private",{"_index":784,"title":{},"body":{"controllers/BlogSummaryController.html":{},"injectables/BlogSummaryService.html":{},"interfaces/ChatResponse.html":{},"controllers/CodeExplanationController.html":{},"injectables/CodeExplanationService.html":{},"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"controllers/CodeTestSuggestionController.html":{},"injectables/CodeTestSuggestionService.html":{},"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"controllers/EmojiController.html":{},"controllers/EndorsementController.html":{},"guards/EndorsementTokenGuard.html":{},"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"controllers/IssueSummaryController.html":{},"injectables/IssueSummaryService.html":{},"injectables/OpenAiService.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StripeService.html":{},"injectables/TierService.html":{},"controllers/UserEndorsementController.html":{},"controllers/UserFollowingController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserListController.html":{},"controllers/UserListStatsController.html":{},"controllers/UserNotificationController.html":{},"controllers/UserRecommendationController.html":{}}}],["constructor(pullrequestrepository",{"_index":3380,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["constructor(pullrequestreviewrepository",{"_index":3361,"title":{},"body":{"injectables/PullRequestReviewService.html":{}}}],["constructor(reporepository",{"_index":3592,"title":{},"body":{"injectables/RepoService.html":{}}}],["constructor(repostargazerepository",{"_index":3899,"title":{},"body":{"injectables/StargazeService.html":{}}}],["constructor(repostarrepository",{"_index":3870,"title":{},"body":{"injectables/StarService.html":{}}}],["constructor(reposubmitrepository",{"_index":4065,"title":{},"body":{"injectables/SubmitService.html":{}}}],["constructor(repovoterepository",{"_index":5254,"title":{},"body":{"injectables/VoteService.html":{}}}],["constructor(subscriptionrepository",{"_index":3959,"title":{},"body":{"injectables/StripeSubscriptionService.html":{}}}],["constructor(undefined",{"_index":1046,"title":{},"body":{"classes/ContributionPageMetaDto.html":{},"classes/PageMetaDto.html":{}}}],["constructor(usercollaborationrepository",{"_index":4314,"title":{},"body":{"injectables/UserCollaborationService.html":{}}}],["constructor(userfollowrepository",{"_index":4426,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["constructor(userhighlightrepository",{"_index":4610,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["constructor(userlistcontributorrepository",{"_index":5080,"title":{},"body":{"injectables/UserListStatsService.html":{}}}],["constructor(userlistrepository",{"_index":4958,"title":{},"body":{"injectables/UserListService.html":{}}}],["constructor(usernotificationrepository",{"_index":5132,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["constructor(userorganizationrepository",{"_index":5183,"title":{},"body":{"injectables/UserOrganizationService.html":{}}}],["constructor(userreporepository",{"_index":5230,"title":{},"body":{"injectables/UserReposService.html":{}}}],["consumer",{"_index":297,"title":{},"body":{"modules/AppModule.html":{}}}],["consumer.apply(httploggermiddleware).forroutes(`v1",{"_index":506,"title":{},"body":{"modules/AppModule.html":{}}}],["contain",{"_index":4238,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["container",{"_index":5394,"title":{},"body":{"index.html":{}}}],["content",{"_index":828,"title":{},"body":{"injectables/BlogSummaryService.html":{},"interfaces/ChatResponse.html":{},"injectables/CodeExplanationService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"injectables/IssueSummaryService.html":{},"injectables/OpenAiService.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["context",{"_index":496,"title":{},"body":{"modules/AppModule.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateLogDto.html":{},"injectables/CustomLogger.html":{},"entities/DbContributionsProjects.html":{},"entities/DbEndorsement.html":{},"entities/DbLog.html":{},"miscellaneous/variables.html":{}}}],["context.switchtohttp().getrequest",{"_index":5900,"title":{},"body":{"miscellaneous/variables.html":{}}}],["contract",{"_index":5598,"title":{},"body":{"license.html":{}}}],["contribute",{"_index":1713,"title":{},"body":{"entities/DbContributorCategoryTimeframe.html":{},"index.html":{}}}],["contributed",{"_index":1643,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbContributorCategoryTimeframe.html":{}}}],["contributing",{"_index":1715,"title":{},"body":{"entities/DbContributorCategoryTimeframe.html":{},"index.html":{}}}],["contribution",{"_index":1649,"title":{},"body":{"entities/DbContribution.html":{},"controllers/RepoContributionsController.html":{},"index.html":{}}}],["contribution.entity",{"_index":1034,"title":{},"body":{"modules/ContributionModule.html":{},"injectables/ContributionService.html":{},"controllers/RepoContributionsController.html":{}}}],["contribution.service",{"_index":1035,"title":{},"body":{"modules/ContributionModule.html":{},"controllers/RepoContributionsController.html":{}}}],["contribution/contribution.entity",{"_index":337,"title":{},"body":{"modules/AppModule.html":{}}}],["contribution/contribution.module",{"_index":358,"title":{},"body":{"modules/AppModule.html":{}}}],["contributionmodule",{"_index":262,"title":{"modules/ContributionModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ContributionModule.html":{},"modules.html":{},"overview.html":{}}}],["contributionorderfieldsenum",{"_index":1076,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"miscellaneous/enumerations.html":{}}}],["contributionorderfieldsenum.count",{"_index":1078,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{}}}],["contributionpagemetadto",{"_index":49,"title":{"classes/ContributionPageMetaDto.html":{}},"body":{"interfaces/AllContributionsCount.html":{},"classes/ContributionPageMetaDto.html":{},"injectables/UserListStatsService.html":{},"coverage.html":{}}}],["contributionpageoptionsdto",{"_index":1070,"title":{"classes/ContributionPageOptionsDto.html":{}},"body":{"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"controllers/RepoContributionsController.html":{},"coverage.html":{}}}],["contributionrepository",{"_index":1118,"title":{},"body":{"injectables/ContributionService.html":{}}}],["contributions",{"_index":195,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"classes/ContributionPageMetaDto.html":{},"entities/DbContribution.html":{},"entities/DbContributionsProjects.html":{},"controllers/RepoContributionsController.html":{},"injectables/RepoService.html":{},"controllers/UserListStatsController.html":{},"injectables/UserListStatsService.html":{}}}],["contributions'})@apibadrequestresponse({description",{"_index":5050,"title":{},"body":{"controllers/UserListStatsController.html":{}}}],["contributions.controller",{"_index":1036,"title":{},"body":{"modules/ContributionModule.html":{}}}],["contributions.controller.ts",{"_index":3449,"title":{},"body":{"controllers/RepoContributionsController.html":{},"coverage.html":{}}}],["contributions.controller.ts:101",{"_index":3466,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["contributions.controller.ts:25",{"_index":3469,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["contributions.controller.ts:42",{"_index":3458,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["contributions.controller.ts:71",{"_index":3475,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["contributions.dto.ts",{"_index":2285,"title":{},"body":{"entities/DbUserListContributorStat.html":{},"coverage.html":{}}}],["contributions.dto.ts:15",{"_index":2289,"title":{},"body":{"entities/DbUserListContributorStat.html":{}}}],["contributions.dto.ts:27",{"_index":2287,"title":{},"body":{"entities/DbUserListContributorStat.html":{}}}],["contributions.dto.ts:39",{"_index":2290,"title":{},"body":{"entities/DbUserListContributorStat.html":{}}}],["contributions.dto.ts:51",{"_index":2291,"title":{},"body":{"entities/DbUserListContributorStat.html":{}}}],["contributions.dto.ts:63",{"_index":2288,"title":{},"body":{"entities/DbUserListContributorStat.html":{}}}],["contributions.dto.ts:75",{"_index":2286,"title":{},"body":{"entities/DbUserListContributorStat.html":{}}}],["contributions.entity",{"_index":1133,"title":{},"body":{"injectables/ContributionService.html":{},"controllers/RepoContributionsController.html":{}}}],["contributions.entity.ts",{"_index":2020,"title":{},"body":{"entities/DbRepoLoginContributions.html":{},"coverage.html":{}}}],["contributions.entity.ts:15",{"_index":2026,"title":{},"body":{"entities/DbRepoLoginContributions.html":{}}}],["contributions.entity.ts:27",{"_index":2022,"title":{},"body":{"entities/DbRepoLoginContributions.html":{}}}],["contributions.entity.ts:39",{"_index":2027,"title":{},"body":{"entities/DbRepoLoginContributions.html":{}}}],["contributions.entity.ts:51",{"_index":2028,"title":{},"body":{"entities/DbRepoLoginContributions.html":{}}}],["contributions.entity.ts:63",{"_index":2023,"title":{},"body":{"entities/DbRepoLoginContributions.html":{}}}],["contributions.entity.ts:75",{"_index":2021,"title":{},"body":{"entities/DbRepoLoginContributions.html":{}}}],["contributions.repo_id",{"_index":3627,"title":{},"body":{"injectables/RepoService.html":{}}}],["contributionsbyprojectdto",{"_index":54,"title":{"classes/ContributionsByProjectDto.html":{}},"body":{"interfaces/AllContributionsCount.html":{},"classes/ContributionsByProjectDto.html":{},"controllers/UserListStatsController.html":{},"injectables/UserListStatsService.html":{},"coverage.html":{}}}],["contributionscount",{"_index":3577,"title":{},"body":{"classes/RepoPageOptionsDto.html":{},"injectables/RepoService.html":{},"miscellaneous/enumerations.html":{}}}],["contributionservice",{"_index":1031,"title":{"injectables/ContributionService.html":{}},"body":{"modules/ContributionModule.html":{},"injectables/ContributionService.html":{},"controllers/RepoContributionsController.html":{},"coverage.html":{},"overview.html":{}}}],["contributionspagedto",{"_index":52,"title":{"classes/ContributionsPageDto.html":{}},"body":{"interfaces/AllContributionsCount.html":{},"classes/ContributionsPageDto.html":{},"injectables/UserListStatsService.html":{},"coverage.html":{}}}],["contributionspagedto(entities",{"_index":126,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["contributionspagemetadto",{"_index":50,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["contributionstimeframedto",{"_index":39,"title":{"classes/ContributionsTimeframeDto.html":{}},"body":{"interfaces/AllContributionsCount.html":{},"classes/ContributionsTimeframeDto.html":{},"controllers/UserListStatsController.html":{},"injectables/UserListStatsService.html":{},"coverage.html":{}}}],["contributor",{"_index":31,"title":{"classes/Contributor.html":{}},"body":{"interfaces/AllContributionsCount.html":{},"classes/CollaboratorsDto.html":{},"classes/ContributionPageOptionsDto.html":{},"classes/Contributor.html":{},"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"modules/ContributorModule.html":{},"classes/CreateUserListDto.html":{},"entities/DbContribution.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserListContributorStat-1.html":{},"classes/FilterListContributorsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{},"controllers/UserListController.html":{},"modules/UserListModule.html":{},"injectables/UserListService.html":{},"controllers/UserListStatsController.html":{},"injectables/UserListStatsService.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["contributor.controller",{"_index":1268,"title":{},"body":{"modules/ContributorModule.html":{}}}],["contributor.dto",{"_index":1222,"title":{},"body":{"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"injectables/PullRequestService.html":{}}}],["contributor.dto.ts",{"_index":1995,"title":{},"body":{"classes/DbPullRequestContributor.html":{},"coverage.html":{}}}],["contributor.dto.ts:14",{"_index":1998,"title":{},"body":{"classes/DbPullRequestContributor.html":{}}}],["contributor.dto.ts:20",{"_index":1997,"title":{},"body":{"classes/DbPullRequestContributor.html":{}}}],["contributor.dto.ts:8",{"_index":1996,"title":{},"body":{"classes/DbPullRequestContributor.html":{}}}],["contributor.entity",{"_index":29,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"modules/AppModule.html":{},"controllers/UserListController.html":{},"modules/UserListModule.html":{},"injectables/UserListService.html":{},"injectables/UserListStatsService.html":{}}}],["contributor.entity.ts",{"_index":2269,"title":{},"body":{"entities/DbUserListContributor.html":{},"coverage.html":{}}}],["contributor.entity.ts:27",{"_index":2274,"title":{},"body":{"entities/DbUserListContributor.html":{}}}],["contributor.entity.ts:35",{"_index":2278,"title":{},"body":{"entities/DbUserListContributor.html":{}}}],["contributor.entity.ts:42",{"_index":2276,"title":{},"body":{"entities/DbUserListContributor.html":{}}}],["contributor.entity.ts:49",{"_index":2282,"title":{},"body":{"entities/DbUserListContributor.html":{}}}],["contributor.entity.ts:59",{"_index":2272,"title":{},"body":{"entities/DbUserListContributor.html":{}}}],["contributor.entity.ts:66",{"_index":2273,"title":{},"body":{"entities/DbUserListContributor.html":{}}}],["contributor.entity.ts:74",{"_index":2280,"title":{},"body":{"entities/DbUserListContributor.html":{}}}],["contributor.entity.ts:85",{"_index":2277,"title":{},"body":{"entities/DbUserListContributor.html":{}}}],["contributor.id",{"_index":4897,"title":{},"body":{"controllers/UserListController.html":{}}}],["contributor.login",{"_index":4898,"title":{},"body":{"controllers/UserListController.html":{}}}],["contributor.tolowercase",{"_index":3418,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["contributor/')@apioperation({operationid",{"_index":5056,"title":{},"body":{"controllers/UserListStatsController.html":{}}}],["contributor/contributor.module",{"_index":419,"title":{},"body":{"modules/AppModule.html":{}}}],["contributorcontroller",{"_index":1201,"title":{"controllers/ContributorController.html":{}},"body":{"controllers/ContributorController.html":{},"modules/ContributorModule.html":{},"coverage.html":{}}}],["contributorid",{"_index":4919,"title":{},"body":{"controllers/UserListController.html":{}}}],["contributorinsightscontroller",{"_index":1228,"title":{"controllers/ContributorInsightsController.html":{}},"body":{"controllers/ContributorInsightsController.html":{},"modules/ContributorModule.html":{},"coverage.html":{}}}],["contributormodule",{"_index":263,"title":{"modules/ContributorModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ContributorModule.html":{},"modules.html":{},"overview.html":{}}}],["contributorpullrequestsdto",{"_index":1271,"title":{"classes/ContributorPullRequestsDto.html":{}},"body":{"classes/ContributorPullRequestsDto.html":{},"injectables/PullRequestService.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["contributors",{"_index":957,"title":{},"body":{"classes/CollaboratorsDto.html":{},"classes/Contributor.html":{},"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"classes/CreateUserListDto.html":{},"entities/DbContributorCategoryTimeframe.html":{},"classes/InsightOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"controllers/UserListController.html":{},"controllers/UserListStatsController.html":{},"miscellaneous/enumerations.html":{}}}],["contributors')@apioperation({operationid",{"_index":5063,"title":{},"body":{"controllers/UserListStatsController.html":{}}}],["contributors'})@apibadrequestresponse({description",{"_index":4842,"title":{},"body":{"controllers/UserListController.html":{},"controllers/UserListStatsController.html":{}}}],["contributors'})@apibearerauth()@useguards(supabaseguard)@apipaginatedresponse(dbuser)@apiokresponse({type",{"_index":4847,"title":{},"body":{"controllers/UserListController.html":{}}}],["contributors.dto",{"_index":38,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"classes/ContributionsTimeframeDto.html":{},"controllers/UserListController.html":{},"injectables/UserListService.html":{},"controllers/UserListStatsController.html":{},"injectables/UserListStatsService.html":{}}}],["contributors.dto.ts",{"_index":2567,"title":{},"body":{"classes/FilterListContributorsDto.html":{},"classes/UserListMostActiveContributorsDto.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["contributors.dto.ts:15",{"_index":2581,"title":{},"body":{"classes/FilterListContributorsDto.html":{}}}],["contributors.dto.ts:27",{"_index":4940,"title":{},"body":{"classes/UserListMostActiveContributorsDto.html":{}}}],["contributors.dto.ts:28",{"_index":2575,"title":{},"body":{"classes/FilterListContributorsDto.html":{}}}],["contributors.dto.ts:36",{"_index":4943,"title":{},"body":{"classes/UserListMostActiveContributorsDto.html":{}}}],["contributors.dto.ts:40",{"_index":2580,"title":{},"body":{"classes/FilterListContributorsDto.html":{}}}],["contributors.dto.ts:48",{"_index":2573,"title":{},"body":{"classes/FilterListContributorsDto.html":{}}}],["contributors.dto.ts:60",{"_index":2587,"title":{},"body":{"classes/FilterListContributorsDto.html":{}}}],["contributors.dto.ts:68",{"_index":2586,"title":{},"body":{"classes/FilterListContributorsDto.html":{}}}],["contributors.dto.ts:70",{"_index":2589,"title":{},"body":{"classes/FilterListContributorsDto.html":{}}}],["contributors/insights",{"_index":1231,"title":{},"body":{"controllers/ContributorInsightsController.html":{}}}],["contributortype",{"_index":138,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"classes/ContributionsTimeframeDto.html":{},"classes/UserListMostActiveContributorsDto.html":{},"injectables/UserListStatsService.html":{}}}],["controller",{"_index":525,"title":{"controllers/AuthController.html":{},"controllers/BlogSummaryController.html":{},"controllers/CodeExplanationController.html":{},"controllers/CodeRefactorSuggestionController.html":{},"controllers/CodeTestSuggestionController.html":{},"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"controllers/EmojiController.html":{},"controllers/EndorsementController.html":{},"controllers/HealthController.html":{},"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"controllers/IssueSummaryController.html":{},"controllers/PizzaOvenController.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/StripeWebhookController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"controllers/UserFollowingController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"controllers/UserListStatsController.html":{},"controllers/UserNotificationController.html":{},"controllers/UserRecommendationController.html":{}},"body":{"controllers/AuthController.html":{},"controllers/BlogSummaryController.html":{},"controllers/CodeExplanationController.html":{},"controllers/CodeRefactorSuggestionController.html":{},"controllers/CodeTestSuggestionController.html":{},"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"controllers/EmojiController.html":{},"controllers/EndorsementController.html":{},"controllers/HealthController.html":{},"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"controllers/IssueSummaryController.html":{},"controllers/PizzaOvenController.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/StripeWebhookController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"controllers/UserFollowingController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"controllers/UserListStatsController.html":{},"controllers/UserNotificationController.html":{},"controllers/UserRecommendationController.html":{},"coverage.html":{}}}],["controller(\"auth",{"_index":640,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller(\"bake",{"_index":3139,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["controller(\"blogs",{"_index":782,"title":{},"body":{"controllers/BlogSummaryController.html":{}}}],["controller(\"contributors",{"_index":1223,"title":{},"body":{"controllers/ContributorController.html":{}}}],["controller(\"contributors/insights",{"_index":1256,"title":{},"body":{"controllers/ContributorInsightsController.html":{}}}],["controller(\"emojis",{"_index":2386,"title":{},"body":{"controllers/EmojiController.html":{}}}],["controller(\"endorsements",{"_index":2460,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["controller(\"health",{"_index":2683,"title":{},"body":{"controllers/HealthController.html":{}}}],["controller(\"highlights",{"_index":2766,"title":{},"body":{"controllers/HighlightController.html":{}}}],["controller(\"insights",{"_index":2846,"title":{},"body":{"controllers/InsightController.html":{}}}],["controller(\"issues",{"_index":3006,"title":{},"body":{"controllers/IssueSummaryController.html":{}}}],["controller(\"lists",{"_index":4887,"title":{},"body":{"controllers/UserListController.html":{},"controllers/UserListStatsController.html":{}}}],["controller(\"prs",{"_index":895,"title":{},"body":{"controllers/CodeExplanationController.html":{},"controllers/CodeRefactorSuggestionController.html":{},"controllers/CodeTestSuggestionController.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{}}}],["controller(\"repos",{"_index":3479,"title":{},"body":{"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{}}}],["controller(\"stripe",{"_index":3996,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["controller(\"user/collaborations",{"_index":4295,"title":{},"body":{"controllers/UserCollaborationController.html":{}}}],["controller(\"user/endorsements",{"_index":4412,"title":{},"body":{"controllers/UserEndorsementController.html":{}}}],["controller(\"user/highlights",{"_index":4569,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["controller(\"user/insights",{"_index":4739,"title":{},"body":{"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["controller(\"user/notifications",{"_index":5123,"title":{},"body":{"controllers/UserNotificationController.html":{}}}],["controller(\"user/recommendations",{"_index":5207,"title":{},"body":{"controllers/UserRecommendationController.html":{}}}],["controller(\"users",{"_index":4383,"title":{},"body":{"controllers/UserController.html":{},"controllers/UserFollowingController.html":{},"controllers/UserFollowsController.html":{}}}],["controllerkey",{"_index":5760,"title":{},"body":{"miscellaneous/variables.html":{}}}],["controllers",{"_index":527,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/BlogSummaryController.html":{},"modules/BlogSummaryModule.html":{},"controllers/CodeExplanationController.html":{},"controllers/CodeRefactorSuggestionController.html":{},"controllers/CodeTestSuggestionController.html":{},"modules/ContributionModule.html":{},"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"modules/ContributorModule.html":{},"controllers/EmojiController.html":{},"modules/EmojiModule.html":{},"controllers/EndorsementController.html":{},"modules/EndorsementModule.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"controllers/HighlightController.html":{},"modules/HighlightModule.html":{},"controllers/InsightController.html":{},"modules/InsightsModule.html":{},"controllers/IssueSummaryController.html":{},"modules/IssueSummaryModule.html":{},"controllers/PizzaOvenController.html":{},"modules/PizzaOvenModule.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"modules/PullRequestModule.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"modules/RepoModule.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"modules/StarModule.html":{},"modules/StargazeModule.html":{},"modules/StripeWebHookModule.html":{},"controllers/StripeWebhookController.html":{},"modules/SubmitModule.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"controllers/UserFollowingController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"modules/UserListModule.html":{},"controllers/UserListStatsController.html":{},"modules/UserModule.html":{},"controllers/UserNotificationController.html":{},"controllers/UserRecommendationController.html":{},"modules/VoteModule.html":{},"overview.html":{}}}],["conversation",{"_index":5539,"title":{},"body":{"index.html":{}}}],["cool",{"_index":1416,"title":{},"body":{"classes/CreateUserCollaborationDto.html":{},"entities/DbUserCollaboration.html":{}}}],["copies",{"_index":5570,"title":{},"body":{"license.html":{}}}],["copy",{"_index":5452,"title":{},"body":{"index.html":{},"license.html":{}}}],["copyright",{"_index":5553,"title":{},"body":{"license.html":{}}}],["corners",{"_index":2664,"title":{},"body":{"classes/GeneratePullRequestDescriptionDto.html":{}}}],["count",{"_index":1107,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"entities/DbContribution.html":{},"entities/DbPRInsight.html":{},"classes/SupabaseAuthDto.html":{},"miscellaneous/enumerations.html":{}}}],["count(id",{"_index":2992,"title":{},"body":{"injectables/InsightsService.html":{},"injectables/UserHighlightsService.html":{}}}],["countfilters.push([`'${startdate}'::timestamp",{"_index":3666,"title":{},"body":{"injectables/RepoService.html":{}}}],["counting",{"_index":5829,"title":{},"body":{"miscellaneous/variables.html":{}}}],["couple",{"_index":5510,"title":{},"body":{"index.html":{}}}],["coupon",{"_index":514,"title":{},"body":{"classes/ApplyUserCouponDto.html":{},"controllers/AuthController.html":{},"injectables/CouponService.html":{},"entities/DbCoupon.html":{},"classes/SupabaseAuthDto.html":{}}}],["coupon.dto",{"_index":629,"title":{},"body":{"controllers/AuthController.html":{}}}],["coupon.dto.ts",{"_index":510,"title":{},"body":{"classes/ApplyUserCouponDto.html":{},"coverage.html":{}}}],["coupon.dto.ts:11",{"_index":518,"title":{},"body":{"classes/ApplyUserCouponDto.html":{}}}],["coupon.service",{"_index":1285,"title":{},"body":{"modules/CouponModule.html":{}}}],["coupon/coupon.module",{"_index":429,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["coupon/coupon.service",{"_index":631,"title":{},"body":{"controllers/AuthController.html":{}}}],["coupon/entities/coupon.entity",{"_index":434,"title":{},"body":{"modules/AppModule.html":{}}}],["coupon_code",{"_index":677,"title":{},"body":{"controllers/AuthController.html":{},"classes/SupabaseAuthDto.html":{}}}],["couponcode",{"_index":511,"title":{},"body":{"classes/ApplyUserCouponDto.html":{}}}],["couponmodule",{"_index":264,"title":{"modules/CouponModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CouponModule.html":{},"modules.html":{},"overview.html":{}}}],["couponrepository",{"_index":1292,"title":{},"body":{"injectables/CouponService.html":{}}}],["coupons",{"_index":1724,"title":{},"body":{"entities/DbCoupon.html":{}}}],["couponservice",{"_index":630,"title":{"injectables/CouponService.html":{}},"body":{"controllers/AuthController.html":{},"modules/CouponModule.html":{},"injectables/CouponService.html":{},"coverage.html":{},"overview.html":{}}}],["coverage",{"_index":5279,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["cr.repo_id",{"_index":4808,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["create",{"_index":574,"title":{},"body":{"controllers/AuthController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"injectables/EndorsementService.html":{},"classes/UpdateEndorsementDto.html":{},"classes/UpdateInsightDto.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["create(createendorsementdto",{"_index":2512,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["createblogsummarydto",{"_index":762,"title":{"classes/CreateBlogSummaryDto.html":{}},"body":{"controllers/BlogSummaryController.html":{},"injectables/BlogSummaryService.html":{},"classes/CreateBlogSummaryDto.html":{},"coverage.html":{}}}],["createcheckoutsession",{"_index":3923,"title":{},"body":{"injectables/StripeService.html":{}}}],["createcheckoutsession(customer",{"_index":3927,"title":{},"body":{"injectables/StripeService.html":{}}}],["created",{"_index":1692,"title":{},"body":{"entities/DbContributionStatTimeframe.html":{},"entities/DbRepoLoginContributions.html":{},"entities/DbUserListContributorStat.html":{},"entities/DbUserListContributorStat-1.html":{},"controllers/UserEndorsementController.html":{},"injectables/UserNotificationService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["created_at",{"_index":652,"title":{},"body":{"controllers/AuthController.html":{},"classes/ContributionPageOptionsDto.html":{},"entities/DbContribution.html":{},"entities/DbCoupon.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPullRequest.html":{},"entities/DbPullRequestReview.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"controllers/StripeWebhookController.html":{},"classes/SupabaseAuthDto.html":{},"miscellaneous/enumerations.html":{}}}],["createdatecolumn",{"_index":1676,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbCoupon.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPullRequest.html":{},"entities/DbPullRequestReview.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserNotification.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{}}}],["createendorsement",{"_index":2408,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["createendorsement(_token",{"_index":2416,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["createendorsementdto",{"_index":1348,"title":{"classes/CreateEndorsementDto.html":{}},"body":{"classes/CreateEndorsementDto.html":{},"controllers/EndorsementController.html":{},"injectables/EndorsementService.html":{},"classes/UpdateEndorsementDto.html":{},"coverage.html":{}}}],["createhighlightdto",{"_index":4539,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["createinsightdto",{"_index":1375,"title":{"classes/CreateInsightDto.html":{}},"body":{"classes/CreateInsightDto.html":{},"classes/UpdateInsightDto.html":{},"controllers/UserInsightsController.html":{},"coverage.html":{}}}],["createinsightdto.is_public",{"_index":4788,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["createinsightdto.name",{"_index":4784,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["createinsightdto.repos.foreach(async",{"_index":4789,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["createinsightdto:14",{"_index":4203,"title":{},"body":{"classes/UpdateInsightDto.html":{}}}],["createinsightdto:22",{"_index":4202,"title":{},"body":{"classes/UpdateInsightDto.html":{}}}],["createinsightdto:32",{"_index":4204,"title":{},"body":{"classes/UpdateInsightDto.html":{}}}],["createinsightmemberdto",{"_index":1389,"title":{"classes/CreateInsightMemberDto.html":{}},"body":{"classes/CreateInsightMemberDto.html":{},"controllers/UserInsightMemberController.html":{},"coverage.html":{}}}],["createinsightmemberdto.email",{"_index":4758,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["createinsightmemberdto})@apiparam({name",{"_index":4720,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["createissuesummarydto",{"_index":1396,"title":{"classes/CreateIssueSummaryDto.html":{}},"body":{"classes/CreateIssueSummaryDto.html":{},"controllers/IssueSummaryController.html":{},"injectables/IssueSummaryService.html":{},"coverage.html":{}}}],["createlog",{"_index":3032,"title":{},"body":{"injectables/LogService.html":{}}}],["createlog(log",{"_index":3036,"title":{},"body":{"injectables/LogService.html":{}}}],["createlogdto",{"_index":1403,"title":{"classes/CreateLogDto.html":{}},"body":{"classes/CreateLogDto.html":{},"injectables/LogService.html":{},"coverage.html":{}}}],["createparamdecorator((_data",{"_index":5899,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createquerybuilder",{"_index":185,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["createquerybuilder(\"pull_requests",{"_index":1154,"title":{},"body":{"injectables/ContributionService.html":{}}}],["createquerybuilder(\"repo",{"_index":3622,"title":{},"body":{"injectables/RepoService.html":{}}}],["createquerybuilder(\"repos",{"_index":3638,"title":{},"body":{"injectables/RepoService.html":{}}}],["createquerybuilder(\"user_highlight_reactions",{"_index":4701,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["creates",{"_index":570,"title":{},"body":{"controllers/AuthController.html":{},"controllers/EndorsementController.html":{}}}],["createusercollaborationdto",{"_index":1410,"title":{"classes/CreateUserCollaborationDto.html":{}},"body":{"classes/CreateUserCollaborationDto.html":{},"controllers/UserCollaborationController.html":{},"coverage.html":{}}}],["createuserhighlightdto",{"_index":1426,"title":{"classes/CreateUserHighlightDto.html":{}},"body":{"classes/CreateUserHighlightDto.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"coverage.html":{}}}],["createuserhighlightdto})@apiparam({name",{"_index":4562,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["createuserlistdto",{"_index":1195,"title":{"classes/CreateUserListDto.html":{}},"body":{"classes/Contributor.html":{},"classes/CreateUserListDto.html":{},"controllers/UserListController.html":{},"injectables/UserListService.html":{},"coverage.html":{}}}],["createuserlistdto.contributors.map(async",{"_index":4895,"title":{},"body":{"controllers/UserListController.html":{}}}],["createuserlistdto})@apiparam({name",{"_index":4878,"title":{},"body":{"controllers/UserListController.html":{}}}],["creation",{"_index":1650,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbCoupon.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbPullRequest.html":{},"entities/DbPullRequestReview.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserList.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"classes/SupabaseAuthDto.html":{}}}],["creator",{"_index":1356,"title":{},"body":{"classes/CreateEndorsementDto.html":{},"entities/DbEndorsement.html":{}}}],["creator_user_id",{"_index":1351,"title":{},"body":{"classes/CreateEndorsementDto.html":{},"entities/DbEndorsement.html":{}}}],["ctebuilder",{"_index":104,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/ContributionService.html":{},"injectables/UserListStatsService.html":{}}}],["ctebuilder.innerjoin(\"users",{"_index":105,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["ctebuilder.offset(pageoptionsdto.skip).limit(pageoptionsdto.limit",{"_index":121,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["ctx",{"_index":2560,"title":{},"body":{"guards/EndorsementTokenGuard.html":{}}}],["ctx.getrequest",{"_index":2562,"title":{},"body":{"guards/EndorsementTokenGuard.html":{}}}],["current",{"_index":1061,"title":{},"body":{"classes/ContributionPageMetaDto.html":{},"entities/DbContributorCategoryTimeframe.html":{},"entities/DbSubscription.html":{},"classes/PageMetaDto.html":{},"injectables/PullRequestService.html":{},"controllers/UserInsightsController.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["current_month",{"_index":3438,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["current_month_prs",{"_index":230,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["current_month_prs\".\"author_login",{"_index":231,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["current_period_end_at",{"_index":2100,"title":{},"body":{"entities/DbSubscription.html":{},"controllers/StripeWebhookController.html":{}}}],["current_period_start_at",{"_index":2101,"title":{},"body":{"entities/DbSubscription.html":{},"controllers/StripeWebhookController.html":{}}}],["currentdate",{"_index":145,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["currentmonthquery",{"_index":3434,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["currentrepoids",{"_index":4806,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["currentrepoids.find((id",{"_index":4811,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["currentrepos",{"_index":4794,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["currentrepos.filter",{"_index":4798,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["currentrepos.map((cr",{"_index":4807,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["custom",{"_index":3029,"title":{},"body":{"modules/LogModule.html":{}}}],["customer",{"_index":698,"title":{},"body":{"controllers/AuthController.html":{},"entities/DbCustomer.html":{},"injectables/StripeService.html":{}}}],["customer.entity",{"_index":1505,"title":{},"body":{"modules/CustomerModule.html":{},"injectables/CustomerService.html":{}}}],["customer.service",{"_index":1506,"title":{},"body":{"modules/CustomerModule.html":{}}}],["customer.stripe_customer_id",{"_index":701,"title":{},"body":{"controllers/AuthController.html":{}}}],["customer.subscription.created",{"_index":3992,"title":{},"body":{"controllers/StripeWebhookController.html":{},"miscellaneous/variables.html":{}}}],["customer.subscription.deleted",{"_index":3994,"title":{},"body":{"controllers/StripeWebhookController.html":{},"miscellaneous/variables.html":{}}}],["customer.subscription.updated",{"_index":3993,"title":{},"body":{"controllers/StripeWebhookController.html":{},"miscellaneous/variables.html":{}}}],["customer/customer.entity",{"_index":374,"title":{},"body":{"modules/AppModule.html":{}}}],["customer/customer.module",{"_index":375,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/StripeWebHookModule.html":{}}}],["customer/customer.service",{"_index":623,"title":{},"body":{"controllers/AuthController.html":{},"controllers/StripeWebhookController.html":{}}}],["customerdata",{"_index":3998,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["customerid",{"_index":700,"title":{},"body":{"controllers/AuthController.html":{},"controllers/StripeWebhookController.html":{}}}],["customermodule",{"_index":265,"title":{"modules/CustomerModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CustomerModule.html":{},"modules/StripeWebHookModule.html":{},"modules.html":{},"overview.html":{}}}],["customerrepository",{"_index":1514,"title":{},"body":{"injectables/CustomerService.html":{}}}],["customers",{"_index":1730,"title":{},"body":{"entities/DbCustomer.html":{}}}],["customerservice",{"_index":622,"title":{"injectables/CustomerService.html":{}},"body":{"controllers/AuthController.html":{},"modules/CustomerModule.html":{},"injectables/CustomerService.html":{},"controllers/StripeWebhookController.html":{},"coverage.html":{},"overview.html":{}}}],["customlogger",{"_index":1466,"title":{"injectables/CustomLogger.html":{}},"body":{"injectables/CustomLogger.html":{},"modules/LogModule.html":{},"coverage.html":{},"overview.html":{}}}],["customprops",{"_index":495,"title":{},"body":{"modules/AppModule.html":{}}}],["cypress",{"_index":5480,"title":{},"body":{"index.html":{}}}],["d",{"_index":5435,"title":{},"body":{"index.html":{}}}],["damages",{"_index":5595,"title":{},"body":{"license.html":{}}}],["data",{"_index":873,"title":{},"body":{"interfaces/ChatResponse.html":{},"classes/ContributionsPageDto.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"injectables/LogService.html":{},"injectables/OpenAiService.html":{},"classes/PageDto.html":{},"injectables/PizzaOvenService.html":{},"injectables/RepoFilterService.html":{},"injectables/UserHighlightsService.html":{},"classes/UserRepoOptionsDto-1.html":{},"injectables/VoteService.html":{},"classes/VotedRepoDto.html":{},"miscellaneous/variables.html":{}}}],["data).pipe(map((resp",{"_index":3197,"title":{},"body":{"injectables/PizzaOvenService.html":{}}}],["data.choices[0]?.message.content",{"_index":875,"title":{},"body":{"interfaces/ChatResponse.html":{},"injectables/OpenAiService.html":{}}}],["database",{"_index":453,"title":{},"body":{"modules/AppModule.html":{},"controllers/HealthController.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["databaseloggermiddleware",{"_index":363,"title":{"classes/DatabaseLoggerMiddleware.html":{}},"body":{"modules/AppModule.html":{},"classes/DatabaseLoggerMiddleware.html":{},"coverage.html":{}}}],["databaseloggermiddleware(\"lg",{"_index":474,"title":{},"body":{"modules/AppModule.html":{}}}],["databaseloggermiddleware(\"os",{"_index":459,"title":{},"body":{"modules/AppModule.html":{}}}],["datasource",{"_index":313,"title":{},"body":{"modules/AppModule.html":{}}}],["date",{"_index":144,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"controllers/ContributorInsightsController.html":{},"classes/CreateUserHighlightDto.html":{},"entities/DbCommits.html":{},"entities/DbContribution.html":{},"entities/DbCoupon.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbPullRequestReview.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserNotification.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserListStatsService.html":{},"injectables/UserNotificationService.html":{},"miscellaneous/variables.html":{}}}],["date'})@column({type",{"_index":1874,"title":{},"body":{"entities/DbPRInsight.html":{}}}],["date(\"1970",{"_index":5896,"title":{},"body":{"miscellaneous/variables.html":{}}}],["date().getfullyear",{"_index":5781,"title":{},"body":{"miscellaneous/variables.html":{}}}],["date().toisostring",{"_index":103,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["date(date.now",{"_index":5774,"title":{},"body":{"miscellaneous/variables.html":{}}}],["date(highlight.shipped_at",{"_index":4675,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["date(new",{"_index":179,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["date(startdate).gettime",{"_index":180,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["date(updatehighlightdto.shipped_at",{"_index":4582,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["date.now",{"_index":2809,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{}}}],["dates",{"_index":130,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["dates.map(async",{"_index":133,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["day",{"_index":1863,"title":{},"body":{"entities/DbPRInsight.html":{},"controllers/HighlightController.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoService.html":{}}}],["days",{"_index":100,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"classes/ContributionsByProjectDto.html":{},"classes/ContributionsTimeframeDto.html":{},"controllers/ContributorInsightsController.html":{},"classes/ContributorPullRequestsDto.html":{},"entities/DbPRInsight.html":{},"classes/FilterListContributorsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"injectables/PullRequestInsightsService.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"injectables/RepoFilterService.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"classes/TopProjectsDto.html":{},"injectables/UserHighlightsService.html":{},"classes/UserListMostActiveContributorsDto.html":{},"injectables/UserListService.html":{},"injectables/UserListStatsService.html":{},"classes/UserRepoOptionsDto.html":{},"index.html":{}}}],["days'})@isoptional",{"_index":2585,"title":{},"body":{"classes/FilterListContributorsDto.html":{}}}],["db",{"_index":2317,"title":{},"body":{"entities/DbUserNotification.html":{}}}],["dbapiconfig",{"_index":321,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["dbbakedrepo",{"_index":346,"title":{"entities/DbBakedRepo.html":{}},"body":{"modules/AppModule.html":{},"entities/DbBakedRepo.html":{},"entities/DbCommits.html":{},"controllers/PizzaOvenController.html":{},"modules/PizzaOvenModule.html":{},"injectables/PizzaOvenService.html":{},"coverage.html":{}}}],["dbbakedrepo})@apinotfoundresponse({description",{"_index":3100,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["dbcommitauthors",{"_index":349,"title":{"entities/DbCommitAuthors.html":{}},"body":{"modules/AppModule.html":{},"injectables/CommitAuthorsService.html":{},"entities/DbCommitAuthors.html":{},"entities/DbCommits.html":{},"controllers/PizzaOvenController.html":{},"modules/PizzaOvenModule.html":{},"coverage.html":{}}}],["dbcommitauthors})@apinotfoundresponse({description",{"_index":3105,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["dbcommits",{"_index":351,"title":{"entities/DbCommits.html":{}},"body":{"modules/AppModule.html":{},"injectables/CommitsService.html":{},"entities/DbBakedRepo.html":{},"entities/DbCommitAuthors.html":{},"entities/DbCommits.html":{},"controllers/PizzaOvenController.html":{},"modules/PizzaOvenModule.html":{},"coverage.html":{}}}],["dbcommits})@apinotfoundresponse({description",{"_index":3108,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["dbcommits})@apiparam({name",{"_index":3122,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["dbcontribution",{"_index":336,"title":{"entities/DbContribution.html":{}},"body":{"modules/AppModule.html":{},"modules/ContributionModule.html":{},"injectables/ContributionService.html":{},"entities/DbContribution.html":{},"controllers/RepoContributionsController.html":{},"injectables/RepoService.html":{},"coverage.html":{}}}],["dbcontributionsprojects",{"_index":45,"title":{"entities/DbContributionsProjects.html":{}},"body":{"interfaces/AllContributionsCount.html":{},"entities/DbContributionsProjects.html":{},"controllers/UserListStatsController.html":{},"injectables/UserListStatsService.html":{},"coverage.html":{}}}],["dbcontributionsprojects})@apinotfoundresponse({description",{"_index":5039,"title":{},"body":{"controllers/UserListStatsController.html":{}}}],["dbcontributionstattimeframe",{"_index":42,"title":{"entities/DbContributionStatTimeframe.html":{}},"body":{"interfaces/AllContributionsCount.html":{},"entities/DbContributionStatTimeframe.html":{},"modules/UserListModule.html":{},"controllers/UserListStatsController.html":{},"injectables/UserListStatsService.html":{},"coverage.html":{}}}],["dbcontributionstattimeframe})@apinotfoundresponse({description",{"_index":5052,"title":{},"body":{"controllers/UserListStatsController.html":{}}}],["dbcontribution})@apinotfoundresponse({description",{"_index":3457,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["dbcontributorcategorytimeframe",{"_index":47,"title":{"entities/DbContributorCategoryTimeframe.html":{}},"body":{"interfaces/AllContributionsCount.html":{},"entities/DbContributorCategoryTimeframe.html":{},"modules/UserListModule.html":{},"controllers/UserListStatsController.html":{},"injectables/UserListStatsService.html":{},"coverage.html":{}}}],["dbcontributorcategorytimeframe})@apinotfoundresponse({description",{"_index":5049,"title":{},"body":{"controllers/UserListStatsController.html":{}}}],["dbcoupon",{"_index":433,"title":{"entities/DbCoupon.html":{}},"body":{"modules/AppModule.html":{},"modules/CouponModule.html":{},"injectables/CouponService.html":{},"entities/DbCoupon.html":{},"coverage.html":{}}}],["dbcustomer",{"_index":373,"title":{"entities/DbCustomer.html":{}},"body":{"modules/AppModule.html":{},"modules/CustomerModule.html":{},"injectables/CustomerService.html":{},"entities/DbCustomer.html":{},"coverage.html":{}}}],["dbemoji",{"_index":401,"title":{"entities/DbEmoji.html":{}},"body":{"modules/AppModule.html":{},"entities/DbEmoji.html":{},"entities/DbUserHighlightReaction.html":{},"controllers/EmojiController.html":{},"modules/EmojiModule.html":{},"injectables/EmojiService.html":{},"coverage.html":{}}}],["dbemoji})@apinotfoundresponse({description",{"_index":2380,"title":{},"body":{"controllers/EmojiController.html":{}}}],["dbendorsement",{"_index":417,"title":{"entities/DbEndorsement.html":{}},"body":{"modules/AppModule.html":{},"entities/DbEndorsement.html":{},"controllers/EndorsementController.html":{},"modules/EndorsementModule.html":{},"injectables/EndorsementService.html":{},"controllers/UserEndorsementController.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["dbendorsement})@apibody({type",{"_index":2419,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["dbendorsement})@apinotfoundresponse({description",{"_index":2450,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["dbfiltereduser",{"_index":1773,"title":{"classes/DbFilteredUser.html":{}},"body":{"classes/DbFilteredUser.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["dbfiltereduser})@apibadrequestresponse({description",{"_index":4373,"title":{},"body":{"controllers/UserController.html":{}}}],["dbinsight",{"_index":366,"title":{"entities/DbInsight.html":{}},"body":{"modules/AppModule.html":{},"entities/DbInsight.html":{},"entities/DbInsightRepo.html":{},"controllers/InsightController.html":{},"modules/InsightsModule.html":{},"injectables/InsightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["dbinsightmember",{"_index":399,"title":{"entities/DbInsightMember.html":{}},"body":{"modules/AppModule.html":{},"entities/DbInsightMember.html":{},"injectables/InsightMemberService.html":{},"modules/InsightsModule.html":{},"controllers/UserInsightMemberController.html":{},"coverage.html":{}}}],["dbinsightmember})@apinotfoundresponse({description",{"_index":4718,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["dbinsightrepo",{"_index":368,"title":{"entities/DbInsightRepo.html":{}},"body":{"modules/AppModule.html":{},"entities/DbInsight.html":{},"entities/DbInsightRepo.html":{},"injectables/InsightRepoService.html":{},"modules/InsightsModule.html":{},"coverage.html":{}}}],["dbinsight})@apinotfoundresponse({description",{"_index":2826,"title":{},"body":{"controllers/InsightController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["dblog",{"_index":383,"title":{"entities/DbLog.html":{}},"body":{"modules/AppModule.html":{},"entities/DbLog.html":{},"modules/LogModule.html":{},"injectables/LogService.html":{},"coverage.html":{}}}],["dbloggingconfig",{"_index":322,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["dbprinsight",{"_index":406,"title":{"entities/DbPRInsight.html":{}},"body":{"modules/AppModule.html":{},"entities/DbPRInsight.html":{},"controllers/PullRequestController.html":{},"injectables/PullRequestInsightsService.html":{},"modules/PullRequestModule.html":{},"coverage.html":{}}}],["dbpullrequest",{"_index":387,"title":{"entities/DbPullRequest.html":{}},"body":{"modules/AppModule.html":{},"modules/ContributionModule.html":{},"injectables/ContributionService.html":{},"modules/ContributorModule.html":{},"entities/DbPullRequest.html":{},"entities/DbPullRequestReview.html":{},"controllers/PullRequestController.html":{},"modules/PullRequestModule.html":{},"injectables/PullRequestService.html":{},"controllers/UserController.html":{},"modules/UserListModule.html":{},"injectables/UserListService.html":{},"coverage.html":{}}}],["dbpullrequestcontributor",{"_index":1212,"title":{"classes/DbPullRequestContributor.html":{}},"body":{"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"classes/DbPullRequestContributor.html":{},"injectables/PullRequestService.html":{},"coverage.html":{}}}],["dbpullrequestreview",{"_index":390,"title":{"entities/DbPullRequestReview.html":{}},"body":{"modules/AppModule.html":{},"entities/DbPullRequestReview.html":{},"controllers/PullRequestController.html":{},"modules/PullRequestModule.html":{},"injectables/PullRequestReviewService.html":{},"coverage.html":{}}}],["dbpullrequest})@apinotfoundresponse({description",{"_index":4361,"title":{},"body":{"controllers/UserController.html":{}}}],["dbrepo",{"_index":332,"title":{},"body":{"modules/AppModule.html":{},"modules/ContributionModule.html":{},"entities/DbContribution.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserTopRepo.html":{},"controllers/RepoController.html":{},"modules/RepoModule.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"modules/StarModule.html":{},"modules/StargazeModule.html":{},"modules/SubmitModule.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"controllers/UserRecommendationController.html":{},"modules/VoteModule.html":{},"coverage.html":{}}}],["dbrepologincontributions",{"_index":1131,"title":{"entities/DbRepoLoginContributions.html":{}},"body":{"injectables/ContributionService.html":{},"entities/DbRepoLoginContributions.html":{},"controllers/RepoContributionsController.html":{},"coverage.html":{}}}],["dbrepologincontributions})@apinotfoundresponse({description",{"_index":3462,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["dbrepotouserstargazers",{"_index":344,"title":{"entities/DbRepoToUserStargazers.html":{}},"body":{"modules/AppModule.html":{},"entities/DbRepoToUserStargazers.html":{},"injectables/RepoService.html":{},"controllers/RepoStargazeController.html":{},"modules/StargazeModule.html":{},"injectables/StargazeService.html":{},"coverage.html":{}}}],["dbrepotouserstargazers})@apinotfoundresponse({description",{"_index":3747,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["dbrepotouserstars",{"_index":340,"title":{"entities/DbRepoToUserStars.html":{}},"body":{"modules/AppModule.html":{},"entities/DbRepoToUserStars.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"modules/StarModule.html":{},"injectables/StarService.html":{},"coverage.html":{}}}],["dbrepotouserstars})@apinotfoundresponse({description",{"_index":3701,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["dbrepotousersubmissions",{"_index":342,"title":{"entities/DbRepoToUserSubmissions.html":{}},"body":{"modules/AppModule.html":{},"entities/DbRepoToUserSubmissions.html":{},"injectables/RepoService.html":{},"controllers/RepoSubmitController.html":{},"modules/SubmitModule.html":{},"injectables/SubmitService.html":{},"coverage.html":{}}}],["dbrepotousersubmissions})@apinotfoundresponse({description",{"_index":3785,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["dbrepotouservotes",{"_index":338,"title":{"entities/DbRepoToUserVotes.html":{}},"body":{"modules/AppModule.html":{},"entities/DbRepoToUserVotes.html":{},"injectables/RepoService.html":{},"controllers/RepoVoteController.html":{},"classes/UserRepoOptionsDto-1.html":{},"modules/VoteModule.html":{},"injectables/VoteService.html":{},"classes/VotedRepoDto.html":{},"coverage.html":{}}}],["dbrepotouservotes})@apinotfoundresponse({description",{"_index":3823,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["dbrepo})@apinotfoundresponse({description",{"_index":3505,"title":{},"body":{"controllers/RepoController.html":{},"controllers/UserController.html":{}}}],["dbrepo})@useguards(supabaseguard",{"_index":5201,"title":{},"body":{"controllers/UserRecommendationController.html":{}}}],["dbsubscription",{"_index":381,"title":{"entities/DbSubscription.html":{}},"body":{"modules/AppModule.html":{},"entities/DbSubscription.html":{},"modules/StripeSubscriptionModule.html":{},"injectables/StripeSubscriptionService.html":{},"coverage.html":{}}}],["dbtimezone",{"_index":2139,"title":{"classes/DbTimezone.html":{}},"body":{"classes/DbTimezone.html":{},"controllers/UserListController.html":{},"injectables/UserListService.html":{},"coverage.html":{}}}],["dbtimezone})@apinotfoundresponse({description",{"_index":4857,"title":{},"body":{"controllers/UserListController.html":{}}}],["dbtopuser",{"_index":2143,"title":{"classes/DbTopUser.html":{}},"body":{"classes/DbTopUser.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["dbuser",{"_index":334,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/ContributionModule.html":{},"injectables/ContributionService.html":{},"entities/DbInsight.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserNotification.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserTopRepo.html":{},"controllers/UserController.html":{},"controllers/UserFollowingController.html":{},"controllers/UserListController.html":{},"modules/UserListModule.html":{},"injectables/UserListService.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["dbusercollaboration",{"_index":412,"title":{"entities/DbUserCollaboration.html":{}},"body":{"modules/AppModule.html":{},"entities/DbUserCollaboration.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["dbusercollaboration})@apinotfoundresponse({description",{"_index":4273,"title":{},"body":{"controllers/UserCollaborationController.html":{}}}],["dbuserhighlight",{"_index":393,"title":{"entities/DbUserHighlight.html":{}},"body":{"modules/AppModule.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"controllers/HighlightController.html":{},"modules/HighlightModule.html":{},"controllers/UserController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserListController.html":{},"modules/UserListModule.html":{},"injectables/UserListService.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["dbuserhighlight.create(await",{"_index":4667,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["dbuserhighlightreaction",{"_index":403,"title":{"entities/DbUserHighlightReaction.html":{}},"body":{"modules/AppModule.html":{},"entities/DbEmoji.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightReactionResponse.html":{},"classes/HighlightOptionsDto.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["dbuserhighlightreactionresponse",{"_index":2236,"title":{"classes/DbUserHighlightReactionResponse.html":{}},"body":{"classes/DbUserHighlightReactionResponse.html":{},"controllers/HighlightController.html":{},"classes/HighlightOptionsDto.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"coverage.html":{}}}],["dbuserhighlightreactionresponse})@apinotfoundresponse({description",{"_index":2752,"title":{},"body":{"controllers/HighlightController.html":{},"controllers/UserHighlightsController.html":{}}}],["dbuserhighlightreaction})@apinotfoundresponse({description",{"_index":4530,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["dbuserhighlightrepo",{"_index":2250,"title":{"classes/DbUserHighlightRepo.html":{}},"body":{"classes/DbUserHighlightRepo.html":{},"controllers/HighlightController.html":{},"controllers/UserHighlightsController.html":{},"coverage.html":{}}}],["dbuserhighlightrepo})@apibadrequestresponse({description",{"_index":4553,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["dbuserhighlight})@apinotfoundresponse({description",{"_index":2730,"title":{},"body":{"controllers/HighlightController.html":{},"controllers/UserController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserListController.html":{}}}],["dbuserlist",{"_index":430,"title":{"entities/DbUserList.html":{}},"body":{"modules/AppModule.html":{},"entities/DbUserList.html":{},"controllers/UserListController.html":{},"modules/UserListModule.html":{},"injectables/UserListService.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["dbuserlistcontributor",{"_index":27,"title":{"entities/DbUserListContributor.html":{}},"body":{"interfaces/AllContributionsCount.html":{},"modules/AppModule.html":{},"entities/DbUserListContributor.html":{},"controllers/UserListController.html":{},"modules/UserListModule.html":{},"injectables/UserListService.html":{},"injectables/UserListStatsService.html":{},"coverage.html":{}}}],["dbuserlistcontributorstat",{"_index":30,"title":{"entities/DbUserListContributorStat.html":{},"entities/DbUserListContributorStat-1.html":{}},"body":{"interfaces/AllContributionsCount.html":{},"entities/DbUserListContributorStat.html":{},"entities/DbUserListContributorStat-1.html":{},"modules/UserListModule.html":{},"controllers/UserListStatsController.html":{},"injectables/UserListStatsService.html":{},"coverage.html":{}}}],["dbuserlistcontributorstat})@apinotfoundresponse({description",{"_index":5059,"title":{},"body":{"controllers/UserListStatsController.html":{}}}],["dbuserlistcontributor})@apinotfoundresponse({description",{"_index":4871,"title":{},"body":{"controllers/UserListController.html":{}}}],["dbuserlist})@apinotfoundresponse({description",{"_index":4832,"title":{},"body":{"controllers/UserListController.html":{}}}],["dbusernotification",{"_index":410,"title":{"entities/DbUserNotification.html":{}},"body":{"modules/AppModule.html":{},"entities/DbUserNotification.html":{},"modules/UserModule.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"coverage.html":{}}}],["dbuserorganization",{"_index":414,"title":{"entities/DbUserOrganization.html":{}},"body":{"modules/AppModule.html":{},"entities/DbUserOrganization.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserOrganizationService.html":{},"coverage.html":{}}}],["dbuserorganization})@apinotfoundresponse({description",{"_index":4352,"title":{},"body":{"controllers/UserController.html":{}}}],["dbuserrepo",{"_index":372,"title":{"entities/DbUserRepo.html":{}},"body":{"modules/AppModule.html":{},"entities/DbUserRepo.html":{},"modules/UserReposModule.html":{},"injectables/UserReposService.html":{},"coverage.html":{}}}],["dbusertoprepo",{"_index":408,"title":{"entities/DbUserTopRepo.html":{}},"body":{"modules/AppModule.html":{},"entities/DbUserTopRepo.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["dbusertouserfollows",{"_index":397,"title":{"entities/DbUserToUserFollows.html":{}},"body":{"modules/AppModule.html":{},"entities/DbUserToUserFollows.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowingController.html":{},"controllers/UserFollowsController.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["dbusertouserfollows})@apinotfoundresponse({description",{"_index":4497,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["dbuser})@apinotfoundresponse({description",{"_index":546,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserController.html":{},"controllers/UserListController.html":{}}}],["dd",{"_index":3324,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["deal",{"_index":5560,"title":{},"body":{"license.html":{}}}],["dealings",{"_index":5602,"title":{},"body":{"license.html":{}}}],["debug",{"_index":1471,"title":{},"body":{"injectables/CustomLogger.html":{},"miscellaneous/variables.html":{}}}],["debug(message",{"_index":1479,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["decodeuricomponent(options.repo.tolowercase",{"_index":3539,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["decodeuricomponent(pageoptionsdto.repo",{"_index":4658,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["decorators",{"_index":512,"title":{},"body":{"classes/ApplyUserCouponDto.html":{},"controllers/AuthController.html":{},"classes/BakeRepoDto.html":{},"controllers/BlogSummaryController.html":{},"controllers/CodeExplanationController.html":{},"controllers/CodeRefactorSuggestionController.html":{},"controllers/CodeTestSuggestionController.html":{},"classes/CollaboratorsDto.html":{},"classes/CommitAuthorDto.html":{},"classes/CommitsDto.html":{},"classes/ContributionPageMetaDto.html":{},"classes/ContributionPageOptionsDto.html":{},"classes/ContributionsByProjectDto.html":{},"classes/ContributionsPageDto.html":{},"classes/ContributionsTimeframeDto.html":{},"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"classes/ContributorPullRequestsDto.html":{},"classes/CreateBlogSummaryDto.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateInsightDto.html":{},"classes/CreateInsightMemberDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/CreateLogDto.html":{},"classes/CreateUserCollaborationDto.html":{},"classes/CreateUserHighlightDto.html":{},"classes/CreateUserListDto.html":{},"entities/DbBakedRepo.html":{},"entities/DbCommitAuthors.html":{},"entities/DbCommits.html":{},"entities/DbContribution.html":{},"entities/DbContributionStatTimeframe.html":{},"entities/DbContributionsProjects.html":{},"entities/DbContributorCategoryTimeframe.html":{},"entities/DbCoupon.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"classes/DbFilteredUser.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbPullRequestReview.html":{},"entities/DbRepoLoginContributions.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"classes/DbTimezone.html":{},"classes/DbTopUser.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightReactionResponse.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserListContributorStat.html":{},"entities/DbUserListContributorStat-1.html":{},"entities/DbUserNotification.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"controllers/EmojiController.html":{},"controllers/EndorsementController.html":{},"classes/FilterListContributorsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/FilteredUsersDto.html":{},"classes/FollowManyUsersDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"controllers/HealthController.html":{},"controllers/HighlightController.html":{},"classes/HighlightOptionsDto.html":{},"controllers/InsightController.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"controllers/IssueSummaryController.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{},"controllers/PizzaOvenController.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"classes/PullRequestPageOptionsDto.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"classes/RepoInfo.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/StripeWebhookController.html":{},"classes/SupabaseAuthDto.html":{},"classes/TopProjectsDto.html":{},"classes/TopUsersDto.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateInsightMemberDto.html":{},"classes/UpdateUserCollaborationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"controllers/UserFollowingController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"classes/UserListMostActiveContributorsDto.html":{},"controllers/UserListStatsController.html":{},"controllers/UserNotificationController.html":{},"classes/UserOnboardingDto.html":{},"controllers/UserRecommendationController.html":{},"classes/UserRepoOptionsDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"classes/VotedRepoDto.html":{}}}],["default",{"_index":117,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"classes/ContributionPageOptionsDto.html":{},"classes/ContributionsByProjectDto.html":{},"classes/ContributionsTimeframeDto.html":{},"classes/ContributorPullRequestsDto.html":{},"classes/CreateBlogSummaryDto.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/CreateUserHighlightDto.html":{},"injectables/CustomLogger.html":{},"classes/DatabaseLoggerMiddleware.html":{},"entities/DbContribution.html":{},"entities/DbCoupon.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbPullRequestReview.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserNotification.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"classes/FilterListContributorsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/FilteredUsersDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"classes/HighlightOptionsDto.html":{},"injectables/HttpLoggerMiddleware.html":{},"injectables/InsightMemberService.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"injectables/PullRequestInsightsService.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"injectables/RepoFilterService.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"injectables/TierService.html":{},"classes/TopProjectsDto.html":{},"classes/TopUsersDto.html":{},"classes/UserListMostActiveContributorsDto.html":{},"injectables/UserListStatsService.html":{},"classes/UserRepoOptionsDto.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["default_payment_method",{"_index":4003,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["defaultdb",{"_index":5699,"title":{},"body":{"miscellaneous/variables.html":{}}}],["defaultversion",{"_index":5738,"title":{},"body":{"miscellaneous/variables.html":{}}}],["defined",{"_index":292,"title":{},"body":{"modules/AppModule.html":{},"classes/ApplyUserCouponDto.html":{},"controllers/AuthController.html":{},"classes/BakeRepoDto.html":{},"controllers/BlogSummaryController.html":{},"injectables/BlogSummaryService.html":{},"controllers/CodeExplanationController.html":{},"injectables/CodeExplanationService.html":{},"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"controllers/CodeTestSuggestionController.html":{},"injectables/CodeTestSuggestionService.html":{},"classes/CollaboratorsDto.html":{},"classes/CommitAuthorDto.html":{},"injectables/CommitAuthorsService.html":{},"classes/CommitsDto.html":{},"injectables/CommitsService.html":{},"classes/ContributionPageMetaDto.html":{},"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"classes/ContributionsByProjectDto.html":{},"classes/ContributionsPageDto.html":{},"classes/ContributionsTimeframeDto.html":{},"classes/Contributor.html":{},"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"classes/ContributorPullRequestsDto.html":{},"injectables/CouponService.html":{},"classes/CreateBlogSummaryDto.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateInsightDto.html":{},"classes/CreateInsightMemberDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/CreateLogDto.html":{},"classes/CreateUserCollaborationDto.html":{},"classes/CreateUserHighlightDto.html":{},"classes/CreateUserListDto.html":{},"injectables/CustomLogger.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"entities/DbBakedRepo.html":{},"entities/DbCommitAuthors.html":{},"entities/DbCommits.html":{},"entities/DbContribution.html":{},"entities/DbContributionStatTimeframe.html":{},"entities/DbContributionsProjects.html":{},"entities/DbContributorCategoryTimeframe.html":{},"entities/DbCoupon.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"classes/DbFilteredUser.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbPullRequestReview.html":{},"entities/DbRepoLoginContributions.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"classes/DbTimezone.html":{},"classes/DbTopUser.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightReactionResponse.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserListContributorStat.html":{},"entities/DbUserListContributorStat-1.html":{},"entities/DbUserNotification.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"controllers/EmojiController.html":{},"injectables/EmojiService.html":{},"controllers/EndorsementController.html":{},"injectables/EndorsementService.html":{},"guards/EndorsementTokenGuard.html":{},"classes/FilterListContributorsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/FilteredUsersDto.html":{},"classes/FollowManyUsersDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"controllers/HealthController.html":{},"controllers/HighlightController.html":{},"classes/HighlightOptionsDto.html":{},"injectables/HttpLoggerMiddleware.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"controllers/IssueSummaryController.html":{},"injectables/IssueSummaryService.html":{},"injectables/LogService.html":{},"injectables/OpenAiService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{},"injectables/PagerService.html":{},"controllers/PizzaOvenController.html":{},"injectables/PizzaOvenService.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestInsightsService.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestReviewService.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"injectables/RepoFilterService.html":{},"classes/RepoInfo.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeService.html":{},"injectables/StripeSubscriptionService.html":{},"controllers/StripeWebhookController.html":{},"injectables/SubmitService.html":{},"classes/SupabaseAuthDto.html":{},"injectables/SupabaseStrategy.html":{},"injectables/TierService.html":{},"classes/TopProjectsDto.html":{},"classes/TopUsersDto.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateInsightMemberDto.html":{},"classes/UpdateUserCollaborationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowingController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"classes/UserListMostActiveContributorsDto.html":{},"injectables/UserListService.html":{},"controllers/UserListStatsController.html":{},"injectables/UserListStatsService.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"classes/UserOnboardingDto.html":{},"injectables/UserOrganizationService.html":{},"controllers/UserRecommendationController.html":{},"classes/UserRepoOptionsDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"injectables/UserReposService.html":{},"injectables/VoteService.html":{},"classes/VotedRepoDto.html":{}}}],["delete",{"_index":557,"title":{},"body":{"controllers/AuthController.html":{},"controllers/EndorsementController.html":{},"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserListController.html":{},"miscellaneous/variables.html":{}}}],["delete(\"/:id",{"_index":2851,"title":{},"body":{"controllers/InsightController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserListController.html":{}}}],["delete(\"/:id/contributors/:userlistcontributorid",{"_index":4922,"title":{},"body":{"controllers/UserListController.html":{}}}],["delete(\"/:id/featured",{"_index":2778,"title":{},"body":{"controllers/HighlightController.html":{}}}],["delete(\"/:id/reactions/:emojiid",{"_index":4592,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["delete(\"/:id/star",{"_index":3732,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["delete(\"/:id/stargaze",{"_index":3770,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["delete(\"/:id/submit",{"_index":3808,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["delete(\"/:id/vote",{"_index":3857,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["delete(\"/:owner/:repo/star",{"_index":3735,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["delete(\"/:owner/:repo/stargaze",{"_index":3773,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["delete(\"/:owner/:repo/submit",{"_index":3810,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["delete(\"/:owner/:repo/vote",{"_index":3860,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["delete(\"/:username/follow",{"_index":4513,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["delete(\"/profile",{"_index":723,"title":{},"body":{"controllers/AuthController.html":{}}}],["delete(\":id",{"_index":2490,"title":{},"body":{"controllers/EndorsementController.html":{},"controllers/UserCollaborationController.html":{}}}],["delete(\":id/members/:memberid",{"_index":4768,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["delete('/:id')@apioperation({operationid",{"_index":2833,"title":{},"body":{"controllers/InsightController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserListController.html":{}}}],["delete('/:id/contributors/:userlistcontributorid')@apioperation({operationid",{"_index":4839,"title":{},"body":{"controllers/UserListController.html":{}}}],["delete('/:id/featured')@apioperation({operationid",{"_index":2756,"title":{},"body":{"controllers/HighlightController.html":{}}}],["delete('/:id/reactions/:emojiid')@apioperation({operationid",{"_index":4544,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["delete('/:id/star')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":3698,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["delete('/:id/stargaze')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":3745,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["delete('/:id/submit')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":3783,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["delete('/:id/vote')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":3821,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["delete('/:owner/:repo/star')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":3708,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["delete('/:owner/:repo/stargaze')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":3751,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["delete('/:owner/:repo/submit')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":3789,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["delete('/:owner/:repo/vote')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":3827,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["delete('/:username/follow')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":4494,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["delete('/profile')@apioperation({operationid",{"_index":553,"title":{},"body":{"controllers/AuthController.html":{}}}],["delete(':id')@apioperation({operationid",{"_index":2423,"title":{},"body":{"controllers/EndorsementController.html":{},"controllers/UserCollaborationController.html":{}}}],["delete(':id/members/:memberid')@apioperation({operationid",{"_index":4729,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["delete\\`](https://developer.mozilla.org/en",{"_index":5864,"title":{},"body":{"miscellaneous/variables.html":{}}}],["deletecoupon",{"_index":1288,"title":{},"body":{"injectables/CouponService.html":{}}}],["deletecoupon(code",{"_index":1294,"title":{},"body":{"injectables/CouponService.html":{}}}],["deleted",{"_index":1932,"title":{},"body":{"entities/DbPullRequest.html":{},"controllers/UserInsightsController.html":{}}}],["deleted_at",{"_index":1638,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"injectables/InsightsService.html":{},"injectables/UserHighlightsService.html":{}}}],["deletedatecolumn",{"_index":1675,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbCoupon.html":{},"entities/DbEmoji.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{}}}],["deleteendoresementbyid",{"_index":2409,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["deleteendoresementbyid(@param(\"id",{"_index":2491,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["deleteendoresementbyid(id",{"_index":2422,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["deletehighlightforuser",{"_index":4520,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["deletehighlightforuser(userid",{"_index":4540,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["deletehighlightreactionforuser",{"_index":4521,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["deletehighlightreactionforuser(userid",{"_index":4543,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["deletelistforuser",{"_index":4820,"title":{},"body":{"controllers/UserListController.html":{}}}],["deletelistforuser(@userid",{"_index":4907,"title":{},"body":{"controllers/UserListController.html":{}}}],["deletelistforuser(userid",{"_index":4835,"title":{},"body":{"controllers/UserListController.html":{}}}],["deletes",{"_index":554,"title":{},"body":{"controllers/AuthController.html":{},"controllers/EndorsementController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserListController.html":{}}}],["deleteuseraccount",{"_index":532,"title":{},"body":{"controllers/AuthController.html":{}}}],["deleteuseraccount(@userid",{"_index":724,"title":{},"body":{"controllers/AuthController.html":{}}}],["deleteuseraccount(userid",{"_index":552,"title":{},"body":{"controllers/AuthController.html":{}}}],["deleteuserhighlight",{"_index":4602,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["deleteuserhighlight(highlightid",{"_index":4622,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["deleteuserhighlightreaction",{"_index":4603,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["deleteuserhighlightreaction(id",{"_index":4624,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["deleteuserlist",{"_index":4951,"title":{},"body":{"injectables/UserListService.html":{}}}],["deleteuserlist(listid",{"_index":4968,"title":{},"body":{"injectables/UserListService.html":{}}}],["deleteuserlistcontributor",{"_index":4840,"title":{},"body":{"controllers/UserListController.html":{},"injectables/UserListService.html":{}}}],["deleteuserlistcontributor(id",{"_index":4970,"title":{},"body":{"injectables/UserListService.html":{}}}],["deleteuserlistcontributors",{"_index":4821,"title":{},"body":{"controllers/UserListController.html":{}}}],["deleteuserlistcontributors(id",{"_index":4837,"title":{},"body":{"controllers/UserListController.html":{}}}],["deletion",{"_index":1787,"title":{},"body":{"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserList.html":{}}}],["deletions",{"_index":1893,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["denominator",{"_index":128,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["denver",{"_index":2594,"title":{},"body":{"classes/FilterListContributorsDto.html":{}}}],["dependencies",{"_index":244,"title":{},"body":{"modules/ApiServicesModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/BlogSummaryModule.html":{},"modules/ContributionModule.html":{},"modules/ContributorModule.html":{},"modules/CouponModule.html":{},"modules/CustomerModule.html":{},"modules/EmojiModule.html":{},"modules/EndorsementModule.html":{},"modules/HighlightModule.html":{},"modules/InsightsModule.html":{},"modules/IssueSummaryModule.html":{},"modules/LogModule.html":{},"modules/OpenAiModule.html":{},"modules/PizzaOvenModule.html":{},"modules/PullRequestModule.html":{},"modules/RepoFilterModule.html":{},"modules/RepoModule.html":{},"modules/StarModule.html":{},"modules/StargazeModule.html":{},"modules/StripeModule.html":{},"modules/StripeSubscriptionModule.html":{},"modules/StripeWebHookModule.html":{},"modules/SubmitModule.html":{},"modules/TierModule.html":{},"modules/UserListModule.html":{},"modules/UserModule.html":{},"modules/UserReposModule.html":{},"modules/VoteModule.html":{},"overview.html":{}}}],["deployment",{"_index":5518,"title":{},"body":{"index.html":{}}}],["desc",{"_index":1599,"title":{},"body":{"entities/DbBakedRepo.html":{},"entities/DbCommitAuthors.html":{},"entities/DbCommits.html":{},"injectables/EndorsementService.html":{},"injectables/InsightsService.html":{},"injectables/RepoFilterService.html":{},"injectables/UserCollaborationService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserListService.html":{},"injectables/UserNotificationService.html":{},"injectables/UserOrganizationService.html":{},"miscellaneous/enumerations.html":{}}}],["description",{"_index":523,"title":{},"body":{"classes/ApplyUserCouponDto.html":{},"controllers/AuthController.html":{},"classes/BakeRepoDto.html":{},"controllers/BlogSummaryController.html":{},"controllers/CodeExplanationController.html":{},"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"controllers/CodeTestSuggestionController.html":{},"injectables/CodeTestSuggestionService.html":{},"classes/CollaboratorsDto.html":{},"classes/CommitAuthorDto.html":{},"classes/CommitsDto.html":{},"classes/ContributionPageMetaDto.html":{},"classes/ContributionsByProjectDto.html":{},"classes/ContributionsTimeframeDto.html":{},"classes/Contributor.html":{},"classes/CreateBlogSummaryDto.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateInsightDto.html":{},"classes/CreateInsightMemberDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/CreateUserCollaborationDto.html":{},"classes/CreateUserHighlightDto.html":{},"classes/CreateUserListDto.html":{},"entities/DbBakedRepo.html":{},"entities/DbCommitAuthors.html":{},"entities/DbCommits.html":{},"entities/DbContribution.html":{},"entities/DbContributionStatTimeframe.html":{},"entities/DbContributionsProjects.html":{},"entities/DbContributorCategoryTimeframe.html":{},"entities/DbCoupon.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"classes/DbFilteredUser.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbPullRequestReview.html":{},"entities/DbRepoLoginContributions.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"classes/DbTimezone.html":{},"classes/DbTopUser.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightReactionResponse.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserListContributorStat.html":{},"entities/DbUserListContributorStat-1.html":{},"entities/DbUserNotification.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"controllers/EmojiController.html":{},"controllers/EndorsementController.html":{},"classes/FilterListContributorsDto.html":{},"classes/FilteredUsersDto.html":{},"classes/FollowManyUsersDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"controllers/HighlightController.html":{},"classes/HighlightOptionsDto.html":{},"controllers/InsightController.html":{},"controllers/IssueSummaryController.html":{},"injectables/IssueSummaryService.html":{},"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{},"controllers/PizzaOvenController.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"classes/RepoInfo.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"classes/SupabaseAuthDto.html":{},"injectables/TierService.html":{},"classes/TopProjectsDto.html":{},"classes/TopUsersDto.html":{},"classes/UpdateInsightMemberDto.html":{},"classes/UpdateUserCollaborationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserController.html":{},"controllers/UserFollowingController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"controllers/UserListStatsController.html":{},"controllers/UserNotificationController.html":{},"classes/UserOnboardingDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"classes/VotedRepoDto.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["description.controller",{"_index":3340,"title":{},"body":{"modules/PullRequestModule.html":{}}}],["description.controller.ts",{"_index":3246,"title":{},"body":{"controllers/PullRequestDescriptionController.html":{},"coverage.html":{}}}],["description.controller.ts:22",{"_index":3250,"title":{},"body":{"controllers/PullRequestDescriptionController.html":{}}}],["description.dto",{"_index":3251,"title":{},"body":{"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["description.dto.ts",{"_index":2647,"title":{},"body":{"classes/GeneratePullRequestDescriptionDto.html":{},"coverage.html":{}}}],["description.dto.ts:13",{"_index":2652,"title":{},"body":{"classes/GeneratePullRequestDescriptionDto.html":{}}}],["description.dto.ts:23",{"_index":2656,"title":{},"body":{"classes/GeneratePullRequestDescriptionDto.html":{}}}],["description.dto.ts:32",{"_index":2657,"title":{},"body":{"classes/GeneratePullRequestDescriptionDto.html":{}}}],["description.dto.ts:42",{"_index":2655,"title":{},"body":{"classes/GeneratePullRequestDescriptionDto.html":{}}}],["description.dto.ts:50",{"_index":2654,"title":{},"body":{"classes/GeneratePullRequestDescriptionDto.html":{}}}],["description.dto.ts:59",{"_index":2651,"title":{},"body":{"classes/GeneratePullRequestDescriptionDto.html":{}}}],["description.service",{"_index":3253,"title":{},"body":{"controllers/PullRequestDescriptionController.html":{},"modules/PullRequestModule.html":{}}}],["description.service.ts",{"_index":3256,"title":{},"body":{"injectables/PullRequestDescriptionService.html":{},"coverage.html":{}}}],["description.service.ts:10",{"_index":3259,"title":{},"body":{"injectables/PullRequestDescriptionService.html":{}}}],["description.service.ts:19",{"_index":3258,"title":{},"body":{"injectables/PullRequestDescriptionService.html":{}}}],["description.service.ts:7",{"_index":3257,"title":{},"body":{"injectables/PullRequestDescriptionService.html":{}}}],["descriptionlength",{"_index":2635,"title":{},"body":{"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{}}}],["designed",{"_index":5623,"title":{},"body":{"properties.html":{}}}],["detailed",{"_index":5814,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dev",{"_index":5397,"title":{},"body":{"index.html":{}}}],["dev/apply",{"_index":5443,"title":{},"body":{"index.html":{}}}],["developers",{"_index":2268,"title":{},"body":{"entities/DbUserList.html":{}}}],["developers'})@column({type",{"_index":2263,"title":{},"body":{"entities/DbUserList.html":{}}}],["development",{"_index":5363,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["diagram",{"_index":5531,"title":{},"body":{"index.html":{}}}],["diff",{"_index":2649,"title":{},"body":{"classes/GeneratePullRequestDescriptionDto.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["diff/commit",{"_index":3261,"title":{},"body":{"injectables/PullRequestDescriptionService.html":{}}}],["diivi",{"_index":2249,"title":{},"body":{"classes/DbUserHighlightReactionResponse.html":{},"classes/HighlightOptionsDto.html":{}}}],["direction.constant",{"_index":1129,"title":{},"body":{"injectables/ContributionService.html":{},"classes/PageOptionsDto.html":{},"injectables/PullRequestService.html":{},"injectables/RepoService.html":{}}}],["direction.constant.ts",{"_index":5338,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["directly",{"_index":3263,"title":{},"body":{"injectables/PullRequestDescriptionService.html":{}}}],["directory",{"_index":5398,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["disable",{"_index":148,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"interfaces/ChatResponse.html":{},"injectables/OpenAiService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserListStatsService.html":{}}}],["discord",{"_index":4092,"title":{},"body":{"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{}}}],["discord.find",{"_index":5540,"title":{},"body":{"index.html":{}}}],["discord_url",{"_index":675,"title":{},"body":{"controllers/AuthController.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{}}}],["disk",{"_index":2686,"title":{},"body":{"controllers/HealthController.html":{}}}],["disk_percentage",{"_index":5673,"title":{},"body":{"miscellaneous/variables.html":{}}}],["disk_size",{"_index":5676,"title":{},"body":{"miscellaneous/variables.html":{}}}],["diskhealthindicator",{"_index":2682,"title":{},"body":{"controllers/HealthController.html":{}}}],["display",{"_index":1740,"title":{},"body":{"entities/DbEmoji.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"index.html":{}}}],["display_email",{"_index":4252,"title":{},"body":{"classes/UpdateUserEmailPreferencesDto.html":{}}}],["display_local_time",{"_index":671,"title":{},"body":{"controllers/AuthController.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{}}}],["display_order",{"_index":1734,"title":{},"body":{"entities/DbEmoji.html":{}}}],["distinct",{"_index":228,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/PullRequestService.html":{},"injectables/UserListStatsService.html":{}}}],["distribute",{"_index":5566,"title":{},"body":{"license.html":{}}}],["dit",{"_index":5488,"title":{},"body":{"index.html":{}}}],["doadmin",{"_index":5695,"title":{},"body":{"miscellaneous/variables.html":{}}}],["doc",{"_index":1374,"title":{},"body":{"classes/CreateEndorsementDto.html":{},"entities/DbEndorsement.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["doc'})@column({type",{"_index":1770,"title":{},"body":{"entities/DbEndorsement.html":{}}}],["doc'})@isstring",{"_index":1369,"title":{},"body":{"classes/CreateEndorsementDto.html":{}}}],["docker",{"_index":5393,"title":{},"body":{"index.html":{}}}],["docker>=20.10.12",{"_index":5367,"title":{},"body":{"index.html":{}}}],["dockerfile",{"_index":5427,"title":{},"body":{"index.html":{}}}],["dockerfile.local",{"_index":5424,"title":{},"body":{"index.html":{}}}],["docs",{"_index":5717,"title":{},"body":{"miscellaneous/variables.html":{}}}],["document",{"_index":5507,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["documentation",{"_index":5280,"title":{},"body":{"coverage.html":{},"index.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["documentbuilder",{"_index":5741,"title":{},"body":{"miscellaneous/variables.html":{}}}],["domain",{"_index":5663,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dot",{"_index":5619,"title":{},"body":{"properties.html":{}}}],["douglas",{"_index":1778,"title":{},"body":{"classes/DbFilteredUser.html":{},"entities/DbInsightMember.html":{},"entities/DbUserHighlight.html":{}}}],["douglas'})@column({type",{"_index":1837,"title":{},"body":{"entities/DbInsightMember.html":{},"entities/DbUserHighlight.html":{}}}],["downstarbyrepoid",{"_index":3868,"title":{},"body":{"injectables/StarService.html":{}}}],["downstarbyrepoid(repoid",{"_index":3874,"title":{},"body":{"injectables/StarService.html":{}}}],["downstargazebyrepoid",{"_index":3897,"title":{},"body":{"injectables/StargazeService.html":{}}}],["downstargazebyrepoid(repoid",{"_index":3903,"title":{},"body":{"injectables/StargazeService.html":{}}}],["downstargazeonebyid",{"_index":3739,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["downstargazeonebyid(id",{"_index":3744,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["downstargazeonebyownerandrepo",{"_index":3740,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["downstargazeonebyownerandrepo(owner",{"_index":3750,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["downstaronebyid",{"_index":3692,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["downstaronebyid(@param(\"id",{"_index":3733,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["downstaronebyid(id",{"_index":3697,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["downstaronebyownerandrepo",{"_index":3693,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["downstaronebyownerandrepo(owner",{"_index":3707,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["downsubmitbyrepoid",{"_index":4063,"title":{},"body":{"injectables/SubmitService.html":{}}}],["downsubmitbyrepoid(repoid",{"_index":4069,"title":{},"body":{"injectables/SubmitService.html":{}}}],["downsubmitonebyid",{"_index":3777,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["downsubmitonebyid(id",{"_index":3782,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["downsubmitonebyownerandrepo",{"_index":3778,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["downsubmitonebyownerandrepo(owner",{"_index":3788,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["downvotebyrepoid",{"_index":5251,"title":{},"body":{"injectables/VoteService.html":{}}}],["downvotebyrepoid(repoid",{"_index":5258,"title":{},"body":{"injectables/VoteService.html":{}}}],["downvoteonebyid",{"_index":3814,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["downvoteonebyid(@param(\"id",{"_index":3858,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["downvoteonebyid(id",{"_index":3820,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["downvoteonebyownerandrepo",{"_index":3815,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["downvoteonebyownerandrepo(owner",{"_index":3826,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["draft",{"_index":1894,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["draft_pull_requests\".\"updated_at",{"_index":3646,"title":{},"body":{"injectables/RepoService.html":{}}}],["dry",{"_index":5514,"title":{},"body":{"index.html":{}}}],["dto/create",{"_index":2455,"title":{},"body":{"controllers/EndorsementController.html":{},"injectables/EndorsementService.html":{}}}],["dtos/baked",{"_index":3135,"title":{},"body":{"controllers/PizzaOvenController.html":{},"injectables/PizzaOvenService.html":{}}}],["dtos/collaborators.dto",{"_index":4885,"title":{},"body":{"controllers/UserListController.html":{}}}],["dtos/contribution",{"_index":1130,"title":{},"body":{"injectables/ContributionService.html":{},"controllers/RepoContributionsController.html":{}}}],["dtos/contributions",{"_index":40,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"controllers/UserListStatsController.html":{},"injectables/UserListStatsService.html":{}}}],["dtos/contributor",{"_index":4382,"title":{},"body":{"controllers/UserController.html":{}}}],["dtos/create",{"_index":777,"title":{},"body":{"controllers/BlogSummaryController.html":{},"injectables/BlogSummaryService.html":{},"controllers/CodeExplanationController.html":{},"injectables/CodeExplanationService.html":{},"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"controllers/CodeTestSuggestionController.html":{},"injectables/CodeTestSuggestionService.html":{},"controllers/IssueSummaryController.html":{},"injectables/IssueSummaryService.html":{},"injectables/LogService.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"injectables/UserListService.html":{}}}],["dtos/filter",{"_index":3534,"title":{},"body":{"injectables/RepoFilterService.html":{},"controllers/UserListController.html":{},"injectables/UserListService.html":{}}}],["dtos/filtered",{"_index":4379,"title":{},"body":{"controllers/UserController.html":{}}}],["dtos/follow",{"_index":4499,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["dtos/highlight",{"_index":2765,"title":{},"body":{"controllers/HighlightController.html":{}}}],["dtos/insight",{"_index":2978,"title":{},"body":{"injectables/InsightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["dtos/most",{"_index":36,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"controllers/UserListStatsController.html":{},"injectables/UserListStatsService.html":{}}}],["dtos/page",{"_index":3086,"title":{},"body":{"injectables/PagerService.html":{},"interfaces/PaginationInput.html":{}}}],["dtos/page.dto",{"_index":3087,"title":{},"body":{"injectables/PagerService.html":{},"interfaces/PaginationInput.html":{}}}],["dtos/pull",{"_index":3226,"title":{},"body":{"controllers/PullRequestController.html":{},"injectables/PullRequestService.html":{}}}],["dtos/repo",{"_index":3512,"title":{},"body":{"controllers/RepoController.html":{},"injectables/RepoService.html":{}}}],["dtos/supabase",{"_index":633,"title":{},"body":{"controllers/AuthController.html":{}}}],["dtos/top",{"_index":57,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"controllers/UserController.html":{},"controllers/UserListStatsController.html":{},"injectables/UserListStatsService.html":{}}}],["dtos/update",{"_index":2841,"title":{},"body":{"controllers/InsightController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["dtos/user",{"_index":638,"title":{},"body":{"controllers/AuthController.html":{},"injectables/UserReposService.html":{}}}],["due",{"_index":5870,"title":{},"body":{"miscellaneous/variables.html":{}}}],["duration",{"_index":2807,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{}}}],["duration.ts",{"_index":5298,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["during",{"_index":5495,"title":{},"body":{"index.html":{}}}],["dutch",{"_index":1322,"title":{},"body":{"classes/CreateBlogSummaryDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{}}}],["e",{"_index":681,"title":{},"body":{"controllers/AuthController.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"controllers/StripeWebhookController.html":{},"injectables/TierService.html":{},"controllers/UserFollowsController.html":{},"controllers/UserInsightsController.html":{}}}],["e.message",{"_index":2943,"title":{},"body":{"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{}}}],["each",{"_index":1183,"title":{},"body":{"classes/ContributionsPageDto.html":{},"classes/CreateUserHighlightDto.html":{},"classes/DbUserHighlightReactionResponse.html":{},"classes/FilterListContributorsDto.html":{},"classes/FollowManyUsersDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/PageDto.html":{},"miscellaneous/variables.html":{}}}],["edit",{"_index":4207,"title":{},"body":{"classes/UpdateInsightMemberDto.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["email",{"_index":593,"title":{},"body":{"controllers/AuthController.html":{},"classes/CommitAuthorDto.html":{},"classes/CreateInsightMemberDto.html":{},"entities/DbInsightMember.html":{},"entities/DbUserCollaboration.html":{},"injectables/StripeService.html":{},"classes/SupabaseAuthDto.html":{},"injectables/TierService.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"coverage.html":{}}}],["emoji",{"_index":1739,"title":{},"body":{"entities/DbEmoji.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightReactionResponse.html":{},"classes/HighlightOptionsDto.html":{}}}],["emoji.controller",{"_index":2394,"title":{},"body":{"modules/EmojiModule.html":{}}}],["emoji.service",{"_index":2384,"title":{},"body":{"controllers/EmojiController.html":{},"modules/EmojiModule.html":{}}}],["emoji/emoji.module",{"_index":378,"title":{},"body":{"modules/AppModule.html":{}}}],["emoji/entities/emoji.entity",{"_index":402,"title":{},"body":{"modules/AppModule.html":{},"entities/DbUserHighlightReaction.html":{}}}],["emoji_id",{"_index":2212,"title":{},"body":{"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightReactionResponse.html":{},"classes/HighlightOptionsDto.html":{},"injectables/UserHighlightsService.html":{}}}],["emojicontroller",{"_index":2373,"title":{"controllers/EmojiController.html":{}},"body":{"controllers/EmojiController.html":{},"modules/EmojiModule.html":{},"coverage.html":{}}}],["emojiid",{"_index":4528,"title":{},"body":{"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{}}}],["emojimodule",{"_index":266,"title":{"modules/EmojiModule.html":{}},"body":{"modules/AppModule.html":{},"modules/EmojiModule.html":{},"modules.html":{},"overview.html":{}}}],["emojirepository",{"_index":2399,"title":{},"body":{"injectables/EmojiService.html":{}}}],["emojis",{"_index":1755,"title":{},"body":{"entities/DbEmoji.html":{},"controllers/EmojiController.html":{}}}],["emojiservice",{"_index":2383,"title":{"injectables/EmojiService.html":{}},"body":{"controllers/EmojiController.html":{},"modules/EmojiModule.html":{},"injectables/EmojiService.html":{},"coverage.html":{},"overview.html":{}}}],["encounter",{"_index":5460,"title":{},"body":{"index.html":{}}}],["encourage",{"_index":5532,"title":{},"body":{"index.html":{}}}],["end",{"_index":934,"title":{},"body":{"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"entities/DbContributionStatTimeframe.html":{},"entities/DbContributorCategoryTimeframe.html":{},"entities/DbSubscription.html":{}}}],["end_range",{"_index":3401,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["ended_at",{"_index":2102,"title":{},"body":{"entities/DbSubscription.html":{},"controllers/StripeWebhookController.html":{}}}],["endorsement",{"_index":1355,"title":{},"body":{"classes/CreateEndorsementDto.html":{},"entities/DbEndorsement.html":{},"controllers/EndorsementController.html":{},"modules/EndorsementModule.html":{}}}],["endorsement.controller",{"_index":2500,"title":{},"body":{"modules/EndorsementModule.html":{},"modules/UserModule.html":{}}}],["endorsement.controller.ts",{"_index":4401,"title":{},"body":{"controllers/UserEndorsementController.html":{},"coverage.html":{}}}],["endorsement.controller.ts:25",{"_index":4407,"title":{},"body":{"controllers/UserEndorsementController.html":{}}}],["endorsement.controller.ts:38",{"_index":4410,"title":{},"body":{"controllers/UserEndorsementController.html":{}}}],["endorsement.dto",{"_index":2456,"title":{},"body":{"controllers/EndorsementController.html":{},"injectables/EndorsementService.html":{},"classes/UpdateEndorsementDto.html":{}}}],["endorsement.dto.ts",{"_index":1350,"title":{},"body":{"classes/CreateEndorsementDto.html":{},"classes/UpdateEndorsementDto.html":{},"coverage.html":{}}}],["endorsement.dto.ts:11",{"_index":1358,"title":{},"body":{"classes/CreateEndorsementDto.html":{}}}],["endorsement.dto.ts:19",{"_index":1361,"title":{},"body":{"classes/CreateEndorsementDto.html":{}}}],["endorsement.dto.ts:27",{"_index":1363,"title":{},"body":{"classes/CreateEndorsementDto.html":{}}}],["endorsement.dto.ts:35",{"_index":1366,"title":{},"body":{"classes/CreateEndorsementDto.html":{}}}],["endorsement.dto.ts:42",{"_index":1368,"title":{},"body":{"classes/CreateEndorsementDto.html":{}}}],["endorsement.dto.ts:49",{"_index":1370,"title":{},"body":{"classes/CreateEndorsementDto.html":{}}}],["endorsement.service",{"_index":2454,"title":{},"body":{"controllers/EndorsementController.html":{},"modules/EndorsementModule.html":{}}}],["endorsement/endorsement.module",{"_index":416,"title":{},"body":{"modules/AppModule.html":{}}}],["endorsement/endorsement.service",{"_index":4411,"title":{},"body":{"controllers/UserEndorsementController.html":{},"modules/UserModule.html":{}}}],["endorsement/entities/endorsement.entity",{"_index":418,"title":{},"body":{"modules/AppModule.html":{},"controllers/UserEndorsementController.html":{},"modules/UserModule.html":{}}}],["endorsementcontroller",{"_index":2406,"title":{"controllers/EndorsementController.html":{}},"body":{"controllers/EndorsementController.html":{},"modules/EndorsementModule.html":{},"coverage.html":{}}}],["endorsementmodule",{"_index":267,"title":{"modules/EndorsementModule.html":{}},"body":{"modules/AppModule.html":{},"modules/EndorsementModule.html":{},"modules.html":{},"overview.html":{}}}],["endorsementrepository",{"_index":2510,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["endorsements",{"_index":1772,"title":{},"body":{"entities/DbEndorsement.html":{},"controllers/EndorsementController.html":{},"injectables/EndorsementService.html":{},"controllers/UserEndorsementController.html":{}}}],["endorsements.recipient_user_id=users.id",{"_index":2536,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["endorsements.repo_id=repos.id",{"_index":2535,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["endorsements.repo_id=users.id",{"_index":2544,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["endorsementservice",{"_index":2453,"title":{"injectables/EndorsementService.html":{}},"body":{"controllers/EndorsementController.html":{},"modules/EndorsementModule.html":{},"injectables/EndorsementService.html":{},"controllers/UserEndorsementController.html":{},"modules/UserModule.html":{},"coverage.html":{},"overview.html":{}}}],["endorsementservicetoken",{"_index":5678,"title":{},"body":{"miscellaneous/variables.html":{}}}],["endorsementtokenguard",{"_index":2458,"title":{"guards/EndorsementTokenGuard.html":{}},"body":{"controllers/EndorsementController.html":{},"modules/EndorsementModule.html":{},"guards/EndorsementTokenGuard.html":{},"coverage.html":{}}}],["endpointconfig",{"_index":323,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["endpoints",{"_index":2688,"title":{},"body":{"controllers/HealthController.html":{},"miscellaneous/variables.html":{}}}],["endpoints'})@healthcheck()@apiokresponse",{"_index":2672,"title":{},"body":{"controllers/HealthController.html":{}}}],["english",{"_index":1315,"title":{},"body":{"classes/CreateBlogSummaryDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{}}}],["english'})@isstring()@isin(['english",{"_index":1316,"title":{},"body":{"classes/CreateBlogSummaryDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{}}}],["ensures",{"_index":3299,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["entire",{"_index":822,"title":{},"body":{"injectables/BlogSummaryService.html":{},"injectables/IssueSummaryService.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["entities",{"_index":122,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"modules/AppModule.html":{},"injectables/ContributionService.html":{},"entities/DbBakedRepo.html":{},"entities/DbCommitAuthors.html":{},"entities/DbCommits.html":{},"entities/DbContribution.html":{},"entities/DbContributionStatTimeframe.html":{},"entities/DbContributionsProjects.html":{},"entities/DbContributorCategoryTimeframe.html":{},"entities/DbCoupon.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbPullRequestReview.html":{},"entities/DbRepoLoginContributions.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserListContributorStat.html":{},"entities/DbUserListContributorStat-1.html":{},"entities/DbUserNotification.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"injectables/EmojiService.html":{},"injectables/InsightsService.html":{},"injectables/PagerService.html":{},"interfaces/PaginationInput.html":{},"injectables/PullRequestService.html":{},"injectables/RepoService.html":{},"injectables/UserFollowService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserListStatsService.html":{},"injectables/UserNotificationService.html":{},"injectables/UserOrganizationService.html":{},"overview.html":{}}}],["entities.length",{"_index":3442,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["entities/baked",{"_index":3136,"title":{},"body":{"controllers/PizzaOvenController.html":{},"modules/PizzaOvenModule.html":{},"injectables/PizzaOvenService.html":{}}}],["entities/commit_authors.entity",{"_index":991,"title":{},"body":{"injectables/CommitAuthorsService.html":{},"controllers/PizzaOvenController.html":{},"modules/PizzaOvenModule.html":{}}}],["entities/commits.entity",{"_index":1022,"title":{},"body":{"injectables/CommitsService.html":{},"controllers/PizzaOvenController.html":{},"modules/PizzaOvenModule.html":{}}}],["entities/contributions",{"_index":43,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"modules/UserListModule.html":{},"controllers/UserListStatsController.html":{},"injectables/UserListStatsService.html":{}}}],["entities/contributors",{"_index":48,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"modules/UserListModule.html":{},"controllers/UserListStatsController.html":{},"injectables/UserListStatsService.html":{}}}],["entities/coupon.entity",{"_index":1284,"title":{},"body":{"modules/CouponModule.html":{},"injectables/CouponService.html":{}}}],["entities/emoji.entity",{"_index":2385,"title":{},"body":{"controllers/EmojiController.html":{},"modules/EmojiModule.html":{},"injectables/EmojiService.html":{}}}],["entities/endorsement.entity",{"_index":2457,"title":{},"body":{"controllers/EndorsementController.html":{},"modules/EndorsementModule.html":{},"injectables/EndorsementService.html":{}}}],["entities/filtered",{"_index":4378,"title":{},"body":{"controllers/UserController.html":{}}}],["entities/insight",{"_index":2883,"title":{},"body":{"injectables/InsightMemberService.html":{},"injectables/InsightRepoService.html":{},"modules/InsightsModule.html":{},"controllers/UserInsightMemberController.html":{}}}],["entities/insight.entity",{"_index":2843,"title":{},"body":{"controllers/InsightController.html":{},"modules/InsightsModule.html":{},"injectables/InsightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["entities/pull",{"_index":3225,"title":{},"body":{"controllers/PullRequestController.html":{},"injectables/PullRequestInsightsService.html":{},"modules/PullRequestModule.html":{},"injectables/PullRequestReviewService.html":{},"injectables/PullRequestService.html":{}}}],["entities/repo",{"_index":1132,"title":{},"body":{"injectables/ContributionService.html":{},"controllers/RepoContributionsController.html":{}}}],["entities/repo.entity",{"_index":3511,"title":{},"body":{"controllers/RepoController.html":{},"modules/RepoModule.html":{},"injectables/RepoService.html":{}}}],["entities/timezones.entity",{"_index":4886,"title":{},"body":{"controllers/UserListController.html":{},"injectables/UserListService.html":{}}}],["entities/top",{"_index":4375,"title":{},"body":{"controllers/UserController.html":{}}}],["entities/user",{"_index":28,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"controllers/HighlightController.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowingController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserListController.html":{},"modules/UserListModule.html":{},"injectables/UserListService.html":{},"controllers/UserListStatsController.html":{},"injectables/UserListStatsService.html":{},"modules/UserModule.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"injectables/UserOrganizationService.html":{}}}],["entity",{"_index":1303,"title":{"entities/DbBakedRepo.html":{},"entities/DbCommitAuthors.html":{},"entities/DbCommits.html":{},"entities/DbContribution.html":{},"entities/DbContributionStatTimeframe.html":{},"entities/DbContributionsProjects.html":{},"entities/DbContributorCategoryTimeframe.html":{},"entities/DbCoupon.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbPullRequestReview.html":{},"entities/DbRepoLoginContributions.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserListContributorStat.html":{},"entities/DbUserListContributorStat-1.html":{},"entities/DbUserNotification.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{}},"body":{"injectables/CouponService.html":{},"entities/DbBakedRepo.html":{},"entities/DbCommitAuthors.html":{},"entities/DbCommits.html":{},"entities/DbContribution.html":{},"entities/DbContributionStatTimeframe.html":{},"entities/DbContributionsProjects.html":{},"entities/DbContributorCategoryTimeframe.html":{},"entities/DbCoupon.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbPullRequestReview.html":{},"entities/DbRepoLoginContributions.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserListContributorStat.html":{},"entities/DbUserListContributorStat-1.html":{},"entities/DbUserNotification.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"injectables/PagerService.html":{},"injectables/RepoService.html":{},"coverage.html":{}}}],["entity(\"pull_request_reviews",{"_index":2017,"title":{},"body":{"entities/DbPullRequestReview.html":{}}}],["entityqb.getrawmany",{"_index":124,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["enum",{"_index":1106,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/ContributionsTimeframeDto.html":{},"classes/ContributorPullRequestsDto.html":{},"entities/DbUserNotification.html":{},"classes/FilterOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/UserListMostActiveContributorsDto.html":{}}}],["enumerations",{"_index":5334,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["enumname",{"_index":1080,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/ContributionsTimeframeDto.html":{},"classes/ContributorPullRequestsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/UserListMostActiveContributorsDto.html":{},"classes/UserRepoOptionsDto.html":{}}}],["env",{"_index":5376,"title":{},"body":{"index.html":{}}}],["environment",{"_index":5374,"title":{},"body":{"index.html":{}}}],["environments",{"_index":5354,"title":{},"body":{"index.html":{}}}],["epoch",{"_index":5839,"title":{},"body":{"miscellaneous/variables.html":{}}}],["equal",{"_index":1979,"title":{},"body":{"entities/DbPullRequest.html":{},"classes/FilterListContributorsDto.html":{}}}],["error",{"_index":838,"title":{},"body":{"injectables/BlogSummaryService.html":{},"injectables/CodeExplanationService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"injectables/CustomLogger.html":{},"classes/DatabaseLoggerMiddleware.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"injectables/IssueSummaryService.html":{},"injectables/PullRequestDescriptionService.html":{},"controllers/StripeWebhookController.html":{},"injectables/TierService.html":{},"controllers/UserFollowsController.html":{},"miscellaneous/variables.html":{}}}],["error(message",{"_index":1481,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["error(response.statustext",{"_index":876,"title":{},"body":{"interfaces/ChatResponse.html":{},"injectables/OpenAiService.html":{}}}],["error).tostring",{"_index":4030,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["error.message",{"_index":841,"title":{},"body":{"injectables/BlogSummaryService.html":{},"injectables/CodeExplanationService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"injectables/IssueSummaryService.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["errors",{"_index":4512,"title":{},"body":{"controllers/UserFollowsController.html":{},"index.html":{}}}],["escape",{"_index":4655,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["eslint",{"_index":147,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"interfaces/ChatResponse.html":{},"injectables/OpenAiService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserListStatsService.html":{}}}],["event",{"_index":4040,"title":{},"body":{"controllers/StripeWebhookController.html":{},"license.html":{}}}],["event.data.object",{"_index":4045,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["event.type",{"_index":4049,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["evolution",{"_index":5044,"title":{},"body":{"controllers/UserListStatsController.html":{}}}],["example",{"_index":516,"title":{},"body":{"classes/ApplyUserCouponDto.html":{},"classes/BakeRepoDto.html":{},"classes/CollaboratorsDto.html":{},"classes/CommitAuthorDto.html":{},"classes/CommitsDto.html":{},"classes/ContributionPageMetaDto.html":{},"classes/Contributor.html":{},"classes/CreateBlogSummaryDto.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateInsightDto.html":{},"classes/CreateInsightMemberDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/CreateUserCollaborationDto.html":{},"classes/CreateUserHighlightDto.html":{},"classes/CreateUserListDto.html":{},"entities/DbBakedRepo.html":{},"entities/DbCommitAuthors.html":{},"entities/DbCommits.html":{},"entities/DbContribution.html":{},"entities/DbContributionStatTimeframe.html":{},"entities/DbContributionsProjects.html":{},"entities/DbContributorCategoryTimeframe.html":{},"entities/DbCoupon.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"classes/DbFilteredUser.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbPullRequestReview.html":{},"entities/DbRepoLoginContributions.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"classes/DbTimezone.html":{},"classes/DbTopUser.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightReactionResponse.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserListContributorStat.html":{},"entities/DbUserListContributorStat-1.html":{},"entities/DbUserNotification.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"classes/FilterListContributorsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/FollowManyUsersDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/PageMetaDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoInfo.html":{},"classes/SupabaseAuthDto.html":{},"classes/TopProjectsDto.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateInsightMemberDto.html":{},"classes/UpdateUserCollaborationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"classes/UserOnboardingDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"classes/VotedRepoDto.html":{}}}],["exclude",{"_index":498,"title":{},"body":{"modules/AppModule.html":{},"injectables/BlogSummaryService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"injectables/IssueSummaryService.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["executioncontext",{"_index":2556,"title":{},"body":{"guards/EndorsementTokenGuard.html":{},"miscellaneous/variables.html":{}}}],["exist",{"_index":1305,"title":{},"body":{"injectables/CouponService.html":{},"controllers/UserHighlightsController.html":{}}}],["exist'})@apibadrequestresponse({description",{"_index":4531,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["existing",{"_index":3699,"title":{},"body":{"controllers/RepoStarController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{}}}],["existingcontributor",{"_index":5004,"title":{},"body":{"injectables/UserListService.html":{}}}],["existinguser",{"_index":4752,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["existinguser?.email",{"_index":4757,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["existinguser?.id",{"_index":4756,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["expand",{"_index":4002,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["expect",{"_index":5845,"title":{},"body":{"miscellaneous/variables.html":{}}}],["expiration",{"_index":1721,"title":{},"body":{"entities/DbCoupon.html":{}}}],["expired_at",{"_index":1302,"title":{},"body":{"injectables/CouponService.html":{},"entities/DbCoupon.html":{}}}],["explanation",{"_index":888,"title":{},"body":{"controllers/CodeExplanationController.html":{},"injectables/CodeExplanationService.html":{}}}],["explanation.controller",{"_index":3343,"title":{},"body":{"modules/PullRequestModule.html":{}}}],["explanation.controller.ts",{"_index":880,"title":{},"body":{"controllers/CodeExplanationController.html":{},"coverage.html":{}}}],["explanation.controller.ts:22",{"_index":891,"title":{},"body":{"controllers/CodeExplanationController.html":{}}}],["explanation.dto",{"_index":892,"title":{},"body":{"controllers/CodeExplanationController.html":{},"injectables/CodeExplanationService.html":{}}}],["explanation.dto.ts",{"_index":2634,"title":{},"body":{"classes/GenerateCodeExplanationDto.html":{},"coverage.html":{}}}],["explanation.dto.ts:13",{"_index":2637,"title":{},"body":{"classes/GenerateCodeExplanationDto.html":{}}}],["explanation.dto.ts:23",{"_index":2639,"title":{},"body":{"classes/GenerateCodeExplanationDto.html":{}}}],["explanation.dto.ts:33",{"_index":2638,"title":{},"body":{"classes/GenerateCodeExplanationDto.html":{}}}],["explanation.dto.ts:40",{"_index":2636,"title":{},"body":{"classes/GenerateCodeExplanationDto.html":{}}}],["explanation.service",{"_index":894,"title":{},"body":{"controllers/CodeExplanationController.html":{},"modules/PullRequestModule.html":{}}}],["explanation.service.ts",{"_index":901,"title":{},"body":{"injectables/CodeExplanationService.html":{},"coverage.html":{}}}],["explanation.service.ts:10",{"_index":906,"title":{},"body":{"injectables/CodeExplanationService.html":{}}}],["explanation.service.ts:17",{"_index":905,"title":{},"body":{"injectables/CodeExplanationService.html":{}}}],["explanation.service.ts:7",{"_index":903,"title":{},"body":{"injectables/CodeExplanationService.html":{}}}],["explore",{"_index":5719,"title":{},"body":{"miscellaneous/variables.html":{}}}],["export",{"_index":59,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"modules/ApiServicesModule.html":{},"modules/AppModule.html":{},"classes/ApplyUserCouponDto.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"classes/BakeRepoDto.html":{},"controllers/BlogSummaryController.html":{},"modules/BlogSummaryModule.html":{},"injectables/BlogSummaryService.html":{},"interfaces/ChatResponse.html":{},"controllers/CodeExplanationController.html":{},"injectables/CodeExplanationService.html":{},"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"controllers/CodeTestSuggestionController.html":{},"injectables/CodeTestSuggestionService.html":{},"classes/CollaboratorsDto.html":{},"classes/CommitAuthorDto.html":{},"injectables/CommitAuthorsService.html":{},"classes/CommitsDto.html":{},"injectables/CommitsService.html":{},"modules/ContributionModule.html":{},"classes/ContributionPageMetaDto.html":{},"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"classes/ContributionsByProjectDto.html":{},"classes/ContributionsPageDto.html":{},"classes/ContributionsTimeframeDto.html":{},"classes/Contributor.html":{},"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"modules/ContributorModule.html":{},"classes/ContributorPullRequestsDto.html":{},"modules/CouponModule.html":{},"injectables/CouponService.html":{},"classes/CreateBlogSummaryDto.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateInsightDto.html":{},"classes/CreateInsightMemberDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/CreateLogDto.html":{},"classes/CreateUserCollaborationDto.html":{},"classes/CreateUserHighlightDto.html":{},"classes/CreateUserListDto.html":{},"injectables/CustomLogger.html":{},"modules/CustomerModule.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"entities/DbBakedRepo.html":{},"entities/DbCommitAuthors.html":{},"entities/DbCommits.html":{},"entities/DbContribution.html":{},"entities/DbContributionStatTimeframe.html":{},"entities/DbContributionsProjects.html":{},"entities/DbContributorCategoryTimeframe.html":{},"entities/DbCoupon.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"classes/DbFilteredUser.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbPullRequestReview.html":{},"entities/DbRepoLoginContributions.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"classes/DbTimezone.html":{},"classes/DbTopUser.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightReactionResponse.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserListContributorStat.html":{},"entities/DbUserListContributorStat-1.html":{},"entities/DbUserNotification.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"controllers/EmojiController.html":{},"modules/EmojiModule.html":{},"injectables/EmojiService.html":{},"controllers/EndorsementController.html":{},"modules/EndorsementModule.html":{},"injectables/EndorsementService.html":{},"guards/EndorsementTokenGuard.html":{},"classes/FilterListContributorsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/FilteredUsersDto.html":{},"classes/FollowManyUsersDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"controllers/HighlightController.html":{},"modules/HighlightModule.html":{},"classes/HighlightOptionsDto.html":{},"injectables/HttpLoggerMiddleware.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"injectables/InsightRepoService.html":{},"modules/InsightsModule.html":{},"injectables/InsightsService.html":{},"controllers/IssueSummaryController.html":{},"modules/IssueSummaryModule.html":{},"injectables/IssueSummaryService.html":{},"modules/LogModule.html":{},"injectables/LogService.html":{},"modules/OpenAiModule.html":{},"injectables/OpenAiService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaParameters.html":{},"classes/PageOptionsDto.html":{},"injectables/PagerService.html":{},"interfaces/PaginationInput.html":{},"controllers/PizzaOvenController.html":{},"modules/PizzaOvenModule.html":{},"injectables/PizzaOvenService.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestInsightsService.html":{},"modules/PullRequestModule.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestReviewService.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"modules/RepoFilterModule.html":{},"injectables/RepoFilterService.html":{},"classes/RepoInfo.html":{},"modules/RepoModule.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"modules/StarModule.html":{},"injectables/StarService.html":{},"modules/StargazeModule.html":{},"injectables/StargazeService.html":{},"modules/StripeModule.html":{},"injectables/StripeService.html":{},"modules/StripeSubscriptionModule.html":{},"injectables/StripeSubscriptionService.html":{},"modules/StripeWebHookModule.html":{},"controllers/StripeWebhookController.html":{},"modules/SubmitModule.html":{},"injectables/SubmitService.html":{},"classes/SupabaseAuthDto.html":{},"injectables/SupabaseGuard.html":{},"injectables/SupabaseStrategy.html":{},"modules/TierModule.html":{},"injectables/TierService.html":{},"classes/TopProjectsDto.html":{},"classes/TopUsersDto.html":{},"classes/UpdateEndorsementDto.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateInsightMemberDto.html":{},"classes/UpdateUserCollaborationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowingController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"modules/UserListModule.html":{},"classes/UserListMostActiveContributorsDto.html":{},"injectables/UserListService.html":{},"controllers/UserListStatsController.html":{},"injectables/UserListStatsService.html":{},"modules/UserModule.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"classes/UserOnboardingDto.html":{},"injectables/UserOrganizationService.html":{},"controllers/UserRecommendationController.html":{},"classes/UserRepoOptionsDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"modules/UserReposModule.html":{},"injectables/UserReposService.html":{},"modules/VoteModule.html":{},"injectables/VoteService.html":{},"classes/VotedRepoDto.html":{}}}],["exports",{"_index":255,"title":{},"body":{"modules/ApiServicesModule.html":{},"modules/AuthModule.html":{},"modules/BlogSummaryModule.html":{},"modules/ContributionModule.html":{},"modules/CouponModule.html":{},"modules/CustomerModule.html":{},"modules/EndorsementModule.html":{},"modules/InsightsModule.html":{},"modules/IssueSummaryModule.html":{},"modules/LogModule.html":{},"modules/OpenAiModule.html":{},"modules/PizzaOvenModule.html":{},"modules/PullRequestModule.html":{},"modules/RepoFilterModule.html":{},"modules/RepoModule.html":{},"modules/StarModule.html":{},"modules/StargazeModule.html":{},"modules/StripeModule.html":{},"modules/StripeSubscriptionModule.html":{},"modules/StripeWebHookModule.html":{},"modules/SubmitModule.html":{},"modules/TierModule.html":{},"modules/UserListModule.html":{},"modules/UserModule.html":{},"modules/UserReposModule.html":{},"modules/VoteModule.html":{}}}],["express",{"_index":2804,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{},"license.html":{}}}],["extends",{"_index":1040,"title":{},"body":{"classes/ContributionPageMetaDto.html":{},"classes/ContributionPageOptionsDto.html":{},"classes/ContributorPullRequestsDto.html":{},"injectables/CustomLogger.html":{},"entities/DbBakedRepo.html":{},"entities/DbCommitAuthors.html":{},"entities/DbCommits.html":{},"entities/DbContribution.html":{},"entities/DbCoupon.html":{},"entities/DbCustomer.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbPullRequestReview.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"classes/DbUserHighlightReactionResponse.html":{},"entities/DbUserList.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/SupabaseGuard.html":{},"injectables/SupabaseStrategy.html":{},"classes/UpdateEndorsementDto.html":{},"classes/UpdateInsightDto.html":{},"classes/UserListMostActiveContributorsDto.html":{},"classes/UserRepoOptionsDto.html":{}}}],["extractjwt",{"_index":4144,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":4157,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["extractor",{"_index":4156,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["f",{"_index":5423,"title":{},"body":{"index.html":{}}}],["facilitate",{"_index":5395,"title":{},"body":{"index.html":{}}}],["false",{"_index":456,"title":{},"body":{"modules/AppModule.html":{},"classes/BakeRepoDto.html":{},"classes/ContributionPageMetaDto.html":{},"classes/Contributor.html":{},"classes/CreateInsightDto.html":{},"classes/CreateUserListDto.html":{},"entities/DbCommitAuthors.html":{},"entities/DbContribution.html":{},"entities/DbContributionStatTimeframe.html":{},"entities/DbContributionsProjects.html":{},"entities/DbContributorCategoryTimeframe.html":{},"entities/DbEmoji.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoLoginContributions.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserListContributorStat.html":{},"entities/DbUserListContributorStat-1.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"guards/EndorsementTokenGuard.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"classes/PageMetaDto.html":{},"controllers/RepoContributionsController.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserListStatsController.html":{},"injectables/VoteService.html":{},"miscellaneous/variables.html":{}}}],["false})@apiquery({name",{"_index":3465,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["false})@column('boolean",{"_index":1934,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["false})@column({default",{"_index":1792,"title":{},"body":{"entities/DbInsight.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbUserList.html":{}}}],["false})@column({type",{"_index":2179,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["false})@isboolean",{"_index":752,"title":{},"body":{"classes/BakeRepoDto.html":{},"classes/CreateInsightDto.html":{},"classes/CreateUserListDto.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{}}}],["false})@isboolean()@isoptional",{"_index":4225,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["fastifyadapter",{"_index":5727,"title":{},"body":{"miscellaneous/variables.html":{}}}],["favorite",{"_index":1791,"title":{},"body":{"entities/DbInsight.html":{}}}],["featured",{"_index":1794,"title":{},"body":{"entities/DbInsight.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserList.html":{},"controllers/HighlightController.html":{},"controllers/UserListController.html":{}}}],["featurehighlight",{"_index":2718,"title":{},"body":{"controllers/HighlightController.html":{}}}],["featurehighlight(id",{"_index":2725,"title":{},"body":{"controllers/HighlightController.html":{}}}],["features",{"_index":4174,"title":{},"body":{"injectables/TierService.html":{}}}],["fetch",{"_index":847,"title":{},"body":{"interfaces/ChatResponse.html":{},"injectables/OpenAiService.html":{}}}],["fetched",{"_index":2932,"title":{},"body":{"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{}}}],["fetcher",{"_index":854,"title":{},"body":{"interfaces/ChatResponse.html":{},"injectables/OpenAiService.html":{}}}],["fetcher(this.configservice.get(\"openai.completionsurl",{"_index":858,"title":{},"body":{"interfaces/ChatResponse.html":{},"injectables/OpenAiService.html":{}}}],["fetches",{"_index":4551,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["file",{"_index":5,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"modules/ApiServicesModule.html":{},"modules/AppModule.html":{},"classes/ApplyUserCouponDto.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"classes/BakeRepoDto.html":{},"controllers/BlogSummaryController.html":{},"modules/BlogSummaryModule.html":{},"injectables/BlogSummaryService.html":{},"interfaces/ChatResponse.html":{},"controllers/CodeExplanationController.html":{},"injectables/CodeExplanationService.html":{},"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"controllers/CodeTestSuggestionController.html":{},"injectables/CodeTestSuggestionService.html":{},"classes/CollaboratorsDto.html":{},"classes/CommitAuthorDto.html":{},"injectables/CommitAuthorsService.html":{},"classes/CommitsDto.html":{},"injectables/CommitsService.html":{},"modules/ContributionModule.html":{},"classes/ContributionPageMetaDto.html":{},"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"classes/ContributionsByProjectDto.html":{},"classes/ContributionsPageDto.html":{},"classes/ContributionsTimeframeDto.html":{},"classes/Contributor.html":{},"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"modules/ContributorModule.html":{},"classes/ContributorPullRequestsDto.html":{},"modules/CouponModule.html":{},"injectables/CouponService.html":{},"classes/CreateBlogSummaryDto.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateInsightDto.html":{},"classes/CreateInsightMemberDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/CreateLogDto.html":{},"classes/CreateUserCollaborationDto.html":{},"classes/CreateUserHighlightDto.html":{},"classes/CreateUserListDto.html":{},"injectables/CustomLogger.html":{},"modules/CustomerModule.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"entities/DbBakedRepo.html":{},"entities/DbCommitAuthors.html":{},"entities/DbCommits.html":{},"entities/DbContribution.html":{},"entities/DbContributionStatTimeframe.html":{},"entities/DbContributionsProjects.html":{},"entities/DbContributorCategoryTimeframe.html":{},"entities/DbCoupon.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"classes/DbFilteredUser.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbPullRequestReview.html":{},"entities/DbRepoLoginContributions.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"classes/DbTimezone.html":{},"classes/DbTopUser.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightReactionResponse.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserListContributorStat.html":{},"entities/DbUserListContributorStat-1.html":{},"entities/DbUserNotification.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"controllers/EmojiController.html":{},"modules/EmojiModule.html":{},"injectables/EmojiService.html":{},"controllers/EndorsementController.html":{},"modules/EndorsementModule.html":{},"injectables/EndorsementService.html":{},"guards/EndorsementTokenGuard.html":{},"classes/FilterListContributorsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/FilteredUsersDto.html":{},"classes/FollowManyUsersDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"controllers/HighlightController.html":{},"modules/HighlightModule.html":{},"classes/HighlightOptionsDto.html":{},"injectables/HttpLoggerMiddleware.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"injectables/InsightRepoService.html":{},"modules/InsightsModule.html":{},"injectables/InsightsService.html":{},"controllers/IssueSummaryController.html":{},"modules/IssueSummaryModule.html":{},"injectables/IssueSummaryService.html":{},"modules/LogModule.html":{},"injectables/LogService.html":{},"modules/OpenAiModule.html":{},"injectables/OpenAiService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaParameters.html":{},"classes/PageOptionsDto.html":{},"injectables/PagerService.html":{},"interfaces/PaginationInput.html":{},"controllers/PizzaOvenController.html":{},"modules/PizzaOvenModule.html":{},"injectables/PizzaOvenService.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestInsightsService.html":{},"modules/PullRequestModule.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestReviewService.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"modules/RepoFilterModule.html":{},"injectables/RepoFilterService.html":{},"classes/RepoInfo.html":{},"modules/RepoModule.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"modules/StarModule.html":{},"injectables/StarService.html":{},"modules/StargazeModule.html":{},"injectables/StargazeService.html":{},"modules/StripeModule.html":{},"injectables/StripeService.html":{},"modules/StripeSubscriptionModule.html":{},"injectables/StripeSubscriptionService.html":{},"modules/StripeWebHookModule.html":{},"controllers/StripeWebhookController.html":{},"modules/SubmitModule.html":{},"injectables/SubmitService.html":{},"classes/SupabaseAuthDto.html":{},"injectables/SupabaseGuard.html":{},"injectables/SupabaseStrategy.html":{},"modules/TierModule.html":{},"injectables/TierService.html":{},"classes/TopProjectsDto.html":{},"classes/TopUsersDto.html":{},"classes/UpdateEndorsementDto.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateInsightMemberDto.html":{},"classes/UpdateUserCollaborationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowingController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"modules/UserListModule.html":{},"classes/UserListMostActiveContributorsDto.html":{},"injectables/UserListService.html":{},"controllers/UserListStatsController.html":{},"injectables/UserListStatsService.html":{},"modules/UserModule.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"classes/UserOnboardingDto.html":{},"injectables/UserOrganizationService.html":{},"controllers/UserRecommendationController.html":{},"classes/UserRepoOptionsDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"modules/UserReposModule.html":{},"injectables/UserReposService.html":{},"modules/VoteModule.html":{},"injectables/VoteService.html":{},"classes/VotedRepoDto.html":{},"coverage.html":{},"index.html":{}}}],["files",{"_index":1920,"title":{},"body":{"entities/DbPullRequest.html":{},"index.html":{},"license.html":{}}}],["filter",{"_index":2246,"title":{},"body":{"classes/DbUserHighlightReactionResponse.html":{},"classes/FilterOptionsDto.html":{},"classes/FilteredUsersDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/TopUsersDto.html":{}}}],["filter((notification",{"_index":5157,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["filter.module",{"_index":3338,"title":{},"body":{"modules/PullRequestModule.html":{},"modules/RepoModule.html":{}}}],["filter.module.ts",{"_index":3525,"title":{},"body":{"modules/RepoFilterModule.html":{}}}],["filter.service",{"_index":3291,"title":{},"body":{"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"modules/RepoFilterModule.html":{},"injectables/RepoService.html":{},"modules/UserModule.html":{}}}],["filter.service.ts",{"_index":3526,"title":{},"body":{"injectables/RepoFilterService.html":{},"coverage.html":{}}}],["filter.service.ts:15",{"_index":3532,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["filter.service.ts:86",{"_index":3530,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["filter/insightfilterfieldsenum",{"_index":3533,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["filtered",{"_index":207,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["filtered_users",{"_index":218,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["filtered_users\".\"user_login",{"_index":220,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["filteredusersdto",{"_index":2618,"title":{"classes/FilteredUsersDto.html":{}},"body":{"classes/FilteredUsersDto.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["filterlistcontributorsdto",{"_index":2565,"title":{"classes/FilterListContributorsDto.html":{}},"body":{"classes/FilterListContributorsDto.html":{},"controllers/UserListController.html":{},"injectables/UserListService.html":{},"coverage.html":{}}}],["filteroptionsdto",{"_index":2604,"title":{"classes/FilterOptionsDto.html":{}},"body":{"classes/FilterOptionsDto.html":{},"controllers/PullRequestController.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/RepoFilterService.html":{},"coverage.html":{}}}],["filters",{"_index":1209,"title":{},"body":{"controllers/ContributorController.html":{},"controllers/PullRequestController.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"controllers/RepoController.html":{},"injectables/RepoFilterService.html":{},"injectables/RepoService.html":{},"injectables/UserHighlightsService.html":{}}}],["filters.foreach(([sql",{"_index":3555,"title":{},"body":{"injectables/RepoFilterService.html":{},"injectables/UserHighlightsService.html":{}}}],["filters.push",{"_index":3546,"title":{},"body":{"injectables/RepoFilterService.html":{},"injectables/UserHighlightsService.html":{}}}],["filters.push([\"repos.stars",{"_index":3544,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["filters.push([`'${startdate}'::timestamp",{"_index":3319,"title":{},"body":{"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoService.html":{}}}],["filters.push([`:topic",{"_index":3540,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["filters.push([`lower(repos.full_name)=:repo",{"_index":3538,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["filters.push([`repos.id",{"_index":3536,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["filters.push([this.hacktoberfestprcountfilterbuilderend(interval",{"_index":3318,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["filters.push([this.hacktoberfestprcountfilterbuilderstart",{"_index":3317,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["filters.push([this.hacktoberfestprfilterbuilderend(range",{"_index":3423,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["filters.push([this.hacktoberfestprfilterbuilderstart",{"_index":3422,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["filterservice",{"_index":3381,"title":{},"body":{"injectables/PullRequestService.html":{},"injectables/RepoService.html":{}}}],["find",{"_index":2731,"title":{},"body":{"controllers/HighlightController.html":{},"controllers/PullRequestController.html":{},"controllers/RepoContributionsController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserInsightMemberController.html":{}}}],["findall",{"_index":1111,"title":{},"body":{"injectables/ContributionService.html":{},"injectables/EmojiService.html":{},"injectables/EndorsementService.html":{},"injectables/PullRequestService.html":{},"controllers/RepoController.html":{},"injectables/RepoService.html":{},"injectables/UserHighlightsService.html":{}}}],["findall(@query",{"_index":3517,"title":{},"body":{"controllers/RepoController.html":{}}}],["findall(pageoptionsdto",{"_index":1119,"title":{},"body":{"injectables/ContributionService.html":{},"injectables/EmojiService.html":{},"injectables/EndorsementService.html":{},"injectables/PullRequestService.html":{},"controllers/RepoController.html":{},"injectables/RepoService.html":{},"injectables/UserHighlightsService.html":{}}}],["findallbakedrepos",{"_index":3177,"title":{},"body":{"injectables/PizzaOvenService.html":{}}}],["findallbakedrepos(pageoptionsdto",{"_index":3183,"title":{},"body":{"injectables/PizzaOvenService.html":{}}}],["findallbycontributor",{"_index":3370,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["findallbycontributor(contributor",{"_index":3385,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["findallbycreatoruserid",{"_index":2503,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["findallbycreatoruserid(userid",{"_index":2515,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["findallbyownerandrepo",{"_index":3450,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["findallbyownerandrepo(owner",{"_index":3453,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["findallbyownerrepoandcontributorlogin",{"_index":3451,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["findallbyownerrepoandcontributorlogin(owner",{"_index":3459,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["findallbyrecipientuserid",{"_index":2504,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["findallbyrecipientuserid(userid",{"_index":2517,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["findallbyrepoid",{"_index":1112,"title":{},"body":{"injectables/ContributionService.html":{},"controllers/RepoContributionsController.html":{}}}],["findallbyrepoid(id",{"_index":3467,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["findallbyrepoid(repoid",{"_index":1122,"title":{},"body":{"injectables/ContributionService.html":{}}}],["findallbyrepoowneroruser",{"_index":2505,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["findallbyrepoowneroruser(repoowneroruser",{"_index":2519,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["findallbyrepoownerorusername",{"_index":2410,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["findallbyrepoownerorusername(repoowneroruser",{"_index":2428,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["findallbyuserid",{"_index":2962,"title":{},"body":{"injectables/InsightsService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserListService.html":{},"injectables/UserNotificationService.html":{},"injectables/UserOrganizationService.html":{},"injectables/UserReposService.html":{}}}],["findallbyuserid(pageoptionsdto",{"_index":2971,"title":{},"body":{"injectables/InsightsService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserListService.html":{},"injectables/UserReposService.html":{}}}],["findallbyuserid(userid",{"_index":5145,"title":{},"body":{"injectables/UserNotificationService.html":{},"injectables/UserOrganizationService.html":{}}}],["findallbyuserlogin",{"_index":1113,"title":{},"body":{"injectables/ContributionService.html":{}}}],["findallbyuserlogin(repoid",{"_index":1124,"title":{},"body":{"injectables/ContributionService.html":{}}}],["findallchurncontributors",{"_index":3371,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["findallchurncontributors(pageoptionsdto",{"_index":3387,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["findallchurnpullrequestcontributors",{"_index":1232,"title":{},"body":{"controllers/ContributorInsightsController.html":{}}}],["findallchurnpullrequestcontributors(pageoptionsdto",{"_index":1236,"title":{},"body":{"controllers/ContributorInsightsController.html":{}}}],["findallcommitauthors",{"_index":978,"title":{},"body":{"injectables/CommitAuthorsService.html":{}}}],["findallcommitauthors(pageoptionsdto",{"_index":984,"title":{},"body":{"injectables/CommitAuthorsService.html":{}}}],["findallcommitsbybakedrepoid",{"_index":1009,"title":{},"body":{"injectables/CommitsService.html":{}}}],["findallcommitsbybakedrepoid(pageoptionsdto",{"_index":1016,"title":{},"body":{"injectables/CommitsService.html":{}}}],["findallcommitsbycommitauthorid",{"_index":1010,"title":{},"body":{"injectables/CommitsService.html":{}}}],["findallcommitsbycommitauthorid(pageoptionsdto",{"_index":1018,"title":{},"body":{"injectables/CommitsService.html":{}}}],["findallcontributorsbyrepoid",{"_index":3472,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["findallcontributorswithfilters",{"_index":3372,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["findallcontributorswithfilters(pageoptionsdto",{"_index":3389,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["findallemojis",{"_index":2375,"title":{},"body":{"controllers/EmojiController.html":{}}}],["findallemojis(@query",{"_index":2389,"title":{},"body":{"controllers/EmojiController.html":{}}}],["findallemojis(pageoptionsdto",{"_index":2376,"title":{},"body":{"controllers/EmojiController.html":{}}}],["findallendorsements",{"_index":2411,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["findallendorsements(@query",{"_index":2468,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["findallendorsements(pageoptionsdto",{"_index":2433,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["findallendorsementsbyrepo",{"_index":2412,"title":{},"body":{"controllers/EndorsementController.html":{},"injectables/EndorsementService.html":{}}}],["findallendorsementsbyrepo(owner",{"_index":2435,"title":{},"body":{"controllers/EndorsementController.html":{},"injectables/EndorsementService.html":{}}}],["findallendorsementsbyrepobyuser",{"_index":2478,"title":{},"body":{"controllers/EndorsementController.html":{},"injectables/EndorsementService.html":{}}}],["findallendorsementsbyrepobyuser(owner",{"_index":2522,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["findallfeatured",{"_index":4604,"title":{},"body":{"injectables/UserHighlightsService.html":{},"injectables/UserListService.html":{}}}],["findallfeatured(pageoptionsdto",{"_index":4628,"title":{},"body":{"injectables/UserHighlightsService.html":{},"injectables/UserListService.html":{}}}],["findallfeaturedhighlights",{"_index":2719,"title":{},"body":{"controllers/HighlightController.html":{}}}],["findallfeaturedhighlights(@query",{"_index":2773,"title":{},"body":{"controllers/HighlightController.html":{}}}],["findallfeaturedhighlights(pageoptionsdto",{"_index":2735,"title":{},"body":{"controllers/HighlightController.html":{}}}],["findallfollowers",{"_index":4422,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["findallfollowers(userid",{"_index":4434,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["findallfollowinglist",{"_index":4423,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["findallfollowinglist(userid",{"_index":4436,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["findallhighlightreactions",{"_index":4605,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["findallhighlightreactions(highlightid",{"_index":4630,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["findallhighlightrepos",{"_index":2720,"title":{},"body":{"controllers/HighlightController.html":{},"injectables/UserHighlightsService.html":{}}}],["findallhighlightrepos(@query",{"_index":2782,"title":{},"body":{"controllers/HighlightController.html":{}}}],["findallhighlightrepos(pageoptionsdto",{"_index":2739,"title":{},"body":{"controllers/HighlightController.html":{},"injectables/UserHighlightsService.html":{}}}],["findallhighlights",{"_index":2721,"title":{},"body":{"controllers/HighlightController.html":{}}}],["findallhighlights(@query",{"_index":2770,"title":{},"body":{"controllers/HighlightController.html":{}}}],["findallhighlights(pageoptionsdto",{"_index":2743,"title":{},"body":{"controllers/HighlightController.html":{}}}],["findallhighlightsbyusername",{"_index":4337,"title":{},"body":{"controllers/UserController.html":{}}}],["findallhighlightsbyusername(username",{"_index":4344,"title":{},"body":{"controllers/UserController.html":{}}}],["findallinsightmembers",{"_index":2860,"title":{},"body":{"injectables/InsightMemberService.html":{},"controllers/UserInsightMemberController.html":{}}}],["findallinsightmembers(pageoptionsdto",{"_index":2876,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["findallinsightsbyuserid",{"_index":4712,"title":{},"body":{"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["findallinsightsbyuserid(pageoptionsdto",{"_index":4722,"title":{},"body":{"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["findalllistcontributorstats",{"_index":5076,"title":{},"body":{"injectables/UserListStatsService.html":{}}}],["findalllistcontributorstats(pageoptionsdto",{"_index":5089,"title":{},"body":{"injectables/UserListStatsService.html":{}}}],["findallorgsbyusername",{"_index":4338,"title":{},"body":{"controllers/UserController.html":{}}}],["findallorgsbyusername(username",{"_index":4348,"title":{},"body":{"controllers/UserController.html":{}}}],["findallrecentcontributors",{"_index":3373,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["findallrecentcontributors(pageoptionsdto",{"_index":3391,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["findallrecentpullrequestcontributors",{"_index":1233,"title":{},"body":{"controllers/ContributorInsightsController.html":{}}}],["findallrecentpullrequestcontributors(pageoptionsdto",{"_index":1245,"title":{},"body":{"controllers/ContributorInsightsController.html":{}}}],["findallrepeatcontributors",{"_index":3374,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["findallrepeatcontributors(pageoptionsdto",{"_index":3393,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["findallrepeatpullrequestcontributors",{"_index":1234,"title":{},"body":{"controllers/ContributorInsightsController.html":{}}}],["findallrepeatpullrequestcontributors(pageoptionsdto",{"_index":1248,"title":{},"body":{"controllers/ContributorInsightsController.html":{}}}],["findallreposwithfilters",{"_index":3497,"title":{},"body":{"controllers/RepoController.html":{}}}],["findallreposwithfilters(@query",{"_index":3519,"title":{},"body":{"controllers/RepoController.html":{}}}],["findallreposwithfilters(pageoptionsdto",{"_index":3502,"title":{},"body":{"controllers/RepoController.html":{}}}],["findallreviewsbyprid",{"_index":3360,"title":{},"body":{"injectables/PullRequestReviewService.html":{}}}],["findallreviewsbyprid(prid",{"_index":3364,"title":{},"body":{"injectables/PullRequestReviewService.html":{}}}],["findalltopreposbyusername",{"_index":4339,"title":{},"body":{"controllers/UserController.html":{}}}],["findalltopreposbyusername(username",{"_index":4354,"title":{},"body":{"controllers/UserController.html":{}}}],["findallusercollaborations",{"_index":4269,"title":{},"body":{"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{}}}],["findallusercollaborations(pageoptionsdto",{"_index":4280,"title":{},"body":{"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{}}}],["findallusercontributionsbyrepoid",{"_index":3452,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["findallusercontributionsbyrepoid(owner",{"_index":3470,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["findallusercreatedendorsements",{"_index":4403,"title":{},"body":{"controllers/UserEndorsementController.html":{}}}],["findallusercreatedendorsements(@userid",{"_index":4414,"title":{},"body":{"controllers/UserEndorsementController.html":{}}}],["findallusercreatedendorsements(userid",{"_index":4405,"title":{},"body":{"controllers/UserEndorsementController.html":{}}}],["findallusercreatedendorsementsbyusername",{"_index":2413,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["findallusercreatedendorsementsbyusername(username",{"_index":2439,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["findalluserreceivedendorsements",{"_index":4404,"title":{},"body":{"controllers/UserEndorsementController.html":{}}}],["findalluserreceivedendorsements(@userid",{"_index":4417,"title":{},"body":{"controllers/UserEndorsementController.html":{}}}],["findalluserreceivedendorsements(userid",{"_index":4408,"title":{},"body":{"controllers/UserEndorsementController.html":{}}}],["findalluserreceivedendorsementsbyusername",{"_index":2414,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["findalluserreceivedendorsementsbyusername(username",{"_index":2443,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["findalluserstargazed",{"_index":3741,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["findalluserstargazed(pageoptionsdto",{"_index":3753,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["findalluserstarred",{"_index":3694,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["findalluserstarred(pageoptionsdto",{"_index":3710,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["findallusersubmitted",{"_index":3779,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["findallusersubmitted(pageoptionsdto",{"_index":3791,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["findalluservoted",{"_index":3816,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["findalluservoted(pageoptionsdto",{"_index":3829,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["findallwithfilters",{"_index":3375,"title":{},"body":{"injectables/PullRequestService.html":{},"injectables/RepoService.html":{}}}],["findallwithfilters(pageoptionsdto",{"_index":3395,"title":{},"body":{"injectables/PullRequestService.html":{},"injectables/RepoService.html":{}}}],["findbakedrepobyid",{"_index":3092,"title":{},"body":{"controllers/PizzaOvenController.html":{},"injectables/PizzaOvenService.html":{}}}],["findbakedrepobyid(@param(\"id",{"_index":3146,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["findbakedrepobyid(id",{"_index":3098,"title":{},"body":{"controllers/PizzaOvenController.html":{},"injectables/PizzaOvenService.html":{}}}],["findbycustomerid",{"_index":1510,"title":{},"body":{"injectables/CustomerService.html":{}}}],["findbycustomerid(id",{"_index":1519,"title":{},"body":{"injectables/CustomerService.html":{}}}],["findbyid",{"_index":1511,"title":{},"body":{"injectables/CustomerService.html":{}}}],["findbyid(id",{"_index":1521,"title":{},"body":{"injectables/CustomerService.html":{}}}],["findcommitauthorbyid",{"_index":979,"title":{},"body":{"injectables/CommitAuthorsService.html":{},"controllers/PizzaOvenController.html":{}}}],["findcommitauthorbyid(@param(\"id",{"_index":3153,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["findcommitauthorbyid(id",{"_index":986,"title":{},"body":{"injectables/CommitAuthorsService.html":{},"controllers/PizzaOvenController.html":{}}}],["findcommitbyid",{"_index":1011,"title":{},"body":{"injectables/CommitsService.html":{},"controllers/PizzaOvenController.html":{}}}],["findcommitbyid(@param(\"id",{"_index":3161,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["findcommitbyid(id",{"_index":1020,"title":{},"body":{"injectables/CommitsService.html":{},"controllers/PizzaOvenController.html":{}}}],["findcontributionsbyproject",{"_index":183,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["findcontributionsbyproject(listid",{"_index":5091,"title":{},"body":{"injectables/UserListStatsService.html":{}}}],["findcontributionsintimeframe",{"_index":137,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["findcontributionsintimeframe(options",{"_index":5093,"title":{},"body":{"injectables/UserListStatsService.html":{}}}],["findcontributionsintimeframehelper",{"_index":5077,"title":{},"body":{"injectables/UserListStatsService.html":{}}}],["findcontributionsintimeframehelper(startdate",{"_index":5095,"title":{},"body":{"injectables/UserListStatsService.html":{}}}],["findcontributorcategoriesbytimeframe",{"_index":127,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["findcontributorcategoriesbytimeframe(options",{"_index":5097,"title":{},"body":{"injectables/UserListStatsService.html":{}}}],["findcontributorcategoriesintimeframehelper",{"_index":5078,"title":{},"body":{"injectables/UserListStatsService.html":{}}}],["findcontributorcategoriesintimeframehelper(startdate",{"_index":5099,"title":{},"body":{"injectables/UserListStatsService.html":{}}}],["findcontributorpullrequests",{"_index":4340,"title":{},"body":{"controllers/UserController.html":{}}}],["findcontributorpullrequests(username",{"_index":4358,"title":{},"body":{"controllers/UserController.html":{}}}],["findcontributorsbyfilter",{"_index":4952,"title":{},"body":{"injectables/UserListService.html":{}}}],["findcontributorsbyfilter(pageoptionsdto",{"_index":4974,"title":{},"body":{"injectables/UserListService.html":{}}}],["findcontributorsbylistid",{"_index":4953,"title":{},"body":{"injectables/UserListService.html":{}}}],["findcontributorsbylistid(pageoptionsdto",{"_index":4976,"title":{},"body":{"injectables/UserListService.html":{}}}],["findcoupon",{"_index":1289,"title":{},"body":{"injectables/CouponService.html":{}}}],["findcoupon(code",{"_index":1296,"title":{},"body":{"injectables/CouponService.html":{}}}],["findendorsementbyid",{"_index":2415,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["findendorsementbyid(@param(\"id",{"_index":2482,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["findendorsementbyid(id",{"_index":2446,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["findinsightpagebyid",{"_index":2822,"title":{},"body":{"controllers/InsightController.html":{}}}],["findinsightpagebyid(@param(\"id",{"_index":2849,"title":{},"body":{"controllers/InsightController.html":{}}}],["findinsightpagebyid(id",{"_index":2824,"title":{},"body":{"controllers/InsightController.html":{}}}],["findlistcontributorshighlights",{"_index":4954,"title":{},"body":{"injectables/UserListService.html":{}}}],["findlistcontributorshighlights(pageoptionsdto",{"_index":4978,"title":{},"body":{"injectables/UserListService.html":{}}}],["findlistcontributorstatsbyproject",{"_index":73,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["findlistcontributorstatsbyproject(options",{"_index":5101,"title":{},"body":{"injectables/UserListStatsService.html":{}}}],["findnewcontributorsintimerange",{"_index":3376,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["findnewcontributorsintimerange(pageoptionsdto",{"_index":3397,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["findonebyid",{"_index":2506,"title":{},"body":{"injectables/EndorsementService.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightsService.html":{},"controllers/RepoController.html":{},"injectables/RepoService.html":{},"injectables/UserCollaborationService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserListService.html":{},"injectables/UserReposService.html":{}}}],["findonebyid(@param(\"id",{"_index":3513,"title":{},"body":{"controllers/RepoController.html":{}}}],["findonebyid(id",{"_index":2524,"title":{},"body":{"injectables/EndorsementService.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightsService.html":{},"controllers/RepoController.html":{},"injectables/RepoService.html":{},"injectables/UserCollaborationService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserListService.html":{},"injectables/UserReposService.html":{}}}],["findonebyownerandrepo",{"_index":3498,"title":{},"body":{"controllers/RepoController.html":{},"injectables/RepoService.html":{}}}],["findonebyownerandrepo(@param(\"owner",{"_index":3515,"title":{},"body":{"controllers/RepoController.html":{}}}],["findonebyownerandrepo(owner",{"_index":3507,"title":{},"body":{"controllers/RepoController.html":{},"injectables/RepoService.html":{}}}],["findonebyrepoid",{"_index":3817,"title":{},"body":{"controllers/RepoVoteController.html":{},"injectables/VoteService.html":{}}}],["findonebyrepoid(@param(\"repoid",{"_index":3851,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["findonebyrepoid(repoid",{"_index":3833,"title":{},"body":{"controllers/RepoVoteController.html":{},"injectables/VoteService.html":{}}}],["findoneuserbyid",{"_index":4341,"title":{},"body":{"controllers/UserController.html":{}}}],["findoneuserbyid(@param(\"username",{"_index":4385,"title":{},"body":{"controllers/UserController.html":{}}}],["findoneuserbyid(username",{"_index":4363,"title":{},"body":{"controllers/UserController.html":{}}}],["findoneuserbyuserame",{"_index":4365,"title":{},"body":{"controllers/UserController.html":{}}}],["findoneuserhighlightreaction",{"_index":4606,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["findoneuserhighlightreaction(highlightid",{"_index":4635,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["findorgsrecommendations",{"_index":3588,"title":{},"body":{"injectables/RepoService.html":{}}}],["findorgsrecommendations(userid",{"_index":3603,"title":{},"body":{"injectables/RepoService.html":{}}}],["findpubliconebyid",{"_index":4955,"title":{},"body":{"injectables/UserListService.html":{}}}],["findpubliconebyid(id",{"_index":4981,"title":{},"body":{"injectables/UserListService.html":{}}}],["findrecommendations",{"_index":3589,"title":{},"body":{"injectables/RepoService.html":{}}}],["findrecommendations(interests",{"_index":3605,"title":{},"body":{"injectables/RepoService.html":{}}}],["finds",{"_index":2424,"title":{},"body":{"controllers/EndorsementController.html":{},"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"controllers/PizzaOvenController.html":{},"controllers/PullRequestController.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{}}}],["findtop",{"_index":4607,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["findtop(pageoptionsdto",{"_index":4637,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["findtophighlights",{"_index":2722,"title":{},"body":{"controllers/HighlightController.html":{}}}],["findtophighlights(@query",{"_index":2788,"title":{},"body":{"controllers/HighlightController.html":{}}}],["findtophighlights(pageoptionsdto",{"_index":2746,"title":{},"body":{"controllers/HighlightController.html":{}}}],["finduserfollowerbyid",{"_index":4424,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["finduserfollowerbyid(userid",{"_index":4438,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["finduserorgsreporecommendations",{"_index":5195,"title":{},"body":{"controllers/UserRecommendationController.html":{}}}],["finduserorgsreporecommendations(@userid",{"_index":5214,"title":{},"body":{"controllers/UserRecommendationController.html":{}}}],["finduserorgsreporecommendations(userid",{"_index":5197,"title":{},"body":{"controllers/UserRecommendationController.html":{}}}],["finduserreporecommendations",{"_index":5196,"title":{},"body":{"controllers/UserRecommendationController.html":{}}}],["finduserreporecommendations(@userid",{"_index":5210,"title":{},"body":{"controllers/UserRecommendationController.html":{}}}],["finduserreporecommendations(userid",{"_index":5203,"title":{},"body":{"controllers/UserRecommendationController.html":{}}}],["finish",{"_index":750,"title":{},"body":{"classes/BakeRepoDto.html":{}}}],["first",{"_index":199,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/BlogSummaryService.html":{},"classes/CreateUserHighlightDto.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserTopRepo.html":{},"injectables/UserListStatsService.html":{}}}],["fitness",{"_index":5588,"title":{},"body":{"license.html":{}}}],["fix",{"_index":5496,"title":{},"body":{"index.html":{}}}],["fix(cli",{"_index":1976,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["fixed",{"_index":2659,"title":{},"body":{"classes/GeneratePullRequestDescriptionDto.html":{}}}],["flag",{"_index":1050,"title":{},"body":{"classes/ContributionPageMetaDto.html":{},"entities/DbInsight.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbUserList.html":{},"classes/PageMetaDto.html":{},"classes/SupabaseAuthDto.html":{}}}],["folder",{"_index":5473,"title":{},"body":{"index.html":{}}}],["follow",{"_index":2352,"title":{},"body":{"entities/DbUserToUserFollows.html":{},"classes/FollowManyUsersDto.html":{},"controllers/RepoStargazeController.html":{},"controllers/UserFollowsController.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["follow.controller",{"_index":5113,"title":{},"body":{"modules/UserModule.html":{}}}],["follow.controller.ts",{"_index":4475,"title":{},"body":{"controllers/UserFollowsController.html":{},"coverage.html":{}}}],["follow.controller.ts:108",{"_index":4498,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["follow.controller.ts:32",{"_index":4492,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["follow.controller.ts:50",{"_index":4483,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["follow.controller.ts:69",{"_index":4487,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["follow.service",{"_index":4470,"title":{},"body":{"controllers/UserFollowingController.html":{},"controllers/UserFollowsController.html":{},"injectables/UserHighlightsService.html":{},"modules/UserModule.html":{}}}],["follow.service.ts",{"_index":4420,"title":{},"body":{"injectables/UserFollowService.html":{},"coverage.html":{}}}],["follow.service.ts:10",{"_index":4428,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["follow.service.ts:18",{"_index":4433,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["follow.service.ts:24",{"_index":4435,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["follow.service.ts:37",{"_index":4437,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["follow.service.ts:47",{"_index":4440,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["follow.service.ts:63",{"_index":4432,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["follow.service.ts:92",{"_index":4442,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["followed",{"_index":2311,"title":{},"body":{"entities/DbUserNotification.html":{},"controllers/RepoStargazeController.html":{},"injectables/StargazeService.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"injectables/UserNotificationService.html":{}}}],["followeduserid",{"_index":4431,"title":{},"body":{"injectables/UserFollowService.html":{},"injectables/UserNotificationService.html":{}}}],["follower",{"_index":2355,"title":{},"body":{"entities/DbUserToUserFollows.html":{},"injectables/UserHighlightsService.html":{}}}],["follower.user_id",{"_index":4685,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["followers",{"_index":4680,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["followers.map(async",{"_index":4683,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["followeruserid",{"_index":4439,"title":{},"body":{"injectables/UserFollowService.html":{},"injectables/UserHighlightsService.html":{}}}],["followexists",{"_index":4452,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["followexists.deleted_at",{"_index":4456,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["following",{"_index":4453,"title":{},"body":{"injectables/UserFollowService.html":{},"controllers/UserFollowingController.html":{},"controllers/UserFollowsController.html":{},"index.html":{},"license.html":{}}}],["following.controller",{"_index":5117,"title":{},"body":{"modules/UserModule.html":{}}}],["following.controller.ts",{"_index":4464,"title":{},"body":{"controllers/UserFollowingController.html":{},"coverage.html":{}}}],["following.controller.ts:19",{"_index":4469,"title":{},"body":{"controllers/UserFollowingController.html":{}}}],["following_user_id",{"_index":2351,"title":{},"body":{"entities/DbUserToUserFollows.html":{},"injectables/UserFollowService.html":{},"injectables/UserHighlightsService.html":{}}}],["followings",{"_index":4195,"title":{},"body":{"classes/TopUsersDto.html":{}}}],["followmanyusersdto",{"_index":2627,"title":{"classes/FollowManyUsersDto.html":{}},"body":{"classes/FollowManyUsersDto.html":{},"controllers/UserFollowsController.html":{},"coverage.html":{}}}],["follows",{"_index":3767,"title":{},"body":{"controllers/RepoStargazeController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"index.html":{}}}],["follows'})@apibearerauth()@useguards(supabaseguard)@apiokresponse({type",{"_index":4552,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["follows'})@apiokresponse({description",{"_index":3758,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["follows.entity",{"_index":398,"title":{},"body":{"modules/AppModule.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowingController.html":{},"controllers/UserFollowsController.html":{},"modules/UserModule.html":{}}}],["follows.entity.ts",{"_index":2350,"title":{},"body":{"entities/DbUserToUserFollows.html":{},"coverage.html":{}}}],["follows.entity.ts:16",{"_index":2357,"title":{},"body":{"entities/DbUserToUserFollows.html":{}}}],["follows.entity.ts:24",{"_index":2359,"title":{},"body":{"entities/DbUserToUserFollows.html":{}}}],["follows.entity.ts:32",{"_index":2356,"title":{},"body":{"entities/DbUserToUserFollows.html":{}}}],["follows.entity.ts:42",{"_index":2353,"title":{},"body":{"entities/DbUserToUserFollows.html":{}}}],["follows.entity.ts:52",{"_index":2358,"title":{},"body":{"entities/DbUserToUserFollows.html":{}}}],["follows.entity.ts:59",{"_index":2354,"title":{},"body":{"entities/DbUserToUserFollows.html":{}}}],["followuser",{"_index":5168,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["followuser.login",{"_index":5171,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["followuserbyid",{"_index":4482,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["followuserbyusername",{"_index":4476,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["followuserbyusername(username",{"_index":4480,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["followusersbyusernames",{"_index":4477,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["followusersbyusernames(bulkfollow",{"_index":4484,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["follweruserid",{"_index":4632,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["forbidunknownvalues",{"_index":4912,"title":{},"body":{"controllers/UserListController.html":{}}}],["formal",{"_index":1336,"title":{},"body":{"classes/CreateBlogSummaryDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{}}}],["formal'})@isstring()@isin(['exciting",{"_index":1332,"title":{},"body":{"classes/CreateBlogSummaryDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{}}}],["format",{"_index":1873,"title":{},"body":{"entities/DbPRInsight.html":{}}}],["formatit",{"_index":5497,"title":{},"body":{"index.html":{}}}],["found",{"_index":2381,"title":{},"body":{"controllers/EmojiController.html":{},"controllers/EndorsementController.html":{},"controllers/InsightController.html":{},"controllers/PizzaOvenController.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserController.html":{},"controllers/UserFollowingController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"injectables/UserListService.html":{},"miscellaneous/variables.html":{}}}],["found'})@apiconflictresponse({description",{"_index":3702,"title":{},"body":{"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserFollowsController.html":{}}}],["found'})@apiparam({name",{"_index":3101,"title":{},"body":{"controllers/PizzaOvenController.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/UserInsightMemberController.html":{}}}],["found'})@apiquery({name",{"_index":3463,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["found'})@apiunauthorizedresponse({description",{"_index":2827,"title":{},"body":{"controllers/InsightController.html":{}}}],["frame",{"_index":1698,"title":{},"body":{"entities/DbContributionStatTimeframe.html":{},"entities/DbContributorCategoryTimeframe.html":{}}}],["frameduration",{"_index":146,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["framepromises",{"_index":132,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["framestartdate",{"_index":134,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["francisco",{"_index":4117,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["free",{"_index":4181,"title":{},"body":{"injectables/TierService.html":{},"license.html":{}}}],["freeplan",{"_index":5891,"title":{},"body":{"miscellaneous/variables.html":{}}}],["french",{"_index":1318,"title":{},"body":{"classes/CreateBlogSummaryDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{}}}],["fresh",{"_index":2935,"title":{},"body":{"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{}}}],["from(\"pull_requests",{"_index":200,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["from(\"user_list_contributors",{"_index":212,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["from(\"user_organizations",{"_index":3682,"title":{},"body":{"injectables/RepoService.html":{}}}],["from(`(${currentmonthquery.getquery",{"_index":3437,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["from(`(${prevmonthquery.getquery",{"_index":3445,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["from(dbendorsement",{"_index":2543,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["from(dbpullrequest",{"_index":3425,"title":{},"body":{"injectables/PullRequestService.html":{},"injectables/UserListService.html":{}}}],["from(entity",{"_index":3618,"title":{},"body":{"injectables/RepoService.html":{}}}],["from_user",{"_index":2300,"title":{},"body":{"entities/DbUserNotification.html":{},"injectables/UserNotificationService.html":{}}}],["from_user_id",{"_index":2301,"title":{},"body":{"entities/DbUserNotification.html":{},"injectables/UserNotificationService.html":{}}}],["full",{"_index":1438,"title":{},"body":{"classes/CreateUserHighlightDto.html":{},"entities/DbInsightRepo.html":{},"entities/DbPullRequest.html":{},"entities/DbUserHighlight.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserRepo.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"classes/RepoInfo.html":{},"index.html":{}}}],["full_name",{"_index":1388,"title":{},"body":{"classes/CreateInsightDto.html":{},"classes/DbFilteredUser.html":{},"entities/DbInsightRepo.html":{},"entities/DbPullRequest.html":{},"entities/DbUserHighlight.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserRepo.html":{},"injectables/InsightRepoService.html":{},"injectables/UserReposService.html":{}}}],["fullname",{"_index":1776,"title":{},"body":{"classes/DbFilteredUser.html":{},"classes/RepoInfo.html":{}}}],["function",{"_index":5320,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":5348,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["furnished",{"_index":5573,"title":{},"body":{"license.html":{}}}],["generally",{"_index":5866,"title":{},"body":{"miscellaneous/variables.html":{}}}],["generate",{"_index":765,"title":{},"body":{"controllers/BlogSummaryController.html":{},"injectables/BlogSummaryService.html":{},"injectables/CodeExplanationService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"controllers/IssueSummaryController.html":{},"injectables/IssueSummaryService.html":{},"injectables/PullRequestDescriptionService.html":{},"index.html":{}}}],["generate:swagger",{"_index":5506,"title":{},"body":{"index.html":{}}}],["generateblogsummary",{"_index":764,"title":{},"body":{"controllers/BlogSummaryController.html":{},"injectables/BlogSummaryService.html":{}}}],["generateblogsummary(options",{"_index":803,"title":{},"body":{"injectables/BlogSummaryService.html":{}}}],["generatecodeexplanation",{"_index":886,"title":{},"body":{"controllers/CodeExplanationController.html":{}}}],["generatecodeexplanationdto",{"_index":884,"title":{"classes/GenerateCodeExplanationDto.html":{}},"body":{"controllers/CodeExplanationController.html":{},"injectables/CodeExplanationService.html":{},"classes/GenerateCodeExplanationDto.html":{},"coverage.html":{}}}],["generatecoderefactor",{"_index":917,"title":{},"body":{"controllers/CodeRefactorSuggestionController.html":{}}}],["generatecoderefactorsuggestiondto",{"_index":915,"title":{"classes/GenerateCodeRefactorSuggestionDto.html":{}},"body":{"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"coverage.html":{}}}],["generatecodetest",{"_index":945,"title":{},"body":{"controllers/CodeTestSuggestionController.html":{}}}],["generatecodetestsuggestiondto",{"_index":943,"title":{"classes/GenerateCodeTestSuggestionDto.html":{}},"body":{"controllers/CodeTestSuggestionController.html":{},"injectables/CodeTestSuggestionService.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"coverage.html":{}}}],["generatecompletion",{"_index":3048,"title":{},"body":{"injectables/OpenAiService.html":{}}}],["generatecompletion(systemmessage",{"_index":851,"title":{},"body":{"interfaces/ChatResponse.html":{},"injectables/OpenAiService.html":{}}}],["generated",{"_index":5429,"title":{},"body":{"index.html":{}}}],["generatedescription",{"_index":926,"title":{},"body":{"injectables/CodeRefactorSuggestionService.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["generatedescription(options",{"_index":928,"title":{},"body":{"injectables/CodeRefactorSuggestionService.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["generateexplanation",{"_index":902,"title":{},"body":{"injectables/CodeExplanationService.html":{}}}],["generateexplanation(options",{"_index":904,"title":{},"body":{"injectables/CodeExplanationService.html":{}}}],["generateissuesummary",{"_index":3001,"title":{},"body":{"controllers/IssueSummaryController.html":{},"injectables/IssueSummaryService.html":{}}}],["generateissuesummary(@body",{"_index":3008,"title":{},"body":{"controllers/IssueSummaryController.html":{}}}],["generateissuesummary(generateissuesummarydto",{"_index":3002,"title":{},"body":{"controllers/IssueSummaryController.html":{}}}],["generateissuesummary(options",{"_index":3014,"title":{},"body":{"injectables/IssueSummaryService.html":{}}}],["generateissuesummarydto",{"_index":3004,"title":{},"body":{"controllers/IssueSummaryController.html":{}}}],["generateprdescription",{"_index":882,"title":{},"body":{"controllers/CodeExplanationController.html":{},"controllers/CodeRefactorSuggestionController.html":{},"controllers/CodeTestSuggestionController.html":{},"controllers/PullRequestDescriptionController.html":{}}}],["generateprdescription(@body",{"_index":898,"title":{},"body":{"controllers/CodeExplanationController.html":{},"controllers/CodeRefactorSuggestionController.html":{},"controllers/CodeTestSuggestionController.html":{},"controllers/PullRequestDescriptionController.html":{}}}],["generateprdescription(generatecodeexplanationdto",{"_index":883,"title":{},"body":{"controllers/CodeExplanationController.html":{}}}],["generateprdescription(generatecoderefactorsuggestiondto",{"_index":914,"title":{},"body":{"controllers/CodeRefactorSuggestionController.html":{}}}],["generateprdescription(generatecodetestsuggestiondto",{"_index":942,"title":{},"body":{"controllers/CodeTestSuggestionController.html":{}}}],["generateprdescription(generatepullrequestdescriptiondto",{"_index":3247,"title":{},"body":{"controllers/PullRequestDescriptionController.html":{}}}],["generateprompt",{"_index":799,"title":{},"body":{"injectables/BlogSummaryService.html":{},"injectables/CodeExplanationService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"injectables/IssueSummaryService.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["generateprompt(language",{"_index":805,"title":{},"body":{"injectables/BlogSummaryService.html":{},"injectables/CodeExplanationService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/IssueSummaryService.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["generateprompt(maxlength",{"_index":952,"title":{},"body":{"injectables/CodeTestSuggestionService.html":{}}}],["generatepullrequestdescriptiondto",{"_index":2646,"title":{"classes/GeneratePullRequestDescriptionDto.html":{}},"body":{"classes/GeneratePullRequestDescriptionDto.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"coverage.html":{}}}],["generates",{"_index":887,"title":{},"body":{"controllers/CodeExplanationController.html":{},"controllers/CodeRefactorSuggestionController.html":{},"controllers/CodeTestSuggestionController.html":{},"controllers/PullRequestDescriptionController.html":{},"index.html":{}}}],["generateswaggerjson",{"_index":5318,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["generatetestsuggestion",{"_index":951,"title":{},"body":{"injectables/CodeTestSuggestionService.html":{}}}],["generatetestsuggestion(options",{"_index":953,"title":{},"body":{"injectables/CodeTestSuggestionService.html":{}}}],["genereateblogsummary",{"_index":760,"title":{},"body":{"controllers/BlogSummaryController.html":{}}}],["genereateblogsummary(@body",{"_index":786,"title":{},"body":{"controllers/BlogSummaryController.html":{}}}],["genereateblogsummary(genereateblogsummarydto",{"_index":761,"title":{},"body":{"controllers/BlogSummaryController.html":{}}}],["genereateblogsummarydto",{"_index":772,"title":{},"body":{"controllers/BlogSummaryController.html":{}}}],["german",{"_index":1319,"title":{},"body":{"classes/CreateBlogSummaryDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{}}}],["germany",{"_index":2596,"title":{},"body":{"classes/FilterListContributorsDto.html":{}}}],["get(\"/:id",{"_index":2848,"title":{},"body":{"controllers/InsightController.html":{},"controllers/RepoController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserListController.html":{}}}],["get(\"/:id/contributions",{"_index":3481,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["get(\"/:id/contributors",{"_index":4914,"title":{},"body":{"controllers/UserListController.html":{}}}],["get(\"/:id/contributors/highlights",{"_index":4925,"title":{},"body":{"controllers/UserListController.html":{}}}],["get(\"/:id/reactions",{"_index":2784,"title":{},"body":{"controllers/HighlightController.html":{},"controllers/UserHighlightsController.html":{}}}],["get(\"/:id/reviews",{"_index":3242,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["get(\"/:owner/:repo",{"_index":3514,"title":{},"body":{"controllers/RepoController.html":{}}}],["get(\"/:owner/:repo/:login/contributions",{"_index":3492,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["get(\"/:owner/:repo/contributions",{"_index":3486,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["get(\"/:owner/:repo/contributions/contributors",{"_index":3488,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["get(\"/:repoid/vote",{"_index":3850,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["get(\"/:username",{"_index":4384,"title":{},"body":{"controllers/UserController.html":{}}}],["get(\"/:username/follow",{"_index":4500,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["get(\"/:username/following",{"_index":4471,"title":{},"body":{"controllers/UserFollowingController.html":{}}}],["get(\"/:username/highlights",{"_index":4388,"title":{},"body":{"controllers/UserController.html":{}}}],["get(\"/:username/organizations",{"_index":4393,"title":{},"body":{"controllers/UserController.html":{}}}],["get(\"/:username/prs",{"_index":4386,"title":{},"body":{"controllers/UserController.html":{}}}],["get(\"/:username/top",{"_index":4391,"title":{},"body":{"controllers/UserController.html":{}}}],["get(\"/churn",{"_index":1261,"title":{},"body":{"controllers/ContributorInsightsController.html":{}}}],["get(\"/commit",{"_index":3155,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["get(\"/commits/list/commit",{"_index":3166,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["get(\"/commits/list/repo/:id",{"_index":3163,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["get(\"/contributors",{"_index":4909,"title":{},"body":{"controllers/UserListController.html":{}}}],["get(\"/created",{"_index":4413,"title":{},"body":{"controllers/UserEndorsementController.html":{}}}],["get(\"/featured",{"_index":2772,"title":{},"body":{"controllers/HighlightController.html":{},"controllers/UserListController.html":{}}}],["get(\"/following",{"_index":4596,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["get(\"/following/repos",{"_index":4597,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["get(\"/insights",{"_index":3236,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["get(\"/list",{"_index":2768,"title":{},"body":{"controllers/HighlightController.html":{},"controllers/PullRequestController.html":{},"controllers/RepoController.html":{}}}],["get(\"/listuserstargazed",{"_index":3765,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["get(\"/listuserstarred",{"_index":3727,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["get(\"/listusersubmitted",{"_index":3804,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["get(\"/listuservoted",{"_index":3849,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["get(\"/new",{"_index":1257,"title":{},"body":{"controllers/ContributorInsightsController.html":{}}}],["get(\"/orgs",{"_index":5213,"title":{},"body":{"controllers/UserRecommendationController.html":{}}}],["get(\"/received",{"_index":4416,"title":{},"body":{"controllers/UserEndorsementController.html":{}}}],["get(\"/recent",{"_index":1259,"title":{},"body":{"controllers/ContributorInsightsController.html":{}}}],["get(\"/repeat",{"_index":1263,"title":{},"body":{"controllers/ContributorInsightsController.html":{}}}],["get(\"/repos",{"_index":5209,"title":{},"body":{"controllers/UserRecommendationController.html":{}}}],["get(\"/repos/:owner/:repo",{"_index":2473,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["get(\"/repos/:owner/:repo/byuser",{"_index":2477,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["get(\"/repos/:repoowneroruser",{"_index":2470,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["get(\"/repos/list",{"_index":2780,"title":{},"body":{"controllers/HighlightController.html":{},"controllers/PizzaOvenController.html":{}}}],["get(\"/search",{"_index":1225,"title":{},"body":{"controllers/ContributorController.html":{},"controllers/PullRequestController.html":{},"controllers/RepoController.html":{},"controllers/UserController.html":{}}}],["get(\"/service",{"_index":2687,"title":{},"body":{"controllers/HealthController.html":{}}}],["get(\"/session",{"_index":643,"title":{},"body":{"controllers/AuthController.html":{}}}],["get(\"/timezones",{"_index":4927,"title":{},"body":{"controllers/UserListController.html":{}}}],["get(\"/top",{"_index":2787,"title":{},"body":{"controllers/HighlightController.html":{},"controllers/UserController.html":{}}}],["get(\"/user/:username/created",{"_index":2484,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["get(\"/user/:username/received",{"_index":2488,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["get(\"/web",{"_index":2700,"title":{},"body":{"controllers/HealthController.html":{}}}],["get(\":id",{"_index":2481,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["get(\":id/members",{"_index":4740,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["get(\":id/stats/contributions",{"_index":5069,"title":{},"body":{"controllers/UserListStatsController.html":{}}}],["get(\":id/stats/most",{"_index":5066,"title":{},"body":{"controllers/UserListStatsController.html":{}}}],["get(\":id/stats/top",{"_index":5073,"title":{},"body":{"controllers/UserListStatsController.html":{}}}],["get(\"commit",{"_index":3151,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["get(\"commits/:id",{"_index":3160,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["get(\"repos/:id",{"_index":3145,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["get('/')@apioperation({operationid",{"_index":2377,"title":{},"body":{"controllers/EmojiController.html":{},"controllers/EndorsementController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"controllers/UserNotificationController.html":{}}}],["get('/:id')@apioperation({operationid",{"_index":2825,"title":{},"body":{"controllers/InsightController.html":{},"controllers/RepoController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserListController.html":{}}}],["get('/:id/contributions')@apioperation({operationid",{"_index":3468,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["get('/:id/contributors')@apioperation({operationid",{"_index":4869,"title":{},"body":{"controllers/UserListController.html":{}}}],["get('/:id/contributors/highlights')@apioperation({operationid",{"_index":4864,"title":{},"body":{"controllers/UserListController.html":{}}}],["get('/:id/reactions')@apioperation({operationid",{"_index":2750,"title":{},"body":{"controllers/HighlightController.html":{},"controllers/UserHighlightsController.html":{}}}],["get('/:id/reviews')@apioperation({operationid",{"_index":3214,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["get('/:owner/:repo')@apioperation({operationid",{"_index":3508,"title":{},"body":{"controllers/RepoController.html":{}}}],["get('/:owner/:repo/:login/contributions')@apioperation({operationid",{"_index":3460,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["get('/:owner/:repo/contributions')@apioperation({operationid",{"_index":3454,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["get('/:owner/:repo/contributions/contributors')@apioperation({operationid",{"_index":3471,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["get('/:repoid/vote')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":3834,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["get('/:username')@apioperation({operationid",{"_index":4364,"title":{},"body":{"controllers/UserController.html":{}}}],["get('/:username/follow')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":4490,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["get('/:username/following')@apioperation({operationid",{"_index":4467,"title":{},"body":{"controllers/UserFollowingController.html":{}}}],["get('/:username/highlights')@apioperation({operationid",{"_index":4345,"title":{},"body":{"controllers/UserController.html":{}}}],["get('/:username/organizations')@apioperation({operationid",{"_index":4349,"title":{},"body":{"controllers/UserController.html":{}}}],["get('/:username/prs')@apioperation({operationid",{"_index":4359,"title":{},"body":{"controllers/UserController.html":{}}}],["get('/:username/top",{"_index":4355,"title":{},"body":{"controllers/UserController.html":{}}}],["get('/churn')@apioperation({operationid",{"_index":1238,"title":{},"body":{"controllers/ContributorInsightsController.html":{}}}],["get('/commit",{"_index":3114,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["get('/commits/list/commit",{"_index":3125,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["get('/commits/list/repo/:id')@apioperation({operationid",{"_index":3120,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["get('/contributors')@apioperation({operationid",{"_index":4846,"title":{},"body":{"controllers/UserListController.html":{}}}],["get('/created')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":4406,"title":{},"body":{"controllers/UserEndorsementController.html":{}}}],["get('/featured')@apioperation({operationid",{"_index":2736,"title":{},"body":{"controllers/HighlightController.html":{},"controllers/UserListController.html":{}}}],["get('/following')@apioperation({operationid",{"_index":4556,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["get('/following/repos')@apioperation({operationid",{"_index":4550,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["get('/insights')@apioperation({operationid",{"_index":3210,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["get('/list')@apioperation({operationid",{"_index":2744,"title":{},"body":{"controllers/HighlightController.html":{},"controllers/PullRequestController.html":{},"controllers/RepoController.html":{}}}],["get('/listuserstargazed')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":3754,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["get('/listuserstarred')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":3711,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["get('/listusersubmitted')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":3792,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["get('/listuservoted')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":3830,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["get('/new')@apioperation({operationid",{"_index":1253,"title":{},"body":{"controllers/ContributorInsightsController.html":{}}}],["get('/orgs')@apioperation({operationid",{"_index":5198,"title":{},"body":{"controllers/UserRecommendationController.html":{}}}],["get('/received')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":4409,"title":{},"body":{"controllers/UserEndorsementController.html":{}}}],["get('/recent')@apioperation({operationid",{"_index":1246,"title":{},"body":{"controllers/ContributorInsightsController.html":{}}}],["get('/repeat')@apioperation({operationid",{"_index":1249,"title":{},"body":{"controllers/ContributorInsightsController.html":{}}}],["get('/repos')@apioperation({operationid",{"_index":5204,"title":{},"body":{"controllers/UserRecommendationController.html":{}}}],["get('/repos/:owner/:repo')@apioperation({operationid",{"_index":2436,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["get('/repos/:repoowneroruser')@apioperation({operationid",{"_index":2429,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["get('/repos/list')@apioperation({operationid",{"_index":2740,"title":{},"body":{"controllers/HighlightController.html":{},"controllers/PizzaOvenController.html":{}}}],["get('/search')@apioperation({operationid",{"_index":1206,"title":{},"body":{"controllers/ContributorController.html":{},"controllers/PullRequestController.html":{},"controllers/RepoController.html":{},"controllers/UserController.html":{}}}],["get('/service')@apioperation({operationid",{"_index":2670,"title":{},"body":{"controllers/HealthController.html":{}}}],["get('/session')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":562,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('/timezones')@apioperation({operationid",{"_index":4855,"title":{},"body":{"controllers/UserListController.html":{}}}],["get('/top')@apioperation({operationid",{"_index":2747,"title":{},"body":{"controllers/HighlightController.html":{},"controllers/UserController.html":{}}}],["get('/user/:username/created')@apioperation({operationid",{"_index":2440,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["get('/user/:username/received')@apioperation({operationid",{"_index":2444,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["get('/web')@apioperation({operationid",{"_index":2674,"title":{},"body":{"controllers/HealthController.html":{}}}],["get(':id')@apioperation({operationid",{"_index":2447,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["get(':id/members')@apioperation({operationid",{"_index":4723,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["get(':id/stats/contributions",{"_index":5036,"title":{},"body":{"controllers/UserListStatsController.html":{}}}],["get(':id/stats/most",{"_index":5062,"title":{},"body":{"controllers/UserListStatsController.html":{}}}],["get(':id/stats/top",{"_index":5055,"title":{},"body":{"controllers/UserListStatsController.html":{}}}],["get('commit",{"_index":3103,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["get('commits/:id')@apioperation({operationid",{"_index":3107,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["get('repos/:id')@apioperation({operationid",{"_index":3099,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["get\\`](https://developer.mozilla.org/en",{"_index":5853,"title":{},"body":{"miscellaneous/variables.html":{}}}],["getallhighlightreactions",{"_index":2723,"title":{},"body":{"controllers/HighlightController.html":{}}}],["getallhighlightreactions(@param(\"id",{"_index":2785,"title":{},"body":{"controllers/HighlightController.html":{}}}],["getallhighlightreactions(id",{"_index":2749,"title":{},"body":{"controllers/HighlightController.html":{}}}],["getallhighlightuserreactions",{"_index":4522,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["getallhighlightuserreactions(id",{"_index":4547,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["getalltimezones",{"_index":4956,"title":{},"body":{"injectables/UserListService.html":{}}}],["getcontributionsbyproject",{"_index":5031,"title":{},"body":{"controllers/UserListStatsController.html":{}}}],["getcontributionsbyproject(id",{"_index":5035,"title":{},"body":{"controllers/UserListStatsController.html":{}}}],["getcontributionsbytimeframe",{"_index":5032,"title":{},"body":{"controllers/UserListStatsController.html":{}}}],["getcontributionsbytimeframe(id",{"_index":5043,"title":{},"body":{"controllers/UserListStatsController.html":{}}}],["getcontributorcontributionsbyproject",{"_index":5033,"title":{},"body":{"controllers/UserListStatsController.html":{}}}],["getcontributorcontributionsbyproject(id",{"_index":5054,"title":{},"body":{"controllers/UserListStatsController.html":{}}}],["getcontributorrangequerybuilder",{"_index":3377,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["getcontributorrangequerybuilder(start_date",{"_index":3399,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["getcontributors",{"_index":4822,"title":{},"body":{"controllers/UserListController.html":{}}}],["getcontributors(pageoptionsdto",{"_index":4845,"title":{},"body":{"controllers/UserListController.html":{}}}],["getcontributorsbytimeframe",{"_index":5046,"title":{},"body":{"controllers/UserListStatsController.html":{}}}],["getdateframes",{"_index":5079,"title":{},"body":{"injectables/UserListStatsService.html":{}}}],["getdateframes(range",{"_index":142,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["getdomain",{"_index":5307,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["getdomain(\"admin",{"_index":5721,"title":{},"body":{"miscellaneous/variables.html":{}}}],["getdomain(\"app",{"_index":5714,"title":{},"body":{"miscellaneous/variables.html":{}}}],["getdomain(\"docs",{"_index":5718,"title":{},"body":{"miscellaneous/variables.html":{}}}],["getdomain(\"explore",{"_index":5720,"title":{},"body":{"miscellaneous/variables.html":{}}}],["getdomain(\"hot",{"_index":5716,"title":{},"body":{"miscellaneous/variables.html":{}}}],["getfeaturedlists",{"_index":4823,"title":{},"body":{"controllers/UserListController.html":{}}}],["getfeaturedlists(@query",{"_index":4889,"title":{},"body":{"controllers/UserListController.html":{}}}],["getfeaturedlists(pageoptionsdto",{"_index":4849,"title":{},"body":{"controllers/UserListController.html":{}}}],["getfollowinghighlightrepos",{"_index":4523,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["getfollowinghighlightrepos(pageoptionsdto",{"_index":4549,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["getfollowinghighlights",{"_index":4524,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["getfollowinghighlights(pageoptionsdto",{"_index":4555,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["getfollowinglistbyusername",{"_index":4465,"title":{},"body":{"controllers/UserFollowingController.html":{}}}],["getfollowinglistbyusername(@param(\"username",{"_index":4472,"title":{},"body":{"controllers/UserFollowingController.html":{}}}],["getfollowinglistbyusername(username",{"_index":4466,"title":{},"body":{"controllers/UserFollowingController.html":{}}}],["getfollowstatusbyusername",{"_index":4478,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["getfollowstatusbyusername(username",{"_index":4489,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["getinsight",{"_index":3270,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["getinsight(interval",{"_index":3280,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["getlistsforuser",{"_index":4824,"title":{},"body":{"controllers/UserListController.html":{}}}],["getlistsforuser(userid",{"_index":4852,"title":{},"body":{"controllers/UserListController.html":{}}}],["getmany",{"_index":4450,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["getmostactivecontributors",{"_index":5034,"title":{},"body":{"controllers/UserListStatsController.html":{}}}],["getmostactivecontributors(id",{"_index":5061,"title":{},"body":{"controllers/UserListStatsController.html":{}}}],["getprevdateisostring",{"_index":1126,"title":{},"body":{"injectables/ContributionService.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserListService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["getprevdateisostring(options.prev_days_start_date",{"_index":3311,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["getprevdateisostring(pageoptionsdto.prev_days_start_date",{"_index":3412,"title":{},"body":{"injectables/PullRequestService.html":{},"injectables/RepoService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserListService.html":{}}}],["getprevdateisostring(prev_days_start_date",{"_index":1150,"title":{},"body":{"injectables/ContributionService.html":{}}}],["getpullrequestinsights",{"_index":3205,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["getpullrequestinsights(@query",{"_index":3238,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["getpullrequestinsights(pageoptionsdto",{"_index":3209,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["getpullrequestreviews",{"_index":3206,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["getpullrequestreviews(@param(\"id",{"_index":3243,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["getpullrequestreviews(id",{"_index":3213,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["getrepofilters",{"_index":3528,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["getrepofilters(options",{"_index":3531,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["gets",{"_index":1239,"title":{},"body":{"controllers/ContributorInsightsController.html":{},"controllers/UserListController.html":{},"controllers/UserListStatsController.html":{}}}],["getschemapath(model",{"_index":5686,"title":{},"body":{"miscellaneous/variables.html":{}}}],["getschemapath(pagedto",{"_index":5685,"title":{},"body":{"miscellaneous/variables.html":{}}}],["getsession",{"_index":533,"title":{},"body":{"controllers/AuthController.html":{}}}],["getsession(@user",{"_index":647,"title":{},"body":{"controllers/AuthController.html":{}}}],["getsession(user",{"_index":560,"title":{},"body":{"controllers/AuthController.html":{}}}],["getskip",{"_index":2588,"title":{},"body":{"classes/FilterListContributorsDto.html":{},"classes/FilteredUsersDto.html":{},"classes/PageOptionsDto.html":{},"classes/TopUsersDto.html":{}}}],["getstripe",{"_index":3929,"title":{},"body":{"injectables/StripeService.html":{}}}],["gettimezones",{"_index":4825,"title":{},"body":{"controllers/UserListController.html":{}}}],["getting",{"_index":5350,"title":{"index.html":{},"license.html":{}},"body":{}}],["gettop10highlights",{"_index":4369,"title":{},"body":{"controllers/UserController.html":{}}}],["gettopusers",{"_index":4342,"title":{},"body":{"controllers/UserController.html":{}}}],["gettopusers(@query",{"_index":4396,"title":{},"body":{"controllers/UserController.html":{}}}],["gettopusers(pageoptionsdto",{"_index":4368,"title":{},"body":{"controllers/UserController.html":{}}}],["getuserhighlight",{"_index":4525,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["getuserhighlight(@param(\"id",{"_index":4572,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["getuserhighlight(id",{"_index":4558,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["getuserlist",{"_index":4826,"title":{},"body":{"controllers/UserListController.html":{}}}],["getuserlist(@param(\"id",{"_index":4900,"title":{},"body":{"controllers/UserListController.html":{}}}],["getuserlist(id",{"_index":4860,"title":{},"body":{"controllers/UserListController.html":{}}}],["getuserlistcontributorhighlights",{"_index":4827,"title":{},"body":{"controllers/UserListController.html":{}}}],["getuserlistcontributorhighlights(pageoptionsdto",{"_index":4863,"title":{},"body":{"controllers/UserListController.html":{}}}],["getuserlistcontributors",{"_index":4828,"title":{},"body":{"controllers/UserListController.html":{}}}],["getuserlistcontributors(pageoptionsdto",{"_index":4868,"title":{},"body":{"controllers/UserListController.html":{}}}],["getusernotifications",{"_index":5120,"title":{},"body":{"controllers/UserNotificationController.html":{}}}],["getusernotifications(userid",{"_index":5121,"title":{},"body":{"controllers/UserNotificationController.html":{}}}],["getusersbyfilter",{"_index":4343,"title":{},"body":{"controllers/UserController.html":{}}}],["getusersbyfilter(@query",{"_index":4398,"title":{},"body":{"controllers/UserController.html":{}}}],["getusersbyfilter(pageoptionsdto",{"_index":4372,"title":{},"body":{"controllers/UserController.html":{}}}],["getvotequery",{"_index":5252,"title":{},"body":{"injectables/VoteService.html":{}}}],["getvotequery(repoid",{"_index":5261,"title":{},"body":{"injectables/VoteService.html":{}}}],["ghcr.io/open",{"_index":5489,"title":{},"body":{"index.html":{}}}],["git+https://github.com/open",{"_index":5633,"title":{},"body":{"properties.html":{}}}],["github",{"_index":935,"title":{},"body":{"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"entities/DbContribution.html":{},"injectables/IssueSummaryService.html":{},"injectables/PullRequestDescriptionService.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{}}}],["github.com/open",{"_index":1451,"title":{},"body":{"classes/CreateUserHighlightDto.html":{},"entities/DbUserHighlight.html":{}}}],["github_sponsors_url",{"_index":673,"title":{},"body":{"controllers/AuthController.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{}}}],["given",{"_index":907,"title":{},"body":{"injectables/CodeExplanationService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"controllers/ContributorInsightsController.html":{},"injectables/PullRequestDescriptionService.html":{},"controllers/RepoContributionsController.html":{},"injectables/UserListService.html":{},"controllers/UserListStatsController.html":{}}}],["go",{"_index":2933,"title":{},"body":{"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"controllers/RepoContributionsController.html":{}}}],["goes",{"_index":1879,"title":{},"body":{"entities/DbPRInsight.html":{},"miscellaneous/variables.html":{}}}],["gpt",{"_index":5787,"title":{},"body":{"miscellaneous/variables.html":{}}}],["grab",{"_index":196,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["granted",{"_index":5557,"title":{},"body":{"license.html":{}}}],["graph",{"_index":5607,"title":{},"body":{"modules.html":{},"properties.html":{}}}],["groupby(\"repos.full_name",{"_index":223,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["groupby(\"users.login",{"_index":2545,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["grouped",{"_index":2479,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["guard",{"_index":2548,"title":{"guards/EndorsementTokenGuard.html":{}},"body":{"coverage.html":{},"overview.html":{}}}],["guarded",{"_index":3726,"title":{},"body":{"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{}}}],["guards",{"_index":2549,"title":{},"body":{"guards/EndorsementTokenGuard.html":{}}}],["guide",{"_index":5534,"title":{},"body":{"index.html":{}}}],["guidelines",{"_index":5535,"title":{},"body":{"index.html":{}}}],["hacktoberfest",{"_index":3309,"title":{},"body":{"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoService.html":{}}}],["hacktoberfestconfig",{"_index":327,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["hacktoberfestfilterquerybuilder",{"_index":3590,"title":{},"body":{"injectables/RepoService.html":{}}}],["hacktoberfestfilterquerybuilder(range",{"_index":3607,"title":{},"body":{"injectables/RepoService.html":{}}}],["hacktoberfestprcountfilterbuilderend",{"_index":3271,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["hacktoberfestprcountfilterbuilderend(interval",{"_index":3282,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["hacktoberfestprcountfilterbuilderstart",{"_index":3272,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["hacktoberfestprdatecharbuilder",{"_index":3273,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["hacktoberfestprdatecharbuilder(interval",{"_index":3285,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["hacktoberfestprfilterbuilderend",{"_index":3378,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["hacktoberfestprfilterbuilderend(range",{"_index":3404,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["hacktoberfestprfilterbuilderstart",{"_index":3379,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["hacktoberfestyear",{"_index":3294,"title":{},"body":{"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{}}}],["handled",{"_index":5855,"title":{},"body":{"miscellaneous/variables.html":{}}}],["handlestripewebhook",{"_index":3977,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["handlestripewebhook(@req",{"_index":4033,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["handlestripewebhook(req",{"_index":3979,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["hash",{"_index":1002,"title":{},"body":{"classes/CommitsDto.html":{},"entities/DbCommits.html":{}}}],["hasnextpage",{"_index":1041,"title":{},"body":{"classes/ContributionPageMetaDto.html":{},"classes/PageMetaDto.html":{}}}],["haspreviouspage",{"_index":1042,"title":{},"body":{"classes/ContributionPageMetaDto.html":{},"classes/PageMetaDto.html":{}}}],["header",{"_index":5833,"title":{},"body":{"miscellaneous/variables.html":{}}}],["headers",{"_index":859,"title":{},"body":{"interfaces/ChatResponse.html":{},"controllers/EndorsementController.html":{},"guards/EndorsementTokenGuard.html":{},"injectables/OpenAiService.html":{},"miscellaneous/variables.html":{}}}],["headers(\"x",{"_index":2464,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["health",{"_index":2668,"title":{},"body":{"controllers/HealthController.html":{}}}],["health.controller",{"_index":2714,"title":{},"body":{"modules/HealthModule.html":{}}}],["health/health.module",{"_index":331,"title":{},"body":{"modules/AppModule.html":{}}}],["healthcheck",{"_index":2680,"title":{},"body":{"controllers/HealthController.html":{}}}],["healthcheckservice",{"_index":2677,"title":{},"body":{"controllers/HealthController.html":{}}}],["healthcontroller",{"_index":2666,"title":{"controllers/HealthController.html":{}},"body":{"controllers/HealthController.html":{},"modules/HealthModule.html":{},"coverage.html":{}}}],["healthmodule",{"_index":268,"title":{"modules/HealthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/HealthModule.html":{},"modules.html":{},"overview.html":{}}}],["healthstatusservice",{"_index":2671,"title":{},"body":{"controllers/HealthController.html":{}}}],["healthstatusweb",{"_index":2675,"title":{},"body":{"controllers/HealthController.html":{}}}],["hello@opensauced.pizza",{"_index":974,"title":{},"body":{"classes/CommitAuthorDto.html":{},"classes/CreateInsightMemberDto.html":{},"entities/DbInsightMember.html":{},"classes/UpdateUserDto.html":{},"miscellaneous/variables.html":{}}}],["hello@opensauced.pizza'})@column({type",{"_index":1832,"title":{},"body":{"entities/DbInsightMember.html":{}}}],["hello@opensauced.pizza'})@isemail",{"_index":1393,"title":{},"body":{"classes/CreateInsightMemberDto.html":{},"classes/UpdateUserDto.html":{}}}],["hello@opensauced.pizza'})@isstring",{"_index":972,"title":{},"body":{"classes/CommitAuthorDto.html":{}}}],["hereby",{"_index":5556,"title":{},"body":{"license.html":{}}}],["hey",{"_index":2156,"title":{},"body":{"entities/DbUserCollaboration.html":{}}}],["highlight",{"_index":404,"title":{},"body":{"modules/AppModule.html":{},"classes/CreateUserHighlightDto.html":{},"entities/DbCoupon.html":{},"entities/DbEmoji.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightReactionResponse.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserNotification.html":{},"controllers/HighlightController.html":{},"classes/HighlightOptionsDto.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserListService.html":{},"modules/UserModule.html":{},"injectables/UserNotificationService.html":{},"coverage.html":{}}}],["highlight'})@apibadrequestresponse({description",{"_index":2732,"title":{},"body":{"controllers/HighlightController.html":{},"controllers/UserHighlightsController.html":{}}}],["highlight'})@apiokresponse({type",{"_index":2751,"title":{},"body":{"controllers/HighlightController.html":{},"controllers/UserHighlightsController.html":{}}}],["highlight.controller",{"_index":2793,"title":{},"body":{"modules/HighlightModule.html":{},"modules/UserModule.html":{}}}],["highlight.controller.ts",{"_index":4516,"title":{},"body":{"controllers/UserHighlightsController.html":{},"coverage.html":{}}}],["highlight.controller.ts:114",{"_index":4542,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["highlight.controller.ts:134",{"_index":4548,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["highlight.controller.ts:153",{"_index":4533,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["highlight.controller.ts:177",{"_index":4546,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["highlight.controller.ts:199",{"_index":4557,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["highlight.controller.ts:215",{"_index":4554,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["highlight.controller.ts:53",{"_index":4538,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["highlight.controller.ts:69",{"_index":4559,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["highlight.controller.ts:85",{"_index":4563,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["highlight.created_at",{"_index":4583,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["highlight.dto",{"_index":4568,"title":{},"body":{"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{}}}],["highlight.dto.ts",{"_index":1427,"title":{},"body":{"classes/CreateUserHighlightDto.html":{},"coverage.html":{}}}],["highlight.dto.ts:11",{"_index":1453,"title":{},"body":{"classes/CreateUserHighlightDto.html":{}}}],["highlight.dto.ts:20",{"_index":1445,"title":{},"body":{"classes/CreateUserHighlightDto.html":{}}}],["highlight.dto.ts:30",{"_index":1431,"title":{},"body":{"classes/CreateUserHighlightDto.html":{}}}],["highlight.dto.ts:39",{"_index":1437,"title":{},"body":{"classes/CreateUserHighlightDto.html":{}}}],["highlight.dto.ts:48",{"_index":1450,"title":{},"body":{"classes/CreateUserHighlightDto.html":{}}}],["highlight.dto.ts:58",{"_index":1443,"title":{},"body":{"classes/CreateUserHighlightDto.html":{}}}],["highlight.entity",{"_index":395,"title":{},"body":{"modules/AppModule.html":{},"entities/DbUserHighlightReaction.html":{},"controllers/HighlightController.html":{},"modules/HighlightModule.html":{},"controllers/UserController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserListController.html":{},"modules/UserListModule.html":{},"injectables/UserListService.html":{},"modules/UserModule.html":{}}}],["highlight.entity.ts",{"_index":2173,"title":{},"body":{"entities/DbUserHighlight.html":{},"coverage.html":{}}}],["highlight.entity.ts:109",{"_index":2201,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["highlight.entity.ts:116",{"_index":2177,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["highlight.entity.ts:123",{"_index":2193,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["highlight.entity.ts:134",{"_index":2181,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["highlight.entity.ts:145",{"_index":2188,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["highlight.entity.ts:156",{"_index":2187,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["highlight.entity.ts:169",{"_index":2196,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["highlight.entity.ts:177",{"_index":2205,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["highlight.entity.ts:185",{"_index":2192,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["highlight.entity.ts:30",{"_index":2186,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["highlight.entity.ts:38",{"_index":2207,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["highlight.entity.ts:45",{"_index":2203,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["highlight.entity.ts:52",{"_index":2198,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["highlight.entity.ts:62",{"_index":2184,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["highlight.entity.ts:69",{"_index":2200,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["highlight.entity.ts:79",{"_index":2189,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["highlight.entity.ts:89",{"_index":2180,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["highlight.entity.ts:99",{"_index":2176,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["highlight.highlight",{"_index":4672,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["highlight.shipped_at",{"_index":4674,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["highlight.taggedrepos",{"_index":4677,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["highlight.title",{"_index":4673,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["highlight.type",{"_index":4676,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["highlight.url",{"_index":4671,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["highlight.user_id",{"_index":4591,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["highlight/dtos/highlight",{"_index":4566,"title":{},"body":{"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserListController.html":{},"injectables/UserListService.html":{}}}],["highlight/entities/user",{"_index":4567,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["highlight/highlight.module",{"_index":396,"title":{},"body":{"modules/AppModule.html":{}}}],["highlight_created",{"_index":5347,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["highlight_id",{"_index":2191,"title":{},"body":{"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"injectables/UserHighlightsService.html":{}}}],["highlight_id=user_highlights.id",{"_index":4663,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["highlight_reaction",{"_index":5345,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["highlightcontroller",{"_index":2715,"title":{"controllers/HighlightController.html":{}},"body":{"controllers/HighlightController.html":{},"modules/HighlightModule.html":{},"coverage.html":{}}}],["highlightcreated",{"_index":5346,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["highlightid",{"_index":4534,"title":{},"body":{"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserNotificationService.html":{}}}],["highlightmodule",{"_index":269,"title":{"modules/HighlightModule.html":{}},"body":{"modules/AppModule.html":{},"modules/HighlightModule.html":{},"modules.html":{},"overview.html":{}}}],["highlightoptionsdto",{"_index":2245,"title":{"classes/HighlightOptionsDto.html":{}},"body":{"classes/DbUserHighlightReactionResponse.html":{},"controllers/HighlightController.html":{},"classes/HighlightOptionsDto.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserListController.html":{},"injectables/UserListService.html":{},"coverage.html":{}}}],["highlightreaction",{"_index":1748,"title":{},"body":{"entities/DbEmoji.html":{},"entities/DbUserHighlight.html":{},"miscellaneous/enumerations.html":{}}}],["highlightreaction.emoji",{"_index":1749,"title":{},"body":{"entities/DbEmoji.html":{}}}],["highlightreaction.highlight",{"_index":2210,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["highlightreaction.highlight)@joincolumn({name",{"_index":2190,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["highlights",{"_index":2717,"title":{},"body":{"controllers/HighlightController.html":{},"controllers/UserController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserListController.html":{},"injectables/UserListService.html":{}}}],["highlights'})@apibadrequestresponse({description",{"_index":4866,"title":{},"body":{"controllers/UserListController.html":{}}}],["highlights.service",{"_index":2764,"title":{},"body":{"controllers/HighlightController.html":{},"controllers/UserController.html":{},"controllers/UserHighlightsController.html":{},"modules/UserModule.html":{}}}],["highlights.service.ts",{"_index":4598,"title":{},"body":{"injectables/UserHighlightsService.html":{},"coverage.html":{}}}],["highlights.service.ts:102",{"_index":4629,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["highlights.service.ts:113",{"_index":4638,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["highlights.service.ts:138",{"_index":4615,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["highlights.service.ts:157",{"_index":4640,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["highlights.service.ts:177",{"_index":4633,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["highlights.service.ts:19",{"_index":4612,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["highlights.service.ts:217",{"_index":4627,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["highlights.service.ts:228",{"_index":4617,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["highlights.service.ts:252",{"_index":4642,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["highlights.service.ts:256",{"_index":4623,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["highlights.service.ts:260",{"_index":4631,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["highlights.service.ts:282",{"_index":4636,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["highlights.service.ts:299",{"_index":4620,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["highlights.service.ts:31",{"_index":4621,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["highlights.service.ts:331",{"_index":4625,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["highlights.service.ts:37",{"_index":4634,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["highlights.service.ts:58",{"_index":4626,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["highlightuserid",{"_index":4619,"title":{},"body":{"injectables/UserHighlightsService.html":{},"injectables/UserNotificationService.html":{}}}],["holders",{"_index":5592,"title":{},"body":{"license.html":{}}}],["homepage",{"_index":5629,"title":{},"body":{"properties.html":{}}}],["host",{"_index":445,"title":{},"body":{"modules/AppModule.html":{},"guards/EndorsementTokenGuard.html":{},"injectables/PizzaOvenService.html":{},"miscellaneous/variables.html":{}}}],["host.switchtohttp",{"_index":2561,"title":{},"body":{"guards/EndorsementTokenGuard.html":{}}}],["hot",{"_index":5715,"title":{},"body":{"miscellaneous/variables.html":{}}}],["hour",{"_index":5825,"title":{},"body":{"miscellaneous/variables.html":{}}}],["http",{"_index":497,"title":{},"body":{"modules/AppModule.html":{},"controllers/HealthController.html":{},"miscellaneous/variables.html":{}}}],["http(s)?:\\/\\/)?([\\w]+\\.)?github\\.com",{"_index":4657,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["httpcode",{"_index":606,"title":{},"body":{"controllers/AuthController.html":{}}}],["httpcode(httpstatus.ok",{"_index":646,"title":{},"body":{"controllers/AuthController.html":{}}}],["httphealthindicator",{"_index":2678,"title":{},"body":{"controllers/HealthController.html":{}}}],["httploggermiddleware",{"_index":360,"title":{"injectables/HttpLoggerMiddleware.html":{}},"body":{"modules/AppModule.html":{},"injectables/HttpLoggerMiddleware.html":{},"coverage.html":{}}}],["httpmodule",{"_index":306,"title":{},"body":{"modules/AppModule.html":{},"modules/PizzaOvenModule.html":{}}}],["https://api.github.com/repos/denoland/fresh/labels/showcase",{"_index":1944,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["https://avatars.githubusercontent.com/u/25160953?v=4",{"_index":1994,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["https://avatars.githubusercontent.com/u/25160953?v=4'})@column('text",{"_index":1916,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["https://discord.gg/opensauced",{"_index":4093,"title":{},"body":{"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{}}}],["https://discord.gg/opensauced'})@isurl()@isoptional",{"_index":4223,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["https://github.com/${repo.fullname",{"_index":2937,"title":{},"body":{"injectables/InsightRepoService.html":{}}}],["https://github.com/${url.full_name",{"_index":2986,"title":{},"body":{"injectables/InsightsService.html":{}}}],["https://github.com/open",{"_index":744,"title":{},"body":{"classes/BakeRepoDto.html":{},"classes/CreateEndorsementDto.html":{},"entities/DbBakedRepo.html":{},"entities/DbContribution.html":{},"properties.html":{}}}],["https://github.com/sponsors/open",{"_index":4100,"title":{},"body":{"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{}}}],["https://github.githubassets.com/images/icons/emoji/unicode/1f4af.png?v8",{"_index":1757,"title":{},"body":{"entities/DbEmoji.html":{}}}],["https://github.githubassets.com/images/icons/emoji/unicode/1f4af.png?v8'})@column({type",{"_index":1752,"title":{},"body":{"entities/DbEmoji.html":{}}}],["https://opensauced.pizza",{"_index":4128,"title":{},"body":{"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{},"miscellaneous/variables.html":{}}}],["https://opensauced.pizza'})@isurl()@isoptional",{"_index":4245,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["https://opensource.org/licenses/mit",{"_index":5755,"title":{},"body":{"miscellaneous/variables.html":{}}}],["https://www.linkedin.com/in/brianldouglas",{"_index":4114,"title":{},"body":{"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{}}}],["https://www.linkedin.com/in/brianldouglas'})@isurl()@isoptional",{"_index":4230,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["httpservice",{"_index":3179,"title":{},"body":{"injectables/PizzaOvenService.html":{}}}],["httpstatus",{"_index":607,"title":{},"body":{"controllers/AuthController.html":{}}}],["human",{"_index":1871,"title":{},"body":{"entities/DbPRInsight.html":{}}}],["humorous",{"_index":1335,"title":{},"body":{"classes/CreateBlogSummaryDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{}}}],["id",{"_index":656,"title":{},"body":{"controllers/AuthController.html":{},"injectables/CommitAuthorsService.html":{},"injectables/CommitsService.html":{},"classes/Contributor.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateInsightDto.html":{},"classes/CreateUserListDto.html":{},"injectables/CustomerService.html":{},"entities/DbBakedRepo.html":{},"entities/DbCommitAuthors.html":{},"entities/DbCommits.html":{},"entities/DbContribution.html":{},"entities/DbContributionsProjects.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbPullRequestReview.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserNotification.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"controllers/EndorsementController.html":{},"injectables/EndorsementService.html":{},"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"controllers/PizzaOvenController.html":{},"injectables/PizzaOvenService.html":{},"controllers/PullRequestController.html":{},"injectables/PullRequestReviewService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"classes/RepoInfo.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StripeService.html":{},"controllers/StripeWebhookController.html":{},"classes/SupabaseAuthDto.html":{},"classes/TopProjectsDto.html":{},"classes/TopUsersDto.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"injectables/UserListService.html":{},"controllers/UserListStatsController.html":{},"injectables/UserNotificationService.html":{},"injectables/UserReposService.html":{}}}],["id'})@apinotfoundresponse({description",{"_index":2426,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["id'})@apiokresponse({type",{"_index":2449,"title":{},"body":{"controllers/EndorsementController.html":{},"controllers/InsightController.html":{},"controllers/PizzaOvenController.html":{},"controllers/PullRequestController.html":{},"controllers/RepoController.html":{}}}],["identifier",{"_index":1583,"title":{},"body":{"entities/DbBakedRepo.html":{},"entities/DbCommitAuthors.html":{},"entities/DbCommits.html":{},"entities/DbContribution.html":{},"entities/DbCoupon.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbPullRequestReview.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserNotification.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"classes/SupabaseAuthDto.html":{},"coverage.html":{}}}],["ids",{"_index":959,"title":{},"body":{"classes/CollaboratorsDto.html":{},"controllers/ContributorInsightsController.html":{},"classes/UserRepoOptionsDto-1.html":{},"classes/VotedRepoDto.html":{}}}],["ids'})@apipaginatedresponse(dbpullrequestcontributor)@apiokresponse({type",{"_index":1243,"title":{},"body":{"controllers/ContributorInsightsController.html":{}}}],["ignore",{"_index":493,"title":{},"body":{"modules/AppModule.html":{},"classes/UpdateUserCollaborationDto.html":{}}}],["image",{"_index":5420,"title":{},"body":{"index.html":{}}}],["implements",{"_index":1530,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{},"guards/EndorsementTokenGuard.html":{},"injectables/HttpLoggerMiddleware.html":{}}}],["implied",{"_index":5584,"title":{},"body":{"license.html":{}}}],["import",{"_index":16,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"modules/ApiServicesModule.html":{},"modules/AppModule.html":{},"classes/ApplyUserCouponDto.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"classes/BakeRepoDto.html":{},"controllers/BlogSummaryController.html":{},"modules/BlogSummaryModule.html":{},"injectables/BlogSummaryService.html":{},"interfaces/ChatResponse.html":{},"controllers/CodeExplanationController.html":{},"injectables/CodeExplanationService.html":{},"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"controllers/CodeTestSuggestionController.html":{},"injectables/CodeTestSuggestionService.html":{},"classes/CollaboratorsDto.html":{},"classes/CommitAuthorDto.html":{},"injectables/CommitAuthorsService.html":{},"classes/CommitsDto.html":{},"injectables/CommitsService.html":{},"modules/ContributionModule.html":{},"classes/ContributionPageMetaDto.html":{},"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"classes/ContributionsByProjectDto.html":{},"classes/ContributionsPageDto.html":{},"classes/ContributionsTimeframeDto.html":{},"classes/Contributor.html":{},"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"modules/ContributorModule.html":{},"classes/ContributorPullRequestsDto.html":{},"modules/CouponModule.html":{},"injectables/CouponService.html":{},"classes/CreateBlogSummaryDto.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateInsightDto.html":{},"classes/CreateInsightMemberDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/CreateLogDto.html":{},"classes/CreateUserCollaborationDto.html":{},"classes/CreateUserHighlightDto.html":{},"classes/CreateUserListDto.html":{},"injectables/CustomLogger.html":{},"modules/CustomerModule.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"entities/DbBakedRepo.html":{},"entities/DbCommitAuthors.html":{},"entities/DbCommits.html":{},"entities/DbContribution.html":{},"entities/DbContributionStatTimeframe.html":{},"entities/DbContributionsProjects.html":{},"entities/DbContributorCategoryTimeframe.html":{},"entities/DbCoupon.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"classes/DbFilteredUser.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbPullRequestReview.html":{},"entities/DbRepoLoginContributions.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"classes/DbTimezone.html":{},"classes/DbTopUser.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightReactionResponse.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserListContributorStat.html":{},"entities/DbUserListContributorStat-1.html":{},"entities/DbUserNotification.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"controllers/EmojiController.html":{},"modules/EmojiModule.html":{},"injectables/EmojiService.html":{},"controllers/EndorsementController.html":{},"modules/EndorsementModule.html":{},"injectables/EndorsementService.html":{},"guards/EndorsementTokenGuard.html":{},"classes/FilterListContributorsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/FilteredUsersDto.html":{},"classes/FollowManyUsersDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"controllers/HighlightController.html":{},"modules/HighlightModule.html":{},"classes/HighlightOptionsDto.html":{},"injectables/HttpLoggerMiddleware.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"injectables/InsightRepoService.html":{},"modules/InsightsModule.html":{},"injectables/InsightsService.html":{},"controllers/IssueSummaryController.html":{},"modules/IssueSummaryModule.html":{},"injectables/IssueSummaryService.html":{},"modules/LogModule.html":{},"injectables/LogService.html":{},"modules/OpenAiModule.html":{},"injectables/OpenAiService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaParameters.html":{},"classes/PageOptionsDto.html":{},"injectables/PagerService.html":{},"interfaces/PaginationInput.html":{},"controllers/PizzaOvenController.html":{},"modules/PizzaOvenModule.html":{},"injectables/PizzaOvenService.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestInsightsService.html":{},"modules/PullRequestModule.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestReviewService.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"modules/RepoFilterModule.html":{},"injectables/RepoFilterService.html":{},"classes/RepoInfo.html":{},"modules/RepoModule.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"modules/StarModule.html":{},"injectables/StarService.html":{},"modules/StargazeModule.html":{},"injectables/StargazeService.html":{},"modules/StripeModule.html":{},"injectables/StripeService.html":{},"modules/StripeSubscriptionModule.html":{},"injectables/StripeSubscriptionService.html":{},"modules/StripeWebHookModule.html":{},"controllers/StripeWebhookController.html":{},"modules/SubmitModule.html":{},"injectables/SubmitService.html":{},"classes/SupabaseAuthDto.html":{},"injectables/SupabaseGuard.html":{},"injectables/SupabaseStrategy.html":{},"modules/TierModule.html":{},"injectables/TierService.html":{},"classes/TopProjectsDto.html":{},"classes/TopUsersDto.html":{},"classes/UpdateEndorsementDto.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateInsightMemberDto.html":{},"classes/UpdateUserCollaborationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowingController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"modules/UserListModule.html":{},"classes/UserListMostActiveContributorsDto.html":{},"injectables/UserListService.html":{},"controllers/UserListStatsController.html":{},"injectables/UserListStatsService.html":{},"modules/UserModule.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"classes/UserOnboardingDto.html":{},"injectables/UserOrganizationService.html":{},"controllers/UserRecommendationController.html":{},"classes/UserRepoOptionsDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"modules/UserReposModule.html":{},"injectables/UserReposService.html":{},"modules/VoteModule.html":{},"injectables/VoteService.html":{},"classes/VotedRepoDto.html":{}}}],["imports",{"_index":287,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/BlogSummaryModule.html":{},"modules/ContributionModule.html":{},"modules/ContributorModule.html":{},"modules/CouponModule.html":{},"modules/CustomerModule.html":{},"modules/EmojiModule.html":{},"modules/EndorsementModule.html":{},"modules/HealthModule.html":{},"modules/HighlightModule.html":{},"modules/InsightsModule.html":{},"modules/IssueSummaryModule.html":{},"modules/LogModule.html":{},"modules/PizzaOvenModule.html":{},"modules/PullRequestModule.html":{},"modules/RepoModule.html":{},"modules/StarModule.html":{},"modules/StargazeModule.html":{},"modules/StripeModule.html":{},"modules/StripeSubscriptionModule.html":{},"modules/StripeWebHookModule.html":{},"modules/SubmitModule.html":{},"modules/UserListModule.html":{},"modules/UserModule.html":{},"modules/UserReposModule.html":{},"modules/VoteModule.html":{}}}],["include",{"_index":3019,"title":{},"body":{"injectables/IssueSummaryService.html":{}}}],["included",{"_index":5579,"title":{},"body":{"license.html":{}}}],["including",{"_index":5520,"title":{},"body":{"index.html":{},"license.html":{}}}],["inclusive",{"_index":3300,"title":{},"body":{"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{}}}],["index",{"_index":10,"title":{"index.html":{}},"body":{"interfaces/AllContributionsCount.html":{},"classes/ApplyUserCouponDto.html":{},"controllers/AuthController.html":{},"classes/BakeRepoDto.html":{},"controllers/BlogSummaryController.html":{},"injectables/BlogSummaryService.html":{},"interfaces/ChatResponse.html":{},"controllers/CodeExplanationController.html":{},"injectables/CodeExplanationService.html":{},"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"controllers/CodeTestSuggestionController.html":{},"injectables/CodeTestSuggestionService.html":{},"classes/CollaboratorsDto.html":{},"classes/CommitAuthorDto.html":{},"injectables/CommitAuthorsService.html":{},"classes/CommitsDto.html":{},"injectables/CommitsService.html":{},"classes/ContributionPageMetaDto.html":{},"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"classes/ContributionsByProjectDto.html":{},"classes/ContributionsPageDto.html":{},"classes/ContributionsTimeframeDto.html":{},"classes/Contributor.html":{},"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"classes/ContributorPullRequestsDto.html":{},"injectables/CouponService.html":{},"classes/CreateBlogSummaryDto.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateInsightDto.html":{},"classes/CreateInsightMemberDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/CreateLogDto.html":{},"classes/CreateUserCollaborationDto.html":{},"classes/CreateUserHighlightDto.html":{},"classes/CreateUserListDto.html":{},"injectables/CustomLogger.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"entities/DbBakedRepo.html":{},"entities/DbCommitAuthors.html":{},"entities/DbCommits.html":{},"entities/DbContribution.html":{},"entities/DbContributionStatTimeframe.html":{},"entities/DbContributionsProjects.html":{},"entities/DbContributorCategoryTimeframe.html":{},"entities/DbCoupon.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"classes/DbFilteredUser.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbPullRequestReview.html":{},"entities/DbRepoLoginContributions.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"classes/DbTimezone.html":{},"classes/DbTopUser.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightReactionResponse.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserListContributorStat.html":{},"entities/DbUserListContributorStat-1.html":{},"entities/DbUserNotification.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"controllers/EmojiController.html":{},"injectables/EmojiService.html":{},"controllers/EndorsementController.html":{},"injectables/EndorsementService.html":{},"guards/EndorsementTokenGuard.html":{},"classes/FilterListContributorsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/FilteredUsersDto.html":{},"classes/FollowManyUsersDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"controllers/HealthController.html":{},"controllers/HighlightController.html":{},"classes/HighlightOptionsDto.html":{},"injectables/HttpLoggerMiddleware.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"controllers/IssueSummaryController.html":{},"injectables/IssueSummaryService.html":{},"injectables/LogService.html":{},"injectables/OpenAiService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaParameters.html":{},"classes/PageOptionsDto.html":{},"injectables/PagerService.html":{},"interfaces/PaginationInput.html":{},"controllers/PizzaOvenController.html":{},"injectables/PizzaOvenService.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestInsightsService.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestReviewService.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"injectables/RepoFilterService.html":{},"classes/RepoInfo.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeService.html":{},"injectables/StripeSubscriptionService.html":{},"controllers/StripeWebhookController.html":{},"injectables/SubmitService.html":{},"classes/SupabaseAuthDto.html":{},"injectables/SupabaseStrategy.html":{},"injectables/TierService.html":{},"classes/TopProjectsDto.html":{},"classes/TopUsersDto.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateInsightMemberDto.html":{},"classes/UpdateUserCollaborationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowingController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"classes/UserListMostActiveContributorsDto.html":{},"injectables/UserListService.html":{},"controllers/UserListStatsController.html":{},"injectables/UserListStatsService.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"classes/UserOnboardingDto.html":{},"injectables/UserOrganizationService.html":{},"controllers/UserRecommendationController.html":{},"classes/UserRepoOptionsDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"injectables/UserReposService.html":{},"injectables/VoteService.html":{},"classes/VotedRepoDto.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["indicated",{"_index":4107,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["indicating",{"_index":1051,"title":{},"body":{"classes/ContributionPageMetaDto.html":{},"entities/DbInsight.html":{},"entities/DbUserList.html":{},"classes/PageMetaDto.html":{}}}],["individual",{"_index":2931,"title":{},"body":{"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"controllers/UserListController.html":{}}}],["info",{"_index":3,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"modules/ApiServicesModule.html":{},"modules/AppModule.html":{},"classes/ApplyUserCouponDto.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"classes/BakeRepoDto.html":{},"controllers/BlogSummaryController.html":{},"modules/BlogSummaryModule.html":{},"injectables/BlogSummaryService.html":{},"interfaces/ChatResponse.html":{},"controllers/CodeExplanationController.html":{},"injectables/CodeExplanationService.html":{},"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"controllers/CodeTestSuggestionController.html":{},"injectables/CodeTestSuggestionService.html":{},"classes/CollaboratorsDto.html":{},"classes/CommitAuthorDto.html":{},"injectables/CommitAuthorsService.html":{},"classes/CommitsDto.html":{},"injectables/CommitsService.html":{},"modules/ContributionModule.html":{},"classes/ContributionPageMetaDto.html":{},"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"classes/ContributionsByProjectDto.html":{},"classes/ContributionsPageDto.html":{},"classes/ContributionsTimeframeDto.html":{},"classes/Contributor.html":{},"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"modules/ContributorModule.html":{},"classes/ContributorPullRequestsDto.html":{},"modules/CouponModule.html":{},"injectables/CouponService.html":{},"classes/CreateBlogSummaryDto.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateInsightDto.html":{},"classes/CreateInsightMemberDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/CreateLogDto.html":{},"classes/CreateUserCollaborationDto.html":{},"classes/CreateUserHighlightDto.html":{},"classes/CreateUserListDto.html":{},"injectables/CustomLogger.html":{},"modules/CustomerModule.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"entities/DbBakedRepo.html":{},"entities/DbCommitAuthors.html":{},"entities/DbCommits.html":{},"entities/DbContribution.html":{},"entities/DbContributionStatTimeframe.html":{},"entities/DbContributionsProjects.html":{},"entities/DbContributorCategoryTimeframe.html":{},"entities/DbCoupon.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"classes/DbFilteredUser.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbPullRequestReview.html":{},"entities/DbRepoLoginContributions.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"classes/DbTimezone.html":{},"classes/DbTopUser.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightReactionResponse.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserListContributorStat.html":{},"entities/DbUserListContributorStat-1.html":{},"entities/DbUserNotification.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"controllers/EmojiController.html":{},"modules/EmojiModule.html":{},"injectables/EmojiService.html":{},"controllers/EndorsementController.html":{},"modules/EndorsementModule.html":{},"injectables/EndorsementService.html":{},"guards/EndorsementTokenGuard.html":{},"classes/FilterListContributorsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/FilteredUsersDto.html":{},"classes/FollowManyUsersDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"controllers/HighlightController.html":{},"modules/HighlightModule.html":{},"classes/HighlightOptionsDto.html":{},"injectables/HttpLoggerMiddleware.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"injectables/InsightRepoService.html":{},"modules/InsightsModule.html":{},"injectables/InsightsService.html":{},"controllers/IssueSummaryController.html":{},"modules/IssueSummaryModule.html":{},"injectables/IssueSummaryService.html":{},"modules/LogModule.html":{},"injectables/LogService.html":{},"modules/OpenAiModule.html":{},"injectables/OpenAiService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaParameters.html":{},"classes/PageOptionsDto.html":{},"injectables/PagerService.html":{},"interfaces/PaginationInput.html":{},"controllers/PizzaOvenController.html":{},"modules/PizzaOvenModule.html":{},"injectables/PizzaOvenService.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestInsightsService.html":{},"modules/PullRequestModule.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestReviewService.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"modules/RepoFilterModule.html":{},"injectables/RepoFilterService.html":{},"classes/RepoInfo.html":{},"modules/RepoModule.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"modules/StarModule.html":{},"injectables/StarService.html":{},"modules/StargazeModule.html":{},"injectables/StargazeService.html":{},"modules/StripeModule.html":{},"injectables/StripeService.html":{},"modules/StripeSubscriptionModule.html":{},"injectables/StripeSubscriptionService.html":{},"modules/StripeWebHookModule.html":{},"controllers/StripeWebhookController.html":{},"modules/SubmitModule.html":{},"injectables/SubmitService.html":{},"classes/SupabaseAuthDto.html":{},"injectables/SupabaseGuard.html":{},"injectables/SupabaseStrategy.html":{},"modules/TierModule.html":{},"injectables/TierService.html":{},"classes/TopProjectsDto.html":{},"classes/TopUsersDto.html":{},"classes/UpdateEndorsementDto.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateInsightMemberDto.html":{},"classes/UpdateUserCollaborationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowingController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"modules/UserListModule.html":{},"classes/UserListMostActiveContributorsDto.html":{},"injectables/UserListService.html":{},"controllers/UserListStatsController.html":{},"injectables/UserListStatsService.html":{},"modules/UserModule.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"classes/UserOnboardingDto.html":{},"injectables/UserOrganizationService.html":{},"controllers/UserRecommendationController.html":{},"classes/UserRepoOptionsDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"modules/UserReposModule.html":{},"injectables/UserReposService.html":{},"modules/VoteModule.html":{},"injectables/VoteService.html":{},"classes/VotedRepoDto.html":{},"miscellaneous/variables.html":{}}}],["info.dto",{"_index":1385,"title":{},"body":{"classes/CreateInsightDto.html":{},"injectables/InsightRepoService.html":{},"injectables/UserReposService.html":{}}}],["info.dto.ts",{"_index":3559,"title":{},"body":{"classes/RepoInfo.html":{},"coverage.html":{}}}],["info.dto.ts:11",{"_index":3562,"title":{},"body":{"classes/RepoInfo.html":{}}}],["info.dto.ts:19",{"_index":3560,"title":{},"body":{"classes/RepoInfo.html":{}}}],["information",{"_index":582,"title":{},"body":{"controllers/AuthController.html":{},"classes/CreateInsightDto.html":{},"controllers/PullRequestDescriptionController.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateInsightDto.html":{},"controllers/UserInsightMemberController.html":{},"miscellaneous/variables.html":{}}}],["information'})@apibearerauth()@useguards(supabaseguard)@apibadrequestresponse({description",{"_index":3249,"title":{},"body":{"controllers/PullRequestDescriptionController.html":{}}}],["information'})@apibearerauth()@useguards(supabaseguard)@apiokresponse({type",{"_index":4732,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["information'})@apiokresponse({type",{"_index":565,"title":{},"body":{"controllers/AuthController.html":{}}}],["informative",{"_index":1334,"title":{},"body":{"classes/CreateBlogSummaryDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{}}}],["ingesting",{"_index":5525,"title":{},"body":{"index.html":{}}}],["inherited",{"_index":1052,"title":{},"body":{"classes/ContributionPageMetaDto.html":{},"classes/ContributionPageOptionsDto.html":{},"classes/ContributorPullRequestsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/UpdateInsightDto.html":{},"classes/UserListMostActiveContributorsDto.html":{},"classes/UserRepoOptionsDto.html":{}}}],["initial",{"_index":5828,"title":{},"body":{"miscellaneous/variables.html":{}}}],["inject",{"_index":466,"title":{},"body":{"modules/AppModule.html":{}}}],["injectable",{"_index":17,"title":{"injectables/BlogSummaryService.html":{},"injectables/CodeExplanationService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"injectables/CommitAuthorsService.html":{},"injectables/CommitsService.html":{},"injectables/ContributionService.html":{},"injectables/CouponService.html":{},"injectables/CustomLogger.html":{},"injectables/CustomerService.html":{},"injectables/EmojiService.html":{},"injectables/EndorsementService.html":{},"injectables/HttpLoggerMiddleware.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"injectables/IssueSummaryService.html":{},"injectables/LogService.html":{},"injectables/OpenAiService.html":{},"injectables/PagerService.html":{},"injectables/PizzaOvenService.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestReviewService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoFilterService.html":{},"injectables/RepoService.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeService.html":{},"injectables/StripeSubscriptionService.html":{},"injectables/SubmitService.html":{},"injectables/SupabaseGuard.html":{},"injectables/SupabaseStrategy.html":{},"injectables/TierService.html":{},"injectables/UserCollaborationService.html":{},"injectables/UserFollowService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserListService.html":{},"injectables/UserListStatsService.html":{},"injectables/UserNotificationService.html":{},"injectables/UserOrganizationService.html":{},"injectables/UserReposService.html":{},"injectables/VoteService.html":{}},"body":{"interfaces/AllContributionsCount.html":{},"injectables/BlogSummaryService.html":{},"interfaces/ChatResponse.html":{},"injectables/CodeExplanationService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"injectables/CommitAuthorsService.html":{},"injectables/CommitsService.html":{},"injectables/ContributionService.html":{},"injectables/CouponService.html":{},"injectables/CustomLogger.html":{},"injectables/CustomerService.html":{},"injectables/EmojiService.html":{},"injectables/EndorsementService.html":{},"guards/EndorsementTokenGuard.html":{},"injectables/HttpLoggerMiddleware.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"injectables/IssueSummaryService.html":{},"injectables/LogService.html":{},"injectables/OpenAiService.html":{},"injectables/PagerService.html":{},"interfaces/PaginationInput.html":{},"injectables/PizzaOvenService.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestReviewService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoFilterService.html":{},"injectables/RepoService.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeService.html":{},"injectables/StripeSubscriptionService.html":{},"injectables/SubmitService.html":{},"injectables/SupabaseGuard.html":{},"injectables/SupabaseStrategy.html":{},"injectables/TierService.html":{},"injectables/UserCollaborationService.html":{},"injectables/UserFollowService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserListService.html":{},"injectables/UserListStatsService.html":{},"injectables/UserNotificationService.html":{},"injectables/UserOrganizationService.html":{},"injectables/UserReposService.html":{},"injectables/VoteService.html":{},"coverage.html":{}}}],["injectables",{"_index":796,"title":{},"body":{"injectables/BlogSummaryService.html":{},"injectables/CodeExplanationService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"injectables/CommitAuthorsService.html":{},"injectables/CommitsService.html":{},"injectables/ContributionService.html":{},"injectables/CouponService.html":{},"injectables/CustomLogger.html":{},"injectables/CustomerService.html":{},"injectables/EmojiService.html":{},"injectables/EndorsementService.html":{},"injectables/HttpLoggerMiddleware.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"injectables/IssueSummaryService.html":{},"injectables/LogService.html":{},"injectables/OpenAiService.html":{},"injectables/PagerService.html":{},"injectables/PizzaOvenService.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestReviewService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoFilterService.html":{},"injectables/RepoService.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeService.html":{},"injectables/StripeSubscriptionService.html":{},"injectables/SubmitService.html":{},"injectables/SupabaseGuard.html":{},"injectables/SupabaseStrategy.html":{},"injectables/TierService.html":{},"injectables/UserCollaborationService.html":{},"injectables/UserFollowService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserListService.html":{},"injectables/UserListStatsService.html":{},"injectables/UserNotificationService.html":{},"injectables/UserOrganizationService.html":{},"injectables/UserReposService.html":{},"injectables/VoteService.html":{},"overview.html":{}}}],["injectdatasource",{"_index":301,"title":{},"body":{"modules/AppModule.html":{}}}],["injectdatasource(\"apiconnection",{"_index":503,"title":{},"body":{"modules/AppModule.html":{}}}],["injectdatasource(\"logconnection",{"_index":505,"title":{},"body":{"modules/AppModule.html":{}}}],["injectrepository",{"_index":23,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/CommitAuthorsService.html":{},"injectables/CommitsService.html":{},"injectables/ContributionService.html":{},"injectables/CouponService.html":{},"injectables/CustomerService.html":{},"injectables/EmojiService.html":{},"injectables/EndorsementService.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"injectables/LogService.html":{},"injectables/PizzaOvenService.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestReviewService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoService.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeSubscriptionService.html":{},"injectables/SubmitService.html":{},"injectables/UserCollaborationService.html":{},"injectables/UserFollowService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserListService.html":{},"injectables/UserListStatsService.html":{},"injectables/UserNotificationService.html":{},"injectables/UserOrganizationService.html":{},"injectables/UserReposService.html":{},"injectables/VoteService.html":{}}}],["injectrepository(dbbakedrepo",{"_index":3191,"title":{},"body":{"injectables/PizzaOvenService.html":{}}}],["injectrepository(dbcommitauthors",{"_index":992,"title":{},"body":{"injectables/CommitAuthorsService.html":{}}}],["injectrepository(dbcommits",{"_index":1023,"title":{},"body":{"injectables/CommitsService.html":{}}}],["injectrepository(dbcontribution",{"_index":1134,"title":{},"body":{"injectables/ContributionService.html":{}}}],["injectrepository(dbcoupon",{"_index":1298,"title":{},"body":{"injectables/CouponService.html":{}}}],["injectrepository(dbcustomer",{"_index":1523,"title":{},"body":{"injectables/CustomerService.html":{}}}],["injectrepository(dbemoji",{"_index":2402,"title":{},"body":{"injectables/EmojiService.html":{}}}],["injectrepository(dbendorsement",{"_index":2528,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["injectrepository(dbinsight",{"_index":2979,"title":{},"body":{"injectables/InsightsService.html":{}}}],["injectrepository(dbinsightmember",{"_index":2884,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["injectrepository(dbinsightrepo",{"_index":2930,"title":{},"body":{"injectables/InsightRepoService.html":{}}}],["injectrepository(dblog",{"_index":3039,"title":{},"body":{"injectables/LogService.html":{}}}],["injectrepository(dbprinsight",{"_index":3292,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["injectrepository(dbpullrequest",{"_index":1136,"title":{},"body":{"injectables/ContributionService.html":{},"injectables/PullRequestService.html":{}}}],["injectrepository(dbpullrequestreview",{"_index":3367,"title":{},"body":{"injectables/PullRequestReviewService.html":{}}}],["injectrepository(dbrepo",{"_index":3612,"title":{},"body":{"injectables/RepoService.html":{}}}],["injectrepository(dbrepotouserstargazers",{"_index":3907,"title":{},"body":{"injectables/StargazeService.html":{}}}],["injectrepository(dbrepotouserstars",{"_index":3879,"title":{},"body":{"injectables/StarService.html":{}}}],["injectrepository(dbrepotousersubmissions",{"_index":4073,"title":{},"body":{"injectables/SubmitService.html":{}}}],["injectrepository(dbrepotouservotes",{"_index":5265,"title":{},"body":{"injectables/VoteService.html":{}}}],["injectrepository(dbsubscription",{"_index":3965,"title":{},"body":{"injectables/StripeSubscriptionService.html":{}}}],["injectrepository(dbuser",{"_index":1135,"title":{},"body":{"injectables/ContributionService.html":{},"injectables/UserListService.html":{}}}],["injectrepository(dbusercollaboration",{"_index":4325,"title":{},"body":{"injectables/UserCollaborationService.html":{}}}],["injectrepository(dbuserhighlight",{"_index":4643,"title":{},"body":{"injectables/UserHighlightsService.html":{},"injectables/UserListService.html":{}}}],["injectrepository(dbuserhighlightreaction",{"_index":4644,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["injectrepository(dbuserlist",{"_index":4986,"title":{},"body":{"injectables/UserListService.html":{}}}],["injectrepository(dbuserlistcontributor",{"_index":63,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListService.html":{},"injectables/UserListStatsService.html":{}}}],["injectrepository(dbusernotification",{"_index":5150,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["injectrepository(dbuserorganization",{"_index":5188,"title":{},"body":{"injectables/UserOrganizationService.html":{}}}],["injectrepository(dbuserrepo",{"_index":5238,"title":{},"body":{"injectables/UserReposService.html":{}}}],["injectrepository(dbusertouserfollows",{"_index":4444,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["innerjoin",{"_index":209,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListService.html":{},"injectables/UserListStatsService.html":{}}}],["innerjoin(\"insights",{"_index":2898,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["innerjoin(\"repos",{"_index":204,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/EndorsementService.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"injectables/UserListStatsService.html":{}}}],["innerjoin(\"users",{"_index":214,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/PullRequestService.html":{},"injectables/RepoService.html":{},"injectables/UserFollowService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserListService.html":{},"injectables/UserListStatsService.html":{},"injectables/UserNotificationService.html":{}}}],["innerjoinandselect(\"user_collaborations.request_user",{"_index":4332,"title":{},"body":{"injectables/UserCollaborationService.html":{}}}],["innerjoinandselect(\"user_collaborations.user",{"_index":4331,"title":{},"body":{"injectables/UserCollaborationService.html":{}}}],["innerjoinandselect(\"user_notifications.from_user",{"_index":5153,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["innerjoinandselect(\"user_organizations.organization_user",{"_index":5191,"title":{},"body":{"injectables/UserOrganizationService.html":{}}}],["innerjoinandselect(\"user_organizations.user",{"_index":5190,"title":{},"body":{"injectables/UserOrganizationService.html":{}}}],["innerjoinandselect(`insights.user",{"_index":2982,"title":{},"body":{"injectables/InsightsService.html":{}}}],["insert",{"_index":1688,"title":{},"body":{"entities/DbContributionStatTimeframe.html":{},"entities/DbContributionsProjects.html":{},"entities/DbContributorCategoryTimeframe.html":{},"entities/DbInsightMember.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoLoginContributions.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserListContributorStat.html":{},"entities/DbUserListContributorStat-1.html":{}}}],["inserting/updating",{"_index":4029,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["insight",{"_index":1378,"title":{},"body":{"classes/CreateInsightDto.html":{},"classes/CreateInsightMemberDto.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbUserList.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightRepoService.html":{},"modules/InsightsModule.html":{},"injectables/InsightsService.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateInsightMemberDto.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"coverage.html":{}}}],["insight'})@apibadrequestresponse({description",{"_index":2835,"title":{},"body":{"controllers/InsightController.html":{},"controllers/UserInsightsController.html":{}}}],["insight'})@apibearerauth()@useguards(supabaseguard)@apiokresponse({type",{"_index":4717,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["insight'})@apiparam({name",{"_index":2830,"title":{},"body":{"controllers/InsightController.html":{}}}],["insight.controller",{"_index":2955,"title":{},"body":{"modules/InsightsModule.html":{}}}],["insight.controller.ts",{"_index":4770,"title":{},"body":{"controllers/UserInsightsController.html":{},"coverage.html":{}}}],["insight.controller.ts:108",{"_index":4778,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["insight.controller.ts:59",{"_index":4775,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["insight.controller.ts:77",{"_index":4773,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["insight.dto",{"_index":2842,"title":{},"body":{"controllers/InsightController.html":{},"classes/UpdateInsightDto.html":{},"controllers/UserInsightsController.html":{}}}],["insight.dto.ts",{"_index":1377,"title":{},"body":{"classes/CreateInsightDto.html":{},"classes/UpdateInsightDto.html":{},"coverage.html":{}}}],["insight.dto.ts:14",{"_index":1381,"title":{},"body":{"classes/CreateInsightDto.html":{}}}],["insight.dto.ts:22",{"_index":1379,"title":{},"body":{"classes/CreateInsightDto.html":{}}}],["insight.dto.ts:32",{"_index":1383,"title":{},"body":{"classes/CreateInsightDto.html":{}}}],["insight.entity",{"_index":407,"title":{},"body":{"modules/AppModule.html":{},"entities/DbInsightRepo.html":{},"controllers/PullRequestController.html":{},"injectables/PullRequestInsightsService.html":{},"modules/PullRequestModule.html":{}}}],["insight.entity.ts",{"_index":1860,"title":{},"body":{"entities/DbPRInsight.html":{},"coverage.html":{}}}],["insight.entity.ts:15",{"_index":1877,"title":{},"body":{"entities/DbPRInsight.html":{}}}],["insight.entity.ts:28",{"_index":1883,"title":{},"body":{"entities/DbPRInsight.html":{}}}],["insight.entity.ts:41",{"_index":1875,"title":{},"body":{"entities/DbPRInsight.html":{}}}],["insight.entity.ts:53",{"_index":1868,"title":{},"body":{"entities/DbPRInsight.html":{}}}],["insight.entity.ts:65",{"_index":1867,"title":{},"body":{"entities/DbPRInsight.html":{}}}],["insight.entity.ts:77",{"_index":1885,"title":{},"body":{"entities/DbPRInsight.html":{}}}],["insight.id",{"_index":4745,"title":{},"body":{"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["insight.repos",{"_index":1850,"title":{},"body":{"entities/DbInsightRepo.html":{}}}],["insight.repos)@joincolumn({name",{"_index":1846,"title":{},"body":{"entities/DbInsightRepo.html":{}}}],["insight.repos.filter((insightrepo",{"_index":4795,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["insight/dtos/insight",{"_index":2616,"title":{},"body":{"classes/FilterOptionsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{},"injectables/RepoFilterService.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{}}}],["insight/entities/insight",{"_index":369,"title":{},"body":{"modules/AppModule.html":{}}}],["insight/entities/insight.entity",{"_index":367,"title":{},"body":{"modules/AppModule.html":{},"modules/UserModule.html":{}}}],["insight/insights.module",{"_index":365,"title":{},"body":{"modules/AppModule.html":{}}}],["insight_id",{"_index":1819,"title":{},"body":{"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"controllers/UserInsightMemberController.html":{}}}],["insight_members",{"_index":1841,"title":{},"body":{"entities/DbInsightMember.html":{},"injectables/InsightsService.html":{}}}],["insight_members.insight_id=insights.id",{"_index":2899,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["insight_members.user_id=users.id",{"_index":2900,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["insight_members_invitation_email",{"_index":2897,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["insight_members_name",{"_index":2895,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["insight_repos",{"_index":1849,"title":{},"body":{"entities/DbInsightRepo.html":{},"injectables/InsightsService.html":{}}}],["insightcontroller",{"_index":2820,"title":{"controllers/InsightController.html":{}},"body":{"controllers/InsightController.html":{},"modules/InsightsModule.html":{},"coverage.html":{}}}],["insightfilterfieldsenum",{"_index":2608,"title":{},"body":{"classes/FilterOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{},"injectables/RepoFilterService.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"miscellaneous/enumerations.html":{}}}],["insightfilterfieldsenum'})@isenum(insightfilterfieldsenum)@isoptional",{"_index":2609,"title":{},"body":{"classes/FilterOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{}}}],["insightfilterfieldsenum.mostspammed",{"_index":3550,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["insightfilterfieldsenum.recent",{"_index":3543,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["insightfilterfieldsenum.top100",{"_index":3545,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["insightid",{"_index":2872,"title":{},"body":{"injectables/InsightMemberService.html":{},"injectables/InsightRepoService.html":{},"controllers/UserInsightMemberController.html":{}}}],["insightmember",{"_index":2869,"title":{},"body":{"injectables/InsightMemberService.html":{},"controllers/UserInsightMemberController.html":{}}}],["insightmember.access",{"_index":4762,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["insightmemberrepository",{"_index":2866,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["insightmemberservice",{"_index":2855,"title":{"injectables/InsightMemberService.html":{}},"body":{"injectables/InsightMemberService.html":{},"modules/InsightsModule.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"coverage.html":{},"overview.html":{}}}],["insightoptionsdto",{"_index":2902,"title":{"classes/InsightOptionsDto.html":{}},"body":{"classes/InsightOptionsDto.html":{},"coverage.html":{}}}],["insightpageoptionsdto",{"_index":2914,"title":{"classes/InsightPageOptionsDto.html":{}},"body":{"classes/InsightPageOptionsDto.html":{},"injectables/InsightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"coverage.html":{}}}],["insightrepo",{"_index":1799,"title":{},"body":{"entities/DbInsight.html":{},"controllers/UserInsightsController.html":{}}}],["insightrepo.deleted_at",{"_index":4796,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["insightrepo.insight",{"_index":1800,"title":{},"body":{"entities/DbInsight.html":{}}}],["insightreporepository",{"_index":2922,"title":{},"body":{"injectables/InsightRepoService.html":{}}}],["insightreposervice",{"_index":2915,"title":{"injectables/InsightRepoService.html":{}},"body":{"injectables/InsightRepoService.html":{},"modules/InsightsModule.html":{},"controllers/UserInsightsController.html":{},"coverage.html":{},"overview.html":{}}}],["insightrepository",{"_index":2967,"title":{},"body":{"injectables/InsightsService.html":{}}}],["insights",{"_index":1814,"title":{},"body":{"entities/DbInsight.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightsService.html":{},"controllers/PullRequestController.html":{},"classes/SupabaseAuthDto.html":{},"controllers/UserInsightsController.html":{},"index.html":{}}}],["insights.controller",{"_index":1269,"title":{},"body":{"modules/ContributorModule.html":{}}}],["insights.controller.ts",{"_index":1230,"title":{},"body":{"controllers/ContributorInsightsController.html":{},"coverage.html":{}}}],["insights.controller.ts:22",{"_index":1254,"title":{},"body":{"controllers/ContributorInsightsController.html":{}}}],["insights.controller.ts:35",{"_index":1247,"title":{},"body":{"controllers/ContributorInsightsController.html":{}}}],["insights.controller.ts:48",{"_index":1244,"title":{},"body":{"controllers/ContributorInsightsController.html":{}}}],["insights.controller.ts:61",{"_index":1251,"title":{},"body":{"controllers/ContributorInsightsController.html":{}}}],["insights.deleted_at",{"_index":2995,"title":{},"body":{"injectables/InsightsService.html":{}}}],["insights.dto",{"_index":1255,"title":{},"body":{"controllers/ContributorInsightsController.html":{},"injectables/PullRequestService.html":{}}}],["insights.dto.ts",{"_index":3199,"title":{},"body":{"classes/PullRequestContributorInsightsDto.html":{},"coverage.html":{}}}],["insights.dto.ts:11",{"_index":3201,"title":{},"body":{"classes/PullRequestContributorInsightsDto.html":{}}}],["insights.id",{"_index":2996,"title":{},"body":{"injectables/InsightsService.html":{}}}],["insights.id=insight_repos.insight_id",{"_index":2984,"title":{},"body":{"injectables/InsightsService.html":{}}}],["insights.service",{"_index":2845,"title":{},"body":{"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"modules/InsightsModule.html":{},"controllers/PullRequestController.html":{},"modules/PullRequestModule.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["insights.service.ts",{"_index":3269,"title":{},"body":{"injectables/PullRequestInsightsService.html":{},"coverage.html":{}}}],["insights.service.ts:12",{"_index":3277,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["insights.service.ts:20",{"_index":3279,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["insights.service.ts:24",{"_index":3284,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["insights.service.ts:36",{"_index":3283,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["insights.service.ts:49",{"_index":3286,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["insights.service.ts:63",{"_index":3288,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["insights.service.ts:97",{"_index":3281,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["insights_count",{"_index":678,"title":{},"body":{"controllers/AuthController.html":{},"classes/SupabaseAuthDto.html":{}}}],["insights_role",{"_index":666,"title":{},"body":{"controllers/AuthController.html":{},"classes/SupabaseAuthDto.html":{}}}],["insightservice",{"_index":2864,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["insightsmodule",{"_index":270,"title":{"modules/InsightsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/InsightsModule.html":{},"modules.html":{},"overview.html":{}}}],["insightsreposervice",{"_index":4780,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["insightsservice",{"_index":2844,"title":{"injectables/InsightsService.html":{}},"body":{"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"modules/InsightsModule.html":{},"injectables/InsightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"coverage.html":{},"overview.html":{}}}],["install",{"_index":5448,"title":{},"body":{"index.html":{}}}],["installation",{"_index":5447,"title":{},"body":{"index.html":{}}}],["installed",{"_index":5362,"title":{},"body":{"index.html":{}}}],["instance",{"_index":5369,"title":{},"body":{"index.html":{}}}],["instanceof",{"_index":839,"title":{},"body":{"injectables/BlogSummaryService.html":{},"injectables/CodeExplanationService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"injectables/IssueSummaryService.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/TierService.html":{},"controllers/UserFollowsController.html":{}}}],["instructions",{"_index":931,"title":{},"body":{"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{}}}],["integer",{"_index":961,"title":{},"body":{"classes/CollaboratorsDto.html":{},"classes/ContributionPageMetaDto.html":{},"classes/ContributionsByProjectDto.html":{},"classes/ContributionsTimeframeDto.html":{},"classes/CreateBlogSummaryDto.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateIssueSummaryDto.html":{},"entities/DbBakedRepo.html":{},"entities/DbCommitAuthors.html":{},"entities/DbCommits.html":{},"entities/DbContribution.html":{},"entities/DbContributionStatTimeframe.html":{},"entities/DbContributionsProjects.html":{},"entities/DbContributorCategoryTimeframe.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbPullRequestReview.html":{},"entities/DbRepoLoginContributions.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserListContributorStat.html":{},"entities/DbUserListContributorStat-1.html":{},"entities/DbUserNotification.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"classes/FilterListContributorsDto.html":{},"classes/FilteredUsersDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{},"controllers/PizzaOvenController.html":{},"classes/PullRequestContributorInsightsDto.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"classes/RepoInfo.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"classes/SupabaseAuthDto.html":{},"classes/TopProjectsDto.html":{},"classes/TopUsersDto.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"controllers/UserListStatsController.html":{},"classes/UserRepoOptionsDto-1.html":{},"classes/VotedRepoDto.html":{}}}],["integer'})@column",{"_index":1829,"title":{},"body":{"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{}}}],["integer'})@column('bigint",{"_index":2206,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["integer'})@column('integer",{"_index":1961,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["integer'})@column({type",{"_index":1621,"title":{},"body":{"entities/DbCommits.html":{},"entities/DbContribution.html":{},"entities/DbContributionStatTimeframe.html":{},"entities/DbContributionsProjects.html":{},"entities/DbContributorCategoryTimeframe.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoLoginContributions.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributorStat.html":{},"entities/DbUserListContributorStat-1.html":{},"entities/DbUserNotification.html":{}}}],["integer'})@isoptional()@type(undefined",{"_index":4196,"title":{},"body":{"classes/TopUsersDto.html":{}}}],["integer'})@primarycolumn('bigint",{"_index":1585,"title":{},"body":{"entities/DbBakedRepo.html":{},"entities/DbCommitAuthors.html":{},"entities/DbCommits.html":{},"entities/DbContribution.html":{},"entities/DbUserNotification.html":{}}}],["integer'})@primarycolumn('integer",{"_index":1938,"title":{},"body":{"entities/DbPullRequest.html":{},"entities/DbPullRequestReview.html":{}}}],["integer'})@primarycolumn()@primarygeneratedcolumn",{"_index":1789,"title":{},"body":{"entities/DbInsight.html":{},"entities/DbInsightRepo.html":{}}}],["integer'})@primarycolumn({type",{"_index":1876,"title":{},"body":{"entities/DbPRInsight.html":{}}}],["integer'})@primarygeneratedcolumn",{"_index":2035,"title":{},"body":{"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{}}}],["integer'})@primarygeneratedcolumn({type",{"_index":2185,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["integer'})@type(undefined)@isin(['0",{"_index":1098,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/ContributorPullRequestsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/UserListMostActiveContributorsDto.html":{},"classes/UserRepoOptionsDto.html":{}}}],["integer'})@type(undefined)@isin(['7",{"_index":1101,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/ContributionsByProjectDto.html":{},"classes/ContributionsTimeframeDto.html":{},"classes/ContributorPullRequestsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/TopProjectsDto.html":{},"classes/UserListMostActiveContributorsDto.html":{},"classes/UserRepoOptionsDto.html":{}}}],["integer'})@type(undefined)@isint()@min(1)@isoptional",{"_index":1093,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/ContributorPullRequestsDto.html":{},"classes/FilterListContributorsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/FilteredUsersDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/TopUsersDto.html":{},"classes/UserListMostActiveContributorsDto.html":{},"classes/UserRepoOptionsDto.html":{}}}],["integer'})@type(undefined)@isint()@min(1)@max(100)@isoptional",{"_index":2574,"title":{},"body":{"classes/FilterListContributorsDto.html":{},"classes/FilteredUsersDto.html":{}}}],["integer'})@type(undefined)@isint()@min(1)@max(10000)@isoptional",{"_index":1087,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/ContributorPullRequestsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/TopUsersDto.html":{},"classes/UserListMostActiveContributorsDto.html":{},"classes/UserRepoOptionsDto.html":{}}}],["integrates",{"_index":5524,"title":{},"body":{"index.html":{}}}],["integration",{"_index":5523,"title":{},"body":{"index.html":{}}}],["integrations",{"_index":5627,"title":{},"body":{"properties.html":{}}}],["interest",{"_index":3672,"title":{},"body":{"injectables/RepoService.html":{}}}],["interests",{"_index":600,"title":{},"body":{"controllers/AuthController.html":{},"injectables/RepoService.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"classes/UserOnboardingDto.html":{},"controllers/UserRecommendationController.html":{}}}],["interests.dto",{"_index":627,"title":{},"body":{"controllers/AuthController.html":{}}}],["interests.dto.ts",{"_index":4260,"title":{},"body":{"classes/UpdateUserProfileInterestsDto.html":{},"coverage.html":{}}}],["interests.dto.ts:12",{"_index":4262,"title":{},"body":{"classes/UpdateUserProfileInterestsDto.html":{}}}],["interests.map(async",{"_index":3671,"title":{},"body":{"injectables/RepoService.html":{}}}],["interface",{"_index":0,"title":{"interfaces/AllContributionsCount.html":{},"interfaces/ChatResponse.html":{},"interfaces/PageMetaParameters.html":{},"interfaces/PaginationInput.html":{}},"body":{"interfaces/AllContributionsCount.html":{},"interfaces/ChatResponse.html":{},"injectables/OpenAiService.html":{},"interfaces/PageMetaParameters.html":{},"injectables/PagerService.html":{},"interfaces/PaginationInput.html":{},"injectables/UserListStatsService.html":{},"coverage.html":{}}}],["interfaces",{"_index":2,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"interfaces/ChatResponse.html":{},"interfaces/PageMetaParameters.html":{},"interfaces/PaginationInput.html":{},"overview.html":{}}}],["internal",{"_index":1953,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["interval",{"_index":99,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/ContributionService.html":{},"entities/DbPRInsight.html":{},"controllers/PullRequestController.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoFilterService.html":{},"injectables/RepoService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserListService.html":{},"injectables/UserListStatsService.html":{}}}],["invalid",{"_index":769,"title":{},"body":{"controllers/BlogSummaryController.html":{},"controllers/CodeExplanationController.html":{},"controllers/CodeRefactorSuggestionController.html":{},"controllers/CodeTestSuggestionController.html":{},"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"controllers/IssueSummaryController.html":{},"controllers/PizzaOvenController.html":{},"controllers/PullRequestDescriptionController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"controllers/UserListStatsController.html":{}}}],["invitation",{"_index":1831,"title":{},"body":{"entities/DbInsightMember.html":{},"controllers/UserInsightMemberController.html":{}}}],["invitation_email",{"_index":1820,"title":{},"body":{"entities/DbInsightMember.html":{},"controllers/UserInsightMemberController.html":{}}}],["invitation_emailed_at",{"_index":1821,"title":{},"body":{"entities/DbInsightMember.html":{}}}],["invite",{"_index":1392,"title":{},"body":{"classes/CreateInsightMemberDto.html":{},"entities/DbUserNotification.html":{}}}],["ip",{"_index":5820,"title":{},"body":{"miscellaneous/variables.html":{}}}],["is_accepted",{"_index":2063,"title":{},"body":{"entities/DbRepoToUserSubmissions.html":{}}}],["is_favorite",{"_index":1782,"title":{},"body":{"entities/DbInsight.html":{}}}],["is_featured",{"_index":1783,"title":{},"body":{"entities/DbInsight.html":{},"entities/DbUserList.html":{}}}],["is_featured=true",{"_index":2994,"title":{},"body":{"injectables/InsightsService.html":{}}}],["is_onboarded",{"_index":664,"title":{},"body":{"controllers/AuthController.html":{},"classes/SupabaseAuthDto.html":{}}}],["is_public",{"_index":1197,"title":{},"body":{"classes/Contributor.html":{},"classes/CreateInsightDto.html":{},"classes/CreateUserListDto.html":{},"entities/DbInsight.html":{},"entities/DbUserList.html":{},"classes/UpdateInsightDto.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"injectables/UserListService.html":{}}}],["is_waitlisted",{"_index":665,"title":{},"body":{"controllers/AuthController.html":{},"classes/SupabaseAuthDto.html":{}}}],["isarray",{"_index":960,"title":{},"body":{"classes/CollaboratorsDto.html":{},"classes/ContributionsPageDto.html":{},"classes/Contributor.html":{},"classes/CreateInsightDto.html":{},"classes/CreateUserHighlightDto.html":{},"classes/CreateUserListDto.html":{},"entities/DbUserHighlight.html":{},"classes/DbUserHighlightReactionResponse.html":{},"classes/FilterListContributorsDto.html":{},"classes/FollowManyUsersDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/PageDto.html":{},"controllers/RepoContributionsController.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"classes/UserOnboardingDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"classes/VotedRepoDto.html":{}}}],["isarray()@apiproperty({isarray",{"_index":1176,"title":{},"body":{"classes/ContributionsPageDto.html":{},"classes/PageDto.html":{}}}],["isboolean",{"_index":754,"title":{},"body":{"classes/BakeRepoDto.html":{},"classes/Contributor.html":{},"classes/CreateInsightDto.html":{},"classes/CreateUserListDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"classes/VotedRepoDto.html":{}}}],["iscreatinglogs",{"_index":3043,"title":{},"body":{"injectables/LogService.html":{}}}],["isdatestring",{"_index":1454,"title":{},"body":{"classes/CreateUserHighlightDto.html":{}}}],["isemail",{"_index":1395,"title":{},"body":{"classes/CreateInsightMemberDto.html":{},"classes/UpdateUserDto.html":{}}}],["isenum",{"_index":1104,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/ContributionsTimeframeDto.html":{},"classes/ContributorPullRequestsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/UserListMostActiveContributorsDto.html":{}}}],["isenum(contributionorderfieldsenum",{"_index":1109,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{}}}],["isenum(insightfilterfieldsenum",{"_index":2617,"title":{},"body":{"classes/FilterOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{}}}],["isenum(orderdirectionenum",{"_index":3076,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["isenum(pullrequestorderfieldsenum",{"_index":3357,"title":{},"body":{"classes/PullRequestPageOptionsDto.html":{}}}],["isenum(pullrequeststatusenum",{"_index":3358,"title":{},"body":{"classes/PullRequestPageOptionsDto.html":{}}}],["isenum(rangetypeenum",{"_index":1279,"title":{},"body":{"classes/ContributorPullRequestsDto.html":{}}}],["isenum(repoorderfieldsenum",{"_index":3582,"title":{},"body":{"classes/RepoPageOptionsDto.html":{}}}],["isenum(userlistcontributorstatsorderenum",{"_index":4945,"title":{},"body":{"classes/UserListMostActiveContributorsDto.html":{}}}],["isenum(userlistcontributorstatstypeenum",{"_index":1190,"title":{},"body":{"classes/ContributionsTimeframeDto.html":{},"classes/UserListMostActiveContributorsDto.html":{}}}],["isglobal",{"_index":438,"title":{},"body":{"modules/AppModule.html":{}}}],["isin",{"_index":1168,"title":{},"body":{"classes/ContributionsByProjectDto.html":{},"classes/ContributionsTimeframeDto.html":{},"classes/CreateBlogSummaryDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/CreateUserHighlightDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"classes/PageOptionsDto.html":{},"classes/TopProjectsDto.html":{},"classes/UpdateInsightMemberDto.html":{},"classes/UpdateUserCollaborationDto.html":{}}}],["isin([\"accept",{"_index":4216,"title":{},"body":{"classes/UpdateUserCollaborationDto.html":{}}}],["isin([\"english",{"_index":1347,"title":{},"body":{"classes/CreateBlogSummaryDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{}}}],["isin([\"exciting",{"_index":1346,"title":{},"body":{"classes/CreateBlogSummaryDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{}}}],["isin([\"pull_request",{"_index":1459,"title":{},"body":{"classes/CreateUserHighlightDto.html":{}}}],["isin([\"view",{"_index":4210,"title":{},"body":{"classes/UpdateInsightMemberDto.html":{}}}],["isin([0",{"_index":3077,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["isin([7",{"_index":1170,"title":{},"body":{"classes/ContributionsByProjectDto.html":{},"classes/ContributionsTimeframeDto.html":{},"classes/PageOptionsDto.html":{},"classes/TopProjectsDto.html":{}}}],["isint",{"_index":1169,"title":{},"body":{"classes/ContributionsByProjectDto.html":{},"classes/ContributionsTimeframeDto.html":{},"classes/FilterListContributorsDto.html":{},"classes/FilteredUsersDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/TopProjectsDto.html":{},"classes/TopUsersDto.html":{}}}],["ismember",{"_index":4749,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["isnumber",{"_index":1338,"title":{},"body":{"classes/CreateBlogSummaryDto.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"classes/RepoInfo.html":{},"classes/TopProjectsDto.html":{}}}],["iso",{"_index":1697,"title":{},"body":{"entities/DbContributionStatTimeframe.html":{},"entities/DbContributorCategoryTimeframe.html":{}}}],["isoptional",{"_index":1105,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/ContributionsByProjectDto.html":{},"classes/ContributionsTimeframeDto.html":{},"classes/ContributorPullRequestsDto.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateLogDto.html":{},"classes/CreateUserHighlightDto.html":{},"classes/DbUserHighlightReactionResponse.html":{},"classes/FilterListContributorsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/FilteredUsersDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/TopProjectsDto.html":{},"classes/TopUsersDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserListMostActiveContributorsDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"classes/VotedRepoDto.html":{}}}],["isoptional()@isstring",{"_index":1406,"title":{},"body":{"classes/CreateLogDto.html":{}}}],["isstring",{"_index":521,"title":{},"body":{"classes/ApplyUserCouponDto.html":{},"classes/BakeRepoDto.html":{},"classes/CommitAuthorDto.html":{},"classes/CommitsDto.html":{},"classes/Contributor.html":{},"classes/CreateBlogSummaryDto.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateInsightDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/CreateLogDto.html":{},"classes/CreateUserCollaborationDto.html":{},"classes/CreateUserHighlightDto.html":{},"classes/CreateUserListDto.html":{},"classes/DbUserHighlightReactionResponse.html":{},"classes/FilterListContributorsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/FollowManyUsersDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoInfo.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/UpdateInsightMemberDto.html":{},"classes/UpdateUserCollaborationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserOnboardingDto.html":{}}}],["isstring()@isoptional",{"_index":1365,"title":{},"body":{"classes/CreateEndorsementDto.html":{},"classes/FilterOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{}}}],["issue",{"_index":794,"title":{},"body":{"modules/BlogSummaryModule.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/CreateUserHighlightDto.html":{},"controllers/IssueSummaryController.html":{},"modules/IssueSummaryModule.html":{},"injectables/IssueSummaryService.html":{},"coverage.html":{}}}],["issue'})@apibearerauth()@useguards(supabaseguard)@apibadrequestresponse({description",{"_index":3003,"title":{},"body":{"controllers/IssueSummaryController.html":{}}}],["issuecomments",{"_index":1398,"title":{},"body":{"classes/CreateIssueSummaryDto.html":{}}}],["issuedescription",{"_index":1399,"title":{},"body":{"classes/CreateIssueSummaryDto.html":{}}}],["issues",{"_index":1691,"title":{},"body":{"entities/DbContributionStatTimeframe.html":{},"entities/DbRepoLoginContributions.html":{},"entities/DbUserListContributorStat.html":{},"entities/DbUserListContributorStat-1.html":{},"controllers/IssueSummaryController.html":{},"injectables/IssueSummaryService.html":{},"classes/RepoPageOptionsDto.html":{},"miscellaneous/enumerations.html":{}}}],["issues/issue",{"_index":423,"title":{},"body":{"modules/AppModule.html":{}}}],["issues_created",{"_index":1685,"title":{},"body":{"entities/DbContributionStatTimeframe.html":{},"entities/DbRepoLoginContributions.html":{},"entities/DbUserListContributorStat.html":{},"entities/DbUserListContributorStat-1.html":{}}}],["issuesummarycontroller",{"_index":2999,"title":{"controllers/IssueSummaryController.html":{}},"body":{"controllers/IssueSummaryController.html":{},"modules/IssueSummaryModule.html":{},"coverage.html":{}}}],["issuesummarymodule",{"_index":271,"title":{"modules/IssueSummaryModule.html":{}},"body":{"modules/AppModule.html":{},"modules/IssueSummaryModule.html":{},"modules.html":{},"overview.html":{}}}],["issuesummaryservice",{"_index":3005,"title":{"injectables/IssueSummaryService.html":{}},"body":{"controllers/IssueSummaryController.html":{},"modules/IssueSummaryModule.html":{},"injectables/IssueSummaryService.html":{},"coverage.html":{},"overview.html":{}}}],["issuetitle",{"_index":1400,"title":{},"body":{"classes/CreateIssueSummaryDto.html":{}}}],["isurl",{"_index":4247,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["isvalid",{"_index":2564,"title":{},"body":{"guards/EndorsementTokenGuard.html":{}}}],["it'})@apiokresponse({type",{"_index":3835,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["it'})@apiparam({name",{"_index":3837,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["italian",{"_index":1320,"title":{},"body":{"classes/CreateBlogSummaryDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{}}}],["item",{"_index":997,"title":{},"body":{"injectables/CommitAuthorsService.html":{},"injectables/CommitsService.html":{},"injectables/EndorsementService.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightsService.html":{},"injectables/PizzaOvenService.html":{},"injectables/PullRequestInsightsService.html":{},"controllers/RepoContributionsController.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/UserCollaborationService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserListService.html":{},"injectables/UserReposService.html":{}}}],["item.id",{"_index":3485,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["item.is_public",{"_index":4993,"title":{},"body":{"injectables/UserListService.html":{}}}],["item.repos.foreach(async",{"_index":2985,"title":{},"body":{"injectables/InsightsService.html":{}}}],["item.user_id",{"_index":4994,"title":{},"body":{"injectables/UserListService.html":{}}}],["itemcount",{"_index":118,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"classes/ContributionPageMetaDto.html":{},"injectables/ContributionService.html":{},"injectables/EmojiService.html":{},"injectables/InsightsService.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaParameters.html":{},"injectables/PagerService.html":{},"interfaces/PaginationInput.html":{},"injectables/PullRequestService.html":{},"injectables/RepoService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserListStatsService.html":{},"injectables/UserNotificationService.html":{},"injectables/UserOrganizationService.html":{}}}],["items",{"_index":1056,"title":{},"body":{"classes/ContributionPageMetaDto.html":{},"classes/PageMetaDto.html":{},"miscellaneous/variables.html":{}}}],["javascript",{"_index":2262,"title":{},"body":{"entities/DbUserList.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"classes/UserOnboardingDto.html":{}}}],["javascript'})@isstring()@isoptional",{"_index":3202,"title":{},"body":{"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{}}}],["javscript",{"_index":2906,"title":{},"body":{"classes/InsightOptionsDto.html":{}}}],["javscript'})@isstring()@isoptional",{"_index":2907,"title":{},"body":{"classes/InsightOptionsDto.html":{}}}],["join",{"_index":202,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{},"index.html":{}}}],["join(\"\\n",{"_index":827,"title":{},"body":{"injectables/BlogSummaryService.html":{},"injectables/CodeExplanationService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"injectables/IssueSummaryService.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["joincolumn",{"_index":1632,"title":{},"body":{"entities/DbCommits.html":{},"entities/DbContribution.html":{},"entities/DbInsight.html":{},"entities/DbInsightRepo.html":{},"entities/DbPullRequestReview.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserNotification.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserTopRepo.html":{}}}],["jpmcb",{"_index":2631,"title":{},"body":{"classes/FollowManyUsersDto.html":{}}}],["js/dist/module/lib/types",{"_index":849,"title":{},"body":{"interfaces/ChatResponse.html":{},"injectables/OpenAiService.html":{}}}],["json.stringify",{"_index":864,"title":{},"body":{"interfaces/ChatResponse.html":{},"injectables/OpenAiService.html":{}}}],["json.stringify(parameters",{"_index":1569,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["json.stringify(subscription.metadata",{"_index":4008,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["jwt",{"_index":4146,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["key",{"_index":5379,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["keyout",{"_index":5413,"title":{},"body":{"index.html":{}}}],["keywords",{"_index":5628,"title":{},"body":{"properties.html":{}}}],["kind",{"_index":5583,"title":{},"body":{"license.html":{}}}],["korean",{"_index":1325,"title":{},"body":{"classes/CreateBlogSummaryDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{}}}],["la_kwdofcv7488aaaabcar",{"_index":1949,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["label",{"_index":1940,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["label_names",{"_index":1895,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["labels",{"_index":1896,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["landing",{"_index":5713,"title":{},"body":{"miscellaneous/variables.html":{}}}],["language",{"_index":809,"title":{},"body":{"injectables/BlogSummaryService.html":{},"injectables/CodeExplanationService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"classes/CreateBlogSummaryDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"injectables/IssueSummaryService.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["last",{"_index":1242,"title":{},"body":{"controllers/ContributorInsightsController.html":{},"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserList.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"classes/FilterListContributorsDto.html":{},"controllers/PullRequestController.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"classes/SupabaseAuthDto.html":{},"miscellaneous/variables.html":{}}}],["last_merged_at",{"_index":1108,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"entities/DbContribution.html":{},"miscellaneous/enumerations.html":{}}}],["last_sign_in_at",{"_index":651,"title":{},"body":{"controllers/AuthController.html":{},"classes/SupabaseAuthDto.html":{}}}],["last_updated_at",{"_index":1897,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["lastvaluefrom",{"_index":3188,"title":{},"body":{"injectables/PizzaOvenService.html":{}}}],["lastvaluefrom(this.httpservice.post(`${host}:${port}/bake",{"_index":3196,"title":{},"body":{"injectables/PizzaOvenService.html":{}}}],["latest",{"_index":4005,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["leave",{"_index":682,"title":{},"body":{"controllers/AuthController.html":{}}}],["leftjoin",{"_index":227,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/PullRequestService.html":{},"injectables/RepoService.html":{},"injectables/UserListStatsService.html":{}}}],["leftjoin(\"users",{"_index":1161,"title":{},"body":{"injectables/ContributionService.html":{},"injectables/EndorsementService.html":{},"injectables/InsightMemberService.html":{},"injectables/UserListService.html":{}}}],["leftjoinandmapmany(\"repo.contributions",{"_index":3626,"title":{},"body":{"injectables/RepoService.html":{}}}],["leftjoinandselect(\"repo.user",{"_index":3624,"title":{},"body":{"injectables/RepoService.html":{}}}],["leftjoinandselect(`insights.repos",{"_index":2983,"title":{},"body":{"injectables/InsightsService.html":{}}}],["leftjoinandselect(dbrepotouserstars",{"_index":3625,"title":{},"body":{"injectables/RepoService.html":{}}}],["length",{"_index":1327,"title":{},"body":{"classes/CreateBlogSummaryDto.html":{},"classes/CreateIssueSummaryDto.html":{},"entities/DbBakedRepo.html":{},"entities/DbCommitAuthors.html":{},"entities/DbCommits.html":{},"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserList.html":{},"entities/DbUserNotification.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{}}}],["less",{"_index":2582,"title":{},"body":{"classes/FilterListContributorsDto.html":{}}}],["letters",{"_index":4239,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["level",{"_index":480,"title":{},"body":{"modules/AppModule.html":{},"classes/CreateLogDto.html":{},"injectables/CustomLogger.html":{},"classes/DatabaseLoggerMiddleware.html":{},"entities/DbLog.html":{}}}],["levelfirst",{"_index":486,"title":{},"body":{"modules/AppModule.html":{}}}],["leverage",{"_index":5478,"title":{},"body":{"index.html":{}}}],["liability",{"_index":5596,"title":{},"body":{"license.html":{}}}],["liable",{"_index":5593,"title":{},"body":{"license.html":{}}}],["lib",{"_index":5472,"title":{},"body":{"index.html":{}}}],["license",{"_index":5551,"title":{"license.html":{}},"body":{"index.html":{},"license.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["limit",{"_index":1043,"title":{},"body":{"classes/ContributionPageMetaDto.html":{},"classes/ContributionPageOptionsDto.html":{},"classes/ContributorPullRequestsDto.html":{},"classes/FilterListContributorsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/FilteredUsersDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{},"injectables/RepoFilterService.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/TopUsersDto.html":{},"classes/UserListMostActiveContributorsDto.html":{},"classes/UserRepoOptionsDto.html":{},"miscellaneous/variables.html":{}}}],["limit(pageoptionsdto.limit",{"_index":1145,"title":{},"body":{"injectables/ContributionService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoService.html":{}}}],["limitation",{"_index":5562,"title":{},"body":{"license.html":{}}}],["limited",{"_index":5585,"title":{},"body":{"license.html":{}}}],["limiting",{"_index":5819,"title":{},"body":{"miscellaneous/variables.html":{}}}],["limiting](#ratelimiting",{"_index":5887,"title":{},"body":{"miscellaneous/variables.html":{}}}],["line",{"_index":150,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"interfaces/ChatResponse.html":{},"injectables/OpenAiService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserListStatsService.html":{}}}],["line_items",{"_index":3941,"title":{},"body":{"injectables/StripeService.html":{}}}],["lines",{"_index":1908,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["linkedin",{"_index":4113,"title":{},"body":{"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{}}}],["linkedin_url",{"_index":674,"title":{},"body":{"controllers/AuthController.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{}}}],["links",{"_index":5889,"title":{},"body":{"miscellaneous/variables.html":{}}}],["linting",{"_index":5491,"title":{},"body":{"index.html":{}}}],["lintthis",{"_index":5494,"title":{},"body":{"index.html":{}}}],["list",{"_index":8,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"modules/AppModule.html":{},"classes/Contributor.html":{},"classes/CreateUserListDto.html":{},"entities/DbRepoLoginContributions.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserListContributorStat.html":{},"entities/DbUserListContributorStat-1.html":{},"classes/FilteredUsersDto.html":{},"controllers/HighlightController.html":{},"classes/TopUsersDto.html":{},"controllers/UserController.html":{},"controllers/UserFollowingController.html":{},"controllers/UserListController.html":{},"modules/UserListModule.html":{},"injectables/UserListService.html":{},"controllers/UserListStatsController.html":{},"injectables/UserListStatsService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["list'})@apibadrequestresponse({description",{"_index":4833,"title":{},"body":{"controllers/UserListController.html":{}}}],["list'})@apibearerauth()@useguards(supabaseguard)@apinotfoundresponse({description",{"_index":4841,"title":{},"body":{"controllers/UserListController.html":{}}}],["list'})@apiokresponse({type",{"_index":4861,"title":{},"body":{"controllers/UserListController.html":{}}}],["list'})@apipaginatedresponse(dbuserhighlight)@apiokresponse({type",{"_index":4865,"title":{},"body":{"controllers/UserListController.html":{}}}],["list'})@apipaginatedresponse(dbuserlistcontributor)@apiokresponse({type",{"_index":4870,"title":{},"body":{"controllers/UserListController.html":{}}}],["list'})@apipaginatedresponse(dbuserlistcontributorstat)@apiokresponse({type",{"_index":5064,"title":{},"body":{"controllers/UserListStatsController.html":{}}}],["list'})@isstring",{"_index":1464,"title":{},"body":{"classes/CreateUserListDto.html":{}}}],["list'})@useguards(supabaseguard)@apibearerauth()@apiokresponse({type",{"_index":2729,"title":{},"body":{"controllers/HighlightController.html":{}}}],["list.controller",{"_index":4935,"title":{},"body":{"modules/UserListModule.html":{}}}],["list.controller.ts",{"_index":4817,"title":{},"body":{"controllers/UserListController.html":{},"coverage.html":{}}}],["list.controller.ts:110",{"_index":4879,"title":{},"body":{"controllers/UserListController.html":{}}}],["list.controller.ts:135",{"_index":4836,"title":{},"body":{"controllers/UserListController.html":{}}}],["list.controller.ts:152",{"_index":4848,"title":{},"body":{"controllers/UserListController.html":{}}}],["list.controller.ts:168",{"_index":4872,"title":{},"body":{"controllers/UserListController.html":{}}}],["list.controller.ts:185",{"_index":4875,"title":{},"body":{"controllers/UserListController.html":{}}}],["list.controller.ts:207",{"_index":4844,"title":{},"body":{"controllers/UserListController.html":{}}}],["list.controller.ts:224",{"_index":4867,"title":{},"body":{"controllers/UserListController.html":{}}}],["list.controller.ts:238",{"_index":4859,"title":{},"body":{"controllers/UserListController.html":{}}}],["list.controller.ts:45",{"_index":4854,"title":{},"body":{"controllers/UserListController.html":{}}}],["list.controller.ts:58",{"_index":4851,"title":{},"body":{"controllers/UserListController.html":{}}}],["list.controller.ts:73",{"_index":4834,"title":{},"body":{"controllers/UserListController.html":{}}}],["list.controller.ts:94",{"_index":4862,"title":{},"body":{"controllers/UserListController.html":{}}}],["list.dto",{"_index":4882,"title":{},"body":{"controllers/UserListController.html":{},"injectables/UserListService.html":{}}}],["list.dto.ts",{"_index":1192,"title":{},"body":{"classes/Contributor.html":{},"classes/CreateUserListDto.html":{},"coverage.html":{}}}],["list.dto.ts:17",{"_index":1465,"title":{},"body":{"classes/CreateUserListDto.html":{}}}],["list.dto.ts:25",{"_index":1463,"title":{},"body":{"classes/CreateUserListDto.html":{}}}],["list.dto.ts:34",{"_index":1462,"title":{},"body":{"classes/CreateUserListDto.html":{}}}],["list.dto.ts:6",{"_index":1193,"title":{},"body":{"classes/Contributor.html":{}}}],["list.dto.ts:7",{"_index":1194,"title":{},"body":{"classes/Contributor.html":{}}}],["list.entity",{"_index":432,"title":{},"body":{"modules/AppModule.html":{},"controllers/UserListController.html":{},"modules/UserListModule.html":{},"injectables/UserListService.html":{},"modules/UserModule.html":{}}}],["list.entity.ts",{"_index":2253,"title":{},"body":{"entities/DbUserList.html":{},"coverage.html":{}}}],["list.entity.ts:103",{"_index":2261,"title":{},"body":{"entities/DbUserList.html":{}}}],["list.entity.ts:30",{"_index":2257,"title":{},"body":{"entities/DbUserList.html":{}}}],["list.entity.ts:41",{"_index":2266,"title":{},"body":{"entities/DbUserList.html":{}}}],["list.entity.ts:51",{"_index":2264,"title":{},"body":{"entities/DbUserList.html":{}}}],["list.entity.ts:58",{"_index":2259,"title":{},"body":{"entities/DbUserList.html":{}}}],["list.entity.ts:65",{"_index":2258,"title":{},"body":{"entities/DbUserList.html":{}}}],["list.entity.ts:75",{"_index":2255,"title":{},"body":{"entities/DbUserList.html":{}}}],["list.entity.ts:85",{"_index":2265,"title":{},"body":{"entities/DbUserList.html":{}}}],["list.entity.ts:95",{"_index":2256,"title":{},"body":{"entities/DbUserList.html":{}}}],["list.is_public",{"_index":5002,"title":{},"body":{"injectables/UserListService.html":{}}}],["list.module",{"_index":428,"title":{},"body":{"modules/AppModule.html":{}}}],["list.module.ts",{"_index":4933,"title":{},"body":{"modules/UserListModule.html":{}}}],["list.name",{"_index":5001,"title":{},"body":{"injectables/UserListService.html":{}}}],["list.service",{"_index":4884,"title":{},"body":{"controllers/UserListController.html":{},"modules/UserListModule.html":{}}}],["list.service.ts",{"_index":4946,"title":{},"body":{"injectables/UserListService.html":{},"coverage.html":{}}}],["list.service.ts:105",{"_index":4973,"title":{},"body":{"injectables/UserListService.html":{}}}],["list.service.ts:116",{"_index":4962,"title":{},"body":{"injectables/UserListService.html":{}}}],["list.service.ts:126",{"_index":4964,"title":{},"body":{"injectables/UserListService.html":{}}}],["list.service.ts:147",{"_index":4971,"title":{},"body":{"injectables/UserListService.html":{}}}],["list.service.ts:162",{"_index":4985,"title":{},"body":{"injectables/UserListService.html":{}}}],["list.service.ts:166",{"_index":4969,"title":{},"body":{"injectables/UserListService.html":{}}}],["list.service.ts:170",{"_index":4975,"title":{},"body":{"injectables/UserListService.html":{}}}],["list.service.ts:21",{"_index":4959,"title":{},"body":{"injectables/UserListService.html":{}}}],["list.service.ts:218",{"_index":4977,"title":{},"body":{"injectables/UserListService.html":{}}}],["list.service.ts:241",{"_index":4979,"title":{},"body":{"injectables/UserListService.html":{}}}],["list.service.ts:280",{"_index":4983,"title":{},"body":{"injectables/UserListService.html":{}}}],["list.service.ts:34",{"_index":4966,"title":{},"body":{"injectables/UserListService.html":{}}}],["list.service.ts:40",{"_index":4965,"title":{},"body":{"injectables/UserListService.html":{}}}],["list.service.ts:46",{"_index":4967,"title":{},"body":{"injectables/UserListService.html":{}}}],["list.service.ts:52",{"_index":4980,"title":{},"body":{"injectables/UserListService.html":{}}}],["list.service.ts:73",{"_index":4982,"title":{},"body":{"injectables/UserListService.html":{}}}],["list.service.ts:94",{"_index":4972,"title":{},"body":{"injectables/UserListService.html":{}}}],["list_id",{"_index":2270,"title":{},"body":{"entities/DbUserListContributor.html":{},"injectables/UserListService.html":{}}}],["list_user",{"_index":2254,"title":{},"body":{"entities/DbUserList.html":{}}}],["listallbakedrepos",{"_index":3093,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["listallbakedrepos(@query",{"_index":3149,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["listallbakedrepos(pageoptionsdto",{"_index":3110,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["listallcommitauthors",{"_index":3094,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["listallcommitauthors(@query",{"_index":3158,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["listallcommitauthors(pageoptionsdto",{"_index":3113,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["listallcommitsbybakedrepoid",{"_index":3095,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["listallcommitsbybakedrepoid(pageoptionsdto",{"_index":3119,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["listallcommitsbycommitauthorid",{"_index":3096,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["listallcommitsbycommitauthorid(pageoptionsdto",{"_index":3124,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["listallpullrequests",{"_index":3207,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["listallpullrequests(@query",{"_index":3232,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["listallpullrequests(pageoptionsdto",{"_index":3218,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["listcontributors",{"_index":4894,"title":{},"body":{"controllers/UserListController.html":{}}}],["listid",{"_index":75,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"classes/PullRequestPageOptionsDto.html":{},"controllers/UserListController.html":{},"injectables/UserListService.html":{},"injectables/UserListStatsService.html":{}}}],["listing",{"_index":2378,"title":{},"body":{"controllers/EmojiController.html":{},"controllers/RepoContributionsController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserRecommendationController.html":{}}}],["lists",{"_index":4818,"title":{},"body":{"controllers/UserListController.html":{},"controllers/UserListStatsController.html":{}}}],["lists'})@apibadrequestresponse({description",{"_index":4853,"title":{},"body":{"controllers/UserListController.html":{}}}],["lists'})@apiokresponse({type",{"_index":4850,"title":{},"body":{"controllers/UserListController.html":{}}}],["lists/dtos/collaborators.dto.ts",{"_index":956,"title":{},"body":{"classes/CollaboratorsDto.html":{},"coverage.html":{}}}],["lists/dtos/collaborators.dto.ts:14",{"_index":963,"title":{},"body":{"classes/CollaboratorsDto.html":{}}}],["lists/dtos/contributions",{"_index":1038,"title":{},"body":{"classes/ContributionPageMetaDto.html":{},"classes/ContributionsByProjectDto.html":{},"classes/ContributionsPageDto.html":{},"classes/ContributionsTimeframeDto.html":{},"coverage.html":{}}}],["lists/dtos/create",{"_index":1191,"title":{},"body":{"classes/Contributor.html":{},"classes/CreateUserListDto.html":{},"coverage.html":{}}}],["lists/dtos/filter",{"_index":2566,"title":{},"body":{"classes/FilterListContributorsDto.html":{},"coverage.html":{}}}],["lists/dtos/most",{"_index":4939,"title":{},"body":{"classes/UserListMostActiveContributorsDto.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["lists/dtos/top",{"_index":4188,"title":{},"body":{"classes/TopProjectsDto.html":{},"coverage.html":{}}}],["lists/entities/contributions",{"_index":1683,"title":{},"body":{"entities/DbContributionStatTimeframe.html":{},"entities/DbContributionsProjects.html":{},"coverage.html":{}}}],["lists/entities/contributors",{"_index":1712,"title":{},"body":{"entities/DbContributorCategoryTimeframe.html":{},"coverage.html":{}}}],["lists/entities/timezones.entity.ts",{"_index":2140,"title":{},"body":{"classes/DbTimezone.html":{},"coverage.html":{}}}],["lists/entities/timezones.entity.ts:8",{"_index":2142,"title":{},"body":{"classes/DbTimezone.html":{}}}],["lists/entities/user",{"_index":431,"title":{},"body":{"modules/AppModule.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserListContributorStat-1.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["lists/user",{"_index":7,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"modules/AppModule.html":{},"controllers/UserListController.html":{},"modules/UserListModule.html":{},"injectables/UserListService.html":{},"controllers/UserListStatsController.html":{},"injectables/UserListStatsService.html":{},"coverage.html":{}}}],["literal",{"_index":846,"title":{},"body":{"interfaces/ChatResponse.html":{},"classes/CreateUserListDto.html":{},"injectables/TierService.html":{}}}],["live",{"_index":5352,"title":{},"body":{"index.html":{}}}],["load",{"_index":437,"title":{},"body":{"modules/AppModule.html":{}}}],["loadrelationcountandmap(\"repo.contributionscount",{"_index":3633,"title":{},"body":{"injectables/RepoService.html":{}}}],["loadrelationcountandmap(\"repo.stargazerscount",{"_index":3636,"title":{},"body":{"injectables/RepoService.html":{}}}],["loadrelationcountandmap(\"repo.starscount",{"_index":3637,"title":{},"body":{"injectables/RepoService.html":{}}}],["loadrelationcountandmap(\"repo.submissionscount",{"_index":3635,"title":{},"body":{"injectables/RepoService.html":{}}}],["loadrelationcountandmap(\"repo.votescount",{"_index":3634,"title":{},"body":{"injectables/RepoService.html":{}}}],["local",{"_index":4095,"title":{},"body":{"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["localhost",{"_index":5692,"title":{},"body":{"miscellaneous/variables.html":{}}}],["locally",{"_index":5392,"title":{},"body":{"index.html":{}}}],["location",{"_index":668,"title":{},"body":{"controllers/AuthController.html":{},"classes/FilterListContributorsDto.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{}}}],["log",{"_index":1472,"title":{},"body":{"injectables/CustomLogger.html":{},"classes/DatabaseLoggerMiddleware.html":{},"injectables/LogService.html":{}}}],["log(level",{"_index":1540,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["log(message",{"_index":1484,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["log.dto",{"_index":3038,"title":{},"body":{"injectables/LogService.html":{}}}],["log.dto.ts",{"_index":1405,"title":{},"body":{"classes/CreateLogDto.html":{},"coverage.html":{}}}],["log.dto.ts:10",{"_index":1409,"title":{},"body":{"classes/CreateLogDto.html":{}}}],["log.dto.ts:14",{"_index":1408,"title":{},"body":{"classes/CreateLogDto.html":{}}}],["log.dto.ts:6",{"_index":1407,"title":{},"body":{"classes/CreateLogDto.html":{}}}],["log.entity",{"_index":3028,"title":{},"body":{"modules/LogModule.html":{},"injectables/LogService.html":{}}}],["log.service",{"_index":1492,"title":{},"body":{"injectables/CustomLogger.html":{},"modules/LogModule.html":{}}}],["log/log.entity",{"_index":384,"title":{},"body":{"modules/AppModule.html":{}}}],["log/log.module",{"_index":435,"title":{},"body":{"modules/AppModule.html":{}}}],["logconnection",{"_index":467,"title":{},"body":{"modules/AppModule.html":{},"modules/LogModule.html":{},"injectables/LogService.html":{}}}],["logger",{"_index":458,"title":{},"body":{"modules/AppModule.html":{},"classes/DatabaseLoggerMiddleware.html":{},"injectables/HttpLoggerMiddleware.html":{},"modules/LogModule.html":{},"controllers/StripeWebhookController.html":{},"injectables/TierService.html":{},"miscellaneous/variables.html":{}}}],["logger(`http",{"_index":2801,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{}}}],["logger(`stripewebhook",{"_index":3997,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["logger(tierservice.name",{"_index":4173,"title":{},"body":{"injectables/TierService.html":{}}}],["logger.middleware",{"_index":362,"title":{},"body":{"modules/AppModule.html":{}}}],["logger.middleware.ts",{"_index":1529,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{},"injectables/HttpLoggerMiddleware.html":{},"coverage.html":{}}}],["logger.middleware.ts:11",{"_index":2800,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{}}}],["logger.middleware.ts:12",{"_index":1546,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["logger.middleware.ts:20",{"_index":1548,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["logger.middleware.ts:28",{"_index":1550,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["logger.middleware.ts:38",{"_index":1544,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["logger.middleware.ts:42",{"_index":1553,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["logger.middleware.ts:46",{"_index":1542,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["logger.middleware.ts:6",{"_index":1539,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["logger.middleware.ts:61",{"_index":1555,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["logger.middleware.ts:9",{"_index":2802,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{}}}],["logger.service",{"_index":1491,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["logger.ts",{"_index":1468,"title":{},"body":{"injectables/CustomLogger.html":{},"coverage.html":{}}}],["logger.ts:19",{"_index":1485,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["logger.ts:29",{"_index":1483,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["logger.ts:39",{"_index":1489,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["logger.ts:49",{"_index":1480,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["logger.ts:59",{"_index":1487,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["logger.ts:8",{"_index":1478,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["loggermodule",{"_index":310,"title":{},"body":{"modules/AppModule.html":{}}}],["loggermodule.forrootasync",{"_index":477,"title":{},"body":{"modules/AppModule.html":{}}}],["logging",{"_index":5658,"title":{},"body":{"miscellaneous/variables.html":{}}}],["logging.certificate",{"_index":475,"title":{},"body":{"modules/AppModule.html":{}}}],["logging.config.ts",{"_index":5305,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["logging.connection",{"_index":468,"title":{},"body":{"modules/AppModule.html":{}}}],["logging.database",{"_index":473,"title":{},"body":{"modules/AppModule.html":{}}}],["logging.host",{"_index":469,"title":{},"body":{"modules/AppModule.html":{}}}],["logging.maxqueryexecutiontime",{"_index":476,"title":{},"body":{"modules/AppModule.html":{}}}],["logging.password",{"_index":472,"title":{},"body":{"modules/AppModule.html":{}}}],["logging.port",{"_index":470,"title":{},"body":{"modules/AppModule.html":{}}}],["logging.username",{"_index":471,"title":{},"body":{"modules/AppModule.html":{}}}],["logic",{"_index":5471,"title":{},"body":{"index.html":{}}}],["login",{"_index":88,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/ContributionService.html":{},"classes/Contributor.html":{},"classes/CreateUserListDto.html":{},"entities/DbContributionStatTimeframe.html":{},"classes/DbFilteredUser.html":{},"entities/DbRepoLoginContributions.html":{},"classes/DbTopUser.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserListContributorStat.html":{},"entities/DbUserListContributorStat-1.html":{},"controllers/RepoContributionsController.html":{},"injectables/RepoService.html":{},"classes/SupabaseAuthDto.html":{},"injectables/TierService.html":{},"injectables/UserListStatsService.html":{}}}],["login'})@apiokresponse({type",{"_index":3473,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["loglevels",{"_index":1494,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["logmigration",{"_index":1532,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["logmigration(message",{"_index":1543,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["logmodule",{"_index":272,"title":{"modules/LogModule.html":{}},"body":{"modules/AppModule.html":{},"modules/LogModule.html":{},"modules.html":{},"overview.html":{}}}],["logquery",{"_index":1533,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["logquery(query",{"_index":1545,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["logqueryerror",{"_index":1534,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["logqueryerror(error",{"_index":1547,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["logqueryslow",{"_index":1535,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["logqueryslow(time",{"_index":1549,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["logs",{"_index":1858,"title":{},"body":{"entities/DbLog.html":{}}}],["logschemabuild",{"_index":1536,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["logschemabuild(message",{"_index":1552,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["logservice",{"_index":1477,"title":{"injectables/LogService.html":{}},"body":{"injectables/CustomLogger.html":{},"modules/LogModule.html":{},"injectables/LogService.html":{},"coverage.html":{},"overview.html":{}}}],["logsrepository",{"_index":3035,"title":{},"body":{"injectables/LogService.html":{}}}],["logsservice",{"_index":1470,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["lookuporg",{"_index":4175,"title":{},"body":{"injectables/TierService.html":{}}}],["lookuporg(`org:${userid",{"_index":4180,"title":{},"body":{"injectables/TierService.html":{}}}],["loops",{"_index":152,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["loops/no",{"_index":151,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["loose",{"_index":5740,"title":{},"body":{"miscellaneous/variables.html":{}}}],["lower(\"open_pull_requests\".\"state",{"_index":3641,"title":{},"body":{"injectables/RepoService.html":{}}}],["machine",{"_index":5440,"title":{},"body":{"index.html":{}}}],["machines",{"_index":5364,"title":{},"body":{"index.html":{}}}],["made",{"_index":2182,"title":{},"body":{"entities/DbUserHighlight.html":{},"miscellaneous/variables.html":{}}}],["main",{"_index":1991,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["main'})@column('text",{"_index":1965,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["make",{"_index":4218,"title":{},"body":{"classes/UpdateUserDto.html":{},"index.html":{}}}],["maker",{"_index":4249,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["maker'})@isstring",{"_index":4233,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["making",{"_index":5503,"title":{},"body":{"index.html":{}}}],["managesubscriptionstatuschange",{"_index":3978,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["managesubscriptionstatuschange(subscriptionid",{"_index":3984,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["many",{"_index":2629,"title":{},"body":{"classes/FollowManyUsersDto.html":{},"controllers/UserFollowsController.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["manytoone",{"_index":1633,"title":{},"body":{"entities/DbCommits.html":{},"entities/DbContribution.html":{},"entities/DbInsight.html":{},"entities/DbInsightRepo.html":{},"entities/DbPullRequestReview.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserNotification.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserTopRepo.html":{}}}],["manytoone(undefined)@joincolumn({name",{"_index":2009,"title":{},"body":{"entities/DbPullRequestReview.html":{}}}],["map",{"_index":3189,"title":{},"body":{"injectables/PizzaOvenService.html":{}}}],["map((notification",{"_index":5159,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["mapping",{"_index":5438,"title":{},"body":{"index.html":{}}}],["markdown",{"_index":766,"title":{},"body":{"controllers/BlogSummaryController.html":{},"classes/CreateBlogSummaryDto.html":{}}}],["markdowndescription",{"_index":5731,"title":{},"body":{"miscellaneous/variables.html":{}}}],["marknotificationsasread",{"_index":5131,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["marknotificationsasread(notificationids",{"_index":5147,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["matches",{"_index":4248,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["matches(/^(?!.*?admin)(?!.*?twitter)\\w{0,15}$/i",{"_index":4250,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["matching",{"_index":240,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"modules/ApiServicesModule.html":{},"modules/AppModule.html":{},"classes/ApplyUserCouponDto.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"classes/BakeRepoDto.html":{},"controllers/BlogSummaryController.html":{},"modules/BlogSummaryModule.html":{},"injectables/BlogSummaryService.html":{},"interfaces/ChatResponse.html":{},"controllers/CodeExplanationController.html":{},"injectables/CodeExplanationService.html":{},"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"controllers/CodeTestSuggestionController.html":{},"injectables/CodeTestSuggestionService.html":{},"classes/CollaboratorsDto.html":{},"classes/CommitAuthorDto.html":{},"injectables/CommitAuthorsService.html":{},"classes/CommitsDto.html":{},"injectables/CommitsService.html":{},"modules/ContributionModule.html":{},"classes/ContributionPageMetaDto.html":{},"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"classes/ContributionsByProjectDto.html":{},"classes/ContributionsPageDto.html":{},"classes/ContributionsTimeframeDto.html":{},"classes/Contributor.html":{},"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"modules/ContributorModule.html":{},"classes/ContributorPullRequestsDto.html":{},"modules/CouponModule.html":{},"injectables/CouponService.html":{},"classes/CreateBlogSummaryDto.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateInsightDto.html":{},"classes/CreateInsightMemberDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/CreateLogDto.html":{},"classes/CreateUserCollaborationDto.html":{},"classes/CreateUserHighlightDto.html":{},"classes/CreateUserListDto.html":{},"injectables/CustomLogger.html":{},"modules/CustomerModule.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"entities/DbBakedRepo.html":{},"entities/DbCommitAuthors.html":{},"entities/DbCommits.html":{},"entities/DbContribution.html":{},"entities/DbContributionStatTimeframe.html":{},"entities/DbContributionsProjects.html":{},"entities/DbContributorCategoryTimeframe.html":{},"entities/DbCoupon.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"classes/DbFilteredUser.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbPullRequestReview.html":{},"entities/DbRepoLoginContributions.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"classes/DbTimezone.html":{},"classes/DbTopUser.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightReactionResponse.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserListContributorStat.html":{},"entities/DbUserListContributorStat-1.html":{},"entities/DbUserNotification.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"controllers/EmojiController.html":{},"modules/EmojiModule.html":{},"injectables/EmojiService.html":{},"controllers/EndorsementController.html":{},"modules/EndorsementModule.html":{},"injectables/EndorsementService.html":{},"guards/EndorsementTokenGuard.html":{},"classes/FilterListContributorsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/FilteredUsersDto.html":{},"classes/FollowManyUsersDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"controllers/HighlightController.html":{},"modules/HighlightModule.html":{},"classes/HighlightOptionsDto.html":{},"injectables/HttpLoggerMiddleware.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"injectables/InsightRepoService.html":{},"modules/InsightsModule.html":{},"injectables/InsightsService.html":{},"controllers/IssueSummaryController.html":{},"modules/IssueSummaryModule.html":{},"injectables/IssueSummaryService.html":{},"modules/LogModule.html":{},"injectables/LogService.html":{},"modules/OpenAiModule.html":{},"injectables/OpenAiService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaParameters.html":{},"classes/PageOptionsDto.html":{},"injectables/PagerService.html":{},"interfaces/PaginationInput.html":{},"controllers/PizzaOvenController.html":{},"modules/PizzaOvenModule.html":{},"injectables/PizzaOvenService.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestInsightsService.html":{},"modules/PullRequestModule.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestReviewService.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"modules/RepoFilterModule.html":{},"injectables/RepoFilterService.html":{},"classes/RepoInfo.html":{},"modules/RepoModule.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"modules/StarModule.html":{},"injectables/StarService.html":{},"modules/StargazeModule.html":{},"injectables/StargazeService.html":{},"modules/StripeModule.html":{},"injectables/StripeService.html":{},"modules/StripeSubscriptionModule.html":{},"injectables/StripeSubscriptionService.html":{},"modules/StripeWebHookModule.html":{},"controllers/StripeWebhookController.html":{},"modules/SubmitModule.html":{},"injectables/SubmitService.html":{},"classes/SupabaseAuthDto.html":{},"injectables/SupabaseGuard.html":{},"injectables/SupabaseStrategy.html":{},"modules/TierModule.html":{},"injectables/TierService.html":{},"classes/TopProjectsDto.html":{},"classes/TopUsersDto.html":{},"classes/UpdateEndorsementDto.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateInsightMemberDto.html":{},"classes/UpdateUserCollaborationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowingController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"modules/UserListModule.html":{},"classes/UserListMostActiveContributorsDto.html":{},"injectables/UserListService.html":{},"controllers/UserListStatsController.html":{},"injectables/UserListStatsService.html":{},"modules/UserModule.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"classes/UserOnboardingDto.html":{},"injectables/UserOrganizationService.html":{},"controllers/UserRecommendationController.html":{},"classes/UserRepoOptionsDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"modules/UserReposModule.html":{},"injectables/UserReposService.html":{},"modules/VoteModule.html":{},"injectables/VoteService.html":{},"classes/VotedRepoDto.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["math.ceil(this.itemcount",{"_index":3066,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["max",{"_index":1339,"title":{},"body":{"classes/CreateBlogSummaryDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/FilterListContributorsDto.html":{},"classes/FilteredUsersDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/TopUsersDto.html":{}}}],["max(10",{"_index":1345,"title":{},"body":{"classes/CreateBlogSummaryDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{}}}],["max(100",{"_index":2593,"title":{},"body":{"classes/FilterListContributorsDto.html":{},"classes/FilteredUsersDto.html":{}}}],["max(10000",{"_index":3075,"title":{},"body":{"classes/PageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/TopUsersDto.html":{}}}],["max(500",{"_index":1343,"title":{},"body":{"classes/CreateBlogSummaryDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{}}}],["maximum",{"_index":816,"title":{},"body":{"injectables/BlogSummaryService.html":{},"injectables/CodeExplanationService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"classes/ContributionPageOptionsDto.html":{},"classes/ContributorPullRequestsDto.html":{},"classes/FilterListContributorsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/FilteredUsersDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"injectables/IssueSummaryService.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"injectables/PullRequestDescriptionService.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/TopUsersDto.html":{},"classes/UserListMostActiveContributorsDto.html":{},"classes/UserRepoOptionsDto.html":{},"miscellaneous/variables.html":{}}}],["maxlength",{"_index":806,"title":{},"body":{"injectables/BlogSummaryService.html":{},"injectables/CodeExplanationService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"classes/CreateUserCollaborationDto.html":{},"classes/CreateUserHighlightDto.html":{},"injectables/IssueSummaryService.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["maxlength(500",{"_index":1425,"title":{},"body":{"classes/CreateUserCollaborationDto.html":{},"classes/CreateUserHighlightDto.html":{}}}],["maxqueryexecutiontime",{"_index":464,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["means",{"_index":1881,"title":{},"body":{"entities/DbPRInsight.html":{}}}],["measured",{"_index":5826,"title":{},"body":{"miscellaneous/variables.html":{}}}],["member",{"_index":1391,"title":{},"body":{"classes/CreateInsightMemberDto.html":{},"entities/DbInsightMember.html":{},"classes/UpdateInsightMemberDto.html":{},"controllers/UserInsightMemberController.html":{}}}],["member'})@apibadrequestresponse({description",{"_index":4719,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["member'})@apibody({type",{"_index":4734,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["member.controller",{"_index":2957,"title":{},"body":{"modules/InsightsModule.html":{}}}],["member.controller.ts",{"_index":4710,"title":{},"body":{"controllers/UserInsightMemberController.html":{},"coverage.html":{}}}],["member.controller.ts:140",{"_index":4736,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["member.controller.ts:178",{"_index":4730,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["member.controller.ts:61",{"_index":4726,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["member.controller.ts:92",{"_index":4721,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["member.dto",{"_index":4738,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["member.dto.ts",{"_index":1390,"title":{},"body":{"classes/CreateInsightMemberDto.html":{},"classes/UpdateInsightMemberDto.html":{},"coverage.html":{}}}],["member.dto.ts:11",{"_index":1394,"title":{},"body":{"classes/CreateInsightMemberDto.html":{}}}],["member.dto.ts:12",{"_index":4209,"title":{},"body":{"classes/UpdateInsightMemberDto.html":{}}}],["member.entity",{"_index":400,"title":{},"body":{"modules/AppModule.html":{},"injectables/InsightMemberService.html":{},"modules/InsightsModule.html":{},"controllers/UserInsightMemberController.html":{}}}],["member.entity.ts",{"_index":1817,"title":{},"body":{"entities/DbInsightMember.html":{},"coverage.html":{}}}],["member.entity.ts:100",{"_index":1836,"title":{},"body":{"entities/DbInsightMember.html":{}}}],["member.entity.ts:110",{"_index":1833,"title":{},"body":{"entities/DbInsightMember.html":{}}}],["member.entity.ts:25",{"_index":1828,"title":{},"body":{"entities/DbInsightMember.html":{}}}],["member.entity.ts:33",{"_index":1830,"title":{},"body":{"entities/DbInsightMember.html":{}}}],["member.entity.ts:41",{"_index":1840,"title":{},"body":{"entities/DbInsightMember.html":{}}}],["member.entity.ts:52",{"_index":1838,"title":{},"body":{"entities/DbInsightMember.html":{}}}],["member.entity.ts:63",{"_index":1824,"title":{},"body":{"entities/DbInsightMember.html":{}}}],["member.entity.ts:73",{"_index":1825,"title":{},"body":{"entities/DbInsightMember.html":{}}}],["member.entity.ts:83",{"_index":1839,"title":{},"body":{"entities/DbInsightMember.html":{}}}],["member.entity.ts:90",{"_index":1826,"title":{},"body":{"entities/DbInsightMember.html":{}}}],["member.service",{"_index":2958,"title":{},"body":{"modules/InsightsModule.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["member.service.ts",{"_index":2857,"title":{},"body":{"injectables/InsightMemberService.html":{},"coverage.html":{}}}],["member.service.ts:13",{"_index":2865,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["member.service.ts:21",{"_index":2870,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["member.service.ts:27",{"_index":2878,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["member.service.ts:41",{"_index":2868,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["member.service.ts:45",{"_index":2882,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["member.service.ts:49",{"_index":2880,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["member.service.ts:53",{"_index":2875,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["member.service.ts:81",{"_index":2877,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["memberid",{"_index":4728,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["members",{"_index":4724,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["memory",{"_index":2685,"title":{},"body":{"controllers/HealthController.html":{}}}],["memory_heap",{"_index":5666,"title":{},"body":{"miscellaneous/variables.html":{}}}],["memory_rss",{"_index":5670,"title":{},"body":{"miscellaneous/variables.html":{}}}],["memoryhealthindicator",{"_index":2681,"title":{},"body":{"controllers/HealthController.html":{}}}],["mentioned",{"_index":812,"title":{},"body":{"injectables/BlogSummaryService.html":{},"injectables/CodeExplanationService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"injectables/IssueSummaryService.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["merchantability",{"_index":5587,"title":{},"body":{"license.html":{}}}],["merge",{"_index":1660,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbPullRequest.html":{},"classes/FilterListContributorsDto.html":{},"license.html":{}}}],["mergeable",{"_index":1898,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["merged",{"_index":1899,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["merged_at",{"_index":1900,"title":{},"body":{"entities/DbPullRequest.html":{},"classes/PullRequestPageOptionsDto.html":{},"miscellaneous/enumerations.html":{}}}],["merged_by_login",{"_index":1901,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["merged_pull_requests\".\"updated_at",{"_index":3645,"title":{},"body":{"injectables/RepoService.html":{}}}],["message",{"_index":850,"title":{},"body":{"interfaces/ChatResponse.html":{},"classes/CreateLogDto.html":{},"classes/CreateUserCollaborationDto.html":{},"injectables/CustomLogger.html":{},"classes/DatabaseLoggerMiddleware.html":{},"entities/DbLog.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserNotification.html":{},"injectables/HttpLoggerMiddleware.html":{},"injectables/OpenAiService.html":{},"classes/UpdateUserDto.html":{},"injectables/UserNotificationService.html":{}}}],["messageformat",{"_index":490,"title":{},"body":{"modules/AppModule.html":{}}}],["messages",{"_index":867,"title":{},"body":{"interfaces/ChatResponse.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"injectables/OpenAiService.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["meta",{"_index":1065,"title":{},"body":{"classes/ContributionPageMetaDto.html":{},"classes/ContributionsPageDto.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaParameters.html":{},"coverage.html":{}}}],["meta.dto",{"_index":1067,"title":{},"body":{"classes/ContributionPageMetaDto.html":{},"injectables/ContributionService.html":{},"classes/ContributionsPageDto.html":{},"injectables/EmojiService.html":{},"injectables/InsightsService.html":{},"classes/PageDto.html":{},"injectables/PagerService.html":{},"interfaces/PaginationInput.html":{},"injectables/PullRequestService.html":{},"injectables/RepoService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserListService.html":{},"injectables/UserNotificationService.html":{},"injectables/UserOrganizationService.html":{}}}],["meta.dto.ts",{"_index":3055,"title":{},"body":{"classes/PageMetaDto.html":{},"coverage.html":{}}}],["meta.dto.ts:10",{"_index":3060,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["meta.dto.ts:17",{"_index":3059,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["meta.dto.ts:24",{"_index":3058,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["meta.dto.ts:31",{"_index":3061,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["meta.dto.ts:37",{"_index":3057,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["meta.dto.ts:43",{"_index":3056,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["meta_id",{"_index":2302,"title":{},"body":{"entities/DbUserNotification.html":{},"injectables/UserNotificationService.html":{}}}],["metadata",{"_index":2103,"title":{},"body":{"entities/DbSubscription.html":{},"injectables/StripeService.html":{},"controllers/StripeWebhookController.html":{},"injectables/TierService.html":{}}}],["method",{"_index":499,"title":{},"body":{"modules/AppModule.html":{},"interfaces/ChatResponse.html":{},"injectables/HttpLoggerMiddleware.html":{},"injectables/OpenAiService.html":{},"miscellaneous/variables.html":{}}}],["methodkey",{"_index":5761,"title":{},"body":{"miscellaneous/variables.html":{}}}],["methods",{"_index":288,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"controllers/BlogSummaryController.html":{},"injectables/BlogSummaryService.html":{},"controllers/CodeExplanationController.html":{},"injectables/CodeExplanationService.html":{},"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"controllers/CodeTestSuggestionController.html":{},"injectables/CodeTestSuggestionService.html":{},"injectables/CommitAuthorsService.html":{},"injectables/CommitsService.html":{},"injectables/ContributionService.html":{},"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"injectables/CouponService.html":{},"injectables/CustomLogger.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"controllers/EmojiController.html":{},"injectables/EmojiService.html":{},"controllers/EndorsementController.html":{},"injectables/EndorsementService.html":{},"guards/EndorsementTokenGuard.html":{},"controllers/HealthController.html":{},"controllers/HighlightController.html":{},"injectables/HttpLoggerMiddleware.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"controllers/IssueSummaryController.html":{},"injectables/IssueSummaryService.html":{},"injectables/LogService.html":{},"injectables/OpenAiService.html":{},"injectables/PagerService.html":{},"controllers/PizzaOvenController.html":{},"injectables/PizzaOvenService.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestReviewService.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"injectables/RepoFilterService.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeService.html":{},"injectables/StripeSubscriptionService.html":{},"controllers/StripeWebhookController.html":{},"injectables/SubmitService.html":{},"injectables/SupabaseStrategy.html":{},"injectables/TierService.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowingController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"injectables/UserListService.html":{},"controllers/UserListStatsController.html":{},"injectables/UserListStatsService.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"injectables/UserOrganizationService.html":{},"controllers/UserRecommendationController.html":{},"injectables/UserReposService.html":{},"injectables/VoteService.html":{}}}],["microservice",{"_index":3130,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["middlewareconsumer",{"_index":291,"title":{},"body":{"modules/AppModule.html":{}}}],["migrations",{"_index":5446,"title":{},"body":{"index.html":{}}}],["migrations.sh",{"_index":5444,"title":{},"body":{"index.html":{}}}],["milestone",{"_index":1449,"title":{},"body":{"classes/CreateUserHighlightDto.html":{}}}],["min",{"_index":1340,"title":{},"body":{"classes/CreateBlogSummaryDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/FilterListContributorsDto.html":{},"classes/FilteredUsersDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/TopUsersDto.html":{}}}],["min(0",{"_index":1344,"title":{},"body":{"classes/CreateBlogSummaryDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{}}}],["min(1",{"_index":2592,"title":{},"body":{"classes/FilterListContributorsDto.html":{},"classes/FilteredUsersDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/TopUsersDto.html":{}}}],["min(100",{"_index":1342,"title":{},"body":{"classes/CreateBlogSummaryDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{}}}],["minimum",{"_index":2591,"title":{},"body":{"classes/FilterListContributorsDto.html":{},"classes/FilteredUsersDto.html":{},"classes/InsightOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/TopUsersDto.html":{},"miscellaneous/enumerations.html":{}}}],["minimumcontributors",{"_index":2910,"title":{},"body":{"classes/InsightOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"miscellaneous/enumerations.html":{}}}],["minlength",{"_index":1421,"title":{},"body":{"classes/CreateUserCollaborationDto.html":{},"classes/CreateUserHighlightDto.html":{},"classes/FilteredUsersDto.html":{}}}],["minlength(20",{"_index":1424,"title":{},"body":{"classes/CreateUserCollaborationDto.html":{}}}],["minlength(3",{"_index":1457,"title":{},"body":{"classes/CreateUserHighlightDto.html":{},"classes/FilteredUsersDto.html":{}}}],["minus",{"_index":3306,"title":{},"body":{"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{}}}],["miscellaneous",{"_index":5333,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["missing",{"_index":5513,"title":{},"body":{"index.html":{}}}],["mit",{"_index":5552,"title":{},"body":{"index.html":{},"license.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["mm",{"_index":3323,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["mocking",{"_index":5482,"title":{},"body":{"index.html":{}}}],["mode",{"_index":3943,"title":{},"body":{"injectables/StripeService.html":{},"index.html":{}}}],["model",{"_index":865,"title":{},"body":{"interfaces/ChatResponse.html":{},"entities/DbBakedRepo.html":{},"entities/DbCommitAuthors.html":{},"entities/DbCommits.html":{},"entities/DbContribution.html":{},"entities/DbContributionStatTimeframe.html":{},"entities/DbContributionsProjects.html":{},"entities/DbContributorCategoryTimeframe.html":{},"entities/DbCoupon.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"classes/DbFilteredUser.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbPullRequestReview.html":{},"entities/DbRepoLoginContributions.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"classes/DbTimezone.html":{},"classes/DbTopUser.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserListContributorStat.html":{},"entities/DbUserListContributorStat-1.html":{},"entities/DbUserNotification.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"injectables/OpenAiService.html":{},"miscellaneous/variables.html":{}}}],["modelname",{"_index":5785,"title":{},"body":{"miscellaneous/variables.html":{}}}],["modify",{"_index":5564,"title":{},"body":{"license.html":{}}}],["module",{"_index":241,"title":{"modules/ApiServicesModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/BlogSummaryModule.html":{},"modules/ContributionModule.html":{},"modules/ContributorModule.html":{},"modules/CouponModule.html":{},"modules/CustomerModule.html":{},"modules/EmojiModule.html":{},"modules/EndorsementModule.html":{},"modules/HealthModule.html":{},"modules/HighlightModule.html":{},"modules/InsightsModule.html":{},"modules/IssueSummaryModule.html":{},"modules/LogModule.html":{},"modules/OpenAiModule.html":{},"modules/PizzaOvenModule.html":{},"modules/PullRequestModule.html":{},"modules/RepoFilterModule.html":{},"modules/RepoModule.html":{},"modules/StarModule.html":{},"modules/StargazeModule.html":{},"modules/StripeModule.html":{},"modules/StripeSubscriptionModule.html":{},"modules/StripeWebHookModule.html":{},"modules/SubmitModule.html":{},"modules/TierModule.html":{},"modules/UserListModule.html":{},"modules/UserModule.html":{},"modules/UserReposModule.html":{},"modules/VoteModule.html":{}},"body":{"modules/ApiServicesModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/BlogSummaryModule.html":{},"modules/ContributionModule.html":{},"modules/ContributorModule.html":{},"modules/CouponModule.html":{},"modules/CustomerModule.html":{},"modules/EmojiModule.html":{},"modules/EndorsementModule.html":{},"modules/HealthModule.html":{},"modules/HighlightModule.html":{},"modules/InsightsModule.html":{},"modules/IssueSummaryModule.html":{},"modules/LogModule.html":{},"modules/OpenAiModule.html":{},"modules/PizzaOvenModule.html":{},"modules/PullRequestModule.html":{},"modules/RepoFilterModule.html":{},"modules/RepoModule.html":{},"modules/StarModule.html":{},"modules/StargazeModule.html":{},"modules/StripeModule.html":{},"modules/StripeSubscriptionModule.html":{},"modules/StripeWebHookModule.html":{},"modules/SubmitModule.html":{},"modules/TierModule.html":{},"modules/UserListModule.html":{},"modules/UserModule.html":{},"modules/UserReposModule.html":{},"modules/VoteModule.html":{}}}],["modules",{"_index":243,"title":{"modules.html":{}},"body":{"modules/ApiServicesModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/BlogSummaryModule.html":{},"modules/ContributionModule.html":{},"modules/ContributorModule.html":{},"modules/CouponModule.html":{},"modules/CustomerModule.html":{},"modules/EmojiModule.html":{},"modules/EndorsementModule.html":{},"modules/HealthModule.html":{},"modules/HighlightModule.html":{},"modules/InsightsModule.html":{},"modules/IssueSummaryModule.html":{},"modules/LogModule.html":{},"modules/OpenAiModule.html":{},"modules/PizzaOvenModule.html":{},"modules/PullRequestModule.html":{},"modules/RepoFilterModule.html":{},"modules/RepoModule.html":{},"modules/StarModule.html":{},"modules/StargazeModule.html":{},"modules/StripeModule.html":{},"modules/StripeSubscriptionModule.html":{},"modules/StripeWebHookModule.html":{},"modules/SubmitModule.html":{},"modules/TierModule.html":{},"modules/UserListModule.html":{},"modules/UserModule.html":{},"modules/UserReposModule.html":{},"modules/VoteModule.html":{},"modules.html":{},"overview.html":{}}}],["month",{"_index":3310,"title":{},"body":{"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{}}}],["months",{"_index":3237,"title":{},"body":{"controllers/PullRequestController.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoService.html":{}}}],["months'})@apiokresponse({type",{"_index":3211,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["more",{"_index":5878,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mostactive",{"_index":2911,"title":{},"body":{"classes/InsightOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"miscellaneous/enumerations.html":{}}}],["mostspammed",{"_index":2912,"title":{},"body":{"classes/InsightOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"miscellaneous/enumerations.html":{}}}],["mote",{"_index":5873,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mountain",{"_index":2599,"title":{},"body":{"classes/FilterListContributorsDto.html":{}}}],["move",{"_index":5469,"title":{},"body":{"index.html":{}}}],["mrpizza",{"_index":4119,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["my_postgres_container",{"_index":5432,"title":{},"body":{"index.html":{}}}],["my_postgres_image",{"_index":5422,"title":{},"body":{"index.html":{}}}],["my_postgres_image:latestthis",{"_index":5436,"title":{},"body":{"index.html":{}}}],["n",{"_index":871,"title":{},"body":{"interfaces/ChatResponse.html":{},"injectables/OpenAiService.html":{}}}],["name",{"_index":295,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"controllers/BlogSummaryController.html":{},"injectables/BlogSummaryService.html":{},"controllers/CodeExplanationController.html":{},"injectables/CodeExplanationService.html":{},"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"controllers/CodeTestSuggestionController.html":{},"injectables/CodeTestSuggestionService.html":{},"injectables/CommitAuthorsService.html":{},"injectables/CommitsService.html":{},"classes/ContributionPageMetaDto.html":{},"injectables/ContributionService.html":{},"classes/ContributionsPageDto.html":{},"classes/Contributor.html":{},"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"injectables/CouponService.html":{},"classes/CreateInsightDto.html":{},"classes/CreateUserListDto.html":{},"injectables/CustomLogger.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"entities/DbBakedRepo.html":{},"entities/DbCommitAuthors.html":{},"entities/DbCommits.html":{},"entities/DbContribution.html":{},"entities/DbContributionStatTimeframe.html":{},"entities/DbContributionsProjects.html":{},"entities/DbContributorCategoryTimeframe.html":{},"entities/DbCoupon.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbPullRequestReview.html":{},"entities/DbRepoLoginContributions.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserListContributorStat.html":{},"entities/DbUserListContributorStat-1.html":{},"entities/DbUserNotification.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"controllers/EmojiController.html":{},"injectables/EmojiService.html":{},"controllers/EndorsementController.html":{},"injectables/EndorsementService.html":{},"guards/EndorsementTokenGuard.html":{},"controllers/HighlightController.html":{},"injectables/HttpLoggerMiddleware.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"controllers/IssueSummaryController.html":{},"injectables/IssueSummaryService.html":{},"injectables/LogService.html":{},"injectables/OpenAiService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"injectables/PagerService.html":{},"controllers/PizzaOvenController.html":{},"injectables/PizzaOvenService.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestReviewService.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"injectables/RepoFilterService.html":{},"classes/RepoInfo.html":{},"classes/RepoPageOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeService.html":{},"injectables/StripeSubscriptionService.html":{},"controllers/StripeWebhookController.html":{},"injectables/SubmitService.html":{},"classes/SupabaseAuthDto.html":{},"injectables/SupabaseStrategy.html":{},"injectables/TierService.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowingController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"injectables/UserListService.html":{},"controllers/UserListStatsController.html":{},"injectables/UserListStatsService.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"injectables/UserOrganizationService.html":{},"controllers/UserRecommendationController.html":{},"injectables/UserReposService.html":{},"injectables/VoteService.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["named",{"_index":5437,"title":{},"body":{"index.html":{}}}],["names",{"_index":1439,"title":{},"body":{"classes/CreateUserHighlightDto.html":{},"entities/DbPullRequest.html":{},"entities/DbUserHighlight.html":{}}}],["navigating",{"_index":5396,"title":{},"body":{"index.html":{}}}],["ncommit",{"_index":3267,"title":{},"body":{"injectables/PullRequestDescriptionService.html":{}}}],["need",{"_index":5359,"title":{},"body":{"index.html":{}}}],["needs",{"_index":5476,"title":{},"body":{"index.html":{}}}],["nestfactory.create(appmodule",{"_index":5726,"title":{},"body":{"miscellaneous/variables.html":{}}}],["nestjs",{"_index":311,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/SupabaseStrategy.html":{},"controllers/UserCollaborationController.html":{},"properties.html":{}}}],["nestjs/axios",{"_index":307,"title":{},"body":{"modules/AppModule.html":{},"modules/PizzaOvenModule.html":{},"injectables/PizzaOvenService.html":{}}}],["nestjs/common",{"_index":19,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"modules/ApiServicesModule.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/BlogSummaryController.html":{},"modules/BlogSummaryModule.html":{},"injectables/BlogSummaryService.html":{},"interfaces/ChatResponse.html":{},"controllers/CodeExplanationController.html":{},"injectables/CodeExplanationService.html":{},"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"controllers/CodeTestSuggestionController.html":{},"injectables/CodeTestSuggestionService.html":{},"injectables/CommitAuthorsService.html":{},"injectables/CommitsService.html":{},"modules/ContributionModule.html":{},"injectables/ContributionService.html":{},"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"modules/ContributorModule.html":{},"modules/CouponModule.html":{},"injectables/CouponService.html":{},"injectables/CustomLogger.html":{},"modules/CustomerModule.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"controllers/EmojiController.html":{},"modules/EmojiModule.html":{},"injectables/EmojiService.html":{},"controllers/EndorsementController.html":{},"modules/EndorsementModule.html":{},"injectables/EndorsementService.html":{},"guards/EndorsementTokenGuard.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"controllers/HighlightController.html":{},"modules/HighlightModule.html":{},"injectables/HttpLoggerMiddleware.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightRepoService.html":{},"modules/InsightsModule.html":{},"injectables/InsightsService.html":{},"controllers/IssueSummaryController.html":{},"modules/IssueSummaryModule.html":{},"injectables/IssueSummaryService.html":{},"modules/LogModule.html":{},"injectables/LogService.html":{},"modules/OpenAiModule.html":{},"injectables/OpenAiService.html":{},"injectables/PagerService.html":{},"interfaces/PaginationInput.html":{},"controllers/PizzaOvenController.html":{},"modules/PizzaOvenModule.html":{},"injectables/PizzaOvenService.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestInsightsService.html":{},"modules/PullRequestModule.html":{},"injectables/PullRequestReviewService.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"modules/RepoFilterModule.html":{},"injectables/RepoFilterService.html":{},"modules/RepoModule.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"modules/StarModule.html":{},"injectables/StarService.html":{},"modules/StargazeModule.html":{},"injectables/StargazeService.html":{},"modules/StripeModule.html":{},"injectables/StripeService.html":{},"modules/StripeSubscriptionModule.html":{},"injectables/StripeSubscriptionService.html":{},"modules/StripeWebHookModule.html":{},"controllers/StripeWebhookController.html":{},"modules/SubmitModule.html":{},"injectables/SubmitService.html":{},"injectables/SupabaseGuard.html":{},"injectables/SupabaseStrategy.html":{},"modules/TierModule.html":{},"injectables/TierService.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowingController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"modules/UserListModule.html":{},"injectables/UserListService.html":{},"controllers/UserListStatsController.html":{},"injectables/UserListStatsService.html":{},"modules/UserModule.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"injectables/UserOrganizationService.html":{},"controllers/UserRecommendationController.html":{},"modules/UserReposModule.html":{},"injectables/UserReposService.html":{},"modules/VoteModule.html":{},"injectables/VoteService.html":{}}}],["nestjs/common/services/console",{"_index":1490,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["nestjs/common/utils/cli",{"_index":318,"title":{},"body":{"modules/AppModule.html":{},"classes/DatabaseLoggerMiddleware.html":{},"injectables/HttpLoggerMiddleware.html":{}}}],["nestjs/config",{"_index":305,"title":{},"body":{"modules/AppModule.html":{},"interfaces/ChatResponse.html":{},"injectables/CustomLogger.html":{},"guards/EndorsementTokenGuard.html":{},"controllers/HealthController.html":{},"modules/LogModule.html":{},"injectables/OpenAiService.html":{},"injectables/PizzaOvenService.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoService.html":{},"injectables/StripeService.html":{},"controllers/StripeWebhookController.html":{},"injectables/TierService.html":{}}}],["nestjs/passport",{"_index":734,"title":{},"body":{"modules/AuthModule.html":{},"injectables/SupabaseGuard.html":{},"injectables/SupabaseStrategy.html":{}}}],["nestjs/swagger",{"_index":520,"title":{},"body":{"classes/ApplyUserCouponDto.html":{},"controllers/AuthController.html":{},"classes/BakeRepoDto.html":{},"controllers/BlogSummaryController.html":{},"controllers/CodeExplanationController.html":{},"controllers/CodeRefactorSuggestionController.html":{},"controllers/CodeTestSuggestionController.html":{},"classes/CollaboratorsDto.html":{},"classes/CommitAuthorDto.html":{},"classes/CommitsDto.html":{},"classes/ContributionPageMetaDto.html":{},"classes/ContributionPageOptionsDto.html":{},"classes/ContributionsByProjectDto.html":{},"classes/ContributionsPageDto.html":{},"classes/ContributionsTimeframeDto.html":{},"classes/Contributor.html":{},"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"classes/ContributorPullRequestsDto.html":{},"classes/CreateBlogSummaryDto.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateInsightDto.html":{},"classes/CreateInsightMemberDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/CreateUserCollaborationDto.html":{},"classes/CreateUserHighlightDto.html":{},"classes/CreateUserListDto.html":{},"entities/DbBakedRepo.html":{},"entities/DbCommitAuthors.html":{},"entities/DbCommits.html":{},"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbInsight.html":{},"entities/DbInsightRepo.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightReactionResponse.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserNotification.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"controllers/EmojiController.html":{},"controllers/EndorsementController.html":{},"classes/FilterListContributorsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/FilteredUsersDto.html":{},"classes/FollowManyUsersDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"controllers/HealthController.html":{},"controllers/HighlightController.html":{},"classes/HighlightOptionsDto.html":{},"controllers/InsightController.html":{},"classes/InsightOptionsDto.html":{},"controllers/IssueSummaryController.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{},"controllers/PizzaOvenController.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"classes/PullRequestPageOptionsDto.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"classes/RepoInfo.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/StripeWebhookController.html":{},"classes/SupabaseAuthDto.html":{},"classes/TopProjectsDto.html":{},"classes/TopUsersDto.html":{},"classes/UpdateEndorsementDto.html":{},"classes/UpdateInsightMemberDto.html":{},"classes/UpdateUserCollaborationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"controllers/UserFollowingController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"classes/UserListMostActiveContributorsDto.html":{},"controllers/UserListStatsController.html":{},"controllers/UserNotificationController.html":{},"classes/UserOnboardingDto.html":{},"controllers/UserRecommendationController.html":{},"classes/UserRepoOptionsDto-1.html":{},"classes/VotedRepoDto.html":{}}}],["nestjs/swagger/dist/decorators/api",{"_index":1594,"title":{},"body":{"entities/DbBakedRepo.html":{},"entities/DbCommitAuthors.html":{},"entities/DbCommits.html":{},"entities/DbContribution.html":{},"entities/DbContributionStatTimeframe.html":{},"entities/DbContributionsProjects.html":{},"entities/DbContributorCategoryTimeframe.html":{},"entities/DbCoupon.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"classes/DbFilteredUser.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbPullRequestReview.html":{},"entities/DbRepoLoginContributions.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"classes/DbTimezone.html":{},"classes/DbTopUser.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserListContributorStat.html":{},"entities/DbUserListContributorStat-1.html":{},"entities/DbUserNotification.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{}}}],["nestjs/terminus",{"_index":309,"title":{},"body":{"modules/AppModule.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{}}}],["nestjs/typeorm",{"_index":24,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"modules/AppModule.html":{},"injectables/CommitAuthorsService.html":{},"injectables/CommitsService.html":{},"modules/ContributionModule.html":{},"injectables/ContributionService.html":{},"modules/ContributorModule.html":{},"modules/CouponModule.html":{},"injectables/CouponService.html":{},"modules/CustomerModule.html":{},"injectables/CustomerService.html":{},"modules/EmojiModule.html":{},"injectables/EmojiService.html":{},"modules/EndorsementModule.html":{},"injectables/EndorsementService.html":{},"modules/HighlightModule.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightRepoService.html":{},"modules/InsightsModule.html":{},"injectables/InsightsService.html":{},"modules/LogModule.html":{},"injectables/LogService.html":{},"modules/PizzaOvenModule.html":{},"injectables/PizzaOvenService.html":{},"injectables/PullRequestInsightsService.html":{},"modules/PullRequestModule.html":{},"injectables/PullRequestReviewService.html":{},"injectables/PullRequestService.html":{},"modules/RepoModule.html":{},"injectables/RepoService.html":{},"modules/StarModule.html":{},"injectables/StarService.html":{},"modules/StargazeModule.html":{},"injectables/StargazeService.html":{},"modules/StripeSubscriptionModule.html":{},"injectables/StripeSubscriptionService.html":{},"modules/SubmitModule.html":{},"injectables/SubmitService.html":{},"injectables/UserCollaborationService.html":{},"injectables/UserFollowService.html":{},"injectables/UserHighlightsService.html":{},"modules/UserListModule.html":{},"injectables/UserListService.html":{},"injectables/UserListStatsService.html":{},"modules/UserModule.html":{},"injectables/UserNotificationService.html":{},"injectables/UserOrganizationService.html":{},"modules/UserReposModule.html":{},"injectables/UserReposService.html":{},"modules/VoteModule.html":{},"injectables/VoteService.html":{}}}],["nestjs/typeorm/dist/interfaces/typeorm",{"_index":315,"title":{},"body":{"modules/AppModule.html":{}}}],["nestlogger",{"_index":1556,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["nestlogger(name",{"_index":1559,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["nestmiddleware",{"_index":2803,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{}}}],["never",{"_index":4139,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["new",{"_index":102,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"controllers/BlogSummaryController.html":{},"interfaces/ChatResponse.html":{},"controllers/CodeExplanationController.html":{},"controllers/CodeRefactorSuggestionController.html":{},"controllers/CodeTestSuggestionController.html":{},"injectables/CommitAuthorsService.html":{},"injectables/CommitsService.html":{},"injectables/ContributionService.html":{},"controllers/ContributorInsightsController.html":{},"injectables/CouponService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"entities/DbContributorCategoryTimeframe.html":{},"injectables/EmojiService.html":{},"controllers/EndorsementController.html":{},"injectables/EndorsementService.html":{},"injectables/HttpLoggerMiddleware.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightsService.html":{},"controllers/IssueSummaryController.html":{},"injectables/OpenAiService.html":{},"injectables/PagerService.html":{},"interfaces/PaginationInput.html":{},"controllers/PizzaOvenController.html":{},"injectables/PizzaOvenService.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoService.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeService.html":{},"controllers/StripeWebhookController.html":{},"injectables/SubmitService.html":{},"injectables/TierService.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"injectables/UserFollowService.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"classes/UserListMostActiveContributorsDto.html":{},"injectables/UserListService.html":{},"injectables/UserListStatsService.html":{},"injectables/UserNotificationService.html":{},"injectables/UserOrganizationService.html":{},"injectables/UserReposService.html":{},"injectables/VoteService.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["newcount",{"_index":170,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["newcountquerybuilder",{"_index":167,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["newcountquerybuilder.getcount",{"_index":171,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["newcountquerybuilder.innerjoin",{"_index":168,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["newcustomer",{"_index":704,"title":{},"body":{"controllers/AuthController.html":{}}}],["newcustomer.stripe_customer_id",{"_index":707,"title":{},"body":{"controllers/AuthController.html":{}}}],["newer",{"_index":3410,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["newhighlight",{"_index":4678,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["newinsight",{"_index":4786,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["newinsightmember",{"_index":4754,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["newkey",{"_index":5411,"title":{},"body":{"index.html":{}}}],["newlist",{"_index":4892,"title":{},"body":{"controllers/UserListController.html":{}}}],["newlog",{"_index":3040,"title":{},"body":{"injectables/LogService.html":{}}}],["newpullrequestcontributors",{"_index":1235,"title":{},"body":{"controllers/ContributorInsightsController.html":{}}}],["newpullrequestcontributors(pageoptionsdto",{"_index":1252,"title":{},"body":{"controllers/ContributorInsightsController.html":{}}}],["newuserhighlight",{"_index":4669,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["newuserlist",{"_index":4999,"title":{},"body":{"injectables/UserListService.html":{}}}],["newuserlistcontributor",{"_index":5006,"title":{},"body":{"injectables/UserListService.html":{}}}],["newuserrepo",{"_index":5240,"title":{},"body":{"injectables/UserReposService.html":{}}}],["next",{"_index":149,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"interfaces/ChatResponse.html":{},"classes/ContributionPageMetaDto.html":{},"injectables/HttpLoggerMiddleware.html":{},"injectables/OpenAiService.html":{},"classes/PageMetaDto.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserListStatsService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["nextfunction",{"_index":2799,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{}}}],["node>=16.7.0",{"_index":5365,"title":{},"body":{"index.html":{}}}],["node_id",{"_index":1948,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["nodes",{"_index":5415,"title":{},"body":{"index.html":{}}}],["non",{"_index":937,"title":{},"body":{"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{}}}],["noninfringement",{"_index":5591,"title":{},"body":{"license.html":{}}}],["note",{"_index":5418,"title":{},"body":{"index.html":{}}}],["notfoundexception",{"_index":18,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/CommitAuthorsService.html":{},"injectables/CommitsService.html":{},"injectables/ContributionService.html":{},"injectables/CouponService.html":{},"injectables/EndorsementService.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightsService.html":{},"injectables/PizzaOvenService.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/RepoService.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/SubmitService.html":{},"injectables/UserCollaborationService.html":{},"injectables/UserFollowService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserListService.html":{},"injectables/UserListStatsService.html":{},"injectables/UserReposService.html":{},"injectables/VoteService.html":{}}}],["notfoundexception(\"the",{"_index":1304,"title":{},"body":{"injectables/CouponService.html":{}}}],["notfoundexception(\"user",{"_index":5010,"title":{},"body":{"injectables/UserListService.html":{}}}],["notfoundexception(\"you",{"_index":3888,"title":{},"body":{"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/SubmitService.html":{},"injectables/UserFollowService.html":{},"injectables/VoteService.html":{}}}],["notice",{"_index":5577,"title":{},"body":{"license.html":{}}}],["notifcation.service",{"_index":4443,"title":{},"body":{"injectables/UserFollowService.html":{},"injectables/UserHighlightsService.html":{},"modules/UserModule.html":{},"controllers/UserNotificationController.html":{}}}],["notifcation.service.ts",{"_index":5126,"title":{},"body":{"injectables/UserNotificationService.html":{},"coverage.html":{}}}],["notifcation.service.ts:13",{"_index":5133,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["notifcation.service.ts:20",{"_index":5144,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["notifcation.service.ts:26",{"_index":5146,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["notifcation.service.ts:52",{"_index":5142,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["notifcation.service.ts:63",{"_index":5136,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["notifcation.service.ts:75",{"_index":5140,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["notifcation.service.ts:87",{"_index":5138,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["notifcation.service.ts:99",{"_index":5148,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["notification",{"_index":2309,"title":{},"body":{"entities/DbUserNotification.html":{},"classes/SupabaseAuthDto.html":{}}}],["notification.constants",{"_index":2325,"title":{},"body":{"entities/DbUserNotification.html":{},"injectables/UserNotificationService.html":{}}}],["notification.constants.ts",{"_index":5328,"title":{},"body":{"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["notification.controller",{"_index":5114,"title":{},"body":{"modules/UserModule.html":{}}}],["notification.controller.ts",{"_index":5118,"title":{},"body":{"controllers/UserNotificationController.html":{},"coverage.html":{}}}],["notification.controller.ts:25",{"_index":5122,"title":{},"body":{"controllers/UserNotificationController.html":{}}}],["notification.entity",{"_index":411,"title":{},"body":{"modules/AppModule.html":{},"modules/UserModule.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{}}}],["notification.entity.ts",{"_index":2299,"title":{},"body":{"entities/DbUserNotification.html":{},"coverage.html":{}}}],["notification.entity.ts:18",{"_index":2310,"title":{},"body":{"entities/DbUserNotification.html":{}}}],["notification.entity.ts:26",{"_index":2324,"title":{},"body":{"entities/DbUserNotification.html":{}}}],["notification.entity.ts:34",{"_index":2308,"title":{},"body":{"entities/DbUserNotification.html":{}}}],["notification.entity.ts:45",{"_index":2323,"title":{},"body":{"entities/DbUserNotification.html":{}}}],["notification.entity.ts:55",{"_index":2313,"title":{},"body":{"entities/DbUserNotification.html":{}}}],["notification.entity.ts:65",{"_index":2318,"title":{},"body":{"entities/DbUserNotification.html":{}}}],["notification.entity.ts:74",{"_index":2320,"title":{},"body":{"entities/DbUserNotification.html":{}}}],["notification.entity.ts:84",{"_index":2316,"title":{},"body":{"entities/DbUserNotification.html":{}}}],["notification.entity.ts:92",{"_index":2306,"title":{},"body":{"entities/DbUserNotification.html":{}}}],["notification.id",{"_index":5160,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["notification.read_at",{"_index":5158,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["notification_count",{"_index":676,"title":{},"body":{"controllers/AuthController.html":{},"classes/SupabaseAuthDto.html":{}}}],["notificationids",{"_index":5149,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["notificationids.map(async",{"_index":5174,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["notifications",{"_index":4682,"title":{},"body":{"injectables/UserHighlightsService.html":{},"controllers/UserNotificationController.html":{}}}],["notified_at",{"_index":2303,"title":{},"body":{"entities/DbUserNotification.html":{},"injectables/UserNotificationService.html":{}}}],["now",{"_index":98,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/CouponService.html":{},"entities/DbContribution.html":{},"entities/DbCoupon.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbPullRequestReview.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserNotification.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"injectables/RepoFilterService.html":{},"injectables/RepoService.html":{},"controllers/UserFollowsController.html":{},"injectables/UserListStatsService.html":{}}}],["npm",{"_index":5450,"title":{},"body":{"index.html":{}}}],["npm>=8.0.0",{"_index":5366,"title":{},"body":{"index.html":{}}}],["null",{"_index":235,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/CouponService.html":{},"entities/DbPullRequest.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightsService.html":{},"injectables/UserCollaborationService.html":{},"injectables/UserFollowService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserListService.html":{},"injectables/UserListStatsService.html":{},"classes/UserRepoOptionsDto-1.html":{},"injectables/UserReposService.html":{},"injectables/VoteService.html":{},"classes/VotedRepoDto.html":{}}}],["number",{"_index":13,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"controllers/AuthController.html":{},"injectables/BlogSummaryService.html":{},"interfaces/ChatResponse.html":{},"injectables/CodeExplanationService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"classes/CollaboratorsDto.html":{},"injectables/CommitAuthorsService.html":{},"injectables/CommitsService.html":{},"classes/ContributionPageMetaDto.html":{},"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"classes/ContributionsByProjectDto.html":{},"classes/ContributionsTimeframeDto.html":{},"classes/Contributor.html":{},"classes/ContributorPullRequestsDto.html":{},"classes/CreateBlogSummaryDto.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/CreateUserListDto.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"entities/DbBakedRepo.html":{},"entities/DbCommitAuthors.html":{},"entities/DbCommits.html":{},"entities/DbContribution.html":{},"entities/DbContributionStatTimeframe.html":{},"entities/DbContributionsProjects.html":{},"entities/DbContributorCategoryTimeframe.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbPullRequestReview.html":{},"entities/DbRepoLoginContributions.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserListContributorStat.html":{},"entities/DbUserListContributorStat-1.html":{},"entities/DbUserNotification.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"injectables/EndorsementService.html":{},"classes/FilterListContributorsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/FilteredUsersDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"controllers/HighlightController.html":{},"classes/HighlightOptionsDto.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"injectables/IssueSummaryService.html":{},"injectables/OpenAiService.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaParameters.html":{},"classes/PageOptionsDto.html":{},"controllers/PizzaOvenController.html":{},"injectables/PizzaOvenService.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"controllers/PullRequestController.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestInsightsService.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestReviewService.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"injectables/RepoFilterService.html":{},"classes/RepoInfo.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeService.html":{},"injectables/SubmitService.html":{},"classes/SupabaseAuthDto.html":{},"injectables/TierService.html":{},"classes/TopProjectsDto.html":{},"classes/TopUsersDto.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserEndorsementController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"classes/UserListMostActiveContributorsDto.html":{},"injectables/UserListService.html":{},"injectables/UserListStatsService.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"injectables/UserOrganizationService.html":{},"controllers/UserRecommendationController.html":{},"classes/UserRepoOptionsDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"injectables/UserReposService.html":{},"injectables/VoteService.html":{},"classes/VotedRepoDto.html":{},"miscellaneous/variables.html":{}}}],["number(highlight.user_id",{"_index":4589,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["number(insight.user.id",{"_index":2853,"title":{},"body":{"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{}}}],["number(parsefloat(process.env.disk_percengate",{"_index":5674,"title":{},"body":{"miscellaneous/variables.html":{}}}],["number(parseint(process.env.disk_size",{"_index":5677,"title":{},"body":{"miscellaneous/variables.html":{}}}],["number(parseint(process.env.memory_heap",{"_index":5667,"title":{},"body":{"miscellaneous/variables.html":{}}}],["number(parseint(process.env.memory_rss",{"_index":5671,"title":{},"body":{"miscellaneous/variables.html":{}}}],["number(parseint(process.env.typeorm_max_query_execution_time_api",{"_index":5702,"title":{},"body":{"miscellaneous/variables.html":{}}}],["number(parseint(process.env.typeorm_max_query_execution_time_logging",{"_index":5711,"title":{},"body":{"miscellaneous/variables.html":{}}}],["numbers",{"_index":4240,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["numerical",{"_index":1878,"title":{},"body":{"entities/DbPRInsight.html":{}}}],["oas3",{"_index":5621,"title":{},"body":{"properties.html":{}}}],["object",{"_index":3535,"title":{},"body":{"injectables/RepoFilterService.html":{},"controllers/StripeWebhookController.html":{},"injectables/UserHighlightsService.html":{}}}],["objectliteral",{"_index":3085,"title":{},"body":{"injectables/PagerService.html":{},"interfaces/PaginationInput.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/RepoFilterService.html":{},"injectables/RepoService.html":{}}}],["objects",{"_index":1198,"title":{},"body":{"classes/Contributor.html":{},"classes/CreateInsightDto.html":{},"classes/CreateUserListDto.html":{},"classes/UpdateInsightDto.html":{}}}],["obtain",{"_index":5399,"title":{},"body":{"index.html":{}}}],["obtaining",{"_index":5559,"title":{},"body":{"license.html":{}}}],["oct",{"_index":3307,"title":{},"body":{"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{}}}],["octo",{"_index":5548,"title":{},"body":{"index.html":{}}}],["october",{"_index":3298,"title":{},"body":{"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{}}}],["offset(pageoptionsdto.skip",{"_index":1144,"title":{},"body":{"injectables/ContributionService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoService.html":{}}}],["omittype",{"_index":4565,"title":{},"body":{"controllers/UserHighlightsController.html":{},"controllers/UserNotificationController.html":{}}}],["omittype(dbuserhighlight",{"_index":4570,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["omittype(dbusernotification",{"_index":5124,"title":{},"body":{"controllers/UserNotificationController.html":{}}}],["onboarded",{"_index":4108,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["onboarding",{"_index":581,"title":{},"body":{"controllers/AuthController.html":{},"classes/UserRepoOptionsDto-1.html":{},"classes/VotedRepoDto.html":{}}}],["onboarding.dto",{"_index":639,"title":{},"body":{"controllers/AuthController.html":{}}}],["onboarding.dto.ts",{"_index":5178,"title":{},"body":{"classes/UserOnboardingDto.html":{},"coverage.html":{}}}],["onboarding.dto.ts:12",{"_index":5179,"title":{},"body":{"classes/UserOnboardingDto.html":{}}}],["onboarding.dto.ts:20",{"_index":5181,"title":{},"body":{"classes/UserOnboardingDto.html":{}}}],["once",{"_index":5377,"title":{},"body":{"index.html":{}}}],["ondelete",{"_index":1810,"title":{},"body":{"entities/DbInsight.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserList.html":{}}}],["onetomany",{"_index":1591,"title":{},"body":{"entities/DbBakedRepo.html":{},"entities/DbCommitAuthors.html":{},"entities/DbEmoji.html":{},"entities/DbInsight.html":{},"entities/DbUserHighlight.html":{}}}],["open",{"_index":420,"title":{},"body":{"modules/AppModule.html":{},"modules/BlogSummaryModule.html":{},"injectables/BlogSummaryService.html":{},"injectables/CodeExplanationService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"classes/CreateInsightDto.html":{},"classes/CreateUserHighlightDto.html":{},"entities/DbContributionsProjects.html":{},"entities/DbInsight.html":{},"entities/DbInsightRepo.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbUserHighlight.html":{},"classes/DbUserHighlightReactionResponse.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserRepo.html":{},"classes/FilterOptionsDto.html":{},"controllers/HealthController.html":{},"classes/HighlightOptionsDto.html":{},"modules/IssueSummaryModule.html":{},"injectables/IssueSummaryService.html":{},"modules/OpenAiModule.html":{},"classes/PullRequestContributorOptionsDto.html":{},"injectables/PullRequestDescriptionService.html":{},"modules/PullRequestModule.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoInfo.html":{},"injectables/RepoService.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"license.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["open_pull_requests",{"_index":3640,"title":{},"body":{"injectables/RepoService.html":{}}}],["open_pull_requests\".\"repo_id",{"_index":3642,"title":{},"body":{"injectables/RepoService.html":{}}}],["open_pull_requests\".\"updated_at",{"_index":3643,"title":{},"body":{"injectables/RepoService.html":{}}}],["openaiconfig",{"_index":325,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["openaimodule",{"_index":273,"title":{"modules/OpenAiModule.html":{}},"body":{"modules/AppModule.html":{},"modules/BlogSummaryModule.html":{},"modules/IssueSummaryModule.html":{},"modules/OpenAiModule.html":{},"modules/PullRequestModule.html":{},"modules.html":{},"overview.html":{}}}],["openaiservice",{"_index":801,"title":{"injectables/OpenAiService.html":{}},"body":{"injectables/BlogSummaryService.html":{},"interfaces/ChatResponse.html":{},"injectables/CodeExplanationService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"injectables/IssueSummaryService.html":{},"modules/OpenAiModule.html":{},"injectables/OpenAiService.html":{},"injectables/PullRequestDescriptionService.html":{},"coverage.html":{},"overview.html":{}}}],["openapi",{"_index":5501,"title":{},"body":{"index.html":{}}}],["opening",{"_index":5500,"title":{},"body":{"index.html":{}}}],["opensauced",{"_index":1710,"title":{},"body":{"entities/DbContributionsProjects.html":{},"controllers/EndorsementController.html":{},"guards/EndorsementTokenGuard.html":{},"classes/SupabaseAuthDto.html":{},"injectables/TierService.html":{},"classes/UpdateUserDto.html":{}}}],["opensauced'})@isstring()@isoptional",{"_index":4221,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["opensauced.pizza\"}`).tostring",{"_index":5725,"title":{},"body":{"miscellaneous/variables.html":{}}}],["openssl",{"_index":5409,"title":{},"body":{"index.html":{}}}],["operationid",{"_index":645,"title":{},"body":{"controllers/AuthController.html":{},"controllers/BlogSummaryController.html":{},"controllers/CodeExplanationController.html":{},"controllers/CodeRefactorSuggestionController.html":{},"controllers/CodeTestSuggestionController.html":{},"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"controllers/EmojiController.html":{},"controllers/EndorsementController.html":{},"controllers/HealthController.html":{},"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"controllers/IssueSummaryController.html":{},"controllers/PizzaOvenController.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"controllers/UserFollowingController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"controllers/UserListStatsController.html":{},"controllers/UserNotificationController.html":{},"controllers/UserRecommendationController.html":{}}}],["operationidfactory",{"_index":5759,"title":{},"body":{"miscellaneous/variables.html":{}}}],["option",{"_index":748,"title":{},"body":{"classes/BakeRepoDto.html":{}}}],["optional",{"_index":296,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"controllers/BlogSummaryController.html":{},"injectables/BlogSummaryService.html":{},"controllers/CodeExplanationController.html":{},"injectables/CodeExplanationService.html":{},"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"controllers/CodeTestSuggestionController.html":{},"injectables/CodeTestSuggestionService.html":{},"injectables/CommitAuthorsService.html":{},"injectables/CommitsService.html":{},"classes/ContributionPageMetaDto.html":{},"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"classes/ContributionsByProjectDto.html":{},"classes/ContributionsPageDto.html":{},"classes/ContributionsTimeframeDto.html":{},"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"classes/ContributorPullRequestsDto.html":{},"injectables/CouponService.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateLogDto.html":{},"classes/CreateUserHighlightDto.html":{},"injectables/CustomLogger.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"entities/DbContribution.html":{},"entities/DbCoupon.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"classes/DbFilteredUser.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbPullRequestReview.html":{},"entities/DbRepoLoginContributions.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"classes/DbTopUser.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightReactionResponse.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserListContributorStat.html":{},"entities/DbUserListContributorStat-1.html":{},"entities/DbUserNotification.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"controllers/EmojiController.html":{},"injectables/EmojiService.html":{},"controllers/EndorsementController.html":{},"injectables/EndorsementService.html":{},"guards/EndorsementTokenGuard.html":{},"classes/FilterListContributorsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/FilteredUsersDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"controllers/HighlightController.html":{},"classes/HighlightOptionsDto.html":{},"injectables/HttpLoggerMiddleware.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"controllers/IssueSummaryController.html":{},"injectables/IssueSummaryService.html":{},"injectables/LogService.html":{},"injectables/OpenAiService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{},"injectables/PagerService.html":{},"controllers/PizzaOvenController.html":{},"injectables/PizzaOvenService.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestInsightsService.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestReviewService.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"injectables/RepoFilterService.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeService.html":{},"injectables/StripeSubscriptionService.html":{},"controllers/StripeWebhookController.html":{},"injectables/SubmitService.html":{},"classes/SupabaseAuthDto.html":{},"injectables/SupabaseStrategy.html":{},"injectables/TierService.html":{},"classes/TopProjectsDto.html":{},"classes/TopUsersDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowingController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"classes/UserListMostActiveContributorsDto.html":{},"injectables/UserListService.html":{},"controllers/UserListStatsController.html":{},"injectables/UserListStatsService.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"injectables/UserOrganizationService.html":{},"controllers/UserRecommendationController.html":{},"classes/UserRepoOptionsDto.html":{},"injectables/UserReposService.html":{},"injectables/VoteService.html":{}}}],["options",{"_index":74,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"modules/AppModule.html":{},"injectables/BlogSummaryService.html":{},"injectables/CodeExplanationService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"injectables/CustomLogger.html":{},"injectables/IssueSummaryService.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/RepoFilterService.html":{},"controllers/UserListStatsController.html":{},"injectables/UserListStatsService.html":{},"miscellaneous/variables.html":{}}}],["options.blogmarkdown",{"_index":831,"title":{},"body":{"injectables/BlogSummaryService.html":{}}}],["options.blogtitle}\\n\\nblog",{"_index":830,"title":{},"body":{"injectables/BlogSummaryService.html":{}}}],["options.build",{"_index":5758,"title":{},"body":{"miscellaneous/variables.html":{}}}],["options.code}\\n",{"_index":909,"title":{},"body":{"injectables/CodeExplanationService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{}}}],["options.commitmessages",{"_index":3266,"title":{},"body":{"injectables/PullRequestDescriptionService.html":{}}}],["options.commitmessages.join",{"_index":3268,"title":{},"body":{"injectables/PullRequestDescriptionService.html":{}}}],["options.contributortype",{"_index":139,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["options.descriptionlength",{"_index":910,"title":{},"body":{"injectables/CodeExplanationService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["options.diff",{"_index":3264,"title":{},"body":{"injectables/PullRequestDescriptionService.html":{}}}],["options.diff}\\n",{"_index":3265,"title":{},"body":{"injectables/PullRequestDescriptionService.html":{}}}],["options.dto",{"_index":989,"title":{},"body":{"injectables/CommitAuthorsService.html":{},"injectables/CommitsService.html":{},"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"controllers/ContributorController.html":{},"classes/ContributorPullRequestsDto.html":{},"classes/DbUserHighlightReactionResponse.html":{},"controllers/EmojiController.html":{},"injectables/EmojiService.html":{},"controllers/EndorsementController.html":{},"injectables/EndorsementService.html":{},"classes/FilterOptionsDto.html":{},"controllers/HighlightController.html":{},"classes/HighlightOptionsDto.html":{},"injectables/InsightMemberService.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"injectables/InsightsService.html":{},"interfaces/PageMetaParameters.html":{},"injectables/PagerService.html":{},"interfaces/PaginationInput.html":{},"controllers/PizzaOvenController.html":{},"injectables/PizzaOvenService.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"controllers/PullRequestController.html":{},"injectables/PullRequestInsightsService.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"injectables/RepoFilterService.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"classes/UserListMostActiveContributorsDto.html":{},"injectables/UserListService.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"injectables/UserOrganizationService.html":{},"controllers/UserRecommendationController.html":{},"classes/UserRepoOptionsDto.html":{},"injectables/UserReposService.html":{}}}],["options.dto.ts",{"_index":1072,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/DbUserHighlightReactionResponse.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/UserRepoOptionsDto.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["options.dto.ts:13",{"_index":2795,"title":{},"body":{"classes/HighlightOptionsDto.html":{}}}],["options.dto.ts:14",{"_index":2610,"title":{},"body":{"classes/FilterOptionsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{}}}],["options.dto.ts:17",{"_index":3070,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["options.dto.ts:19",{"_index":3583,"title":{},"body":{"classes/RepoSearchOptionsDto.html":{}}}],["options.dto.ts:21",{"_index":1083,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/InsightOptionsDto.html":{}}}],["options.dto.ts:22",{"_index":2615,"title":{},"body":{"classes/FilterOptionsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{}}}],["options.dto.ts:25",{"_index":2243,"title":{},"body":{"classes/DbUserHighlightReactionResponse.html":{}}}],["options.dto.ts:26",{"_index":2904,"title":{},"body":{"classes/InsightOptionsDto.html":{}}}],["options.dto.ts:27",{"_index":3350,"title":{},"body":{"classes/PullRequestPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{}}}],["options.dto.ts:30",{"_index":2612,"title":{},"body":{"classes/FilterOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{}}}],["options.dto.ts:32",{"_index":3584,"title":{},"body":{"classes/RepoSearchOptionsDto.html":{}}}],["options.dto.ts:34",{"_index":2908,"title":{},"body":{"classes/InsightOptionsDto.html":{}}}],["options.dto.ts:35",{"_index":2614,"title":{},"body":{"classes/FilterOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{}}}],["options.dto.ts:37",{"_index":3572,"title":{},"body":{"classes/RepoPageOptionsDto.html":{}}}],["options.dto.ts:39",{"_index":2905,"title":{},"body":{"classes/InsightOptionsDto.html":{}}}],["options.dto.ts:43",{"_index":3356,"title":{},"body":{"classes/PullRequestPageOptionsDto.html":{}}}],["options.dto.ts:46",{"_index":3072,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["options.dto.ts:51",{"_index":3351,"title":{},"body":{"classes/PullRequestPageOptionsDto.html":{}}}],["options.dto.ts:56",{"_index":3352,"title":{},"body":{"classes/PullRequestPageOptionsDto.html":{}}}],["options.dto.ts:57",{"_index":3071,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["options.dto.ts:59",{"_index":3073,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["options.dto.ts:64",{"_index":3355,"title":{},"body":{"classes/PullRequestPageOptionsDto.html":{}}}],["options.dto.ts:72",{"_index":3344,"title":{},"body":{"classes/PullRequestPageOptionsDto.html":{}}}],["options.dto.ts:80",{"_index":3346,"title":{},"body":{"classes/PullRequestPageOptionsDto.html":{}}}],["options.filter",{"_index":3542,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["options.interface",{"_index":316,"title":{},"body":{"modules/AppModule.html":{}}}],["options.issuecomments",{"_index":3023,"title":{},"body":{"injectables/IssueSummaryService.html":{}}}],["options.issuedescription}\\nissue",{"_index":3022,"title":{},"body":{"injectables/IssueSummaryService.html":{}}}],["options.issuetitle}\\nissue",{"_index":3021,"title":{},"body":{"injectables/IssueSummaryService.html":{}}}],["options.range",{"_index":79,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["options.repo",{"_index":3537,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["options.repo_id",{"_index":81,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["options.repoids",{"_index":3329,"title":{},"body":{"injectables/PullRequestInsightsService.html":{},"injectables/RepoFilterService.html":{}}}],["options.repoids.split",{"_index":3330,"title":{},"body":{"injectables/PullRequestInsightsService.html":{},"injectables/RepoFilterService.html":{}}}],["options.summarylength",{"_index":835,"title":{},"body":{"injectables/BlogSummaryService.html":{},"injectables/IssueSummaryService.html":{}}}],["options.temperature",{"_index":837,"title":{},"body":{"injectables/BlogSummaryService.html":{},"injectables/CodeExplanationService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"injectables/IssueSummaryService.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["options.tone",{"_index":836,"title":{},"body":{"injectables/BlogSummaryService.html":{},"injectables/IssueSummaryService.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["options.topic",{"_index":3316,"title":{},"body":{"injectables/PullRequestInsightsService.html":{},"injectables/RepoFilterService.html":{}}}],["order",{"_index":1741,"title":{},"body":{"entities/DbEmoji.html":{},"injectables/RepoFilterService.html":{},"index.html":{}}}],["orderby",{"_index":1073,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"entities/DbBakedRepo.html":{},"entities/DbCommitAuthors.html":{},"entities/DbCommits.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/UserListMostActiveContributorsDto.html":{},"injectables/UserListService.html":{}}}],["orderby(\"endorsements.created_at",{"_index":2533,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["orderby(\"insights.updated_at",{"_index":2997,"title":{},"body":{"injectables/InsightsService.html":{}}}],["orderby(\"user_collaborations.updated_at",{"_index":4334,"title":{},"body":{"injectables/UserCollaborationService.html":{}}}],["orderby(\"user_highlights.updated_at",{"_index":4651,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["orderby(\"user_lists.updated_at",{"_index":4997,"title":{},"body":{"injectables/UserListService.html":{}}}],["orderby(\"user_notifications.notified_at",{"_index":5156,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["orderby(\"user_organizations.created_at",{"_index":5192,"title":{},"body":{"injectables/UserOrganizationService.html":{}}}],["orderby(\"users.name",{"_index":2901,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["orderby(`\"repo\".\"is_fork",{"_index":3658,"title":{},"body":{"injectables/RepoService.html":{}}}],["orderdirection",{"_index":1074,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/ContributorPullRequestsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/UserListMostActiveContributorsDto.html":{},"classes/UserRepoOptionsDto.html":{}}}],["orderdirectionenum",{"_index":1089,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"classes/ContributorPullRequestsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"classes/UserListMostActiveContributorsDto.html":{},"classes/UserRepoOptionsDto.html":{},"miscellaneous/enumerations.html":{}}}],["orderdirectionenum.asc",{"_index":3659,"title":{},"body":{"injectables/RepoService.html":{}}}],["orderdirectionenum.desc",{"_index":1090,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"classes/ContributorPullRequestsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"classes/UserListMostActiveContributorsDto.html":{},"classes/UserRepoOptionsDto.html":{}}}],["orderfield",{"_index":1138,"title":{},"body":{"injectables/ContributionService.html":{},"injectables/RepoService.html":{}}}],["org",{"_index":1706,"title":{},"body":{"entities/DbContributionsProjects.html":{},"controllers/EndorsementController.html":{}}}],["org/repo",{"_index":1704,"title":{},"body":{"entities/DbContributionsProjects.html":{}}}],["org_id",{"_index":188,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"entities/DbContributionsProjects.html":{},"injectables/UserListStatsService.html":{}}}],["organization",{"_index":2335,"title":{},"body":{"entities/DbUserOrganization.html":{}}}],["organization.entity",{"_index":415,"title":{},"body":{"modules/AppModule.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserOrganizationService.html":{}}}],["organization.entity.ts",{"_index":2330,"title":{},"body":{"entities/DbUserOrganization.html":{},"coverage.html":{}}}],["organization.entity.ts:26",{"_index":2336,"title":{},"body":{"entities/DbUserOrganization.html":{}}}],["organization.entity.ts:34",{"_index":2341,"title":{},"body":{"entities/DbUserOrganization.html":{}}}],["organization.entity.ts:42",{"_index":2337,"title":{},"body":{"entities/DbUserOrganization.html":{}}}],["organization.entity.ts:52",{"_index":2333,"title":{},"body":{"entities/DbUserOrganization.html":{}}}],["organization.entity.ts:59",{"_index":2334,"title":{},"body":{"entities/DbUserOrganization.html":{}}}],["organization.entity.ts:67",{"_index":2340,"title":{},"body":{"entities/DbUserOrganization.html":{}}}],["organization.entity.ts:75",{"_index":2339,"title":{},"body":{"entities/DbUserOrganization.html":{}}}],["organization.service",{"_index":4381,"title":{},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{}}}],["organization.service.ts",{"_index":5182,"title":{},"body":{"injectables/UserOrganizationService.html":{},"coverage.html":{}}}],["organization.service.ts:11",{"_index":5184,"title":{},"body":{"injectables/UserOrganizationService.html":{}}}],["organization.service.ts:17",{"_index":5186,"title":{},"body":{"injectables/UserOrganizationService.html":{}}}],["organization.service.ts:23",{"_index":5187,"title":{},"body":{"injectables/UserOrganizationService.html":{}}}],["organization_id",{"_index":2331,"title":{},"body":{"entities/DbUserOrganization.html":{}}}],["organization_user",{"_index":2332,"title":{},"body":{"entities/DbUserOrganization.html":{},"injectables/UserOrganizationService.html":{}}}],["orgs",{"_index":4350,"title":{},"body":{"controllers/UserController.html":{},"controllers/UserRecommendationController.html":{}}}],["orgs'})@apibearerauth()@apipaginatedresponse(dbrepo)@apiokresponse({type",{"_index":5200,"title":{},"body":{"controllers/UserRecommendationController.html":{}}}],["origin",{"_index":1672,"title":{},"body":{"entities/DbContribution.html":{}}}],["originalurl",{"_index":2811,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{}}}],["orwhere",{"_index":2991,"title":{},"body":{"injectables/InsightsService.html":{}}}],["orwhere(\"lower(users.login",{"_index":2540,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["os.${string(config.get(\"api.codename\")).tolowercase",{"_index":479,"title":{},"body":{"modules/AppModule.html":{}}}],["otherwise",{"_index":5600,"title":{},"body":{"license.html":{}}}],["out",{"_index":251,"title":{},"body":{"modules/ApiServicesModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/BlogSummaryModule.html":{},"modules/ContributionModule.html":{},"modules/ContributorModule.html":{},"modules/CouponModule.html":{},"modules/CustomerModule.html":{},"modules/EmojiModule.html":{},"modules/EndorsementModule.html":{},"modules/HighlightModule.html":{},"modules/InsightsModule.html":{},"modules/IssueSummaryModule.html":{},"modules/LogModule.html":{},"modules/OpenAiModule.html":{},"modules/PizzaOvenModule.html":{},"modules/PullRequestModule.html":{},"modules/RepoFilterModule.html":{},"modules/RepoModule.html":{},"modules/StarModule.html":{},"modules/StargazeModule.html":{},"modules/StripeModule.html":{},"modules/StripeSubscriptionModule.html":{},"modules/StripeWebHookModule.html":{},"modules/SubmitModule.html":{},"modules/TierModule.html":{},"modules/UserListModule.html":{},"modules/UserModule.html":{},"modules/UserReposModule.html":{},"modules/VoteModule.html":{},"index.html":{},"license.html":{},"overview.html":{}}}],["outside",{"_index":939,"title":{},"body":{"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{}}}],["oven",{"_index":2941,"title":{},"body":{"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"controllers/PizzaOvenController.html":{}}}],["oven.controller",{"_index":3174,"title":{},"body":{"modules/PizzaOvenModule.html":{}}}],["oven.controller.ts",{"_index":3091,"title":{},"body":{"controllers/PizzaOvenController.html":{},"coverage.html":{}}}],["oven.controller.ts:103",{"_index":3109,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["oven.controller.ts:115",{"_index":3123,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["oven.controller.ts:130",{"_index":3127,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["oven.controller.ts:41",{"_index":3132,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["oven.controller.ts:57",{"_index":3102,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["oven.controller.ts:68",{"_index":3112,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["oven.controller.ts:80",{"_index":3106,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["oven.controller.ts:91",{"_index":3118,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["oven.module",{"_index":427,"title":{},"body":{"modules/AppModule.html":{},"modules/InsightsModule.html":{}}}],["oven.module.ts",{"_index":3173,"title":{},"body":{"modules/PizzaOvenModule.html":{}}}],["oven.service",{"_index":2927,"title":{},"body":{"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"controllers/PizzaOvenController.html":{},"modules/PizzaOvenModule.html":{}}}],["oven.service.ts",{"_index":3176,"title":{},"body":{"injectables/PizzaOvenService.html":{},"coverage.html":{}}}],["oven.service.ts:15",{"_index":3180,"title":{},"body":{"injectables/PizzaOvenService.html":{}}}],["oven.service.ts:24",{"_index":3182,"title":{},"body":{"injectables/PizzaOvenService.html":{}}}],["oven.service.ts:30",{"_index":3187,"title":{},"body":{"injectables/PizzaOvenService.html":{}}}],["oven.service.ts:42",{"_index":3185,"title":{},"body":{"injectables/PizzaOvenService.html":{}}}],["oven.service.ts:56",{"_index":3184,"title":{},"body":{"injectables/PizzaOvenService.html":{}}}],["over",{"_index":2584,"title":{},"body":{"classes/FilterListContributorsDto.html":{},"controllers/PullRequestController.html":{},"miscellaneous/variables.html":{}}}],["overview",{"_index":5609,"title":{"overview.html":{}},"body":{"overview.html":{},"miscellaneous/variables.html":{}}}],["overviews",{"_index":5542,"title":{},"body":{"index.html":{}}}],["owner",{"_index":2437,"title":{},"body":{"controllers/EndorsementController.html":{},"injectables/EndorsementService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{}}}],["owneroruser",{"_index":2538,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["owner}/${repo",{"_index":3652,"title":{},"body":{"injectables/RepoService.html":{}}}],["owner}/${repo}`.tolowercase",{"_index":2541,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["p",{"_index":5433,"title":{},"body":{"index.html":{}}}],["package",{"_index":5615,"title":{"properties.html":{}},"body":{}}],["package.json",{"_index":5515,"title":{},"body":{"index.html":{}}}],["page",{"_index":1044,"title":{},"body":{"classes/ContributionPageMetaDto.html":{},"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"classes/ContributorPullRequestsDto.html":{},"classes/CreateInsightDto.html":{},"entities/DbInsight.html":{},"classes/FilterListContributorsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/FilteredUsersDto.html":{},"classes/HighlightOptionsDto.html":{},"controllers/InsightController.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"injectables/InsightsService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaParameters.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"controllers/PullRequestController.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"classes/TopUsersDto.html":{},"classes/UpdateInsightDto.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"classes/UserListMostActiveContributorsDto.html":{},"classes/UserRepoOptionsDto.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["page.dto",{"_index":53,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["page.dto.ts",{"_index":1172,"title":{},"body":{"classes/ContributionsPageDto.html":{},"coverage.html":{}}}],["page.dto.ts:11",{"_index":1179,"title":{},"body":{"classes/ContributionsPageDto.html":{}}}],["page.dto.ts:16",{"_index":1175,"title":{},"body":{"classes/ContributionsPageDto.html":{}}}],["pagecount",{"_index":1045,"title":{},"body":{"classes/ContributionPageMetaDto.html":{},"classes/PageMetaDto.html":{}}}],["pagedto",{"_index":25,"title":{"classes/PageDto.html":{}},"body":{"interfaces/AllContributionsCount.html":{},"injectables/CommitAuthorsService.html":{},"injectables/CommitsService.html":{},"injectables/ContributionService.html":{},"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"injectables/EmojiService.html":{},"controllers/HighlightController.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightsService.html":{},"classes/PageDto.html":{},"injectables/PagerService.html":{},"interfaces/PaginationInput.html":{},"controllers/PizzaOvenController.html":{},"injectables/PizzaOvenService.html":{},"controllers/PullRequestController.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"injectables/UserListService.html":{},"controllers/UserListStatsController.html":{},"injectables/UserListStatsService.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"injectables/UserOrganizationService.html":{},"injectables/UserReposService.html":{},"coverage.html":{}}}],["pagedto(entities",{"_index":1148,"title":{},"body":{"injectables/ContributionService.html":{},"injectables/EmojiService.html":{},"injectables/InsightsService.html":{},"injectables/PagerService.html":{},"interfaces/PaginationInput.html":{},"injectables/PullRequestService.html":{},"injectables/RepoService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserNotificationService.html":{},"injectables/UserOrganizationService.html":{}}}],["pagees",{"_index":4104,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["pagemeta.dto",{"_index":51,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["pagemeta.dto.ts",{"_index":1039,"title":{},"body":{"classes/ContributionPageMetaDto.html":{},"coverage.html":{}}}],["pagemeta.dto.ts:11",{"_index":1048,"title":{},"body":{"classes/ContributionPageMetaDto.html":{}}}],["pagemetadto",{"_index":125,"title":{"classes/PageMetaDto.html":{}},"body":{"interfaces/AllContributionsCount.html":{},"classes/ContributionPageMetaDto.html":{},"injectables/ContributionService.html":{},"classes/ContributionsPageDto.html":{},"injectables/EmojiService.html":{},"injectables/InsightsService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"injectables/PagerService.html":{},"interfaces/PaginationInput.html":{},"injectables/PullRequestService.html":{},"injectables/RepoService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserListService.html":{},"injectables/UserListStatsService.html":{},"injectables/UserNotificationService.html":{},"injectables/UserOrganizationService.html":{},"coverage.html":{}}}],["pagemetadto:10",{"_index":1062,"title":{},"body":{"classes/ContributionPageMetaDto.html":{}}}],["pagemetadto:17",{"_index":1060,"title":{},"body":{"classes/ContributionPageMetaDto.html":{}}}],["pagemetadto:24",{"_index":1058,"title":{},"body":{"classes/ContributionPageMetaDto.html":{}}}],["pagemetadto:31",{"_index":1064,"title":{},"body":{"classes/ContributionPageMetaDto.html":{}}}],["pagemetadto:37",{"_index":1055,"title":{},"body":{"classes/ContributionPageMetaDto.html":{}}}],["pagemetadto:43",{"_index":1053,"title":{},"body":{"classes/ContributionPageMetaDto.html":{}}}],["pagemetadto})@validatenested()@type(undefined",{"_index":1181,"title":{},"body":{"classes/ContributionsPageDto.html":{},"classes/PageDto.html":{}}}],["pagemetaparameters",{"_index":1047,"title":{"interfaces/PageMetaParameters.html":{}},"body":{"classes/ContributionPageMetaDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaParameters.html":{},"coverage.html":{}}}],["pageoptionsdto",{"_index":119,"title":{"classes/PageOptionsDto.html":{}},"body":{"interfaces/AllContributionsCount.html":{},"injectables/CommitAuthorsService.html":{},"injectables/CommitsService.html":{},"classes/ContributionPageMetaDto.html":{},"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"classes/ContributorPullRequestsDto.html":{},"classes/DbUserHighlightReactionResponse.html":{},"controllers/EmojiController.html":{},"injectables/EmojiService.html":{},"controllers/EndorsementController.html":{},"injectables/EndorsementService.html":{},"classes/FilterOptionsDto.html":{},"controllers/HighlightController.html":{},"classes/HighlightOptionsDto.html":{},"injectables/InsightMemberService.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"injectables/InsightsService.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaParameters.html":{},"classes/PageOptionsDto.html":{},"injectables/PagerService.html":{},"interfaces/PaginationInput.html":{},"controllers/PizzaOvenController.html":{},"injectables/PizzaOvenService.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"controllers/PullRequestController.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"classes/UserListMostActiveContributorsDto.html":{},"injectables/UserListService.html":{},"controllers/UserListStatsController.html":{},"injectables/UserListStatsService.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"injectables/UserOrganizationService.html":{},"controllers/UserRecommendationController.html":{},"classes/UserRepoOptionsDto.html":{},"injectables/UserReposService.html":{},"coverage.html":{}}}],["pageoptionsdto.contributor",{"_index":5020,"title":{},"body":{"injectables/UserListService.html":{}}}],["pageoptionsdto.contributor.tolowercase",{"_index":5022,"title":{},"body":{"injectables/UserListService.html":{}}}],["pageoptionsdto.contributortype",{"_index":107,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["pageoptionsdto.limit",{"_index":3063,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["pageoptionsdto.orderby",{"_index":1139,"title":{},"body":{"injectables/ContributionService.html":{},"injectables/RepoService.html":{}}}],["pageoptionsdto.orderdirection",{"_index":1142,"title":{},"body":{"injectables/ContributionService.html":{},"injectables/RepoService.html":{},"injectables/UserListService.html":{}}}],["pageoptionsdto.page",{"_index":3062,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["pageoptionsdto.range",{"_index":101,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/PullRequestService.html":{},"injectables/RepoService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserListService.html":{},"injectables/UserListStatsService.html":{}}}],["pageoptionsdto.rangetype",{"_index":3419,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["pageoptionsdto.repo",{"_index":3664,"title":{},"body":{"injectables/RepoService.html":{},"injectables/UserHighlightsService.html":{}}}],["pageoptionsdto.repoids",{"_index":3663,"title":{},"body":{"injectables/RepoService.html":{}}}],["pageoptionsdto.repoids?.split",{"_index":3433,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["pageoptionsdto.topic",{"_index":3421,"title":{},"body":{"injectables/PullRequestService.html":{},"injectables/RepoService.html":{}}}],["pageoptionsdto:17",{"_index":1094,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/ContributorPullRequestsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/UserListMostActiveContributorsDto.html":{},"classes/UserRepoOptionsDto.html":{}}}],["pageoptionsdto:24",{"_index":3200,"title":{},"body":{"classes/PullRequestContributorInsightsDto.html":{}}}],["pageoptionsdto:30",{"_index":1088,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/ContributorPullRequestsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/UserListMostActiveContributorsDto.html":{},"classes/UserRepoOptionsDto.html":{}}}],["pageoptionsdto:35",{"_index":1092,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/ContributorPullRequestsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/UserListMostActiveContributorsDto.html":{},"classes/UserRepoOptionsDto.html":{}}}],["pageoptionsdto:46",{"_index":1102,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/ContributorPullRequestsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/UserListMostActiveContributorsDto.html":{},"classes/UserRepoOptionsDto.html":{}}}],["pageoptionsdto:57",{"_index":1100,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/ContributorPullRequestsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/UserListMostActiveContributorsDto.html":{},"classes/UserRepoOptionsDto.html":{}}}],["pager.service",{"_index":256,"title":{},"body":{"modules/ApiServicesModule.html":{}}}],["pagerservice",{"_index":248,"title":{"injectables/PagerService.html":{}},"body":{"modules/ApiServicesModule.html":{},"injectables/CommitAuthorsService.html":{},"injectables/CommitsService.html":{},"injectables/EndorsementService.html":{},"injectables/InsightMemberService.html":{},"injectables/PagerService.html":{},"interfaces/PaginationInput.html":{},"injectables/PizzaOvenService.html":{},"injectables/UserCollaborationService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserListService.html":{},"injectables/UserReposService.html":{},"coverage.html":{},"overview.html":{}}}],["pages",{"_index":1063,"title":{},"body":{"classes/ContributionPageMetaDto.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"classes/PageMetaDto.html":{}}}],["paginate",{"_index":4346,"title":{},"body":{"controllers/UserController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["paginated",{"_index":1217,"title":{},"body":{"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"controllers/EmojiController.html":{},"controllers/EndorsementController.html":{},"controllers/HighlightController.html":{},"controllers/PizzaOvenController.html":{},"controllers/PullRequestController.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"controllers/UserListStatsController.html":{},"controllers/UserRecommendationController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["paginates",{"_index":1210,"title":{},"body":{"controllers/ContributorController.html":{},"controllers/EmojiController.html":{},"controllers/EndorsementController.html":{},"controllers/HighlightController.html":{},"controllers/PizzaOvenController.html":{},"controllers/PullRequestController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserEndorsementController.html":{}}}],["paginating",{"_index":3455,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["pagination",{"_index":5841,"title":{},"body":{"miscellaneous/variables.html":{}}}],["paginationinput",{"_index":3081,"title":{"interfaces/PaginationInput.html":{}},"body":{"injectables/PagerService.html":{},"interfaces/PaginationInput.html":{},"coverage.html":{}}}],["pair",{"_index":5403,"title":{},"body":{"index.html":{}}}],["param",{"_index":2452,"title":{},"body":{"controllers/EndorsementController.html":{},"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"controllers/PizzaOvenController.html":{},"controllers/PullRequestController.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"injectables/RepoFilterService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserController.html":{},"controllers/UserFollowingController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"controllers/UserListStatsController.html":{}}}],["param(\"emojiid",{"_index":4588,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["param(\"id",{"_index":2776,"title":{},"body":{"controllers/HighlightController.html":{},"controllers/PizzaOvenController.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"controllers/UserListStatsController.html":{}}}],["param(\"login",{"_index":3493,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["param(\"memberid",{"_index":4760,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["param(\"owner",{"_index":2474,"title":{},"body":{"controllers/EndorsementController.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{}}}],["param(\"repo",{"_index":2475,"title":{},"body":{"controllers/EndorsementController.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{}}}],["param(\"repoowneroruser",{"_index":2471,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["param(\"userlistcontributorid",{"_index":4923,"title":{},"body":{"controllers/UserListController.html":{}}}],["param(\"username",{"_index":2485,"title":{},"body":{"controllers/EndorsementController.html":{},"controllers/UserController.html":{},"controllers/UserFollowsController.html":{}}}],["parameters",{"_index":294,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"controllers/BlogSummaryController.html":{},"injectables/BlogSummaryService.html":{},"controllers/CodeExplanationController.html":{},"injectables/CodeExplanationService.html":{},"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"controllers/CodeTestSuggestionController.html":{},"injectables/CodeTestSuggestionService.html":{},"injectables/CommitAuthorsService.html":{},"injectables/CommitsService.html":{},"classes/ContributionPageMetaDto.html":{},"injectables/ContributionService.html":{},"classes/ContributionsPageDto.html":{},"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"injectables/CouponService.html":{},"injectables/CustomLogger.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"controllers/EmojiController.html":{},"injectables/EmojiService.html":{},"controllers/EndorsementController.html":{},"injectables/EndorsementService.html":{},"guards/EndorsementTokenGuard.html":{},"controllers/HighlightController.html":{},"injectables/HttpLoggerMiddleware.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"controllers/IssueSummaryController.html":{},"injectables/IssueSummaryService.html":{},"injectables/LogService.html":{},"injectables/OpenAiService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"injectables/PagerService.html":{},"controllers/PizzaOvenController.html":{},"injectables/PizzaOvenService.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestReviewService.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"injectables/RepoFilterService.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeService.html":{},"injectables/StripeSubscriptionService.html":{},"controllers/StripeWebhookController.html":{},"injectables/SubmitService.html":{},"injectables/SupabaseStrategy.html":{},"injectables/TierService.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowingController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"injectables/UserListService.html":{},"controllers/UserListStatsController.html":{},"injectables/UserListStatsService.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"injectables/UserOrganizationService.html":{},"controllers/UserRecommendationController.html":{},"injectables/UserReposService.html":{},"injectables/VoteService.html":{}}}],["parameters.dto",{"_index":1066,"title":{},"body":{"classes/ContributionPageMetaDto.html":{},"classes/PageMetaDto.html":{}}}],["parameters.dto.ts",{"_index":3069,"title":{},"body":{"interfaces/PageMetaParameters.html":{},"coverage.html":{}}}],["parseint(`${countqueryresult?.count",{"_index":3431,"title":{},"body":{"injectables/PullRequestService.html":{},"injectables/RepoService.html":{},"injectables/UserHighlightsService.html":{}}}],["parseint(`${uuid",{"_index":4000,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["parseint(request.user?.user_metadata.sub",{"_index":5902,"title":{},"body":{"miscellaneous/variables.html":{}}}],["parseint8",{"_index":442,"title":{},"body":{"modules/AppModule.html":{}}}],["parseintpipe",{"_index":2759,"title":{},"body":{"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"controllers/PizzaOvenController.html":{},"controllers/PullRequestController.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["partial",{"_index":659,"title":{},"body":{"controllers/AuthController.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightsService.html":{},"injectables/StripeSubscriptionService.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"injectables/UserListService.html":{},"injectables/UserNotificationService.html":{}}}],["partialtype",{"_index":4199,"title":{},"body":{"classes/UpdateEndorsementDto.html":{}}}],["partialtype(createendorsementdto",{"_index":4200,"title":{},"body":{"classes/UpdateEndorsementDto.html":{}}}],["particular",{"_index":5589,"title":{},"body":{"license.html":{}}}],["passed",{"_index":3262,"title":{},"body":{"injectables/PullRequestDescriptionService.html":{}}}],["passport",{"_index":4145,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["passportmodule",{"_index":733,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportstrategy",{"_index":4143,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["passportstrategy(supabaseauthstrategy",{"_index":4148,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["password",{"_index":451,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["past",{"_index":1096,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/ContributorPullRequestsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"injectables/IssueSummaryService.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"injectables/PullRequestInsightsService.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/UserListMostActiveContributorsDto.html":{},"classes/UserRepoOptionsDto.html":{}}}],["patch",{"_index":608,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{}}}],["patch(\"/:id",{"_index":4574,"title":{},"body":{"controllers/UserHighlightsController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{}}}],["patch(\"/profile",{"_index":709,"title":{},"body":{"controllers/AuthController.html":{}}}],["patch(\"/profile/coupon",{"_index":717,"title":{},"body":{"controllers/AuthController.html":{}}}],["patch(\"/profile/email",{"_index":715,"title":{},"body":{"controllers/AuthController.html":{}}}],["patch(\"/profile/interests",{"_index":712,"title":{},"body":{"controllers/AuthController.html":{}}}],["patch(\":id/members/:memberid",{"_index":4759,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["patch('/:id')@apioperation({operationid",{"_index":4561,"title":{},"body":{"controllers/UserHighlightsController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{}}}],["patch('/profile')@apioperation({operationid",{"_index":603,"title":{},"body":{"controllers/AuthController.html":{}}}],["patch('/profile/coupon')@apioperation({operationid",{"_index":541,"title":{},"body":{"controllers/AuthController.html":{}}}],["patch('/profile/email')@apioperation({operationid",{"_index":592,"title":{},"body":{"controllers/AuthController.html":{}}}],["patch('/profile/interests')@apioperation({operationid",{"_index":599,"title":{},"body":{"controllers/AuthController.html":{}}}],["patch(':id')@apioperation({operationid",{"_index":4288,"title":{},"body":{"controllers/UserCollaborationController.html":{}}}],["patch(':id/members/:memberid')@apioperation({operationid",{"_index":4731,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["patch\\`](https://developer.mozilla.org/en",{"_index":5862,"title":{},"body":{"miscellaneous/variables.html":{}}}],["path",{"_index":501,"title":{},"body":{"modules/AppModule.html":{},"controllers/HealthController.html":{},"index.html":{}}}],["payment_method_types",{"_index":3937,"title":{},"body":{"injectables/StripeService.html":{}}}],["pending",{"_index":1823,"title":{},"body":{"entities/DbInsightMember.html":{},"entities/DbUserCollaboration.html":{},"injectables/InsightsService.html":{},"classes/UpdateInsightMemberDto.html":{},"controllers/UserInsightMemberController.html":{}}}],["pending'})@column({type",{"_index":1822,"title":{},"body":{"entities/DbInsightMember.html":{},"entities/DbUserCollaboration.html":{}}}],["per",{"_index":1059,"title":{},"body":{"classes/ContributionPageMetaDto.html":{},"classes/PageMetaDto.html":{},"miscellaneous/variables.html":{}}}],["perceived",{"_index":5872,"title":{},"body":{"miscellaneous/variables.html":{}}}],["perform",{"_index":5823,"title":{},"body":{"miscellaneous/variables.html":{}}}],["period",{"_index":2116,"title":{},"body":{"entities/DbSubscription.html":{}}}],["permission",{"_index":5555,"title":{},"body":{"license.html":{}}}],["permit",{"_index":5571,"title":{},"body":{"license.html":{}}}],["person",{"_index":815,"title":{},"body":{"injectables/BlogSummaryService.html":{},"license.html":{}}}],["persons",{"_index":5572,"title":{},"body":{"license.html":{}}}],["persuasive",{"_index":1333,"title":{},"body":{"classes/CreateBlogSummaryDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{}}}],["phone",{"_index":4186,"title":{},"body":{"injectables/TierService.html":{}}}],["picktype",{"_index":2244,"title":{},"body":{"classes/DbUserHighlightReactionResponse.html":{},"classes/HighlightOptionsDto.html":{}}}],["picktype(dbuserhighlightreaction",{"_index":2247,"title":{},"body":{"classes/DbUserHighlightReactionResponse.html":{},"classes/HighlightOptionsDto.html":{}}}],["pid,hostname,context",{"_index":494,"title":{},"body":{"modules/AppModule.html":{}}}],["pinned",{"_index":2174,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["pino",{"_index":312,"title":{},"body":{"modules/AppModule.html":{}}}],["pinohttp",{"_index":478,"title":{},"body":{"modules/AppModule.html":{}}}],["pizza",{"_index":749,"title":{},"body":{"classes/BakeRepoDto.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"controllers/PizzaOvenController.html":{},"modules/PizzaOvenModule.html":{},"classes/UpdateUserDto.html":{},"index.html":{}}}],["pizza'})@isstring()@isoptional",{"_index":4219,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["pizza/dtos/baked",{"_index":2928,"title":{},"body":{"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{}}}],["pizza/entities/baked",{"_index":347,"title":{},"body":{"modules/AppModule.html":{}}}],["pizza/entities/commit_authors.entity",{"_index":350,"title":{},"body":{"modules/AppModule.html":{}}}],["pizza/entities/commits.entity",{"_index":352,"title":{},"body":{"modules/AppModule.html":{}}}],["pizza/pizza",{"_index":426,"title":{},"body":{"modules/AppModule.html":{},"injectables/InsightRepoService.html":{},"modules/InsightsModule.html":{},"injectables/InsightsService.html":{}}}],["pizza_oven_api=80",{"_index":5527,"title":{},"body":{"index.html":{}}}],["pizza_oven_host=\"http://example.com",{"_index":5526,"title":{},"body":{"index.html":{}}}],["pizzaconfig",{"_index":326,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["pizzaovencontroller",{"_index":3089,"title":{"controllers/PizzaOvenController.html":{}},"body":{"controllers/PizzaOvenController.html":{},"modules/PizzaOvenModule.html":{},"coverage.html":{}}}],["pizzaovenmodule",{"_index":274,"title":{"modules/PizzaOvenModule.html":{}},"body":{"modules/AppModule.html":{},"modules/InsightsModule.html":{},"modules/PizzaOvenModule.html":{},"modules.html":{},"overview.html":{}}}],["pizzaovenservice",{"_index":2920,"title":{"injectables/PizzaOvenService.html":{}},"body":{"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"controllers/PizzaOvenController.html":{},"modules/PizzaOvenModule.html":{},"injectables/PizzaOvenService.html":{},"coverage.html":{},"overview.html":{}}}],["plan",{"_index":4182,"title":{},"body":{"injectables/TierService.html":{}}}],["plan:free@1",{"_index":5893,"title":{},"body":{"miscellaneous/variables.html":{}}}],["platform",{"_index":5808,"title":{},"body":{"miscellaneous/variables.html":{}}}],["please",{"_index":5533,"title":{},"body":{"index.html":{}}}],["port",{"_index":447,"title":{},"body":{"modules/AppModule.html":{},"injectables/PizzaOvenService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["portions",{"_index":5581,"title":{},"body":{"license.html":{}}}],["portuguese",{"_index":1321,"title":{},"body":{"classes/CreateBlogSummaryDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{}}}],["post",{"_index":609,"title":{},"body":{"controllers/AuthController.html":{},"controllers/BlogSummaryController.html":{},"interfaces/ChatResponse.html":{},"controllers/CodeExplanationController.html":{},"controllers/CodeRefactorSuggestionController.html":{},"controllers/CodeTestSuggestionController.html":{},"controllers/EndorsementController.html":{},"controllers/HighlightController.html":{},"controllers/IssueSummaryController.html":{},"injectables/OpenAiService.html":{},"controllers/PizzaOvenController.html":{},"controllers/PullRequestDescriptionController.html":{},"controllers/StripeWebhookController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{}}}],["post(\"/:id/contributors",{"_index":4917,"title":{},"body":{"controllers/UserListController.html":{}}}],["post(\"/:id/featured",{"_index":2775,"title":{},"body":{"controllers/HighlightController.html":{}}}],["post(\"/:id/reactions/:emojiid",{"_index":4587,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["post(\"/checkout/session",{"_index":696,"title":{},"body":{"controllers/AuthController.html":{}}}],["post(\"/description/generate",{"_index":3254,"title":{},"body":{"controllers/PullRequestDescriptionController.html":{}}}],["post(\"/explanation/generate",{"_index":897,"title":{},"body":{"controllers/CodeExplanationController.html":{}}}],["post(\"/onboarding",{"_index":686,"title":{},"body":{"controllers/AuthController.html":{}}}],["post(\"/suggestion/generate",{"_index":923,"title":{},"body":{"controllers/CodeRefactorSuggestionController.html":{}}}],["post(\"/summary/generate",{"_index":785,"title":{},"body":{"controllers/BlogSummaryController.html":{},"controllers/IssueSummaryController.html":{}}}],["post(\"/test/generate",{"_index":949,"title":{},"body":{"controllers/CodeTestSuggestionController.html":{}}}],["post(\"/waitlist",{"_index":693,"title":{},"body":{"controllers/AuthController.html":{}}}],["post(\"/webhooks",{"_index":4032,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["post(\":id/members",{"_index":4747,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["post('/')@apioperation({operationid",{"_index":3129,"title":{},"body":{"controllers/PizzaOvenController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{}}}],["post('/')@useguards(endorsementtokenguard)@apioperation({operationid",{"_index":2417,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["post('/:id/contributors')@apioperation({operationid",{"_index":4874,"title":{},"body":{"controllers/UserListController.html":{}}}],["post('/:id/featured')@apioperation({operationid",{"_index":2726,"title":{},"body":{"controllers/HighlightController.html":{}}}],["post('/:id/reactions/:emojiid')@apioperation({operationid",{"_index":4529,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["post('/checkout/session')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":569,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('/description/generate')@apioperation({operationid",{"_index":3248,"title":{},"body":{"controllers/PullRequestDescriptionController.html":{}}}],["post('/explanation/generate')@apioperation({operationid",{"_index":885,"title":{},"body":{"controllers/CodeExplanationController.html":{}}}],["post('/onboarding')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":579,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('/suggestion/generate')@apioperation({operationid",{"_index":916,"title":{},"body":{"controllers/CodeRefactorSuggestionController.html":{}}}],["post('/summary/generate')@apioperation({operationid",{"_index":763,"title":{},"body":{"controllers/BlogSummaryController.html":{},"controllers/IssueSummaryController.html":{}}}],["post('/test/generate')@apioperation({operationid",{"_index":944,"title":{},"body":{"controllers/CodeTestSuggestionController.html":{}}}],["post('/waitlist')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":586,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('/webhooks')@apiokresponse",{"_index":3981,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["post(':id/members')@apioperation({operationid",{"_index":4715,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["post\\`](https://developer.mozilla.org/en",{"_index":5858,"title":{},"body":{"miscellaneous/variables.html":{}}}],["postcreatecheckoutsession",{"_index":534,"title":{},"body":{"controllers/AuthController.html":{}}}],["postcreatecheckoutsession(@user",{"_index":697,"title":{},"body":{"controllers/AuthController.html":{}}}],["postcreatecheckoutsession(user",{"_index":568,"title":{},"body":{"controllers/AuthController.html":{}}}],["postgres",{"_index":5425,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["postgresql",{"_index":5371,"title":{},"body":{"index.html":{}}}],["posting",{"_index":2940,"title":{},"body":{"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{}}}],["postonboarding",{"_index":535,"title":{},"body":{"controllers/AuthController.html":{}}}],["postonboarding(@userid",{"_index":687,"title":{},"body":{"controllers/AuthController.html":{}}}],["postonboarding(userid",{"_index":576,"title":{},"body":{"controllers/AuthController.html":{}}}],["posttopizzaovenservice",{"_index":3097,"title":{},"body":{"controllers/PizzaOvenController.html":{},"injectables/PizzaOvenService.html":{}}}],["posttopizzaovenservice'})@apiacceptedresponse()@apibadrequestresponse({description",{"_index":3131,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["posttopizzaovenservice(@body",{"_index":3142,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["posttopizzaovenservice(bakeoptionsinfo",{"_index":3128,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["posttopizzaovenservice(bakerepoinfo",{"_index":3186,"title":{},"body":{"injectables/PizzaOvenService.html":{}}}],["postuserlistcontributors",{"_index":4829,"title":{},"body":{"controllers/UserListController.html":{}}}],["postuserlistcontributors(updatecollaboratorsdto",{"_index":4873,"title":{},"body":{"controllers/UserListController.html":{}}}],["postwaitlist",{"_index":536,"title":{},"body":{"controllers/AuthController.html":{}}}],["postwaitlist(@userid",{"_index":694,"title":{},"body":{"controllers/AuthController.html":{}}}],["postwaitlist(userid",{"_index":585,"title":{},"body":{"controllers/AuthController.html":{}}}],["powered",{"_index":5620,"title":{},"body":{"properties.html":{}}}],["pr",{"_index":201,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"classes/CreateUserHighlightDto.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbPullRequestReview.html":{},"entities/DbUserHighlight.html":{},"classes/FilterListContributorsDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/UserListStatsService.html":{}}}],["pr!'})@column('text",{"_index":2197,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["pr!})@isoptional()@isstring",{"_index":1444,"title":{},"body":{"classes/CreateUserHighlightDto.html":{}}}],["pr\".\"repo_id\"=\"repos\".\"id",{"_index":3314,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["pr\".\"updated_at",{"_index":3305,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["pr.\"author_login",{"_index":219,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["pr.\"repo_id",{"_index":205,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["pr_velocity",{"_index":2568,"title":{},"body":{"classes/FilterListContributorsDto.html":{}}}],["preferences",{"_index":594,"title":{},"body":{"controllers/AuthController.html":{}}}],["prefix",{"_index":529,"title":{},"body":{"controllers/AuthController.html":{},"controllers/BlogSummaryController.html":{},"controllers/CodeExplanationController.html":{},"controllers/CodeRefactorSuggestionController.html":{},"controllers/CodeTestSuggestionController.html":{},"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"controllers/EmojiController.html":{},"controllers/EndorsementController.html":{},"controllers/HealthController.html":{},"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"controllers/IssueSummaryController.html":{},"controllers/PizzaOvenController.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/StripeWebhookController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"controllers/UserFollowingController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"controllers/UserListStatsController.html":{},"controllers/UserNotificationController.html":{},"controllers/UserRecommendationController.html":{}}}],["prefs.dto",{"_index":626,"title":{},"body":{"controllers/AuthController.html":{}}}],["prefs.dto.ts",{"_index":4251,"title":{},"body":{"classes/UpdateUserEmailPreferencesDto.html":{},"coverage.html":{}}}],["prefs.dto.ts:11",{"_index":4255,"title":{},"body":{"classes/UpdateUserEmailPreferencesDto.html":{}}}],["prefs.dto.ts:19",{"_index":4257,"title":{},"body":{"classes/UpdateUserEmailPreferencesDto.html":{}}}],["prefs.dto.ts:27",{"_index":4259,"title":{},"body":{"classes/UpdateUserEmailPreferencesDto.html":{}}}],["prerequisites",{"_index":5357,"title":{},"body":{"index.html":{}}}],["present",{"_index":3260,"title":{},"body":{"injectables/PullRequestDescriptionService.html":{}}}],["pretty",{"_index":484,"title":{},"body":{"modules/AppModule.html":{}}}],["prev_days_start_date",{"_index":1075,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"classes/ContributorPullRequestsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"controllers/RepoContributionsController.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/UserListMostActiveContributorsDto.html":{},"classes/UserRepoOptionsDto.html":{}}}],["prev_start_date",{"_index":5773,"title":{},"body":{"miscellaneous/variables.html":{}}}],["preview",{"_index":5484,"title":{},"body":{"index.html":{}}}],["previous",{"_index":1054,"title":{},"body":{"classes/ContributionPageMetaDto.html":{},"entities/DbContributorCategoryTimeframe.html":{},"classes/PageMetaDto.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{}}}],["previous_month",{"_index":3446,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["previous_month_prs",{"_index":232,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["previous_month_prs\".\"author_login",{"_index":233,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["previously",{"_index":5428,"title":{},"body":{"index.html":{}}}],["prevmonthquery",{"_index":3443,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["price",{"_index":2123,"title":{},"body":{"entities/DbSubscription.html":{},"injectables/StripeService.html":{}}}],["price_12345",{"_index":2138,"title":{},"body":{"entities/DbSubscription.html":{}}}],["price_12345'})@column({type",{"_index":2124,"title":{},"body":{"entities/DbSubscription.html":{}}}],["price_id",{"_index":2104,"title":{},"body":{"entities/DbSubscription.html":{},"controllers/StripeWebhookController.html":{}}}],["prid",{"_index":3366,"title":{},"body":{"injectables/PullRequestReviewService.html":{}}}],["primarycolumn",{"_index":1592,"title":{},"body":{"entities/DbBakedRepo.html":{},"entities/DbCommitAuthors.html":{},"entities/DbCommits.html":{},"entities/DbContribution.html":{},"entities/DbCoupon.html":{},"entities/DbCustomer.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbPullRequestReview.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{}}}],["primarycolumn(\"bigint",{"_index":1600,"title":{},"body":{"entities/DbBakedRepo.html":{},"entities/DbCommitAuthors.html":{},"entities/DbCommits.html":{},"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{}}}],["primarycolumn(\"integer",{"_index":1983,"title":{},"body":{"entities/DbPullRequest.html":{},"entities/DbPullRequestReview.html":{}}}],["primarycolumn(\"text",{"_index":2137,"title":{},"body":{"entities/DbSubscription.html":{}}}],["primarygeneratedcolumn",{"_index":1754,"title":{},"body":{"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{}}}],["primarygeneratedcolumn(\"uuid",{"_index":1859,"title":{},"body":{"entities/DbLog.html":{}}}],["primarygeneratedcolumn('uuid",{"_index":1854,"title":{},"body":{"entities/DbLog.html":{}}}],["prinsightrepository",{"_index":3278,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["private",{"_index":65,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/BlogSummaryService.html":{},"injectables/CodeExplanationService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"injectables/CommitAuthorsService.html":{},"injectables/CommitsService.html":{},"injectables/ContributionService.html":{},"injectables/CouponService.html":{},"injectables/CustomLogger.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"injectables/EmojiService.html":{},"controllers/EndorsementController.html":{},"injectables/EndorsementService.html":{},"controllers/HealthController.html":{},"injectables/HttpLoggerMiddleware.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"injectables/IssueSummaryService.html":{},"injectables/LogService.html":{},"controllers/PizzaOvenController.html":{},"injectables/PizzaOvenService.html":{},"controllers/PullRequestController.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestReviewService.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeService.html":{},"injectables/StripeSubscriptionService.html":{},"controllers/StripeWebhookController.html":{},"injectables/SubmitService.html":{},"injectables/TierService.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowingController.html":{},"controllers/UserFollowsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"injectables/UserListService.html":{},"injectables/UserListStatsService.html":{},"injectables/UserNotificationService.html":{},"injectables/UserOrganizationService.html":{},"controllers/UserRecommendationController.html":{},"injectables/UserReposService.html":{},"injectables/VoteService.html":{}}}],["proceed",{"_index":5536,"title":{},"body":{"index.html":{}}}],["process",{"_index":5869,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.ci",{"_index":5665,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.domain",{"_index":5724,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.node_env",{"_index":5659,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.stripe_webhook_secret",{"_index":5800,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.supabase_api_key",{"_index":4152,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["process.env.supabase_jwt_secret",{"_index":4155,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["process.env.supabase_url",{"_index":4150,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["product",{"_index":4258,"title":{},"body":{"classes/UpdateUserEmailPreferencesDto.html":{}}}],["production",{"_index":5487,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["profile",{"_index":604,"title":{},"body":{"controllers/AuthController.html":{},"classes/UpdateUserDto.html":{}}}],["profile'})@apibearerauth()@useguards(supabaseguard)@apiokresponse({type",{"_index":595,"title":{},"body":{"controllers/AuthController.html":{}}}],["profile'})@apibody({type",{"_index":549,"title":{},"body":{"controllers/AuthController.html":{}}}],["project",{"_index":1423,"title":{},"body":{"classes/CreateUserCollaborationDto.html":{},"entities/DbContributionsProjects.html":{},"entities/DbUserCollaboration.html":{},"controllers/UserListStatsController.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["project')@apioperation({operationid",{"_index":5037,"title":{},"body":{"controllers/UserListStatsController.html":{}}}],["project's",{"_index":5380,"title":{},"body":{"index.html":{}}}],["project'})@apibadrequestresponse({description",{"_index":5040,"title":{},"body":{"controllers/UserListStatsController.html":{}}}],["project'})@apiokresponse({type",{"_index":5058,"title":{},"body":{"controllers/UserListStatsController.html":{}}}],["project'})@isstring()@minlength(20)@maxlength(500",{"_index":1417,"title":{},"body":{"classes/CreateUserCollaborationDto.html":{}}}],["project.dto",{"_index":55,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"controllers/UserListStatsController.html":{},"injectables/UserListStatsService.html":{}}}],["project.dto.ts",{"_index":1166,"title":{},"body":{"classes/ContributionsByProjectDto.html":{},"coverage.html":{}}}],["project.dto.ts:15",{"_index":1167,"title":{},"body":{"classes/ContributionsByProjectDto.html":{}}}],["project?'})@column({type",{"_index":2159,"title":{},"body":{"entities/DbUserCollaboration.html":{}}}],["project_id",{"_index":191,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"entities/DbContributionsProjects.html":{},"injectables/UserListStatsService.html":{}}}],["projects.dto",{"_index":58,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"controllers/UserListStatsController.html":{},"injectables/UserListStatsService.html":{}}}],["projects.dto.ts",{"_index":4189,"title":{},"body":{"classes/TopProjectsDto.html":{},"coverage.html":{}}}],["projects.dto.ts:15",{"_index":4190,"title":{},"body":{"classes/TopProjectsDto.html":{}}}],["projects.dto.ts:24",{"_index":4192,"title":{},"body":{"classes/TopProjectsDto.html":{}}}],["projects.entity",{"_index":46,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"controllers/UserListStatsController.html":{},"injectables/UserListStatsService.html":{}}}],["projects.entity.ts",{"_index":1703,"title":{},"body":{"entities/DbContributionsProjects.html":{},"coverage.html":{}}}],["projects.entity.ts:16",{"_index":1707,"title":{},"body":{"entities/DbContributionsProjects.html":{}}}],["projects.entity.ts:28",{"_index":1709,"title":{},"body":{"entities/DbContributionsProjects.html":{}}}],["projects.entity.ts:40",{"_index":1711,"title":{},"body":{"entities/DbContributionsProjects.html":{}}}],["projects.entity.ts:52",{"_index":1705,"title":{},"body":{"entities/DbContributionsProjects.html":{}}}],["promise",{"_index":77,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"controllers/AuthController.html":{},"injectables/CommitAuthorsService.html":{},"injectables/CommitsService.html":{},"injectables/ContributionService.html":{},"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightsService.html":{},"controllers/PizzaOvenController.html":{},"injectables/PizzaOvenService.html":{},"controllers/PullRequestController.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestReviewService.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/SubmitService.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowingController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"injectables/UserListService.html":{},"controllers/UserListStatsController.html":{},"injectables/UserListStatsService.html":{},"controllers/UserNotificationController.html":{},"injectables/UserReposService.html":{},"injectables/VoteService.html":{}}}],["promise.all",{"_index":3239,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["promise.all([querybuilder.getcount",{"_index":3088,"title":{},"body":{"injectables/PagerService.html":{},"interfaces/PaginationInput.html":{}}}],["promise.all(contributors",{"_index":4921,"title":{},"body":{"controllers/UserListController.html":{}}}],["promise.all(framepromises",{"_index":136,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["promise.all(notifications",{"_index":4686,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["promise.all(promises",{"_index":4509,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["promise.all(repostoremoverequests",{"_index":4805,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["promise.all(repotoaddrequests",{"_index":4815,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["promise.all(updates",{"_index":5176,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["promise.allsettled(listcontributors",{"_index":4899,"title":{},"body":{"controllers/UserListController.html":{}}}],["promises",{"_index":3670,"title":{},"body":{"injectables/RepoService.html":{},"controllers/UserFollowsController.html":{}}}],["properties",{"_index":11,"title":{"properties.html":{}},"body":{"interfaces/AllContributionsCount.html":{},"classes/ApplyUserCouponDto.html":{},"classes/BakeRepoDto.html":{},"interfaces/ChatResponse.html":{},"classes/CollaboratorsDto.html":{},"classes/CommitAuthorDto.html":{},"classes/CommitsDto.html":{},"classes/ContributionPageMetaDto.html":{},"classes/ContributionPageOptionsDto.html":{},"classes/ContributionsByProjectDto.html":{},"classes/ContributionsPageDto.html":{},"classes/ContributionsTimeframeDto.html":{},"classes/Contributor.html":{},"classes/ContributorPullRequestsDto.html":{},"classes/CreateBlogSummaryDto.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateInsightDto.html":{},"classes/CreateInsightMemberDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/CreateLogDto.html":{},"classes/CreateUserCollaborationDto.html":{},"classes/CreateUserHighlightDto.html":{},"classes/CreateUserListDto.html":{},"injectables/CustomLogger.html":{},"classes/DatabaseLoggerMiddleware.html":{},"entities/DbBakedRepo.html":{},"entities/DbCommitAuthors.html":{},"entities/DbCommits.html":{},"entities/DbContribution.html":{},"entities/DbContributionStatTimeframe.html":{},"entities/DbContributionsProjects.html":{},"entities/DbContributorCategoryTimeframe.html":{},"entities/DbCoupon.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"classes/DbFilteredUser.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbPullRequestReview.html":{},"entities/DbRepoLoginContributions.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"classes/DbTimezone.html":{},"classes/DbTopUser.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightReactionResponse.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserListContributorStat.html":{},"entities/DbUserListContributorStat-1.html":{},"entities/DbUserNotification.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"classes/FilterListContributorsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/FilteredUsersDto.html":{},"classes/FollowManyUsersDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"classes/HighlightOptionsDto.html":{},"injectables/HttpLoggerMiddleware.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaParameters.html":{},"classes/PageOptionsDto.html":{},"interfaces/PaginationInput.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoInfo.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/StripeService.html":{},"classes/SupabaseAuthDto.html":{},"injectables/TierService.html":{},"classes/TopProjectsDto.html":{},"classes/TopUsersDto.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateInsightMemberDto.html":{},"classes/UpdateUserCollaborationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"classes/UserListMostActiveContributorsDto.html":{},"classes/UserOnboardingDto.html":{},"classes/UserRepoOptionsDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"classes/VotedRepoDto.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["property.decorator",{"_index":1595,"title":{},"body":{"entities/DbBakedRepo.html":{},"entities/DbCommitAuthors.html":{},"entities/DbCommits.html":{},"entities/DbContribution.html":{},"entities/DbContributionStatTimeframe.html":{},"entities/DbContributionsProjects.html":{},"entities/DbContributorCategoryTimeframe.html":{},"entities/DbCoupon.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"classes/DbFilteredUser.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbPullRequestReview.html":{},"entities/DbRepoLoginContributions.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"classes/DbTimezone.html":{},"classes/DbTopUser.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserListContributorStat.html":{},"entities/DbUserListContributorStat-1.html":{},"entities/DbUserNotification.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{}}}],["provide",{"_index":5378,"title":{},"body":{"index.html":{},"properties.html":{}}}],["provided",{"_index":889,"title":{},"body":{"controllers/CodeExplanationController.html":{},"controllers/CodeRefactorSuggestionController.html":{},"controllers/CodeTestSuggestionController.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/RepoFilterService.html":{},"controllers/UserFollowingController.html":{},"controllers/UserFollowsController.html":{},"index.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["providers",{"_index":254,"title":{},"body":{"modules/ApiServicesModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/BlogSummaryModule.html":{},"modules/ContributionModule.html":{},"modules/CouponModule.html":{},"modules/CustomerModule.html":{},"modules/EmojiModule.html":{},"modules/EndorsementModule.html":{},"modules/InsightsModule.html":{},"modules/IssueSummaryModule.html":{},"modules/LogModule.html":{},"modules/OpenAiModule.html":{},"modules/PizzaOvenModule.html":{},"modules/PullRequestModule.html":{},"modules/RepoFilterModule.html":{},"modules/RepoModule.html":{},"modules/StarModule.html":{},"modules/StargazeModule.html":{},"modules/StripeModule.html":{},"modules/StripeSubscriptionModule.html":{},"modules/StripeWebHookModule.html":{},"modules/SubmitModule.html":{},"modules/TierModule.html":{},"modules/UserListModule.html":{},"modules/UserModule.html":{},"modules/UserReposModule.html":{},"modules/VoteModule.html":{}}}],["provides",{"_index":5809,"title":{},"body":{"miscellaneous/variables.html":{}}}],["prquery",{"_index":3312,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["prs",{"_index":881,"title":{},"body":{"controllers/CodeExplanationController.html":{},"controllers/CodeRefactorSuggestionController.html":{},"controllers/CodeTestSuggestionController.html":{},"entities/DbContributionStatTimeframe.html":{},"entities/DbRepoLoginContributions.html":{},"entities/DbUserListContributorStat.html":{},"entities/DbUserListContributorStat-1.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{}}}],["prs.dto",{"_index":3408,"title":{},"body":{"injectables/PullRequestService.html":{},"controllers/UserController.html":{}}}],["prs.dto.ts",{"_index":1273,"title":{},"body":{"classes/ContributorPullRequestsDto.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["prs.dto.ts:15",{"_index":1278,"title":{},"body":{"classes/ContributorPullRequestsDto.html":{}}}],["prs_created",{"_index":1160,"title":{},"body":{"injectables/ContributionService.html":{},"entities/DbContributionStatTimeframe.html":{},"entities/DbRepoLoginContributions.html":{},"entities/DbUserListContributorStat.html":{},"entities/DbUserListContributorStat-1.html":{},"classes/UserListMostActiveContributorsDto.html":{},"miscellaneous/enumerations.html":{}}}],["prs_reviewed",{"_index":1686,"title":{},"body":{"entities/DbContributionStatTimeframe.html":{},"entities/DbRepoLoginContributions.html":{},"entities/DbUserListContributorStat.html":{},"entities/DbUserListContributorStat-1.html":{}}}],["public",{"_index":662,"title":{},"body":{"controllers/AuthController.html":{},"classes/CommitAuthorDto.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateUserHighlightDto.html":{},"entities/DbBakedRepo.html":{},"entities/DbCommitAuthors.html":{},"entities/DbCommits.html":{},"entities/DbContribution.html":{},"entities/DbCoupon.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"classes/DbFilteredUser.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbPullRequestReview.html":{},"entities/DbRepoLoginContributions.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"classes/DbTimezone.html":{},"classes/DbTopUser.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserListContributorStat.html":{},"entities/DbUserListContributorStat-1.html":{},"entities/DbUserNotification.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"classes/FollowManyUsersDto.html":{},"injectables/SupabaseStrategy.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"controllers/UserController.html":{},"controllers/UserListController.html":{},"classes/UserOnboardingDto.html":{}}}],["publish",{"_index":5565,"title":{},"body":{"license.html":{}}}],["published",{"_index":2007,"title":{},"body":{"entities/DbPullRequestReview.html":{}}}],["published_at",{"_index":2000,"title":{},"body":{"entities/DbPullRequestReview.html":{}}}],["pull",{"_index":197,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"modules/AppModule.html":{},"modules/ContributionModule.html":{},"injectables/ContributionService.html":{},"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"modules/ContributorModule.html":{},"entities/DbContribution.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbPullRequestReview.html":{},"entities/DbUserHighlight.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"modules/PullRequestModule.html":{},"controllers/UserController.html":{},"injectables/UserHighlightsService.html":{},"modules/UserListModule.html":{},"injectables/UserListService.html":{},"injectables/UserListStatsService.html":{},"modules/UserModule.html":{},"coverage.html":{},"index.html":{}}}],["pull_request",{"_index":1446,"title":{},"body":{"classes/CreateUserHighlightDto.html":{},"entities/DbUserHighlight.html":{}}}],["pull_request'})@column('text",{"_index":2199,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["pull_request'})@isstring()@isin(['pull_request",{"_index":1447,"title":{},"body":{"classes/CreateUserHighlightDto.html":{}}}],["pull_request_id",{"_index":2010,"title":{},"body":{"entities/DbPullRequestReview.html":{}}}],["pull_requests",{"_index":94,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/ContributionService.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"injectables/PullRequestService.html":{},"injectables/RepoFilterService.html":{},"injectables/RepoService.html":{},"injectables/UserListService.html":{},"injectables/UserListStatsService.html":{}}}],["pull_requests\".\"author_login",{"_index":95,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/ContributionService.html":{},"injectables/UserListStatsService.html":{}}}],["pull_requests\".\"author_login\"=\"users\".\"login",{"_index":3428,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["pull_requests\".\"repo_id",{"_index":97,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/ContributionService.html":{},"injectables/UserListStatsService.html":{}}}],["pull_requests\".\"repo_id\"=\"repos\".\"id",{"_index":3413,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["pull_requests\".\"updated_at",{"_index":160,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/ContributionService.html":{},"injectables/PullRequestService.html":{},"injectables/UserListStatsService.html":{}}}],["pull_requests.author_login",{"_index":1162,"title":{},"body":{"injectables/ContributionService.html":{}}}],["pull_requests.created_at::date",{"_index":5015,"title":{},"body":{"injectables/UserListService.html":{}}}],["pull_requests_full_name",{"_index":3415,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["pull_requests_repo_id",{"_index":3416,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["pull_requests_velocity\".\"created_at",{"_index":3647,"title":{},"body":{"injectables/RepoService.html":{}}}],["pull_requests_velocity\".\"updated_at",{"_index":3648,"title":{},"body":{"injectables/RepoService.html":{}}}],["pullrequest",{"_index":2001,"title":{},"body":{"entities/DbPullRequestReview.html":{},"injectables/PullRequestReviewService.html":{}}}],["pullrequestcontributorinsightsdto",{"_index":1237,"title":{"classes/PullRequestContributorInsightsDto.html":{}},"body":{"controllers/ContributorInsightsController.html":{},"classes/PullRequestContributorInsightsDto.html":{},"injectables/PullRequestService.html":{},"coverage.html":{}}}],["pullrequestcontributoroptionsdto",{"_index":1205,"title":{"classes/PullRequestContributorOptionsDto.html":{}},"body":{"controllers/ContributorController.html":{},"classes/PullRequestContributorOptionsDto.html":{},"injectables/PullRequestService.html":{},"coverage.html":{}}}],["pullrequestcontroller",{"_index":3203,"title":{"controllers/PullRequestController.html":{}},"body":{"controllers/PullRequestController.html":{},"modules/PullRequestModule.html":{},"coverage.html":{}}}],["pullrequestdescriptioncontroller",{"_index":3245,"title":{"controllers/PullRequestDescriptionController.html":{}},"body":{"controllers/PullRequestDescriptionController.html":{},"modules/PullRequestModule.html":{},"coverage.html":{}}}],["pullrequestdescriptionservice",{"_index":3252,"title":{"injectables/PullRequestDescriptionService.html":{}},"body":{"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"modules/PullRequestModule.html":{},"coverage.html":{},"overview.html":{}}}],["pullrequestinsightsservice",{"_index":3227,"title":{"injectables/PullRequestInsightsService.html":{}},"body":{"controllers/PullRequestController.html":{},"injectables/PullRequestInsightsService.html":{},"modules/PullRequestModule.html":{},"coverage.html":{},"overview.html":{}}}],["pullrequestmodule",{"_index":275,"title":{"modules/PullRequestModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ContributorModule.html":{},"modules/PullRequestModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["pullrequestorderfieldsenum",{"_index":3347,"title":{},"body":{"classes/PullRequestPageOptionsDto.html":{},"miscellaneous/enumerations.html":{}}}],["pullrequestorderfieldsenum.updated_at",{"_index":3348,"title":{},"body":{"classes/PullRequestPageOptionsDto.html":{}}}],["pullrequestpageoptionsdto",{"_index":3222,"title":{"classes/PullRequestPageOptionsDto.html":{}},"body":{"controllers/PullRequestController.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{},"coverage.html":{}}}],["pullrequestrepository",{"_index":1116,"title":{},"body":{"injectables/ContributionService.html":{},"injectables/PullRequestService.html":{}}}],["pullrequestreviewrepository",{"_index":3363,"title":{},"body":{"injectables/PullRequestReviewService.html":{}}}],["pullrequestreviewservice",{"_index":3228,"title":{"injectables/PullRequestReviewService.html":{}},"body":{"controllers/PullRequestController.html":{},"modules/PullRequestModule.html":{},"injectables/PullRequestReviewService.html":{},"coverage.html":{},"overview.html":{}}}],["pullrequestservice",{"_index":1219,"title":{"injectables/PullRequestService.html":{}},"body":{"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"controllers/PullRequestController.html":{},"modules/PullRequestModule.html":{},"injectables/PullRequestService.html":{},"controllers/UserController.html":{},"coverage.html":{},"overview.html":{}}}],["pullrequestsinsightservice",{"_index":3230,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["pullrequeststatusenum",{"_index":3353,"title":{},"body":{"classes/PullRequestPageOptionsDto.html":{},"miscellaneous/enumerations.html":{}}}],["pullrequeststatusenum'})@isenum(pullrequeststatusenum)@isoptional",{"_index":3354,"title":{},"body":{"classes/PullRequestPageOptionsDto.html":{}}}],["purpose",{"_index":5590,"title":{},"body":{"license.html":{}}}],["put",{"_index":3722,"title":{},"body":{"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserFollowsController.html":{}}}],["put(\"/:id/star",{"_index":3728,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["put(\"/:id/stargaze",{"_index":3766,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["put(\"/:id/submit",{"_index":3805,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["put(\"/:id/vote",{"_index":3853,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["put(\"/:owner/:repo/star",{"_index":3731,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["put(\"/:owner/:repo/stargaze",{"_index":3769,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["put(\"/:owner/:repo/submit",{"_index":3807,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["put(\"/:owner/:repo/vote",{"_index":3856,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["put(\"/:username/follow",{"_index":4502,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["put(\"/:username/follows",{"_index":4504,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["put('/:id/star')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":3715,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["put('/:id/stargaze')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":3757,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["put('/:id/submit')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":3796,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["put('/:id/vote')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":3840,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["put('/:owner/:repo/star')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":3720,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["put('/:owner/:repo/stargaze')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":3761,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["put('/:owner/:repo/submit')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":3799,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["put('/:owner/:repo/vote')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":3843,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["put('/:username/follow')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":4481,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["put('/:username/follows')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":4485,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["qb",{"_index":3289,"title":{},"body":{"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoFilterService.html":{},"injectables/RepoService.html":{},"injectables/UserListService.html":{}}}],["qb.andwhere(sql",{"_index":3557,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["qb.where(sql",{"_index":3556,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["quality",{"_index":5493,"title":{},"body":{"index.html":{}}}],["quantity",{"_index":2105,"title":{},"body":{"entities/DbSubscription.html":{},"injectables/StripeService.html":{},"controllers/StripeWebhookController.html":{}}}],["query",{"_index":1214,"title":{},"body":{"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"classes/DatabaseLoggerMiddleware.html":{},"controllers/EmojiController.html":{},"controllers/EndorsementController.html":{},"classes/FilteredUsersDto.html":{},"controllers/HighlightController.html":{},"controllers/PizzaOvenController.html":{},"controllers/PullRequestController.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"injectables/RepoFilterService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"controllers/UserListStatsController.html":{},"controllers/UserNotificationController.html":{},"controllers/UserRecommendationController.html":{}}}],["query(\"prev_days_start_date",{"_index":3490,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["query(\"range",{"_index":3489,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["query(new",{"_index":4911,"title":{},"body":{"controllers/UserListController.html":{}}}],["querybuilder",{"_index":82,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/CommitAuthorsService.html":{},"injectables/CommitsService.html":{},"injectables/ContributionService.html":{},"injectables/CouponService.html":{},"injectables/CustomerService.html":{},"injectables/EmojiService.html":{},"injectables/EndorsementService.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightsService.html":{},"injectables/PagerService.html":{},"interfaces/PaginationInput.html":{},"injectables/PizzaOvenService.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoFilterService.html":{},"injectables/RepoService.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/SubmitService.html":{},"injectables/UserCollaborationService.html":{},"injectables/UserFollowService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserListService.html":{},"injectables/UserListStatsService.html":{},"injectables/UserNotificationService.html":{},"injectables/UserOrganizationService.html":{},"injectables/UserReposService.html":{},"injectables/VoteService.html":{}}}],["querybuilder.addgroupby(\"emoji_id",{"_index":4697,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["querybuilder.andwhere(\"lower(users.login",{"_index":5021,"title":{},"body":{"injectables/UserListService.html":{}}}],["querybuilder.andwhere(\"user_highlight_reactions.user_id",{"_index":4696,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["querybuilder.andwhere(\"user_highlights.user_id",{"_index":4649,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["querybuilder.andwhere(\"user_lists.user_id",{"_index":4992,"title":{},"body":{"injectables/UserListService.html":{}}}],["querybuilder.andwhere(sql",{"_index":4660,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["querybuilder.getcount",{"_index":1146,"title":{},"body":{"injectables/ContributionService.html":{},"injectables/EmojiService.html":{},"injectables/InsightsService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoService.html":{},"injectables/UserNotificationService.html":{},"injectables/UserOrganizationService.html":{}}}],["querybuilder.getmany",{"_index":1147,"title":{},"body":{"injectables/ContributionService.html":{},"injectables/EmojiService.html":{},"injectables/InsightsService.html":{},"injectables/PagerService.html":{},"interfaces/PaginationInput.html":{},"injectables/PullRequestService.html":{},"injectables/RepoService.html":{},"injectables/UserFollowService.html":{},"injectables/UserNotificationService.html":{},"injectables/UserOrganizationService.html":{}}}],["querybuilder.getone",{"_index":998,"title":{},"body":{"injectables/CommitAuthorsService.html":{},"injectables/CommitsService.html":{},"injectables/CouponService.html":{},"injectables/CustomerService.html":{},"injectables/EndorsementService.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightsService.html":{},"injectables/PizzaOvenService.html":{},"injectables/RepoService.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/SubmitService.html":{},"injectables/UserCollaborationService.html":{},"injectables/UserFollowService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserListService.html":{},"injectables/UserReposService.html":{},"injectables/VoteService.html":{}}}],["querybuilder.getoneorfail",{"_index":4462,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["querybuilder.getrawmany",{"_index":225,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/PullRequestService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserListService.html":{},"injectables/UserListStatsService.html":{}}}],["querybuilder.getrawone",{"_index":3331,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["querybuilder.innerjoin",{"_index":3654,"title":{},"body":{"injectables/RepoService.html":{}}}],["querybuilder.innerjoin(\"users",{"_index":84,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["querybuilder.leftjoin",{"_index":5013,"title":{},"body":{"injectables/UserListService.html":{}}}],["querybuilder.limit(1",{"_index":3325,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["querybuilder.offset(pageoptionsdto.skip).limit(pageoptionsdto.limit",{"_index":994,"title":{},"body":{"injectables/CommitAuthorsService.html":{},"injectables/CommitsService.html":{},"injectables/PagerService.html":{},"interfaces/PaginationInput.html":{},"injectables/PizzaOvenService.html":{},"injectables/UserNotificationService.html":{},"injectables/UserOrganizationService.html":{}}}],["querybuilder.orderby(\"emoji.display_order",{"_index":2404,"title":{},"body":{"injectables/EmojiService.html":{}}}],["querybuilder.orderby(\"endorsements.created_at",{"_index":2531,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["querybuilder.setparameters",{"_index":3328,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["querybuilder.skip(pageoptionsdto.skip).take(pageoptionsdto.limit",{"_index":2998,"title":{},"body":{"injectables/InsightsService.html":{}}}],["querybuilder.where(\"baked_repo_id",{"_index":1025,"title":{},"body":{"injectables/CommitsService.html":{}}}],["querybuilder.where(\"code",{"_index":1300,"title":{},"body":{"injectables/CouponService.html":{}}}],["querybuilder.where(\"commit_author_id",{"_index":1026,"title":{},"body":{"injectables/CommitsService.html":{}}}],["querybuilder.where(\"contribution.repo_id",{"_index":1140,"title":{},"body":{"injectables/ContributionService.html":{}}}],["querybuilder.where(\"customer.id=:id",{"_index":1525,"title":{},"body":{"injectables/CustomerService.html":{}}}],["querybuilder.where(\"customer.stripe_customer_id=:id",{"_index":1526,"title":{},"body":{"injectables/CustomerService.html":{}}}],["querybuilder.where(\"endorsements.creator_user_id",{"_index":2532,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["querybuilder.where(\"endorsements.id",{"_index":2546,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["querybuilder.where(\"id",{"_index":996,"title":{},"body":{"injectables/CommitAuthorsService.html":{},"injectables/CommitsService.html":{},"injectables/PizzaOvenService.html":{},"injectables/UserReposService.html":{}}}],["querybuilder.where(\"insight_members.id",{"_index":2886,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["querybuilder.where(\"is_featured=true\").andwhere(\"is_public=true\").orderby(\"user_lists.updated_at",{"_index":4998,"title":{},"body":{"injectables/UserListService.html":{}}}],["querybuilder.where(\"r2stars.repo_id",{"_index":3881,"title":{},"body":{"injectables/StarService.html":{}}}],["querybuilder.where(\"r2submits.repo_id",{"_index":4075,"title":{},"body":{"injectables/SubmitService.html":{}}}],["querybuilder.where(\"repo.full_name",{"_index":3651,"title":{},"body":{"injectables/RepoService.html":{}}}],["querybuilder.where(\"repo.id",{"_index":3650,"title":{},"body":{"injectables/RepoService.html":{}}}],["querybuilder.where(\"user_collaborations.id",{"_index":4327,"title":{},"body":{"injectables/UserCollaborationService.html":{}}}],["querybuilder.where(\"user_highlights.user_id",{"_index":4668,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["querybuilder.where(\"user_lists.user_id",{"_index":4996,"title":{},"body":{"injectables/UserListService.html":{}}}],["querybuilder.where(\"user_repos.user_id",{"_index":5243,"title":{},"body":{"injectables/UserReposService.html":{}}}],["querybuilder.where(`user_highlights.featured",{"_index":4661,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["querybuilder.where(sql",{"_index":4659,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["queryrunner",{"_index":1541,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["queryrunner?.data.iscreatinglogs",{"_index":1560,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["questions",{"_index":5538,"title":{},"body":{"index.html":{}}}],["range",{"_index":78,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"classes/ContributionsByProjectDto.html":{},"classes/ContributionsTimeframeDto.html":{},"controllers/ContributorInsightsController.html":{},"classes/ContributorPullRequestsDto.html":{},"classes/FilterOptionsDto.html":{},"controllers/HighlightController.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"injectables/PullRequestInsightsService.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"injectables/RepoFilterService.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"classes/TopProjectsDto.html":{},"injectables/UserHighlightsService.html":{},"classes/UserListMostActiveContributorsDto.html":{},"injectables/UserListService.html":{},"controllers/UserListStatsController.html":{},"injectables/UserListStatsService.html":{},"classes/UserRepoOptionsDto.html":{}}}],["rangetype",{"_index":1274,"title":{},"body":{"classes/ContributorPullRequestsDto.html":{}}}],["rangetypeenum",{"_index":1275,"title":{},"body":{"classes/ContributorPullRequestsDto.html":{},"injectables/PullRequestService.html":{},"miscellaneous/enumerations.html":{}}}],["rangetypeenum.recent",{"_index":1276,"title":{},"body":{"classes/ContributorPullRequestsDto.html":{},"injectables/PullRequestService.html":{}}}],["rate",{"_index":5818,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ratelimit",{"_index":5835,"title":{},"body":{"miscellaneous/variables.html":{}}}],["rawbody",{"_index":5729,"title":{},"body":{"miscellaneous/variables.html":{}}}],["rawbodyrequest",{"_index":3980,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["react",{"_index":4263,"title":{},"body":{"classes/UpdateUserProfileInterestsDto.html":{},"controllers/UserHighlightsController.html":{},"classes/UserOnboardingDto.html":{},"index.html":{}}}],["reacted",{"_index":2240,"title":{},"body":{"classes/DbUserHighlightReactionResponse.html":{},"classes/HighlightOptionsDto.html":{},"injectables/UserNotificationService.html":{}}}],["reaction",{"_index":1736,"title":{},"body":{"entities/DbEmoji.html":{},"entities/DbUserHighlightReaction.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{}}}],["reaction'})@apibadrequestresponse({description",{"_index":4545,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["reaction'})@apiparam({name",{"_index":4532,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["reaction.emoji",{"_index":2235,"title":{},"body":{"entities/DbUserHighlightReaction.html":{}}}],["reaction.emoji)@joincolumn({name",{"_index":2216,"title":{},"body":{"entities/DbUserHighlightReaction.html":{}}}],["reaction.entity",{"_index":405,"title":{},"body":{"modules/AppModule.html":{},"entities/DbEmoji.html":{},"entities/DbUserHighlight.html":{},"classes/DbUserHighlightReactionResponse.html":{},"classes/HighlightOptionsDto.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"modules/UserModule.html":{}}}],["reaction.entity.ts",{"_index":2211,"title":{},"body":{"entities/DbUserHighlightReaction.html":{},"coverage.html":{}}}],["reaction.entity.ts:102",{"_index":2221,"title":{},"body":{"entities/DbUserHighlightReaction.html":{}}}],["reaction.entity.ts:110",{"_index":2228,"title":{},"body":{"entities/DbUserHighlightReaction.html":{}}}],["reaction.entity.ts:118",{"_index":2217,"title":{},"body":{"entities/DbUserHighlightReaction.html":{}}}],["reaction.entity.ts:27",{"_index":2223,"title":{},"body":{"entities/DbUserHighlightReaction.html":{}}}],["reaction.entity.ts:38",{"_index":2222,"title":{},"body":{"entities/DbUserHighlightReaction.html":{}}}],["reaction.entity.ts:49",{"_index":2229,"title":{},"body":{"entities/DbUserHighlightReaction.html":{}}}],["reaction.entity.ts:59",{"_index":2219,"title":{},"body":{"entities/DbUserHighlightReaction.html":{}}}],["reaction.entity.ts:70",{"_index":2214,"title":{},"body":{"entities/DbUserHighlightReaction.html":{}}}],["reaction.entity.ts:81",{"_index":2226,"title":{},"body":{"entities/DbUserHighlightReaction.html":{}}}],["reaction.entity.ts:85",{"_index":2215,"title":{},"body":{"entities/DbUserHighlightReaction.html":{}}}],["reaction.entity.ts:94",{"_index":2225,"title":{},"body":{"entities/DbUserHighlightReaction.html":{}}}],["reaction.highlight",{"_index":2233,"title":{},"body":{"entities/DbUserHighlightReaction.html":{}}}],["reaction.highlight)@joincolumn({name",{"_index":2220,"title":{},"body":{"entities/DbUserHighlightReaction.html":{}}}],["reaction.user",{"_index":2234,"title":{},"body":{"entities/DbUserHighlightReaction.html":{}}}],["reaction.user)@joincolumn({name",{"_index":2227,"title":{},"body":{"entities/DbUserHighlightReaction.html":{}}}],["reaction_count",{"_index":2213,"title":{},"body":{"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightReactionResponse.html":{},"classes/HighlightOptionsDto.html":{},"injectables/UserHighlightsService.html":{}}}],["reaction_users",{"_index":2238,"title":{},"body":{"classes/DbUserHighlightReactionResponse.html":{},"classes/HighlightOptionsDto.html":{},"injectables/UserHighlightsService.html":{}}}],["reactionexists",{"_index":4703,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["reactionexists.deleted_at",{"_index":4704,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["reactions",{"_index":1735,"title":{},"body":{"entities/DbEmoji.html":{},"entities/DbUserHighlight.html":{},"controllers/HighlightController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{}}}],["reactions'})@apibadrequestresponse({description",{"_index":2753,"title":{},"body":{"controllers/HighlightController.html":{},"controllers/UserHighlightsController.html":{}}}],["read",{"_index":2319,"title":{},"body":{"entities/DbUserNotification.html":{},"miscellaneous/variables.html":{}}}],["read_at",{"_index":2304,"title":{},"body":{"entities/DbUserNotification.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{}}}],["readable",{"_index":1872,"title":{},"body":{"entities/DbPRInsight.html":{}}}],["readonly",{"_index":504,"title":{},"body":{"modules/AppModule.html":{},"controllers/BlogSummaryController.html":{},"classes/ContributionPageMetaDto.html":{},"classes/ContributionPageOptionsDto.html":{},"classes/ContributionsByProjectDto.html":{},"classes/ContributionsPageDto.html":{},"classes/ContributionsTimeframeDto.html":{},"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"classes/ContributorPullRequestsDto.html":{},"classes/CreateLogDto.html":{},"injectables/CustomLogger.html":{},"classes/DatabaseLoggerMiddleware.html":{},"classes/DbUserHighlightReactionResponse.html":{},"controllers/EndorsementController.html":{},"classes/FilterListContributorsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/FilteredUsersDto.html":{},"controllers/HealthController.html":{},"controllers/HighlightController.html":{},"classes/HighlightOptionsDto.html":{},"controllers/InsightController.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"controllers/IssueSummaryController.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{},"controllers/PizzaOvenController.html":{},"injectables/PizzaOvenService.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"controllers/PullRequestController.html":{},"classes/PullRequestPageOptionsDto.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"classes/SupabaseAuthDto.html":{},"classes/TopProjectsDto.html":{},"classes/TopUsersDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserEndorsementController.html":{},"controllers/UserFollowingController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"classes/UserListMostActiveContributorsDto.html":{},"controllers/UserListStatsController.html":{},"controllers/UserRecommendationController.html":{},"classes/UserRepoOptionsDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"classes/VotedRepoDto.html":{}}}],["rebaseable",{"_index":1902,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["receipient",{"_index":2169,"title":{},"body":{"entities/DbUserCollaboration.html":{}}}],["receive",{"_index":5849,"title":{},"body":{"miscellaneous/variables.html":{}}}],["receive_collaboration",{"_index":4253,"title":{},"body":{"classes/UpdateUserEmailPreferencesDto.html":{}}}],["receive_product_updates",{"_index":4254,"title":{},"body":{"classes/UpdateUserEmailPreferencesDto.html":{}}}],["received",{"_index":2441,"title":{},"body":{"controllers/EndorsementController.html":{},"controllers/UserEndorsementController.html":{},"miscellaneous/variables.html":{}}}],["recent",{"_index":1240,"title":{},"body":{"controllers/ContributorInsightsController.html":{},"classes/ContributorPullRequestsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"miscellaneous/enumerations.html":{}}}],["recieve",{"_index":4256,"title":{},"body":{"classes/UpdateUserEmailPreferencesDto.html":{}}}],["recipient",{"_index":1359,"title":{},"body":{"classes/CreateEndorsementDto.html":{},"classes/CreateUserCollaborationDto.html":{},"entities/DbEndorsement.html":{},"controllers/UserCollaborationController.html":{}}}],["recipient_user_id",{"_index":1352,"title":{},"body":{"classes/CreateEndorsementDto.html":{},"entities/DbEndorsement.html":{}}}],["recommendation.controller",{"_index":5116,"title":{},"body":{"modules/UserModule.html":{}}}],["recommendation.controller.ts",{"_index":5193,"title":{},"body":{"controllers/UserRecommendationController.html":{},"coverage.html":{}}}],["recommendation.controller.ts:27",{"_index":5206,"title":{},"body":{"controllers/UserRecommendationController.html":{}}}],["recommendation.controller.ts:43",{"_index":5202,"title":{},"body":{"controllers/UserRecommendationController.html":{}}}],["recommendations",{"_index":5208,"title":{},"body":{"controllers/UserRecommendationController.html":{}}}],["recommended",{"_index":5199,"title":{},"body":{"controllers/UserRecommendationController.html":{}}}],["record",{"_index":2463,"title":{},"body":{"controllers/EndorsementController.html":{},"guards/EndorsementTokenGuard.html":{},"injectables/RepoService.html":{}}}],["record'})@apiokresponse({type",{"_index":2418,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["record)[\"stripe",{"_index":4036,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["ref",{"_index":1967,"title":{},"body":{"entities/DbPullRequest.html":{},"miscellaneous/variables.html":{}}}],["refactor",{"_index":912,"title":{},"body":{"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"modules/PullRequestModule.html":{},"coverage.html":{}}}],["referencedcolumnname",{"_index":1618,"title":{},"body":{"entities/DbCommits.html":{},"entities/DbContribution.html":{},"entities/DbInsight.html":{},"entities/DbInsightRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserNotification.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserTopRepo.html":{}}}],["refusing",{"_index":5881,"title":{},"body":{"miscellaneous/variables.html":{}}}],["regexp_replace(regexp_replace(user_highlights.url",{"_index":4656,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["register",{"_index":4184,"title":{},"body":{"injectables/TierService.html":{}}}],["registeras(\"api",{"_index":5655,"title":{},"body":{"miscellaneous/variables.html":{}}}],["registeras(\"db",{"_index":5689,"title":{},"body":{"miscellaneous/variables.html":{}}}],["registeras(\"endpoint",{"_index":5712,"title":{},"body":{"miscellaneous/variables.html":{}}}],["registeras(\"hacktoberfest",{"_index":5778,"title":{},"body":{"miscellaneous/variables.html":{}}}],["registeras(\"openai",{"_index":5782,"title":{},"body":{"miscellaneous/variables.html":{}}}],["registeras(\"pizza",{"_index":5792,"title":{},"body":{"miscellaneous/variables.html":{}}}],["registeras(\"stripe",{"_index":5796,"title":{},"body":{"miscellaneous/variables.html":{}}}],["registeras(\"tier",{"_index":5890,"title":{},"body":{"miscellaneous/variables.html":{}}}],["registered",{"_index":4179,"title":{},"body":{"injectables/TierService.html":{}}}],["registration",{"_index":4087,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["rejectunauthorized",{"_index":463,"title":{},"body":{"modules/AppModule.html":{}}}],["release",{"_index":5353,"title":{},"body":{"index.html":{}}}],["relevantevents",{"_index":3989,"title":{},"body":{"controllers/StripeWebhookController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["relevantevents.has(event.type",{"_index":4042,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["remaining",{"_index":5836,"title":{},"body":{"miscellaneous/variables.html":{}}}],["remove",{"_index":2507,"title":{},"body":{"injectables/EndorsementService.html":{},"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"properties.html":{}}}],["remove(id",{"_index":2526,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["removeafeaturedhighlight",{"_index":2757,"title":{},"body":{"controllers/HighlightController.html":{}}}],["removed",{"_index":3704,"title":{},"body":{"controllers/RepoStarController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StarService.html":{},"injectables/SubmitService.html":{},"injectables/VoteService.html":{}}}],["removefeatured",{"_index":4608,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["removefeatured(highlightid",{"_index":4639,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["removeinsight",{"_index":2963,"title":{},"body":{"injectables/InsightsService.html":{}}}],["removeinsight(id",{"_index":2974,"title":{},"body":{"injectables/InsightsService.html":{}}}],["removeinsightforuser",{"_index":2823,"title":{},"body":{"controllers/InsightController.html":{}}}],["removeinsightforuser(@param(\"id",{"_index":2852,"title":{},"body":{"controllers/InsightController.html":{}}}],["removeinsightforuser(id",{"_index":2832,"title":{},"body":{"controllers/InsightController.html":{}}}],["removeinsightmember",{"_index":2861,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["removeinsightmember(id",{"_index":2879,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["removeinsightmemberbyid",{"_index":4713,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["removeinsightmemberbyid(id",{"_index":4727,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["removeinsightrepo",{"_index":2918,"title":{},"body":{"injectables/InsightRepoService.html":{}}}],["removeinsightrepo(id",{"_index":2925,"title":{},"body":{"injectables/InsightRepoService.html":{}}}],["removes",{"_index":2834,"title":{},"body":{"controllers/InsightController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserInsightMemberController.html":{}}}],["removeusercollaboration",{"_index":4313,"title":{},"body":{"injectables/UserCollaborationService.html":{}}}],["removeusercollaboration(id",{"_index":4322,"title":{},"body":{"injectables/UserCollaborationService.html":{}}}],["removeusercollaborationbyid",{"_index":4270,"title":{},"body":{"controllers/UserCollaborationController.html":{}}}],["removeusercollaborationbyid(@param(\"id",{"_index":4308,"title":{},"body":{"controllers/UserCollaborationController.html":{}}}],["removeusercollaborationbyid(id",{"_index":4284,"title":{},"body":{"controllers/UserCollaborationController.html":{}}}],["removeuserfollowerbyid",{"_index":4425,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["removeuserfollowerbyid(userid",{"_index":4441,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["repeat",{"_index":1250,"title":{},"body":{"controllers/ContributorInsightsController.html":{}}}],["repo",{"_index":742,"title":{},"body":{"classes/BakeRepoDto.html":{},"modules/ContributionModule.html":{},"controllers/ContributorInsightsController.html":{},"entities/DbCommits.html":{},"entities/DbContribution.html":{},"entities/DbContributionsProjects.html":{},"entities/DbInsightRepo.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserHighlight.html":{},"classes/DbUserHighlightReactionResponse.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserRepo.html":{},"entities/DbUserTopRepo.html":{},"controllers/EndorsementController.html":{},"injectables/EndorsementService.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"controllers/PizzaOvenController.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"modules/RepoFilterModule.html":{},"injectables/RepoFilterService.html":{},"classes/RepoInfo.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"modules/StarModule.html":{},"injectables/StarService.html":{},"modules/StargazeModule.html":{},"injectables/StargazeService.html":{},"modules/SubmitModule.html":{},"injectables/SubmitService.html":{},"classes/TopProjectsDto.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightsController.html":{},"classes/UserRepoOptionsDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"injectables/UserReposService.html":{},"modules/VoteModule.html":{},"injectables/VoteService.html":{},"classes/VotedRepoDto.html":{},"coverage.html":{},"index.html":{}}}],["repo'})@apiokresponse({type",{"_index":3509,"title":{},"body":{"controllers/RepoController.html":{}}}],["repo'})@apiparam({name",{"_index":3717,"title":{},"body":{"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{}}}],["repo.contributions",{"_index":1682,"title":{},"body":{"entities/DbContribution.html":{},"injectables/RepoService.html":{}}}],["repo.contributions)@joincolumn({name",{"_index":1664,"title":{},"body":{"entities/DbContribution.html":{}}}],["repo.controller",{"_index":3569,"title":{},"body":{"modules/RepoModule.html":{}}}],["repo.dto",{"_index":2929,"title":{},"body":{"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"controllers/PizzaOvenController.html":{},"injectables/PizzaOvenService.html":{}}}],["repo.dto.ts",{"_index":740,"title":{},"body":{"classes/BakeRepoDto.html":{},"coverage.html":{}}}],["repo.dto.ts:11",{"_index":746,"title":{},"body":{"classes/BakeRepoDto.html":{}}}],["repo.dto.ts:19",{"_index":753,"title":{},"body":{"classes/BakeRepoDto.html":{}}}],["repo.entity",{"_index":348,"title":{},"body":{"modules/AppModule.html":{},"entities/DbCommits.html":{},"entities/DbInsight.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"controllers/HighlightController.html":{},"injectables/InsightRepoService.html":{},"modules/InsightsModule.html":{},"controllers/PizzaOvenController.html":{},"modules/PizzaOvenModule.html":{},"injectables/PizzaOvenService.html":{},"controllers/UserHighlightsController.html":{},"modules/UserModule.html":{},"modules/UserReposModule.html":{},"injectables/UserReposService.html":{}}}],["repo.entity.ts",{"_index":1571,"title":{},"body":{"entities/DbBakedRepo.html":{},"entities/DbInsightRepo.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserRepo.html":{},"entities/DbUserTopRepo.html":{},"coverage.html":{}}}],["repo.entity.ts:15",{"_index":2345,"title":{},"body":{"entities/DbUserRepo.html":{}}}],["repo.entity.ts:20",{"_index":1586,"title":{},"body":{"entities/DbBakedRepo.html":{}}}],["repo.entity.ts:22",{"_index":2348,"title":{},"body":{"entities/DbUserRepo.html":{}}}],["repo.entity.ts:27",{"_index":2363,"title":{},"body":{"entities/DbUserTopRepo.html":{}}}],["repo.entity.ts:29",{"_index":2347,"title":{},"body":{"entities/DbUserRepo.html":{}}}],["repo.entity.ts:30",{"_index":1578,"title":{},"body":{"entities/DbBakedRepo.html":{},"entities/DbInsightRepo.html":{}}}],["repo.entity.ts:35",{"_index":2369,"title":{},"body":{"entities/DbUserTopRepo.html":{}}}],["repo.entity.ts:36",{"_index":2344,"title":{},"body":{"entities/DbUserRepo.html":{}}}],["repo.entity.ts:38",{"_index":1588,"title":{},"body":{"entities/DbBakedRepo.html":{},"entities/DbInsightRepo.html":{}}}],["repo.entity.ts:42",{"_index":1581,"title":{},"body":{"entities/DbBakedRepo.html":{}}}],["repo.entity.ts:43",{"_index":2366,"title":{},"body":{"entities/DbUserTopRepo.html":{}}}],["repo.entity.ts:46",{"_index":1848,"title":{},"body":{"entities/DbInsightRepo.html":{},"entities/DbUserRepo.html":{}}}],["repo.entity.ts:53",{"_index":1845,"title":{},"body":{"entities/DbInsightRepo.html":{},"entities/DbUserTopRepo.html":{}}}],["repo.entity.ts:63",{"_index":1842,"title":{},"body":{"entities/DbInsightRepo.html":{},"entities/DbUserTopRepo.html":{}}}],["repo.entity.ts:70",{"_index":2361,"title":{},"body":{"entities/DbUserTopRepo.html":{}}}],["repo.entity.ts:73",{"_index":1843,"title":{},"body":{"entities/DbInsightRepo.html":{}}}],["repo.entity.ts:78",{"_index":2368,"title":{},"body":{"entities/DbUserTopRepo.html":{}}}],["repo.entity.ts:8",{"_index":2252,"title":{},"body":{"classes/DbUserHighlightRepo.html":{}}}],["repo.entity.ts:81",{"_index":1847,"title":{},"body":{"entities/DbInsightRepo.html":{}}}],["repo.entity.ts:86",{"_index":2365,"title":{},"body":{"entities/DbUserTopRepo.html":{}}}],["repo.fullname",{"_index":2946,"title":{},"body":{"injectables/InsightRepoService.html":{},"injectables/UserReposService.html":{}}}],["repo.id",{"_index":2945,"title":{},"body":{"injectables/InsightRepoService.html":{},"injectables/RepoService.html":{},"injectables/UserReposService.html":{}}}],["repo.repo_id",{"_index":4801,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["repo.repotouser${relation",{"_index":3655,"title":{},"body":{"injectables/RepoService.html":{}}}],["repo.repotouserstargazers",{"_index":2046,"title":{},"body":{"entities/DbRepoToUserStargazers.html":{},"injectables/RepoService.html":{}}}],["repo.repotouserstargazers)@joincolumn({name",{"_index":2037,"title":{},"body":{"entities/DbRepoToUserStargazers.html":{}}}],["repo.repotouserstars",{"_index":2061,"title":{},"body":{"entities/DbRepoToUserStars.html":{},"injectables/RepoService.html":{}}}],["repo.repotouserstars)@joincolumn({name",{"_index":2052,"title":{},"body":{"entities/DbRepoToUserStars.html":{}}}],["repo.repotousersubmissions",{"_index":2079,"title":{},"body":{"entities/DbRepoToUserSubmissions.html":{},"injectables/RepoService.html":{}}}],["repo.repotousersubmissions)@joincolumn({name",{"_index":2070,"title":{},"body":{"entities/DbRepoToUserSubmissions.html":{}}}],["repo.repotousertoprepos",{"_index":2372,"title":{},"body":{"entities/DbUserTopRepo.html":{}}}],["repo.repotousertoprepos)@joincolumn({name",{"_index":2364,"title":{},"body":{"entities/DbUserTopRepo.html":{}}}],["repo.repotouservotes",{"_index":2094,"title":{},"body":{"entities/DbRepoToUserVotes.html":{},"injectables/RepoService.html":{}}}],["repo.repotouservotes)@joincolumn({name",{"_index":2085,"title":{},"body":{"entities/DbRepoToUserVotes.html":{}}}],["repo.service",{"_index":2956,"title":{},"body":{"modules/InsightsModule.html":{},"controllers/RepoController.html":{},"modules/RepoModule.html":{},"controllers/UserInsightsController.html":{}}}],["repo.service.ts",{"_index":2916,"title":{},"body":{"injectables/InsightRepoService.html":{},"coverage.html":{}}}],["repo.service.ts:11",{"_index":2921,"title":{},"body":{"injectables/InsightRepoService.html":{}}}],["repo.service.ts:18",{"_index":2924,"title":{},"body":{"injectables/InsightRepoService.html":{}}}],["repo.service.ts:36",{"_index":2926,"title":{},"body":{"injectables/InsightRepoService.html":{}}}],["repo/dtos/repo",{"_index":1384,"title":{},"body":{"classes/CreateInsightDto.html":{},"injectables/InsightRepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/UserReposService.html":{}}}],["repo/dtos/user",{"_index":3845,"title":{},"body":{"controllers/RepoVoteController.html":{},"classes/UserRepoOptionsDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"classes/VotedRepoDto.html":{},"coverage.html":{}}}],["repo/entities/repo.entity",{"_index":333,"title":{},"body":{"modules/AppModule.html":{},"modules/ContributionModule.html":{},"entities/DbContribution.html":{},"entities/DbUserTopRepo.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"modules/StarModule.html":{},"modules/StargazeModule.html":{},"modules/SubmitModule.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"controllers/UserRecommendationController.html":{},"modules/VoteModule.html":{}}}],["repo/entities/repo.to.user.stargazers.entity",{"_index":345,"title":{},"body":{"modules/AppModule.html":{},"controllers/RepoStargazeController.html":{},"modules/StargazeModule.html":{},"injectables/StargazeService.html":{}}}],["repo/entities/repo.to.user.stars.entity",{"_index":341,"title":{},"body":{"modules/AppModule.html":{},"controllers/RepoStarController.html":{},"modules/StarModule.html":{},"injectables/StarService.html":{}}}],["repo/entities/repo.to.user.submissions.entity",{"_index":343,"title":{},"body":{"modules/AppModule.html":{},"controllers/RepoSubmitController.html":{},"modules/SubmitModule.html":{},"injectables/SubmitService.html":{}}}],["repo/entities/repo.to.user.votes.entity",{"_index":339,"title":{},"body":{"modules/AppModule.html":{},"controllers/RepoVoteController.html":{},"classes/UserRepoOptionsDto-1.html":{},"modules/VoteModule.html":{},"injectables/VoteService.html":{},"classes/VotedRepoDto.html":{}}}],["repo/repo.module",{"_index":330,"title":{},"body":{"modules/AppModule.html":{},"modules/ContributionModule.html":{},"modules/StarModule.html":{},"modules/StargazeModule.html":{},"modules/SubmitModule.html":{},"modules/UserModule.html":{},"modules/VoteModule.html":{}}}],["repo/repo.service",{"_index":3478,"title":{},"body":{"controllers/RepoContributionsController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"controllers/UserRecommendationController.html":{}}}],["repo/user",{"_index":370,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"entities/DbUserRepo.html":{},"modules/UserReposModule.html":{},"injectables/UserReposService.html":{},"coverage.html":{}}}],["repo_id",{"_index":193,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"classes/CreateEndorsementDto.html":{},"entities/DbBakedRepo.html":{},"entities/DbContribution.html":{},"entities/DbContributionsProjects.html":{},"entities/DbEndorsement.html":{},"entities/DbInsightRepo.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserRepo.html":{},"entities/DbUserTopRepo.html":{},"injectables/InsightRepoService.html":{},"injectables/RepoService.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/SubmitService.html":{},"classes/TopProjectsDto.html":{},"injectables/UserListStatsService.html":{},"injectables/UserReposService.html":{},"injectables/VoteService.html":{}}}],["repo_user_contributions",{"_index":2029,"title":{},"body":{"entities/DbRepoLoginContributions.html":{}}}],["repocontributionscontroller",{"_index":1033,"title":{"controllers/RepoContributionsController.html":{}},"body":{"modules/ContributionModule.html":{},"controllers/RepoContributionsController.html":{},"coverage.html":{}}}],["repocontroller",{"_index":3495,"title":{"controllers/RepoController.html":{}},"body":{"controllers/RepoController.html":{},"modules/RepoModule.html":{},"coverage.html":{}}}],["repofilterfieldsenum",{"_index":3573,"title":{},"body":{"classes/RepoPageOptionsDto.html":{},"miscellaneous/enumerations.html":{}}}],["repofiltermodule",{"_index":3336,"title":{"modules/RepoFilterModule.html":{}},"body":{"modules/PullRequestModule.html":{},"modules/RepoFilterModule.html":{},"modules/RepoModule.html":{},"modules.html":{},"overview.html":{}}}],["repofilterservice",{"_index":3276,"title":{"injectables/RepoFilterService.html":{}},"body":{"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"modules/RepoFilterModule.html":{},"injectables/RepoFilterService.html":{},"injectables/RepoService.html":{},"modules/UserModule.html":{},"coverage.html":{},"overview.html":{}}}],["repoid",{"_index":80,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/ContributionService.html":{},"controllers/RepoVoteController.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/SubmitService.html":{},"injectables/UserListStatsService.html":{},"injectables/VoteService.html":{}}}],["repoids",{"_index":2606,"title":{},"body":{"classes/FilterOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"injectables/PullRequestInsightsService.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{},"injectables/RepoFilterService.html":{},"classes/RepoSearchOptionsDto.html":{}}}],["repoinfo",{"_index":1382,"title":{"classes/RepoInfo.html":{}},"body":{"classes/CreateInsightDto.html":{},"injectables/InsightRepoService.html":{},"classes/RepoInfo.html":{},"classes/UpdateInsightDto.html":{},"controllers/UserInsightsController.html":{},"injectables/UserReposService.html":{},"coverage.html":{}}}],["repoinfo.id",{"_index":4800,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["repomodule",{"_index":276,"title":{"modules/RepoModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ContributionModule.html":{},"modules/RepoModule.html":{},"modules/StarModule.html":{},"modules/StargazeModule.html":{},"modules/SubmitModule.html":{},"modules/UserModule.html":{},"modules/VoteModule.html":{},"modules.html":{},"overview.html":{}}}],["repoorderfieldsenum",{"_index":1081,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"miscellaneous/enumerations.html":{}}}],["repoorderfieldsenum.stars",{"_index":3570,"title":{},"body":{"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{}}}],["repoowneroruser",{"_index":2432,"title":{},"body":{"controllers/EndorsementController.html":{},"injectables/EndorsementService.html":{}}}],["repoowneroruser.tolowercase",{"_index":2539,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["repopageoptionsdto",{"_index":3499,"title":{"classes/RepoPageOptionsDto.html":{}},"body":{"controllers/RepoController.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"coverage.html":{}}}],["repopageoptionsdto:37",{"_index":3585,"title":{},"body":{"classes/RepoSearchOptionsDto.html":{}}}],["reporepository",{"_index":3594,"title":{},"body":{"injectables/RepoService.html":{}}}],["report",{"_index":5465,"title":{},"body":{"index.html":{}}}],["repos",{"_index":203,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"classes/CreateInsightDto.html":{},"entities/DbInsight.html":{},"injectables/EndorsementService.html":{},"controllers/HighlightController.html":{},"classes/InsightOptionsDto.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"controllers/PizzaOvenController.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"injectables/RepoFilterService.html":{},"classes/RepoPageOptionsDto.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"classes/UpdateInsightDto.html":{},"controllers/UserController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightsController.html":{},"injectables/UserListStatsService.html":{},"controllers/UserRecommendationController.html":{},"classes/UserRepoOptionsDto-1.html":{},"classes/VotedRepoDto.html":{},"miscellaneous/enumerations.html":{}}}],["repos\".\"id",{"_index":206,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/RepoService.html":{},"injectables/UserListStatsService.html":{}}}],["repos\".\"updated_at",{"_index":3665,"title":{},"body":{"injectables/RepoService.html":{}}}],["repos')@apioperation({operationid",{"_index":4356,"title":{},"body":{"controllers/UserController.html":{}}}],["repos'})@apibody({type",{"_index":4777,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["repos.dto",{"_index":3846,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["repos.dto.ts",{"_index":5217,"title":{},"body":{"classes/UserRepoOptionsDto-1.html":{},"classes/VotedRepoDto.html":{},"coverage.html":{}}}],["repos.dto.ts:13",{"_index":5218,"title":{},"body":{"classes/UserRepoOptionsDto-1.html":{}}}],["repos.dto.ts:23",{"_index":5278,"title":{},"body":{"classes/VotedRepoDto.html":{}}}],["repos.dto.ts:26",{"_index":5276,"title":{},"body":{"classes/VotedRepoDto.html":{}}}],["repos.full_name",{"_index":3686,"title":{},"body":{"injectables/RepoService.html":{}}}],["repos.id",{"_index":224,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/RepoFilterService.html":{},"injectables/UserListStatsService.html":{}}}],["repos.module",{"_index":371,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["repos.module.ts",{"_index":5225,"title":{},"body":{"modules/UserReposModule.html":{}}}],["repos.service",{"_index":5226,"title":{},"body":{"modules/UserReposModule.html":{}}}],["repos.service.ts",{"_index":5228,"title":{},"body":{"injectables/UserReposService.html":{},"coverage.html":{}}}],["repos.service.ts:13",{"_index":5231,"title":{},"body":{"injectables/UserReposService.html":{}}}],["repos.service.ts:20",{"_index":5235,"title":{},"body":{"injectables/UserReposService.html":{}}}],["repos.service.ts:26",{"_index":5237,"title":{},"body":{"injectables/UserReposService.html":{}}}],["repos.service.ts:40",{"_index":5234,"title":{},"body":{"injectables/UserReposService.html":{}}}],["repos.service.ts:50",{"_index":5236,"title":{},"body":{"injectables/UserReposService.html":{}}}],["reposearchoptionsdto",{"_index":3503,"title":{"classes/RepoSearchOptionsDto.html":{}},"body":{"controllers/RepoController.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"coverage.html":{}}}],["reposervice",{"_index":3477,"title":{"injectables/RepoService.html":{}},"body":{"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"modules/RepoModule.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"controllers/UserRecommendationController.html":{},"coverage.html":{},"overview.html":{}}}],["repositories",{"_index":1441,"title":{},"body":{"classes/CreateUserHighlightDto.html":{},"entities/DbUserHighlight.html":{}}}],["repository",{"_index":20,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/CommitAuthorsService.html":{},"injectables/CommitsService.html":{},"injectables/ContributionService.html":{},"injectables/CouponService.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateInsightDto.html":{},"injectables/CustomerService.html":{},"entities/DbBakedRepo.html":{},"entities/DbContribution.html":{},"entities/DbEndorsement.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserTopRepo.html":{},"injectables/EmojiService.html":{},"injectables/EndorsementService.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"injectables/LogService.html":{},"controllers/PizzaOvenController.html":{},"injectables/PizzaOvenService.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestReviewService.html":{},"injectables/PullRequestService.html":{},"controllers/RepoController.html":{},"injectables/RepoService.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeSubscriptionService.html":{},"injectables/SubmitService.html":{},"classes/UpdateInsightDto.html":{},"injectables/UserCollaborationService.html":{},"injectables/UserFollowService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserListService.html":{},"injectables/UserListStatsService.html":{},"injectables/UserNotificationService.html":{},"injectables/UserOrganizationService.html":{},"injectables/UserReposService.html":{},"injectables/VoteService.html":{},"index.html":{},"properties.html":{}}}],["repostarcontroller",{"_index":3689,"title":{"controllers/RepoStarController.html":{}},"body":{"controllers/RepoStarController.html":{},"modules/StarModule.html":{},"coverage.html":{}}}],["repostargazecontroller",{"_index":3736,"title":{"controllers/RepoStargazeController.html":{}},"body":{"controllers/RepoStargazeController.html":{},"modules/StargazeModule.html":{},"coverage.html":{}}}],["repostargazerepository",{"_index":3901,"title":{},"body":{"injectables/StargazeService.html":{}}}],["repostarrepository",{"_index":3872,"title":{},"body":{"injectables/StarService.html":{}}}],["repostoadd",{"_index":4809,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["repostoadd.map(async",{"_index":4813,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["repostoremove",{"_index":4797,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["repostoremove.map(async",{"_index":4803,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["repostoremoverequests",{"_index":4802,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["reposubmitcontroller",{"_index":3774,"title":{"controllers/RepoSubmitController.html":{}},"body":{"controllers/RepoSubmitController.html":{},"modules/SubmitModule.html":{},"coverage.html":{}}}],["reposubmitrepository",{"_index":4067,"title":{},"body":{"injectables/SubmitService.html":{}}}],["repotoaddrequests",{"_index":4812,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["repovotecontroller",{"_index":3811,"title":{"controllers/RepoVoteController.html":{}},"body":{"controllers/RepoVoteController.html":{},"modules/VoteModule.html":{},"coverage.html":{}}}],["repovoterepository",{"_index":5256,"title":{},"body":{"injectables/VoteService.html":{}}}],["representation",{"_index":5547,"title":{},"body":{"index.html":{}}}],["representing",{"_index":1648,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbCoupon.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbPullRequestReview.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserNotification.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"classes/SupabaseAuthDto.html":{}}}],["req",{"_index":3983,"title":{},"body":{"controllers/StripeWebhookController.html":{},"injectables/SupabaseStrategy.html":{},"index.html":{}}}],["req.headers",{"_index":4035,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["request",{"_index":391,"title":{},"body":{"modules/AppModule.html":{},"controllers/BlogSummaryController.html":{},"controllers/CodeExplanationController.html":{},"controllers/CodeRefactorSuggestionController.html":{},"controllers/CodeTestSuggestionController.html":{},"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"classes/CreateUserCollaborationDto.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbPullRequestReview.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"guards/EndorsementTokenGuard.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"controllers/HighlightController.html":{},"injectables/HttpLoggerMiddleware.html":{},"controllers/InsightController.html":{},"controllers/IssueSummaryController.html":{},"controllers/PizzaOvenController.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestInsightsService.html":{},"modules/PullRequestModule.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestReviewService.html":{},"injectables/PullRequestService.html":{},"classes/UpdateUserCollaborationDto.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"controllers/UserListStatsController.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["request'})@apibearerauth()@useguards(supabaseguard)@apinotfoundresponse({description",{"_index":4285,"title":{},"body":{"controllers/UserCollaborationController.html":{}}}],["request'})@apibody({type",{"_index":770,"title":{},"body":{"controllers/BlogSummaryController.html":{},"controllers/CodeExplanationController.html":{},"controllers/CodeRefactorSuggestionController.html":{},"controllers/CodeTestSuggestionController.html":{},"controllers/InsightController.html":{},"controllers/IssueSummaryController.html":{},"controllers/PizzaOvenController.html":{},"controllers/PullRequestDescriptionController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{}}}],["request'})@apiconflictresponse({description",{"_index":4275,"title":{},"body":{"controllers/UserCollaborationController.html":{},"controllers/UserHighlightsController.html":{}}}],["request'})@apiparam({name",{"_index":2733,"title":{},"body":{"controllers/HighlightController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserListController.html":{},"controllers/UserListStatsController.html":{}}}],["request'})@apiunprocessableentityresponse({description",{"_index":4733,"title":{},"body":{"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["request.controller",{"_index":3339,"title":{},"body":{"modules/PullRequestModule.html":{}}}],["request.controller.ts",{"_index":3204,"title":{},"body":{"controllers/PullRequestController.html":{},"coverage.html":{}}}],["request.controller.ts:32",{"_index":3220,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["request.controller.ts:43",{"_index":3223,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["request.controller.ts:53",{"_index":3212,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["request.controller.ts:66",{"_index":3217,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["request.entity",{"_index":389,"title":{},"body":{"modules/AppModule.html":{},"modules/ContributionModule.html":{},"injectables/ContributionService.html":{},"modules/ContributorModule.html":{},"entities/DbPullRequestReview.html":{},"controllers/PullRequestController.html":{},"modules/PullRequestModule.html":{},"injectables/PullRequestService.html":{},"controllers/UserController.html":{},"modules/UserListModule.html":{},"injectables/UserListService.html":{}}}],["request.entity.ts",{"_index":1886,"title":{},"body":{"entities/DbPullRequest.html":{},"coverage.html":{}}}],["request.entity.ts:100",{"_index":1966,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:107",{"_index":1973,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:127",{"_index":1952,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:137",{"_index":1942,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:144",{"_index":1919,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:151",{"_index":1917,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:16",{"_index":1939,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:161",{"_index":1915,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:171",{"_index":1914,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:181",{"_index":1931,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:191",{"_index":1926,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:201",{"_index":1957,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:208",{"_index":1959,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:218",{"_index":1982,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:228",{"_index":1954,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:23",{"_index":1964,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:236",{"_index":1927,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:244",{"_index":1910,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:252",{"_index":1933,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:260",{"_index":1923,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:271",{"_index":1936,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:279",{"_index":1929,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:31",{"_index":1962,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:38",{"_index":1971,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:45",{"_index":1935,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:52",{"_index":1956,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:59",{"_index":1955,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:66",{"_index":1963,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:73",{"_index":1981,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:83",{"_index":1969,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:93",{"_index":1975,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.headers[\"x",{"_index":2563,"title":{},"body":{"guards/EndorsementTokenGuard.html":{}}}],["request.module",{"_index":386,"title":{},"body":{"modules/AppModule.html":{},"modules/ContributorModule.html":{},"modules/UserModule.html":{}}}],["request.module.ts",{"_index":3337,"title":{},"body":{"modules/PullRequestModule.html":{}}}],["request.service",{"_index":1220,"title":{},"body":{"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"controllers/PullRequestController.html":{},"modules/PullRequestModule.html":{},"controllers/UserController.html":{}}}],["request.service.ts",{"_index":3369,"title":{},"body":{"injectables/PullRequestService.html":{},"coverage.html":{}}}],["request.service.ts:109",{"_index":3396,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["request.service.ts:174",{"_index":3390,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["request.service.ts:21",{"_index":3382,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["request.service.ts:228",{"_index":3398,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["request.service.ts:266",{"_index":3392,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["request.service.ts:285",{"_index":3388,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["request.service.ts:29",{"_index":3383,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["request.service.ts:323",{"_index":3394,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["request.service.ts:35",{"_index":3406,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["request.service.ts:361",{"_index":3402,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["request.service.ts:47",{"_index":3405,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["request.service.ts:60",{"_index":3384,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["request.service.ts:76",{"_index":3386,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["request.user",{"_index":5901,"title":{},"body":{"miscellaneous/variables.html":{}}}],["request_emailed_at",{"_index":2148,"title":{},"body":{"entities/DbUserCollaboration.html":{}}}],["request_user",{"_index":2149,"title":{},"body":{"entities/DbUserCollaboration.html":{},"injectables/UserCollaborationService.html":{}}}],["request_user_id",{"_index":2150,"title":{},"body":{"entities/DbUserCollaboration.html":{}}}],["requested",{"_index":4276,"title":{},"body":{"controllers/UserCollaborationController.html":{},"miscellaneous/variables.html":{}}}],["requester",{"_index":4300,"title":{},"body":{"controllers/UserCollaborationController.html":{}}}],["requester.role",{"_index":4302,"title":{},"body":{"controllers/UserCollaborationController.html":{}}}],["requestmethod",{"_index":300,"title":{},"body":{"modules/AppModule.html":{}}}],["requestmethod.all",{"_index":500,"title":{},"body":{"modules/AppModule.html":{}}}],["requests",{"_index":198,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"controllers/CodeExplanationController.html":{},"controllers/CodeRefactorSuggestionController.html":{},"controllers/CodeTestSuggestionController.html":{},"controllers/ContributorController.html":{},"entities/DbContribution.html":{},"entities/DbPRInsight.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserController.html":{},"injectables/UserListStatsService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["requests'})@apibody({type",{"_index":4278,"title":{},"body":{"controllers/UserCollaborationController.html":{}}}],["requests/code",{"_index":879,"title":{},"body":{"controllers/CodeExplanationController.html":{},"injectables/CodeExplanationService.html":{},"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"controllers/CodeTestSuggestionController.html":{},"injectables/CodeTestSuggestionService.html":{},"coverage.html":{}}}],["requests/dtos/create",{"_index":2633,"title":{},"body":{"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"coverage.html":{}}}],["requests/dtos/pull",{"_index":1221,"title":{},"body":{"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"classes/DbPullRequestContributor.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["requests/entities/pull",{"_index":388,"title":{},"body":{"modules/AppModule.html":{},"modules/ContributionModule.html":{},"injectables/ContributionService.html":{},"modules/ContributorModule.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbPullRequestReview.html":{},"controllers/UserController.html":{},"modules/UserListModule.html":{},"injectables/UserListService.html":{},"coverage.html":{}}}],["requests/pull",{"_index":385,"title":{},"body":{"modules/AppModule.html":{},"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"modules/ContributorModule.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestInsightsService.html":{},"modules/PullRequestModule.html":{},"injectables/PullRequestReviewService.html":{},"injectables/PullRequestService.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["require(\"node",{"_index":857,"title":{},"body":{"interfaces/ChatResponse.html":{},"injectables/OpenAiService.html":{}}}],["required",{"_index":3464,"title":{},"body":{"controllers/RepoContributionsController.html":{},"injectables/StripeService.html":{},"controllers/UserController.html":{},"controllers/UserListStatsController.html":{}}}],["requires",{"_index":5876,"title":{},"body":{"miscellaneous/variables.html":{}}}],["reserved",{"_index":4242,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["reset",{"_index":250,"title":{},"body":{"modules/ApiServicesModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/BlogSummaryModule.html":{},"modules/ContributionModule.html":{},"modules/ContributorModule.html":{},"modules/CouponModule.html":{},"modules/CustomerModule.html":{},"modules/EmojiModule.html":{},"modules/EndorsementModule.html":{},"modules/HighlightModule.html":{},"modules/InsightsModule.html":{},"modules/IssueSummaryModule.html":{},"modules/LogModule.html":{},"modules/OpenAiModule.html":{},"modules/PizzaOvenModule.html":{},"modules/PullRequestModule.html":{},"modules/RepoFilterModule.html":{},"modules/RepoModule.html":{},"modules/StarModule.html":{},"modules/StargazeModule.html":{},"modules/StripeModule.html":{},"modules/StripeSubscriptionModule.html":{},"modules/StripeWebHookModule.html":{},"modules/SubmitModule.html":{},"modules/TierModule.html":{},"modules/UserListModule.html":{},"modules/UserModule.html":{},"modules/UserReposModule.html":{},"modules/VoteModule.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["resets",{"_index":5838,"title":{},"body":{"miscellaneous/variables.html":{}}}],["resource",{"_index":5884,"title":{},"body":{"miscellaneous/variables.html":{}}}],["resources",{"_index":5811,"title":{},"body":{"miscellaneous/variables.html":{}}}],["resp.status",{"_index":3198,"title":{},"body":{"injectables/PizzaOvenService.html":{}}}],["respond",{"_index":5846,"title":{},"body":{"miscellaneous/variables.html":{}}}],["response",{"_index":823,"title":{},"body":{"injectables/BlogSummaryService.html":{},"interfaces/ChatResponse.html":{},"injectables/HttpLoggerMiddleware.html":{},"injectables/IssueSummaryService.html":{},"injectables/OpenAiService.html":{},"injectables/PullRequestDescriptionService.html":{},"miscellaneous/variables.html":{}}}],["response.decorator",{"_index":1218,"title":{},"body":{"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"controllers/EmojiController.html":{},"controllers/EndorsementController.html":{},"controllers/HighlightController.html":{},"controllers/PizzaOvenController.html":{},"controllers/PullRequestController.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"controllers/UserListStatsController.html":{},"controllers/UserRecommendationController.html":{}}}],["response.decorator.ts",{"_index":5292,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["response.dto",{"_index":634,"title":{},"body":{"controllers/AuthController.html":{}}}],["response.dto.ts",{"_index":4084,"title":{},"body":{"classes/SupabaseAuthDto.html":{},"coverage.html":{}}}],["response.dto.ts:105",{"_index":4118,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["response.dto.ts:111",{"_index":4096,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["response.dto.ts:117",{"_index":4115,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["response.dto.ts:123",{"_index":4101,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["response.dto.ts:129",{"_index":4094,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["response.dto.ts:136",{"_index":4121,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["response.dto.ts:14",{"_index":4130,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["response.dto.ts:143",{"_index":4105,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["response.dto.ts:149",{"_index":4090,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["response.dto.ts:20",{"_index":4122,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["response.dto.ts:26",{"_index":4098,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["response.dto.ts:32",{"_index":4089,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["response.dto.ts:38",{"_index":4112,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["response.dto.ts:44",{"_index":4091,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["response.dto.ts:50",{"_index":4126,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["response.dto.ts:56",{"_index":4109,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["response.dto.ts:62",{"_index":4111,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["response.dto.ts:69",{"_index":4106,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["response.dto.ts:75",{"_index":4085,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["response.dto.ts:8",{"_index":4102,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["response.dto.ts:81",{"_index":4120,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["response.dto.ts:87",{"_index":4129,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["response.dto.ts:93",{"_index":4125,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["response.dto.ts:99",{"_index":4086,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["response.json",{"_index":874,"title":{},"body":{"interfaces/ChatResponse.html":{},"injectables/OpenAiService.html":{}}}],["response.ok",{"_index":872,"title":{},"body":{"interfaces/ChatResponse.html":{},"injectables/OpenAiService.html":{}}}],["response.on(\"finish",{"_index":2810,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{}}}],["rest",{"_index":5807,"title":{},"body":{"miscellaneous/variables.html":{}}}],["restriction",{"_index":5561,"title":{},"body":{"license.html":{}}}],["results",{"_index":239,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"modules/ApiServicesModule.html":{},"modules/AppModule.html":{},"classes/ApplyUserCouponDto.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"classes/BakeRepoDto.html":{},"controllers/BlogSummaryController.html":{},"modules/BlogSummaryModule.html":{},"injectables/BlogSummaryService.html":{},"interfaces/ChatResponse.html":{},"controllers/CodeExplanationController.html":{},"injectables/CodeExplanationService.html":{},"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"controllers/CodeTestSuggestionController.html":{},"injectables/CodeTestSuggestionService.html":{},"classes/CollaboratorsDto.html":{},"classes/CommitAuthorDto.html":{},"injectables/CommitAuthorsService.html":{},"classes/CommitsDto.html":{},"injectables/CommitsService.html":{},"modules/ContributionModule.html":{},"classes/ContributionPageMetaDto.html":{},"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"classes/ContributionsByProjectDto.html":{},"classes/ContributionsPageDto.html":{},"classes/ContributionsTimeframeDto.html":{},"classes/Contributor.html":{},"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"modules/ContributorModule.html":{},"classes/ContributorPullRequestsDto.html":{},"modules/CouponModule.html":{},"injectables/CouponService.html":{},"classes/CreateBlogSummaryDto.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateInsightDto.html":{},"classes/CreateInsightMemberDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/CreateLogDto.html":{},"classes/CreateUserCollaborationDto.html":{},"classes/CreateUserHighlightDto.html":{},"classes/CreateUserListDto.html":{},"injectables/CustomLogger.html":{},"modules/CustomerModule.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"entities/DbBakedRepo.html":{},"entities/DbCommitAuthors.html":{},"entities/DbCommits.html":{},"entities/DbContribution.html":{},"entities/DbContributionStatTimeframe.html":{},"entities/DbContributionsProjects.html":{},"entities/DbContributorCategoryTimeframe.html":{},"entities/DbCoupon.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"classes/DbFilteredUser.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbPullRequestReview.html":{},"entities/DbRepoLoginContributions.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"classes/DbTimezone.html":{},"classes/DbTopUser.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightReactionResponse.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserListContributorStat.html":{},"entities/DbUserListContributorStat-1.html":{},"entities/DbUserNotification.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"controllers/EmojiController.html":{},"modules/EmojiModule.html":{},"injectables/EmojiService.html":{},"controllers/EndorsementController.html":{},"modules/EndorsementModule.html":{},"injectables/EndorsementService.html":{},"guards/EndorsementTokenGuard.html":{},"classes/FilterListContributorsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/FilteredUsersDto.html":{},"classes/FollowManyUsersDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"controllers/HighlightController.html":{},"modules/HighlightModule.html":{},"classes/HighlightOptionsDto.html":{},"injectables/HttpLoggerMiddleware.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"injectables/InsightRepoService.html":{},"modules/InsightsModule.html":{},"injectables/InsightsService.html":{},"controllers/IssueSummaryController.html":{},"modules/IssueSummaryModule.html":{},"injectables/IssueSummaryService.html":{},"modules/LogModule.html":{},"injectables/LogService.html":{},"modules/OpenAiModule.html":{},"injectables/OpenAiService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaParameters.html":{},"classes/PageOptionsDto.html":{},"injectables/PagerService.html":{},"interfaces/PaginationInput.html":{},"controllers/PizzaOvenController.html":{},"modules/PizzaOvenModule.html":{},"injectables/PizzaOvenService.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestInsightsService.html":{},"modules/PullRequestModule.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestReviewService.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"modules/RepoFilterModule.html":{},"injectables/RepoFilterService.html":{},"classes/RepoInfo.html":{},"modules/RepoModule.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"modules/StarModule.html":{},"injectables/StarService.html":{},"modules/StargazeModule.html":{},"injectables/StargazeService.html":{},"modules/StripeModule.html":{},"injectables/StripeService.html":{},"modules/StripeSubscriptionModule.html":{},"injectables/StripeSubscriptionService.html":{},"modules/StripeWebHookModule.html":{},"controllers/StripeWebhookController.html":{},"modules/SubmitModule.html":{},"injectables/SubmitService.html":{},"classes/SupabaseAuthDto.html":{},"injectables/SupabaseGuard.html":{},"injectables/SupabaseStrategy.html":{},"modules/TierModule.html":{},"injectables/TierService.html":{},"classes/TopProjectsDto.html":{},"classes/TopUsersDto.html":{},"classes/UpdateEndorsementDto.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateInsightMemberDto.html":{},"classes/UpdateUserCollaborationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowingController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"modules/UserListModule.html":{},"classes/UserListMostActiveContributorsDto.html":{},"injectables/UserListService.html":{},"controllers/UserListStatsController.html":{},"injectables/UserListStatsService.html":{},"modules/UserModule.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"classes/UserOnboardingDto.html":{},"injectables/UserOrganizationService.html":{},"controllers/UserRecommendationController.html":{},"classes/UserRepoOptionsDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"modules/UserReposModule.html":{},"injectables/UserReposService.html":{},"modules/VoteModule.html":{},"injectables/VoteService.html":{},"classes/VotedRepoDto.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["results.filter(boolean",{"_index":4511,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["results[index",{"_index":3677,"title":{},"body":{"injectables/RepoService.html":{}}}],["retrieves",{"_index":2448,"title":{},"body":{"controllers/EndorsementController.html":{},"controllers/HighlightController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserListController.html":{},"controllers/UserNotificationController.html":{}}}],["return",{"_index":71,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"controllers/AuthController.html":{},"controllers/BlogSummaryController.html":{},"injectables/BlogSummaryService.html":{},"interfaces/ChatResponse.html":{},"controllers/CodeExplanationController.html":{},"injectables/CodeExplanationService.html":{},"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"controllers/CodeTestSuggestionController.html":{},"injectables/CodeTestSuggestionService.html":{},"injectables/CommitAuthorsService.html":{},"injectables/CommitsService.html":{},"injectables/ContributionService.html":{},"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"injectables/CouponService.html":{},"injectables/CustomLogger.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"controllers/EmojiController.html":{},"injectables/EmojiService.html":{},"controllers/EndorsementController.html":{},"injectables/EndorsementService.html":{},"guards/EndorsementTokenGuard.html":{},"classes/FilterListContributorsDto.html":{},"classes/FilteredUsersDto.html":{},"controllers/HealthController.html":{},"controllers/HighlightController.html":{},"injectables/HttpLoggerMiddleware.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"controllers/IssueSummaryController.html":{},"injectables/IssueSummaryService.html":{},"injectables/LogService.html":{},"injectables/OpenAiService.html":{},"classes/PageOptionsDto.html":{},"injectables/PagerService.html":{},"interfaces/PaginationInput.html":{},"controllers/PizzaOvenController.html":{},"injectables/PizzaOvenService.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestReviewService.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"injectables/RepoFilterService.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeService.html":{},"injectables/StripeSubscriptionService.html":{},"controllers/StripeWebhookController.html":{},"injectables/SubmitService.html":{},"injectables/SupabaseStrategy.html":{},"classes/TopUsersDto.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowingController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"injectables/UserListService.html":{},"controllers/UserListStatsController.html":{},"injectables/UserListStatsService.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"injectables/UserOrganizationService.html":{},"controllers/UserRecommendationController.html":{},"injectables/UserReposService.html":{},"injectables/VoteService.html":{},"miscellaneous/variables.html":{}}}],["returned",{"_index":5831,"title":{},"body":{"miscellaneous/variables.html":{}}}],["returns",{"_index":298,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"controllers/BlogSummaryController.html":{},"injectables/BlogSummaryService.html":{},"controllers/CodeExplanationController.html":{},"injectables/CodeExplanationService.html":{},"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"controllers/CodeTestSuggestionController.html":{},"injectables/CodeTestSuggestionService.html":{},"injectables/CommitAuthorsService.html":{},"injectables/CommitsService.html":{},"injectables/ContributionService.html":{},"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"injectables/CouponService.html":{},"injectables/CustomLogger.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"controllers/EmojiController.html":{},"injectables/EmojiService.html":{},"controllers/EndorsementController.html":{},"injectables/EndorsementService.html":{},"guards/EndorsementTokenGuard.html":{},"controllers/HealthController.html":{},"controllers/HighlightController.html":{},"injectables/HttpLoggerMiddleware.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"controllers/IssueSummaryController.html":{},"injectables/IssueSummaryService.html":{},"injectables/LogService.html":{},"injectables/OpenAiService.html":{},"injectables/PagerService.html":{},"controllers/PizzaOvenController.html":{},"injectables/PizzaOvenService.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestReviewService.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"injectables/RepoFilterService.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeService.html":{},"injectables/StripeSubscriptionService.html":{},"controllers/StripeWebhookController.html":{},"injectables/SubmitService.html":{},"injectables/SupabaseStrategy.html":{},"injectables/TierService.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowingController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"injectables/UserListService.html":{},"controllers/UserListStatsController.html":{},"injectables/UserListStatsService.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"injectables/UserOrganizationService.html":{},"controllers/UserRecommendationController.html":{},"injectables/UserReposService.html":{},"injectables/VoteService.html":{}}}],["review",{"_index":2003,"title":{},"body":{"entities/DbPullRequestReview.html":{}}}],["review.entity",{"_index":392,"title":{},"body":{"modules/AppModule.html":{},"controllers/PullRequestController.html":{},"modules/PullRequestModule.html":{},"injectables/PullRequestReviewService.html":{}}}],["review.entity.ts",{"_index":1999,"title":{},"body":{"entities/DbPullRequestReview.html":{},"coverage.html":{}}}],["review.entity.ts:16",{"_index":2006,"title":{},"body":{"entities/DbPullRequestReview.html":{}}}],["review.entity.ts:20",{"_index":2011,"title":{},"body":{"entities/DbPullRequestReview.html":{}}}],["review.entity.ts:27",{"_index":2013,"title":{},"body":{"entities/DbPullRequestReview.html":{}}}],["review.entity.ts:37",{"_index":2004,"title":{},"body":{"entities/DbPullRequestReview.html":{}}}],["review.entity.ts:47",{"_index":2008,"title":{},"body":{"entities/DbPullRequestReview.html":{}}}],["review.entity.ts:57",{"_index":2016,"title":{},"body":{"entities/DbPullRequestReview.html":{}}}],["review.entity.ts:64",{"_index":2015,"title":{},"body":{"entities/DbPullRequestReview.html":{}}}],["review.service",{"_index":3229,"title":{},"body":{"controllers/PullRequestController.html":{},"modules/PullRequestModule.html":{}}}],["review.service.ts",{"_index":3359,"title":{},"body":{"injectables/PullRequestReviewService.html":{},"coverage.html":{}}}],["review.service.ts:13",{"_index":3365,"title":{},"body":{"injectables/PullRequestReviewService.html":{}}}],["review.service.ts:7",{"_index":3362,"title":{},"body":{"injectables/PullRequestReviewService.html":{}}}],["reviewed",{"_index":1695,"title":{},"body":{"entities/DbContributionStatTimeframe.html":{},"entities/DbRepoLoginContributions.html":{},"entities/DbUserListContributorStat.html":{},"entities/DbUserListContributorStat-1.html":{}}}],["reviewer",{"_index":2012,"title":{},"body":{"entities/DbPullRequestReview.html":{}}}],["reviewer_login",{"_index":2002,"title":{},"body":{"entities/DbPullRequestReview.html":{}}}],["reviews",{"_index":3215,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["rights",{"_index":5563,"title":{},"body":{"license.html":{}}}],["ritadee",{"_index":2248,"title":{},"body":{"classes/DbUserHighlightReactionResponse.html":{},"classes/HighlightOptionsDto.html":{}}}],["role",{"_index":648,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/ChatResponse.html":{},"injectables/OpenAiService.html":{},"classes/SupabaseAuthDto.html":{}}}],["root",{"_index":5765,"title":{},"body":{"miscellaneous/variables.html":{}}}],["rounded",{"_index":2663,"title":{},"body":{"classes/GeneratePullRequestDescriptionDto.html":{}}}],["route",{"_index":5812,"title":{},"body":{"miscellaneous/variables.html":{}}}],["rsa:4096",{"_index":5412,"title":{},"body":{"index.html":{}}}],["rule",{"_index":5468,"title":{},"body":{"index.html":{}}}],["run",{"_index":5358,"title":{},"body":{"index.html":{}}}],["running",{"_index":5456,"title":{},"body":{"index.html":{}}}],["russian",{"_index":1323,"title":{},"body":{"classes/CreateBlogSummaryDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{}}}],["rxjs",{"_index":3190,"title":{},"body":{"injectables/PizzaOvenService.html":{}}}],["same",{"_index":5430,"title":{},"body":{"index.html":{}}}],["san",{"_index":4116,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["sauced",{"_index":1456,"title":{},"body":{"classes/CreateUserHighlightDto.html":{},"entities/DbContributionsProjects.html":{},"entities/DbInsight.html":{},"entities/DbRepoToUserSubmissions.html":{},"controllers/HealthController.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{},"index.html":{},"license.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["sauced!})@isstring()@minlength(3)@maxlength(500",{"_index":1430,"title":{},"body":{"classes/CreateUserHighlightDto.html":{}}}],["sauced'})@isurl()@isoptional",{"_index":4228,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["sauced/ai",{"_index":1460,"title":{},"body":{"classes/CreateUserHighlightDto.html":{},"entities/DbUserHighlight.html":{}}}],["sauced/api.opensauced.pizza",{"_index":5490,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["sauced/api.opensauced.pizza#readme",{"_index":5630,"title":{},"body":{"properties.html":{}}}],["sauced/api.opensauced.pizza.git",{"_index":5634,"title":{},"body":{"properties.html":{}}}],["sauced/api.opensauced.pizza/issues",{"_index":5632,"title":{},"body":{"properties.html":{}}}],["sauced/code",{"_index":5752,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sauced/hot/pull/320",{"_index":1681,"title":{},"body":{"entities/DbContribution.html":{}}}],["sauced/hot/pull/320'})@column({type",{"_index":1673,"title":{},"body":{"entities/DbContribution.html":{}}}],["sauced/insights",{"_index":755,"title":{},"body":{"classes/BakeRepoDto.html":{},"classes/CreateInsightDto.html":{},"classes/CreateUserHighlightDto.html":{},"entities/DbInsightRepo.html":{},"entities/DbPullRequest.html":{},"entities/DbUserHighlight.html":{},"classes/DbUserHighlightReactionResponse.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserRepo.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoInfo.html":{}}}],["sauced/insights'})@column({type",{"_index":1844,"title":{},"body":{"entities/DbInsightRepo.html":{},"entities/DbPullRequest.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserRepo.html":{}}}],["sauced/insights'})@isstring",{"_index":745,"title":{},"body":{"classes/BakeRepoDto.html":{},"classes/RepoInfo.html":{}}}],["sauced/insights'})@isstring()@isoptional",{"_index":2611,"title":{},"body":{"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{}}}],["sauced/insights.git",{"_index":1601,"title":{},"body":{"entities/DbBakedRepo.html":{}}}],["sauced/insights.git'})@column({type",{"_index":1574,"title":{},"body":{"entities/DbBakedRepo.html":{}}}],["sauced/insights/pull/1",{"_index":1455,"title":{},"body":{"classes/CreateUserHighlightDto.html":{},"entities/DbUserHighlight.html":{}}}],["sauced/insights/pull/1'})@column('text",{"_index":2202,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["sauced/insights/pull/1'})@isstring",{"_index":1452,"title":{},"body":{"classes/CreateUserHighlightDto.html":{}}}],["sauced/insights/pull/1})@column('text",{"_index":2183,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["sauced/insights/pulls",{"_index":1373,"title":{},"body":{"classes/CreateEndorsementDto.html":{}}}],["sauced/insights/pulls'})@isstring",{"_index":1367,"title":{},"body":{"classes/CreateEndorsementDto.html":{}}}],["saucedopen",{"_index":4124,"title":{},"body":{"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{}}}],["saucedopen'})@isstring()@matches(/^(?!.*?admin)(?!.*?twitter)\\w{0,15}$/i",{"_index":4237,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["sauceduser",{"_index":1200,"title":{},"body":{"classes/Contributor.html":{},"classes/CreateUserListDto.html":{},"entities/DbUserListContributor.html":{}}}],["sauceduser'})@column({type",{"_index":2281,"title":{},"body":{"entities/DbUserListContributor.html":{}}}],["saucy",{"_index":524,"title":{},"body":{"classes/ApplyUserCouponDto.html":{},"entities/DbCoupon.html":{},"classes/SupabaseAuthDto.html":{}}}],["saucy'})@isstring",{"_index":517,"title":{},"body":{"classes/ApplyUserCouponDto.html":{}}}],["saving",{"_index":5827,"title":{},"body":{"miscellaneous/variables.html":{}}}],["schema",{"_index":5530,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["script",{"_index":5445,"title":{},"body":{"index.html":{}}}],["scripts",{"_index":5511,"title":{},"body":{"index.html":{}}}],["search",{"_index":2623,"title":{},"body":{"classes/FilteredUsersDto.html":{},"controllers/RepoController.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["searchallpullrequestcontributors",{"_index":1203,"title":{},"body":{"controllers/ContributorController.html":{}}}],["searchallpullrequestcontributors(pageoptionsdto",{"_index":1204,"title":{},"body":{"controllers/ContributorController.html":{}}}],["searchallpullrequests",{"_index":3208,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["searchallpullrequests(@query",{"_index":3234,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["searchallpullrequests(pageoptionsdto",{"_index":3221,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["searches",{"_index":1207,"title":{},"body":{"controllers/ContributorController.html":{},"controllers/PullRequestController.html":{}}}],["seconds](https://en.wikipedia.org/wiki/unix_time",{"_index":5840,"title":{},"body":{"miscellaneous/variables.html":{}}}],["secretkey",{"_index":5797,"title":{},"body":{"miscellaneous/variables.html":{}}}],["secs",{"_index":5894,"title":{},"body":{"miscellaneous/variables.html":{}}}],["secure",{"_index":5401,"title":{},"body":{"index.html":{}}}],["see",{"_index":4178,"title":{},"body":{"injectables/TierService.html":{},"index.html":{}}}],["select",{"_index":91,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/ContributionService.html":{},"entities/DbCommitAuthors.html":{},"entities/DbContribution.html":{},"entities/DbContributionStatTimeframe.html":{},"entities/DbContributionsProjects.html":{},"entities/DbContributorCategoryTimeframe.html":{},"entities/DbEmoji.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoLoginContributions.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserListContributorStat.html":{},"entities/DbUserListContributorStat-1.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"injectables/InsightsService.html":{},"injectables/RepoFilterService.html":{},"injectables/RepoService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserListStatsService.html":{}}}],["select(\"author_login",{"_index":3439,"title":{},"body":{"injectables/PullRequestService.html":{},"injectables/UserListService.html":{}}}],["select(\"count(distinct",{"_index":3617,"title":{},"body":{"injectables/RepoService.html":{}}}],["select(\"current_month.author_login",{"_index":3436,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["select(\"distinct",{"_index":5026,"title":{},"body":{"injectables/UserListService.html":{}}}],["select(\"emoji_id",{"_index":4690,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["select(\"login",{"_index":1151,"title":{},"body":{"injectables/ContributionService.html":{}}}],["select(\"previous_month.author_login",{"_index":3444,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["select(\"pull_requests.author_login",{"_index":1155,"title":{},"body":{"injectables/ContributionService.html":{},"injectables/PullRequestService.html":{}}}],["select(\"split_part(repos.full_name",{"_index":186,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["select(\"users.id",{"_index":3679,"title":{},"body":{"injectables/RepoService.html":{}}}],["select(\"users.login",{"_index":87,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/EndorsementService.html":{},"injectables/UserListStatsService.html":{}}}],["select(['repo.id",{"_index":3623,"title":{},"body":{"injectables/RepoService.html":{}}}],["select(`coalesce(count(\"pr\".\"id",{"_index":3313,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["select(`to_char('${startdate}'::timestamp",{"_index":3322,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["select(this.hacktoberfestprdatecharbuilder(interval",{"_index":3320,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["selected",{"_index":1869,"title":{},"body":{"entities/DbPRInsight.html":{}}}],["selectquerybuilder",{"_index":21,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightsService.html":{},"injectables/PagerService.html":{},"interfaces/PaginationInput.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/RepoFilterService.html":{},"injectables/RepoService.html":{},"injectables/UserCollaborationService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserListService.html":{},"injectables/UserListStatsService.html":{},"injectables/UserNotificationService.html":{},"injectables/UserOrganizationService.html":{},"injectables/UserReposService.html":{}}}],["self",{"_index":5407,"title":{},"body":{"index.html":{}}}],["sell",{"_index":5569,"title":{},"body":{"license.html":{}}}],["sent",{"_index":1834,"title":{},"body":{"entities/DbInsightMember.html":{},"entities/DbUserCollaboration.html":{}}}],["server",{"_index":5767,"title":{},"body":{"miscellaneous/variables.html":{}}}],["server.crt",{"_index":5405,"title":{},"body":{"index.html":{}}}],["server.key",{"_index":5406,"title":{},"body":{"index.html":{}}}],["service",{"_index":642,"title":{},"body":{"controllers/AuthController.html":{},"classes/BakeRepoDto.html":{},"controllers/BlogSummaryController.html":{},"controllers/CodeExplanationController.html":{},"controllers/CodeRefactorSuggestionController.html":{},"controllers/CodeTestSuggestionController.html":{},"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"controllers/EmojiController.html":{},"controllers/EndorsementController.html":{},"controllers/HealthController.html":{},"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"controllers/IssueSummaryController.html":{},"controllers/PizzaOvenController.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/StripeWebhookController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"controllers/UserFollowingController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"controllers/UserListStatsController.html":{},"controllers/UserNotificationController.html":{},"controllers/UserRecommendationController.html":{},"index.html":{}}}],["services.module",{"_index":2499,"title":{},"body":{"modules/EndorsementModule.html":{},"modules/InsightsModule.html":{},"modules/PizzaOvenModule.html":{},"modules/UserListModule.html":{},"modules/UserModule.html":{},"modules/UserReposModule.html":{}}}],["services.module.ts",{"_index":253,"title":{},"body":{"modules/ApiServicesModule.html":{}}}],["services/user.service",{"_index":4291,"title":{},"body":{"controllers/UserCollaborationController.html":{},"controllers/UserController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowingController.html":{},"controllers/UserFollowsController.html":{},"injectables/UserHighlightsService.html":{},"modules/UserModule.html":{},"injectables/UserNotificationService.html":{},"controllers/UserRecommendationController.html":{}}}],["session",{"_index":564,"title":{},"body":{"controllers/AuthController.html":{},"injectables/StripeService.html":{}}}],["session.id",{"_index":3949,"title":{},"body":{"injectables/StripeService.html":{}}}],["session_email",{"_index":649,"title":{},"body":{"controllers/AuthController.html":{}}}],["sessionid",{"_index":3948,"title":{},"body":{"injectables/StripeService.html":{}}}],["set",{"_index":3990,"title":{},"body":{"controllers/StripeWebhookController.html":{},"controllers/UserInsightsController.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["setcontact(\"open",{"_index":5750,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setdescription(markdowndescription",{"_index":5748,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setlicense(`the",{"_index":5754,"title":{},"body":{"miscellaneous/variables.html":{}}}],["settermsofservice(\"https://github.com/open",{"_index":5751,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setting",{"_index":5368,"title":{},"body":{"index.html":{}}}],["settings",{"_index":5391,"title":{},"body":{"index.html":{}}}],["settitle(`@open",{"_index":5747,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setversion(`1",{"_index":5749,"title":{},"body":{"miscellaneous/variables.html":{}}}],["shall",{"_index":5578,"title":{},"body":{"license.html":{}}}],["shipped",{"_index":1432,"title":{},"body":{"classes/CreateUserHighlightDto.html":{},"entities/DbUserHighlight.html":{}}}],["shipped_at",{"_index":1428,"title":{},"body":{"classes/CreateUserHighlightDto.html":{},"entities/DbUserHighlight.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{}}}],["short",{"_index":1802,"title":{},"body":{"entities/DbInsight.html":{}}}],["short_code",{"_index":1784,"title":{},"body":{"entities/DbInsight.html":{}}}],["show",{"_index":5832,"title":{},"body":{"miscellaneous/variables.html":{}}}],["showcase",{"_index":1945,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["showcase})@column({type",{"_index":1941,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["shows",{"_index":5844,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sig",{"_index":4034,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["sign",{"_index":1988,"title":{},"body":{"entities/DbPullRequest.html":{},"classes/SupabaseAuthDto.html":{}}}],["sign'})@column('text",{"_index":1980,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["signature",{"_index":4037,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["signed",{"_index":5408,"title":{},"body":{"index.html":{}}}],["singleline",{"_index":489,"title":{},"body":{"modules/AppModule.html":{}}}],["skip",{"_index":2570,"title":{},"body":{"classes/FilterListContributorsDto.html":{},"classes/FilteredUsersDto.html":{},"classes/PageOptionsDto.html":{},"injectables/PullRequestService.html":{},"classes/TopUsersDto.html":{},"index.html":{}}}],["snippet",{"_index":908,"title":{},"body":{"injectables/CodeExplanationService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{}}}],["software",{"_index":5360,"title":{},"body":{"index.html":{},"license.html":{}}}],["solution",{"_index":3020,"title":{},"body":{"injectables/IssueSummaryService.html":{}}}],["something",{"_index":5871,"title":{},"body":{"miscellaneous/variables.html":{}}}],["source",{"_index":4,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"modules/ApiServicesModule.html":{},"modules/AppModule.html":{},"classes/ApplyUserCouponDto.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"classes/BakeRepoDto.html":{},"controllers/BlogSummaryController.html":{},"modules/BlogSummaryModule.html":{},"injectables/BlogSummaryService.html":{},"interfaces/ChatResponse.html":{},"controllers/CodeExplanationController.html":{},"injectables/CodeExplanationService.html":{},"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"controllers/CodeTestSuggestionController.html":{},"injectables/CodeTestSuggestionService.html":{},"classes/CollaboratorsDto.html":{},"classes/CommitAuthorDto.html":{},"injectables/CommitAuthorsService.html":{},"classes/CommitsDto.html":{},"injectables/CommitsService.html":{},"modules/ContributionModule.html":{},"classes/ContributionPageMetaDto.html":{},"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"classes/ContributionsByProjectDto.html":{},"classes/ContributionsPageDto.html":{},"classes/ContributionsTimeframeDto.html":{},"classes/Contributor.html":{},"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"modules/ContributorModule.html":{},"classes/ContributorPullRequestsDto.html":{},"modules/CouponModule.html":{},"injectables/CouponService.html":{},"classes/CreateBlogSummaryDto.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateInsightDto.html":{},"classes/CreateInsightMemberDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/CreateLogDto.html":{},"classes/CreateUserCollaborationDto.html":{},"classes/CreateUserHighlightDto.html":{},"classes/CreateUserListDto.html":{},"injectables/CustomLogger.html":{},"modules/CustomerModule.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"entities/DbBakedRepo.html":{},"entities/DbCommitAuthors.html":{},"entities/DbCommits.html":{},"entities/DbContribution.html":{},"entities/DbContributionStatTimeframe.html":{},"entities/DbContributionsProjects.html":{},"entities/DbContributorCategoryTimeframe.html":{},"entities/DbCoupon.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"classes/DbFilteredUser.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbPullRequestReview.html":{},"entities/DbRepoLoginContributions.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"classes/DbTimezone.html":{},"classes/DbTopUser.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightReactionResponse.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserListContributorStat.html":{},"entities/DbUserListContributorStat-1.html":{},"entities/DbUserNotification.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"controllers/EmojiController.html":{},"modules/EmojiModule.html":{},"injectables/EmojiService.html":{},"controllers/EndorsementController.html":{},"modules/EndorsementModule.html":{},"injectables/EndorsementService.html":{},"guards/EndorsementTokenGuard.html":{},"classes/FilterListContributorsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/FilteredUsersDto.html":{},"classes/FollowManyUsersDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"controllers/HighlightController.html":{},"modules/HighlightModule.html":{},"classes/HighlightOptionsDto.html":{},"injectables/HttpLoggerMiddleware.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"injectables/InsightRepoService.html":{},"modules/InsightsModule.html":{},"injectables/InsightsService.html":{},"controllers/IssueSummaryController.html":{},"modules/IssueSummaryModule.html":{},"injectables/IssueSummaryService.html":{},"modules/LogModule.html":{},"injectables/LogService.html":{},"modules/OpenAiModule.html":{},"injectables/OpenAiService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaParameters.html":{},"classes/PageOptionsDto.html":{},"injectables/PagerService.html":{},"interfaces/PaginationInput.html":{},"controllers/PizzaOvenController.html":{},"modules/PizzaOvenModule.html":{},"injectables/PizzaOvenService.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestInsightsService.html":{},"modules/PullRequestModule.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestReviewService.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"modules/RepoFilterModule.html":{},"injectables/RepoFilterService.html":{},"classes/RepoInfo.html":{},"modules/RepoModule.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"modules/StarModule.html":{},"injectables/StarService.html":{},"modules/StargazeModule.html":{},"injectables/StargazeService.html":{},"modules/StripeModule.html":{},"injectables/StripeService.html":{},"modules/StripeSubscriptionModule.html":{},"injectables/StripeSubscriptionService.html":{},"modules/StripeWebHookModule.html":{},"controllers/StripeWebhookController.html":{},"modules/SubmitModule.html":{},"injectables/SubmitService.html":{},"classes/SupabaseAuthDto.html":{},"injectables/SupabaseGuard.html":{},"injectables/SupabaseStrategy.html":{},"modules/TierModule.html":{},"injectables/TierService.html":{},"classes/TopProjectsDto.html":{},"classes/TopUsersDto.html":{},"classes/UpdateEndorsementDto.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateInsightMemberDto.html":{},"classes/UpdateUserCollaborationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowingController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"modules/UserListModule.html":{},"classes/UserListMostActiveContributorsDto.html":{},"injectables/UserListService.html":{},"controllers/UserListStatsController.html":{},"injectables/UserListStatsService.html":{},"modules/UserModule.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"classes/UserOnboardingDto.html":{},"injectables/UserOrganizationService.html":{},"controllers/UserRecommendationController.html":{},"classes/UserRepoOptionsDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"modules/UserReposModule.html":{},"injectables/UserReposService.html":{},"modules/VoteModule.html":{},"injectables/VoteService.html":{},"classes/VotedRepoDto.html":{},"index.html":{}}}],["source_branch",{"_index":1903,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["source_comment_url",{"_index":1353,"title":{},"body":{"classes/CreateEndorsementDto.html":{},"entities/DbEndorsement.html":{}}}],["source_context_url",{"_index":1354,"title":{},"body":{"classes/CreateEndorsementDto.html":{},"entities/DbEndorsement.html":{}}}],["source_label",{"_index":1904,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["spam",{"_index":1884,"title":{},"body":{"entities/DbPRInsight.html":{},"injectables/RepoFilterService.html":{}}}],["spam\"].foreach((type",{"_index":3326,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["spam_prs",{"_index":1864,"title":{},"body":{"entities/DbPRInsight.html":{}}}],["spam_pull_requests",{"_index":3552,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["spam_pull_requests\".\"updated_at",{"_index":3554,"title":{},"body":{"injectables/RepoFilterService.html":{},"injectables/RepoService.html":{}}}],["spam_pull_requests.repo_id",{"_index":3551,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["spammed",{"_index":2913,"title":{},"body":{"classes/InsightOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"miscellaneous/enumerations.html":{}}}],["spanish",{"_index":1317,"title":{},"body":{"classes/CreateBlogSummaryDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{}}}],["specific",{"_index":1003,"title":{},"body":{"classes/CommitsDto.html":{}}}],["specifications",{"_index":811,"title":{},"body":{"injectables/BlogSummaryService.html":{},"injectables/CodeExplanationService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"injectables/IssueSummaryService.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["sponsors",{"_index":4099,"title":{},"body":{"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{}}}],["sql",{"_index":1557,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["src/.../api",{"_index":5641,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../api.config.ts",{"_index":5640,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../cli",{"_index":5642,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../contribution",{"_index":5335,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../contributor",{"_index":5340,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../datetimes.ts",{"_index":5646,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../db",{"_index":5643,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../endpoint.config.ts",{"_index":5644,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../generate",{"_index":5645,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../hacktoberfest.config.ts",{"_index":5647,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../insight",{"_index":5336,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../main.ts",{"_index":5349,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../most",{"_index":5342,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../openai.config.ts",{"_index":5648,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../order",{"_index":5337,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../pizza.config.ts",{"_index":5649,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../pull",{"_index":5339,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../repo",{"_index":5341,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../stripe",{"_index":5650,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../stripe.config.ts",{"_index":5651,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../supabase.user.decorator.ts",{"_index":5639,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../swagger.ts",{"_index":5652,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../tier.config.ts",{"_index":5653,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../user",{"_index":5343,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["src/.../utils.ts",{"_index":5654,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app.module.ts",{"_index":286,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.module.ts:242",{"_index":293,"title":{},"body":{"modules/AppModule.html":{}}}],["src/auth/auth.controller.ts",{"_index":528,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts:118",{"_index":584,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:136",{"_index":588,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:149",{"_index":575,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:180",{"_index":605,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:194",{"_index":601,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:213",{"_index":596,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:232",{"_index":550,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:250",{"_index":559,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:37",{"_index":567,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.module.ts",{"_index":732,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/dtos/supabase",{"_index":4083,"title":{},"body":{"classes/SupabaseAuthDto.html":{},"coverage.html":{}}}],["src/auth/dtos/user",{"_index":5177,"title":{},"body":{"classes/UserOnboardingDto.html":{},"coverage.html":{}}}],["src/auth/supabase.guard.ts",{"_index":4131,"title":{},"body":{"injectables/SupabaseGuard.html":{},"coverage.html":{}}}],["src/auth/supabase.strategy.ts",{"_index":4134,"title":{},"body":{"injectables/SupabaseStrategy.html":{},"coverage.html":{}}}],["src/auth/supabase.strategy.ts:18",{"_index":4142,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["src/auth/supabase.strategy.ts:22",{"_index":4140,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["src/auth/supabase.strategy.ts:7",{"_index":4137,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["src/auth/supabase.user.decorator.ts",{"_index":5287,"title":{},"body":{"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/blogs/blog",{"_index":797,"title":{},"body":{"injectables/BlogSummaryService.html":{},"coverage.html":{}}}],["src/blogs/dtos/create",{"_index":1307,"title":{},"body":{"classes/CreateBlogSummaryDto.html":{},"coverage.html":{}}}],["src/blogs/issue",{"_index":757,"title":{},"body":{"controllers/BlogSummaryController.html":{},"modules/BlogSummaryModule.html":{},"coverage.html":{}}}],["src/common/constants/order",{"_index":5344,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/common/decorators/api",{"_index":5291,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/common/dtos/filter",{"_index":2605,"title":{},"body":{"classes/FilterOptionsDto.html":{},"coverage.html":{}}}],["src/common/dtos/page",{"_index":3054,"title":{},"body":{"classes/PageMetaDto.html":{},"interfaces/PageMetaParameters.html":{},"classes/PageOptionsDto.html":{},"coverage.html":{}}}],["src/common/dtos/page.dto.ts",{"_index":3051,"title":{},"body":{"classes/PageDto.html":{},"coverage.html":{}}}],["src/common/dtos/page.dto.ts:11",{"_index":3053,"title":{},"body":{"classes/PageDto.html":{}}}],["src/common/dtos/page.dto.ts:16",{"_index":3052,"title":{},"body":{"classes/PageDto.html":{}}}],["src/common/filters/repo",{"_index":3524,"title":{},"body":{"modules/RepoFilterModule.html":{},"injectables/RepoFilterService.html":{},"coverage.html":{}}}],["src/common/middleware/database",{"_index":1528,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{},"coverage.html":{}}}],["src/common/middleware/http",{"_index":2796,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{},"coverage.html":{}}}],["src/common/services/api",{"_index":252,"title":{},"body":{"modules/ApiServicesModule.html":{}}}],["src/common/services/pager.service.ts",{"_index":3078,"title":{},"body":{"injectables/PagerService.html":{},"interfaces/PaginationInput.html":{},"coverage.html":{}}}],["src/common/services/pager.service.ts:16",{"_index":3082,"title":{},"body":{"injectables/PagerService.html":{}}}],["src/common/util/cli",{"_index":5297,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/common/util/datetimes.ts",{"_index":5299,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/common/util/swagger.ts",{"_index":5300,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/config/api.config.ts",{"_index":5302,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/config/db",{"_index":5303,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/config/endpoint.config.ts",{"_index":5306,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/config/hacktoberfest.config.ts",{"_index":5308,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/config/openai.config.ts",{"_index":5309,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/config/pizza.config.ts",{"_index":5310,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/config/stripe.config.ts",{"_index":5311,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/config/tier.config.ts",{"_index":5312,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/contribution/contribution.entity.ts",{"_index":1637,"title":{},"body":{"entities/DbContribution.html":{},"coverage.html":{}}}],["src/contribution/contribution.entity.ts:104",{"_index":1674,"title":{},"body":{"entities/DbContribution.html":{}}}],["src/contribution/contribution.entity.ts:112",{"_index":1665,"title":{},"body":{"entities/DbContribution.html":{}}}],["src/contribution/contribution.entity.ts:28",{"_index":1659,"title":{},"body":{"entities/DbContribution.html":{}}}],["src/contribution/contribution.entity.ts:39",{"_index":1666,"title":{},"body":{"entities/DbContribution.html":{}}}],["src/contribution/contribution.entity.ts:50",{"_index":1645,"title":{},"body":{"entities/DbContribution.html":{}}}],["src/contribution/contribution.entity.ts:57",{"_index":1663,"title":{},"body":{"entities/DbContribution.html":{}}}],["src/contribution/contribution.entity.ts:67",{"_index":1655,"title":{},"body":{"entities/DbContribution.html":{}}}],["src/contribution/contribution.entity.ts:77",{"_index":1671,"title":{},"body":{"entities/DbContribution.html":{}}}],["src/contribution/contribution.entity.ts:84",{"_index":1657,"title":{},"body":{"entities/DbContribution.html":{}}}],["src/contribution/contribution.entity.ts:94",{"_index":1641,"title":{},"body":{"entities/DbContribution.html":{}}}],["src/contribution/contribution.module.ts",{"_index":1032,"title":{},"body":{"modules/ContributionModule.html":{}}}],["src/contribution/contribution.service.ts",{"_index":1110,"title":{},"body":{"injectables/ContributionService.html":{},"coverage.html":{}}}],["src/contribution/contribution.service.ts:15",{"_index":1117,"title":{},"body":{"injectables/ContributionService.html":{}}}],["src/contribution/contribution.service.ts:25",{"_index":1120,"title":{},"body":{"injectables/ContributionService.html":{}}}],["src/contribution/contribution.service.ts:47",{"_index":1125,"title":{},"body":{"injectables/ContributionService.html":{}}}],["src/contribution/contribution.service.ts:91",{"_index":1123,"title":{},"body":{"injectables/ContributionService.html":{}}}],["src/contribution/dtos/contribution",{"_index":1071,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["src/contribution/dtos/repo",{"_index":2284,"title":{},"body":{"entities/DbUserListContributorStat.html":{},"coverage.html":{}}}],["src/contribution/entities/repo",{"_index":2019,"title":{},"body":{"entities/DbRepoLoginContributions.html":{},"coverage.html":{}}}],["src/contribution/repo",{"_index":3448,"title":{},"body":{"controllers/RepoContributionsController.html":{},"coverage.html":{}}}],["src/contributor/contributor",{"_index":1229,"title":{},"body":{"controllers/ContributorInsightsController.html":{},"coverage.html":{}}}],["src/contributor/contributor.controller.ts",{"_index":1202,"title":{},"body":{"controllers/ContributorController.html":{},"coverage.html":{}}}],["src/contributor/contributor.controller.ts:22",{"_index":1213,"title":{},"body":{"controllers/ContributorController.html":{}}}],["src/contributor/contributor.module.ts",{"_index":1267,"title":{},"body":{"modules/ContributorModule.html":{}}}],["src/coupon/coupon.module.ts",{"_index":1283,"title":{},"body":{"modules/CouponModule.html":{}}}],["src/coupon/coupon.service.ts",{"_index":1287,"title":{},"body":{"injectables/CouponService.html":{},"coverage.html":{}}}],["src/coupon/coupon.service.ts:14",{"_index":1293,"title":{},"body":{"injectables/CouponService.html":{}}}],["src/coupon/coupon.service.ts:20",{"_index":1297,"title":{},"body":{"injectables/CouponService.html":{}}}],["src/coupon/coupon.service.ts:34",{"_index":1295,"title":{},"body":{"injectables/CouponService.html":{}}}],["src/coupon/coupon.service.ts:8",{"_index":1291,"title":{},"body":{"injectables/CouponService.html":{}}}],["src/coupon/entities/coupon.entity.ts",{"_index":1717,"title":{},"body":{"entities/DbCoupon.html":{},"coverage.html":{}}}],["src/coupon/entities/coupon.entity.ts:16",{"_index":1719,"title":{},"body":{"entities/DbCoupon.html":{}}}],["src/coupon/entities/coupon.entity.ts:26",{"_index":1720,"title":{},"body":{"entities/DbCoupon.html":{}}}],["src/coupon/entities/coupon.entity.ts:33",{"_index":1723,"title":{},"body":{"entities/DbCoupon.html":{}}}],["src/customer/customer.entity.ts",{"_index":1725,"title":{},"body":{"entities/DbCustomer.html":{},"coverage.html":{}}}],["src/customer/customer.entity.ts:12",{"_index":1727,"title":{},"body":{"entities/DbCustomer.html":{}}}],["src/customer/customer.entity.ts:22",{"_index":1729,"title":{},"body":{"entities/DbCustomer.html":{}}}],["src/customer/customer.module.ts",{"_index":1504,"title":{},"body":{"modules/CustomerModule.html":{}}}],["src/customer/customer.service.ts",{"_index":1508,"title":{},"body":{"injectables/CustomerService.html":{},"coverage.html":{}}}],["src/customer/customer.service.ts:14",{"_index":1518,"title":{},"body":{"injectables/CustomerService.html":{}}}],["src/customer/customer.service.ts:18",{"_index":1522,"title":{},"body":{"injectables/CustomerService.html":{}}}],["src/customer/customer.service.ts:26",{"_index":1520,"title":{},"body":{"injectables/CustomerService.html":{}}}],["src/customer/customer.service.ts:34",{"_index":1517,"title":{},"body":{"injectables/CustomerService.html":{}}}],["src/customer/customer.service.ts:8",{"_index":1513,"title":{},"body":{"injectables/CustomerService.html":{}}}],["src/emoji/emoji.controller.ts",{"_index":2374,"title":{},"body":{"controllers/EmojiController.html":{},"coverage.html":{}}}],["src/emoji/emoji.controller.ts:23",{"_index":2382,"title":{},"body":{"controllers/EmojiController.html":{}}}],["src/emoji/emoji.module.ts",{"_index":2393,"title":{},"body":{"modules/EmojiModule.html":{}}}],["src/emoji/emoji.service.ts",{"_index":2396,"title":{},"body":{"injectables/EmojiService.html":{},"coverage.html":{}}}],["src/emoji/emoji.service.ts:11",{"_index":2398,"title":{},"body":{"injectables/EmojiService.html":{}}}],["src/emoji/emoji.service.ts:17",{"_index":2400,"title":{},"body":{"injectables/EmojiService.html":{}}}],["src/emoji/emoji.service.ts:21",{"_index":2401,"title":{},"body":{"injectables/EmojiService.html":{}}}],["src/emoji/entities/emoji.entity.ts",{"_index":1733,"title":{},"body":{"entities/DbEmoji.html":{},"coverage.html":{}}}],["src/emoji/entities/emoji.entity.ts:25",{"_index":1745,"title":{},"body":{"entities/DbEmoji.html":{}}}],["src/emoji/entities/emoji.entity.ts:32",{"_index":1747,"title":{},"body":{"entities/DbEmoji.html":{}}}],["src/emoji/entities/emoji.entity.ts:39",{"_index":1753,"title":{},"body":{"entities/DbEmoji.html":{}}}],["src/emoji/entities/emoji.entity.ts:47",{"_index":1742,"title":{},"body":{"entities/DbEmoji.html":{}}}],["src/emoji/entities/emoji.entity.ts:57",{"_index":1737,"title":{},"body":{"entities/DbEmoji.html":{}}}],["src/emoji/entities/emoji.entity.ts:67",{"_index":1751,"title":{},"body":{"entities/DbEmoji.html":{}}}],["src/emoji/entities/emoji.entity.ts:74",{"_index":1738,"title":{},"body":{"entities/DbEmoji.html":{}}}],["src/emoji/entities/emoji.entity.ts:78",{"_index":1750,"title":{},"body":{"entities/DbEmoji.html":{}}}],["src/endorsement/dto/create",{"_index":1349,"title":{},"body":{"classes/CreateEndorsementDto.html":{},"coverage.html":{}}}],["src/endorsement/dto/update",{"_index":4198,"title":{},"body":{"classes/UpdateEndorsementDto.html":{},"coverage.html":{}}}],["src/endorsement/endorsement",{"_index":2550,"title":{},"body":{"guards/EndorsementTokenGuard.html":{},"coverage.html":{}}}],["src/endorsement/endorsement.controller.ts",{"_index":2407,"title":{},"body":{"controllers/EndorsementController.html":{},"coverage.html":{}}}],["src/endorsement/endorsement.controller.ts:107",{"_index":2442,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["src/endorsement/endorsement.controller.ts:123",{"_index":2445,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["src/endorsement/endorsement.controller.ts:138",{"_index":2427,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["src/endorsement/endorsement.controller.ts:26",{"_index":2420,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["src/endorsement/endorsement.controller.ts:40",{"_index":2434,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["src/endorsement/endorsement.controller.ts:51",{"_index":2431,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["src/endorsement/endorsement.controller.ts:65",{"_index":2438,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["src/endorsement/endorsement.controller.ts:96",{"_index":2451,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["src/endorsement/endorsement.module.ts",{"_index":2497,"title":{},"body":{"modules/EndorsementModule.html":{}}}],["src/endorsement/endorsement.service.ts",{"_index":2502,"title":{},"body":{"injectables/EndorsementService.html":{},"coverage.html":{}}}],["src/endorsement/endorsement.service.ts:11",{"_index":2509,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["src/endorsement/endorsement.service.ts:110",{"_index":2525,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["src/endorsement/endorsement.service.ts:124",{"_index":2527,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["src/endorsement/endorsement.service.ts:18",{"_index":2511,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["src/endorsement/endorsement.service.ts:22",{"_index":2513,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["src/endorsement/endorsement.service.ts:26",{"_index":2514,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["src/endorsement/endorsement.service.ts:37",{"_index":2516,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["src/endorsement/endorsement.service.ts:48",{"_index":2518,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["src/endorsement/endorsement.service.ts:61",{"_index":2520,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["src/endorsement/endorsement.service.ts:77",{"_index":2521,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["src/endorsement/endorsement.service.ts:91",{"_index":2523,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["src/endorsement/entities/endorsement.entity.ts",{"_index":1758,"title":{},"body":{"entities/DbEndorsement.html":{},"coverage.html":{}}}],["src/endorsement/entities/endorsement.entity.ts:14",{"_index":1761,"title":{},"body":{"entities/DbEndorsement.html":{}}}],["src/endorsement/entities/endorsement.entity.ts:22",{"_index":1760,"title":{},"body":{"entities/DbEndorsement.html":{}}}],["src/endorsement/entities/endorsement.entity.ts:30",{"_index":1763,"title":{},"body":{"entities/DbEndorsement.html":{}}}],["src/endorsement/entities/endorsement.entity.ts:38",{"_index":1764,"title":{},"body":{"entities/DbEndorsement.html":{}}}],["src/endorsement/entities/endorsement.entity.ts:45",{"_index":1767,"title":{},"body":{"entities/DbEndorsement.html":{}}}],["src/endorsement/entities/endorsement.entity.ts:52",{"_index":1769,"title":{},"body":{"entities/DbEndorsement.html":{}}}],["src/endorsement/entities/endorsement.entity.ts:62",{"_index":1771,"title":{},"body":{"entities/DbEndorsement.html":{}}}],["src/endorsement/entities/endorsement.entity.ts:72",{"_index":1759,"title":{},"body":{"entities/DbEndorsement.html":{}}}],["src/generate",{"_index":5316,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/health/health.controller.ts",{"_index":2667,"title":{},"body":{"controllers/HealthController.html":{},"coverage.html":{}}}],["src/health/health.controller.ts:32",{"_index":2673,"title":{},"body":{"controllers/HealthController.html":{}}}],["src/health/health.controller.ts:57",{"_index":2676,"title":{},"body":{"controllers/HealthController.html":{}}}],["src/health/health.module.ts",{"_index":2713,"title":{},"body":{"modules/HealthModule.html":{}}}],["src/highlight/dtos/highlight",{"_index":2237,"title":{},"body":{"classes/DbUserHighlightReactionResponse.html":{},"classes/HighlightOptionsDto.html":{},"coverage.html":{}}}],["src/highlight/entities/user",{"_index":2251,"title":{},"body":{"classes/DbUserHighlightRepo.html":{},"coverage.html":{}}}],["src/highlight/highlight.controller.ts",{"_index":2716,"title":{},"body":{"controllers/HighlightController.html":{},"coverage.html":{}}}],["src/highlight/highlight.controller.ts:106",{"_index":2754,"title":{},"body":{"controllers/HighlightController.html":{}}}],["src/highlight/highlight.controller.ts:117",{"_index":2748,"title":{},"body":{"controllers/HighlightController.html":{}}}],["src/highlight/highlight.controller.ts:35",{"_index":2745,"title":{},"body":{"controllers/HighlightController.html":{}}}],["src/highlight/highlight.controller.ts:46",{"_index":2738,"title":{},"body":{"controllers/HighlightController.html":{}}}],["src/highlight/highlight.controller.ts:61",{"_index":2734,"title":{},"body":{"controllers/HighlightController.html":{}}}],["src/highlight/highlight.controller.ts:79",{"_index":2758,"title":{},"body":{"controllers/HighlightController.html":{}}}],["src/highlight/highlight.controller.ts:93",{"_index":2742,"title":{},"body":{"controllers/HighlightController.html":{}}}],["src/highlight/highlight.module.ts",{"_index":2792,"title":{},"body":{"modules/HighlightModule.html":{}}}],["src/insight/dtos/create",{"_index":1376,"title":{},"body":{"classes/CreateInsightDto.html":{},"classes/CreateInsightMemberDto.html":{},"coverage.html":{}}}],["src/insight/dtos/insight",{"_index":2903,"title":{},"body":{"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["src/insight/dtos/update",{"_index":4201,"title":{},"body":{"classes/UpdateInsightDto.html":{},"classes/UpdateInsightMemberDto.html":{},"coverage.html":{}}}],["src/insight/entities/insight",{"_index":1816,"title":{},"body":{"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"coverage.html":{}}}],["src/insight/entities/insight.entity.ts",{"_index":1781,"title":{},"body":{"entities/DbInsight.html":{},"coverage.html":{}}}],["src/insight/entities/insight.entity.ts:105",{"_index":1808,"title":{},"body":{"entities/DbInsight.html":{}}}],["src/insight/entities/insight.entity.ts:115",{"_index":1788,"title":{},"body":{"entities/DbInsight.html":{}}}],["src/insight/entities/insight.entity.ts:123",{"_index":1812,"title":{},"body":{"entities/DbInsight.html":{}}}],["src/insight/entities/insight.entity.ts:127",{"_index":1801,"title":{},"body":{"entities/DbInsight.html":{}}}],["src/insight/entities/insight.entity.ts:33",{"_index":1790,"title":{},"body":{"entities/DbInsight.html":{}}}],["src/insight/entities/insight.entity.ts:44",{"_index":1813,"title":{},"body":{"entities/DbInsight.html":{}}}],["src/insight/entities/insight.entity.ts:54",{"_index":1798,"title":{},"body":{"entities/DbInsight.html":{}}}],["src/insight/entities/insight.entity.ts:61",{"_index":1796,"title":{},"body":{"entities/DbInsight.html":{}}}],["src/insight/entities/insight.entity.ts:68",{"_index":1793,"title":{},"body":{"entities/DbInsight.html":{}}}],["src/insight/entities/insight.entity.ts:75",{"_index":1795,"title":{},"body":{"entities/DbInsight.html":{}}}],["src/insight/entities/insight.entity.ts:85",{"_index":1805,"title":{},"body":{"entities/DbInsight.html":{}}}],["src/insight/entities/insight.entity.ts:95",{"_index":1786,"title":{},"body":{"entities/DbInsight.html":{}}}],["src/insight/insight",{"_index":2856,"title":{},"body":{"injectables/InsightMemberService.html":{},"injectables/InsightRepoService.html":{},"coverage.html":{}}}],["src/insight/insight.controller.ts",{"_index":2821,"title":{},"body":{"controllers/InsightController.html":{},"coverage.html":{}}}],["src/insight/insight.controller.ts:34",{"_index":2831,"title":{},"body":{"controllers/InsightController.html":{}}}],["src/insight/insight.controller.ts:50",{"_index":2837,"title":{},"body":{"controllers/InsightController.html":{}}}],["src/insight/insights.module.ts",{"_index":2952,"title":{},"body":{"modules/InsightsModule.html":{}}}],["src/insight/insights.service.ts",{"_index":2960,"title":{},"body":{"injectables/InsightsService.html":{},"coverage.html":{}}}],["src/insight/insights.service.ts:14",{"_index":2966,"title":{},"body":{"injectables/InsightsService.html":{}}}],["src/insight/insights.service.ts:21",{"_index":2970,"title":{},"body":{"injectables/InsightsService.html":{}}}],["src/insight/insights.service.ts:27",{"_index":2973,"title":{},"body":{"injectables/InsightsService.html":{}}}],["src/insight/insights.service.ts:60",{"_index":2969,"title":{},"body":{"injectables/InsightsService.html":{}}}],["src/insight/insights.service.ts:64",{"_index":2977,"title":{},"body":{"injectables/InsightsService.html":{}}}],["src/insight/insights.service.ts:68",{"_index":2975,"title":{},"body":{"injectables/InsightsService.html":{}}}],["src/insight/insights.service.ts:72",{"_index":2972,"title":{},"body":{"injectables/InsightsService.html":{}}}],["src/insight/user",{"_index":4709,"title":{},"body":{"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"coverage.html":{}}}],["src/issues/dtos/create",{"_index":1397,"title":{},"body":{"classes/CreateIssueSummaryDto.html":{},"coverage.html":{}}}],["src/issues/issue",{"_index":3000,"title":{},"body":{"controllers/IssueSummaryController.html":{},"modules/IssueSummaryModule.html":{},"injectables/IssueSummaryService.html":{},"coverage.html":{}}}],["src/log/custom",{"_index":1467,"title":{},"body":{"injectables/CustomLogger.html":{},"coverage.html":{}}}],["src/log/dtos/create",{"_index":1404,"title":{},"body":{"classes/CreateLogDto.html":{},"coverage.html":{}}}],["src/log/log.entity.ts",{"_index":1851,"title":{},"body":{"entities/DbLog.html":{},"coverage.html":{}}}],["src/log/log.entity.ts:12",{"_index":1857,"title":{},"body":{"entities/DbLog.html":{}}}],["src/log/log.entity.ts:15",{"_index":1856,"title":{},"body":{"entities/DbLog.html":{}}}],["src/log/log.entity.ts:18",{"_index":1853,"title":{},"body":{"entities/DbLog.html":{}}}],["src/log/log.entity.ts:6",{"_index":1855,"title":{},"body":{"entities/DbLog.html":{}}}],["src/log/log.entity.ts:9",{"_index":1852,"title":{},"body":{"entities/DbLog.html":{}}}],["src/log/log.module.ts",{"_index":3027,"title":{},"body":{"modules/LogModule.html":{}}}],["src/log/log.service.ts",{"_index":3031,"title":{},"body":{"injectables/LogService.html":{},"coverage.html":{}}}],["src/log/log.service.ts:14",{"_index":3037,"title":{},"body":{"injectables/LogService.html":{}}}],["src/log/log.service.ts:8",{"_index":3034,"title":{},"body":{"injectables/LogService.html":{}}}],["src/main.ts",{"_index":5319,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/open",{"_index":843,"title":{},"body":{"interfaces/ChatResponse.html":{},"modules/OpenAiModule.html":{},"injectables/OpenAiService.html":{},"coverage.html":{}}}],["src/pizza/commit",{"_index":976,"title":{},"body":{"injectables/CommitAuthorsService.html":{},"coverage.html":{}}}],["src/pizza/commits.service.ts",{"_index":1008,"title":{},"body":{"injectables/CommitsService.html":{},"coverage.html":{}}}],["src/pizza/commits.service.ts:11",{"_index":1013,"title":{},"body":{"injectables/CommitsService.html":{}}}],["src/pizza/commits.service.ts:18",{"_index":1015,"title":{},"body":{"injectables/CommitsService.html":{}}}],["src/pizza/commits.service.ts:24",{"_index":1017,"title":{},"body":{"injectables/CommitsService.html":{}}}],["src/pizza/commits.service.ts:37",{"_index":1019,"title":{},"body":{"injectables/CommitsService.html":{}}}],["src/pizza/commits.service.ts:50",{"_index":1021,"title":{},"body":{"injectables/CommitsService.html":{}}}],["src/pizza/dtos/baked",{"_index":739,"title":{},"body":{"classes/BakeRepoDto.html":{},"coverage.html":{}}}],["src/pizza/dtos/commit_authors.dto.ts",{"_index":968,"title":{},"body":{"classes/CommitAuthorDto.html":{},"coverage.html":{}}}],["src/pizza/dtos/commit_authors.dto.ts:11",{"_index":973,"title":{},"body":{"classes/CommitAuthorDto.html":{}}}],["src/pizza/dtos/commits.dto.ts",{"_index":1000,"title":{},"body":{"classes/CommitsDto.html":{},"coverage.html":{}}}],["src/pizza/dtos/commits.dto.ts:11",{"_index":1005,"title":{},"body":{"classes/CommitsDto.html":{}}}],["src/pizza/entities/baked",{"_index":1570,"title":{},"body":{"entities/DbBakedRepo.html":{},"coverage.html":{}}}],["src/pizza/entities/commit_authors.entity.ts",{"_index":1602,"title":{},"body":{"entities/DbCommitAuthors.html":{},"coverage.html":{}}}],["src/pizza/entities/commit_authors.entity.ts:20",{"_index":1608,"title":{},"body":{"entities/DbCommitAuthors.html":{}}}],["src/pizza/entities/commit_authors.entity.ts:28",{"_index":1605,"title":{},"body":{"entities/DbCommitAuthors.html":{}}}],["src/pizza/entities/commit_authors.entity.ts:32",{"_index":1607,"title":{},"body":{"entities/DbCommitAuthors.html":{}}}],["src/pizza/entities/commits.entity.ts",{"_index":1610,"title":{},"body":{"entities/DbCommits.html":{},"coverage.html":{}}}],["src/pizza/entities/commits.entity.ts:21",{"_index":1631,"title":{},"body":{"entities/DbCommits.html":{}}}],["src/pizza/entities/commits.entity.ts:31",{"_index":1630,"title":{},"body":{"entities/DbCommits.html":{}}}],["src/pizza/entities/commits.entity.ts:41",{"_index":1629,"title":{},"body":{"entities/DbCommits.html":{}}}],["src/pizza/entities/commits.entity.ts:51",{"_index":1623,"title":{},"body":{"entities/DbCommits.html":{}}}],["src/pizza/entities/commits.entity.ts:59",{"_index":1619,"title":{},"body":{"entities/DbCommits.html":{}}}],["src/pizza/entities/commits.entity.ts:69",{"_index":1627,"title":{},"body":{"entities/DbCommits.html":{}}}],["src/pizza/entities/commits.entity.ts:77",{"_index":1625,"title":{},"body":{"entities/DbCommits.html":{}}}],["src/pizza/pizza",{"_index":3090,"title":{},"body":{"controllers/PizzaOvenController.html":{},"modules/PizzaOvenModule.html":{},"injectables/PizzaOvenService.html":{},"coverage.html":{}}}],["src/pull",{"_index":878,"title":{},"body":{"controllers/CodeExplanationController.html":{},"injectables/CodeExplanationService.html":{},"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"controllers/CodeTestSuggestionController.html":{},"injectables/CodeTestSuggestionService.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbPullRequestReview.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestInsightsService.html":{},"modules/PullRequestModule.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestReviewService.html":{},"injectables/PullRequestService.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["src/repo/dtos/repo",{"_index":3558,"title":{},"body":{"classes/RepoInfo.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["src/repo/entities/repo.entity.ts",{"_index":5324,"title":{},"body":{"coverage.html":{}}}],["src/repo/entities/repo.to.user.stargazers.entity.ts",{"_index":2030,"title":{},"body":{"entities/DbRepoToUserStargazers.html":{},"coverage.html":{}}}],["src/repo/entities/repo.to.user.stargazers.entity.ts:27",{"_index":2036,"title":{},"body":{"entities/DbRepoToUserStargazers.html":{}}}],["src/repo/entities/repo.to.user.stargazers.entity.ts:35",{"_index":2043,"title":{},"body":{"entities/DbRepoToUserStargazers.html":{}}}],["src/repo/entities/repo.to.user.stargazers.entity.ts:43",{"_index":2039,"title":{},"body":{"entities/DbRepoToUserStargazers.html":{}}}],["src/repo/entities/repo.to.user.stargazers.entity.ts:53",{"_index":2032,"title":{},"body":{"entities/DbRepoToUserStargazers.html":{}}}],["src/repo/entities/repo.to.user.stargazers.entity.ts:63",{"_index":2040,"title":{},"body":{"entities/DbRepoToUserStargazers.html":{}}}],["src/repo/entities/repo.to.user.stargazers.entity.ts:70",{"_index":2033,"title":{},"body":{"entities/DbRepoToUserStargazers.html":{}}}],["src/repo/entities/repo.to.user.stargazers.entity.ts:78",{"_index":2042,"title":{},"body":{"entities/DbRepoToUserStargazers.html":{}}}],["src/repo/entities/repo.to.user.stargazers.entity.ts:86",{"_index":2038,"title":{},"body":{"entities/DbRepoToUserStargazers.html":{}}}],["src/repo/entities/repo.to.user.stars.entity.ts",{"_index":2047,"title":{},"body":{"entities/DbRepoToUserStars.html":{},"coverage.html":{}}}],["src/repo/entities/repo.to.user.stars.entity.ts:27",{"_index":2051,"title":{},"body":{"entities/DbRepoToUserStars.html":{}}}],["src/repo/entities/repo.to.user.stars.entity.ts:35",{"_index":2058,"title":{},"body":{"entities/DbRepoToUserStars.html":{}}}],["src/repo/entities/repo.to.user.stars.entity.ts:43",{"_index":2054,"title":{},"body":{"entities/DbRepoToUserStars.html":{}}}],["src/repo/entities/repo.to.user.stars.entity.ts:53",{"_index":2049,"title":{},"body":{"entities/DbRepoToUserStars.html":{}}}],["src/repo/entities/repo.to.user.stars.entity.ts:63",{"_index":2055,"title":{},"body":{"entities/DbRepoToUserStars.html":{}}}],["src/repo/entities/repo.to.user.stars.entity.ts:70",{"_index":2050,"title":{},"body":{"entities/DbRepoToUserStars.html":{}}}],["src/repo/entities/repo.to.user.stars.entity.ts:78",{"_index":2057,"title":{},"body":{"entities/DbRepoToUserStars.html":{}}}],["src/repo/entities/repo.to.user.stars.entity.ts:86",{"_index":2053,"title":{},"body":{"entities/DbRepoToUserStars.html":{}}}],["src/repo/entities/repo.to.user.submissions.entity.ts",{"_index":2062,"title":{},"body":{"entities/DbRepoToUserSubmissions.html":{},"coverage.html":{}}}],["src/repo/entities/repo.to.user.submissions.entity.ts:27",{"_index":2067,"title":{},"body":{"entities/DbRepoToUserSubmissions.html":{}}}],["src/repo/entities/repo.to.user.submissions.entity.ts:35",{"_index":2076,"title":{},"body":{"entities/DbRepoToUserSubmissions.html":{}}}],["src/repo/entities/repo.to.user.submissions.entity.ts:43",{"_index":2072,"title":{},"body":{"entities/DbRepoToUserSubmissions.html":{}}}],["src/repo/entities/repo.to.user.submissions.entity.ts:50",{"_index":2069,"title":{},"body":{"entities/DbRepoToUserSubmissions.html":{}}}],["src/repo/entities/repo.to.user.submissions.entity.ts:60",{"_index":2065,"title":{},"body":{"entities/DbRepoToUserSubmissions.html":{}}}],["src/repo/entities/repo.to.user.submissions.entity.ts:70",{"_index":2073,"title":{},"body":{"entities/DbRepoToUserSubmissions.html":{}}}],["src/repo/entities/repo.to.user.submissions.entity.ts:77",{"_index":2066,"title":{},"body":{"entities/DbRepoToUserSubmissions.html":{}}}],["src/repo/entities/repo.to.user.submissions.entity.ts:85",{"_index":2075,"title":{},"body":{"entities/DbRepoToUserSubmissions.html":{}}}],["src/repo/entities/repo.to.user.submissions.entity.ts:93",{"_index":2071,"title":{},"body":{"entities/DbRepoToUserSubmissions.html":{}}}],["src/repo/entities/repo.to.user.votes.entity.ts",{"_index":2080,"title":{},"body":{"entities/DbRepoToUserVotes.html":{},"coverage.html":{}}}],["src/repo/entities/repo.to.user.votes.entity.ts:27",{"_index":2084,"title":{},"body":{"entities/DbRepoToUserVotes.html":{}}}],["src/repo/entities/repo.to.user.votes.entity.ts:35",{"_index":2091,"title":{},"body":{"entities/DbRepoToUserVotes.html":{}}}],["src/repo/entities/repo.to.user.votes.entity.ts:43",{"_index":2087,"title":{},"body":{"entities/DbRepoToUserVotes.html":{}}}],["src/repo/entities/repo.to.user.votes.entity.ts:53",{"_index":2082,"title":{},"body":{"entities/DbRepoToUserVotes.html":{}}}],["src/repo/entities/repo.to.user.votes.entity.ts:63",{"_index":2088,"title":{},"body":{"entities/DbRepoToUserVotes.html":{}}}],["src/repo/entities/repo.to.user.votes.entity.ts:70",{"_index":2083,"title":{},"body":{"entities/DbRepoToUserVotes.html":{}}}],["src/repo/entities/repo.to.user.votes.entity.ts:78",{"_index":2090,"title":{},"body":{"entities/DbRepoToUserVotes.html":{}}}],["src/repo/entities/repo.to.user.votes.entity.ts:86",{"_index":2086,"title":{},"body":{"entities/DbRepoToUserVotes.html":{}}}],["src/repo/repo.controller.ts",{"_index":3496,"title":{},"body":{"controllers/RepoController.html":{},"coverage.html":{}}}],["src/repo/repo.controller.ts:23",{"_index":3506,"title":{},"body":{"controllers/RepoController.html":{}}}],["src/repo/repo.controller.ts:34",{"_index":3510,"title":{},"body":{"controllers/RepoController.html":{}}}],["src/repo/repo.controller.ts:45",{"_index":3501,"title":{},"body":{"controllers/RepoController.html":{}}}],["src/repo/repo.controller.ts:56",{"_index":3504,"title":{},"body":{"controllers/RepoController.html":{}}}],["src/repo/repo.module.ts",{"_index":3568,"title":{},"body":{"modules/RepoModule.html":{}}}],["src/repo/repo.service.ts",{"_index":3586,"title":{},"body":{"injectables/RepoService.html":{},"coverage.html":{}}}],["src/repo/repo.service.ts:157",{"_index":3608,"title":{},"body":{"injectables/RepoService.html":{}}}],["src/repo/repo.service.ts:18",{"_index":3593,"title":{},"body":{"injectables/RepoService.html":{}}}],["src/repo/repo.service.ts:26",{"_index":3611,"title":{},"body":{"injectables/RepoService.html":{}}}],["src/repo/repo.service.ts:285",{"_index":3601,"title":{},"body":{"injectables/RepoService.html":{}}}],["src/repo/repo.service.ts:299",{"_index":3602,"title":{},"body":{"injectables/RepoService.html":{}}}],["src/repo/repo.service.ts:313",{"_index":3599,"title":{},"body":{"injectables/RepoService.html":{}}}],["src/repo/repo.service.ts:347",{"_index":3600,"title":{},"body":{"injectables/RepoService.html":{}}}],["src/repo/repo.service.ts:41",{"_index":3597,"title":{},"body":{"injectables/RepoService.html":{}}}],["src/repo/repo.service.ts:418",{"_index":3606,"title":{},"body":{"injectables/RepoService.html":{}}}],["src/repo/repo.service.ts:448",{"_index":3604,"title":{},"body":{"injectables/RepoService.html":{}}}],["src/repo/repo.service.ts:66",{"_index":3596,"title":{},"body":{"injectables/RepoService.html":{}}}],["src/star/repo",{"_index":3690,"title":{},"body":{"controllers/RepoStarController.html":{},"coverage.html":{}}}],["src/star/star.module.ts",{"_index":3865,"title":{},"body":{"modules/StarModule.html":{}}}],["src/star/star.service.ts",{"_index":3867,"title":{},"body":{"injectables/StarService.html":{},"coverage.html":{}}}],["src/star/star.service.ts:13",{"_index":3873,"title":{},"body":{"injectables/StarService.html":{}}}],["src/star/star.service.ts:19",{"_index":3877,"title":{},"body":{"injectables/StarService.html":{}}}],["src/star/star.service.ts:42",{"_index":3875,"title":{},"body":{"injectables/StarService.html":{}}}],["src/star/star.service.ts:7",{"_index":3871,"title":{},"body":{"injectables/StarService.html":{}}}],["src/stargaze/repo",{"_index":3737,"title":{},"body":{"controllers/RepoStargazeController.html":{},"coverage.html":{}}}],["src/stargaze/stargaze.module.ts",{"_index":3894,"title":{},"body":{"modules/StargazeModule.html":{}}}],["src/stargaze/stargaze.service.ts",{"_index":3896,"title":{},"body":{"injectables/StargazeService.html":{},"coverage.html":{}}}],["src/stargaze/stargaze.service.ts:13",{"_index":3902,"title":{},"body":{"injectables/StargazeService.html":{}}}],["src/stargaze/stargaze.service.ts:19",{"_index":3906,"title":{},"body":{"injectables/StargazeService.html":{}}}],["src/stargaze/stargaze.service.ts:44",{"_index":3904,"title":{},"body":{"injectables/StargazeService.html":{}}}],["src/stargaze/stargaze.service.ts:7",{"_index":3900,"title":{},"body":{"injectables/StargazeService.html":{}}}],["src/stripe",{"_index":3972,"title":{},"body":{"modules/StripeWebHookModule.html":{},"controllers/StripeWebhookController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/stripe/stripe.module.ts",{"_index":3919,"title":{},"body":{"modules/StripeModule.html":{}}}],["src/stripe/stripe.service.ts",{"_index":3921,"title":{},"body":{"injectables/StripeService.html":{},"coverage.html":{}}}],["src/stripe/stripe.service.ts:12",{"_index":3930,"title":{},"body":{"injectables/StripeService.html":{}}}],["src/stripe/stripe.service.ts:20",{"_index":3926,"title":{},"body":{"injectables/StripeService.html":{}}}],["src/stripe/stripe.service.ts:27",{"_index":3928,"title":{},"body":{"injectables/StripeService.html":{}}}],["src/stripe/stripe.service.ts:8",{"_index":3924,"title":{},"body":{"injectables/StripeService.html":{}}}],["src/submit/repo",{"_index":3775,"title":{},"body":{"controllers/RepoSubmitController.html":{},"coverage.html":{}}}],["src/submit/submit.module.ts",{"_index":4060,"title":{},"body":{"modules/SubmitModule.html":{}}}],["src/submit/submit.service.ts",{"_index":4062,"title":{},"body":{"injectables/SubmitService.html":{},"coverage.html":{}}}],["src/submit/submit.service.ts:13",{"_index":4068,"title":{},"body":{"injectables/SubmitService.html":{}}}],["src/submit/submit.service.ts:19",{"_index":4072,"title":{},"body":{"injectables/SubmitService.html":{}}}],["src/submit/submit.service.ts:42",{"_index":4070,"title":{},"body":{"injectables/SubmitService.html":{}}}],["src/submit/submit.service.ts:7",{"_index":4066,"title":{},"body":{"injectables/SubmitService.html":{}}}],["src/subscription/stripe",{"_index":2095,"title":{},"body":{"entities/DbSubscription.html":{},"modules/StripeSubscriptionModule.html":{},"injectables/StripeSubscriptionService.html":{},"coverage.html":{}}}],["src/tier/tier.module.ts",{"_index":4165,"title":{},"body":{"modules/TierModule.html":{}}}],["src/tier/tier.service.ts",{"_index":4167,"title":{},"body":{"injectables/TierService.html":{},"coverage.html":{}}}],["src/tier/tier.service.ts:11",{"_index":4172,"title":{},"body":{"injectables/TierService.html":{}}}],["src/tier/tier.service.ts:7",{"_index":4169,"title":{},"body":{"injectables/TierService.html":{}}}],["src/user",{"_index":6,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"classes/CollaboratorsDto.html":{},"classes/ContributionPageMetaDto.html":{},"classes/ContributionsByProjectDto.html":{},"classes/ContributionsPageDto.html":{},"classes/ContributionsTimeframeDto.html":{},"classes/Contributor.html":{},"classes/CreateUserListDto.html":{},"entities/DbContributionStatTimeframe.html":{},"entities/DbContributionsProjects.html":{},"entities/DbContributorCategoryTimeframe.html":{},"classes/DbTimezone.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserListContributorStat-1.html":{},"entities/DbUserRepo.html":{},"classes/FilterListContributorsDto.html":{},"classes/TopProjectsDto.html":{},"controllers/UserListController.html":{},"modules/UserListModule.html":{},"classes/UserListMostActiveContributorsDto.html":{},"injectables/UserListService.html":{},"controllers/UserListStatsController.html":{},"injectables/UserListStatsService.html":{},"classes/UserRepoOptionsDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"modules/UserReposModule.html":{},"injectables/UserReposService.html":{},"classes/VotedRepoDto.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["src/user/dtos/apply",{"_index":509,"title":{},"body":{"classes/ApplyUserCouponDto.html":{},"coverage.html":{}}}],["src/user/dtos/contributor",{"_index":1272,"title":{},"body":{"classes/ContributorPullRequestsDto.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["src/user/dtos/create",{"_index":1411,"title":{},"body":{"classes/CreateUserCollaborationDto.html":{},"classes/CreateUserHighlightDto.html":{},"coverage.html":{}}}],["src/user/dtos/filtered",{"_index":2619,"title":{},"body":{"classes/FilteredUsersDto.html":{},"coverage.html":{}}}],["src/user/dtos/follow",{"_index":2628,"title":{},"body":{"classes/FollowManyUsersDto.html":{},"coverage.html":{}}}],["src/user/dtos/top",{"_index":4194,"title":{},"body":{"classes/TopUsersDto.html":{},"coverage.html":{}}}],["src/user/dtos/update",{"_index":4212,"title":{},"body":{"classes/UpdateUserCollaborationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"coverage.html":{}}}],["src/user/entities/filtered",{"_index":1774,"title":{},"body":{"classes/DbFilteredUser.html":{},"coverage.html":{}}}],["src/user/entities/top",{"_index":2144,"title":{},"body":{"classes/DbTopUser.html":{},"coverage.html":{}}}],["src/user/entities/user",{"_index":2145,"title":{},"body":{"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserNotification.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["src/user/services/user.service.ts",{"_index":5329,"title":{},"body":{"coverage.html":{}}}],["src/user/user",{"_index":4265,"title":{},"body":{"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserEndorsementController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowingController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"injectables/UserOrganizationService.html":{},"controllers/UserRecommendationController.html":{},"coverage.html":{}}}],["src/user/user.controller.ts",{"_index":4336,"title":{},"body":{"controllers/UserController.html":{},"coverage.html":{}}}],["src/user/user.controller.ts:102",{"_index":4353,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:117",{"_index":4371,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:128",{"_index":4374,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:41",{"_index":4367,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:53",{"_index":4362,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:68",{"_index":4347,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:85",{"_index":4357,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.entity.ts",{"_index":5331,"title":{},"body":{"coverage.html":{}}}],["src/user/user.module.ts",{"_index":5108,"title":{},"body":{"modules/UserModule.html":{}}}],["src/vote/repo",{"_index":3812,"title":{},"body":{"controllers/RepoVoteController.html":{},"coverage.html":{}}}],["src/vote/vote.module.ts",{"_index":5248,"title":{},"body":{"modules/VoteModule.html":{}}}],["src/vote/vote.service.ts",{"_index":5250,"title":{},"body":{"injectables/VoteService.html":{},"coverage.html":{}}}],["src/vote/vote.service.ts:13",{"_index":5257,"title":{},"body":{"injectables/VoteService.html":{}}}],["src/vote/vote.service.ts:19",{"_index":5260,"title":{},"body":{"injectables/VoteService.html":{}}}],["src/vote/vote.service.ts:42",{"_index":5264,"title":{},"body":{"injectables/VoteService.html":{}}}],["src/vote/vote.service.ts:61",{"_index":5259,"title":{},"body":{"injectables/VoteService.html":{}}}],["src/vote/vote.service.ts:7",{"_index":5255,"title":{},"body":{"injectables/VoteService.html":{}}}],["src/vote/vote.service.ts:77",{"_index":5262,"title":{},"body":{"injectables/VoteService.html":{}}}],["ssl",{"_index":460,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["stack",{"_index":1482,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["staff",{"_index":2068,"title":{},"body":{"entities/DbRepoToUserSubmissions.html":{}}}],["standard",{"_index":2600,"title":{},"body":{"classes/FilterListContributorsDto.html":{}}}],["star",{"_index":2048,"title":{},"body":{"entities/DbRepoToUserStars.html":{},"controllers/RepoStarController.html":{},"injectables/StarService.html":{}}}],["star'})@apiokresponse({description",{"_index":3700,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["star'})@apiparam({name",{"_index":3705,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["star.controller",{"_index":3866,"title":{},"body":{"modules/StarModule.html":{}}}],["star.controller.ts",{"_index":3691,"title":{},"body":{"controllers/RepoStarController.html":{},"coverage.html":{}}}],["star.controller.ts:100",{"_index":3706,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["star.controller.ts:119",{"_index":3709,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["star.controller.ts:36",{"_index":3713,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["star.controller.ts:57",{"_index":3718,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["star.controller.ts:76",{"_index":3721,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["star.service",{"_index":3725,"title":{},"body":{"controllers/RepoStarController.html":{},"modules/StarModule.html":{}}}],["star/star.module",{"_index":355,"title":{},"body":{"modules/AppModule.html":{}}}],["starbyrepoid",{"_index":3869,"title":{},"body":{"injectables/StarService.html":{}}}],["starbyrepoid(repoid",{"_index":3876,"title":{},"body":{"injectables/StarService.html":{}}}],["starexists",{"_index":3883,"title":{},"body":{"injectables/StarService.html":{}}}],["starexists.deleted_at",{"_index":3884,"title":{},"body":{"injectables/StarService.html":{}}}],["stargaze",{"_index":2031,"title":{},"body":{"entities/DbRepoToUserStargazers.html":{},"controllers/RepoStargazeController.html":{}}}],["stargaze.controller",{"_index":3895,"title":{},"body":{"modules/StargazeModule.html":{}}}],["stargaze.controller.ts",{"_index":3738,"title":{},"body":{"controllers/RepoStargazeController.html":{},"coverage.html":{}}}],["stargaze.controller.ts:103",{"_index":3749,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["stargaze.controller.ts:125",{"_index":3752,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["stargaze.controller.ts:36",{"_index":3755,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["stargaze.controller.ts:57",{"_index":3759,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["stargaze.controller.ts:79",{"_index":3762,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["stargaze.service",{"_index":3764,"title":{},"body":{"controllers/RepoStargazeController.html":{},"modules/StargazeModule.html":{}}}],["stargaze/stargaze.module",{"_index":356,"title":{},"body":{"modules/AppModule.html":{}}}],["stargazebyrepoid",{"_index":3898,"title":{},"body":{"injectables/StargazeService.html":{}}}],["stargazebyrepoid(repoid",{"_index":3905,"title":{},"body":{"injectables/StargazeService.html":{}}}],["stargazeexists",{"_index":3911,"title":{},"body":{"injectables/StargazeService.html":{}}}],["stargazeexists.deleted_at",{"_index":3912,"title":{},"body":{"injectables/StargazeService.html":{}}}],["stargazemodule",{"_index":278,"title":{"modules/StargazeModule.html":{}},"body":{"modules/AppModule.html":{},"modules/StargazeModule.html":{},"modules.html":{},"overview.html":{}}}],["stargazeonebyid",{"_index":3742,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["stargazeonebyid(id",{"_index":3756,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["stargazeonebyownerandrepo",{"_index":3743,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["stargazeonebyownerandrepo(owner",{"_index":3760,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["stargazers",{"_index":3632,"title":{},"body":{"injectables/RepoService.html":{},"controllers/RepoStargazeController.html":{}}}],["stargazerscount",{"_index":3580,"title":{},"body":{"classes/RepoPageOptionsDto.html":{},"injectables/RepoService.html":{},"miscellaneous/enumerations.html":{}}}],["stargazeservice",{"_index":3763,"title":{"injectables/StargazeService.html":{}},"body":{"controllers/RepoStargazeController.html":{},"modules/StargazeModule.html":{},"injectables/StargazeService.html":{},"coverage.html":{},"overview.html":{}}}],["starmodule",{"_index":277,"title":{"modules/StarModule.html":{}},"body":{"modules/AppModule.html":{},"modules/StarModule.html":{},"modules.html":{},"overview.html":{}}}],["staronebyid",{"_index":3695,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["staronebyid(@param(\"id",{"_index":3729,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["staronebyid(id",{"_index":3714,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["staronebyownerandrepo",{"_index":3696,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["staronebyownerandrepo(owner",{"_index":3719,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["starred",{"_index":3712,"title":{},"body":{"controllers/RepoStarController.html":{},"injectables/StarService.html":{}}}],["stars",{"_index":3574,"title":{},"body":{"classes/RepoPageOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"miscellaneous/enumerations.html":{}}}],["starscount",{"_index":3581,"title":{},"body":{"classes/RepoPageOptionsDto.html":{},"injectables/RepoService.html":{},"miscellaneous/enumerations.html":{}}}],["starservice",{"_index":3724,"title":{"injectables/StarService.html":{}},"body":{"controllers/RepoStarController.html":{},"modules/StarModule.html":{},"injectables/StarService.html":{},"coverage.html":{},"overview.html":{}}}],["start",{"_index":933,"title":{},"body":{"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"classes/ContributionPageOptionsDto.html":{},"classes/ContributorPullRequestsDto.html":{},"entities/DbContributionStatTimeframe.html":{},"entities/DbContributorCategoryTimeframe.html":{},"entities/DbSubscription.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"controllers/RepoContributionsController.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/UserListMostActiveContributorsDto.html":{},"classes/UserRepoOptionsDto.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["start:dev",{"_index":5455,"title":{},"body":{"index.html":{}}}],["start_date",{"_index":3403,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["start_date}'::timestamp",{"_index":3447,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["start_range",{"_index":3400,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["startdate",{"_index":157,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/ContributionService.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoFilterService.html":{},"injectables/RepoService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserListService.html":{},"injectables/UserListStatsService.html":{}}}],["startdate}'::timestamp",{"_index":161,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/ContributionService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoFilterService.html":{},"injectables/RepoService.html":{},"injectables/UserListStatsService.html":{}}}],["started",{"_index":5351,"title":{"index.html":{},"license.html":{}},"body":{"miscellaneous/variables.html":{}}}],["starting",{"_index":3297,"title":{},"body":{"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{}}}],["starts",{"_index":5768,"title":{},"body":{"miscellaneous/variables.html":{}}}],["starttime",{"_index":2808,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{},"miscellaneous/variables.html":{}}}],["starttime)}ms",{"_index":5688,"title":{},"body":{"miscellaneous/variables.html":{}}}],["stat.service",{"_index":4936,"title":{},"body":{"modules/UserListModule.html":{},"controllers/UserListStatsController.html":{}}}],["stat.service.ts",{"_index":9,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{},"coverage.html":{}}}],["stat.service.ts:191",{"_index":5098,"title":{},"body":{"injectables/UserListStatsService.html":{}}}],["stat.service.ts:206",{"_index":5094,"title":{},"body":{"injectables/UserListStatsService.html":{}}}],["stat.service.ts:221",{"_index":5103,"title":{},"body":{"injectables/UserListStatsService.html":{}}}],["stat.service.ts:236",{"_index":5096,"title":{},"body":{"injectables/UserListStatsService.html":{}}}],["stat.service.ts:27",{"_index":5081,"title":{},"body":{"injectables/UserListStatsService.html":{}}}],["stat.service.ts:312",{"_index":5100,"title":{},"body":{"injectables/UserListStatsService.html":{}}}],["stat.service.ts:33",{"_index":5088,"title":{},"body":{"injectables/UserListStatsService.html":{}}}],["stat.service.ts:363",{"_index":5092,"title":{},"body":{"injectables/UserListStatsService.html":{}}}],["stat.service.ts:39",{"_index":5102,"title":{},"body":{"injectables/UserListStatsService.html":{}}}],["stat.service.ts:402",{"_index":5083,"title":{},"body":{"injectables/UserListStatsService.html":{}}}],["stat.service.ts:432",{"_index":5087,"title":{},"body":{"injectables/UserListStatsService.html":{}}}],["stat.service.ts:462",{"_index":5085,"title":{},"body":{"injectables/UserListStatsService.html":{}}}],["stat.service.ts:82",{"_index":5090,"title":{},"body":{"injectables/UserListStatsService.html":{}}}],["state",{"_index":1905,"title":{},"body":{"entities/DbPullRequest.html":{},"entities/DbPullRequestReview.html":{}}}],["statements",{"_index":5281,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":5521,"title":{},"body":{"index.html":{}}}],["stats",{"_index":5057,"title":{},"body":{"controllers/UserListStatsController.html":{}}}],["stats.controller",{"_index":4937,"title":{},"body":{"modules/UserListModule.html":{}}}],["stats.controller.ts",{"_index":5030,"title":{},"body":{"controllers/UserListStatsController.html":{},"coverage.html":{}}}],["stats.controller.ts:105",{"_index":5051,"title":{},"body":{"controllers/UserListStatsController.html":{}}}],["stats.controller.ts:40",{"_index":5065,"title":{},"body":{"controllers/UserListStatsController.html":{}}}],["stats.controller.ts:56",{"_index":5053,"title":{},"body":{"controllers/UserListStatsController.html":{}}}],["stats.controller.ts:73",{"_index":5042,"title":{},"body":{"controllers/UserListStatsController.html":{}}}],["stats.controller.ts:89",{"_index":5060,"title":{},"body":{"controllers/UserListStatsController.html":{}}}],["stats.entity",{"_index":32,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"modules/UserListModule.html":{},"controllers/UserListStatsController.html":{},"injectables/UserListStatsService.html":{}}}],["stats.entity.ts",{"_index":2292,"title":{},"body":{"entities/DbUserListContributorStat-1.html":{},"coverage.html":{}}}],["stats.entity.ts:15",{"_index":2296,"title":{},"body":{"entities/DbUserListContributorStat-1.html":{}}}],["stats.entity.ts:27",{"_index":2294,"title":{},"body":{"entities/DbUserListContributorStat-1.html":{}}}],["stats.entity.ts:39",{"_index":2297,"title":{},"body":{"entities/DbUserListContributorStat-1.html":{}}}],["stats.entity.ts:51",{"_index":2298,"title":{},"body":{"entities/DbUserListContributorStat-1.html":{}}}],["stats.entity.ts:63",{"_index":2295,"title":{},"body":{"entities/DbUserListContributorStat-1.html":{}}}],["stats.entity.ts:75",{"_index":2293,"title":{},"body":{"entities/DbUserListContributorStat-1.html":{}}}],["status",{"_index":2106,"title":{},"body":{"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"classes/PullRequestPageOptionsDto.html":{},"controllers/StripeWebhookController.html":{},"classes/UpdateUserCollaborationDto.html":{},"controllers/UserCollaborationController.html":{},"miscellaneous/variables.html":{}}}],["statuscode",{"_index":2812,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{},"controllers/PizzaOvenController.html":{}}}],["statusmessage",{"_index":2813,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{}}}],["steps",{"_index":5372,"title":{},"body":{"index.html":{}}}],["stood",{"_index":5442,"title":{},"body":{"index.html":{}}}],["string",{"_index":76,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"classes/ApplyUserCouponDto.html":{},"controllers/AuthController.html":{},"classes/BakeRepoDto.html":{},"injectables/BlogSummaryService.html":{},"interfaces/ChatResponse.html":{},"injectables/CodeExplanationService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"classes/CommitAuthorDto.html":{},"classes/CommitsDto.html":{},"injectables/ContributionService.html":{},"classes/Contributor.html":{},"injectables/CouponService.html":{},"classes/CreateBlogSummaryDto.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateInsightDto.html":{},"classes/CreateInsightMemberDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/CreateLogDto.html":{},"classes/CreateUserCollaborationDto.html":{},"classes/CreateUserHighlightDto.html":{},"classes/CreateUserListDto.html":{},"injectables/CustomLogger.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"entities/DbBakedRepo.html":{},"entities/DbCommitAuthors.html":{},"entities/DbCommits.html":{},"entities/DbContribution.html":{},"entities/DbContributionStatTimeframe.html":{},"entities/DbContributionsProjects.html":{},"entities/DbContributorCategoryTimeframe.html":{},"entities/DbCoupon.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"classes/DbFilteredUser.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbPullRequestReview.html":{},"entities/DbRepoLoginContributions.html":{},"entities/DbSubscription.html":{},"classes/DbTimezone.html":{},"classes/DbTopUser.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightReactionResponse.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserListContributorStat.html":{},"entities/DbUserListContributorStat-1.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"controllers/EndorsementController.html":{},"injectables/EndorsementService.html":{},"classes/FilterListContributorsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/FilteredUsersDto.html":{},"classes/FollowManyUsersDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"classes/HighlightOptionsDto.html":{},"injectables/InsightMemberService.html":{},"classes/InsightOptionsDto.html":{},"injectables/InsightsService.html":{},"injectables/IssueSummaryService.html":{},"injectables/OpenAiService.html":{},"injectables/PizzaOvenService.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"controllers/PullRequestController.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestInsightsService.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"injectables/RepoFilterService.html":{},"classes/RepoInfo.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StripeService.html":{},"controllers/StripeWebhookController.html":{},"classes/SupabaseAuthDto.html":{},"injectables/TierService.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateInsightMemberDto.html":{},"classes/UpdateUserCollaborationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"controllers/UserFollowingController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"injectables/UserListService.html":{},"controllers/UserListStatsController.html":{},"injectables/UserListStatsService.html":{},"classes/UserOnboardingDto.html":{},"injectables/UserReposService.html":{},"miscellaneous/variables.html":{}}}],["string'})@apiparam({name",{"_index":4843,"title":{},"body":{"controllers/UserListController.html":{}}}],["string'})@apiquery({name",{"_index":5041,"title":{},"body":{"controllers/UserListStatsController.html":{}}}],["string'})@column({type",{"_index":1700,"title":{},"body":{"entities/DbContributionStatTimeframe.html":{},"entities/DbContributionsProjects.html":{},"entities/DbContributorCategoryTimeframe.html":{}}}],["string'})@minlength(3)@type(undefined",{"_index":2624,"title":{},"body":{"classes/FilteredUsersDto.html":{}}}],["string'})@primarycolumn({type",{"_index":1718,"title":{},"body":{"entities/DbCoupon.html":{}}}],["string(id",{"_index":683,"title":{},"body":{"controllers/AuthController.html":{}}}],["string(major(\"1.8.0",{"_index":5739,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.api_codename",{"_index":5657,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.api_domain",{"_index":5664,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.api_host",{"_index":5660,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.api_port",{"_index":5662,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.endorsement_service_token",{"_index":5679,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.hacktoberfest_year",{"_index":5780,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.openai_api_key",{"_index":5784,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.openai_completions_api_url",{"_index":5791,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.openai_model_name",{"_index":5786,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.pizza_oven_host",{"_index":5793,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.pizza_oven_port",{"_index":5794,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.stripe_checkout_session_cancel_url",{"_index":5806,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.stripe_checkout_session_success_url",{"_index":5804,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.stripe_secret_key",{"_index":5798,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.stripe_subscription_price_id",{"_index":5802,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.stripe_webhook_secret_live",{"_index":5799,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.tier_plan_free",{"_index":5892,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.typeorm_connection_api",{"_index":5690,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.typeorm_connection_logging",{"_index":5704,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.typeorm_database_api",{"_index":5698,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.typeorm_database_logging",{"_index":5709,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.typeorm_host_api",{"_index":5691,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.typeorm_host_logging",{"_index":5705,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.typeorm_password_api",{"_index":5696,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.typeorm_password_logging",{"_index":5708,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.typeorm_port_api",{"_index":5693,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.typeorm_port_logging",{"_index":5706,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.typeorm_ssl_cert_api",{"_index":5701,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.typeorm_ssl_cert_logging",{"_index":5710,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.typeorm_username_api",{"_index":5694,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.typeorm_username_logging",{"_index":5707,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(user_name",{"_index":684,"title":{},"body":{"controllers/AuthController.html":{}}}],["stringifyparameters",{"_index":1537,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["stringifyparameters(parameters",{"_index":1554,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["string})@isstring",{"_index":1312,"title":{},"body":{"classes/CreateBlogSummaryDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{}}}],["string})@isstring()@isoptional",{"_index":2653,"title":{},"body":{"classes/GeneratePullRequestDescriptionDto.html":{}}}],["stripe",{"_index":376,"title":{},"body":{"modules/AppModule.html":{},"entities/DbCustomer.html":{},"injectables/StripeService.html":{},"modules/StripeSubscriptionModule.html":{},"injectables/StripeSubscriptionService.html":{},"modules/StripeWebHookModule.html":{},"controllers/StripeWebhookController.html":{}}}],["stripe(this.configservice.get(\"stripe.secretkey",{"_index":3932,"title":{},"body":{"injectables/StripeService.html":{}}}],["stripe.checkout.session",{"_index":4051,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["stripe.service",{"_index":3920,"title":{},"body":{"modules/StripeModule.html":{}}}],["stripe.subscription",{"_index":4046,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["stripe/stripe.module",{"_index":735,"title":{},"body":{"modules/AuthModule.html":{},"modules/StripeWebHookModule.html":{}}}],["stripe/stripe.service",{"_index":621,"title":{},"body":{"controllers/AuthController.html":{},"controllers/StripeWebhookController.html":{}}}],["stripe_customer_id",{"_index":1516,"title":{},"body":{"injectables/CustomerService.html":{},"entities/DbCustomer.html":{}}}],["stripeconfig",{"_index":324,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["stripecustomer",{"_index":702,"title":{},"body":{"controllers/AuthController.html":{}}}],["stripecustomer.id",{"_index":706,"title":{},"body":{"controllers/AuthController.html":{}}}],["stripemodule",{"_index":730,"title":{"modules/StripeModule.html":{}},"body":{"modules/AuthModule.html":{},"modules/StripeModule.html":{},"modules/StripeWebHookModule.html":{},"modules.html":{},"overview.html":{}}}],["stripeservice",{"_index":620,"title":{"injectables/StripeService.html":{}},"body":{"controllers/AuthController.html":{},"modules/StripeModule.html":{},"injectables/StripeService.html":{},"controllers/StripeWebhookController.html":{},"coverage.html":{},"overview.html":{}}}],["stripesubscriptionmodule",{"_index":279,"title":{"modules/StripeSubscriptionModule.html":{}},"body":{"modules/AppModule.html":{},"modules/StripeSubscriptionModule.html":{},"modules/StripeWebHookModule.html":{},"modules.html":{},"overview.html":{}}}],["stripesubscriptionservice",{"_index":3953,"title":{"injectables/StripeSubscriptionService.html":{}},"body":{"modules/StripeSubscriptionModule.html":{},"injectables/StripeSubscriptionService.html":{},"controllers/StripeWebhookController.html":{},"coverage.html":{},"overview.html":{}}}],["stripewebhookcontroller",{"_index":3971,"title":{"controllers/StripeWebhookController.html":{}},"body":{"modules/StripeWebHookModule.html":{},"controllers/StripeWebhookController.html":{},"coverage.html":{},"overview.html":{}}}],["stripewebhookmodule",{"_index":280,"title":{"modules/StripeWebHookModule.html":{}},"body":{"modules/AppModule.html":{},"modules/StripeWebHookModule.html":{},"modules.html":{},"overview.html":{}}}],["structure",{"_index":5528,"title":{},"body":{"index.html":{}}}],["structured",{"_index":5626,"title":{},"body":{"properties.html":{}}}],["style",{"_index":2662,"title":{},"body":{"classes/GeneratePullRequestDescriptionDto.html":{}}}],["styles",{"_index":5492,"title":{},"body":{"index.html":{}}}],["sub",{"_index":655,"title":{},"body":{"controllers/AuthController.html":{}}}],["sub_1234",{"_index":2136,"title":{},"body":{"entities/DbSubscription.html":{}}}],["sub_1234'})@primarycolumn('text",{"_index":2120,"title":{},"body":{"entities/DbSubscription.html":{}}}],["subdomain",{"_index":5722,"title":{},"body":{"miscellaneous/variables.html":{}}}],["subevents",{"_index":4043,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["subevents.includes(event.type",{"_index":4044,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["subj",{"_index":5416,"title":{},"body":{"index.html":{}}}],["subject",{"_index":5574,"title":{},"body":{"license.html":{}}}],["sublicense",{"_index":5567,"title":{},"body":{"license.html":{}}}],["submission",{"_index":2064,"title":{},"body":{"entities/DbRepoToUserSubmissions.html":{},"controllers/RepoSubmitController.html":{}}}],["submission'})@apiokresponse({description",{"_index":3784,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["submission'})@apiparam({name",{"_index":3786,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["submissions",{"_index":3631,"title":{},"body":{"injectables/RepoService.html":{},"controllers/RepoSubmitController.html":{}}}],["submissionscount",{"_index":3579,"title":{},"body":{"classes/RepoPageOptionsDto.html":{},"injectables/RepoService.html":{},"miscellaneous/enumerations.html":{}}}],["submit",{"_index":3803,"title":{},"body":{"controllers/RepoSubmitController.html":{},"injectables/SubmitService.html":{}}}],["submit.controller",{"_index":4061,"title":{},"body":{"modules/SubmitModule.html":{}}}],["submit.controller.ts",{"_index":3776,"title":{},"body":{"controllers/RepoSubmitController.html":{},"coverage.html":{}}}],["submit.controller.ts:103",{"_index":3787,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["submit.controller.ts:125",{"_index":3790,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["submit.controller.ts:36",{"_index":3794,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["submit.controller.ts:57",{"_index":3797,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["submit.controller.ts:79",{"_index":3800,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["submit.service",{"_index":3802,"title":{},"body":{"controllers/RepoSubmitController.html":{},"modules/SubmitModule.html":{}}}],["submit/submit.module",{"_index":357,"title":{},"body":{"modules/AppModule.html":{}}}],["submitbyrepoid",{"_index":4064,"title":{},"body":{"injectables/SubmitService.html":{}}}],["submitbyrepoid(repoid",{"_index":4071,"title":{},"body":{"injectables/SubmitService.html":{}}}],["submitd",{"_index":4079,"title":{},"body":{"injectables/SubmitService.html":{}}}],["submitexists",{"_index":4077,"title":{},"body":{"injectables/SubmitService.html":{}}}],["submitexists.deleted_at",{"_index":4078,"title":{},"body":{"injectables/SubmitService.html":{}}}],["submitmodule",{"_index":281,"title":{"modules/SubmitModule.html":{}},"body":{"modules/AppModule.html":{},"modules/SubmitModule.html":{},"modules.html":{},"overview.html":{}}}],["submitonebyid",{"_index":3780,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["submitonebyid(id",{"_index":3795,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["submitonebyownerandrepo",{"_index":3781,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["submitonebyownerandrepo(owner",{"_index":3798,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["submitservice",{"_index":3801,"title":{"injectables/SubmitService.html":{}},"body":{"controllers/RepoSubmitController.html":{},"modules/SubmitModule.html":{},"injectables/SubmitService.html":{},"coverage.html":{},"overview.html":{}}}],["submitted",{"_index":3793,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["subquery",{"_index":210,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/RepoService.html":{},"injectables/UserListStatsService.html":{}}}],["subquerybuilder",{"_index":153,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["subquerybuilder.innerjoin",{"_index":154,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["subquerycount",{"_index":3591,"title":{},"body":{"injectables/RepoService.html":{}}}],["subquerycount(subquery",{"_index":3609,"title":{},"body":{"injectables/RepoService.html":{}}}],["subquerycountprs",{"_index":3274,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["subquerycountprs(qb",{"_index":3287,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["subscribe",{"_index":4176,"title":{},"body":{"injectables/TierService.html":{}}}],["subscribe(`org:${userid",{"_index":4185,"title":{},"body":{"injectables/TierService.html":{}}}],["subscribers",{"_index":3576,"title":{},"body":{"classes/RepoPageOptionsDto.html":{},"miscellaneous/enumerations.html":{}}}],["subscription",{"_index":2111,"title":{},"body":{"entities/DbSubscription.html":{},"injectables/StripeService.html":{},"injectables/StripeSubscriptionService.html":{},"controllers/StripeWebhookController.html":{}}}],["subscription.cancel_at",{"_index":4013,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["subscription.cancel_at_period_end",{"_index":4012,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["subscription.canceled_at",{"_index":4015,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["subscription.customer",{"_index":4048,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["subscription.dto",{"_index":382,"title":{},"body":{"modules/AppModule.html":{},"modules/StripeSubscriptionModule.html":{},"injectables/StripeSubscriptionService.html":{}}}],["subscription.dto.ts",{"_index":2096,"title":{},"body":{"entities/DbSubscription.html":{},"coverage.html":{}}}],["subscription.dto.ts:101",{"_index":2119,"title":{},"body":{"entities/DbSubscription.html":{}}}],["subscription.dto.ts:111",{"_index":2110,"title":{},"body":{"entities/DbSubscription.html":{}}}],["subscription.dto.ts:121",{"_index":2114,"title":{},"body":{"entities/DbSubscription.html":{}}}],["subscription.dto.ts:131",{"_index":2132,"title":{},"body":{"entities/DbSubscription.html":{}}}],["subscription.dto.ts:141",{"_index":2131,"title":{},"body":{"entities/DbSubscription.html":{}}}],["subscription.dto.ts:16",{"_index":2121,"title":{},"body":{"entities/DbSubscription.html":{}}}],["subscription.dto.ts:23",{"_index":2134,"title":{},"body":{"entities/DbSubscription.html":{}}}],["subscription.dto.ts:33",{"_index":2129,"title":{},"body":{"entities/DbSubscription.html":{}}}],["subscription.dto.ts:40",{"_index":2122,"title":{},"body":{"entities/DbSubscription.html":{}}}],["subscription.dto.ts:47",{"_index":2125,"title":{},"body":{"entities/DbSubscription.html":{}}}],["subscription.dto.ts:54",{"_index":2127,"title":{},"body":{"entities/DbSubscription.html":{}}}],["subscription.dto.ts:61",{"_index":2112,"title":{},"body":{"entities/DbSubscription.html":{}}}],["subscription.dto.ts:71",{"_index":2115,"title":{},"body":{"entities/DbSubscription.html":{}}}],["subscription.dto.ts:81",{"_index":2118,"title":{},"body":{"entities/DbSubscription.html":{}}}],["subscription.dto.ts:91",{"_index":2117,"title":{},"body":{"entities/DbSubscription.html":{}}}],["subscription.ended_at",{"_index":4020,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["subscription.id",{"_index":4007,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["subscription.items.data.length",{"_index":4011,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["subscription.items.data[0].price.id",{"_index":4010,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["subscription.module",{"_index":380,"title":{},"body":{"modules/AppModule.html":{},"modules/StripeWebHookModule.html":{}}}],["subscription.module.ts",{"_index":3954,"title":{},"body":{"modules/StripeSubscriptionModule.html":{}}}],["subscription.service",{"_index":3955,"title":{},"body":{"modules/StripeSubscriptionModule.html":{},"controllers/StripeWebhookController.html":{}}}],["subscription.service.ts",{"_index":3957,"title":{},"body":{"injectables/StripeSubscriptionService.html":{},"coverage.html":{}}}],["subscription.service.ts:14",{"_index":3962,"title":{},"body":{"injectables/StripeSubscriptionService.html":{}}}],["subscription.service.ts:18",{"_index":3964,"title":{},"body":{"injectables/StripeSubscriptionService.html":{}}}],["subscription.service.ts:8",{"_index":3960,"title":{},"body":{"injectables/StripeSubscriptionService.html":{}}}],["subscription.status",{"_index":4009,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["subscription.trial_end",{"_index":4024,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["subscription.trial_start",{"_index":4022,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["subscription/stripe",{"_index":379,"title":{},"body":{"modules/AppModule.html":{},"modules/StripeSubscriptionModule.html":{},"modules/StripeWebHookModule.html":{},"controllers/StripeWebhookController.html":{}}}],["subscriptiondata",{"_index":4006,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["subscriptionid",{"_index":3986,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["subscriptionpriceid",{"_index":5801,"title":{},"body":{"miscellaneous/variables.html":{}}}],["subscriptionrepository",{"_index":3961,"title":{},"body":{"injectables/StripeSubscriptionService.html":{}}}],["subscriptions",{"_index":2135,"title":{},"body":{"entities/DbSubscription.html":{}}}],["subscriptionsessioncancelurl",{"_index":5805,"title":{},"body":{"miscellaneous/variables.html":{}}}],["subscriptionsessioncheckoutsuccessurl",{"_index":5803,"title":{},"body":{"miscellaneous/variables.html":{}}}],["substantial",{"_index":5580,"title":{},"body":{"license.html":{}}}],["succeeds",{"_index":5848,"title":{},"body":{"miscellaneous/variables.html":{}}}],["success_url",{"_index":3944,"title":{},"body":{"injectables/StripeService.html":{}}}],["successfully",{"_index":5683,"title":{},"body":{"miscellaneous/variables.html":{}}}],["such",{"_index":820,"title":{},"body":{"injectables/BlogSummaryService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"injectables/IssueSummaryService.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["suggest",{"_index":932,"title":{},"body":{"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{}}}],["suggestion",{"_index":899,"title":{},"body":{"controllers/CodeExplanationController.html":{},"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"controllers/CodeTestSuggestionController.html":{},"injectables/CodeTestSuggestionService.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{}}}],["suggestion.controller",{"_index":3341,"title":{},"body":{"modules/PullRequestModule.html":{}}}],["suggestion.controller.ts",{"_index":913,"title":{},"body":{"controllers/CodeRefactorSuggestionController.html":{},"coverage.html":{}}}],["suggestion.controller.ts:22",{"_index":919,"title":{},"body":{"controllers/CodeRefactorSuggestionController.html":{}}}],["suggestion.dto",{"_index":920,"title":{},"body":{"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"controllers/CodeTestSuggestionController.html":{},"injectables/CodeTestSuggestionService.html":{}}}],["suggestion.dto.ts",{"_index":2640,"title":{},"body":{"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"coverage.html":{}}}],["suggestion.dto.ts:13",{"_index":2642,"title":{},"body":{"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{}}}],["suggestion.dto.ts:23",{"_index":2644,"title":{},"body":{"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{}}}],["suggestion.dto.ts:30",{"_index":2645,"title":{},"body":{"classes/GenerateCodeTestSuggestionDto.html":{}}}],["suggestion.dto.ts:33",{"_index":2643,"title":{},"body":{"classes/GenerateCodeRefactorSuggestionDto.html":{}}}],["suggestion.dto.ts:40",{"_index":2641,"title":{},"body":{"classes/GenerateCodeRefactorSuggestionDto.html":{}}}],["suggestion.service",{"_index":922,"title":{},"body":{"controllers/CodeRefactorSuggestionController.html":{},"controllers/CodeTestSuggestionController.html":{},"modules/PullRequestModule.html":{}}}],["suggestion.service.ts",{"_index":925,"title":{},"body":{"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"coverage.html":{}}}],["suggestion.service.ts:10",{"_index":930,"title":{},"body":{"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{}}}],["suggestion.service.ts:18",{"_index":929,"title":{},"body":{"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{}}}],["suggestion.service.ts:7",{"_index":927,"title":{},"body":{"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{}}}],["suite",{"_index":5457,"title":{},"body":{"index.html":{}}}],["summarize",{"_index":825,"title":{},"body":{"injectables/BlogSummaryService.html":{},"injectables/IssueSummaryService.html":{}}}],["summary",{"_index":542,"title":{},"body":{"controllers/AuthController.html":{},"controllers/BlogSummaryController.html":{},"injectables/BlogSummaryService.html":{},"controllers/CodeExplanationController.html":{},"controllers/CodeRefactorSuggestionController.html":{},"controllers/CodeTestSuggestionController.html":{},"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"classes/CreateBlogSummaryDto.html":{},"classes/CreateIssueSummaryDto.html":{},"controllers/EmojiController.html":{},"controllers/EndorsementController.html":{},"controllers/HealthController.html":{},"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"controllers/IssueSummaryController.html":{},"injectables/IssueSummaryService.html":{},"controllers/PizzaOvenController.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"controllers/UserFollowingController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"controllers/UserListStatsController.html":{},"controllers/UserNotificationController.html":{},"controllers/UserRecommendationController.html":{}}}],["summary.controller",{"_index":795,"title":{},"body":{"modules/BlogSummaryModule.html":{},"modules/IssueSummaryModule.html":{}}}],["summary.controller.ts",{"_index":758,"title":{},"body":{"controllers/BlogSummaryController.html":{},"controllers/IssueSummaryController.html":{},"coverage.html":{}}}],["summary.controller.ts:22",{"_index":771,"title":{},"body":{"controllers/BlogSummaryController.html":{},"controllers/IssueSummaryController.html":{}}}],["summary.dto",{"_index":779,"title":{},"body":{"controllers/BlogSummaryController.html":{},"injectables/BlogSummaryService.html":{},"controllers/IssueSummaryController.html":{},"injectables/IssueSummaryService.html":{}}}],["summary.dto.ts",{"_index":1308,"title":{},"body":{"classes/CreateBlogSummaryDto.html":{},"classes/CreateIssueSummaryDto.html":{},"coverage.html":{}}}],["summary.dto.ts:13",{"_index":1329,"title":{},"body":{"classes/CreateBlogSummaryDto.html":{},"classes/CreateIssueSummaryDto.html":{}}}],["summary.dto.ts:23",{"_index":1331,"title":{},"body":{"classes/CreateBlogSummaryDto.html":{},"classes/CreateIssueSummaryDto.html":{}}}],["summary.dto.ts:32",{"_index":1337,"title":{},"body":{"classes/CreateBlogSummaryDto.html":{},"classes/CreateIssueSummaryDto.html":{}}}],["summary.dto.ts:42",{"_index":1326,"title":{},"body":{"classes/CreateBlogSummaryDto.html":{},"classes/CreateIssueSummaryDto.html":{}}}],["summary.dto.ts:49",{"_index":1314,"title":{},"body":{"classes/CreateBlogSummaryDto.html":{},"classes/CreateIssueSummaryDto.html":{}}}],["summary.dto.ts:56",{"_index":1313,"title":{},"body":{"classes/CreateBlogSummaryDto.html":{},"classes/CreateIssueSummaryDto.html":{}}}],["summary.dto.ts:63",{"_index":1402,"title":{},"body":{"classes/CreateIssueSummaryDto.html":{}}}],["summary.module",{"_index":424,"title":{},"body":{"modules/AppModule.html":{}}}],["summary.module.ts",{"_index":793,"title":{},"body":{"modules/BlogSummaryModule.html":{},"modules/IssueSummaryModule.html":{}}}],["summary.service",{"_index":781,"title":{},"body":{"controllers/BlogSummaryController.html":{},"modules/BlogSummaryModule.html":{},"controllers/IssueSummaryController.html":{},"modules/IssueSummaryModule.html":{}}}],["summary.service.ts",{"_index":798,"title":{},"body":{"injectables/BlogSummaryService.html":{},"injectables/IssueSummaryService.html":{},"coverage.html":{}}}],["summary.service.ts:10",{"_index":808,"title":{},"body":{"injectables/BlogSummaryService.html":{},"injectables/IssueSummaryService.html":{}}}],["summary.service.ts:20",{"_index":804,"title":{},"body":{"injectables/BlogSummaryService.html":{}}}],["summary.service.ts:21",{"_index":3015,"title":{},"body":{"injectables/IssueSummaryService.html":{}}}],["summary.service.ts:7",{"_index":802,"title":{},"body":{"injectables/BlogSummaryService.html":{},"injectables/IssueSummaryService.html":{}}}],["summarylength",{"_index":1311,"title":{},"body":{"classes/CreateBlogSummaryDto.html":{},"classes/CreateIssueSummaryDto.html":{}}}],["supabase",{"_index":617,"title":{},"body":{"controllers/AuthController.html":{},"classes/SupabaseAuthDto.html":{},"injectables/SupabaseStrategy.html":{},"controllers/UserCollaborationController.html":{},"index.html":{},"properties.html":{}}}],["supabase.guard",{"_index":637,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["supabase.strategy",{"_index":737,"title":{},"body":{"modules/AuthModule.html":{}}}],["supabase.user.decorator",{"_index":635,"title":{},"body":{"controllers/AuthController.html":{}}}],["supabase/supabase",{"_index":848,"title":{},"body":{"interfaces/ChatResponse.html":{},"injectables/OpenAiService.html":{}}}],["supabase_api_key=your_supabase_api_key",{"_index":5382,"title":{},"body":{"index.html":{}}}],["supabase_jwt_secret=your_supabase_jwt_secret",{"_index":5383,"title":{},"body":{"index.html":{}}}],["supabase_url=your_supabase_url",{"_index":5381,"title":{},"body":{"index.html":{}}}],["supabaseauthdto",{"_index":632,"title":{"classes/SupabaseAuthDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/SupabaseAuthDto.html":{},"coverage.html":{}}}],["supabaseauthdto})@apinotfoundresponse({description",{"_index":573,"title":{},"body":{"controllers/AuthController.html":{}}}],["supabaseauthdto})@httpcode(httpstatus.ok",{"_index":566,"title":{},"body":{"controllers/AuthController.html":{}}}],["supabaseauthrequest",{"_index":5638,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["supabaseauthstrategy",{"_index":4147,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["supabaseauthuser",{"_index":561,"title":{},"body":{"controllers/AuthController.html":{},"injectables/SupabaseStrategy.html":{},"controllers/UserCollaborationController.html":{}}}],["supabaseguard",{"_index":636,"title":{"injectables/SupabaseGuard.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/BlogSummaryController.html":{},"controllers/CodeExplanationController.html":{},"controllers/CodeRefactorSuggestionController.html":{},"controllers/CodeTestSuggestionController.html":{},"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"controllers/IssueSummaryController.html":{},"controllers/PullRequestDescriptionController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/SupabaseGuard.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserEndorsementController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"controllers/UserNotificationController.html":{},"controllers/UserRecommendationController.html":{},"coverage.html":{},"overview.html":{}}}],["supabasejwtsecret",{"_index":4154,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["supabasekey",{"_index":4151,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["supabaseoptions",{"_index":4153,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["supabasestrategy",{"_index":731,"title":{"injectables/SupabaseStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/SupabaseStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["supabaseurl",{"_index":4149,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["super",{"_index":1068,"title":{},"body":{"classes/ContributionPageMetaDto.html":{},"injectables/SupabaseStrategy.html":{}}}],["super(context",{"_index":1493,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["super.authenticate(req",{"_index":4159,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["super.debug.apply(this",{"_index":1500,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["super.error.apply(this",{"_index":1498,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["super.log.apply(this",{"_index":1496,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["super.validate(user",{"_index":4158,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["super.warn.apply(this",{"_index":1499,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["support",{"_index":5604,"title":{},"body":{"modules.html":{}}}],["supported",{"_index":767,"title":{},"body":{"controllers/BlogSummaryController.html":{}}}],["sure",{"_index":5505,"title":{},"body":{"index.html":{}}}],["svg",{"_index":5605,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":5502,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["swagger.ts",{"_index":5317,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["swagger.yaml",{"_index":5770,"title":{},"body":{"miscellaneous/variables.html":{}}}],["swaggermarkdowndescription",{"_index":5301,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["swaggermarkdowndescription(apidomain",{"_index":5732,"title":{},"body":{"miscellaneous/variables.html":{}}}],["swaggermodule.createdocument(app",{"_index":5757,"title":{},"body":{"miscellaneous/variables.html":{}}}],["switch",{"_index":106,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoService.html":{},"injectables/UserListStatsService.html":{}}}],["synchronize",{"_index":457,"title":{},"body":{"modules/AppModule.html":{}}}],["system",{"_index":868,"title":{},"body":{"interfaces/ChatResponse.html":{},"injectables/OpenAiService.html":{}}}],["systemmessage",{"_index":869,"title":{},"body":{"interfaces/ChatResponse.html":{},"injectables/OpenAiService.html":{}}}],["t",{"_index":1174,"title":{},"body":{"classes/ContributionsPageDto.html":{},"classes/PageDto.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/RepoFilterService.html":{},"injectables/RepoService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["t.setseconds(secs",{"_index":5898,"title":{},"body":{"miscellaneous/variables.html":{}}}],["table",{"_index":663,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":5332,"title":{},"body":{"coverage.html":{}}}],["tagged",{"_index":1440,"title":{},"body":{"classes/CreateUserHighlightDto.html":{},"entities/DbUserHighlight.html":{}}}],["tagged_repos",{"_index":2175,"title":{},"body":{"entities/DbUserHighlight.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{}}}],["taggedrepos",{"_index":1429,"title":{},"body":{"classes/CreateUserHighlightDto.html":{}}}],["tags",{"_index":1978,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["take",{"_index":3296,"title":{},"body":{"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{}}}],["taken",{"_index":3017,"title":{},"body":{"injectables/IssueSummaryService.html":{}}}],["target",{"_index":483,"title":{},"body":{"modules/AppModule.html":{},"entities/DbPullRequest.html":{},"injectables/RepoService.html":{}}}],["target_branch",{"_index":1906,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["target_label",{"_index":1907,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["target}.id",{"_index":3620,"title":{},"body":{"injectables/RepoService.html":{}}}],["team",{"_index":1386,"title":{},"body":{"classes/CreateInsightDto.html":{},"classes/CreateInsightMemberDto.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"controllers/UserInsightMemberController.html":{}}}],["team'})@column({type",{"_index":1797,"title":{},"body":{"entities/DbInsight.html":{}}}],["team'})@isstring",{"_index":1380,"title":{},"body":{"classes/CreateInsightDto.html":{},"classes/UpdateInsightDto.html":{}}}],["ted",{"_index":5635,"title":{},"body":{"properties.html":{}}}],["temperature",{"_index":853,"title":{},"body":{"interfaces/ChatResponse.html":{},"classes/CreateBlogSummaryDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"injectables/OpenAiService.html":{}}}],["tense",{"_index":3018,"title":{},"body":{"injectables/IssueSummaryService.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["terminusmodule",{"_index":308,"title":{},"body":{"modules/AppModule.html":{},"modules/HealthModule.html":{}}}],["test",{"_index":946,"title":{},"body":{"controllers/CodeTestSuggestionController.html":{},"injectables/CodeTestSuggestionService.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"modules/PullRequestModule.html":{},"coverage.html":{},"index.html":{}}}],["test.suggestion.controller",{"_index":3342,"title":{},"body":{"modules/PullRequestModule.html":{}}}],["test.suggestion.controller.ts",{"_index":941,"title":{},"body":{"controllers/CodeTestSuggestionController.html":{},"coverage.html":{}}}],["test.suggestion.controller.ts:22",{"_index":947,"title":{},"body":{"controllers/CodeTestSuggestionController.html":{}}}],["test:coveragefor",{"_index":5466,"title":{},"body":{"index.html":{}}}],["tests",{"_index":5458,"title":{},"body":{"index.html":{}}}],["testyou",{"_index":5464,"title":{},"body":{"index.html":{}}}],["text",{"_index":938,"title":{},"body":{"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"classes/CreateUserHighlightDto.html":{},"entities/DbCoupon.html":{},"entities/DbEmoji.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoLoginContributions.html":{},"entities/DbSubscription.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserListContributorStat.html":{},"entities/DbUserListContributorStat-1.html":{},"entities/DbUserRepo.html":{},"miscellaneous/variables.html":{}}}],["th3nn3ss",{"_index":1993,"title":{},"body":{"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{}}}],["th3nn3ss'})@column('text",{"_index":1918,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["th3nn3ss:cli_split_kwargs",{"_index":1989,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["th3nn3ss:cli_split_kwargs'})@column({type",{"_index":1968,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["them'})@apibearerauth()@useguards(supabaseguard)@apipaginatedresponse(dbinsight)@apiokresponse({type",{"_index":4774,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["them'})@apibearerauth()@useguards(supabaseguard)@apipaginatedresponse(dbinsightmember)@apiokresponse({type",{"_index":4725,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["them'})@apiokresponse({type",{"_index":3461,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["them'})@apipaginatedresponse(dbbakedrepo)@apiokresponse({type",{"_index":3111,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["them'})@apipaginatedresponse(dbcommitauthors)@apiokresponse({type",{"_index":3117,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["them'})@apipaginatedresponse(dbcommits)@apiokresponse({type",{"_index":3121,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["them'})@apipaginatedresponse(dbcontribution)@apiokresponse({type",{"_index":3456,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["them'})@apipaginatedresponse(dbemoji)@apiokresponse({type",{"_index":2379,"title":{},"body":{"controllers/EmojiController.html":{}}}],["them'})@apipaginatedresponse(dbendorsement)@apiokresponse({type",{"_index":2430,"title":{},"body":{"controllers/EndorsementController.html":{},"controllers/UserEndorsementController.html":{}}}],["them'})@apipaginatedresponse(dbpullrequest)@apiokresponse({type",{"_index":3219,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["them'})@apipaginatedresponse(dbpullrequestcontributor)@apiokresponse({type",{"_index":1211,"title":{},"body":{"controllers/ContributorController.html":{}}}],["them'})@apipaginatedresponse(dbrepo)@apiokresponse({type",{"_index":3500,"title":{},"body":{"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserController.html":{}}}],["them'})@apipaginatedresponse(dbuserhighlight)@apiokresponse({type",{"_index":2737,"title":{},"body":{"controllers/HighlightController.html":{},"controllers/UserController.html":{}}}],["them'})@apipaginatedresponse(dbuserhighlightrepo)@apiokresponse({type",{"_index":2741,"title":{},"body":{"controllers/HighlightController.html":{}}}],["them'})@apipaginatedresponse(dbuserorganization)@apiokresponse({type",{"_index":4351,"title":{},"body":{"controllers/UserController.html":{}}}],["this._stripe",{"_index":3931,"title":{},"body":{"injectables/StripeService.html":{}}}],["this.addusernotification",{"_index":5169,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["this.allcontributionscount",{"_index":1069,"title":{},"body":{"classes/ContributionPageMetaDto.html":{}}}],["this.applyactivecontributorsfilter(activecountquerybuilder",{"_index":164,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["this.applyactivecontributorsfilter(ctebuilder",{"_index":112,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["this.applyactivecontributorsfilter(subquerybuilder",{"_index":156,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["this.applyalumnicontributorsfilter(alumnicountquerybuilder",{"_index":174,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["this.applyalumnicontributorsfilter(ctebuilder",{"_index":116,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["this.applyalumnicontributorsfilter(subquerybuilder",{"_index":159,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["this.applynewcontributorsfilter(ctebuilder",{"_index":114,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["this.applynewcontributorsfilter(newcountquerybuilder",{"_index":169,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["this.applynewcontributorsfilter(subquerybuilder",{"_index":158,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["this.bakedreporepository.createquerybuilder(\"baked_repos",{"_index":3192,"title":{},"body":{"injectables/PizzaOvenService.html":{}}}],["this.basefilterquerybuilder",{"_index":3678,"title":{},"body":{"injectables/RepoService.html":{}}}],["this.basefilterquerybuilder(startdate",{"_index":3662,"title":{},"body":{"injectables/RepoService.html":{}}}],["this.basequerybuilder",{"_index":83,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/CommitAuthorsService.html":{},"injectables/CommitsService.html":{},"injectables/CouponService.html":{},"injectables/CustomerService.html":{},"injectables/EmojiService.html":{},"injectables/EndorsementService.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightsService.html":{},"injectables/PizzaOvenService.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoService.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/SubmitService.html":{},"injectables/UserCollaborationService.html":{},"injectables/UserFollowService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserListService.html":{},"injectables/UserListStatsService.html":{},"injectables/UserNotificationService.html":{},"injectables/UserOrganizationService.html":{},"injectables/UserReposService.html":{},"injectables/VoteService.html":{}}}],["this.baseuserquerybuilder",{"_index":5025,"title":{},"body":{"injectables/UserListService.html":{}}}],["this.blogsummaryservice.generateblogsummary(genereateblogsummarydto",{"_index":787,"title":{},"body":{"controllers/BlogSummaryController.html":{}}}],["this.codeexplanationservice.generateexplanation(generatecodeexplanationdto",{"_index":900,"title":{},"body":{"controllers/CodeExplanationController.html":{}}}],["this.coderefactorsuggestionservice.generatedescription(generatecoderefactorsuggestiondto",{"_index":924,"title":{},"body":{"controllers/CodeRefactorSuggestionController.html":{}}}],["this.codetestsuggestionservice.generatetestsuggestion(generatecodetestsuggestiondto",{"_index":950,"title":{},"body":{"controllers/CodeTestSuggestionController.html":{}}}],["this.commitauthorservice.findallcommitauthors(pageoptionsdto",{"_index":3159,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["this.commitauthorservice.findcommitauthorbyid(id",{"_index":3154,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["this.commitauthorsrepository.createquerybuilder(\"commit_authors",{"_index":993,"title":{},"body":{"injectables/CommitAuthorsService.html":{}}}],["this.commitsrepository.createquerybuilder(\"commits",{"_index":1024,"title":{},"body":{"injectables/CommitsService.html":{}}}],["this.commitsservice.findallcommitsbybakedrepoid(pageoptionsdto",{"_index":3165,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["this.commitsservice.findallcommitsbycommitauthorid(pageoptionsdto",{"_index":3168,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["this.commitsservice.findcommitbyid(id",{"_index":3162,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["this.configservice.get(\"api.endorsementservicetoken",{"_index":2559,"title":{},"body":{"guards/EndorsementTokenGuard.html":{}}}],["this.configservice.get(\"disk_percentage",{"_index":2697,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.configservice.get(\"disk_size",{"_index":2699,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.configservice.get(\"endpoint.admin",{"_index":2712,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.configservice.get(\"endpoint.app",{"_index":2704,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.configservice.get(\"endpoint.docs",{"_index":2708,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.configservice.get(\"endpoint.explore",{"_index":2710,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.configservice.get(\"endpoint.hot",{"_index":2706,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.configservice.get(\"endpoint.landing",{"_index":2702,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.configservice.get(\"hacktoberfest.year",{"_index":3295,"title":{},"body":{"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{}}}],["this.configservice.get(\"memory_heap",{"_index":2692,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.configservice.get(\"memory_rss",{"_index":2694,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.configservice.get(\"openai.apikey",{"_index":862,"title":{},"body":{"interfaces/ChatResponse.html":{},"injectables/OpenAiService.html":{}}}],["this.configservice.get(\"openai.modelname",{"_index":866,"title":{},"body":{"interfaces/ChatResponse.html":{},"injectables/OpenAiService.html":{}}}],["this.configservice.get(\"pizza.host",{"_index":3194,"title":{},"body":{"injectables/PizzaOvenService.html":{}}}],["this.configservice.get(\"pizza.port",{"_index":3195,"title":{},"body":{"injectables/PizzaOvenService.html":{}}}],["this.configservice.get(\"stripe.subscriptionpriceid",{"_index":3942,"title":{},"body":{"injectables/StripeService.html":{}}}],["this.configservice.get(\"stripe.subscriptionsessioncancelurl",{"_index":3947,"title":{},"body":{"injectables/StripeService.html":{}}}],["this.configservice.get(\"stripe.subscriptionsessioncheckoutsuccessurl",{"_index":3945,"title":{},"body":{"injectables/StripeService.html":{}}}],["this.configservice.get(\"stripe.webhooksecret",{"_index":4039,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["this.configservice.get(\"tier.freeplan",{"_index":4183,"title":{},"body":{"injectables/TierService.html":{}}}],["this.contributionrepository.createquerybuilder(\"contribution",{"_index":1137,"title":{},"body":{"injectables/ContributionService.html":{}}}],["this.contributionservice.findall(pageoptionsdto",{"_index":3484,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["this.contributionservice.findallbyrepoid(item.id",{"_index":3491,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["this.contributionservice.findallbyuserlogin(item.id",{"_index":3494,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["this.couponrepository.createquerybuilder(\"coupons\").withdeleted",{"_index":1299,"title":{},"body":{"injectables/CouponService.html":{}}}],["this.couponrepository.softdelete(code",{"_index":1306,"title":{},"body":{"injectables/CouponService.html":{}}}],["this.couponservice.findcoupon(applyusercoupondto.couponcode",{"_index":720,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.customerrepository.createquerybuilder(\"customer",{"_index":1524,"title":{},"body":{"injectables/CustomerService.html":{}}}],["this.customerrepository.save",{"_index":1527,"title":{},"body":{"injectables/CustomerService.html":{}}}],["this.customerservice.addcustomer(id",{"_index":705,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.customerservice.findbycustomerid(customerid",{"_index":3999,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["this.customerservice.findbyid(id",{"_index":699,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.data",{"_index":1184,"title":{},"body":{"classes/ContributionsPageDto.html":{},"classes/PageDto.html":{}}}],["this.database.pingcheck(\"db",{"_index":2690,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.disk.checkstorage(\"disk.storage",{"_index":2698,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.disk.checkstorage(\"disk.usage",{"_index":2695,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.emojirepository.createquerybuilder(\"emoji",{"_index":2403,"title":{},"body":{"injectables/EmojiService.html":{}}}],["this.emojiservice.findall(pageoptionsdto",{"_index":2390,"title":{},"body":{"controllers/EmojiController.html":{}}}],["this.endorsementrepository.createquerybuilder(\"endorsements",{"_index":2529,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["this.endorsementrepository.manager.createquerybuilder",{"_index":2542,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["this.endorsementrepository.save(createendorsementdto",{"_index":2530,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["this.endorsementrepository.softdelete(id",{"_index":2547,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["this.endorsementservice.create(createendorsementdto",{"_index":2466,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["this.endorsementservice.findall(pageoptionsdto",{"_index":2469,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["this.endorsementservice.findallbycreatoruserid(user.id",{"_index":2487,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["this.endorsementservice.findallbycreatoruserid(userid",{"_index":4415,"title":{},"body":{"controllers/UserEndorsementController.html":{}}}],["this.endorsementservice.findallbyrecipientuserid(user.id",{"_index":2489,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["this.endorsementservice.findallbyrecipientuserid(userid",{"_index":4418,"title":{},"body":{"controllers/UserEndorsementController.html":{}}}],["this.endorsementservice.findallbyrepoowneroruser(repoowneroruser",{"_index":2472,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["this.endorsementservice.findallendorsementsbyrepo(owner",{"_index":2476,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["this.endorsementservice.findallendorsementsbyrepobyuser(owner",{"_index":2480,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["this.endorsementservice.findonebyid(id",{"_index":2483,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["this.endorsementservice.remove(id",{"_index":2492,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["this.filterservice.getrepofilters(pageoptionsdto",{"_index":3420,"title":{},"body":{"injectables/PullRequestService.html":{},"injectables/RepoService.html":{}}}],["this.findcontributionsintimeframehelper(framestartdate.toisostring",{"_index":140,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["this.findcontributorcategoriesintimeframehelper(framestartdate.toisostring",{"_index":135,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["this.generateprompt(options.descriptionlength",{"_index":954,"title":{},"body":{"injectables/CodeTestSuggestionService.html":{}}}],["this.generateprompt(options.language",{"_index":834,"title":{},"body":{"injectables/BlogSummaryService.html":{},"injectables/CodeExplanationService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/IssueSummaryService.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["this.getcontributorrangequerybuilder(startdate",{"_index":3435,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["this.getdateframes(range",{"_index":131,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["this.getvotequery(repoid",{"_index":5268,"title":{},"body":{"injectables/VoteService.html":{}}}],["this.hacktoberfestfilterquerybuilder(range",{"_index":3661,"title":{},"body":{"injectables/RepoService.html":{}}}],["this.hasnextpage",{"_index":3068,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["this.haspreviouspage",{"_index":3067,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["this.health.check",{"_index":2689,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.http.pingcheck(\"admin.opensauced",{"_index":2711,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.http.pingcheck(\"app.opensauced",{"_index":2703,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.http.pingcheck(\"docs.opensauced",{"_index":2707,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.http.pingcheck(\"explore.opensauced",{"_index":2709,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.http.pingcheck(\"hot.opensauced",{"_index":2705,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.http.pingcheck(\"opensauced.pizza",{"_index":2701,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.insightmemberrepository.createquerybuilder(\"insight_members",{"_index":2885,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["this.insightmemberrepository.save(insightmember",{"_index":2887,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["this.insightmemberrepository.softdelete(id",{"_index":2889,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["this.insightmemberrepository.update(id",{"_index":2888,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["this.insightmemberservice.addinsightmember",{"_index":4755,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["this.insightmemberservice.canusermanageinsight",{"_index":4750,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["this.insightmemberservice.canusermanageinsight(userid",{"_index":4744,"title":{},"body":{"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["this.insightmemberservice.findallinsightmembers(pageoptionsdto",{"_index":4746,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["this.insightmemberservice.findonebyid(memberid",{"_index":4761,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["this.insightmemberservice.removeinsightmember(memberid",{"_index":4769,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["this.insightmemberservice.updateinsightmember(memberid",{"_index":4767,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["this.insightreporepository.save",{"_index":2944,"title":{},"body":{"injectables/InsightRepoService.html":{}}}],["this.insightreporepository.softdelete(id",{"_index":2947,"title":{},"body":{"injectables/InsightRepoService.html":{}}}],["this.insightrepository.createquerybuilder(\"insights",{"_index":2980,"title":{},"body":{"injectables/InsightsService.html":{}}}],["this.insightrepository.save(insight",{"_index":2987,"title":{},"body":{"injectables/InsightsService.html":{}}}],["this.insightrepository.softdelete(id",{"_index":2989,"title":{},"body":{"injectables/InsightsService.html":{}}}],["this.insightrepository.update(id",{"_index":2988,"title":{},"body":{"injectables/InsightsService.html":{}}}],["this.insightservice.findonebyid(insightid",{"_index":2890,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["this.insightsreposervice.addinsightrepo(insight.id",{"_index":4814,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["this.insightsreposervice.addinsightrepo(newinsight.id",{"_index":4790,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["this.insightsreposervice.removeinsightrepo(insightrepo.id",{"_index":4804,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["this.insightsservice.addinsight",{"_index":4787,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["this.insightsservice.findallbyuserid(pageoptionsdto",{"_index":4782,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["this.insightsservice.findonebyid(id",{"_index":2850,"title":{},"body":{"controllers/InsightController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["this.insightsservice.findonebyid(insightid",{"_index":4742,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["this.insightsservice.removeinsight(id",{"_index":2854,"title":{},"body":{"controllers/InsightController.html":{}}}],["this.insightsservice.updateinsight(id",{"_index":4791,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["this.issuesummaryservice.generateissuesummary(generateissuesummarydto",{"_index":3009,"title":{},"body":{"controllers/IssueSummaryController.html":{}}}],["this.itemcount",{"_index":3064,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["this.limit",{"_index":2603,"title":{},"body":{"classes/FilterListContributorsDto.html":{},"classes/FilteredUsersDto.html":{},"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{},"classes/TopUsersDto.html":{}}}],["this.logger",{"_index":1558,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["this.logger.debug(message",{"_index":1568,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["this.logger.error",{"_index":1564,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{},"controllers/StripeWebhookController.html":{}}}],["this.logger.error(`${query",{"_index":1563,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["this.logger.error(`unable",{"_index":4187,"title":{},"body":{"injectables/TierService.html":{}}}],["this.logger.error(cliduration(starttime",{"_index":2814,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{}}}],["this.logger.log(`${query",{"_index":1561,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["this.logger.log(`inserted/updated",{"_index":4031,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["this.logger.log(cliduration(starttime",{"_index":2819,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{}}}],["this.logger.log(message",{"_index":1567,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["this.logger.warn(cliduration(starttime",{"_index":2817,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{}}}],["this.logger.warn(message",{"_index":1566,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["this.logsrepository.create(log",{"_index":3041,"title":{},"body":{"injectables/LogService.html":{}}}],["this.logsrepository.save(newlog",{"_index":3042,"title":{},"body":{"injectables/LogService.html":{}}}],["this.logsservice",{"_index":1495,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["this.logsservice.createlog",{"_index":1497,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["this.managesubscriptionstatuschange(subscription.id",{"_index":4047,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["this.managesubscriptionstatuschange(subscriptionid",{"_index":4054,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["this.marknotificationsasread(notificationids",{"_index":5161,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["this.memory.checkheap(\"memory.heap",{"_index":2691,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.memory.checkrss(\"memory.rss",{"_index":2693,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.meta",{"_index":1185,"title":{},"body":{"classes/ContributionsPageDto.html":{},"classes/PageDto.html":{}}}],["this.openaiservice.generatecompletion",{"_index":833,"title":{},"body":{"injectables/BlogSummaryService.html":{},"injectables/CodeExplanationService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"injectables/IssueSummaryService.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["this.page",{"_index":2602,"title":{},"body":{"classes/FilterListContributorsDto.html":{},"classes/FilteredUsersDto.html":{},"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{},"classes/TopUsersDto.html":{}}}],["this.pagecount",{"_index":3065,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["this.pagerservice.applypagination",{"_index":995,"title":{},"body":{"injectables/CommitAuthorsService.html":{},"injectables/CommitsService.html":{},"injectables/EndorsementService.html":{},"injectables/InsightMemberService.html":{},"injectables/PizzaOvenService.html":{},"injectables/UserCollaborationService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserListService.html":{},"injectables/UserReposService.html":{}}}],["this.pizzaovenservice.findallbakedrepos(pageoptionsdto",{"_index":3150,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["this.pizzaovenservice.findbakedrepobyid(id",{"_index":3147,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["this.pizzaovenservice.posttopizzaovenservice(bakeoptionsinfo",{"_index":3143,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["this.pizzaovenservice.posttopizzaovenservice(bakerepoinfo",{"_index":2938,"title":{},"body":{"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{}}}],["this.prinsightrepository.createquerybuilder(\"pr",{"_index":3293,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["this.pullrequestdescriptionservice.generatedescription(generatepullrequestdescriptiondto",{"_index":3255,"title":{},"body":{"controllers/PullRequestDescriptionController.html":{}}}],["this.pullrequestrepository",{"_index":1153,"title":{},"body":{"injectables/ContributionService.html":{}}}],["this.pullrequestrepository.createquerybuilder(\"pull_requests",{"_index":3409,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["this.pullrequestrepository.manager.createquerybuilder",{"_index":3424,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["this.pullrequestreviewrepository.find",{"_index":3368,"title":{},"body":{"injectables/PullRequestReviewService.html":{}}}],["this.pullrequestreviewservice.findallreviewsbyprid(id",{"_index":3244,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["this.pullrequestservice.findall(pageoptionsdto",{"_index":3233,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["this.pullrequestservice.findallbycontributor(username",{"_index":4387,"title":{},"body":{"controllers/UserController.html":{}}}],["this.pullrequestservice.findallchurncontributors(pageoptionsdto",{"_index":1262,"title":{},"body":{"controllers/ContributorInsightsController.html":{}}}],["this.pullrequestservice.findallcontributorswithfilters(pageoptionsdto",{"_index":1227,"title":{},"body":{"controllers/ContributorController.html":{}}}],["this.pullrequestservice.findallrecentcontributors(pageoptionsdto",{"_index":1260,"title":{},"body":{"controllers/ContributorInsightsController.html":{}}}],["this.pullrequestservice.findallrepeatcontributors(pageoptionsdto",{"_index":1264,"title":{},"body":{"controllers/ContributorInsightsController.html":{}}}],["this.pullrequestservice.findallwithfilters(pageoptionsdto",{"_index":3235,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["this.pullrequestservice.findnewcontributorsintimerange(pageoptionsdto",{"_index":1258,"title":{},"body":{"controllers/ContributorInsightsController.html":{}}}],["this.pullrequestsinsightservice.getinsight(interval",{"_index":3241,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["this.repofilterservice.getrepofilters(options",{"_index":3315,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["this.reporepository",{"_index":3621,"title":{},"body":{"injectables/RepoService.html":{}}}],["this.reporepository.createquerybuilder(\"repo",{"_index":3668,"title":{},"body":{"injectables/RepoService.html":{}}}],["this.reposervice.findall(pageoptionsdto",{"_index":3518,"title":{},"body":{"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserController.html":{}}}],["this.reposervice.findallwithfilters(pageoptionsdto",{"_index":3520,"title":{},"body":{"controllers/RepoController.html":{}}}],["this.reposervice.findonebyid(id",{"_index":3483,"title":{},"body":{"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{}}}],["this.reposervice.findonebyownerandrepo(owner",{"_index":3487,"title":{},"body":{"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{}}}],["this.reposervice.findorgsrecommendations(userid",{"_index":5215,"title":{},"body":{"controllers/UserRecommendationController.html":{}}}],["this.reposervice.findrecommendations(interests",{"_index":5212,"title":{},"body":{"controllers/UserRecommendationController.html":{}}}],["this.repostargazerepository.createquerybuilder(\"r2stargazes\").withdeleted",{"_index":3908,"title":{},"body":{"injectables/StargazeService.html":{}}}],["this.repostargazerepository.restore(stargazeexists.id",{"_index":3913,"title":{},"body":{"injectables/StargazeService.html":{}}}],["this.repostargazerepository.save",{"_index":3914,"title":{},"body":{"injectables/StargazeService.html":{}}}],["this.repostargazerepository.softdelete(stargazeexists.id",{"_index":3915,"title":{},"body":{"injectables/StargazeService.html":{}}}],["this.repostarrepository.createquerybuilder(\"r2stars\").withdeleted",{"_index":3880,"title":{},"body":{"injectables/StarService.html":{}}}],["this.repostarrepository.restore(starexists.id",{"_index":3886,"title":{},"body":{"injectables/StarService.html":{}}}],["this.repostarrepository.save",{"_index":3887,"title":{},"body":{"injectables/StarService.html":{}}}],["this.repostarrepository.softdelete(starexists.id",{"_index":3889,"title":{},"body":{"injectables/StarService.html":{}}}],["this.reposubmitrepository.createquerybuilder(\"r2submits\").withdeleted",{"_index":4074,"title":{},"body":{"injectables/SubmitService.html":{}}}],["this.reposubmitrepository.restore(submitexists.id",{"_index":4080,"title":{},"body":{"injectables/SubmitService.html":{}}}],["this.reposubmitrepository.save",{"_index":4081,"title":{},"body":{"injectables/SubmitService.html":{}}}],["this.reposubmitrepository.softdelete(submitexists.id",{"_index":4082,"title":{},"body":{"injectables/SubmitService.html":{}}}],["this.repovoterepository.createquerybuilder(\"r2votes\").withdeleted",{"_index":5266,"title":{},"body":{"injectables/VoteService.html":{}}}],["this.repovoterepository.restore(voteexists.id",{"_index":5270,"title":{},"body":{"injectables/VoteService.html":{}}}],["this.repovoterepository.save",{"_index":5271,"title":{},"body":{"injectables/VoteService.html":{}}}],["this.repovoterepository.softdelete(voteexists.id",{"_index":5272,"title":{},"body":{"injectables/VoteService.html":{}}}],["this.stargazeservice.downstargazebyrepoid(item.id",{"_index":3772,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["this.stargazeservice.stargazebyrepoid(item.id",{"_index":3768,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["this.starservice.downstarbyrepoid(item.id",{"_index":3734,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["this.starservice.starbyrepoid(item.id",{"_index":3730,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["this.stringifyparameters(parameters",{"_index":1562,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["this.stripe.checkout.sessions.create",{"_index":3936,"title":{},"body":{"injectables/StripeService.html":{}}}],["this.stripe.customers.create",{"_index":3935,"title":{},"body":{"injectables/StripeService.html":{}}}],["this.stripeservice.addcustomer(id",{"_index":703,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.stripeservice.createcheckoutsession(customerid",{"_index":708,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.stripeservice.stripe.subscriptions.retrieve(subscriptionid",{"_index":4001,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["this.stripeservice.stripe.webhooks.constructevent(req.rawbody",{"_index":4041,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["this.stripesubscriptionservice.upsertsubscription(subscriptiondata",{"_index":4026,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["this.submitservice.downsubmitbyrepoid(item.id",{"_index":3809,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["this.submitservice.submitbyrepoid(item.id",{"_index":3806,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["this.subquerycount(qb",{"_index":3629,"title":{},"body":{"injectables/RepoService.html":{}}}],["this.subquerycountprs(querybuilder",{"_index":3327,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["this.subscriptionrepository.createquerybuilder(\"subscription",{"_index":3966,"title":{},"body":{"injectables/StripeSubscriptionService.html":{}}}],["this.subscriptionrepository.save(subscription",{"_index":3967,"title":{},"body":{"injectables/StripeSubscriptionService.html":{}}}],["this.usercollaborationrepository.createquerybuilder(\"user_collaborations",{"_index":4326,"title":{},"body":{"injectables/UserCollaborationService.html":{}}}],["this.usercollaborationrepository.save(usercollaboration",{"_index":4328,"title":{},"body":{"injectables/UserCollaborationService.html":{}}}],["this.usercollaborationrepository.softdelete(id",{"_index":4330,"title":{},"body":{"injectables/UserCollaborationService.html":{}}}],["this.usercollaborationrepository.update(id",{"_index":4329,"title":{},"body":{"injectables/UserCollaborationService.html":{}}}],["this.usercollaborationservice.findallusercollaborations(pageoptionsdto",{"_index":4298,"title":{},"body":{"controllers/UserCollaborationController.html":{}}}],["this.usercollaborationservice.findonebyid(id",{"_index":4303,"title":{},"body":{"controllers/UserCollaborationController.html":{}}}],["this.usercollaborationservice.removeusercollaboration(id",{"_index":4311,"title":{},"body":{"controllers/UserCollaborationController.html":{}}}],["this.usercollaborationservice.updateusercollaboration(id",{"_index":4307,"title":{},"body":{"controllers/UserCollaborationController.html":{}}}],["this.userfollowrepository.createquerybuilder(\"user_follows\").withdeleted",{"_index":4445,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["this.userfollowrepository.restore(followexists.id",{"_index":4458,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["this.userfollowrepository.save",{"_index":4460,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["this.userfollowrepository.softdelete(followexists.id",{"_index":4461,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["this.userfollowservice.adduserfollowerbyuserid(userid",{"_index":4503,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["this.userfollowservice.findallfollowers(userid",{"_index":4681,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["this.userfollowservice.findallfollowinglist(user.id",{"_index":4473,"title":{},"body":{"controllers/UserFollowingController.html":{}}}],["this.userfollowservice.finduserfollowerbyid(userid",{"_index":4501,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["this.userfollowservice.removeuserfollowerbyid(userid",{"_index":4514,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["this.userhighlightreactionrepository",{"_index":4700,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["this.userhighlightreactionrepository.createquerybuilder(\"user_highlight_reactions",{"_index":4689,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["this.userhighlightreactionrepository.restore(reactionexists.id",{"_index":4705,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["this.userhighlightreactionrepository.save",{"_index":4707,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["this.userhighlightreactionrepository.softdelete(id",{"_index":4708,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["this.userhighlightrepository.create",{"_index":4670,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["this.userhighlightrepository.createquerybuilder(\"user_highlights",{"_index":4645,"title":{},"body":{"injectables/UserHighlightsService.html":{},"injectables/UserListService.html":{}}}],["this.userhighlightrepository.save(newuserhighlight",{"_index":4679,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["this.userhighlightrepository.softdelete(highlightid",{"_index":4688,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["this.userhighlightrepository.update(highlightid",{"_index":4687,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["this.userhighlightsservice.addfeatured(id",{"_index":2777,"title":{},"body":{"controllers/HighlightController.html":{}}}],["this.userhighlightsservice.adduserhighlight(userid",{"_index":4571,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["this.userhighlightsservice.adduserhighlightreaction(userid",{"_index":4590,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["this.userhighlightsservice.deleteuserhighlight(highlight.id",{"_index":4586,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["this.userhighlightsservice.deleteuserhighlightreaction(userhighlightreaction.id",{"_index":4595,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["this.userhighlightsservice.findall(pageoptionsdto",{"_index":2771,"title":{},"body":{"controllers/HighlightController.html":{},"controllers/UserHighlightsController.html":{}}}],["this.userhighlightsservice.findallbyuserid(pageoptionsdto",{"_index":4389,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userhighlightsservice.findallfeatured(pageoptionsdto",{"_index":2774,"title":{},"body":{"controllers/HighlightController.html":{}}}],["this.userhighlightsservice.findallhighlightreactions(id",{"_index":2786,"title":{},"body":{"controllers/HighlightController.html":{},"controllers/UserHighlightsController.html":{}}}],["this.userhighlightsservice.findallhighlightrepos(pageoptionsdto",{"_index":2783,"title":{},"body":{"controllers/HighlightController.html":{},"controllers/UserHighlightsController.html":{}}}],["this.userhighlightsservice.findonebyid(highlight.id",{"_index":4585,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["this.userhighlightsservice.findonebyid(highlightid",{"_index":4575,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["this.userhighlightsservice.findonebyid(id",{"_index":4573,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["this.userhighlightsservice.findoneuserhighlightreaction",{"_index":4594,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["this.userhighlightsservice.findtop(pageoptionsdto",{"_index":2789,"title":{},"body":{"controllers/HighlightController.html":{}}}],["this.userhighlightsservice.removefeatured(id",{"_index":2779,"title":{},"body":{"controllers/HighlightController.html":{}}}],["this.userhighlightsservice.updateuserhighlight(highlight.id",{"_index":4576,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["this.userlistcontributorrepository.create",{"_index":5007,"title":{},"body":{"injectables/UserListService.html":{}}}],["this.userlistcontributorrepository.createquerybuilder(\"user_list_contributors",{"_index":70,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListService.html":{},"injectables/UserListStatsService.html":{}}}],["this.userlistcontributorrepository.findone",{"_index":5005,"title":{},"body":{"injectables/UserListService.html":{}}}],["this.userlistcontributorrepository.manager",{"_index":184,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["this.userlistcontributorrepository.save(newuserlistcontributor",{"_index":5008,"title":{},"body":{"injectables/UserListService.html":{}}}],["this.userlistcontributorrepository.softdelete(userlistcontributorid",{"_index":5009,"title":{},"body":{"injectables/UserListService.html":{}}}],["this.userlistrepository.create",{"_index":5000,"title":{},"body":{"injectables/UserListService.html":{}}}],["this.userlistrepository.createquerybuilder(\"user_lists",{"_index":4987,"title":{},"body":{"injectables/UserListService.html":{}}}],["this.userlistrepository.save(newuserlist",{"_index":5003,"title":{},"body":{"injectables/UserListService.html":{}}}],["this.userlistrepository.softdelete(listid",{"_index":5012,"title":{},"body":{"injectables/UserListService.html":{}}}],["this.userlistrepository.update(listid",{"_index":5011,"title":{},"body":{"injectables/UserListService.html":{}}}],["this.userlistservice.adduserlist(userid",{"_index":4893,"title":{},"body":{"controllers/UserListController.html":{}}}],["this.userlistservice.adduserlistcontributor(id",{"_index":4920,"title":{},"body":{"controllers/UserListController.html":{}}}],["this.userlistservice.adduserlistcontributor(newlist.id",{"_index":4896,"title":{},"body":{"controllers/UserListController.html":{}}}],["this.userlistservice.deleteuserlist(list.id",{"_index":4908,"title":{},"body":{"controllers/UserListController.html":{}}}],["this.userlistservice.deleteuserlistcontributor(id",{"_index":4924,"title":{},"body":{"controllers/UserListController.html":{}}}],["this.userlistservice.findallbyuserid(pageoptionsdto",{"_index":4888,"title":{},"body":{"controllers/UserListController.html":{}}}],["this.userlistservice.findallfeatured(pageoptionsdto",{"_index":4890,"title":{},"body":{"controllers/UserListController.html":{}}}],["this.userlistservice.findcontributorsbyfilter(pageoptionsdto",{"_index":4913,"title":{},"body":{"controllers/UserListController.html":{}}}],["this.userlistservice.findcontributorsbylistid(pageoptionsdto",{"_index":4916,"title":{},"body":{"controllers/UserListController.html":{}}}],["this.userlistservice.findlistcontributorshighlights(pageoptionsdto",{"_index":4926,"title":{},"body":{"controllers/UserListController.html":{}}}],["this.userlistservice.findonebyid(list.id",{"_index":4906,"title":{},"body":{"controllers/UserListController.html":{}}}],["this.userlistservice.findonebyid(listid",{"_index":4902,"title":{},"body":{"controllers/UserListController.html":{}}}],["this.userlistservice.findpubliconebyid(id",{"_index":4901,"title":{},"body":{"controllers/UserListController.html":{}}}],["this.userlistservice.getalltimezones",{"_index":4928,"title":{},"body":{"controllers/UserListController.html":{}}}],["this.userlistservice.updateuserlist(list.id",{"_index":4903,"title":{},"body":{"controllers/UserListController.html":{}}}],["this.userliststatsservice.findalllistcontributorstats(pageoptionsdto",{"_index":5068,"title":{},"body":{"controllers/UserListStatsController.html":{}}}],["this.userliststatsservice.findcontributionsbyproject(id",{"_index":5072,"title":{},"body":{"controllers/UserListStatsController.html":{}}}],["this.userliststatsservice.findcontributionsintimeframe(options",{"_index":5071,"title":{},"body":{"controllers/UserListStatsController.html":{}}}],["this.userliststatsservice.findcontributorcategoriesbytimeframe(options",{"_index":5075,"title":{},"body":{"controllers/UserListStatsController.html":{}}}],["this.userliststatsservice.findlistcontributorstatsbyproject(options",{"_index":5074,"title":{},"body":{"controllers/UserListStatsController.html":{}}}],["this.usernotificationrepository.createquerybuilder(\"user_notifications",{"_index":5151,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["this.usernotificationrepository.save",{"_index":5162,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["this.usernotificationrepository.update(id",{"_index":5175,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["this.usernotificationservice.adduserfollowernotification(userid",{"_index":4459,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["this.usernotificationservice.adduserhighlightnotification(newhighlight.id",{"_index":4684,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["this.usernotificationservice.adduserhighlightreactionnotification(userid",{"_index":4706,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["this.usernotificationservice.findallbyuserid(userid",{"_index":5125,"title":{},"body":{"controllers/UserNotificationController.html":{}}}],["this.userorganizationrepository.createquerybuilder(\"user_organizations",{"_index":5189,"title":{},"body":{"injectables/UserOrganizationService.html":{}}}],["this.userorganizationservice.findallbyuserid(user.id",{"_index":4395,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userreporepository.create",{"_index":5241,"title":{},"body":{"injectables/UserReposService.html":{}}}],["this.userreporepository.createquerybuilder(\"user_repos",{"_index":5239,"title":{},"body":{"injectables/UserReposService.html":{}}}],["this.userreporepository.save(newuserrepo",{"_index":5242,"title":{},"body":{"injectables/UserReposService.html":{}}}],["this.userrepository.createquerybuilder(\"user",{"_index":1149,"title":{},"body":{"injectables/ContributionService.html":{},"injectables/UserListService.html":{}}}],["this.userrepository.createquerybuilder(\"users",{"_index":4988,"title":{},"body":{"injectables/UserListService.html":{}}}],["this.userservice.applycoupon(userid",{"_index":721,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.userservice.checkadduser(user",{"_index":679,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.userservice.deleteuser(userid",{"_index":725,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.userservice.findmanybyusernames(bulkfollow.usernames",{"_index":4505,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["this.userservice.findonebyemail(createinsightmemberdto.email",{"_index":4753,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["this.userservice.findonebyid(user.user_metadata.sub",{"_index":4301,"title":{},"body":{"controllers/UserCollaborationController.html":{}}}],["this.userservice.findonebyid(userid",{"_index":714,"title":{},"body":{"controllers/AuthController.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserNotificationService.html":{},"controllers/UserRecommendationController.html":{}}}],["this.userservice.findonebyusername(createusercollaborationdto.username",{"_index":4299,"title":{},"body":{"controllers/UserCollaborationController.html":{}}}],["this.userservice.findonebyusername(username",{"_index":2486,"title":{},"body":{"controllers/EndorsementController.html":{},"controllers/UserController.html":{},"controllers/UserFollowingController.html":{},"controllers/UserFollowsController.html":{}}}],["this.userservice.findtopusers(pageoptionsdto",{"_index":4397,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.findusersbyfilter(pageoptionsdto",{"_index":4399,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.updateemailpreferences(userid",{"_index":716,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.userservice.updateinterests(userid",{"_index":713,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.userservice.updateonboarding(userid",{"_index":692,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.userservice.updaterole(userid",{"_index":4028,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["this.userservice.updateuser(userid",{"_index":711,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.userservice.updatewaitliststatus(userid",{"_index":695,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.voteservice.downvotebyrepoid(item.id",{"_index":3859,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["this.voteservice.findonebyrepoid(repoid",{"_index":3852,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["this.voteservice.votebyrepoid(item.id",{"_index":3855,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["thresholdpercent",{"_index":2696,"title":{},"body":{"controllers/HealthController.html":{}}}],["throw",{"_index":788,"title":{},"body":{"controllers/BlogSummaryController.html":{},"interfaces/ChatResponse.html":{},"controllers/CodeExplanationController.html":{},"controllers/CodeRefactorSuggestionController.html":{},"controllers/CodeTestSuggestionController.html":{},"injectables/CommitAuthorsService.html":{},"injectables/CommitsService.html":{},"injectables/CouponService.html":{},"injectables/EndorsementService.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightsService.html":{},"controllers/IssueSummaryController.html":{},"injectables/OpenAiService.html":{},"controllers/PizzaOvenController.html":{},"injectables/PizzaOvenService.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/RepoService.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"controllers/StripeWebhookController.html":{},"injectables/SubmitService.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"injectables/UserFollowService.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"injectables/UserListService.html":{},"injectables/UserReposService.html":{},"injectables/VoteService.html":{}}}],["tier",{"_index":4177,"title":{},"body":{"injectables/TierService.html":{}}}],["tier.service",{"_index":4166,"title":{},"body":{"modules/TierModule.html":{}}}],["tier/tier.module",{"_index":5111,"title":{},"body":{"modules/UserModule.html":{}}}],["tierconfig",{"_index":328,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["tiermodule",{"_index":4160,"title":{"modules/TierModule.html":{}},"body":{"modules/TierModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["tierservice",{"_index":4164,"title":{"injectables/TierService.html":{}},"body":{"modules/TierModule.html":{},"injectables/TierService.html":{},"coverage.html":{},"overview.html":{}}}],["time",{"_index":1551,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{},"entities/DbContribution.html":{},"entities/DbContributionStatTimeframe.html":{},"entities/DbContributorCategoryTimeframe.html":{},"entities/DbCoupon.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbPullRequestReview.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserNotification.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"classes/FilterListContributorsDto.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{},"miscellaneous/variables.html":{}}}],["time_end",{"_index":178,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"entities/DbContributionStatTimeframe.html":{},"entities/DbContributorCategoryTimeframe.html":{},"injectables/UserListStatsService.html":{}}}],["time_start",{"_index":177,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"entities/DbContributionStatTimeframe.html":{},"entities/DbContributorCategoryTimeframe.html":{},"injectables/UserListStatsService.html":{}}}],["timeframe",{"_index":5070,"title":{},"body":{"controllers/UserListStatsController.html":{}}}],["timeframe'})@apiokresponse({type",{"_index":5038,"title":{},"body":{"controllers/UserListStatsController.html":{}}}],["timeframe.dto",{"_index":41,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"controllers/UserListStatsController.html":{},"injectables/UserListStatsService.html":{}}}],["timeframe.dto.ts",{"_index":1186,"title":{},"body":{"classes/ContributionsTimeframeDto.html":{},"coverage.html":{}}}],["timeframe.dto.ts:17",{"_index":1189,"title":{},"body":{"classes/ContributionsTimeframeDto.html":{}}}],["timeframe.dto.ts:26",{"_index":1188,"title":{},"body":{"classes/ContributionsTimeframeDto.html":{}}}],["timeframe.entity",{"_index":44,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"modules/UserListModule.html":{},"controllers/UserListStatsController.html":{},"injectables/UserListStatsService.html":{}}}],["timeframe.entity.ts",{"_index":1684,"title":{},"body":{"entities/DbContributionStatTimeframe.html":{},"entities/DbContributorCategoryTimeframe.html":{},"coverage.html":{}}}],["timeframe.entity.ts:16",{"_index":1702,"title":{},"body":{"entities/DbContributionStatTimeframe.html":{},"entities/DbContributorCategoryTimeframe.html":{}}}],["timeframe.entity.ts:28",{"_index":1701,"title":{},"body":{"entities/DbContributionStatTimeframe.html":{},"entities/DbContributorCategoryTimeframe.html":{}}}],["timeframe.entity.ts:40",{"_index":1690,"title":{},"body":{"entities/DbContributionStatTimeframe.html":{},"entities/DbContributorCategoryTimeframe.html":{}}}],["timeframe.entity.ts:52",{"_index":1694,"title":{},"body":{"entities/DbContributionStatTimeframe.html":{},"entities/DbContributorCategoryTimeframe.html":{}}}],["timeframe.entity.ts:64",{"_index":1696,"title":{},"body":{"entities/DbContributionStatTimeframe.html":{}}}],["timeframe.entity.ts:65",{"_index":1716,"title":{},"body":{"entities/DbContributorCategoryTimeframe.html":{}}}],["timeframe.entity.ts:76",{"_index":1693,"title":{},"body":{"entities/DbContributionStatTimeframe.html":{}}}],["timeframe.entity.ts:78",{"_index":1714,"title":{},"body":{"entities/DbContributorCategoryTimeframe.html":{}}}],["timeframe.entity.ts:88",{"_index":1689,"title":{},"body":{"entities/DbContributionStatTimeframe.html":{}}}],["timestamp",{"_index":1647,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbContributionStatTimeframe.html":{},"entities/DbContributorCategoryTimeframe.html":{},"entities/DbCoupon.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbPullRequestReview.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserNotification.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"classes/SupabaseAuthDto.html":{}}}],["timezone",{"_index":689,"title":{},"body":{"controllers/AuthController.html":{},"classes/DbTimezone.html":{},"classes/FilterListContributorsDto.html":{},"classes/UpdateUserDto.html":{},"injectables/UserListService.html":{},"classes/UserOnboardingDto.html":{}}}],["timezones",{"_index":4858,"title":{},"body":{"controllers/UserListController.html":{},"injectables/UserListService.html":{}}}],["timezones'})@apiokresponse({type",{"_index":4856,"title":{},"body":{"controllers/UserListController.html":{}}}],["title",{"_index":829,"title":{},"body":{"injectables/BlogSummaryService.html":{},"classes/CreateBlogSummaryDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/CreateUserHighlightDto.html":{},"entities/DbInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbUserHighlight.html":{},"injectables/IssueSummaryService.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{}}}],["tmodel",{"_index":5680,"title":{},"body":{"miscellaneous/variables.html":{}}}],["to_date('${hacktoberfestyear",{"_index":3303,"title":{},"body":{"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoService.html":{}}}],["toclassonly",{"_index":2579,"title":{},"body":{"classes/FilterListContributorsDto.html":{}}}],["todatetime",{"_index":3987,"title":{},"body":{"controllers/StripeWebhookController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["todatetime(subscription.cancel_at",{"_index":4014,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["todatetime(subscription.canceled_at",{"_index":4016,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["todatetime(subscription.created",{"_index":4019,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["todatetime(subscription.current_period_end",{"_index":4018,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["todatetime(subscription.current_period_start",{"_index":4017,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["todatetime(subscription.ended_at",{"_index":4021,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["todatetime(subscription.trial_end",{"_index":4025,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["todatetime(subscription.trial_start",{"_index":4023,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["today",{"_index":1882,"title":{},"body":{"entities/DbPRInsight.html":{}}}],["todo",{"_index":5817,"title":{},"body":{"miscellaneous/variables.html":{}}}],["token",{"_index":2465,"title":{},"body":{"controllers/EndorsementController.html":{},"guards/EndorsementTokenGuard.html":{}}}],["token.guard",{"_index":2459,"title":{},"body":{"controllers/EndorsementController.html":{},"modules/EndorsementModule.html":{}}}],["token.guard.ts",{"_index":2551,"title":{},"body":{"guards/EndorsementTokenGuard.html":{},"coverage.html":{}}}],["token.guard.ts:5",{"_index":2554,"title":{},"body":{"guards/EndorsementTokenGuard.html":{}}}],["token.guard.ts:8",{"_index":2557,"title":{},"body":{"guards/EndorsementTokenGuard.html":{}}}],["tone",{"_index":807,"title":{},"body":{"injectables/BlogSummaryService.html":{},"classes/CreateBlogSummaryDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"injectables/IssueSummaryService.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["tools",{"_index":5479,"title":{},"body":{"index.html":{}}}],["top",{"_index":409,"title":{},"body":{"modules/AppModule.html":{},"classes/DbTopUser.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserTopRepo.html":{},"controllers/HighlightController.html":{},"classes/InsightOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"controllers/UserController.html":{},"controllers/UserListStatsController.html":{},"modules/UserModule.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["top100",{"_index":2909,"title":{},"body":{"classes/InsightOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"miscellaneous/enumerations.html":{}}}],["top_repos",{"_index":3548,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["top_repos\".id",{"_index":3547,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["top_repos.stars",{"_index":3549,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["topic",{"_index":2607,"title":{},"body":{"classes/FilterOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/RepoFilterService.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{}}}],["topprojectsdto",{"_index":56,"title":{"classes/TopProjectsDto.html":{}},"body":{"interfaces/AllContributionsCount.html":{},"classes/TopProjectsDto.html":{},"controllers/UserListStatsController.html":{},"injectables/UserListStatsService.html":{},"coverage.html":{}}}],["toprepos",{"_index":4392,"title":{},"body":{"controllers/UserController.html":{}}}],["topusersdto",{"_index":4193,"title":{"classes/TopUsersDto.html":{}},"body":{"classes/TopUsersDto.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["tort",{"_index":5599,"title":{},"body":{"license.html":{}}}],["total",{"_index":1642,"title":{},"body":{"entities/DbContribution.html":{},"controllers/HighlightController.html":{}}}],["total_contributions",{"_index":4944,"title":{},"body":{"classes/UserListMostActiveContributorsDto.html":{},"miscellaneous/enumerations.html":{}}}],["transform",{"_index":2590,"title":{},"body":{"classes/FilterListContributorsDto.html":{},"controllers/UserListController.html":{}}}],["transformer",{"_index":964,"title":{},"body":{"classes/CollaboratorsDto.html":{},"classes/ContributionsByProjectDto.html":{},"classes/ContributionsPageDto.html":{},"classes/ContributionsTimeframeDto.html":{},"classes/Contributor.html":{},"classes/CreateInsightDto.html":{},"classes/CreateUserListDto.html":{},"classes/FilterListContributorsDto.html":{},"classes/FilteredUsersDto.html":{},"classes/PageDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/TopProjectsDto.html":{},"classes/TopUsersDto.html":{}}}],["translatetime",{"_index":487,"title":{},"body":{"modules/AppModule.html":{}}}],["translation",{"_index":821,"title":{},"body":{"injectables/BlogSummaryService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"injectables/IssueSummaryService.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["transport",{"_index":482,"title":{},"body":{"modules/AppModule.html":{}}}],["trial",{"_index":2130,"title":{},"body":{"entities/DbSubscription.html":{}}}],["trial_end_at",{"_index":2107,"title":{},"body":{"entities/DbSubscription.html":{},"controllers/StripeWebhookController.html":{}}}],["trial_start_at",{"_index":2108,"title":{},"body":{"entities/DbSubscription.html":{},"controllers/StripeWebhookController.html":{}}}],["true",{"_index":439,"title":{},"body":{"modules/AppModule.html":{},"classes/CollaboratorsDto.html":{},"classes/ContributionPageMetaDto.html":{},"classes/ContributionsPageDto.html":{},"classes/Contributor.html":{},"classes/CreateInsightDto.html":{},"classes/CreateUserHighlightDto.html":{},"classes/CreateUserListDto.html":{},"entities/DbUserHighlight.html":{},"classes/DbUserHighlightReactionResponse.html":{},"entities/DbUserList.html":{},"guards/EndorsementTokenGuard.html":{},"classes/FilterListContributorsDto.html":{},"classes/FollowManyUsersDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"classes/HighlightOptionsDto.html":{},"injectables/InsightMemberService.html":{},"injectables/LogService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"controllers/RepoContributionsController.html":{},"injectables/StripeService.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"controllers/UserListController.html":{},"classes/UserOnboardingDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"injectables/VoteService.html":{},"classes/VotedRepoDto.html":{},"miscellaneous/variables.html":{}}}],["true`).orderby(\"user_highlights.updated_at",{"_index":4662,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["true})@apinotfoundresponse({description",{"_index":3474,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["true})@column({type",{"_index":2194,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["true})@isarray()@isstring({each",{"_index":1442,"title":{},"body":{"classes/CreateUserHighlightDto.html":{},"classes/FollowManyUsersDto.html":{}}}],["true})@isboolean",{"_index":5277,"title":{},"body":{"classes/VotedRepoDto.html":{}}}],["true})@isoptional",{"_index":2242,"title":{},"body":{"classes/DbUserHighlightReactionResponse.html":{},"classes/FilterListContributorsDto.html":{}}}],["true})@isstring({each",{"_index":2241,"title":{},"body":{"classes/DbUserHighlightReactionResponse.html":{}}}],["true})@type(undefined",{"_index":1178,"title":{},"body":{"classes/ContributionsPageDto.html":{},"classes/PageDto.html":{}}}],["true})@type(undefined)@transform",{"_index":2578,"title":{},"body":{"classes/FilterListContributorsDto.html":{}}}],["true})@validatenested({each",{"_index":1177,"title":{},"body":{"classes/ContributionsPageDto.html":{},"classes/PageDto.html":{}}}],["try",{"_index":661,"title":{},"body":{"controllers/AuthController.html":{},"injectables/BlogSummaryService.html":{},"injectables/CodeExplanationService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"injectables/IssueSummaryService.html":{},"injectables/PullRequestDescriptionService.html":{},"controllers/StripeWebhookController.html":{},"injectables/TierService.html":{},"controllers/UserFollowsController.html":{},"controllers/UserInsightsController.html":{}}}],["turbo",{"_index":5789,"title":{},"body":{"miscellaneous/variables.html":{}}}],["twitter",{"_index":4123,"title":{},"body":{"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{}}}],["twitter_username",{"_index":669,"title":{},"body":{"controllers/AuthController.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{}}}],["type",{"_index":14,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"modules/AppModule.html":{},"classes/ApplyUserCouponDto.html":{},"controllers/AuthController.html":{},"classes/BakeRepoDto.html":{},"controllers/BlogSummaryController.html":{},"injectables/BlogSummaryService.html":{},"interfaces/ChatResponse.html":{},"controllers/CodeExplanationController.html":{},"injectables/CodeExplanationService.html":{},"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"controllers/CodeTestSuggestionController.html":{},"injectables/CodeTestSuggestionService.html":{},"classes/CollaboratorsDto.html":{},"classes/CommitAuthorDto.html":{},"injectables/CommitAuthorsService.html":{},"classes/CommitsDto.html":{},"injectables/CommitsService.html":{},"classes/ContributionPageMetaDto.html":{},"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"classes/ContributionsByProjectDto.html":{},"classes/ContributionsPageDto.html":{},"classes/ContributionsTimeframeDto.html":{},"classes/Contributor.html":{},"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"classes/ContributorPullRequestsDto.html":{},"injectables/CouponService.html":{},"classes/CreateBlogSummaryDto.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateInsightDto.html":{},"classes/CreateInsightMemberDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/CreateLogDto.html":{},"classes/CreateUserCollaborationDto.html":{},"classes/CreateUserHighlightDto.html":{},"classes/CreateUserListDto.html":{},"injectables/CustomLogger.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"entities/DbBakedRepo.html":{},"entities/DbCommitAuthors.html":{},"entities/DbCommits.html":{},"entities/DbContribution.html":{},"entities/DbContributionStatTimeframe.html":{},"entities/DbContributionsProjects.html":{},"entities/DbContributorCategoryTimeframe.html":{},"entities/DbCoupon.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"classes/DbFilteredUser.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbPullRequestReview.html":{},"entities/DbRepoLoginContributions.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"classes/DbTimezone.html":{},"classes/DbTopUser.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightReactionResponse.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserListContributorStat.html":{},"entities/DbUserListContributorStat-1.html":{},"entities/DbUserNotification.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"controllers/EmojiController.html":{},"injectables/EmojiService.html":{},"controllers/EndorsementController.html":{},"injectables/EndorsementService.html":{},"guards/EndorsementTokenGuard.html":{},"classes/FilterListContributorsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/FilteredUsersDto.html":{},"classes/FollowManyUsersDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"controllers/HighlightController.html":{},"classes/HighlightOptionsDto.html":{},"injectables/HttpLoggerMiddleware.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"controllers/IssueSummaryController.html":{},"injectables/IssueSummaryService.html":{},"injectables/LogService.html":{},"injectables/OpenAiService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaParameters.html":{},"classes/PageOptionsDto.html":{},"injectables/PagerService.html":{},"interfaces/PaginationInput.html":{},"controllers/PizzaOvenController.html":{},"injectables/PizzaOvenService.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestInsightsService.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestReviewService.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"injectables/RepoFilterService.html":{},"classes/RepoInfo.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeService.html":{},"injectables/StripeSubscriptionService.html":{},"controllers/StripeWebhookController.html":{},"injectables/SubmitService.html":{},"classes/SupabaseAuthDto.html":{},"injectables/SupabaseStrategy.html":{},"injectables/TierService.html":{},"classes/TopProjectsDto.html":{},"classes/TopUsersDto.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateInsightMemberDto.html":{},"classes/UpdateUserCollaborationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowingController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"classes/UserListMostActiveContributorsDto.html":{},"injectables/UserListService.html":{},"controllers/UserListStatsController.html":{},"injectables/UserListStatsService.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"classes/UserOnboardingDto.html":{},"injectables/UserOrganizationService.html":{},"controllers/UserRecommendationController.html":{},"classes/UserRepoOptionsDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"injectables/UserReposService.html":{},"injectables/VoteService.html":{},"classes/VotedRepoDto.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["type')@apioperation({operationid",{"_index":5045,"title":{},"body":{"controllers/UserListStatsController.html":{}}}],["typealiases",{"_index":5636,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typeof",{"_index":855,"title":{},"body":{"interfaces/ChatResponse.html":{},"injectables/OpenAiService.html":{}}}],["typeorm",{"_index":22,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"modules/AppModule.html":{},"injectables/CommitAuthorsService.html":{},"injectables/CommitsService.html":{},"injectables/ContributionService.html":{},"injectables/CouponService.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"entities/DbBakedRepo.html":{},"entities/DbCommitAuthors.html":{},"entities/DbCommits.html":{},"entities/DbContribution.html":{},"entities/DbContributionStatTimeframe.html":{},"entities/DbContributionsProjects.html":{},"entities/DbContributorCategoryTimeframe.html":{},"entities/DbCoupon.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbPullRequestReview.html":{},"entities/DbRepoLoginContributions.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserListContributorStat.html":{},"entities/DbUserListContributorStat-1.html":{},"entities/DbUserNotification.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"injectables/EmojiService.html":{},"injectables/EndorsementService.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"injectables/LogService.html":{},"injectables/PagerService.html":{},"interfaces/PaginationInput.html":{},"injectables/PizzaOvenService.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestReviewService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoFilterService.html":{},"injectables/RepoService.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeSubscriptionService.html":{},"injectables/SubmitService.html":{},"injectables/UserCollaborationService.html":{},"injectables/UserFollowService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserListService.html":{},"injectables/UserListStatsService.html":{},"injectables/UserNotificationService.html":{},"injectables/UserOrganizationService.html":{},"injectables/UserReposService.html":{},"injectables/VoteService.html":{}}}],["typeorm/query",{"_index":3083,"title":{},"body":{"injectables/PagerService.html":{},"interfaces/PaginationInput.html":{}}}],["typeormhealthindicator",{"_index":2679,"title":{},"body":{"controllers/HealthController.html":{}}}],["typeormlogger",{"_index":1531,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["typeormmodule",{"_index":302,"title":{},"body":{"modules/AppModule.html":{},"modules/ContributionModule.html":{},"modules/ContributorModule.html":{},"modules/CouponModule.html":{},"modules/CustomerModule.html":{},"modules/EmojiModule.html":{},"modules/EndorsementModule.html":{},"modules/HighlightModule.html":{},"modules/InsightsModule.html":{},"modules/LogModule.html":{},"modules/PizzaOvenModule.html":{},"modules/PullRequestModule.html":{},"modules/RepoModule.html":{},"modules/StarModule.html":{},"modules/StargazeModule.html":{},"modules/StripeSubscriptionModule.html":{},"modules/SubmitModule.html":{},"modules/UserListModule.html":{},"modules/UserModule.html":{},"modules/UserReposModule.html":{},"modules/VoteModule.html":{}}}],["typeormmodule.forfeature",{"_index":4938,"title":{},"body":{"modules/UserListModule.html":{},"modules/UserModule.html":{}}}],["typeormmodule.forfeature([dbbakedrepo",{"_index":3175,"title":{},"body":{"modules/PizzaOvenModule.html":{}}}],["typeormmodule.forfeature([dbcoupon",{"_index":1286,"title":{},"body":{"modules/CouponModule.html":{}}}],["typeormmodule.forfeature([dbcustomer",{"_index":1507,"title":{},"body":{"modules/CustomerModule.html":{}}}],["typeormmodule.forfeature([dbemoji",{"_index":2395,"title":{},"body":{"modules/EmojiModule.html":{}}}],["typeormmodule.forfeature([dbendorsement",{"_index":2501,"title":{},"body":{"modules/EndorsementModule.html":{}}}],["typeormmodule.forfeature([dbinsight",{"_index":2959,"title":{},"body":{"modules/InsightsModule.html":{}}}],["typeormmodule.forfeature([dblog",{"_index":3030,"title":{},"body":{"modules/LogModule.html":{}}}],["typeormmodule.forfeature([dbpullrequest",{"_index":1270,"title":{},"body":{"modules/ContributorModule.html":{},"modules/PullRequestModule.html":{}}}],["typeormmodule.forfeature([dbrepo",{"_index":1037,"title":{},"body":{"modules/ContributionModule.html":{},"modules/RepoModule.html":{},"modules/StarModule.html":{},"modules/StargazeModule.html":{},"modules/SubmitModule.html":{},"modules/VoteModule.html":{}}}],["typeormmodule.forfeature([dbsubscription",{"_index":3956,"title":{},"body":{"modules/StripeSubscriptionModule.html":{}}}],["typeormmodule.forfeature([dbuserhighlight",{"_index":2794,"title":{},"body":{"modules/HighlightModule.html":{}}}],["typeormmodule.forfeature([dbuserrepo",{"_index":5227,"title":{},"body":{"modules/UserReposModule.html":{}}}],["typeormmodule.forrootasync",{"_index":440,"title":{},"body":{"modules/AppModule.html":{}}}],["typeormmoduleoptions",{"_index":314,"title":{},"body":{"modules/AppModule.html":{}}}],["types",{"_index":5509,"title":{},"body":{"index.html":{}}}],["types:auto",{"_index":5516,"title":{},"body":{"index.html":{}}}],["ucn2zrh2wgxkck7tt2jg4my6wbhkex9s",{"_index":5697,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ui",{"_index":2661,"title":{},"body":{"classes/GeneratePullRequestDescriptionDto.html":{},"miscellaneous/variables.html":{}}}],["unable",{"_index":547,"title":{},"body":{"controllers/AuthController.html":{},"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"controllers/UserListStatsController.html":{},"controllers/UserNotificationController.html":{}}}],["unauthorizedexception",{"_index":2838,"title":{},"body":{"controllers/InsightController.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"injectables/UserListService.html":{}}}],["unauthorizedexception(\"you're",{"_index":4995,"title":{},"body":{"injectables/UserListService.html":{}}}],["undefined",{"_index":856,"title":{},"body":{"interfaces/ChatResponse.html":{},"classes/CreateUserHighlightDto.html":{},"entities/DbUserHighlight.html":{},"classes/DbUserHighlightReactionResponse.html":{},"classes/FollowManyUsersDto.html":{},"injectables/OpenAiService.html":{},"controllers/PullRequestController.html":{},"injectables/PullRequestInsightsService.html":{},"controllers/StripeWebhookController.html":{}}}],["undefined})@apinotfoundresponse({description",{"_index":4537,"title":{},"body":{"controllers/UserHighlightsController.html":{},"controllers/UserNotificationController.html":{}}}],["undefined})@apiparam({name",{"_index":3216,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["undefined})@column({type",{"_index":1913,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["undefined})@isarray",{"_index":4261,"title":{},"body":{"classes/UpdateUserProfileInterestsDto.html":{},"classes/UserOnboardingDto.html":{},"classes/UserRepoOptionsDto-1.html":{}}}],["undefined})@isarray()@isstring({each",{"_index":2577,"title":{},"body":{"classes/FilterListContributorsDto.html":{}}}],["undefined})@isarray()@type(undefined",{"_index":1461,"title":{},"body":{"classes/CreateUserListDto.html":{}}}],["undefined})@isenum(contributionorderfieldsenum)@isoptional",{"_index":1082,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{}}}],["undefined})@isenum(orderdirectionenum)@isoptional",{"_index":1091,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/ContributorPullRequestsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/UserListMostActiveContributorsDto.html":{},"classes/UserRepoOptionsDto.html":{}}}],["undefined})@isenum(pullrequestorderfieldsenum)@isoptional",{"_index":3349,"title":{},"body":{"classes/PullRequestPageOptionsDto.html":{}}}],["undefined})@isenum(rangetypeenum)@isoptional",{"_index":1277,"title":{},"body":{"classes/ContributorPullRequestsDto.html":{}}}],["undefined})@isenum(repoorderfieldsenum)@isoptional",{"_index":3571,"title":{},"body":{"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{}}}],["undefined})@isenum(userlistcontributorstatsorderenum)@isoptional",{"_index":4942,"title":{},"body":{"classes/UserListMostActiveContributorsDto.html":{}}}],["undefined})@isenum(userlistcontributorstatstypeenum)@isoptional",{"_index":1187,"title":{},"body":{"classes/ContributionsTimeframeDto.html":{},"classes/UserListMostActiveContributorsDto.html":{}}}],["undefined})@isoptional",{"_index":2650,"title":{},"body":{"classes/GeneratePullRequestDescriptionDto.html":{}}}],["undefined})@type(undefined)@isarray",{"_index":962,"title":{},"body":{"classes/CollaboratorsDto.html":{},"classes/CreateInsightDto.html":{},"classes/UpdateInsightDto.html":{}}}],["underscores",{"_index":4241,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["unfeaturehighlight",{"_index":2724,"title":{},"body":{"controllers/HighlightController.html":{}}}],["unfeaturehighlight(id",{"_index":2755,"title":{},"body":{"controllers/HighlightController.html":{}}}],["unfollowed",{"_index":3748,"title":{},"body":{"controllers/RepoStargazeController.html":{},"injectables/StargazeService.html":{}}}],["unfollows",{"_index":3771,"title":{},"body":{"controllers/RepoStargazeController.html":{},"controllers/UserFollowsController.html":{}}}],["unfollows'})@apiokresponse({description",{"_index":3746,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["unfollowuserbyuserid",{"_index":4479,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["unfollowuserbyuserid(username",{"_index":4493,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["unfollowuserbyusername",{"_index":4495,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["unique",{"_index":1639,"title":{},"body":{"entities/DbContribution.html":{},"classes/SupabaseAuthDto.html":{}}}],["unit",{"_index":5475,"title":{},"body":{"index.html":{}}}],["unix",{"_index":5895,"title":{},"body":{"miscellaneous/variables.html":{}}}],["unknown",{"_index":773,"title":{},"body":{"controllers/BlogSummaryController.html":{},"injectables/BlogSummaryService.html":{},"controllers/CodeExplanationController.html":{},"injectables/CodeExplanationService.html":{},"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"controllers/CodeTestSuggestionController.html":{},"injectables/CodeTestSuggestionService.html":{},"injectables/CouponService.html":{},"injectables/CustomLogger.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"controllers/EmojiController.html":{},"injectables/EmojiService.html":{},"controllers/EndorsementController.html":{},"injectables/EndorsementService.html":{},"controllers/HealthController.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"controllers/IssueSummaryController.html":{},"injectables/IssueSummaryService.html":{},"injectables/LogService.html":{},"injectables/OpenAiService.html":{},"injectables/PagerService.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/RepoService.html":{},"controllers/RepoVoteController.html":{},"injectables/StripeService.html":{},"injectables/StripeSubscriptionService.html":{},"controllers/StripeWebhookController.html":{},"injectables/SupabaseStrategy.html":{},"injectables/TierService.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserEndorsementController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserListService.html":{},"injectables/UserNotificationService.html":{},"injectables/UserOrganizationService.html":{},"controllers/UserRecommendationController.html":{},"injectables/UserReposService.html":{},"injectables/VoteService.html":{},"miscellaneous/variables.html":{}}}],["unnecessary",{"_index":819,"title":{},"body":{"injectables/BlogSummaryService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"injectables/IssueSummaryService.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["unprocessableentityexception",{"_index":4779,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["unread",{"_index":4103,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["up",{"_index":2157,"title":{},"body":{"entities/DbUserCollaboration.html":{},"index.html":{}}}],["update",{"_index":583,"title":{},"body":{"controllers/AuthController.html":{},"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbPullRequestReview.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"classes/SupabaseAuthDto.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"miscellaneous/variables.html":{}}}],["updatecollaboratorsdto",{"_index":4876,"title":{},"body":{"controllers/UserListController.html":{}}}],["updatecollaboratorsdto.contributors.map(async",{"_index":4918,"title":{},"body":{"controllers/UserListController.html":{}}}],["updated",{"_index":1806,"title":{},"body":{"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserList.html":{},"index.html":{}}}],["updated_at",{"_index":653,"title":{},"body":{"controllers/AuthController.html":{},"classes/ContributionPageOptionsDto.html":{},"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbPullRequestReview.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserList.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{},"classes/RepoPageOptionsDto.html":{},"classes/SupabaseAuthDto.html":{},"miscellaneous/enumerations.html":{}}}],["updatedatecolumn",{"_index":1677,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserList.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{}}}],["updatedinsightmember",{"_index":4763,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["updatedinsightmember.access",{"_index":4766,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["updatedinsightmember.user_id",{"_index":4765,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["updatedusercollaboration",{"_index":4305,"title":{},"body":{"controllers/UserCollaborationController.html":{}}}],["updateemailpreferencesforuserprofile",{"_index":537,"title":{},"body":{"controllers/AuthController.html":{}}}],["updateemailpreferencesforuserprofile(userid",{"_index":589,"title":{},"body":{"controllers/AuthController.html":{}}}],["updateendorsementdto",{"_index":4197,"title":{"classes/UpdateEndorsementDto.html":{}},"body":{"classes/UpdateEndorsementDto.html":{},"coverage.html":{}}}],["updatehighlightdto",{"_index":4564,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["updatehighlightdto.highlight",{"_index":4578,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["updatehighlightdto.shipped_at",{"_index":4581,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["updatehighlightdto.taggedrepos",{"_index":4584,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["updatehighlightdto.title",{"_index":4577,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["updatehighlightdto.type",{"_index":4580,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["updatehighlightdto.url",{"_index":4579,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["updatehighlightforuser",{"_index":4526,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["updatehighlightforuser(updatehighlightdto",{"_index":4560,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["updateinsight",{"_index":2964,"title":{},"body":{"injectables/InsightsService.html":{}}}],["updateinsight(id",{"_index":2976,"title":{},"body":{"injectables/InsightsService.html":{}}}],["updateinsightdto",{"_index":2840,"title":{"classes/UpdateInsightDto.html":{}},"body":{"controllers/InsightController.html":{},"classes/UpdateInsightDto.html":{},"controllers/UserInsightsController.html":{},"coverage.html":{}}}],["updateinsightdto.is_public",{"_index":4793,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["updateinsightdto.name",{"_index":4792,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["updateinsightdto.repos.filter",{"_index":4810,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["updateinsightdto.repos.find((repoinfo",{"_index":4799,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["updateinsightdto})@apiparam({name",{"_index":2836,"title":{},"body":{"controllers/InsightController.html":{},"controllers/UserInsightsController.html":{}}}],["updateinsightforuser",{"_index":4771,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["updateinsightforuser(id",{"_index":4776,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["updateinsightmember",{"_index":2862,"title":{},"body":{"injectables/InsightMemberService.html":{},"controllers/UserInsightMemberController.html":{}}}],["updateinsightmember(id",{"_index":2881,"title":{},"body":{"injectables/InsightMemberService.html":{},"controllers/UserInsightMemberController.html":{}}}],["updateinsightmemberdto",{"_index":4205,"title":{"classes/UpdateInsightMemberDto.html":{}},"body":{"classes/UpdateInsightMemberDto.html":{},"controllers/UserInsightMemberController.html":{},"coverage.html":{}}}],["updateinsightmemberdto.access",{"_index":4764,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["updateinsightmemberdto})@apiparam({name",{"_index":4735,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["updateinterestsforuserprofile",{"_index":538,"title":{},"body":{"controllers/AuthController.html":{}}}],["updateinterestsforuserprofile(userid",{"_index":597,"title":{},"body":{"controllers/AuthController.html":{}}}],["updatelistdto",{"_index":4880,"title":{},"body":{"controllers/UserListController.html":{}}}],["updatelistdto.is_public",{"_index":4905,"title":{},"body":{"controllers/UserListController.html":{}}}],["updatelistdto.name",{"_index":4904,"title":{},"body":{"controllers/UserListController.html":{}}}],["updatelistforuser",{"_index":4830,"title":{},"body":{"controllers/UserListController.html":{}}}],["updatelistforuser(updatelistdto",{"_index":4877,"title":{},"body":{"controllers/UserListController.html":{}}}],["updateprofileforuser",{"_index":539,"title":{},"body":{"controllers/AuthController.html":{}}}],["updateprofileforuser(@userid",{"_index":710,"title":{},"body":{"controllers/AuthController.html":{}}}],["updateprofileforuser(userid",{"_index":602,"title":{},"body":{"controllers/AuthController.html":{}}}],["updates",{"_index":580,"title":{},"body":{"controllers/AuthController.html":{},"injectables/PullRequestService.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"injectables/UserNotificationService.html":{}}}],["updateusercollaboration",{"_index":4271,"title":{},"body":{"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{}}}],["updateusercollaboration(id",{"_index":4287,"title":{},"body":{"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{}}}],["updateusercollaborationdto",{"_index":4211,"title":{"classes/UpdateUserCollaborationDto.html":{}},"body":{"classes/UpdateUserCollaborationDto.html":{},"controllers/UserCollaborationController.html":{},"coverage.html":{}}}],["updateusercollaborationdto.status",{"_index":4306,"title":{},"body":{"controllers/UserCollaborationController.html":{}}}],["updateuserdto",{"_index":590,"title":{"classes/UpdateUserDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["updateuseremailpreferencesdto",{"_index":591,"title":{"classes/UpdateUserEmailPreferencesDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"coverage.html":{}}}],["updateuserhighlight",{"_index":4609,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["updateuserhighlight(highlightid",{"_index":4641,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["updateuserlist",{"_index":4957,"title":{},"body":{"injectables/UserListService.html":{}}}],["updateuserlist(listid",{"_index":4984,"title":{},"body":{"injectables/UserListService.html":{}}}],["updateuserprofileinterestsdto",{"_index":598,"title":{"classes/UpdateUserProfileInterestsDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"coverage.html":{}}}],["upsert",{"_index":4004,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["upsertsubscription",{"_index":3958,"title":{},"body":{"injectables/StripeSubscriptionService.html":{}}}],["upsertsubscription(subscription",{"_index":3963,"title":{},"body":{"injectables/StripeSubscriptionService.html":{}}}],["url",{"_index":672,"title":{},"body":{"controllers/AuthController.html":{},"classes/BakeRepoDto.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateUserHighlightDto.html":{},"entities/DbBakedRepo.html":{},"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbPullRequest.html":{},"entities/DbUserHighlight.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"injectables/PizzaOvenService.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["url'})@column({type",{"_index":1765,"title":{},"body":{"entities/DbEndorsement.html":{}}}],["url(`https://${subdomain",{"_index":5723,"title":{},"body":{"miscellaneous/variables.html":{}}}],["us/docs/web/http/methods/delete",{"_index":5865,"title":{},"body":{"miscellaneous/variables.html":{}}}],["us/docs/web/http/methods/get",{"_index":5854,"title":{},"body":{"miscellaneous/variables.html":{}}}],["us/docs/web/http/methods/patch",{"_index":5863,"title":{},"body":{"miscellaneous/variables.html":{}}}],["us/docs/web/http/methods/post",{"_index":5859,"title":{},"body":{"miscellaneous/variables.html":{}}}],["us/docs/web/http/status/200",{"_index":5852,"title":{},"body":{"miscellaneous/variables.html":{}}}],["us/docs/web/http/status/201",{"_index":5857,"title":{},"body":{"miscellaneous/variables.html":{}}}],["us/docs/web/http/status/204",{"_index":5861,"title":{},"body":{"miscellaneous/variables.html":{}}}],["us/docs/web/http/status/400",{"_index":5868,"title":{},"body":{"miscellaneous/variables.html":{}}}],["us/docs/web/http/status/401",{"_index":5875,"title":{},"body":{"miscellaneous/variables.html":{}}}],["us/docs/web/http/status/403",{"_index":5880,"title":{},"body":{"miscellaneous/variables.html":{}}}],["us/docs/web/http/status/404",{"_index":5883,"title":{},"body":{"miscellaneous/variables.html":{}}}],["us/docs/web/http/status/429",{"_index":5886,"title":{},"body":{"miscellaneous/variables.html":{}}}],["use",{"_index":2797,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{},"injectables/TierService.html":{},"index.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["use(request",{"_index":2798,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{}}}],["used",{"_index":824,"title":{},"body":{"injectables/BlogSummaryService.html":{},"injectables/IssueSummaryService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["usefactory",{"_index":441,"title":{},"body":{"modules/AppModule.html":{}}}],["useful",{"_index":5810,"title":{},"body":{"miscellaneous/variables.html":{}}}],["useguards",{"_index":610,"title":{},"body":{"controllers/AuthController.html":{},"controllers/BlogSummaryController.html":{},"controllers/CodeExplanationController.html":{},"controllers/CodeRefactorSuggestionController.html":{},"controllers/CodeTestSuggestionController.html":{},"controllers/EndorsementController.html":{},"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"controllers/IssueSummaryController.html":{},"controllers/PullRequestDescriptionController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserEndorsementController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"controllers/UserNotificationController.html":{},"controllers/UserRecommendationController.html":{}}}],["useguards(endorsementtokenguard",{"_index":2462,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["useguards(supabaseguard",{"_index":644,"title":{},"body":{"controllers/AuthController.html":{},"controllers/BlogSummaryController.html":{},"controllers/CodeExplanationController.html":{},"controllers/CodeRefactorSuggestionController.html":{},"controllers/CodeTestSuggestionController.html":{},"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"controllers/IssueSummaryController.html":{},"controllers/PullRequestDescriptionController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserEndorsementController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"controllers/UserNotificationController.html":{},"controllers/UserRecommendationController.html":{}}}],["useless",{"_index":4654,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["user",{"_index":208,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"modules/AppModule.html":{},"classes/ApplyUserCouponDto.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"interfaces/ChatResponse.html":{},"classes/CollaboratorsDto.html":{},"injectables/ContributionService.html":{},"classes/Contributor.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateUserCollaborationDto.html":{},"classes/CreateUserHighlightDto.html":{},"classes/CreateUserListDto.html":{},"entities/DbContribution.html":{},"entities/DbContributionStatTimeframe.html":{},"entities/DbCustomer.html":{},"entities/DbEndorsement.html":{},"classes/DbFilteredUser.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbRepoLoginContributions.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"classes/DbTopUser.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserListContributorStat.html":{},"entities/DbUserListContributorStat-1.html":{},"entities/DbUserNotification.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"controllers/EndorsementController.html":{},"injectables/EndorsementService.html":{},"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"modules/InsightsModule.html":{},"injectables/InsightsService.html":{},"injectables/OpenAiService.html":{},"controllers/RepoContributionsController.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/StripeWebhookController.html":{},"classes/SupabaseAuthDto.html":{},"injectables/SupabaseStrategy.html":{},"injectables/TierService.html":{},"classes/TopUsersDto.html":{},"classes/UpdateUserCollaborationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowingController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"modules/UserListModule.html":{},"injectables/UserListService.html":{},"controllers/UserListStatsController.html":{},"injectables/UserListStatsService.html":{},"modules/UserModule.html":{},"controllers/UserNotificationController.html":{},"classes/UserOnboardingDto.html":{},"injectables/UserOrganizationService.html":{},"controllers/UserRecommendationController.html":{},"classes/UserRepoOptionsDto-1.html":{},"modules/UserReposModule.html":{},"injectables/UserReposService.html":{},"classes/VotedRepoDto.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["user's",{"_index":555,"title":{},"body":{"controllers/AuthController.html":{},"entities/DbInsightMember.html":{},"classes/SupabaseAuthDto.html":{}}}],["user'})@apibearerauth()@apipaginatedresponse(dbrepo)@apiokresponse({type",{"_index":5205,"title":{},"body":{"controllers/UserRecommendationController.html":{}}}],["user'})@apibearerauth()@useguards(supabaseguard)@apinotfoundresponse({description",{"_index":4541,"title":{},"body":{"controllers/UserHighlightsController.html":{},"controllers/UserListController.html":{}}}],["user'})@apibearerauth()@useguards(supabaseguard)@apiokresponse({type",{"_index":545,"title":{},"body":{"controllers/AuthController.html":{},"controllers/InsightController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"controllers/UserNotificationController.html":{}}}],["user'})@apibearerauth()@useguards(supabaseguard)@apipaginatedresponse(dbusercollaboration)@apiokresponse({type",{"_index":4282,"title":{},"body":{"controllers/UserCollaborationController.html":{}}}],["user'})@apibody({type",{"_index":4486,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["user'})@apiokresponse({type",{"_index":572,"title":{},"body":{"controllers/AuthController.html":{}}}],["user.collaborations",{"_index":2167,"title":{},"body":{"entities/DbUserCollaboration.html":{}}}],["user.controller",{"_index":5112,"title":{},"body":{"modules/UserModule.html":{}}}],["user.dto",{"_index":625,"title":{},"body":{"controllers/AuthController.html":{}}}],["user.dto.ts",{"_index":4217,"title":{},"body":{"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:102",{"_index":4229,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts:11",{"_index":4234,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts:110",{"_index":4224,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts:19",{"_index":4227,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts:28",{"_index":4220,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts:37",{"_index":4246,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts:50",{"_index":4244,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts:59",{"_index":4222,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts:68",{"_index":4232,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts:77",{"_index":4226,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts:86",{"_index":4236,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts:94",{"_index":4231,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.entity",{"_index":2171,"title":{},"body":{"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserNotification.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserTopRepo.html":{},"controllers/UserController.html":{},"controllers/UserFollowingController.html":{},"modules/UserModule.html":{}}}],["user.from_user_notifications",{"_index":2329,"title":{},"body":{"entities/DbUserNotification.html":{}}}],["user.from_user_notifications)@joincolumn({name",{"_index":2305,"title":{},"body":{"entities/DbUserNotification.html":{}}}],["user.highlights",{"_index":2204,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["user.id",{"_index":4390,"title":{},"body":{"controllers/UserController.html":{},"controllers/UserFollowsController.html":{}}}],["user.insights",{"_index":1809,"title":{},"body":{"entities/DbInsight.html":{}}}],["user.interests?.split(\",\").filter(boolean",{"_index":5211,"title":{},"body":{"controllers/UserRecommendationController.html":{}}}],["user.lists",{"_index":2260,"title":{},"body":{"entities/DbUserList.html":{}}}],["user.organizations",{"_index":2343,"title":{},"body":{"entities/DbUserOrganization.html":{}}}],["user.organizations)@joincolumn({name",{"_index":2338,"title":{},"body":{"entities/DbUserOrganization.html":{}}}],["user.repotouserstargazers",{"_index":2045,"title":{},"body":{"entities/DbRepoToUserStargazers.html":{}}}],["user.repotouserstargazers)@joincolumn({name",{"_index":2041,"title":{},"body":{"entities/DbRepoToUserStargazers.html":{}}}],["user.repotouserstars",{"_index":2060,"title":{},"body":{"entities/DbRepoToUserStars.html":{}}}],["user.repotouserstars)@joincolumn({name",{"_index":2056,"title":{},"body":{"entities/DbRepoToUserStars.html":{}}}],["user.repotousersubmissions",{"_index":2078,"title":{},"body":{"entities/DbRepoToUserSubmissions.html":{}}}],["user.repotousersubmissions)@joincolumn({name",{"_index":2074,"title":{},"body":{"entities/DbRepoToUserSubmissions.html":{}}}],["user.repotouservotes",{"_index":2093,"title":{},"body":{"entities/DbRepoToUserVotes.html":{}}}],["user.repotouservotes)@joincolumn({name",{"_index":2089,"title":{},"body":{"entities/DbRepoToUserVotes.html":{}}}],["user.request_collaborations",{"_index":2162,"title":{},"body":{"entities/DbUserCollaboration.html":{}}}],["user.role",{"_index":4666,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["user.toprepos",{"_index":2371,"title":{},"body":{"entities/DbUserTopRepo.html":{}}}],["user.toprepos)@joincolumn({name",{"_index":2367,"title":{},"body":{"entities/DbUserTopRepo.html":{}}}],["user.user_list_contributors",{"_index":2283,"title":{},"body":{"entities/DbUserListContributor.html":{}}}],["user.user_list_contributors)@joincolumn({name",{"_index":2279,"title":{},"body":{"entities/DbUserListContributor.html":{}}}],["user/collaborations",{"_index":4267,"title":{},"body":{"controllers/UserCollaborationController.html":{}}}],["user/dtos/apply",{"_index":628,"title":{},"body":{"controllers/AuthController.html":{}}}],["user/dtos/contributor",{"_index":3407,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["user/dtos/update",{"_index":624,"title":{},"body":{"controllers/AuthController.html":{}}}],["user/endorsements",{"_index":4402,"title":{},"body":{"controllers/UserEndorsementController.html":{}}}],["user/entities/user",{"_index":394,"title":{},"body":{"modules/AppModule.html":{},"entities/DbEmoji.html":{},"classes/DbUserHighlightReactionResponse.html":{},"controllers/HighlightController.html":{},"modules/HighlightModule.html":{},"classes/HighlightOptionsDto.html":{},"controllers/UserListController.html":{},"modules/UserListModule.html":{},"injectables/UserListService.html":{}}}],["user/highlights",{"_index":4517,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["user/insights",{"_index":4711,"title":{},"body":{"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["user/notifications",{"_index":5119,"title":{},"body":{"controllers/UserNotificationController.html":{}}}],["user/recommendations",{"_index":5194,"title":{},"body":{"controllers/UserRecommendationController.html":{}}}],["user/services/user.service",{"_index":619,"title":{},"body":{"controllers/AuthController.html":{},"controllers/EndorsementController.html":{},"controllers/StripeWebhookController.html":{},"controllers/UserInsightMemberController.html":{}}}],["user/user",{"_index":2763,"title":{},"body":{"controllers/HighlightController.html":{}}}],["user/user.entity",{"_index":335,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/ContributionModule.html":{},"injectables/ContributionService.html":{},"entities/DbInsight.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"controllers/UserListController.html":{},"modules/UserListModule.html":{},"injectables/UserListService.html":{}}}],["user/user.module",{"_index":359,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/EndorsementModule.html":{},"modules/HighlightModule.html":{},"modules/InsightsModule.html":{},"modules/StripeWebHookModule.html":{},"modules/UserListModule.html":{}}}],["user_collaborations",{"_index":2172,"title":{},"body":{"entities/DbUserCollaboration.html":{}}}],["user_follows.user_id=users.id",{"_index":4446,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["user_follows_deleted_at",{"_index":4455,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["user_highlight_reactions",{"_index":2230,"title":{},"body":{"entities/DbUserHighlightReaction.html":{},"injectables/UserHighlightsService.html":{}}}],["user_highlight_reactions.user_id=users.id",{"_index":4693,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["user_highlights",{"_index":2208,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["user_highlights.created_at",{"_index":4665,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["user_highlights.user_id",{"_index":4652,"title":{},"body":{"injectables/UserHighlightsService.html":{},"injectables/UserListService.html":{}}}],["user_highlights.user_id=users.id",{"_index":4646,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["user_highlights_login",{"_index":4647,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["user_highlights_name",{"_index":4650,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["user_id",{"_index":1785,"title":{},"body":{"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserNotification.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"injectables/InsightsService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoService.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"controllers/StripeWebhookController.html":{},"injectables/SubmitService.html":{},"injectables/UserFollowService.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"injectables/UserListService.html":{},"injectables/UserNotificationService.html":{},"injectables/UserReposService.html":{},"injectables/VoteService.html":{}}}],["user_id=:userid",{"_index":4653,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["user_id=:userid)=0",{"_index":2993,"title":{},"body":{"injectables/InsightsService.html":{}}}],["user_list_contributor",{"_index":2271,"title":{},"body":{"entities/DbUserListContributor.html":{}}}],["user_list_contributors",{"_index":213,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"entities/DbContributionStatTimeframe.html":{},"entities/DbContributionsProjects.html":{},"entities/DbContributorCategoryTimeframe.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserListContributorStat.html":{},"entities/DbUserListContributorStat-1.html":{},"injectables/UserListService.html":{},"injectables/UserListStatsService.html":{}}}],["user_list_contributors\".\"user_id",{"_index":215,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["user_list_contributors.list_id='${listid",{"_index":155,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["user_list_contributors.user_id",{"_index":5024,"title":{},"body":{"injectables/UserListService.html":{}}}],["user_list_contributors.user_id=users.id",{"_index":86,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListService.html":{},"injectables/UserListStatsService.html":{}}}],["user_list_contributors_login",{"_index":5018,"title":{},"body":{"injectables/UserListService.html":{}}}],["user_lists",{"_index":2267,"title":{},"body":{"entities/DbUserList.html":{}}}],["user_lists.user_id=users.id",{"_index":4989,"title":{},"body":{"injectables/UserListService.html":{}}}],["user_lists_login",{"_index":4990,"title":{},"body":{"injectables/UserListService.html":{}}}],["user_login",{"_index":211,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["user_metadata",{"_index":654,"title":{},"body":{"controllers/AuthController.html":{}}}],["user_name",{"_index":657,"title":{},"body":{"controllers/AuthController.html":{},"classes/SupabaseAuthDto.html":{}}}],["user_notifications",{"_index":2326,"title":{},"body":{"entities/DbUserNotification.html":{}}}],["user_notifications.user_id=users.id",{"_index":5152,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["user_organizations",{"_index":2342,"title":{},"body":{"entities/DbUserOrganization.html":{}}}],["user_orgs",{"_index":3683,"title":{},"body":{"injectables/RepoService.html":{}}}],["user_orgs.login",{"_index":3687,"title":{},"body":{"injectables/RepoService.html":{}}}],["user_orgs.organization_id",{"_index":3684,"title":{},"body":{"injectables/RepoService.html":{}}}],["user_repos",{"_index":2349,"title":{},"body":{"entities/DbUserRepo.html":{}}}],["user_top_repos",{"_index":2370,"title":{},"body":{"entities/DbUserTopRepo.html":{}}}],["usercollaboration",{"_index":4309,"title":{},"body":{"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{}}}],["usercollaboration.user_id",{"_index":4310,"title":{},"body":{"controllers/UserCollaborationController.html":{}}}],["usercollaborationcontroller",{"_index":4264,"title":{"controllers/UserCollaborationController.html":{}},"body":{"controllers/UserCollaborationController.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["usercollaborationrepository",{"_index":4316,"title":{},"body":{"injectables/UserCollaborationService.html":{}}}],["usercollaborationservice",{"_index":4292,"title":{"injectables/UserCollaborationService.html":{}},"body":{"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"modules/UserModule.html":{},"coverage.html":{},"overview.html":{}}}],["usercontroller",{"_index":4335,"title":{"controllers/UserController.html":{}},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["userdata",{"_index":688,"title":{},"body":{"controllers/AuthController.html":{}}}],["userdetails",{"_index":4171,"title":{},"body":{"injectables/TierService.html":{}}}],["userendorsementcontroller",{"_index":4400,"title":{"controllers/UserEndorsementController.html":{}},"body":{"controllers/UserEndorsementController.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["userfollowingcontroller",{"_index":4463,"title":{"controllers/UserFollowingController.html":{}},"body":{"controllers/UserFollowingController.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["userfollowrepository",{"_index":4429,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["userfollowscontroller",{"_index":4474,"title":{"controllers/UserFollowsController.html":{}},"body":{"controllers/UserFollowsController.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["userfollowservice",{"_index":4419,"title":{"injectables/UserFollowService.html":{}},"body":{"injectables/UserFollowService.html":{},"controllers/UserFollowingController.html":{},"controllers/UserFollowsController.html":{},"injectables/UserHighlightsService.html":{},"modules/UserModule.html":{},"coverage.html":{},"overview.html":{}}}],["userhighlightreaction",{"_index":4593,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["userhighlightreactionrepository",{"_index":4611,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["userhighlightrepository",{"_index":4613,"title":{},"body":{"injectables/UserHighlightsService.html":{},"injectables/UserListService.html":{}}}],["userhighlightscontroller",{"_index":4515,"title":{"controllers/UserHighlightsController.html":{}},"body":{"controllers/UserHighlightsController.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["userhighlightsservice",{"_index":2762,"title":{"injectables/UserHighlightsService.html":{}},"body":{"controllers/HighlightController.html":{},"controllers/UserController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"modules/UserModule.html":{},"coverage.html":{},"overview.html":{}}}],["userid",{"_index":551,"title":{},"body":{"controllers/AuthController.html":{},"injectables/CustomerService.html":{},"injectables/EndorsementService.html":{},"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightsService.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeService.html":{},"controllers/StripeWebhookController.html":{},"injectables/SubmitService.html":{},"injectables/TierService.html":{},"classes/TopUsersDto.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserEndorsementController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"injectables/UserListService.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"injectables/UserOrganizationService.html":{},"controllers/UserRecommendationController.html":{},"injectables/UserReposService.html":{},"injectables/VoteService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["userinsightmembercontroller",{"_index":2954,"title":{"controllers/UserInsightMemberController.html":{}},"body":{"modules/InsightsModule.html":{},"controllers/UserInsightMemberController.html":{},"coverage.html":{}}}],["userinsightscontroller",{"_index":2953,"title":{"controllers/UserInsightsController.html":{}},"body":{"modules/InsightsModule.html":{},"controllers/UserInsightsController.html":{},"coverage.html":{}}}],["userinterests",{"_index":3669,"title":{},"body":{"injectables/RepoService.html":{}}}],["userinterests[interest",{"_index":3676,"title":{},"body":{"injectables/RepoService.html":{}}}],["userlistcontributorid",{"_index":4838,"title":{},"body":{"controllers/UserListController.html":{},"injectables/UserListService.html":{}}}],["userlistcontributorrepository",{"_index":66,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListService.html":{},"injectables/UserListStatsService.html":{}}}],["userlistcontributorstatsorderenum",{"_index":33,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"classes/UserListMostActiveContributorsDto.html":{},"injectables/UserListStatsService.html":{},"miscellaneous/enumerations.html":{}}}],["userlistcontributorstatsorderenum.commits",{"_index":4941,"title":{},"body":{"classes/UserListMostActiveContributorsDto.html":{}}}],["userlistcontributorstatstypeenum",{"_index":34,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"classes/ContributionsTimeframeDto.html":{},"classes/UserListMostActiveContributorsDto.html":{},"injectables/UserListStatsService.html":{},"miscellaneous/enumerations.html":{}}}],["userlistcontributorstatstypeenum.active",{"_index":111,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["userlistcontributorstatstypeenum.all",{"_index":109,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"classes/ContributionsTimeframeDto.html":{},"classes/UserListMostActiveContributorsDto.html":{},"injectables/UserListStatsService.html":{}}}],["userlistcontributorstatstypeenum.alumni",{"_index":115,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["userlistcontributorstatstypeenum.new",{"_index":113,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["userlistcontroller",{"_index":4816,"title":{"controllers/UserListController.html":{}},"body":{"controllers/UserListController.html":{},"modules/UserListModule.html":{},"coverage.html":{}}}],["userlistmodule",{"_index":282,"title":{"modules/UserListModule.html":{}},"body":{"modules/AppModule.html":{},"modules/UserListModule.html":{},"modules.html":{},"overview.html":{}}}],["userlistmostactivecontributorsdto",{"_index":35,"title":{"classes/UserListMostActiveContributorsDto.html":{}},"body":{"interfaces/AllContributionsCount.html":{},"classes/UserListMostActiveContributorsDto.html":{},"controllers/UserListStatsController.html":{},"injectables/UserListStatsService.html":{},"coverage.html":{}}}],["userlistrepository",{"_index":4960,"title":{},"body":{"injectables/UserListService.html":{}}}],["userlistservice",{"_index":4883,"title":{"injectables/UserListService.html":{}},"body":{"controllers/UserListController.html":{},"modules/UserListModule.html":{},"injectables/UserListService.html":{},"coverage.html":{},"overview.html":{}}}],["userliststatscontroller",{"_index":4934,"title":{"controllers/UserListStatsController.html":{}},"body":{"modules/UserListModule.html":{},"controllers/UserListStatsController.html":{},"coverage.html":{}}}],["userliststatsservice",{"_index":61,"title":{"injectables/UserListStatsService.html":{}},"body":{"interfaces/AllContributionsCount.html":{},"modules/UserListModule.html":{},"controllers/UserListStatsController.html":{},"injectables/UserListStatsService.html":{},"coverage.html":{},"overview.html":{}}}],["usermessage",{"_index":852,"title":{},"body":{"interfaces/ChatResponse.html":{},"injectables/OpenAiService.html":{}}}],["usermodule",{"_index":283,"title":{"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/EndorsementModule.html":{},"modules/HighlightModule.html":{},"modules/InsightsModule.html":{},"modules/StripeWebHookModule.html":{},"modules/UserListModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["username",{"_index":449,"title":{},"body":{"modules/AppModule.html":{},"classes/CreateUserCollaborationDto.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbPullRequestReview.html":{},"entities/DbUserListContributor.html":{},"controllers/EndorsementController.html":{},"classes/FilteredUsersDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"controllers/UserFollowingController.html":{},"controllers/UserFollowsController.html":{},"injectables/UserListService.html":{},"miscellaneous/variables.html":{}}}],["username'})@apinotfoundresponse({description",{"_index":4468,"title":{},"body":{"controllers/UserFollowingController.html":{},"controllers/UserFollowsController.html":{}}}],["username'})@apiokresponse({description",{"_index":4496,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["username'})@apiokresponse({type",{"_index":4366,"title":{},"body":{"controllers/UserController.html":{}}}],["username'})@apipaginatedresponse(dbpullrequest)@apiokresponse({type",{"_index":4360,"title":{},"body":{"controllers/UserController.html":{}}}],["usernames",{"_index":2239,"title":{},"body":{"classes/DbUserHighlightReactionResponse.html":{},"classes/FollowManyUsersDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/UpdateUserDto.html":{}}}],["usernotification",{"_index":5143,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["usernotification.from_user_id",{"_index":5166,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["usernotification.message",{"_index":5165,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["usernotification.meta_id",{"_index":5167,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["usernotification.type",{"_index":5163,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["usernotification.user_id",{"_index":5164,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["usernotificationcontroller",{"_index":5109,"title":{"controllers/UserNotificationController.html":{}},"body":{"modules/UserModule.html":{},"controllers/UserNotificationController.html":{},"coverage.html":{}}}],["usernotificationrepository",{"_index":5134,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["usernotificationservice",{"_index":4427,"title":{"injectables/UserNotificationService.html":{}},"body":{"injectables/UserFollowService.html":{},"injectables/UserHighlightsService.html":{},"modules/UserModule.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"coverage.html":{},"overview.html":{}}}],["usernotificationtypes",{"_index":2322,"title":{},"body":{"entities/DbUserNotification.html":{},"injectables/UserNotificationService.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["usernotificationtypes.follow",{"_index":5170,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["usernotificationtypes.highlightcreated",{"_index":5173,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["usernotificationtypes.highlightreaction",{"_index":5172,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["useronboardingdto",{"_index":578,"title":{"classes/UserOnboardingDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/UserOnboardingDto.html":{},"coverage.html":{}}}],["userorganizationrepository",{"_index":5185,"title":{},"body":{"injectables/UserOrganizationService.html":{}}}],["userorganizationservice",{"_index":4380,"title":{"injectables/UserOrganizationService.html":{}},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserOrganizationService.html":{},"coverage.html":{},"overview.html":{}}}],["userprofile",{"_index":658,"title":{},"body":{"controllers/AuthController.html":{}}}],["userprofile.email",{"_index":685,"title":{},"body":{"controllers/AuthController.html":{}}}],["userrecommendationcontroller",{"_index":5110,"title":{"controllers/UserRecommendationController.html":{}},"body":{"modules/UserModule.html":{},"controllers/UserRecommendationController.html":{},"coverage.html":{}}}],["userrelations",{"_index":3598,"title":{},"body":{"injectables/RepoService.html":{}}}],["userrelations?.map((relation",{"_index":3653,"title":{},"body":{"injectables/RepoService.html":{}}}],["userrepooptionsdto",{"_index":5216,"title":{"classes/UserRepoOptionsDto.html":{},"classes/UserRepoOptionsDto-1.html":{}},"body":{"classes/UserRepoOptionsDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"injectables/UserReposService.html":{},"classes/VotedRepoDto.html":{},"coverage.html":{}}}],["userreporepository",{"_index":5232,"title":{},"body":{"injectables/UserReposService.html":{}}}],["userrepository",{"_index":1115,"title":{},"body":{"injectables/ContributionService.html":{},"injectables/UserListService.html":{}}}],["userreposmodule",{"_index":284,"title":{"modules/UserReposModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UserReposModule.html":{},"modules.html":{},"overview.html":{}}}],["userreposservice",{"_index":5224,"title":{"injectables/UserReposService.html":{}},"body":{"modules/UserReposModule.html":{},"injectables/UserReposService.html":{},"coverage.html":{},"overview.html":{}}}],["userrole",{"_index":4027,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["users",{"_index":85,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"controllers/AuthController.html":{},"injectables/ContributionService.html":{},"classes/DbFilteredUser.html":{},"classes/DbUserHighlightReactionResponse.html":{},"injectables/EndorsementService.html":{},"classes/FilteredUsersDto.html":{},"classes/HighlightOptionsDto.html":{},"injectables/InsightMemberService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoService.html":{},"controllers/UserController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowingController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserListController.html":{},"injectables/UserListService.html":{},"injectables/UserListStatsService.html":{},"injectables/UserNotificationService.html":{},"index.html":{}}}],["users\".\"id",{"_index":216,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["users\".\"login",{"_index":96,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["users'})@apiokresponse({type",{"_index":4370,"title":{},"body":{"controllers/UserController.html":{}}}],["users.dto",{"_index":4377,"title":{},"body":{"controllers/UserController.html":{},"controllers/UserFollowsController.html":{}}}],["users.dto.ts",{"_index":2620,"title":{},"body":{"classes/FilteredUsersDto.html":{},"classes/FollowManyUsersDto.html":{},"classes/TopUsersDto.html":{},"coverage.html":{}}}],["users.dto.ts:13",{"_index":2630,"title":{},"body":{"classes/FollowManyUsersDto.html":{}}}],["users.dto.ts:15",{"_index":2622,"title":{},"body":{"classes/FilteredUsersDto.html":{},"classes/TopUsersDto.html":{}}}],["users.dto.ts:23",{"_index":2625,"title":{},"body":{"classes/FilteredUsersDto.html":{},"classes/TopUsersDto.html":{}}}],["users.dto.ts:36",{"_index":2621,"title":{},"body":{"classes/FilteredUsersDto.html":{},"classes/TopUsersDto.html":{}}}],["users.dto.ts:38",{"_index":2626,"title":{},"body":{"classes/FilteredUsersDto.html":{},"classes/TopUsersDto.html":{}}}],["users.entity",{"_index":4376,"title":{},"body":{"controllers/UserController.html":{}}}],["users.entity.ts",{"_index":1775,"title":{},"body":{"classes/DbFilteredUser.html":{},"classes/DbTopUser.html":{},"coverage.html":{}}}],["users.entity.ts:14",{"_index":1779,"title":{},"body":{"classes/DbFilteredUser.html":{}}}],["users.entity.ts:8",{"_index":1780,"title":{},"body":{"classes/DbFilteredUser.html":{},"classes/DbTopUser.html":{}}}],["users.id",{"_index":3685,"title":{},"body":{"injectables/RepoService.html":{}}}],["users.login",{"_index":1163,"title":{},"body":{"injectables/ContributionService.html":{}}}],["users.map(async",{"_index":4507,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["users.timezone",{"_index":5027,"title":{},"body":{"injectables/UserListService.html":{}}}],["users_to_repos_stargazers",{"_index":2044,"title":{},"body":{"entities/DbRepoToUserStargazers.html":{}}}],["users_to_repos_stars",{"_index":2059,"title":{},"body":{"entities/DbRepoToUserStars.html":{}}}],["users_to_repos_submissions",{"_index":2077,"title":{},"body":{"entities/DbRepoToUserSubmissions.html":{}}}],["users_to_repos_votes",{"_index":2092,"title":{},"body":{"entities/DbRepoToUserVotes.html":{}}}],["users_to_users_followers",{"_index":2360,"title":{},"body":{"entities/DbUserToUserFollows.html":{},"injectables/UserHighlightsService.html":{}}}],["userservice",{"_index":618,"title":{},"body":{"controllers/AuthController.html":{},"controllers/EndorsementController.html":{},"controllers/StripeWebhookController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowingController.html":{},"controllers/UserFollowsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"modules/UserModule.html":{},"injectables/UserNotificationService.html":{},"controllers/UserRecommendationController.html":{},"coverage.html":{},"overview.html":{}}}],["using",{"_index":1208,"title":{},"body":{"controllers/ContributorController.html":{},"controllers/PullRequestController.html":{},"controllers/RepoController.html":{},"injectables/RepoFilterService.html":{},"index.html":{}}}],["utc",{"_index":2601,"title":{},"body":{"classes/FilterListContributorsDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserOnboardingDto.html":{},"miscellaneous/variables.html":{}}}],["utc:hh:mm:ss.l",{"_index":488,"title":{},"body":{"modules/AppModule.html":{}}}],["utf8",{"_index":5771,"title":{},"body":{"miscellaneous/variables.html":{}}}],["util/cli",{"_index":2806,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{}}}],["utils",{"_index":3988,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["uuid",{"_index":1743,"title":{},"body":{"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsightMember.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"classes/PullRequestPageOptionsDto.html":{},"controllers/StripeWebhookController.html":{}}}],["v4",{"_index":1756,"title":{},"body":{"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsightMember.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"classes/PullRequestPageOptionsDto.html":{}}}],["v4'})@column",{"_index":2275,"title":{},"body":{"entities/DbUserListContributor.html":{}}}],["v4'})@column({type",{"_index":2218,"title":{},"body":{"entities/DbUserHighlightReaction.html":{}}}],["v4'})@isstring()@isoptional",{"_index":3345,"title":{},"body":{"classes/PullRequestPageOptionsDto.html":{}}}],["v4'})@primarycolumn()@primarygeneratedcolumn",{"_index":1827,"title":{},"body":{"entities/DbInsightMember.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{}}}],["v4'})@primarygeneratedcolumn",{"_index":1744,"title":{},"body":{"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbUserHighlightReaction.html":{}}}],["valid",{"_index":719,"title":{},"body":{"controllers/AuthController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"miscellaneous/variables.html":{}}}],["validate",{"_index":4136,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["validate(user",{"_index":4141,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["validatenested",{"_index":1182,"title":{},"body":{"classes/ContributionsPageDto.html":{},"classes/PageDto.html":{}}}],["validationpipe",{"_index":4881,"title":{},"body":{"controllers/UserListController.html":{}}}],["validator",{"_index":522,"title":{},"body":{"classes/ApplyUserCouponDto.html":{},"classes/BakeRepoDto.html":{},"classes/CollaboratorsDto.html":{},"classes/CommitAuthorDto.html":{},"classes/CommitsDto.html":{},"classes/ContributionPageOptionsDto.html":{},"classes/ContributionsByProjectDto.html":{},"classes/ContributionsPageDto.html":{},"classes/ContributionsTimeframeDto.html":{},"classes/Contributor.html":{},"classes/ContributorPullRequestsDto.html":{},"classes/CreateBlogSummaryDto.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateInsightDto.html":{},"classes/CreateInsightMemberDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/CreateLogDto.html":{},"classes/CreateUserCollaborationDto.html":{},"classes/CreateUserHighlightDto.html":{},"classes/CreateUserListDto.html":{},"classes/DbUserHighlightReactionResponse.html":{},"classes/FilterListContributorsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/FilteredUsersDto.html":{},"classes/FollowManyUsersDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/PageDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoInfo.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/TopProjectsDto.html":{},"classes/TopUsersDto.html":{},"classes/UpdateInsightMemberDto.html":{},"classes/UpdateUserCollaborationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"classes/UserListMostActiveContributorsDto.html":{},"classes/UserOnboardingDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"classes/VotedRepoDto.html":{}}}],["validresults",{"_index":4510,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["value",{"_index":1077,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/ContributionsByProjectDto.html":{},"classes/ContributionsTimeframeDto.html":{},"classes/ContributorPullRequestsDto.html":{},"classes/CreateUserHighlightDto.html":{},"entities/DbPullRequest.html":{},"classes/FilterListContributorsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/FilteredUsersDto.html":{},"classes/HighlightOptionsDto.html":{},"injectables/HttpLoggerMiddleware.html":{},"injectables/InsightMemberService.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"injectables/PullRequestInsightsService.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"injectables/RepoFilterService.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"injectables/TierService.html":{},"classes/TopProjectsDto.html":{},"classes/TopUsersDto.html":{},"classes/UserListMostActiveContributorsDto.html":{},"injectables/UserListStatsService.html":{},"classes/UserRepoOptionsDto.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["values",{"_index":5390,"title":{},"body":{"index.html":{}}}],["varchar",{"_index":2195,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["variable",{"_index":5288,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":5375,"title":{"miscellaneous/variables.html":{}},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["varying",{"_index":1576,"title":{},"body":{"entities/DbBakedRepo.html":{},"entities/DbCommitAuthors.html":{},"entities/DbCommits.html":{},"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserList.html":{},"entities/DbUserNotification.html":{}}}],["verbose",{"_index":1473,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["verbose(message",{"_index":1486,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["version",{"_index":5616,"title":{},"body":{"properties.html":{}}}],["versioningtype.uri",{"_index":5737,"title":{},"body":{"miscellaneous/variables.html":{}}}],["videos",{"_index":5541,"title":{},"body":{"index.html":{}}}],["view",{"_index":2829,"title":{},"body":{"controllers/InsightController.html":{},"classes/UpdateInsightMemberDto.html":{},"controllers/UserInsightMemberController.html":{},"injectables/UserListService.html":{}}}],["view'})@isstring()@isin(['view",{"_index":4206,"title":{},"body":{"classes/UpdateInsightMemberDto.html":{}}}],["virtual",{"_index":2231,"title":{},"body":{"entities/DbUserHighlightReaction.html":{}}}],["visibility",{"_index":1196,"title":{},"body":{"classes/Contributor.html":{},"classes/CreateInsightDto.html":{},"classes/CreateUserListDto.html":{},"entities/DbInsight.html":{},"entities/DbUserList.html":{},"classes/UpdateInsightDto.html":{}}}],["visit",{"_index":5373,"title":{},"body":{"index.html":{}}}],["visual",{"_index":5546,"title":{},"body":{"index.html":{}}}],["visualization",{"_index":5545,"title":{},"body":{"index.html":{}}}],["visualizer",{"_index":5549,"title":{},"body":{"index.html":{}}}],["vitest",{"_index":5481,"title":{},"body":{"index.html":{}}}],["void",{"_index":299,"title":{},"body":{"modules/AppModule.html":{},"classes/DatabaseLoggerMiddleware.html":{},"injectables/HttpLoggerMiddleware.html":{},"injectables/RepoFilterService.html":{},"injectables/SupabaseStrategy.html":{},"injectables/UserListStatsService.html":{}}}],["vortex",{"_index":1680,"title":{},"body":{"entities/DbContribution.html":{},"classes/SupabaseAuthDto.html":{},"properties.html":{}}}],["vortex'})@column({type",{"_index":1640,"title":{},"body":{"entities/DbContribution.html":{}}}],["vortex@opensauced.pizza",{"_index":4097,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["vote",{"_index":2081,"title":{},"body":{"entities/DbRepoToUserVotes.html":{},"controllers/RepoVoteController.html":{},"injectables/VoteService.html":{}}}],["vote'})@apiokresponse({description",{"_index":3822,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["vote'})@apiparam({name",{"_index":3824,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["vote.controller",{"_index":5249,"title":{},"body":{"modules/VoteModule.html":{}}}],["vote.controller.ts",{"_index":3813,"title":{},"body":{"controllers/RepoVoteController.html":{},"coverage.html":{}}}],["vote.controller.ts:117",{"_index":3825,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["vote.controller.ts:136",{"_index":3828,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["vote.controller.ts:37",{"_index":3832,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["vote.controller.ts:56",{"_index":3838,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["vote.controller.ts:74",{"_index":3841,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["vote.controller.ts:93",{"_index":3844,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["vote.service",{"_index":3848,"title":{},"body":{"controllers/RepoVoteController.html":{},"modules/VoteModule.html":{}}}],["vote/vote.module",{"_index":354,"title":{},"body":{"modules/AppModule.html":{}}}],["votebyrepoid",{"_index":5253,"title":{},"body":{"injectables/VoteService.html":{}}}],["votebyrepoid(repoid",{"_index":5263,"title":{},"body":{"injectables/VoteService.html":{}}}],["voted",{"_index":3831,"title":{},"body":{"controllers/RepoVoteController.html":{},"classes/UserRepoOptionsDto-1.html":{},"injectables/VoteService.html":{},"classes/VotedRepoDto.html":{}}}],["votedrepodto",{"_index":3836,"title":{"classes/VotedRepoDto.html":{}},"body":{"controllers/RepoVoteController.html":{},"classes/UserRepoOptionsDto-1.html":{},"classes/VotedRepoDto.html":{},"coverage.html":{}}}],["voteexists",{"_index":5267,"title":{},"body":{"injectables/VoteService.html":{}}}],["voteexists.deleted_at",{"_index":5269,"title":{},"body":{"injectables/VoteService.html":{}}}],["votemodule",{"_index":285,"title":{"modules/VoteModule.html":{}},"body":{"modules/AppModule.html":{},"modules/VoteModule.html":{},"modules.html":{},"overview.html":{}}}],["voteonebyid",{"_index":3818,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["voteonebyid(@param(\"id",{"_index":3854,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["voteonebyid(id",{"_index":3839,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["voteonebyownerandrepo",{"_index":3819,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["voteonebyownerandrepo(owner",{"_index":3842,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["votes",{"_index":3630,"title":{},"body":{"injectables/RepoService.html":{},"controllers/RepoVoteController.html":{}}}],["votescount",{"_index":3578,"title":{},"body":{"classes/RepoPageOptionsDto.html":{},"injectables/RepoService.html":{},"miscellaneous/enumerations.html":{}}}],["voteservice",{"_index":3847,"title":{"injectables/VoteService.html":{}},"body":{"controllers/RepoVoteController.html":{},"modules/VoteModule.html":{},"injectables/VoteService.html":{},"coverage.html":{},"overview.html":{}}}],["wait",{"_index":741,"title":{},"body":{"classes/BakeRepoDto.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"injectables/PizzaOvenService.html":{}}}],["waitlist",{"_index":587,"title":{},"body":{"controllers/AuthController.html":{}}}],["waitlisted",{"_index":4110,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["warn",{"_index":1474,"title":{},"body":{"injectables/CustomLogger.html":{},"classes/DatabaseLoggerMiddleware.html":{}}}],["warn(message",{"_index":1488,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["warranties",{"_index":5586,"title":{},"body":{"license.html":{}}}],["warranty",{"_index":5582,"title":{},"body":{"license.html":{}}}],["watch",{"_index":5459,"title":{},"body":{"index.html":{}}}],["watchers",{"_index":3575,"title":{},"body":{"classes/RepoPageOptionsDto.html":{},"miscellaneous/enumerations.html":{}}}],["watchman",{"_index":5463,"title":{},"body":{"index.html":{}}}],["web",{"_index":2669,"title":{},"body":{"controllers/HealthController.html":{}}}],["webhook.controller",{"_index":3974,"title":{},"body":{"modules/StripeWebHookModule.html":{}}}],["webhook.controller.ts",{"_index":3976,"title":{},"body":{"controllers/StripeWebhookController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["webhook.controller.ts:32",{"_index":3985,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["webhook.controller.ts:82",{"_index":3982,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["webhook/stripe",{"_index":3975,"title":{},"body":{"controllers/StripeWebhookController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["webhook/utils.ts",{"_index":5325,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["webhook/webhook.module",{"_index":377,"title":{},"body":{"modules/AppModule.html":{}}}],["webhook/webhook.module.ts",{"_index":3973,"title":{},"body":{"modules/StripeWebHookModule.html":{}}}],["webhooksecret",{"_index":4038,"title":{},"body":{"controllers/StripeWebhookController.html":{},"miscellaneous/variables.html":{}}}],["website",{"_index":4127,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["welcome",{"_index":2327,"title":{},"body":{"entities/DbUserNotification.html":{},"miscellaneous/enumerations.html":{}}}],["welcome'})@column({type",{"_index":2321,"title":{},"body":{"entities/DbUserNotification.html":{}}}],["where(\"endorsements.recipient_user_id",{"_index":2534,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["where(\"insight_members.insight_id",{"_index":2891,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["where(\"insights.id",{"_index":2981,"title":{},"body":{"injectables/InsightsService.html":{}}}],["where(\"insights.user_id",{"_index":2990,"title":{},"body":{"injectables/InsightsService.html":{}}}],["where(\"login",{"_index":1152,"title":{},"body":{"injectables/ContributionService.html":{}}}],["where(\"lower(repos.full_name",{"_index":2537,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["where(\"now",{"_index":5017,"title":{},"body":{"injectables/UserListService.html":{}}}],["where(\"r2stargazes.repo_id",{"_index":3909,"title":{},"body":{"injectables/StargazeService.html":{}}}],["where(\"r2votes.repo_id",{"_index":5274,"title":{},"body":{"injectables/VoteService.html":{}}}],["where(\"user_collaborations.user_id",{"_index":4333,"title":{},"body":{"injectables/UserCollaborationService.html":{}}}],["where(\"user_follows.following_user_id",{"_index":4447,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["where(\"user_follows.user_id",{"_index":4449,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["where(\"user_highlight_reactions.highlight_id",{"_index":4694,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["where(\"user_highlights.id",{"_index":4648,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["where(\"user_id",{"_index":5154,"title":{},"body":{"injectables/UserNotificationService.html":{},"injectables/UserOrganizationService.html":{}}}],["where(\"user_list_contributors.list_id",{"_index":5019,"title":{},"body":{"injectables/UserListService.html":{}}}],["where(\"user_lists.id",{"_index":4991,"title":{},"body":{"injectables/UserListService.html":{}}}],["where(\"user_orgs.user_id",{"_index":3688,"title":{},"body":{"injectables/RepoService.html":{}}}],["where(\"users.timezone",{"_index":5028,"title":{},"body":{"injectables/UserListService.html":{}}}],["where(`\"previous_month_prs\".\"author_login",{"_index":234,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["where(`\"user_list_contributors\".\"list_id",{"_index":217,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["where(`${aliastable}.${target}_id",{"_index":3619,"title":{},"body":{"injectables/RepoService.html":{}}}],["where(`'${startdate}'::timestamp",{"_index":4664,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["where(`(:topic",{"_index":3673,"title":{},"body":{"injectables/RepoService.html":{}}}],["where(`lower(\"pull_requests\".\"author_login\")=:contributor",{"_index":3417,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["where(`pr.\"updated_at",{"_index":221,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["where(`pull_requests.repo_id",{"_index":1164,"title":{},"body":{"injectables/ContributionService.html":{}}}],["where(`pull_requests.updated_at",{"_index":3440,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["whether",{"_index":2178,"title":{},"body":{"entities/DbUserHighlight.html":{},"classes/SupabaseAuthDto.html":{},"license.html":{}}}],["window",{"_index":5837,"title":{},"body":{"miscellaneous/variables.html":{}}}],["withdeleted",{"_index":4702,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["within",{"_index":5048,"title":{},"body":{"controllers/UserListStatsController.html":{}}}],["without",{"_index":1653,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbCoupon.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbPullRequestReview.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserNotification.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"license.html":{}}}],["workflow",{"_index":5550,"title":{},"body":{"index.html":{}}}],["write",{"_index":5474,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["writefile(path.resolve(process.cwd",{"_index":5769,"title":{},"body":{"miscellaneous/variables.html":{}}}],["writing",{"_index":5467,"title":{},"body":{"index.html":{}}}],["written",{"_index":814,"title":{},"body":{"injectables/BlogSummaryService.html":{},"injectables/CodeExplanationService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/IssueSummaryService.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["x",{"_index":5834,"title":{},"body":{"miscellaneous/variables.html":{}}}],["x509",{"_index":5410,"title":{},"body":{"index.html":{}}}],["xa",{"_index":1950,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["yaml",{"_index":5764,"title":{},"body":{"miscellaneous/variables.html":{}}}],["yaml.stringify(document",{"_index":5763,"title":{},"body":{"miscellaneous/variables.html":{}}}],["yamlswaggerdoc",{"_index":5762,"title":{},"body":{"miscellaneous/variables.html":{}}}],["year",{"_index":5779,"title":{},"body":{"miscellaneous/variables.html":{}}}],["years",{"_index":3302,"title":{},"body":{"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{}}}],["yes",{"_index":1121,"title":{},"body":{"injectables/ContributionService.html":{},"injectables/CustomLogger.html":{},"classes/DatabaseLoggerMiddleware.html":{},"injectables/RepoService.html":{},"injectables/StripeService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserListService.html":{}}}],["you'})@column({type",{"_index":2312,"title":{},"body":{"entities/DbUserNotification.html":{}}}],["your_api_domain",{"_index":5388,"title":{},"body":{"index.html":{}}}],["your_supabase_api_key",{"_index":5386,"title":{},"body":{"index.html":{}}}],["your_supabase_jwt_secret",{"_index":5387,"title":{},"body":{"index.html":{}}}],["your_supabase_url",{"_index":5385,"title":{},"body":{"index.html":{}}}],["youtube",{"_index":5543,"title":{},"body":{"index.html":{}}}],["yyyy",{"_index":3304,"title":{},"body":{"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoService.html":{}}}],["zone",{"_index":1654,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbCoupon.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbPullRequestReview.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserNotification.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{}}}],["zoom",{"_index":249,"title":{},"body":{"modules/ApiServicesModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/BlogSummaryModule.html":{},"modules/ContributionModule.html":{},"modules/ContributorModule.html":{},"modules/CouponModule.html":{},"modules/CustomerModule.html":{},"modules/EmojiModule.html":{},"modules/EndorsementModule.html":{},"modules/HighlightModule.html":{},"modules/InsightsModule.html":{},"modules/IssueSummaryModule.html":{},"modules/LogModule.html":{},"modules/OpenAiModule.html":{},"modules/PizzaOvenModule.html":{},"modules/PullRequestModule.html":{},"modules/RepoFilterModule.html":{},"modules/RepoModule.html":{},"modules/StarModule.html":{},"modules/StargazeModule.html":{},"modules/StripeModule.html":{},"modules/StripeSubscriptionModule.html":{},"modules/StripeWebHookModule.html":{},"modules/SubmitModule.html":{},"modules/TierModule.html":{},"modules/UserListModule.html":{},"modules/UserModule.html":{},"modules/UserReposModule.html":{},"modules/VoteModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"interfaces/AllContributionsCount.html":{"url":"interfaces/AllContributionsCount.html","title":"interface - AllContributionsCount","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  AllContributionsCount\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user-lists/user-list-stat.service.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            all_contributions\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        all_contributions\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        all_contributions:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable, NotFoundException } from \"@nestjs/common\";\nimport { Repository, SelectQueryBuilder } from \"typeorm\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\n\nimport { PageDto } from \"../common/dtos/page.dto\";\nimport { DbUserListContributor } from \"./entities/user-list-contributor.entity\";\nimport { DbUserListContributorStat } from \"./entities/user-list-contributor-stats.entity\";\nimport {\n  UserListContributorStatsOrderEnum,\n  UserListContributorStatsTypeEnum,\n  UserListMostActiveContributorsDto,\n} from \"./dtos/most-active-contributors.dto\";\nimport { ContributionsTimeframeDto } from \"./dtos/contributions-timeframe.dto\";\nimport { DbContributionStatTimeframe } from \"./entities/contributions-timeframe.entity\";\nimport { DbContributionsProjects } from \"./entities/contributions-projects.entity\";\nimport { DbContributorCategoryTimeframe } from \"./entities/contributors-timeframe.entity\";\nimport { ContributionPageMetaDto as ContributionsPageMetaDto } from \"./dtos/contributions-pagemeta.dto\";\nimport { ContributionsPageDto } from \"./dtos/contributions-page.dto\";\nimport { ContributionsByProjectDto } from \"./dtos/contributions-by-project.dto\";\nimport { TopProjectsDto } from \"./dtos/top-projects.dto\";\n\ninterface AllContributionsCount {\n  all_contributions: number;\n}\n\n@Injectable()\nexport class UserListStatsService {\n  constructor(\n    @InjectRepository(DbUserListContributor, \"ApiConnection\")\n    private userListContributorRepository: Repository\n  ) {}\n\n  baseQueryBuilder(): SelectQueryBuilder {\n    const builder = this.userListContributorRepository.createQueryBuilder(\"user_list_contributors\");\n\n    return builder;\n  }\n\n  async findListContributorStatsByProject(\n    options: TopProjectsDto,\n    listId: string\n  ): Promise {\n    const range = options.range!;\n    const repoId = options.repo_id;\n\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder.innerJoin(\"users\", \"users\", \"user_list_contributors.user_id=users.id\");\n\n    queryBuilder\n      .select(\"users.login\", \"login\")\n      .andWhere(\"user_list_contributors.list_id = :listId\", { listId })\n      .addSelect(\n        `(\n          SELECT COALESCE(SUM(\"pull_requests\".\"commits\"), 0)\n          FROM \"pull_requests\"\n          WHERE \"pull_requests\".\"author_login\" = \"users\".\"login\"\n            AND \"pull_requests\".\"repo_id\" = ${repoId}\n            AND now() - INTERVAL '${range} days' > {\n    const range = pageOptionsDto.range!;\n    const now = new Date().toISOString();\n\n    const cteBuilder = this.baseQueryBuilder();\n\n    cteBuilder.innerJoin(\"users\", \"users\", \"user_list_contributors.user_id=users.id\");\n\n    switch (pageOptionsDto.contributorType) {\n      case UserListContributorStatsTypeEnum.all:\n        break;\n\n      case UserListContributorStatsTypeEnum.active:\n        this.applyActiveContributorsFilter(cteBuilder, now, range);\n        break;\n\n      case UserListContributorStatsTypeEnum.new:\n        this.applyNewContributorsFilter(cteBuilder, now, range);\n        break;\n\n      case UserListContributorStatsTypeEnum.alumni: {\n        this.applyAlumniContributorsFilter(cteBuilder, now, range);\n        break;\n      }\n\n      default:\n        break;\n    }\n\n    cteBuilder\n      .select(\"users.login\", \"login\")\n      .andWhere(\"user_list_contributors.list_id = :listId\", { listId })\n      .addSelect(\n        `(\n          SELECT COALESCE(SUM(\"pull_requests\".\"commits\"), 0)\n          FROM \"pull_requests\"\n          WHERE \"pull_requests\".\"author_login\" = \"users\".\"login\"\n            AND now() - INTERVAL '${range} days' (),\n        new ContributionsPageMetaDto({ itemCount, pageOptionsDto }, 0)\n      );\n    }\n\n    const allContributionsCount = allContributionsResult.all_contributions;\n\n    cteBuilder.offset(pageOptionsDto.skip).limit(pageOptionsDto.limit);\n\n    const entities: DbUserListContributorStat[] = await entityQb.getRawMany();\n\n    const pageMetaDto = new ContributionsPageMetaDto({ itemCount, pageOptionsDto }, allContributionsCount);\n\n    return new ContributionsPageDto(entities, pageMetaDto);\n  }\n\n  async findContributorCategoriesByTimeframe(\n    options: ContributionsTimeframeDto,\n    listId: string\n  ): Promise {\n    const denominator = 82;\n    const range = options.range!;\n    const dates = this.getDateFrames(range, denominator);\n\n    const framePromises = dates.map(async (frameStartDate) =>\n      this.findContributorCategoriesInTimeframeHelper(frameStartDate.toISOString(), range / denominator, listId)\n    );\n\n    return Promise.all(framePromises);\n  }\n\n  async findContributionsInTimeframe(\n    options: ContributionsTimeframeDto,\n    listId: string\n  ): Promise {\n    const range = options.range!;\n    const contributorType = options.contributorType!;\n    const dates = this.getDateFrames(range);\n\n    const framePromises = dates.map(async (frameStartDate) =>\n      this.findContributionsInTimeframeHelper(frameStartDate.toISOString(), range / 7, contributorType, listId)\n    );\n\n    return Promise.all(framePromises);\n  }\n\n  getDateFrames(range = 30, denominator = 7): Date[] {\n    const currentDate = new Date();\n    const frameDuration = range / denominator;\n    const dates: Date[] = [];\n\n    // eslint-disable-next-line no-loops/no-loops\n    for (let i = 0; i  {\n    const subQueryBuilder = this.baseQueryBuilder();\n\n    subQueryBuilder.innerJoin(\n      \"users\",\n      \"users\",\n      `user_list_contributors.user_id=users.id AND user_list_contributors.list_id='${listId}'`\n    );\n\n    switch (contributorType) {\n      case UserListContributorStatsTypeEnum.all:\n        break;\n\n      case UserListContributorStatsTypeEnum.active:\n        this.applyActiveContributorsFilter(subQueryBuilder, startDate, range);\n        break;\n\n      case UserListContributorStatsTypeEnum.new:\n        this.applyNewContributorsFilter(subQueryBuilder, startDate, range);\n        break;\n\n      case UserListContributorStatsTypeEnum.alumni: {\n        this.applyAlumniContributorsFilter(subQueryBuilder, startDate, range);\n        break;\n      }\n\n      default:\n        break;\n    }\n\n    subQueryBuilder\n      .addSelect(\n        `(\n          SELECT COALESCE(SUM(\"pull_requests\".\"commits\"), 0)\n          FROM \"pull_requests\"\n          WHERE \"pull_requests\".\"author_login\" = \"users\".\"login\"\n            AND \"pull_requests\".\"updated_at\" > '${startDate}'::TIMESTAMP - INTERVAL '${range} days'\n            AND \"pull_requests\".\"updated_at\"  '${startDate}'::TIMESTAMP - INTERVAL '${range} days'\n            AND \"pull_requests\".\"updated_at\"  {\n    const activeCountQueryBuilder = this.baseQueryBuilder();\n\n    activeCountQueryBuilder.innerJoin(\n      \"users\",\n      \"users\",\n      `user_list_contributors.user_id=users.id AND user_list_contributors.list_id='${listId}'`\n    );\n\n    this.applyActiveContributorsFilter(activeCountQueryBuilder, startDate, range);\n\n    const activeCount = await activeCountQueryBuilder.getCount();\n\n    const newCountQueryBuilder = this.baseQueryBuilder();\n\n    newCountQueryBuilder.innerJoin(\n      \"users\",\n      \"users\",\n      `user_list_contributors.user_id=users.id AND user_list_contributors.list_id='${listId}'`\n    );\n\n    this.applyNewContributorsFilter(newCountQueryBuilder, startDate, range);\n\n    const newCount = await newCountQueryBuilder.getCount();\n\n    const alumniCountQueryBuilder = this.baseQueryBuilder();\n\n    alumniCountQueryBuilder.innerJoin(\n      \"users\",\n      \"users\",\n      `user_list_contributors.user_id=users.id AND user_list_contributors.list_id='${listId}'`\n    );\n\n    this.applyAlumniContributorsFilter(alumniCountQueryBuilder, startDate, range);\n\n    const alumniCount = await alumniCountQueryBuilder.getCount();\n\n    return {\n      time_start: startDate,\n      time_end: `${new Date(new Date(startDate).getTime() + range * 86400000).toISOString()}`,\n      active: activeCount,\n      new: newCount,\n      alumni: alumniCount,\n      all: activeCount + newCount + alumniCount,\n    };\n  }\n\n  async findContributionsByProject(\n    listId: string,\n    options: ContributionsByProjectDto\n  ): Promise {\n    const range = options.range!;\n\n    const queryBuilder = this.userListContributorRepository.manager\n      .createQueryBuilder()\n      .select(\"split_part(repos.full_name, '/', 1)\", \"org_id\")\n      .addSelect(\"split_part(repos.full_name, '/', 2)\", \"project_id\")\n      .addSelect(\"repos.id\", \"repo_id\")\n      .addSelect(\"COUNT(pr.id)\", \"contributions\")\n\n      // grab pull requests first\n      .from(\"pull_requests\", \"pr\")\n\n      // and join them with repos\n      .innerJoin(\"repos\", \"repos\", 'pr.\"repo_id\" = \"repos\".\"id\"')\n\n      // join with filtered users from the user list\n      .innerJoin(\n        (subQuery) =>\n          subQuery\n            .select(\"users.login\", \"user_login\")\n            .from(\"user_list_contributors\", \"user_list_contributors\")\n            .innerJoin(\"users\", \"users\", '\"user_list_contributors\".\"user_id\" = \"users\".\"id\"')\n            .where(`\"user_list_contributors\".\"list_id\" = '${listId}'`),\n        \"filtered_users\",\n        'pr.\"author_login\" = \"filtered_users\".\"user_login\"'\n      )\n\n      .where(`pr.\"updated_at\" BETWEEN NOW() - INTERVAL '${range} days' AND NOW()`)\n      .groupBy(\"repos.full_name, repos.id\");\n\n    const entities: DbContributionsProjects[] = await queryBuilder.getRawMany();\n\n    return entities;\n  }\n\n  private applyActiveContributorsFilter(\n    queryBuilder: SelectQueryBuilder,\n    startDate: string,\n    range = 30\n  ) {\n    queryBuilder\n      .leftJoin(\n        `(\n        SELECT DISTINCT \"author_login\"\n        FROM \"pull_requests\"\n        WHERE \"pull_requests\".\"updated_at\" BETWEEN '${startDate}'::TIMESTAMP - INTERVAL '${range} days'\n          AND '${startDate}'::TIMESTAMP\n      )`,\n        \"current_month_prs\",\n        `\"users\".\"login\" = \"current_month_prs\".\"author_login\"`\n      )\n      .leftJoin(\n        `(\n        SELECT DISTINCT \"author_login\"\n        FROM \"pull_requests\"\n        WHERE \"pull_requests\".\"updated_at\" BETWEEN '${startDate}'::TIMESTAMP - INTERVAL '${range + range} days'\n          AND '${startDate}'::TIMESTAMP - INTERVAL '${range} days'\n      )`,\n        \"previous_month_prs\",\n        `\"users\".\"login\" = \"previous_month_prs\".\"author_login\"`\n      )\n      .where(`\"previous_month_prs\".\"author_login\" IS NOT NULL`)\n      .andWhere(`\"current_month_prs\".\"author_login\" IS NOT NULL`);\n  }\n\n  private applyNewContributorsFilter(\n    queryBuilder: SelectQueryBuilder,\n    startDate: string,\n    range = 30\n  ) {\n    queryBuilder\n      .leftJoin(\n        `(\n            SELECT DISTINCT \"author_login\"\n            FROM \"pull_requests\"\n            WHERE \"pull_requests\".\"updated_at\" BETWEEN NOW() - INTERVAL '${range} days'\n              AND '${startDate}'::TIMESTAMP\n          )`,\n        \"current_month_prs\",\n        `\"users\".\"login\" = \"current_month_prs\".\"author_login\"`\n      )\n      .leftJoin(\n        `(\n            SELECT DISTINCT \"author_login\"\n            FROM \"pull_requests\"\n            WHERE \"pull_requests\".\"updated_at\" BETWEEN NOW() - INTERVAL '${range + range} days'\n              AND '${startDate}'::TIMESTAMP - INTERVAL '${range} days'\n          )`,\n        \"previous_month_prs\",\n        `\"users\".\"login\" = \"previous_month_prs\".\"author_login\"`\n      )\n      .where(`\"previous_month_prs\".\"author_login\" IS NULL`)\n      .andWhere(`\"current_month_prs\".\"author_login\" IS NOT NULL`);\n  }\n\n  private applyAlumniContributorsFilter(\n    queryBuilder: SelectQueryBuilder,\n    startDate: string,\n    range = 30\n  ) {\n    queryBuilder\n      .leftJoin(\n        `(\n            SELECT DISTINCT \"author_login\"\n            FROM \"pull_requests\"\n            WHERE \"pull_requests\".\"updated_at\" BETWEEN '${startDate}'::TIMESTAMP - INTERVAL '${range} days'\n              AND '${startDate}'::TIMESTAMP\n          )`,\n        \"current_month_prs\",\n        `\"users\".\"login\" = \"current_month_prs\".\"author_login\"`\n      )\n      .leftJoin(\n        `(\n            SELECT DISTINCT \"author_login\"\n            FROM \"pull_requests\"\n            WHERE \"pull_requests\".\"updated_at\" BETWEEN '${startDate}'::TIMESTAMP - INTERVAL '${range + range} days'\n              AND '${startDate}'::TIMESTAMP - INTERVAL '${range} days'\n          )`,\n        \"previous_month_prs\",\n        `\"users\".\"login\" = \"previous_month_prs\".\"author_login\"`\n      )\n      .where(`\"previous_month_prs\".\"author_login\" IS NOT NULL`)\n      .andWhere(`\"current_month_prs\".\"author_login\" IS NULL`);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ApiServicesModule.html":{"url":"modules/ApiServicesModule.html","title":"module - ApiServicesModule","body":"\n                   \n\n\n\n\n    Modules\n    ApiServicesModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_ApiServicesModule\n\n\n\ncluster_ApiServicesModule_providers\n\n\n\ncluster_ApiServicesModule_exports\n\n\n\n\nPagerService \n\nPagerService \n\n\n\nApiServicesModule\n\nApiServicesModule\n\nPagerService  -->\n\nApiServicesModule->PagerService \n\n\n\n\n\nPagerService\n\nPagerService\n\nApiServicesModule -->\n\nPagerService->ApiServicesModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/common/services/api-services.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PagerService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            PagerService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { PagerService } from \"./pager.service\";\n\n@Module({\n  providers: [PagerService],\n  exports: [PagerService],\n})\nexport class ApiServicesModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nBlogSummaryModule\n\nBlogSummaryModule\n\nAppModule -->\n\nBlogSummaryModule->AppModule\n\n\n\n\n\nContributionModule\n\nContributionModule\n\nAppModule -->\n\nContributionModule->AppModule\n\n\n\n\n\nContributorModule\n\nContributorModule\n\nAppModule -->\n\nContributorModule->AppModule\n\n\n\n\n\nCouponModule\n\nCouponModule\n\nAppModule -->\n\nCouponModule->AppModule\n\n\n\n\n\nCustomerModule\n\nCustomerModule\n\nAppModule -->\n\nCustomerModule->AppModule\n\n\n\n\n\nEmojiModule\n\nEmojiModule\n\nAppModule -->\n\nEmojiModule->AppModule\n\n\n\n\n\nEndorsementModule\n\nEndorsementModule\n\nAppModule -->\n\nEndorsementModule->AppModule\n\n\n\n\n\nHealthModule\n\nHealthModule\n\nAppModule -->\n\nHealthModule->AppModule\n\n\n\n\n\nHighlightModule\n\nHighlightModule\n\nAppModule -->\n\nHighlightModule->AppModule\n\n\n\n\n\nInsightsModule\n\nInsightsModule\n\nAppModule -->\n\nInsightsModule->AppModule\n\n\n\n\n\nIssueSummaryModule\n\nIssueSummaryModule\n\nAppModule -->\n\nIssueSummaryModule->AppModule\n\n\n\n\n\nLogModule\n\nLogModule\n\nAppModule -->\n\nLogModule->AppModule\n\n\n\n\n\nOpenAiModule\n\nOpenAiModule\n\nAppModule -->\n\nOpenAiModule->AppModule\n\n\n\n\n\nPizzaOvenModule\n\nPizzaOvenModule\n\nAppModule -->\n\nPizzaOvenModule->AppModule\n\n\n\n\n\nPullRequestModule\n\nPullRequestModule\n\nAppModule -->\n\nPullRequestModule->AppModule\n\n\n\n\n\nRepoModule\n\nRepoModule\n\nAppModule -->\n\nRepoModule->AppModule\n\n\n\n\n\nStarModule\n\nStarModule\n\nAppModule -->\n\nStarModule->AppModule\n\n\n\n\n\nStargazeModule\n\nStargazeModule\n\nAppModule -->\n\nStargazeModule->AppModule\n\n\n\n\n\nStripeSubscriptionModule\n\nStripeSubscriptionModule\n\nAppModule -->\n\nStripeSubscriptionModule->AppModule\n\n\n\n\n\nStripeWebHookModule\n\nStripeWebHookModule\n\nAppModule -->\n\nStripeWebHookModule->AppModule\n\n\n\n\n\nSubmitModule\n\nSubmitModule\n\nAppModule -->\n\nSubmitModule->AppModule\n\n\n\n\n\nUserListModule\n\nUserListModule\n\nAppModule -->\n\nUserListModule->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nUserReposModule\n\nUserReposModule\n\nAppModule -->\n\nUserReposModule->AppModule\n\n\n\n\n\nVoteModule\n\nVoteModule\n\nAppModule -->\n\nVoteModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            BlogSummaryModule\n                        \n                        \n                            ContributionModule\n                        \n                        \n                            ContributorModule\n                        \n                        \n                            CouponModule\n                        \n                        \n                            CustomerModule\n                        \n                        \n                            EmojiModule\n                        \n                        \n                            EndorsementModule\n                        \n                        \n                            HealthModule\n                        \n                        \n                            HighlightModule\n                        \n                        \n                            InsightsModule\n                        \n                        \n                            IssueSummaryModule\n                        \n                        \n                            LogModule\n                        \n                        \n                            OpenAiModule\n                        \n                        \n                            PizzaOvenModule\n                        \n                        \n                            PullRequestModule\n                        \n                        \n                            RepoModule\n                        \n                        \n                            StarModule\n                        \n                        \n                            StargazeModule\n                        \n                        \n                            StripeSubscriptionModule\n                        \n                        \n                            StripeWebHookModule\n                        \n                        \n                            SubmitModule\n                        \n                        \n                            UserListModule\n                        \n                        \n                            UserModule\n                        \n                        \n                            UserReposModule\n                        \n                        \n                            VoteModule\n                        \n                    \n                \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        configure\n                        \n                    \n                \n            \n            \n                \nconfigure(consumer: MiddlewareConsumer)\n                \n            \n\n\n            \n                \n                    Defined in src/app.module.ts:242\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    consumer\n                                    \n                                            MiddlewareConsumer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n\n\n    \n        import { MiddlewareConsumer, Module, RequestMethod } from \"@nestjs/common\";\nimport { InjectDataSource, TypeOrmModule } from \"@nestjs/typeorm\";\nimport { ConfigModule, ConfigService } from \"@nestjs/config\";\nimport { HttpModule } from \"@nestjs/axios\";\nimport { TerminusModule } from \"@nestjs/terminus\";\nimport { LoggerModule } from \"nestjs-pino\";\nimport { DataSource } from \"typeorm\";\nimport { TypeOrmModuleOptions } from \"@nestjs/typeorm/dist/interfaces/typeorm-options.interface\";\nimport { clc } from \"@nestjs/common/utils/cli-colors.util\";\n\nimport {\n  ApiConfig,\n  DbApiConfig,\n  DbLoggingConfig,\n  EndpointConfig,\n  StripeConfig,\n  OpenAIConfig,\n  PizzaConfig,\n  HacktoberfestConfig,\n  TierConfig,\n} from \"./config\";\nimport { RepoModule } from \"./repo/repo.module\";\nimport { HealthModule } from \"./health/health.module\";\nimport { DbRepo } from \"./repo/entities/repo.entity\";\nimport { DbUser } from \"./user/user.entity\";\nimport { DbContribution } from \"./contribution/contribution.entity\";\nimport { DbRepoToUserVotes } from \"./repo/entities/repo.to.user.votes.entity\";\nimport { DbRepoToUserStars } from \"./repo/entities/repo.to.user.stars.entity\";\nimport { DbRepoToUserSubmissions } from \"./repo/entities/repo.to.user.submissions.entity\";\nimport { DbRepoToUserStargazers } from \"./repo/entities/repo.to.user.stargazers.entity\";\nimport { DbBakedRepo } from \"./pizza/entities/baked-repo.entity\";\nimport { DbCommitAuthors } from \"./pizza/entities/commit_authors.entity\";\nimport { DbCommits } from \"./pizza/entities/commits.entity\";\nimport { AuthModule } from \"./auth/auth.module\";\nimport { VoteModule } from \"./vote/vote.module\";\nimport { StarModule } from \"./star/star.module\";\nimport { StargazeModule } from \"./stargaze/stargaze.module\";\nimport { SubmitModule } from \"./submit/submit.module\";\nimport { ContributionModule } from \"./contribution/contribution.module\";\nimport { UserModule } from \"./user/user.module\";\nimport { HttpLoggerMiddleware } from \"./common/middleware/http-logger.middleware\";\nimport { DatabaseLoggerMiddleware } from \"./common/middleware/database-logger.middleware\";\nimport { InsightsModule } from \"./insight/insights.module\";\nimport { DbInsight } from \"./insight/entities/insight.entity\";\nimport { DbInsightRepo } from \"./insight/entities/insight-repo.entity\";\nimport { UserReposModule } from \"./user-repo/user-repos.module\";\nimport { DbUserRepo } from \"./user-repo/user-repo.entity\";\nimport { DbCustomer } from \"./customer/customer.entity\";\nimport { CustomerModule } from \"./customer/customer.module\";\nimport { StripeWebHookModule } from \"./stripe-webhook/webhook.module\";\nimport { EmojiModule } from \"./emoji/emoji.module\";\nimport { StripeSubscriptionModule } from \"./subscription/stripe-subscription.module\";\nimport { DbSubscription } from \"./subscription/stripe-subscription.dto\";\nimport { DbLog } from \"./log/log.entity\";\nimport { PullRequestModule } from \"./pull-requests/pull-request.module\";\nimport { DbPullRequest } from \"./pull-requests/entities/pull-request.entity\";\nimport { DbPullRequestReview } from \"./pull-requests/entities/pull-request-review.entity\";\nimport { DbUserHighlight } from \"./user/entities/user-highlight.entity\";\nimport { HighlightModule } from \"./highlight/highlight.module\";\nimport { DbUserToUserFollows } from \"./user/entities/user-follows.entity\";\nimport { DbInsightMember } from \"./insight/entities/insight-member.entity\";\nimport { DbEmoji } from \"./emoji/entities/emoji.entity\";\nimport { DbUserHighlightReaction } from \"./user/entities/user-highlight-reaction.entity\";\nimport { DbPRInsight } from \"./pull-requests/entities/pull-request-insight.entity\";\nimport { DbUserTopRepo } from \"./user/entities/user-top-repo.entity\";\nimport { DbUserNotification } from \"./user/entities/user-notification.entity\";\nimport { DbUserCollaboration } from \"./user/entities/user-collaboration.entity\";\nimport { DbUserOrganization } from \"./user/entities/user-organization.entity\";\nimport { EndorsementModule } from \"./endorsement/endorsement.module\";\nimport { DbEndorsement } from \"./endorsement/entities/endorsement.entity\";\nimport { ContributorModule } from \"./contributor/contributor.module\";\nimport { OpenAiModule } from \"./open-ai/open-ai.module\";\nimport { IssueSummaryModule } from \"./issues/issue-summary.module\";\nimport { BlogSummaryModule } from \"./blogs/issue-summary.module\";\nimport { PizzaOvenModule } from \"./pizza/pizza-oven.module\";\nimport { UserListModule } from \"./user-lists/user-list.module\";\nimport { CouponModule } from \"./coupon/coupon.module\";\nimport { DbUserList } from \"./user-lists/entities/user-list.entity\";\nimport { DbUserListContributor } from \"./user-lists/entities/user-list-contributor.entity\";\nimport { DbCoupon } from \"./coupon/entities/coupon.entity\";\nimport { LogModule } from \"./log/log.module\";\n\n@Module({\n  imports: [\n    ConfigModule.forRoot({\n      load: [\n        ApiConfig,\n        DbApiConfig,\n        DbLoggingConfig,\n        EndpointConfig,\n        StripeConfig,\n        OpenAIConfig,\n        PizzaConfig,\n        HacktoberfestConfig,\n        TierConfig,\n      ],\n      isGlobal: true,\n    }),\n    TypeOrmModule.forRootAsync({\n      imports: [ConfigModule],\n      name: \"ApiConnection\",\n      useFactory: (configService: ConfigService) =>\n        ({\n          parseInt8: true,\n          type: configService.get(\"db-api.connection\"),\n          host: configService.get(\"db-api.host\"),\n          port: configService.get(\"db-api.port\"),\n          username: configService.get(\"db-api.username\"),\n          password: configService.get(\"db-api.password\"),\n          database: configService.get(\"db-api.database\"),\n          autoLoadEntities: false,\n          entities: [\n            DbUser,\n            DbUserRepo,\n            DbUserHighlight,\n            DbUserHighlightReaction,\n            DbUserNotification,\n            DbUserCollaboration,\n            DbRepo,\n            DbContribution,\n            DbRepoToUserVotes,\n            DbRepoToUserStars,\n            DbRepoToUserSubmissions,\n            DbRepoToUserStargazers,\n            DbInsight,\n            DbInsightMember,\n            DbInsightRepo,\n            DbCustomer,\n            DbSubscription,\n            DbPullRequest,\n            DbPullRequestReview,\n            DbPRInsight,\n            DbUserToUserFollows,\n            DbEmoji,\n            DbUserTopRepo,\n            DbEndorsement,\n            DbBakedRepo,\n            DbCommitAuthors,\n            DbCommits,\n            DbUserOrganization,\n            DbUserList,\n            DbUserListContributor,\n            DbCoupon,\n          ],\n          synchronize: false,\n          logger: new DatabaseLoggerMiddleware(\"OS\"),\n          ssl: {\n            ca: configService.get(\"db-api.certificate\"),\n            rejectUnauthorized: false,\n          },\n          maxQueryExecutionTime: configService.get(\"db-api.maxQueryExecutionTime\"),\n        } as TypeOrmModuleOptions),\n      inject: [ConfigService],\n    }),\n    TypeOrmModule.forRootAsync({\n      imports: [ConfigModule],\n      name: \"LogConnection\",\n      useFactory: (configService: ConfigService) =>\n        ({\n          parseInt8: true,\n          type: configService.get(\"db-logging.connection\"),\n          host: configService.get(\"db-logging.host\"),\n          port: configService.get(\"db-logging.port\"),\n          username: configService.get(\"db-logging.username\"),\n          password: configService.get(\"db-logging.password\"),\n          database: configService.get(\"db-logging.database\"),\n          autoLoadEntities: false,\n          entities: [DbLog],\n          synchronize: false,\n          logger: new DatabaseLoggerMiddleware(\"LG\"),\n          ssl: {\n            ca: configService.get(\"db-logging.certificate\"),\n            rejectUnauthorized: false,\n          },\n          maxQueryExecutionTime: configService.get(\"db-logging.maxQueryExecutionTime\"),\n        } as TypeOrmModuleOptions),\n      inject: [ConfigService],\n    }),\n    LoggerModule.forRootAsync({\n      imports: [ConfigModule],\n      inject: [ConfigService],\n      useFactory: (config: ConfigService) => ({\n        pinoHttp: {\n          name: `os.${String(config.get(\"api.codename\")).toLowerCase()}`,\n          level: config.get(\"api.logging\"),\n          transport: {\n            target: \"pino-pretty\",\n            options: {\n              colorize: true,\n              levelFirst: true,\n              translateTime: \"UTC:hh:MM:ss.l\",\n              singleLine: true,\n              messageFormat: `${clc.yellow(`[{context}]`)} ${clc.green(`{msg}`)}`,\n              ignore: \"pid,hostname,context\",\n            },\n          },\n          customProps: () => ({ context: \"HTTP\" }),\n        },\n        exclude: [{ method: RequestMethod.ALL, path: \"check\" }],\n      }),\n    }),\n    TerminusModule,\n    HttpModule,\n    AuthModule,\n    HealthModule,\n    RepoModule,\n    VoteModule,\n    StarModule,\n    StargazeModule,\n    SubmitModule,\n    ContributionModule,\n    UserModule,\n    InsightsModule,\n    IssueSummaryModule,\n    BlogSummaryModule,\n    UserReposModule,\n    CustomerModule,\n    StripeWebHookModule,\n    StripeSubscriptionModule,\n    PullRequestModule,\n    HighlightModule,\n    EmojiModule,\n    EndorsementModule,\n    ContributorModule,\n    OpenAiModule,\n    PizzaOvenModule,\n    UserListModule,\n    CouponModule,\n    LogModule,\n  ],\n  providers: [],\n})\nexport class AppModule {\n  constructor(\n    @InjectDataSource(\"ApiConnection\")\n    private readonly apiConnection: DataSource,\n\n    @InjectDataSource(\"LogConnection\")\n    private readonly logConnection: DataSource\n  ) {}\n\n  configure(consumer: MiddlewareConsumer) {\n    consumer.apply(HttpLoggerMiddleware).forRoutes(`v1`);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ApplyUserCouponDto.html":{"url":"classes/ApplyUserCouponDto.html","title":"class - ApplyUserCouponDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ApplyUserCouponDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dtos/apply-user-coupon.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                couponCode\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        couponCode\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Coupon Code', type: String, example: 'saucy'})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/apply-user-coupon.dto.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsString } from \"class-validator\";\n\nexport class ApplyUserCouponDto {\n  @ApiProperty({\n    description: \"Coupon Code\",\n    type: String,\n    example: \"saucy\",\n  })\n  @IsString()\n  couponCode: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                applyCouponForUser\n                            \n                            \n                                    Async\n                                deleteUserAccount\n                            \n                            \n                                    Async\n                                getSession\n                            \n                            \n                                    Async\n                                postCreateCheckoutSession\n                            \n                            \n                                    Async\n                                postOnboarding\n                            \n                            \n                                    Async\n                                postWaitlist\n                            \n                            \n                                    Async\n                                updateEmailPreferencesForUserProfile\n                            \n                            \n                                    Async\n                                updateInterestsForUserProfile\n                            \n                            \n                                    Async\n                                updateProfileForUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        applyCouponForUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    applyCouponForUser(userId: number, applyUserCouponDto: ApplyUserCouponDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch('/profile/coupon')@ApiOperation({operationId: 'applyCouponForUser', summary: 'Applies a coupon for the authenticated user'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOkResponse({type: DbUser})@ApiNotFoundResponse({description: 'Unable to apply coupon for the user profile'})@ApiBody({type: ApplyUserCouponDto})\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:232\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    applyUserCouponDto\n                                    \n                                                ApplyUserCouponDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteUserAccount\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteUserAccount(userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/profile')@ApiOperation({operationId: 'deleteUserAccount', summary: 'Deletes the authenticated user's account'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOkResponse({type: DbUser})@ApiNotFoundResponse({description: 'Unable to delete user account'})\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:250\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getSession\n                        \n                    \n                \n            \n            \n                \n                    \n                    getSession(user: SupabaseAuthUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/session')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'checkAuthSession', summary: 'Get authenticated session information'})@ApiOkResponse({type: SupabaseAuthDto})@HttpCode(HttpStatus.OK)\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:37\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                SupabaseAuthUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        postCreateCheckoutSession\n                        \n                    \n                \n            \n            \n                \n                    \n                    postCreateCheckoutSession(user: SupabaseAuthUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/checkout/session')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'postCreateCheckoutSession', summary: 'Creates a new checkout session for the user'})@ApiOkResponse({type: SupabaseAuthDto})@ApiNotFoundResponse({description: 'Unable to create checkout session'})\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:149\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                SupabaseAuthUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        postOnboarding\n                        \n                    \n                \n            \n            \n                \n                    \n                    postOnboarding(userId: number, body: UserOnboardingDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/onboarding')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'postOnboarding', summary: 'Updates onboarding information for user'})@ApiOkResponse({type: SupabaseAuthDto})@ApiNotFoundResponse({description: 'Unable to update onboarding information for the user'})\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:118\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    body\n                                    \n                                                UserOnboardingDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        postWaitlist\n                        \n                    \n                \n            \n            \n                \n                    \n                    postWaitlist(userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/waitlist')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'postWaitlist', summary: 'Updates waitlist information for user'})@ApiOkResponse({type: SupabaseAuthDto})@ApiNotFoundResponse({description: 'Unable to update waitlist information for the user'})\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:136\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateEmailPreferencesForUserProfile\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateEmailPreferencesForUserProfile(userId: number, updateUserDto: UpdateUserEmailPreferencesDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch('/profile/email')@ApiOperation({operationId: 'updateEmailPreferencesForUserProfile', summary: 'Updates the email preferences for the authenticated user profile'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOkResponse({type: DbUser})@ApiNotFoundResponse({description: 'Unable to update email preferences for the user profile'})@ApiBody({type: UpdateUserEmailPreferencesDto})\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:213\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateUserDto\n                                    \n                                                UpdateUserEmailPreferencesDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateInterestsForUserProfile\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateInterestsForUserProfile(userId: number, updateUserDto: UpdateUserProfileInterestsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch('/profile/interests')@ApiOperation({operationId: 'updateInterestsForUserProfile', summary: 'Updates the interests for the authenticated user profile'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOkResponse({type: DbUser})@ApiNotFoundResponse({description: 'Unable to update interests for the user profile'})@ApiBody({type: UpdateUserProfileInterestsDto})\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:194\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateUserDto\n                                    \n                                                UpdateUserProfileInterestsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateProfileForUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateProfileForUser(userId: number, updateUserDto: UpdateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch('/profile')@ApiOperation({operationId: 'updateProfileForUser', summary: 'Updates the profile for the authenticated user'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOkResponse({type: DbUser})@ApiNotFoundResponse({description: 'Unable to update user profile'})@ApiBody({type: UpdateUserDto})\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:180\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateUserDto\n                                    \n                                                UpdateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Delete, Get, HttpCode, HttpStatus, Patch, Post, UseGuards } from \"@nestjs/common\";\nimport { ApiBearerAuth, ApiBody, ApiNotFoundResponse, ApiOkResponse, ApiOperation, ApiTags } from \"@nestjs/swagger\";\nimport { SupabaseAuthUser } from \"nestjs-supabase-auth\";\nimport { UserService } from \"../user/services/user.service\";\nimport { StripeService } from \"../stripe/stripe.service\";\nimport { CustomerService } from \"../customer/customer.service\";\nimport { DbUser } from \"../user/user.entity\";\nimport { UpdateUserDto } from \"../user/dtos/update-user.dto\";\nimport { UpdateUserEmailPreferencesDto } from \"../user/dtos/update-user-email-prefs.dto\";\nimport { UpdateUserProfileInterestsDto } from \"../user/dtos/update-user-interests.dto\";\nimport { ApplyUserCouponDto } from \"../user/dtos/apply-user-coupon.dto\";\nimport { CouponService } from \"../coupon/coupon.service\";\nimport { SupabaseAuthDto } from \"./dtos/supabase-auth-response.dto\";\nimport { User, UserId } from \"./supabase.user.decorator\";\nimport { SupabaseGuard } from \"./supabase.guard\";\nimport { UserOnboardingDto } from \"./dtos/user-onboarding.dto\";\n\n@Controller(\"auth\")\n@ApiTags(\"Authentication service\")\nexport class AuthController {\n  constructor(\n    private userService: UserService,\n    private stripeService: StripeService,\n    private customerService: CustomerService,\n    private couponService: CouponService\n  ) {}\n\n  @Get(\"/session\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"checkAuthSession\",\n    summary: \"Get authenticated session information\",\n  })\n  @ApiOkResponse({ type: SupabaseAuthDto })\n  @HttpCode(HttpStatus.OK)\n  async getSession(@User() user: SupabaseAuthUser): Promise {\n    const {\n      role,\n      email: session_email,\n      confirmed_at,\n      last_sign_in_at,\n      created_at,\n      updated_at,\n      user_metadata: { sub: id, user_name },\n    } = user;\n\n    let userProfile: Partial = {};\n\n    // check/insert user\n    try {\n      // get user from public users table\n      const {\n        is_onboarded,\n        is_waitlisted,\n        role: insights_role,\n        name,\n        bio,\n        location,\n        twitter_username,\n        company,\n        display_local_time,\n        url,\n        email,\n        github_sponsors_url,\n        linkedin_url,\n        discord_url,\n        notification_count,\n        coupon_code,\n        insights_count,\n      } = await this.userService.checkAddUser(user);\n\n      userProfile = {\n        is_onboarded,\n        insights_role,\n        is_waitlisted,\n        name,\n        location,\n        bio,\n        twitter_username,\n        company,\n        display_local_time,\n        url,\n        email,\n        github_sponsors_url,\n        linkedin_url,\n        discord_url,\n        notification_count,\n        coupon_code,\n        insights_count,\n      };\n    } catch (e) {\n      // leave user profile as-is\n    }\n\n    return {\n      id: `${String(id)}`,\n      user_name: `${String(user_name)}`,\n      role,\n      email: userProfile.email ?? session_email,\n      confirmed_at,\n      last_sign_in_at,\n      created_at,\n      updated_at,\n      ...userProfile,\n    };\n  }\n\n  @Post(\"/onboarding\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"postOnboarding\",\n    summary: \"Updates onboarding information for user\",\n  })\n  @ApiOkResponse({ type: SupabaseAuthDto })\n  @ApiNotFoundResponse({ description: \"Unable to update onboarding information for the user\" })\n  async postOnboarding(@UserId() userId: number, @Body() body: UserOnboardingDto): Promise {\n    const userData = {\n      timezone: body.timezone,\n      interests: body.interests,\n    };\n\n    return this.userService.updateOnboarding(userId, userData);\n  }\n\n  @Post(\"/waitlist\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"postWaitlist\",\n    summary: \"Updates waitlist information for user\",\n  })\n  @ApiOkResponse({ type: SupabaseAuthDto })\n  @ApiNotFoundResponse({ description: \"Unable to update waitlist information for the user\" })\n  async postWaitlist(@UserId() userId: number): Promise {\n    return this.userService.updateWaitlistStatus(userId);\n  }\n\n  @Post(\"/checkout/session\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"postCreateCheckoutSession\",\n    summary: \"Creates a new checkout session for the user\",\n  })\n  @ApiOkResponse({ type: SupabaseAuthDto })\n  @ApiNotFoundResponse({ description: \"Unable to create checkout session\" })\n  async postCreateCheckoutSession(@User() user: SupabaseAuthUser): Promise {\n    const {\n      email,\n      user_metadata: { sub },\n    } = user;\n    const id = sub as number;\n    const customer = await this.customerService.findById(id);\n    let customerId: string;\n\n    if (customer) {\n      customerId = customer.stripe_customer_id;\n    } else {\n      const stripeCustomer = await this.stripeService.addCustomer(id, email);\n      const newCustomer = await this.customerService.addCustomer(id, stripeCustomer.id);\n\n      customerId = newCustomer.stripe_customer_id;\n    }\n\n    return this.stripeService.createCheckoutSession(customerId);\n  }\n\n  @Patch(\"/profile\")\n  @ApiOperation({\n    operationId: \"updateProfileForUser\",\n    summary: \"Updates the profile for the authenticated user\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOkResponse({ type: DbUser })\n  @ApiNotFoundResponse({ description: \"Unable to update user profile\" })\n  @ApiBody({ type: UpdateUserDto })\n  async updateProfileForUser(@UserId() userId: number, @Body() updateUserDto: UpdateUserDto): Promise {\n    return this.userService.updateUser(userId, updateUserDto);\n  }\n\n  @Patch(\"/profile/interests\")\n  @ApiOperation({\n    operationId: \"updateInterestsForUserProfile\",\n    summary: \"Updates the interests for the authenticated user profile\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOkResponse({ type: DbUser })\n  @ApiNotFoundResponse({ description: \"Unable to update interests for the user profile\" })\n  @ApiBody({ type: UpdateUserProfileInterestsDto })\n  async updateInterestsForUserProfile(\n    @UserId() userId: number,\n    @Body() updateUserDto: UpdateUserProfileInterestsDto\n  ): Promise {\n    await this.userService.updateInterests(userId, updateUserDto);\n\n    return this.userService.findOneById(userId);\n  }\n\n  @Patch(\"/profile/email\")\n  @ApiOperation({\n    operationId: \"updateEmailPreferencesForUserProfile\",\n    summary: \"Updates the email preferences for the authenticated user profile\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOkResponse({ type: DbUser })\n  @ApiNotFoundResponse({ description: \"Unable to update email preferences for the user profile\" })\n  @ApiBody({ type: UpdateUserEmailPreferencesDto })\n  async updateEmailPreferencesForUserProfile(\n    @UserId() userId: number,\n    @Body() updateUserDto: UpdateUserEmailPreferencesDto\n  ): Promise {\n    await this.userService.updateEmailPreferences(userId, updateUserDto);\n\n    return this.userService.findOneById(userId);\n  }\n\n  @Patch(\"/profile/coupon\")\n  @ApiOperation({\n    operationId: \"applyCouponForUser\",\n    summary: \"Applies a coupon for the authenticated user\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOkResponse({ type: DbUser })\n  @ApiNotFoundResponse({ description: \"Unable to apply coupon for the user profile\" })\n  @ApiBody({ type: ApplyUserCouponDto })\n  async applyCouponForUser(@UserId() userId: number, @Body() applyUserCouponDto: ApplyUserCouponDto): Promise {\n    // check for valid coupon\n    await this.couponService.findCoupon(applyUserCouponDto.couponCode);\n\n    await this.userService.applyCoupon(userId, applyUserCouponDto.couponCode);\n\n    return this.userService.findOneById(userId);\n  }\n\n  @Delete(\"/profile\")\n  @ApiOperation({\n    operationId: \"deleteUserAccount\",\n    summary: \"Deletes the authenticated user's account\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOkResponse({ type: DbUser })\n  @ApiNotFoundResponse({ description: \"Unable to delete user account\" })\n  async deleteUserAccount(@UserId() userId: number): Promise {\n    return this.userService.deleteUser(userId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_AuthModule_exports\n\n\n\n\nCouponModule\n\nCouponModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nCouponModule->AuthModule\n\n\n\n\n\nCustomerModule\n\nCustomerModule\n\nAuthModule -->\n\nCustomerModule->AuthModule\n\n\n\n\n\nStripeModule\n\nStripeModule\n\nAuthModule -->\n\nStripeModule->AuthModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAuthModule -->\n\nUserModule->AuthModule\n\n\n\n\n\nUserReposModule\n\nUserReposModule\n\nAuthModule -->\n\nUserReposModule->AuthModule\n\n\n\n\n\nSupabaseGuard \n\nSupabaseGuard \n\nSupabaseGuard  -->\n\nAuthModule->SupabaseGuard \n\n\n\n\n\nSupabaseStrategy \n\nSupabaseStrategy \n\nSupabaseStrategy  -->\n\nAuthModule->SupabaseStrategy \n\n\n\n\n\nSupabaseGuard\n\nSupabaseGuard\n\nAuthModule -->\n\nSupabaseGuard->AuthModule\n\n\n\n\n\nSupabaseStrategy\n\nSupabaseStrategy\n\nAuthModule -->\n\nSupabaseStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            SupabaseGuard\n                        \n                        \n                            SupabaseStrategy\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            CouponModule\n                        \n                        \n                            CustomerModule\n                        \n                        \n                            StripeModule\n                        \n                        \n                            UserModule\n                        \n                        \n                            UserReposModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            SupabaseGuard\n                        \n                        \n                            SupabaseStrategy\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { PassportModule } from \"@nestjs/passport\";\nimport { UserModule } from \"../user/user.module\";\nimport { UserReposModule } from \"../user-repo/user-repos.module\";\nimport { StripeModule } from \"../stripe/stripe.module\";\nimport { CustomerModule } from \"../customer/customer.module\";\nimport { CouponModule } from \"../coupon/coupon.module\";\nimport { AuthController } from \"./auth.controller\";\nimport { SupabaseStrategy } from \"./supabase.strategy\";\nimport { SupabaseGuard } from \"./supabase.guard\";\n\n@Module({\n  imports: [PassportModule, UserModule, UserReposModule, StripeModule, CustomerModule, CouponModule],\n  providers: [SupabaseStrategy, SupabaseGuard],\n  exports: [SupabaseStrategy, SupabaseGuard],\n  controllers: [AuthController],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/BakeRepoDto.html":{"url":"classes/BakeRepoDto.html","title":"class - BakeRepoDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  BakeRepoDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/pizza/dtos/baked-repo.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                url\n                            \n                            \n                                wait\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        url\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Repo clone URL', type: String, example: 'https://github.com/open-sauced/insights'})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pizza/dtos/baked-repo.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        wait\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Option to wait for Pizza service to finish baking repo', type: Boolean, example: false})@IsBoolean()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pizza/dtos/baked-repo.dto.ts:19\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsBoolean, IsString } from \"class-validator\";\n\nexport class BakeRepoDto {\n  @ApiProperty({\n    description: \"Repo clone URL\",\n    type: String,\n    example: \"https://github.com/open-sauced/insights\",\n  })\n  @IsString()\n  url: string;\n\n  @ApiProperty({\n    description: \"Option to wait for Pizza service to finish baking repo\",\n    type: Boolean,\n    example: false,\n  })\n  @IsBoolean()\n  wait: boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/BlogSummaryController.html":{"url":"controllers/BlogSummaryController.html","title":"controller - BlogSummaryController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  BlogSummaryController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/blogs/issue-summary.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                blogs\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                genereateBlogSummary\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        genereateBlogSummary\n                        \n                    \n                \n            \n            \n                \n                    \n                    genereateBlogSummary(genereateBlogSummaryDto: CreateBlogSummaryDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/summary/generate')@ApiOperation({operationId: 'generateBlogSummary', summary: 'Generate a summary for a markdown supported blog'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiBadRequestResponse({description: 'Invalid request'})@ApiBody({type: CreateBlogSummaryDto})\n                \n            \n\n            \n                \n                    Defined in src/blogs/issue-summary.controller.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    genereateBlogSummaryDto\n                                    \n                                                CreateBlogSummaryDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { BadRequestException, Body, Controller, Post, UseGuards } from \"@nestjs/common\";\nimport { ApiOperation, ApiBearerAuth, ApiBadRequestResponse, ApiBody, ApiTags } from \"@nestjs/swagger\";\n\nimport { SupabaseGuard } from \"../auth/supabase.guard\";\nimport { CreateBlogSummaryDto } from \"./dtos/create-blog-summary.dto\";\nimport { BlogSummaryService } from \"./blog-summary.service\";\n\n@Controller(\"blogs\")\n@ApiTags(\"Blog summary service\")\nexport class BlogSummaryController {\n  constructor(private readonly blogSummaryService: BlogSummaryService) {}\n\n  @Post(\"/summary/generate\")\n  @ApiOperation({\n    operationId: \"generateBlogSummary\",\n    summary: \"Generate a summary for a markdown supported blog\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  @ApiBody({ type: CreateBlogSummaryDto })\n  async genereateBlogSummary(@Body() genereateBlogSummaryDto: CreateBlogSummaryDto) {\n    const summary = await this.blogSummaryService.generateBlogSummary(genereateBlogSummaryDto);\n\n    if (!summary) {\n      throw new BadRequestException();\n    }\n\n    return { summary };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/BlogSummaryModule.html":{"url":"modules/BlogSummaryModule.html","title":"module - BlogSummaryModule","body":"\n                   \n\n\n\n\n    Modules\n    BlogSummaryModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_BlogSummaryModule\n\n\n\ncluster_BlogSummaryModule_exports\n\n\n\ncluster_BlogSummaryModule_providers\n\n\n\ncluster_BlogSummaryModule_imports\n\n\n\n\nOpenAiModule\n\nOpenAiModule\n\n\n\nBlogSummaryModule\n\nBlogSummaryModule\n\nBlogSummaryModule -->\n\nOpenAiModule->BlogSummaryModule\n\n\n\n\n\nBlogSummaryService \n\nBlogSummaryService \n\nBlogSummaryService  -->\n\nBlogSummaryModule->BlogSummaryService \n\n\n\n\n\nBlogSummaryService\n\nBlogSummaryService\n\nBlogSummaryModule -->\n\nBlogSummaryService->BlogSummaryModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/blogs/issue-summary.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            BlogSummaryService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            BlogSummaryController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            OpenAiModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            BlogSummaryService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { OpenAiModule } from \"../open-ai/open-ai.module\";\nimport { BlogSummaryService } from \"./blog-summary.service\";\nimport { BlogSummaryController } from \"./issue-summary.controller\";\n\n@Module({\n  imports: [OpenAiModule],\n  controllers: [BlogSummaryController],\n  providers: [BlogSummaryService],\n  exports: [BlogSummaryService],\n})\nexport class BlogSummaryModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/BlogSummaryService.html":{"url":"injectables/BlogSummaryService.html","title":"injectable - BlogSummaryService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  BlogSummaryService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/blogs/blog-summary.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                generateBlogSummary\n                            \n                            \n                                    Private\n                                generatePrompt\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(openAiService: OpenAiService)\n                    \n                \n                        \n                            \n                                Defined in src/blogs/blog-summary.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        openAiService\n                                                  \n                                                        \n                                                                        OpenAiService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        generateBlogSummary\n                        \n                    \n                \n            \n            \n                \n                    \n                    generateBlogSummary(options: CreateBlogSummaryDto)\n                \n            \n\n\n            \n                \n                    Defined in src/blogs/blog-summary.service.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                CreateBlogSummaryDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        generatePrompt\n                        \n                    \n                \n            \n            \n                \n                    \n                    generatePrompt(language: string, maxLength: number, tone: string)\n                \n            \n\n\n            \n                \n                    Defined in src/blogs/blog-summary.service.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    language\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    maxLength\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    tone\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\n\nimport { OpenAiService } from \"../open-ai/open-ai.service\";\nimport { CreateBlogSummaryDto } from \"./dtos/create-blog-summary.dto\";\n\n@Injectable()\nexport class BlogSummaryService {\n  constructor(private openAiService: OpenAiService) {}\n\n  private generatePrompt(language: string, maxLength: number, tone: string) {\n    return [\n      `I will generate a blog summary for a blog with the specifications mentioned below`,\n      `The summary should be written in the first person with a ${tone} tone`,\n      `Summary language: ${language}`,\n      `Summary must be a maximum of ${maxLength} characters.`,\n      \"Exclude anything unnecessary such as translation. Your entire response will be used to summarize and analyze the blog.\",\n    ].join(\"\\n\");\n  }\n\n  async generateBlogSummary(options: CreateBlogSummaryDto) {\n    const content = `Blog Title: ${options.blogTitle}\\n\\nBlog Content: ${options.blogMarkdown}`;\n\n    try {\n      const completion = this.openAiService.generateCompletion(\n        this.generatePrompt(options.language, options.summaryLength, options.tone),\n        content,\n        options.temperature\n      );\n\n      return completion;\n    } catch (error: unknown) {\n      if (error instanceof Error) {\n        console.error(\"OpenAI error: \", error.message);\n      }\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ChatResponse.html":{"url":"interfaces/ChatResponse.html","title":"interface - ChatResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ChatResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/open-ai/open-ai.service.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            choices\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        choices\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        choices:     literal type[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { Fetch } from \"@supabase/supabase-js/dist/module/lib/types\";\nimport { ConfigService } from \"@nestjs/config\";\n\ninterface ChatResponse {\n  choices: { message: { content: string } }[];\n}\n\n@Injectable()\nexport class OpenAiService {\n  constructor(private configService: ConfigService) {}\n\n  async generateCompletion(systemMessage: string, userMessage: string, temperature: number) {\n    // eslint-disable-next-line\n    const fetcher: Fetch = typeof fetch !== \"undefined\" ? fetch : (require(\"node-fetch\") as Fetch);\n    const response = await fetcher(this.configService.get(\"openai.completionsURL\")!, {\n      method: \"POST\",\n      headers: {\n        Authorization: `Bearer ${this.configService.get(\"openai.APIKey\")!}`,\n        \"Content-type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        model: this.configService.get(\"openai.modelName\"),\n        messages: [\n          {\n            role: \"system\",\n            content: systemMessage,\n          },\n          {\n            role: \"user\",\n            content: userMessage,\n          },\n        ],\n        temperature: temperature / 10,\n        n: 1,\n      }),\n    });\n\n    if (response.ok) {\n      const data = (await response.json()) as ChatResponse;\n\n      return data.choices[0]?.message.content;\n    }\n\n    throw new Error(response.statusText);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/CodeExplanationController.html":{"url":"controllers/CodeExplanationController.html","title":"controller - CodeExplanationController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  CodeExplanationController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/pull-requests/code-explanation.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                prs\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                generatePRDescription\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        generatePRDescription\n                        \n                    \n                \n            \n            \n                \n                    \n                    generatePRDescription(generateCodeExplanationDto: GenerateCodeExplanationDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/explanation/generate')@ApiOperation({operationId: 'generateCodeExplanation', summary: 'Generates an explanation for the provided code'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiBadRequestResponse({description: 'Invalid request'})@ApiBody({type: GenerateCodeExplanationDto})\n                \n            \n\n            \n                \n                    Defined in src/pull-requests/code-explanation.controller.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    generateCodeExplanationDto\n                                    \n                                                GenerateCodeExplanationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { BadRequestException, Body, Controller, Post, UseGuards } from \"@nestjs/common\";\nimport { ApiOperation, ApiBearerAuth, ApiBadRequestResponse, ApiBody, ApiTags } from \"@nestjs/swagger\";\n\nimport { SupabaseGuard } from \"../auth/supabase.guard\";\nimport { GenerateCodeExplanationDto } from \"./dtos/create-code-explanation.dto\";\nimport { CodeExplanationService } from \"./code-explanation.service\";\n\n@Controller(\"prs\")\n@ApiTags(\"Pull Requests service\")\nexport class CodeExplanationController {\n  constructor(private codeExplanationService: CodeExplanationService) {}\n\n  @Post(\"/explanation/generate\")\n  @ApiOperation({\n    operationId: \"generateCodeExplanation\",\n    summary: \"Generates an explanation for the provided code\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  @ApiBody({ type: GenerateCodeExplanationDto })\n  async generatePRDescription(@Body() generateCodeExplanationDto: GenerateCodeExplanationDto) {\n    const suggestion = await this.codeExplanationService.generateExplanation(generateCodeExplanationDto);\n\n    if (!suggestion) {\n      throw new BadRequestException();\n    }\n\n    return { suggestion };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CodeExplanationService.html":{"url":"injectables/CodeExplanationService.html","title":"injectable - CodeExplanationService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CodeExplanationService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/pull-requests/code-explanation.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                generateExplanation\n                            \n                            \n                                    Private\n                                generatePrompt\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(openAiService: OpenAiService)\n                    \n                \n                        \n                            \n                                Defined in src/pull-requests/code-explanation.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        openAiService\n                                                  \n                                                        \n                                                                        OpenAiService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        generateExplanation\n                        \n                    \n                \n            \n            \n                \n                    \n                    generateExplanation(options: GenerateCodeExplanationDto)\n                \n            \n\n\n            \n                \n                    Defined in src/pull-requests/code-explanation.service.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                GenerateCodeExplanationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        generatePrompt\n                        \n                    \n                \n            \n            \n                \n                    \n                    generatePrompt(language: string, maxLength: number)\n                \n            \n\n\n            \n                \n                    Defined in src/pull-requests/code-explanation.service.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    language\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    maxLength\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\n\nimport { OpenAiService } from \"../open-ai/open-ai.service\";\nimport { GenerateCodeExplanationDto } from \"./dtos/create-code-explanation.dto\";\n\n@Injectable()\nexport class CodeExplanationService {\n  constructor(private openAiService: OpenAiService) {}\n\n  private generatePrompt(language: string, maxLength: number) {\n    return [\n      `Generate an explanation for the given code snippet written in ${language} with the specifications mentioned below`,\n      `The explanation must be a maximum of ${maxLength} characters.`,\n    ].join(\"\\n\");\n  }\n\n  async generateExplanation(options: GenerateCodeExplanationDto) {\n    const content = `Code: ${options.code}\\n`;\n\n    try {\n      const completion = await this.openAiService.generateCompletion(\n        this.generatePrompt(options.language, options.descriptionLength),\n        content,\n        options.temperature\n      );\n\n      return completion;\n    } catch (error: unknown) {\n      if (error instanceof Error) {\n        console.error(\"OpenAI error: \", error.message);\n      }\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/CodeRefactorSuggestionController.html":{"url":"controllers/CodeRefactorSuggestionController.html","title":"controller - CodeRefactorSuggestionController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  CodeRefactorSuggestionController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/pull-requests/code-refactor-suggestion.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                prs\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                generatePRDescription\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        generatePRDescription\n                        \n                    \n                \n            \n            \n                \n                    \n                    generatePRDescription(generateCodeRefactorSuggestionDto: GenerateCodeRefactorSuggestionDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/suggestion/generate')@ApiOperation({operationId: 'generateCodeRefactor', summary: 'Generates a refactor suggestion based on the provided code'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiBadRequestResponse({description: 'Invalid request'})@ApiBody({type: GenerateCodeRefactorSuggestionDto})\n                \n            \n\n            \n                \n                    Defined in src/pull-requests/code-refactor-suggestion.controller.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    generateCodeRefactorSuggestionDto\n                                    \n                                                GenerateCodeRefactorSuggestionDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { BadRequestException, Body, Controller, Post, UseGuards } from \"@nestjs/common\";\nimport { ApiOperation, ApiBearerAuth, ApiBadRequestResponse, ApiBody, ApiTags } from \"@nestjs/swagger\";\n\nimport { SupabaseGuard } from \"../auth/supabase.guard\";\nimport { GenerateCodeRefactorSuggestionDto } from \"./dtos/create-code-refactor-suggestion.dto\";\nimport { CodeRefactorSuggestionService } from \"./code-refactor-suggestion.service\";\n\n@Controller(\"prs\")\n@ApiTags(\"Pull Requests service\")\nexport class CodeRefactorSuggestionController {\n  constructor(private codeRefactorSuggestionService: CodeRefactorSuggestionService) {}\n\n  @Post(\"/suggestion/generate\")\n  @ApiOperation({\n    operationId: \"generateCodeRefactor\",\n    summary: \"Generates a refactor suggestion based on the provided code\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  @ApiBody({ type: GenerateCodeRefactorSuggestionDto })\n  async generatePRDescription(@Body() generateCodeRefactorSuggestionDto: GenerateCodeRefactorSuggestionDto) {\n    const suggestion = await this.codeRefactorSuggestionService.generateDescription(generateCodeRefactorSuggestionDto);\n\n    if (!suggestion) {\n      throw new BadRequestException();\n    }\n\n    return { suggestion };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CodeRefactorSuggestionService.html":{"url":"injectables/CodeRefactorSuggestionService.html","title":"injectable - CodeRefactorSuggestionService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CodeRefactorSuggestionService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/pull-requests/code-refactor-suggestion.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                generateDescription\n                            \n                            \n                                    Private\n                                generatePrompt\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(openAiService: OpenAiService)\n                    \n                \n                        \n                            \n                                Defined in src/pull-requests/code-refactor-suggestion.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        openAiService\n                                                  \n                                                        \n                                                                        OpenAiService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        generateDescription\n                        \n                    \n                \n            \n            \n                \n                    \n                    generateDescription(options: GenerateCodeRefactorSuggestionDto)\n                \n            \n\n\n            \n                \n                    Defined in src/pull-requests/code-refactor-suggestion.service.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                GenerateCodeRefactorSuggestionDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        generatePrompt\n                        \n                    \n                \n            \n            \n                \n                    \n                    generatePrompt(language: string, maxLength: number)\n                \n            \n\n\n            \n                \n                    Defined in src/pull-requests/code-refactor-suggestion.service.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    language\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    maxLength\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\n\nimport { OpenAiService } from \"../open-ai/open-ai.service\";\nimport { GenerateCodeRefactorSuggestionDto } from \"./dtos/create-code-refactor-suggestion.dto\";\n\n@Injectable()\nexport class CodeRefactorSuggestionService {\n  constructor(private openAiService: OpenAiService) {}\n\n  private generatePrompt(language: string, maxLength: number) {\n    return [\n      `Generate a code refactor suggestion for a given code snippet written in ${language} with the specifications mentioned below`,\n      `The code snippet must be a maximum of ${maxLength} characters.`,\n      'Exclude anything unnecessary such as translation and instructions. The code snippet you suggest should start with \"```suggestion\" and end with ``` to create a valid GitHub suggestion codeblock. All non-code text or description should be outside of the codeblock.',\n    ].join(\"\\n\");\n  }\n\n  async generateDescription(options: GenerateCodeRefactorSuggestionDto) {\n    const content = `Code: ${options.code}\\n`;\n\n    try {\n      const completion = await this.openAiService.generateCompletion(\n        this.generatePrompt(options.language, options.descriptionLength),\n        content,\n        options.temperature\n      );\n\n      return completion;\n    } catch (error: unknown) {\n      if (error instanceof Error) {\n        console.error(\"OpenAI error: \", error.message);\n      }\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/CodeTestSuggestionController.html":{"url":"controllers/CodeTestSuggestionController.html","title":"controller - CodeTestSuggestionController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  CodeTestSuggestionController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/pull-requests/code-test.suggestion.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                prs\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                generatePRDescription\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        generatePRDescription\n                        \n                    \n                \n            \n            \n                \n                    \n                    generatePRDescription(generateCodeTestSuggestionDto: GenerateCodeTestSuggestionDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/test/generate')@ApiOperation({operationId: 'generateCodeTest', summary: 'Generates a test for the provided code'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiBadRequestResponse({description: 'Invalid request'})@ApiBody({type: GenerateCodeTestSuggestionDto})\n                \n            \n\n            \n                \n                    Defined in src/pull-requests/code-test.suggestion.controller.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    generateCodeTestSuggestionDto\n                                    \n                                                GenerateCodeTestSuggestionDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { BadRequestException, Body, Controller, Post, UseGuards } from \"@nestjs/common\";\nimport { ApiOperation, ApiBearerAuth, ApiBadRequestResponse, ApiBody, ApiTags } from \"@nestjs/swagger\";\n\nimport { SupabaseGuard } from \"../auth/supabase.guard\";\nimport { GenerateCodeTestSuggestionDto } from \"./dtos/create-code-test-suggestion.dto\";\nimport { CodeTestSuggestionService } from \"./code-test-suggestion.service\";\n\n@Controller(\"prs\")\n@ApiTags(\"Pull Requests service\")\nexport class CodeTestSuggestionController {\n  constructor(private codeTestSuggestionService: CodeTestSuggestionService) {}\n\n  @Post(\"/test/generate\")\n  @ApiOperation({\n    operationId: \"generateCodeTest\",\n    summary: \"Generates a test for the provided code\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  @ApiBody({ type: GenerateCodeTestSuggestionDto })\n  async generatePRDescription(@Body() generateCodeTestSuggestionDto: GenerateCodeTestSuggestionDto) {\n    const suggestion = await this.codeTestSuggestionService.generateTestSuggestion(generateCodeTestSuggestionDto);\n\n    if (!suggestion) {\n      throw new BadRequestException();\n    }\n\n    return { suggestion };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CodeTestSuggestionService.html":{"url":"injectables/CodeTestSuggestionService.html","title":"injectable - CodeTestSuggestionService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CodeTestSuggestionService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/pull-requests/code-test-suggestion.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                generatePrompt\n                            \n                            \n                                    Async\n                                generateTestSuggestion\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(openAiService: OpenAiService)\n                    \n                \n                        \n                            \n                                Defined in src/pull-requests/code-test-suggestion.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        openAiService\n                                                  \n                                                        \n                                                                        OpenAiService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        generatePrompt\n                        \n                    \n                \n            \n            \n                \n                    \n                    generatePrompt(maxLength: number)\n                \n            \n\n\n            \n                \n                    Defined in src/pull-requests/code-test-suggestion.service.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    maxLength\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        generateTestSuggestion\n                        \n                    \n                \n            \n            \n                \n                    \n                    generateTestSuggestion(options: GenerateCodeTestSuggestionDto)\n                \n            \n\n\n            \n                \n                    Defined in src/pull-requests/code-test-suggestion.service.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                GenerateCodeTestSuggestionDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\n\nimport { OpenAiService } from \"../open-ai/open-ai.service\";\nimport { GenerateCodeTestSuggestionDto } from \"./dtos/create-code-test-suggestion.dto\";\n\n@Injectable()\nexport class CodeTestSuggestionService {\n  constructor(private openAiService: OpenAiService) {}\n\n  private generatePrompt(maxLength: number) {\n    return [\n      `Generate a test for a given code snippet with the specifications mentioned below`,\n      `The code snippet must be a maximum of ${maxLength} characters.`,\n      'Exclude anything unnecessary such as translation and instructions. The code snippet you suggest should start with \"```suggestion\" and end with ``` to create a valid GitHub suggestion codeblock. All non-code text or description should be outside of the codeblock.',\n    ].join(\"\\n\");\n  }\n\n  async generateTestSuggestion(options: GenerateCodeTestSuggestionDto) {\n    const content = `Code: ${options.code}\\n`;\n\n    try {\n      const completion = this.openAiService.generateCompletion(\n        this.generatePrompt(options.descriptionLength),\n        content,\n        options.temperature\n      );\n\n      return completion;\n    } catch (error: unknown) {\n      if (error instanceof Error) {\n        console.error(\"OpenAI error: \", error.message);\n      }\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CollaboratorsDto.html":{"url":"classes/CollaboratorsDto.html","title":"class - CollaboratorsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CollaboratorsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user-lists/dtos/collaborators.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                contributors\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        contributors\n                        \n                    \n                \n            \n                \n                    \n                        Type :     number[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'An array of contributor user IDs', isArray: true, type: 'integer', example: undefined})@Type(undefined)@IsArray()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-lists/dtos/collaborators.dto.ts:14\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { Type } from \"class-transformer\";\nimport { IsArray } from \"class-validator\";\n\nexport class CollaboratorsDto {\n  @ApiProperty({\n    description: \"An array of contributor user IDs\",\n    isArray: true,\n    type: \"integer\",\n    example: [42211, 81233],\n  })\n  @Type(() => Number)\n  @IsArray()\n  contributors: number[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CommitAuthorDto.html":{"url":"classes/CommitAuthorDto.html","title":"class - CommitAuthorDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CommitAuthorDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/pizza/dtos/commit_authors.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                author_email\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        author_email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Public Commit Author Email', type: String, example: 'hello@opensauced.pizza'})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pizza/dtos/commit_authors.dto.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsString } from \"class-validator\";\n\nexport class CommitAuthorDto {\n  @ApiProperty({\n    description: \"Public Commit Author Email\",\n    type: String,\n    example: \"hello@opensauced.pizza\",\n  })\n  @IsString()\n  author_email: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CommitAuthorsService.html":{"url":"injectables/CommitAuthorsService.html","title":"injectable - CommitAuthorsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CommitAuthorsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/pizza/commit-authors.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                baseQueryBuilder\n                            \n                            \n                                    Async\n                                findAllCommitAuthors\n                            \n                            \n                                    Async\n                                findCommitAuthorById\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(commitAuthorsRepository: Repository, pagerService: PagerService)\n                    \n                \n                        \n                            \n                                Defined in src/pizza/commit-authors.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        commitAuthorsRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        pagerService\n                                                  \n                                                        \n                                                                        PagerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        baseQueryBuilder\n                        \n                    \n                \n            \n            \n                \nbaseQueryBuilder()\n                \n            \n\n\n            \n                \n                    Defined in src/pizza/commit-authors.service.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllCommitAuthors\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllCommitAuthors(pageOptionsDto: PageOptionsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/pizza/commit-authors.service.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findCommitAuthorById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findCommitAuthorById(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/pizza/commit-authors.service.ts:35\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from \"@nestjs/common\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { Repository } from \"typeorm\";\n\nimport { PageOptionsDto } from \"../common/dtos/page-options.dto\";\nimport { PageDto } from \"../common/dtos/page.dto\";\nimport { PagerService } from \"../common/services/pager.service\";\nimport { DbCommitAuthors } from \"./entities/commit_authors.entity\";\n\n@Injectable()\nexport class CommitAuthorsService {\n  constructor(\n    @InjectRepository(DbCommitAuthors, \"ApiConnection\")\n    private commitAuthorsRepository: Repository,\n    private pagerService: PagerService\n  ) {}\n\n  baseQueryBuilder() {\n    const builder = this.commitAuthorsRepository.createQueryBuilder(\"commit_authors\");\n\n    return builder;\n  }\n\n  async findAllCommitAuthors(pageOptionsDto: PageOptionsDto): Promise> {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder.offset(pageOptionsDto.skip).limit(pageOptionsDto.limit);\n\n    return this.pagerService.applyPagination({\n      pageOptionsDto,\n      queryBuilder,\n    });\n  }\n\n  async findCommitAuthorById(id: number): Promise {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder.where(\"id = :id\", { id });\n\n    const item = await queryBuilder.getOne();\n\n    if (!item) {\n      throw new NotFoundException();\n    }\n\n    return item;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CommitsDto.html":{"url":"classes/CommitsDto.html","title":"class - CommitsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CommitsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/pizza/dtos/commits.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                commit_hash\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        commit_hash\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Hash for a specific commit', type: String, example: '5e7c6c7af42d38c57f363c564c58007da448c443'})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pizza/dtos/commits.dto.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsString } from \"class-validator\";\n\nexport class CommitsDto {\n  @ApiProperty({\n    description: \"Hash for a specific commit\",\n    type: String,\n    example: \"5e7c6c7af42d38c57f363c564c58007da448c443\",\n  })\n  @IsString()\n  commit_hash: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CommitsService.html":{"url":"injectables/CommitsService.html","title":"injectable - CommitsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CommitsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/pizza/commits.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                baseQueryBuilder\n                            \n                            \n                                    Async\n                                findAllCommitsByBakedRepoId\n                            \n                            \n                                    Async\n                                findAllCommitsByCommitAuthorId\n                            \n                            \n                                    Async\n                                findCommitById\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(commitsRepository: Repository, pagerService: PagerService)\n                    \n                \n                        \n                            \n                                Defined in src/pizza/commits.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        commitsRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        pagerService\n                                                  \n                                                        \n                                                                        PagerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        baseQueryBuilder\n                        \n                    \n                \n            \n            \n                \nbaseQueryBuilder()\n                \n            \n\n\n            \n                \n                    Defined in src/pizza/commits.service.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllCommitsByBakedRepoId\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllCommitsByBakedRepoId(pageOptionsDto: PageOptionsDto, id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/pizza/commits.service.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllCommitsByCommitAuthorId\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllCommitsByCommitAuthorId(pageOptionsDto: PageOptionsDto, id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/pizza/commits.service.ts:37\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findCommitById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findCommitById(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/pizza/commits.service.ts:50\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from \"@nestjs/common\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { Repository } from \"typeorm\";\n\nimport { PageOptionsDto } from \"../common/dtos/page-options.dto\";\nimport { PageDto } from \"../common/dtos/page.dto\";\nimport { PagerService } from \"../common/services/pager.service\";\nimport { DbCommits } from \"./entities/commits.entity\";\n\n@Injectable()\nexport class CommitsService {\n  constructor(\n    @InjectRepository(DbCommits, \"ApiConnection\")\n    private commitsRepository: Repository,\n    private pagerService: PagerService\n  ) {}\n\n  baseQueryBuilder() {\n    const builder = this.commitsRepository.createQueryBuilder(\"commits\");\n\n    return builder;\n  }\n\n  async findAllCommitsByBakedRepoId(pageOptionsDto: PageOptionsDto, id: number): Promise> {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder.where(\"baked_repo_id = :id\", { id });\n\n    queryBuilder.offset(pageOptionsDto.skip).limit(pageOptionsDto.limit);\n\n    return this.pagerService.applyPagination({\n      pageOptionsDto,\n      queryBuilder,\n    });\n  }\n\n  async findAllCommitsByCommitAuthorId(pageOptionsDto: PageOptionsDto, id: number): Promise> {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder.where(\"commit_author_id = :id\", { id });\n\n    queryBuilder.offset(pageOptionsDto.skip).limit(pageOptionsDto.limit);\n\n    return this.pagerService.applyPagination({\n      pageOptionsDto,\n      queryBuilder,\n    });\n  }\n\n  async findCommitById(id: number): Promise {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder.where(\"id = :id\", { id });\n\n    const item = await queryBuilder.getOne();\n\n    if (!item) {\n      throw new NotFoundException();\n    }\n\n    return item;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ContributionModule.html":{"url":"modules/ContributionModule.html","title":"module - ContributionModule","body":"\n                   \n\n\n\n\n    Modules\n    ContributionModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_ContributionModule\n\n\n\ncluster_ContributionModule_providers\n\n\n\ncluster_ContributionModule_exports\n\n\n\ncluster_ContributionModule_imports\n\n\n\n\nRepoModule\n\nRepoModule\n\n\n\nContributionModule\n\nContributionModule\n\nContributionModule -->\n\nRepoModule->ContributionModule\n\n\n\n\n\nContributionService \n\nContributionService \n\nContributionService  -->\n\nContributionModule->ContributionService \n\n\n\n\n\nContributionService\n\nContributionService\n\nContributionModule -->\n\nContributionService->ContributionModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/contribution/contribution.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ContributionService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            RepoContributionsController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            RepoModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            ContributionService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\n\nimport { DbRepo } from \"../repo/entities/repo.entity\";\nimport { RepoModule } from \"../repo/repo.module\";\nimport { DbUser } from \"../user/user.entity\";\nimport { DbPullRequest } from \"../pull-requests/entities/pull-request.entity\";\nimport { DbContribution } from \"./contribution.entity\";\nimport { ContributionService } from \"./contribution.service\";\nimport { RepoContributionsController } from \"./repo-contributions.controller\";\n\n@Module({\n  imports: [TypeOrmModule.forFeature([DbRepo, DbContribution, DbUser, DbPullRequest], \"ApiConnection\"), RepoModule],\n  controllers: [RepoContributionsController],\n  providers: [ContributionService],\n  exports: [ContributionService],\n})\nexport class ContributionModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ContributionPageMetaDto.html":{"url":"classes/ContributionPageMetaDto.html","title":"class - ContributionPageMetaDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ContributionPageMetaDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user-lists/dtos/contributions-pagemeta.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PageMetaDto\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                allContributionsCount\n                            \n                            \n                                    Readonly\n                                hasNextPage\n                            \n                            \n                                    Readonly\n                                hasPreviousPage\n                            \n                            \n                                    Readonly\n                                itemCount\n                            \n                            \n                                    Readonly\n                                limit\n                            \n                            \n                                    Readonly\n                                page\n                            \n                            \n                                    Readonly\n                                pageCount\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(undefined: PageMetaParameters, allContributionsCount: number)\n                    \n                \n                        \n                            \n                                Defined in src/user-lists/dtos/contributions-pagemeta.dto.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                  \n                                                        \n                                                                        PageMetaParameters\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        allContributionsCount\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        allContributionsCount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The number of all contributions', example: 100, type: 'integer'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-lists/dtos/contributions-pagemeta.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        hasNextPage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Flag indicating if there is a next page', example: true})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageMetaDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageMetaDto:43\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        hasPreviousPage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Flag indicating if there is a previous page', example: false})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageMetaDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageMetaDto:37\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        itemCount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The number of items in the collection', example: 100, type: 'integer'})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageMetaDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageMetaDto:24\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The number of items per page', example: 10, type: 'integer'})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageMetaDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageMetaDto:17\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The current page', example: 1, type: 'integer'})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageMetaDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageMetaDto:10\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        pageCount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The number of pages in the collection', example: 10, type: 'integer'})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageMetaDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageMetaDto:31\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { PageMetaParameters } from \"../../common/dtos/page-meta-parameters.dto\";\nimport { PageMetaDto } from \"../../common/dtos/page-meta.dto\";\n\nexport class ContributionPageMetaDto extends PageMetaDto {\n  @ApiProperty({\n    description: \"The number of all contributions\",\n    example: 100,\n    type: \"integer\",\n  })\n  readonly allContributionsCount: number;\n\n  constructor({ pageOptionsDto, itemCount }: PageMetaParameters, allContributionsCount: number) {\n    super({ pageOptionsDto, itemCount });\n\n    this.allContributionsCount = allContributionsCount;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ContributionPageOptionsDto.html":{"url":"classes/ContributionPageOptionsDto.html","title":"class - ContributionPageOptionsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ContributionPageOptionsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/contribution/dtos/contribution-page-options.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PageOptionsDto\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                    Optional\n                                orderBy\n                            \n                            \n                                    Readonly\n                                    Optional\n                                limit\n                            \n                            \n                                    Readonly\n                                    Optional\n                                orderDirection\n                            \n                            \n                                    Readonly\n                                    Optional\n                                page\n                            \n                            \n                                    Readonly\n                                    Optional\n                                prev_days_start_date\n                            \n                            \n                                    Readonly\n                                    Optional\n                                range\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        orderBy\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ContributionOrderFieldsEnum\n\n                    \n                \n                \n                    \n                        Default value : ContributionOrderFieldsEnum.count\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: ContributionOrderFieldsEnum, enumName: 'RepoOrderFieldsEnum', default: undefined})@IsEnum(ContributionOrderFieldsEnum)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/contribution/dtos/contribution-page-options.dto.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 50\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, maximum: 1000, default: 10, type: 'integer'})@Type(undefined)@IsInt()@Min(1)@Max(10000)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:30\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        orderDirection\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OrderDirectionEnum\n\n                    \n                \n                \n                    \n                        Default value : OrderDirectionEnum.DESC\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: OrderDirectionEnum, enumName: 'OrderDirectionEnum', default: undefined})@IsEnum(OrderDirectionEnum)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:35\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, default: 1, type: 'integer'})@Type(undefined)@IsInt()@Min(1)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:17\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        prev_days_start_date\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 0\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Number of days in the past to start range block', default: 0, type: 'integer'})@Type(undefined)@IsIn(['0', '7', '30', '90'])@IsInt()@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:57\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        range\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 30\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Range in days', default: 30, type: 'integer'})@Type(undefined)@IsIn(['7', '30', '90'])@IsInt()@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:46\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiPropertyOptional } from \"@nestjs/swagger\";\nimport { IsEnum, IsOptional } from \"class-validator\";\nimport { PageOptionsDto } from \"../../common/dtos/page-options.dto\";\n\nexport enum ContributionOrderFieldsEnum {\n  count = \"count\",\n  last_merged_at = \"last_merged_at\",\n  created_at = \"created_at\",\n  updated_at = \"updated_at\",\n  contributor = \"contributor\",\n}\n\nexport class ContributionPageOptionsDto extends PageOptionsDto {\n  @ApiPropertyOptional({\n    enum: ContributionOrderFieldsEnum,\n    enumName: \"RepoOrderFieldsEnum\",\n    default: ContributionOrderFieldsEnum.count,\n  })\n  @IsEnum(ContributionOrderFieldsEnum)\n  @IsOptional()\n  readonly orderBy?: ContributionOrderFieldsEnum = ContributionOrderFieldsEnum.count;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ContributionService.html":{"url":"injectables/ContributionService.html","title":"injectable - ContributionService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ContributionService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/contribution/contribution.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findAllByRepoId\n                            \n                            \n                                    Async\n                                findAllByUserLogin\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(contributionRepository: Repository, userRepository: Repository, pullRequestRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/contribution/contribution.service.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        contributionRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        pullRequestRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll(pageOptionsDto: ContributionPageOptionsDto, repoId?: number)\n                \n            \n\n\n            \n                \n                    Defined in src/contribution/contribution.service.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                ContributionPageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    repoId\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllByRepoId\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllByRepoId(repoId: number, range: number, prev_days_start_date: number)\n                \n            \n\n\n            \n                \n                    Defined in src/contribution/contribution.service.ts:91\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    repoId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    range\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    prev_days_start_date\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllByUserLogin\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllByUserLogin(repoId: number, login: string, range: number, prev_days_start_date: number)\n                \n            \n\n\n            \n                \n                    Defined in src/contribution/contribution.service.ts:47\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    repoId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    login\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    range\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    prev_days_start_date\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from \"@nestjs/common\";\nimport { Repository } from \"typeorm\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { DbPullRequest } from \"../pull-requests/entities/pull-request.entity\";\nimport { GetPrevDateISOString } from \"../common/util/datetimes\";\nimport { PageDto } from \"../common/dtos/page.dto\";\nimport { OrderDirectionEnum } from \"../common/constants/order-direction.constant\";\nimport { PageMetaDto } from \"../common/dtos/page-meta.dto\";\nimport { DbUser } from \"../user/user.entity\";\nimport { DbContribution } from \"./contribution.entity\";\nimport { ContributionOrderFieldsEnum, ContributionPageOptionsDto } from \"./dtos/contribution-page-options.dto\";\nimport { DbRepoLoginContributions } from \"./entities/repo-user-contributions.entity\";\n\n@Injectable()\nexport class ContributionService {\n  constructor(\n    @InjectRepository(DbContribution, \"ApiConnection\")\n    private contributionRepository: Repository,\n    @InjectRepository(DbUser, \"ApiConnection\")\n    private userRepository: Repository,\n    @InjectRepository(DbPullRequest, \"ApiConnection\")\n    private pullRequestRepository: Repository\n  ) {}\n\n  async findAll(pageOptionsDto: ContributionPageOptionsDto, repoId?: number): Promise> {\n    const queryBuilder = this.contributionRepository.createQueryBuilder(\"contribution\");\n    const orderField = pageOptionsDto.orderBy ?? ContributionOrderFieldsEnum.count;\n\n    if (repoId) {\n      queryBuilder.where(\"contribution.repo_id = :repoId\", { repoId });\n    }\n\n    queryBuilder\n      .addOrderBy(`\"${orderField}\"`, pageOptionsDto.orderDirection)\n      .addOrderBy(`\"contribution\".\"created_at\"`, OrderDirectionEnum.DESC)\n      .offset(pageOptionsDto.skip)\n      .limit(pageOptionsDto.limit);\n\n    const itemCount = await queryBuilder.getCount();\n    const entities = await queryBuilder.getMany();\n\n    const pageMetaDto = new PageMetaDto({ itemCount, pageOptionsDto });\n\n    return new PageDto(entities, pageMetaDto);\n  }\n\n  async findAllByUserLogin(\n    repoId: number,\n    login: string,\n    range: number,\n    prev_days_start_date: number\n  ): Promise {\n    const queryBuilder = this.userRepository.createQueryBuilder(\"user\");\n\n    const startDate = GetPrevDateISOString(prev_days_start_date);\n\n    queryBuilder\n      .select(\"login\")\n      .where(\"login = :login\", { login })\n      .addSelect(\n        `(\n          SELECT COALESCE(SUM(\"pull_requests\".\"commits\"), 0)\n          FROM \"pull_requests\"\n          WHERE \"pull_requests\".\"author_login\" = \"login\"\n            AND \"pull_requests\".\"repo_id\" = ${repoId}\n            AND '${startDate}'::TIMESTAMP >= \"pull_requests\".\"updated_at\"\n            AND '${startDate}'::TIMESTAMP - INTERVAL '${range} days'  {\n    const startDate = GetPrevDateISOString(prev_days_start_date);\n\n    const cteBuilder = this.pullRequestRepository\n      .createQueryBuilder(\"pull_requests\")\n      .select(\"pull_requests.author_login\", \"login\")\n      .addSelect(\"COALESCE(SUM(pull_requests.commits), 0)::INTEGER\", \"commits\")\n      .addSelect(\"COUNT(pull_requests.id)::INTEGER\", \"prs_created\")\n      .leftJoin(\"users\", \"users\", \"pull_requests.author_login = users.login\")\n      .where(`pull_requests.repo_id = ${repoId}`)\n      .andWhere(`'${startDate}'::TIMESTAMP >= \"pull_requests\".\"updated_at\"`)\n      .andWhere(`'${startDate}'::TIMESTAMP - INTERVAL '${range} days' \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ContributionsByProjectDto.html":{"url":"classes/ContributionsByProjectDto.html","title":"class - ContributionsByProjectDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ContributionsByProjectDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user-lists/dtos/contributions-by-project.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                    Optional\n                                range\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        range\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 30\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Range in days', default: 30, type: 'integer'})@Type(undefined)@IsIn(['7', '30', '90'])@IsInt()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-lists/dtos/contributions-by-project.dto.ts:15\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiPropertyOptional } from \"@nestjs/swagger\";\nimport { Type } from \"class-transformer\";\nimport { IsIn, IsInt, IsOptional } from \"class-validator\";\n\nexport class ContributionsByProjectDto {\n  @ApiPropertyOptional({\n    description: \"Range in days\",\n    default: 30,\n    type: \"integer\",\n  })\n  @Type(() => Number)\n  @IsIn([7, 30, 90])\n  @IsInt()\n  @IsOptional()\n  readonly range?: number = 30;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ContributionsPageDto.html":{"url":"classes/ContributionsPageDto.html","title":"class - ContributionsPageDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ContributionsPageDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user-lists/dtos/contributions-page.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                data\n                            \n                            \n                                    Readonly\n                                meta\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(data: T[], meta: PageMetaDto)\n                    \n                \n                        \n                            \n                                Defined in src/user-lists/dtos/contributions-page.dto.ts:16\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        data\n                                                  \n                                                        \n                                                                    T[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        meta\n                                                  \n                                                        \n                                                                        PageMetaDto\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        data\n                        \n                    \n                \n            \n                \n                    \n                        Type :     T[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsArray()@ApiProperty({isArray: true})@ValidateNested({each: true})@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-lists/dtos/contributions-page.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        meta\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PageMetaDto\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: () => PageMetaDto})@ValidateNested()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-lists/dtos/contributions-page.dto.ts:16\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsArray, ValidateNested } from \"class-validator\";\nimport { Type } from \"class-transformer\";\nimport { PageMetaDto } from \"../../common/dtos/page-meta.dto\";\n\nexport class ContributionsPageDto {\n  @IsArray()\n  @ApiProperty({ isArray: true })\n  @ValidateNested({ each: true })\n  @Type(() => Array)\n  readonly data: T[];\n\n  @ApiProperty({ type: () => PageMetaDto })\n  @ValidateNested()\n  @Type(() => PageMetaDto)\n  readonly meta: PageMetaDto;\n\n  constructor(data: T[], meta: PageMetaDto) {\n    this.data = data;\n    this.meta = meta;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ContributionsTimeframeDto.html":{"url":"classes/ContributionsTimeframeDto.html","title":"class - ContributionsTimeframeDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ContributionsTimeframeDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user-lists/dtos/contributions-timeframe.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                contributorType\n                            \n                            \n                                    Readonly\n                                    Optional\n                                range\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        contributorType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserListContributorStatsTypeEnum\n\n                    \n                \n                \n                    \n                        Default value : UserListContributorStatsTypeEnum.all\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: UserListContributorStatsTypeEnum, enumName: 'UserListContributorStatsTypeEnum', default: undefined})@IsEnum(UserListContributorStatsTypeEnum)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-lists/dtos/contributions-timeframe.dto.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        range\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 30\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Range in days', default: 30, type: 'integer'})@Type(undefined)@IsIn(['7', '30', '90'])@IsInt()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-lists/dtos/contributions-timeframe.dto.ts:17\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEnum, IsIn, IsInt, IsOptional } from \"class-validator\";\n\nimport { ApiPropertyOptional } from \"@nestjs/swagger\";\nimport { Type } from \"class-transformer\";\nimport { UserListContributorStatsTypeEnum } from \"./most-active-contributors.dto\";\n\nexport class ContributionsTimeframeDto {\n  @ApiPropertyOptional({\n    description: \"Range in days\",\n    default: 30,\n    type: \"integer\",\n  })\n  @Type(() => Number)\n  @IsIn([7, 30, 90])\n  @IsInt()\n  @IsOptional()\n  readonly range?: number = 30;\n\n  @ApiPropertyOptional({\n    enum: UserListContributorStatsTypeEnum,\n    enumName: \"UserListContributorStatsTypeEnum\",\n    default: UserListContributorStatsTypeEnum.all,\n  })\n  @IsEnum(UserListContributorStatsTypeEnum)\n  @IsOptional()\n  contributorType?: UserListContributorStatsTypeEnum = UserListContributorStatsTypeEnum.all;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Contributor.html":{"url":"classes/Contributor.html","title":"class - Contributor","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Contributor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user-lists/dtos/create-user-list.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                id\n                            \n                            \n                                login\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/user-lists/dtos/create-user-list.dto.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        login\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/user-lists/dtos/create-user-list.dto.ts:7\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { Type } from \"class-transformer\";\nimport { IsArray, IsBoolean, IsString } from \"class-validator\";\n\nexport class Contributor {\n  id: number;\n  login: string;\n}\n\nexport class CreateUserListDto {\n  @ApiProperty({\n    description: \"List Name\",\n    type: String,\n    example: \"My List\",\n  })\n  @IsString()\n  name: string;\n\n  @ApiProperty({\n    description: \"List Visibility\",\n    type: Boolean,\n    example: false,\n  })\n  @IsBoolean()\n  is_public: boolean;\n\n  @ApiProperty({\n    description: \"An array of contributor objects\",\n    isArray: true,\n    example: [{ id: 12345, login: \"sauceduser\" }],\n  })\n  @IsArray()\n  @Type(() => Contributor)\n  contributors: { id: number; login: string }[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ContributorController.html":{"url":"controllers/ContributorController.html","title":"controller - ContributorController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ContributorController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/contributor/contributor.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                contributors\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                searchAllPullRequestContributors\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        searchAllPullRequestContributors\n                        \n                    \n                \n            \n            \n                \n                    \n                    searchAllPullRequestContributors(pageOptionsDto: PullRequestContributorOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/search')@ApiOperation({operationId: 'searchAllPullRequestContributors', summary: 'Searches contributors from pull requests using filters and paginates them'})@ApiPaginatedResponse(DbPullRequestContributor)@ApiOkResponse({type: DbPullRequestContributor})\n                \n            \n\n            \n                \n                    Defined in src/contributor/contributor.controller.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PullRequestContributorOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Query } from \"@nestjs/common\";\nimport { ApiOperation, ApiOkResponse, ApiTags } from \"@nestjs/swagger\";\n\nimport { ApiPaginatedResponse } from \"../common/decorators/api-paginated-response.decorator\";\nimport { PageDto } from \"../common/dtos/page.dto\";\nimport { PullRequestService } from \"../pull-requests/pull-request.service\";\nimport { DbPullRequestContributor } from \"../pull-requests/dtos/pull-request-contributor.dto\";\nimport { PullRequestContributorOptionsDto } from \"../pull-requests/dtos/pull-request-contributor-options.dto\";\n\n@Controller(\"contributors\")\n@ApiTags(\"Contributors service\")\nexport class ContributorController {\n  constructor(private readonly pullRequestService: PullRequestService) {}\n\n  @Get(\"/search\")\n  @ApiOperation({\n    operationId: \"searchAllPullRequestContributors\",\n    summary: \"Searches contributors from pull requests using filters and paginates them\",\n  })\n  @ApiPaginatedResponse(DbPullRequestContributor)\n  @ApiOkResponse({ type: DbPullRequestContributor })\n  async searchAllPullRequestContributors(\n    @Query() pageOptionsDto: PullRequestContributorOptionsDto\n  ): Promise> {\n    return this.pullRequestService.findAllContributorsWithFilters(pageOptionsDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ContributorInsightsController.html":{"url":"controllers/ContributorInsightsController.html","title":"controller - ContributorInsightsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ContributorInsightsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/contributor/contributor-insights.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                contributors/insights\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                findAllChurnPullRequestContributors\n                            \n                            \n                                    Async\n                                findAllRecentPullRequestContributors\n                            \n                            \n                                    Async\n                                findAllRepeatPullRequestContributors\n                            \n                            \n                                    Async\n                                newPullRequestContributors\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllChurnPullRequestContributors\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllChurnPullRequestContributors(pageOptionsDto: PullRequestContributorInsightsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/churn')@ApiOperation({operationId: 'findAllChurnPullRequestContributors', summary: 'Gets all recent churned contributors for the last 30 days based on repo IDs'})@ApiPaginatedResponse(DbPullRequestContributor)@ApiOkResponse({type: DbPullRequestContributor})\n                \n            \n\n            \n                \n                    Defined in src/contributor/contributor-insights.controller.ts:48\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PullRequestContributorInsightsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllRecentPullRequestContributors\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllRecentPullRequestContributors(pageOptionsDto: PullRequestContributorInsightsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/recent')@ApiOperation({operationId: 'findAllRecentPullRequestContributors', summary: 'Gets all recent contributors for the last 30 days based on repo IDs'})@ApiPaginatedResponse(DbPullRequestContributor)@ApiOkResponse({type: DbPullRequestContributor})\n                \n            \n\n            \n                \n                    Defined in src/contributor/contributor-insights.controller.ts:35\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PullRequestContributorInsightsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllRepeatPullRequestContributors\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllRepeatPullRequestContributors(pageOptionsDto: PullRequestContributorInsightsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/repeat')@ApiOperation({operationId: 'findAllRepeatPullRequestContributors', summary: 'Gets all recent repeat contributors for the last 30 days based on repo IDs'})@ApiPaginatedResponse(DbPullRequestContributor)@ApiOkResponse({type: DbPullRequestContributor})\n                \n            \n\n            \n                \n                    Defined in src/contributor/contributor-insights.controller.ts:61\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PullRequestContributorInsightsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        newPullRequestContributors\n                        \n                    \n                \n            \n            \n                \n                    \n                    newPullRequestContributors(pageOptionsDto: PullRequestContributorInsightsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/new')@ApiOperation({operationId: 'newPullRequestContributors', summary: 'Gets new contributors given a date range for repo IDs'})@ApiPaginatedResponse(DbPullRequestContributor)@ApiOkResponse({type: DbPullRequestContributor})\n                \n            \n\n            \n                \n                    Defined in src/contributor/contributor-insights.controller.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PullRequestContributorInsightsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Query } from \"@nestjs/common\";\nimport { ApiOperation, ApiOkResponse, ApiTags } from \"@nestjs/swagger\";\n\nimport { ApiPaginatedResponse } from \"../common/decorators/api-paginated-response.decorator\";\nimport { PageDto } from \"../common/dtos/page.dto\";\nimport { PullRequestService } from \"../pull-requests/pull-request.service\";\nimport { DbPullRequestContributor } from \"../pull-requests/dtos/pull-request-contributor.dto\";\nimport { PullRequestContributorInsightsDto } from \"../pull-requests/dtos/pull-request-contributor-insights.dto\";\n\n@Controller(\"contributors/insights\")\n@ApiTags(\"Contributors service\")\nexport class ContributorInsightsController {\n  constructor(private readonly pullRequestService: PullRequestService) {}\n\n  @Get(\"/new\")\n  @ApiOperation({\n    operationId: \"newPullRequestContributors\",\n    summary: \"Gets new contributors given a date range for repo IDs\",\n  })\n  @ApiPaginatedResponse(DbPullRequestContributor)\n  @ApiOkResponse({ type: DbPullRequestContributor })\n  async newPullRequestContributors(\n    @Query() pageOptionsDto: PullRequestContributorInsightsDto\n  ): Promise> {\n    return this.pullRequestService.findNewContributorsInTimeRange(pageOptionsDto);\n  }\n\n  @Get(\"/recent\")\n  @ApiOperation({\n    operationId: \"findAllRecentPullRequestContributors\",\n    summary: \"Gets all recent contributors for the last 30 days based on repo IDs\",\n  })\n  @ApiPaginatedResponse(DbPullRequestContributor)\n  @ApiOkResponse({ type: DbPullRequestContributor })\n  async findAllRecentPullRequestContributors(\n    @Query() pageOptionsDto: PullRequestContributorInsightsDto\n  ): Promise> {\n    return this.pullRequestService.findAllRecentContributors(pageOptionsDto);\n  }\n\n  @Get(\"/churn\")\n  @ApiOperation({\n    operationId: \"findAllChurnPullRequestContributors\",\n    summary: \"Gets all recent churned contributors for the last 30 days based on repo IDs\",\n  })\n  @ApiPaginatedResponse(DbPullRequestContributor)\n  @ApiOkResponse({ type: DbPullRequestContributor })\n  async findAllChurnPullRequestContributors(\n    @Query() pageOptionsDto: PullRequestContributorInsightsDto\n  ): Promise> {\n    return this.pullRequestService.findAllChurnContributors(pageOptionsDto);\n  }\n\n  @Get(\"/repeat\")\n  @ApiOperation({\n    operationId: \"findAllRepeatPullRequestContributors\",\n    summary: \"Gets all recent repeat contributors for the last 30 days based on repo IDs\",\n  })\n  @ApiPaginatedResponse(DbPullRequestContributor)\n  @ApiOkResponse({ type: DbPullRequestContributor })\n  async findAllRepeatPullRequestContributors(\n    @Query() pageOptionsDto: PullRequestContributorInsightsDto\n  ): Promise> {\n    return this.pullRequestService.findAllRepeatContributors(pageOptionsDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ContributorModule.html":{"url":"modules/ContributorModule.html","title":"module - ContributorModule","body":"\n                   \n\n\n\n\n    Modules\n    ContributorModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_ContributorModule\n\n\n\ncluster_ContributorModule_imports\n\n\n\n\nPullRequestModule\n\nPullRequestModule\n\n\n\nContributorModule\n\nContributorModule\n\nContributorModule -->\n\nPullRequestModule->ContributorModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/contributor/contributor.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Controllers\n                    \n                        \n                            ContributorController\n                        \n                        \n                            ContributorInsightsController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            PullRequestModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\n\nimport { PullRequestModule } from \"../pull-requests/pull-request.module\";\nimport { DbPullRequest } from \"../pull-requests/entities/pull-request.entity\";\nimport { ContributorController } from \"./contributor.controller\";\nimport { ContributorInsightsController } from \"./contributor-insights.controller\";\n\n@Module({\n  imports: [TypeOrmModule.forFeature([DbPullRequest], \"ApiConnection\"), PullRequestModule],\n  controllers: [ContributorController, ContributorInsightsController],\n})\nexport class ContributorModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ContributorPullRequestsDto.html":{"url":"classes/ContributorPullRequestsDto.html","title":"class - ContributorPullRequestsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ContributorPullRequestsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dtos/contributor-prs.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PageOptionsDto\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                rangeType\n                            \n                            \n                                    Readonly\n                                    Optional\n                                limit\n                            \n                            \n                                    Readonly\n                                    Optional\n                                orderDirection\n                            \n                            \n                                    Readonly\n                                    Optional\n                                page\n                            \n                            \n                                    Readonly\n                                    Optional\n                                prev_days_start_date\n                            \n                            \n                                    Readonly\n                                    Optional\n                                range\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        rangeType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         RangeTypeEnum\n\n                    \n                \n                \n                    \n                        Default value : RangeTypeEnum.Recent\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: RangeTypeEnum, enumName: 'OrderDirectionEnum', default: undefined})@IsEnum(RangeTypeEnum)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/contributor-prs.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 50\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, maximum: 1000, default: 10, type: 'integer'})@Type(undefined)@IsInt()@Min(1)@Max(10000)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:30\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        orderDirection\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OrderDirectionEnum\n\n                    \n                \n                \n                    \n                        Default value : OrderDirectionEnum.DESC\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: OrderDirectionEnum, enumName: 'OrderDirectionEnum', default: undefined})@IsEnum(OrderDirectionEnum)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:35\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, default: 1, type: 'integer'})@Type(undefined)@IsInt()@Min(1)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:17\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        prev_days_start_date\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 0\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Number of days in the past to start range block', default: 0, type: 'integer'})@Type(undefined)@IsIn(['0', '7', '30', '90'])@IsInt()@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:57\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        range\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 30\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Range in days', default: 30, type: 'integer'})@Type(undefined)@IsIn(['7', '30', '90'])@IsInt()@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:46\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiPropertyOptional } from \"@nestjs/swagger\";\nimport { IsEnum, IsOptional } from \"class-validator\";\n\nimport { PageOptionsDto } from \"../../common/dtos/page-options.dto\";\n\nexport enum RangeTypeEnum {\n  All = \"all\",\n  Recent = \"recent\",\n}\n\nexport class ContributorPullRequestsDto extends PageOptionsDto {\n  @ApiPropertyOptional({ enum: RangeTypeEnum, enumName: \"OrderDirectionEnum\", default: RangeTypeEnum.Recent })\n  @IsEnum(RangeTypeEnum)\n  @IsOptional()\n  rangeType?: RangeTypeEnum = RangeTypeEnum.Recent;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CouponModule.html":{"url":"modules/CouponModule.html","title":"module - CouponModule","body":"\n                   \n\n\n\n\n    Modules\n    CouponModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_CouponModule\n\n\n\ncluster_CouponModule_exports\n\n\n\ncluster_CouponModule_providers\n\n\n\n\nCouponService \n\nCouponService \n\n\n\nCouponModule\n\nCouponModule\n\nCouponService  -->\n\nCouponModule->CouponService \n\n\n\n\n\nCouponService\n\nCouponService\n\nCouponModule -->\n\nCouponService->CouponModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/coupon/coupon.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CouponService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            CouponService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\n\nimport { DbCoupon } from \"./entities/coupon.entity\";\nimport { CouponService } from \"./coupon.service\";\n\n@Module({\n  imports: [TypeOrmModule.forFeature([DbCoupon], \"ApiConnection\")],\n  providers: [CouponService],\n  exports: [CouponService],\n})\nexport class CouponModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CouponService.html":{"url":"injectables/CouponService.html","title":"injectable - CouponService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CouponService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/coupon/coupon.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                baseQueryBuilder\n                            \n                            \n                                    Async\n                                deleteCoupon\n                            \n                            \n                                    Async\n                                findCoupon\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(couponRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/coupon/coupon.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        couponRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        baseQueryBuilder\n                        \n                    \n                \n            \n            \n                \nbaseQueryBuilder()\n                \n            \n\n\n            \n                \n                    Defined in src/coupon/coupon.service.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteCoupon\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteCoupon(code: string)\n                \n            \n\n\n            \n                \n                    Defined in src/coupon/coupon.service.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    code\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findCoupon\n                        \n                    \n                \n            \n            \n                \n                    \n                    findCoupon(code: string)\n                \n            \n\n\n            \n                \n                    Defined in src/coupon/coupon.service.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    code\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from \"@nestjs/common\";\nimport { Repository } from \"typeorm\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\n\nimport { DbCoupon } from \"./entities/coupon.entity\";\n\n@Injectable()\nexport class CouponService {\n  constructor(\n    @InjectRepository(DbCoupon, \"ApiConnection\")\n    private couponRepository: Repository\n  ) {}\n\n  baseQueryBuilder() {\n    const builder = this.couponRepository.createQueryBuilder(\"coupons\").withDeleted();\n\n    return builder;\n  }\n\n  async findCoupon(code: string) {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder.where(\"code = :code\", { code }).andWhere(`(expired_at IS NULL OR expired_at > now())`);\n\n    const entity = await queryBuilder.getOne();\n\n    if (!entity) {\n      throw new NotFoundException(\"The coupon does not exist\");\n    }\n\n    return entity;\n  }\n\n  async deleteCoupon(code: string) {\n    return this.couponRepository.softDelete(code);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateBlogSummaryDto.html":{"url":"classes/CreateBlogSummaryDto.html","title":"class - CreateBlogSummaryDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateBlogSummaryDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/blogs/dtos/create-blog-summary.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                blogMarkdown\n                            \n                            \n                                blogTitle\n                            \n                            \n                                language\n                            \n                            \n                                summaryLength\n                            \n                            \n                                temperature\n                            \n                            \n                                tone\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        blogMarkdown\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Blog Markdown', type: String})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/blogs/dtos/create-blog-summary.dto.ts:56\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        blogTitle\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Blog Title', type: String})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/blogs/dtos/create-blog-summary.dto.ts:49\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        language\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Summary Language', type: String, example: 'english', default: 'english'})@IsString()@IsIn(['english', 'spanish', 'french', 'german', 'italian', 'portuguese', 'dutch', 'russian', 'chinese', 'korean'])\n                        \n                    \n                \n                    \n                        \n                                Defined in src/blogs/dtos/create-blog-summary.dto.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        summaryLength\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Summary Length', type: 'integer', example: 250})@IsNumber()@Min(100)@Max(500)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/blogs/dtos/create-blog-summary.dto.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        temperature\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Summary Temperature', type: 'integer', example: 7})@IsNumber()@Min(0)@Max(10)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/blogs/dtos/create-blog-summary.dto.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        tone\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Summary Tone', type: String, example: 'formal'})@IsString()@IsIn(['exciting', 'persuasive', 'informative', 'humorous', 'formal'])\n                        \n                    \n                \n                    \n                        \n                                Defined in src/blogs/dtos/create-blog-summary.dto.ts:32\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsIn, IsNumber, IsString, Max, Min } from \"class-validator\";\n\nexport class CreateBlogSummaryDto {\n  @ApiProperty({\n    description: \"Summary Length\",\n    type: \"integer\",\n    example: 250,\n  })\n  @IsNumber()\n  @Min(100)\n  @Max(500)\n  summaryLength: number;\n\n  @ApiProperty({\n    description: \"Summary Temperature\",\n    type: \"integer\",\n    example: 7,\n  })\n  @IsNumber()\n  @Min(0)\n  @Max(10)\n  temperature: number;\n\n  @ApiProperty({\n    description: \"Summary Tone\",\n    type: String,\n    example: \"formal\",\n  })\n  @IsString()\n  @IsIn([\"exciting\", \"persuasive\", \"informative\", \"humorous\", \"formal\"])\n  tone: string;\n\n  @ApiProperty({\n    description: \"Summary Language\",\n    type: String,\n    example: \"english\",\n    default: \"english\",\n  })\n  @IsString()\n  @IsIn([\"english\", \"spanish\", \"french\", \"german\", \"italian\", \"portuguese\", \"dutch\", \"russian\", \"chinese\", \"korean\"])\n  language: string;\n\n  @ApiProperty({\n    description: \"Blog Title\",\n    type: String,\n  })\n  @IsString()\n  blogTitle: string;\n\n  @ApiProperty({\n    description: \"Blog Markdown\",\n    type: String,\n  })\n  @IsString()\n  blogMarkdown: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateEndorsementDto.html":{"url":"classes/CreateEndorsementDto.html","title":"class - CreateEndorsementDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateEndorsementDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/endorsement/dto/create-endorsement.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                creator_user_id\n                            \n                            \n                                    Public\n                                recipient_user_id\n                            \n                            \n                                    Public\n                                repo_id\n                            \n                            \n                                    Public\n                                    Optional\n                                source_comment_url\n                            \n                            \n                                    Public\n                                source_context_url\n                            \n                            \n                                    Public\n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        creator_user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Endorsement Creator User ID', type: 'integer', example: 42211})@IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/endorsement/dto/create-endorsement.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        recipient_user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Endorsement Recipient User ID', type: 'integer', example: 5736810})@IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/endorsement/dto/create-endorsement.dto.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        repo_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Repository ID', type: 'integer', example: 78133})@IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/endorsement/dto/create-endorsement.dto.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        source_comment_url\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Endorsement Source Comment URL', default: ''})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/endorsement/dto/create-endorsement.dto.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        source_context_url\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Endorsement Source Context URL', example: 'https://github.com/open-sauced/insights/pulls'})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/endorsement/dto/create-endorsement.dto.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Endorsement Type', example: 'doc'})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/endorsement/dto/create-endorsement.dto.ts:49\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from \"@nestjs/swagger\";\nimport { IsString, IsNumber, IsOptional } from \"class-validator\";\n\nexport class CreateEndorsementDto {\n  @ApiProperty({\n    description: \"Endorsement Creator User ID\",\n    type: \"integer\",\n    example: 42211,\n  })\n  @IsNumber()\n  public creator_user_id: number;\n\n  @ApiProperty({\n    description: \"Endorsement Recipient User ID\",\n    type: \"integer\",\n    example: 5736810,\n  })\n  @IsNumber()\n  public recipient_user_id: number;\n\n  @ApiProperty({\n    description: \"Repository ID\",\n    type: \"integer\",\n    example: 78133,\n  })\n  @IsNumber()\n  public repo_id: number;\n\n  @ApiPropertyOptional({\n    description: \"Endorsement Source Comment URL\",\n    default: \"\",\n  })\n  @IsString()\n  @IsOptional()\n  public source_comment_url?: string;\n\n  @ApiProperty({\n    description: \"Endorsement Source Context URL\",\n    example: \"https://github.com/open-sauced/insights/pulls\",\n  })\n  @IsString()\n  public source_context_url: string;\n\n  @ApiProperty({\n    description: \"Endorsement Type\",\n    example: \"doc\",\n  })\n  @IsString()\n  public type: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateInsightDto.html":{"url":"classes/CreateInsightDto.html","title":"class - CreateInsightDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateInsightDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/insight/dtos/create-insight.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                is_public\n                            \n                            \n                                name\n                            \n                            \n                                repos\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        is_public\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Insight Page Visibility', type: Boolean, example: false})@IsBoolean()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/dtos/create-insight.dto.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Insight Page Name', type: String, example: 'My Team'})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/dtos/create-insight.dto.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        repos\n                        \n                    \n                \n            \n                \n                    \n                        Type :         RepoInfo[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'An array of repository information objects', isArray: true, type: RepoInfo, example: undefined})@Type(undefined)@IsArray()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/dtos/create-insight.dto.ts:32\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { Type } from \"class-transformer\";\nimport { IsArray, IsBoolean, IsString } from \"class-validator\";\n\nimport { RepoInfo } from \"../../repo/dtos/repo-info.dto\";\n\nexport class CreateInsightDto {\n  @ApiProperty({\n    description: \"Insight Page Name\",\n    type: String,\n    example: \"My Team\",\n  })\n  @IsString()\n  name: string;\n\n  @ApiProperty({\n    description: \"Insight Page Visibility\",\n    type: Boolean,\n    example: false,\n  })\n  @IsBoolean()\n  is_public: boolean;\n\n  @ApiProperty({\n    description: \"An array of repository information objects\",\n    isArray: true,\n    type: RepoInfo,\n    example: [{ id: 797, full_name: \"open-sauced/insights\" }],\n  })\n  @Type(() => RepoInfo)\n  @IsArray()\n  repos: RepoInfo[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateInsightMemberDto.html":{"url":"classes/CreateInsightMemberDto.html","title":"class - CreateInsightMemberDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateInsightMemberDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/insight/dtos/create-insight-member.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Insight Team Member Invite Email', type: String, example: 'hello@opensauced.pizza'})@IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/dtos/create-insight-member.dto.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsEmail } from \"class-validator\";\n\nexport class CreateInsightMemberDto {\n  @ApiProperty({\n    description: \"Insight Team Member Invite Email\",\n    type: String,\n    example: \"hello@opensauced.pizza\",\n  })\n  @IsEmail()\n  email: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateIssueSummaryDto.html":{"url":"classes/CreateIssueSummaryDto.html","title":"class - CreateIssueSummaryDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateIssueSummaryDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issues/dtos/create-issue-summary.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                issueComments\n                            \n                            \n                                issueDescription\n                            \n                            \n                                issueTitle\n                            \n                            \n                                language\n                            \n                            \n                                summaryLength\n                            \n                            \n                                temperature\n                            \n                            \n                                tone\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        issueComments\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Issue Comments', type: String})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issues/dtos/create-issue-summary.dto.ts:63\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        issueDescription\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Issue Description', type: String})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issues/dtos/create-issue-summary.dto.ts:56\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        issueTitle\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Issue Title', type: String})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issues/dtos/create-issue-summary.dto.ts:49\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        language\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Summary Language', type: String, example: 'english', default: 'english'})@IsString()@IsIn(['english', 'spanish', 'french', 'german', 'italian', 'portuguese', 'dutch', 'russian', 'chinese', 'korean'])\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issues/dtos/create-issue-summary.dto.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        summaryLength\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Summary Length', type: 'integer', example: 250})@IsNumber()@Min(100)@Max(500)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issues/dtos/create-issue-summary.dto.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        temperature\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Summary Temperature', type: 'integer', example: 7})@IsNumber()@Min(0)@Max(10)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issues/dtos/create-issue-summary.dto.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        tone\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Summary Tone', type: String, example: 'formal'})@IsString()@IsIn(['exciting', 'persuasive', 'informative', 'humorous', 'formal'])\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issues/dtos/create-issue-summary.dto.ts:32\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsIn, IsNumber, IsString, Max, Min } from \"class-validator\";\n\nexport class CreateIssueSummaryDto {\n  @ApiProperty({\n    description: \"Summary Length\",\n    type: \"integer\",\n    example: 250,\n  })\n  @IsNumber()\n  @Min(100)\n  @Max(500)\n  summaryLength: number;\n\n  @ApiProperty({\n    description: \"Summary Temperature\",\n    type: \"integer\",\n    example: 7,\n  })\n  @IsNumber()\n  @Min(0)\n  @Max(10)\n  temperature: number;\n\n  @ApiProperty({\n    description: \"Summary Tone\",\n    type: String,\n    example: \"formal\",\n  })\n  @IsString()\n  @IsIn([\"exciting\", \"persuasive\", \"informative\", \"humorous\", \"formal\"])\n  tone: string;\n\n  @ApiProperty({\n    description: \"Summary Language\",\n    type: String,\n    example: \"english\",\n    default: \"english\",\n  })\n  @IsString()\n  @IsIn([\"english\", \"spanish\", \"french\", \"german\", \"italian\", \"portuguese\", \"dutch\", \"russian\", \"chinese\", \"korean\"])\n  language: string;\n\n  @ApiProperty({\n    description: \"Issue Title\",\n    type: String,\n  })\n  @IsString()\n  issueTitle: string;\n\n  @ApiProperty({\n    description: \"Issue Description\",\n    type: String,\n  })\n  @IsString()\n  issueDescription: string;\n\n  @ApiProperty({\n    description: \"Issue Comments\",\n    type: String,\n  })\n  @IsString()\n  issueComments: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateLogDto.html":{"url":"classes/CreateLogDto.html","title":"class - CreateLogDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateLogDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/log/dtos/create-log.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                    Optional\n                                context\n                            \n                            \n                                    Readonly\n                                    Optional\n                                level\n                            \n                            \n                                    Readonly\n                                    Optional\n                                message\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        context\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/log/dtos/create-log.dto.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        level\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/log/dtos/create-log.dto.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        message\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/log/dtos/create-log.dto.ts:10\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsOptional, IsString } from \"class-validator\";\n\nexport class CreateLogDto {\n  @IsOptional()\n  @IsString()\n  readonly context?: string;\n\n  @IsOptional()\n  @IsString()\n  readonly message?: string;\n\n  @IsOptional()\n  @IsString()\n  readonly level?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserCollaborationDto.html":{"url":"classes/CreateUserCollaborationDto.html","title":"class - CreateUserCollaborationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserCollaborationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dtos/create-user-collaboration.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                message\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        message\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Collaboration Request Message', type: String, example: 'Come collaborate on a cool project'})@IsString()@MinLength(20)@MaxLength(500)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/create-user-collaboration.dto.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Collaboration Recipient Username', type: String, example: 'bdougie'})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/create-user-collaboration.dto.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsString, MaxLength, MinLength } from \"class-validator\";\n\nexport class CreateUserCollaborationDto {\n  @ApiProperty({\n    description: \"Collaboration Recipient Username\",\n    type: String,\n    example: \"bdougie\",\n  })\n  @IsString()\n  username: string;\n\n  @ApiProperty({\n    description: \"Collaboration Request Message\",\n    type: String,\n    example: \"Come collaborate on a cool project\",\n  })\n  @IsString()\n  @MinLength(20)\n  @MaxLength(500)\n  message: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserHighlightDto.html":{"url":"classes/CreateUserHighlightDto.html","title":"class - CreateUserHighlightDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserHighlightDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dtos/create-user-highlight.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                highlight\n                            \n                            \n                                    Public\n                                    Optional\n                                shipped_at\n                            \n                            \n                                    Public\n                                taggedRepos\n                            \n                            \n                                    Public\n                                    Optional\n                                title\n                            \n                            \n                                    Public\n                                type\n                            \n                            \n                                    Public\n                                url\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        highlight\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Highlight Text', type: String, example: My first PR to Open Sauced!})@IsString()@MinLength(3)@MaxLength(500)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/create-user-highlight.dto.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        shipped_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Shipped Date', type: String, example: 2023-01-19 13:24:51.000000})@IsDateString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/create-user-highlight.dto.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        taggedRepos\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'An array of full-names of tagged repositories', example: undefined, type: 'string', isArray: true})@IsArray()@IsString({each: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/create-user-highlight.dto.ts:58\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Highlight Title', type: String, example: My first PR!})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/create-user-highlight.dto.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"pull_request\"\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Highlight type', type: String, example: 'pull_request'})@IsString()@IsIn(['pull_request', 'blog_post', 'issue', 'milestone'])\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/create-user-highlight.dto.ts:48\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        url\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Highlight PR URL', type: String, example: 'github.com/open-sauced/insights/pull/1'})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/create-user-highlight.dto.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from \"@nestjs/swagger\";\nimport { IsArray, IsDateString, IsIn, IsOptional, IsString, MaxLength, MinLength } from \"class-validator\";\n\nexport class CreateUserHighlightDto {\n  @ApiProperty({\n    description: \"Highlight PR URL\",\n    type: String,\n    example: \"github.com/open-sauced/insights/pull/1\",\n  })\n  @IsString()\n  public url: string;\n\n  @ApiPropertyOptional({\n    description: \"Highlight Title\",\n    type: String,\n    example: `My first PR!`,\n  })\n  @IsOptional()\n  @IsString()\n  public title?: string;\n\n  @ApiProperty({\n    description: \"Highlight Text\",\n    type: String,\n    example: `My first PR to Open Sauced!`,\n  })\n  @IsString()\n  @MinLength(3)\n  @MaxLength(500)\n  public highlight: string;\n\n  @ApiPropertyOptional({\n    description: \"Shipped Date\",\n    type: String,\n    example: `2023-01-19 13:24:51.000000`,\n  })\n  @IsDateString()\n  @IsOptional()\n  public shipped_at?: string;\n\n  @ApiProperty({\n    description: \"Highlight type\",\n    type: String,\n    example: \"pull_request\",\n  })\n  @IsString()\n  @IsIn([\"pull_request\", \"blog_post\", \"issue\", \"milestone\"])\n  public type = \"pull_request\";\n\n  @ApiProperty({\n    description: \"An array of full-names of tagged repositories\",\n    example: [\"open-sauced/insights\", \"open-sauced/ai\"],\n    type: \"string\",\n    isArray: true,\n  })\n  @IsArray()\n  @IsString({ each: true })\n  public taggedRepos: string[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserListDto.html":{"url":"classes/CreateUserListDto.html","title":"class - CreateUserListDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserListDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user-lists/dtos/create-user-list.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                contributors\n                            \n                            \n                                is_public\n                            \n                            \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        contributors\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'An array of contributor objects', isArray: true, example: undefined})@IsArray()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-lists/dtos/create-user-list.dto.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        is_public\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'List Visibility', type: Boolean, example: false})@IsBoolean()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-lists/dtos/create-user-list.dto.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'List Name', type: String, example: 'My List'})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-lists/dtos/create-user-list.dto.ts:17\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { Type } from \"class-transformer\";\nimport { IsArray, IsBoolean, IsString } from \"class-validator\";\n\nexport class Contributor {\n  id: number;\n  login: string;\n}\n\nexport class CreateUserListDto {\n  @ApiProperty({\n    description: \"List Name\",\n    type: String,\n    example: \"My List\",\n  })\n  @IsString()\n  name: string;\n\n  @ApiProperty({\n    description: \"List Visibility\",\n    type: Boolean,\n    example: false,\n  })\n  @IsBoolean()\n  is_public: boolean;\n\n  @ApiProperty({\n    description: \"An array of contributor objects\",\n    isArray: true,\n    example: [{ id: 12345, login: \"sauceduser\" }],\n  })\n  @IsArray()\n  @Type(() => Contributor)\n  contributors: { id: number; login: string }[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CustomLogger.html":{"url":"injectables/CustomLogger.html","title":"injectable - CustomLogger","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CustomLogger\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/log/custom-logger.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    ConsoleLogger\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logsService\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                debug\n                            \n                            \n                                    Async\n                                error\n                            \n                            \n                                    Async\n                                log\n                            \n                            \n                                    Async\n                                verbose\n                            \n                            \n                                    Async\n                                warn\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(context: string, options: ConsoleLoggerOptions, configService: ConfigService, logsService: LogService)\n                    \n                \n                        \n                            \n                                Defined in src/log/custom-logger.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        context\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        options\n                                                  \n                                                        \n                                                                    ConsoleLoggerOptions\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        logsService\n                                                  \n                                                        \n                                                                        LogService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        debug\n                        \n                    \n                \n            \n            \n                \n                    \n                    debug(message: string, context?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/log/custom-logger.ts:49\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    context\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        error\n                        \n                    \n                \n            \n            \n                \n                    \n                    error(message: string, stack?: string, context?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/log/custom-logger.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    stack\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    context\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        log\n                        \n                    \n                \n            \n            \n                \n                    \n                    log(message: string, context?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/log/custom-logger.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    context\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        verbose\n                        \n                    \n                \n            \n            \n                \n                    \n                    verbose(message: string, context?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/log/custom-logger.ts:59\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    context\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        warn\n                        \n                    \n                \n            \n            \n                \n                    \n                    warn(message: string, context?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/log/custom-logger.ts:39\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    context\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logsService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         LogService\n\n                    \n                \n                    \n                        \n                                Defined in src/log/custom-logger.ts:8\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, ConsoleLogger } from \"@nestjs/common\";\nimport { ConsoleLoggerOptions } from \"@nestjs/common/services/console-logger.service\";\nimport { ConfigService } from \"@nestjs/config\";\nimport { LogService } from \"./log.service\";\n\n@Injectable()\nclass CustomLogger extends ConsoleLogger {\n  private readonly logsService: LogService;\n\n  constructor(context: string, options: ConsoleLoggerOptions, configService: ConfigService, logsService: LogService) {\n    super(context, {\n      ...options,\n      logLevels: [\"error\", \"warn\", \"log\", \"verbose\", \"debug\"],\n    });\n\n    this.logsService = logsService;\n  }\n\n  async log(message: string, context?: string) {\n    super.log.apply(this, [message, context]);\n\n    return this.logsService.createLog({\n      message,\n      context,\n      level: \"log\",\n    });\n  }\n\n  async error(message: string, stack?: string, context?: string) {\n    super.error.apply(this, [message, stack, context]);\n\n    return this.logsService.createLog({\n      message,\n      context,\n      level: \"error\",\n    });\n  }\n\n  async warn(message: string, context?: string) {\n    super.warn.apply(this, [message, context]);\n\n    return this.logsService.createLog({\n      message,\n      context,\n      level: \"error\",\n    });\n  }\n\n  async debug(message: string, context?: string) {\n    super.debug.apply(this, [message, context]);\n\n    return this.logsService.createLog({\n      message,\n      context,\n      level: \"error\",\n    });\n  }\n\n  async verbose(message: string, context?: string) {\n    super.debug.apply(this, [message, context]);\n\n    return this.logsService.createLog({\n      message,\n      context,\n      level: \"error\",\n    });\n  }\n}\n\nexport default CustomLogger;\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CustomerModule.html":{"url":"modules/CustomerModule.html","title":"module - CustomerModule","body":"\n                   \n\n\n\n\n    Modules\n    CustomerModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_CustomerModule\n\n\n\ncluster_CustomerModule_exports\n\n\n\ncluster_CustomerModule_providers\n\n\n\n\nCustomerService \n\nCustomerService \n\n\n\nCustomerModule\n\nCustomerModule\n\nCustomerService  -->\n\nCustomerModule->CustomerService \n\n\n\n\n\nCustomerService\n\nCustomerService\n\nCustomerModule -->\n\nCustomerService->CustomerModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/customer/customer.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CustomerService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            CustomerService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\n\nimport { DbCustomer } from \"./customer.entity\";\nimport { CustomerService } from \"./customer.service\";\n\n@Module({\n  imports: [TypeOrmModule.forFeature([DbCustomer], \"ApiConnection\")],\n  providers: [CustomerService],\n  exports: [CustomerService],\n})\nexport class CustomerModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CustomerService.html":{"url":"injectables/CustomerService.html","title":"injectable - CustomerService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CustomerService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/customer/customer.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addCustomer\n                            \n                            \n                                baseQueryBuilder\n                            \n                            \n                                    Async\n                                findByCustomerId\n                            \n                            \n                                    Async\n                                findById\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(customerRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/customer/customer.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        customerRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addCustomer\n                        \n                    \n                \n            \n            \n                \n                    \n                    addCustomer(userId: number, stripe_customer_id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/customer/customer.service.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    stripe_customer_id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        baseQueryBuilder\n                        \n                    \n                \n            \n            \n                \nbaseQueryBuilder()\n                \n            \n\n\n            \n                \n                    Defined in src/customer/customer.service.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findByCustomerId\n                        \n                    \n                \n            \n            \n                \n                    \n                    findByCustomerId(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/customer/customer.service.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findById(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/customer/customer.service.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { Repository } from \"typeorm\";\n\nimport { DbCustomer } from \"./customer.entity\";\n\n@Injectable()\nexport class CustomerService {\n  constructor(\n    @InjectRepository(DbCustomer, \"ApiConnection\")\n    private customerRepository: Repository\n  ) {}\n\n  baseQueryBuilder() {\n    return this.customerRepository.createQueryBuilder(\"customer\");\n  }\n\n  async findById(id: number) {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder.where(\"customer.id=:id\", { id });\n\n    return queryBuilder.getOne();\n  }\n\n  async findByCustomerId(id: string) {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder.where(\"customer.stripe_customer_id=:id\", { id });\n\n    return queryBuilder.getOne();\n  }\n\n  async addCustomer(userId: number, stripe_customer_id: string) {\n    return this.customerRepository.save({ id: userId, stripe_customer_id });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DatabaseLoggerMiddleware.html":{"url":"classes/DatabaseLoggerMiddleware.html","title":"class - DatabaseLoggerMiddleware","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DatabaseLoggerMiddleware\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/middleware/database-logger.middleware.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        TypeOrmLogger\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                log\n                            \n                            \n                                logMigration\n                            \n                            \n                                logQuery\n                            \n                            \n                                logQueryError\n                            \n                            \n                                logQuerySlow\n                            \n                            \n                                logSchemaBuild\n                            \n                            \n                                    Private\n                                stringifyParameters\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string)\n                    \n                \n                        \n                            \n                                Defined in src/common/middleware/database-logger.middleware.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in src/common/middleware/database-logger.middleware.ts:6\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        log\n                        \n                    \n                \n            \n            \n                \nlog(level: \"log\" | \"info\" | \"warn\", message: string, queryRunner?: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/common/middleware/database-logger.middleware.ts:46\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    level\n                                    \n                                            \"log\" | \"info\" | \"warn\"\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logMigration\n                        \n                    \n                \n            \n            \n                \nlogMigration(message: string)\n                \n            \n\n\n            \n                \n                    Defined in src/common/middleware/database-logger.middleware.ts:38\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logQuery\n                        \n                    \n                \n            \n            \n                \nlogQuery(query: string, parameters?: [], queryRunner?: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/common/middleware/database-logger.middleware.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    query\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    parameters\n                                    \n                                            []\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logQueryError\n                        \n                    \n                \n            \n            \n                \nlogQueryError(error: string, query: string, parameters?: [], queryRunner?: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/common/middleware/database-logger.middleware.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    error\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    query\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    parameters\n                                    \n                                            []\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logQuerySlow\n                        \n                    \n                \n            \n            \n                \nlogQuerySlow(time: number, query: string, parameters?: [], queryRunner?: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/common/middleware/database-logger.middleware.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    time\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    query\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    parameters\n                                    \n                                            []\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logSchemaBuild\n                        \n                    \n                \n            \n            \n                \nlogSchemaBuild(message: string)\n                \n            \n\n\n            \n                \n                    Defined in src/common/middleware/database-logger.middleware.ts:42\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        stringifyParameters\n                        \n                    \n                \n            \n            \n                \n                    \n                    stringifyParameters(parameters?: [])\n                \n            \n\n\n            \n                \n                    Defined in src/common/middleware/database-logger.middleware.ts:61\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    parameters\n                                    \n                                            []\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Logger as TypeOrmLogger, QueryRunner } from \"typeorm\";\nimport { Logger as NestLogger } from \"@nestjs/common\";\nimport { clc } from \"@nestjs/common/utils/cli-colors.util\";\n\nexport class DatabaseLoggerMiddleware implements TypeOrmLogger {\n  private readonly logger;\n\n  constructor(name = \"SQL\") {\n    this.logger = new NestLogger(name);\n  }\n\n  logQuery(query: string, parameters?: unknown[], queryRunner?: QueryRunner) {\n    if (queryRunner?.data.isCreatingLogs) {\n      return;\n    }\n\n    this.logger.log(`${query} -- Parameters: ${this.stringifyParameters(parameters)}`);\n  }\n\n  logQueryError(error: string, query: string, parameters?: unknown[], queryRunner?: QueryRunner) {\n    if (queryRunner?.data.isCreatingLogs) {\n      return;\n    }\n\n    this.logger.error(`${query} -- Parameters: ${this.stringifyParameters(parameters)} -- ${error}`);\n  }\n\n  logQuerySlow(time: number, query: string, parameters?: unknown[], queryRunner?: QueryRunner) {\n    if (queryRunner?.data.isCreatingLogs) {\n      return;\n    }\n\n    this.logger.error(\n      `${query} -- Parameters: ${this.stringifyParameters(parameters)} ${clc.red(`+${String(time)}ms`)}`\n    );\n  }\n\n  logMigration(message: string) {\n    this.logger.warn(message);\n  }\n\n  logSchemaBuild(message: string) {\n    this.logger.warn(message);\n  }\n\n  log(level: \"log\" | \"info\" | \"warn\", message: string, queryRunner?: QueryRunner) {\n    if (queryRunner?.data.isCreatingLogs) {\n      return;\n    }\n\n    if (level === \"log\") {\n      return this.logger.log(message);\n    }\n    if (level === \"info\") {\n      return this.logger.debug(message);\n    }\n\n    return this.logger.warn(message);\n  }\n\n  private stringifyParameters(parameters?: unknown[]) {\n    try {\n      return JSON.stringify(parameters);\n    } catch {\n      return \"\";\n    }\n  }\n}\n\nexport default DatabaseLoggerMiddleware;\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbBakedRepo.html":{"url":"entities/DbBakedRepo.html","title":"entity - DbBakedRepo","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbBakedRepo\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/pizza/entities/baked-repo.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                clone_url\n                            \n                            \n                                    Public\n                                commits\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                repo_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        clone_url\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Repository clone url', example: 'https://github.com/open-sauced/insights.git'})@Column({type: 'character varying', length: 255})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pizza/entities/baked-repo.entity.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        commits\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbCommits[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@OneToMany(undefined, commits => commits.baked_repo)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pizza/entities/baked-repo.entity.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Baked repository identifier', example: 71359796, type: 'integer'})@PrimaryColumn('bigint')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pizza/entities/baked-repo.entity.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        repo_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Repository identifier', example: 12345678, type: 'integer'})@PrimaryColumn('bigint')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pizza/entities/baked-repo.entity.ts:38\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { BaseEntity, Column, Entity, OneToMany, PrimaryColumn } from \"typeorm\";\nimport { ApiModelProperty } from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\nimport { ApiHideProperty } from \"@nestjs/swagger\";\n\nimport { DbCommits } from \"./commits.entity\";\n\n@Entity({\n  name: \"baked_repos\",\n  orderBy: {\n    id: \"DESC\",\n  },\n})\nexport class DbBakedRepo extends BaseEntity {\n  @ApiModelProperty({\n    description: \"Baked repository identifier\",\n    example: 71359796,\n    type: \"integer\",\n  })\n  @PrimaryColumn(\"bigint\")\n  public id!: number;\n\n  @ApiModelProperty({\n    description: \"Repository clone url\",\n    example: \"https://github.com/open-sauced/insights.git\",\n  })\n  @Column({\n    type: \"character varying\",\n    length: 255,\n  })\n  public clone_url: string;\n\n  @ApiModelProperty({\n    description: \"Repository identifier\",\n    example: 12345678,\n    type: \"integer\",\n  })\n  @PrimaryColumn(\"bigint\")\n  public repo_id!: number;\n\n  @ApiHideProperty()\n  @OneToMany(() => DbCommits, (commits) => commits.baked_repo)\n  public commits: DbCommits[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbCommitAuthors.html":{"url":"entities/DbCommitAuthors.html","title":"entity - DbCommitAuthors","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbCommitAuthors\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/pizza/entities/commit_authors.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                commit_author_email\n                            \n                            \n                                    Public\n                                commits\n                            \n                            \n                                    Public\n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        commit_author_email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@Column({type: 'character varying', length: 255, select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pizza/entities/commit_authors.entity.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        commits\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbCommits[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@OneToMany(undefined, commits => commits.commit_author)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pizza/entities/commit_authors.entity.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Commit author identifier', example: 71359796, type: 'integer'})@PrimaryColumn('bigint')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pizza/entities/commit_authors.entity.ts:20\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { BaseEntity, Column, Entity, OneToMany, PrimaryColumn } from \"typeorm\";\nimport { ApiModelProperty } from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\nimport { ApiHideProperty } from \"@nestjs/swagger\";\n\nimport { DbCommits } from \"./commits.entity\";\n\n@Entity({\n  name: \"commit_authors\",\n  orderBy: {\n    id: \"DESC\",\n  },\n})\nexport class DbCommitAuthors extends BaseEntity {\n  @ApiModelProperty({\n    description: \"Commit author identifier\",\n    example: 71359796,\n    type: \"integer\",\n  })\n  @PrimaryColumn(\"bigint\")\n  public id!: number;\n\n  @ApiHideProperty()\n  @Column({\n    type: \"character varying\",\n    length: 255,\n    select: false,\n  })\n  public commit_author_email: string;\n\n  @ApiHideProperty()\n  @OneToMany(() => DbCommits, (commits) => commits.commit_author)\n  public commits: DbCommits[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbCommits.html":{"url":"entities/DbCommits.html","title":"entity - DbCommits","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbCommits\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/pizza/entities/commits.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                baked_repo\n                            \n                            \n                                    Public\n                                baked_repo_id\n                            \n                            \n                                    Public\n                                commit_author\n                            \n                            \n                                    Public\n                                commit_author_id\n                            \n                            \n                                    Public\n                                commit_date\n                            \n                            \n                                    Public\n                                commit_hash\n                            \n                            \n                                    Public\n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        baked_repo\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbBakedRepo\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@ManyToOne(undefined, baked_repo => baked_repo.commits)@JoinColumn({name: 'baked_repo_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pizza/entities/commits.entity.ts:59\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        baked_repo_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Baked repo identifier', example: 57568598, type: 'integer'})@Column({type: 'bigint'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pizza/entities/commits.entity.ts:51\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        commit_author\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbCommitAuthors\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@ManyToOne(undefined, commit_author => commit_author.commits)@JoinColumn({name: 'commit_author_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pizza/entities/commits.entity.ts:77\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        commit_author_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Commit author identifier', example: 9876543, type: 'integer'})@Column({type: 'bigint'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pizza/entities/commits.entity.ts:69\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        commit_date\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Date for the commit', example: '5e7c6c7af42d38c57f363c564c58007da448c443'})@Column({type: 'character varying', length: 255})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pizza/entities/commits.entity.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        commit_hash\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Hash for the commit', example: '5e7c6c7af42d38c57f363c564c58007da448c443'})@Column({type: 'character varying', length: 255})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pizza/entities/commits.entity.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Commit identifier', example: 71359796, type: 'integer'})@PrimaryColumn('bigint')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pizza/entities/commits.entity.ts:21\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { BaseEntity, Column, Entity, JoinColumn, ManyToOne, PrimaryColumn } from \"typeorm\";\nimport { ApiModelProperty } from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\nimport { ApiHideProperty } from \"@nestjs/swagger\";\n\nimport { DbBakedRepo } from \"./baked-repo.entity\";\nimport { DbCommitAuthors } from \"./commit_authors.entity\";\n\n@Entity({\n  name: \"commits\",\n  orderBy: {\n    id: \"DESC\",\n  },\n})\nexport class DbCommits extends BaseEntity {\n  @ApiModelProperty({\n    description: \"Commit identifier\",\n    example: 71359796,\n    type: \"integer\",\n  })\n  @PrimaryColumn(\"bigint\")\n  public id!: number;\n\n  @ApiModelProperty({\n    description: \"Hash for the commit\",\n    example: \"5e7c6c7af42d38c57f363c564c58007da448c443\",\n  })\n  @Column({\n    type: \"character varying\",\n    length: 255,\n  })\n  public commit_hash: string;\n\n  @ApiModelProperty({\n    description: \"Date for the commit\",\n    example: \"5e7c6c7af42d38c57f363c564c58007da448c443\",\n  })\n  @Column({\n    type: \"character varying\",\n    length: 255,\n  })\n  public commit_date: string;\n\n  @ApiModelProperty({\n    description: \"Baked repo identifier\",\n    example: 57568598,\n    type: \"integer\",\n  })\n  @Column({\n    type: \"bigint\",\n  })\n  public baked_repo_id!: number;\n\n  @ApiHideProperty()\n  @ManyToOne(() => DbBakedRepo, (baked_repo) => baked_repo.commits)\n  @JoinColumn({\n    name: \"baked_repo_id\",\n    referencedColumnName: \"id\",\n  })\n  public baked_repo!: DbBakedRepo;\n\n  @ApiModelProperty({\n    description: \"Commit author identifier\",\n    example: 9876543,\n    type: \"integer\",\n  })\n  @Column({\n    type: \"bigint\",\n  })\n  public commit_author_id!: number;\n\n  @ApiHideProperty()\n  @ManyToOne(() => DbCommitAuthors, (commit_author) => commit_author.commits)\n  @JoinColumn({\n    name: \"commit_author_id\",\n    referencedColumnName: \"id\",\n  })\n  public commit_author!: DbCommitAuthors;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbContribution.html":{"url":"entities/DbContribution.html","title":"entity - DbContribution","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbContribution\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/contribution/contribution.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                contributor\n                            \n                            \n                                    Public\n                                count\n                            \n                            \n                                    Public\n                                    Optional\n                                created_at\n                            \n                            \n                                    Public\n                                    Optional\n                                deleted_at\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                last_merged_at\n                            \n                            \n                                    Public\n                                repo\n                            \n                            \n                                    Public\n                                repo_id\n                            \n                            \n                                    Public\n                                    Optional\n                                updated_at\n                            \n                            \n                                    Public\n                                url\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        contributor\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Contributor unique user name', example: '0-vortex'})@Column({type: 'character varying', length: 255})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/contribution/contribution.entity.ts:94\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        count\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Total number of contributed pull requests', example: 15, type: 'integer'})@Column({type: 'bigint', default: 0})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/contribution/contribution.entity.ts:50\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing contribution creation', example: '2016-10-19 13:24:51.000000'})@CreateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/contribution/contribution.entity.ts:67\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        deleted_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@DeleteDateColumn({type: 'timestamp without time zone', select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/contribution/contribution.entity.ts:84\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Contribution identifier', example: 12237133, type: 'integer'})@PrimaryColumn('bigint')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/contribution/contribution.entity.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        last_merged_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Timestamp representing last contribution merge to the default branch', example: '2016-10-19 13:24:51.000000'})@Column({type: 'timestamp without time zone'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/contribution/contribution.entity.ts:57\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        repo\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbRepo\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@ManyToOne(undefined, repo => repo.contributions)@JoinColumn({name: 'repo_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/contribution/contribution.entity.ts:112\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        repo_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Repository identifier', example: 71359796, type: 'integer'})@Column({type: 'bigint', select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/contribution/contribution.entity.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing contribution last update', example: '2022-08-28 22:04:29.000000'})@UpdateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/contribution/contribution.entity.ts:77\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        url\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Contribution GitHub origin URL', example: 'https://github.com/open-sauced/hot/pull/320'})@Column({type: 'character varying', length: 255})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/contribution/contribution.entity.ts:104\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  Column,\n  BaseEntity,\n  PrimaryColumn,\n  ManyToOne,\n  JoinColumn,\n  DeleteDateColumn,\n  CreateDateColumn,\n  UpdateDateColumn,\n} from \"typeorm\";\nimport { ApiHideProperty } from \"@nestjs/swagger\";\n\nimport {\n  ApiModelProperty,\n  ApiModelPropertyOptional,\n} from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\nimport { DbRepo } from \"../repo/entities/repo.entity\";\n\n@Entity({ name: \"contributions\" })\nexport class DbContribution extends BaseEntity {\n  @ApiModelProperty({\n    description: \"Contribution identifier\",\n    example: 12237133,\n    type: \"integer\",\n  })\n  @PrimaryColumn(\"bigint\")\n  public id!: number;\n\n  @ApiModelProperty({\n    description: \"Repository identifier\",\n    example: 71359796,\n    type: \"integer\",\n  })\n  @Column({\n    type: \"bigint\",\n    select: false,\n  })\n  public repo_id!: number;\n\n  @ApiModelProperty({\n    description: \"Total number of contributed pull requests\",\n    example: 15,\n    type: \"integer\",\n  })\n  @Column({\n    type: \"bigint\",\n    default: 0,\n  })\n  public count: number;\n\n  @ApiModelProperty({\n    description: \"Timestamp representing last contribution merge to the default branch\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  @Column({ type: \"timestamp without time zone\" })\n  public last_merged_at: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing contribution creation\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  @CreateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public created_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing contribution last update\",\n    example: \"2022-08-28 22:04:29.000000\",\n  })\n  @UpdateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public updated_at?: Date;\n\n  @ApiHideProperty()\n  @DeleteDateColumn({\n    type: \"timestamp without time zone\",\n    select: false,\n  })\n  public deleted_at?: Date;\n\n  @ApiModelProperty({\n    description: \"Contributor unique user name\",\n    example: \"0-vortex\",\n  })\n  @Column({\n    type: \"character varying\",\n    length: 255,\n  })\n  public contributor: string;\n\n  @ApiModelProperty({\n    description: \"Contribution GitHub origin URL\",\n    example: \"https://github.com/open-sauced/hot/pull/320\",\n  })\n  @Column({\n    type: \"character varying\",\n    length: 255,\n  })\n  public url: string;\n\n  @ApiHideProperty()\n  @ManyToOne(() => DbRepo, (repo) => repo.contributions)\n  @JoinColumn({\n    name: \"repo_id\",\n    referencedColumnName: \"id\",\n  })\n  public repo!: DbRepo;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbContributionStatTimeframe.html":{"url":"entities/DbContributionStatTimeframe.html","title":"entity - DbContributionStatTimeframe","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbContributionStatTimeframe\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user-lists/entities/contributions-timeframe.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                comments\n                            \n                            \n                                commits\n                            \n                            \n                                issues_created\n                            \n                            \n                                prs_created\n                            \n                            \n                                prs_reviewed\n                            \n                            \n                                time_end\n                            \n                            \n                                time_start\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        comments\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Number of comments associated with a user login', example: 0, type: 'integer'})@Column({type: 'bigint', select: false, insert: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-lists/entities/contributions-timeframe.entity.ts:88\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        commits\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Number of commits associated with a user login', example: 0, type: 'integer'})@Column({type: 'bigint', select: false, insert: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-lists/entities/contributions-timeframe.entity.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        issues_created\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Number of issues created by a user login', example: 0, type: 'integer'})@Column({type: 'bigint', select: false, insert: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-lists/entities/contributions-timeframe.entity.ts:76\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        prs_created\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Number of PRs created associated with a user login', example: 0, type: 'integer'})@Column({type: 'bigint', select: false, insert: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-lists/entities/contributions-timeframe.entity.ts:52\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        prs_reviewed\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Number of PRs reviewed by a user login', example: 0, type: 'integer'})@Column({type: 'bigint', select: false, insert: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-lists/entities/contributions-timeframe.entity.ts:64\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        time_end\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'The ISO timestamp for the end of the time frame', example: '2023-08-26T23:55:49.204Z', type: 'string'})@Column({type: 'string', select: false, insert: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-lists/entities/contributions-timeframe.entity.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        time_start\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'The ISO timestamp for the start of the time frame', example: '2023-08-26T23:55:49.204Z', type: 'string'})@Column({type: 'string', select: false, insert: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-lists/entities/contributions-timeframe.entity.ts:16\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { ApiModelProperty } from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\nimport { Column, Entity } from \"typeorm\";\n\n@Entity({ name: \"user_list_contributors\" })\nexport class DbContributionStatTimeframe {\n  @ApiModelProperty({\n    description: \"The ISO timestamp for the start of the time frame\",\n    example: \"2023-08-26T23:55:49.204Z\",\n    type: \"string\",\n  })\n  @Column({\n    type: \"string\",\n    select: false,\n    insert: false,\n  })\n  time_start: string;\n\n  @ApiModelProperty({\n    description: \"The ISO timestamp for the end of the time frame\",\n    example: \"2023-08-26T23:55:49.204Z\",\n    type: \"string\",\n  })\n  @Column({\n    type: \"string\",\n    select: false,\n    insert: false,\n  })\n  time_end: string;\n\n  @ApiModelProperty({\n    description: \"Number of commits associated with a user login\",\n    example: 0,\n    type: \"integer\",\n  })\n  @Column({\n    type: \"bigint\",\n    select: false,\n    insert: false,\n  })\n  commits: number;\n\n  @ApiModelProperty({\n    description: \"Number of PRs created associated with a user login\",\n    example: 0,\n    type: \"integer\",\n  })\n  @Column({\n    type: \"bigint\",\n    select: false,\n    insert: false,\n  })\n  prs_created: number;\n\n  @ApiModelProperty({\n    description: \"Number of PRs reviewed by a user login\",\n    example: 0,\n    type: \"integer\",\n  })\n  @Column({\n    type: \"bigint\",\n    select: false,\n    insert: false,\n  })\n  prs_reviewed: number;\n\n  @ApiModelProperty({\n    description: \"Number of issues created by a user login\",\n    example: 0,\n    type: \"integer\",\n  })\n  @Column({\n    type: \"bigint\",\n    select: false,\n    insert: false,\n  })\n  issues_created: number;\n\n  @ApiModelProperty({\n    description: \"Number of comments associated with a user login\",\n    example: 0,\n    type: \"integer\",\n  })\n  @Column({\n    type: \"bigint\",\n    select: false,\n    insert: false,\n  })\n  comments: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbContributionsProjects.html":{"url":"entities/DbContributionsProjects.html","title":"entity - DbContributionsProjects","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbContributionsProjects\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user-lists/entities/contributions-projects.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                contributions\n                            \n                            \n                                org_id\n                            \n                            \n                                project_id\n                            \n                            \n                                repo_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        contributions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'The number of contributions associated with a org/repo', example: 0, type: 'integer'})@Column({type: 'bigint', select: false, insert: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-lists/entities/contributions-projects.entity.ts:52\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        org_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'The org name of the repo', example: 'open-sauced', type: 'string'})@Column({type: 'string', select: false, insert: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-lists/entities/contributions-projects.entity.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        project_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'The project name of the repo', example: 'api', type: 'string'})@Column({type: 'string', select: false, insert: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-lists/entities/contributions-projects.entity.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        repo_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'The ID of the associated repo in the OpenSauced API context', example: 0, type: 'integer'})@Column({type: 'bigint', select: false, insert: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-lists/entities/contributions-projects.entity.ts:40\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { ApiModelProperty } from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\nimport { Column, Entity } from \"typeorm\";\n\n@Entity({ name: \"user_list_contributors\" })\nexport class DbContributionsProjects {\n  @ApiModelProperty({\n    description: \"The org name of the repo\",\n    example: \"open-sauced\",\n    type: \"string\",\n  })\n  @Column({\n    type: \"string\",\n    select: false,\n    insert: false,\n  })\n  org_id: string;\n\n  @ApiModelProperty({\n    description: \"The project name of the repo\",\n    example: \"api\",\n    type: \"string\",\n  })\n  @Column({\n    type: \"string\",\n    select: false,\n    insert: false,\n  })\n  project_id: string;\n\n  @ApiModelProperty({\n    description: \"The ID of the associated repo in the OpenSauced API context\",\n    example: 0,\n    type: \"integer\",\n  })\n  @Column({\n    type: \"bigint\",\n    select: false,\n    insert: false,\n  })\n  repo_id: number;\n\n  @ApiModelProperty({\n    description: \"The number of contributions associated with a org/repo\",\n    example: 0,\n    type: \"integer\",\n  })\n  @Column({\n    type: \"bigint\",\n    select: false,\n    insert: false,\n  })\n  contributions: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbContributorCategoryTimeframe.html":{"url":"entities/DbContributorCategoryTimeframe.html","title":"entity - DbContributorCategoryTimeframe","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbContributorCategoryTimeframe\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user-lists/entities/contributors-timeframe.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                active\n                            \n                            \n                                all\n                            \n                            \n                                alumni\n                            \n                            \n                                new\n                            \n                            \n                                time_end\n                            \n                            \n                                time_start\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        active\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Number of contributors who contributed in current time frame and previous time frame', example: 0, type: 'integer'})@Column({type: 'bigint', select: false, insert: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-lists/entities/contributors-timeframe.entity.ts:52\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        all\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Number of all contributors (active, new, and alumni)', example: 0, type: 'integer'})@Column({type: 'bigint', select: false, insert: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-lists/entities/contributors-timeframe.entity.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        alumni\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Number of contributors who did not contribute in current time frame but did in the previous time frame', example: 0, type: 'integer'})@Column({type: 'bigint', select: false, insert: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-lists/entities/contributors-timeframe.entity.ts:78\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        new\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Number of contributors who are new to contributing (contributed in current time frame but not the previous time frame)', example: 0, type: 'integer'})@Column({type: 'bigint', select: false, insert: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-lists/entities/contributors-timeframe.entity.ts:65\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        time_end\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'The ISO timestamp for the end of the time frame', example: '2023-08-26T23:55:49.204Z', type: 'string'})@Column({type: 'string', select: false, insert: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-lists/entities/contributors-timeframe.entity.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        time_start\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'The ISO timestamp for the start of the time frame', example: '2023-08-26T23:55:49.204Z', type: 'string'})@Column({type: 'string', select: false, insert: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-lists/entities/contributors-timeframe.entity.ts:16\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { ApiModelProperty } from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\nimport { Column, Entity } from \"typeorm\";\n\n@Entity({ name: \"user_list_contributors\" })\nexport class DbContributorCategoryTimeframe {\n  @ApiModelProperty({\n    description: \"The ISO timestamp for the start of the time frame\",\n    example: \"2023-08-26T23:55:49.204Z\",\n    type: \"string\",\n  })\n  @Column({\n    type: \"string\",\n    select: false,\n    insert: false,\n  })\n  time_start: string;\n\n  @ApiModelProperty({\n    description: \"The ISO timestamp for the end of the time frame\",\n    example: \"2023-08-26T23:55:49.204Z\",\n    type: \"string\",\n  })\n  @Column({\n    type: \"string\",\n    select: false,\n    insert: false,\n  })\n  time_end: string;\n\n  @ApiModelProperty({\n    description: \"Number of all contributors (active, new, and alumni)\",\n    example: 0,\n    type: \"integer\",\n  })\n  @Column({\n    type: \"bigint\",\n    select: false,\n    insert: false,\n  })\n  all: number;\n\n  @ApiModelProperty({\n    description: \"Number of contributors who contributed in current time frame and previous time frame\",\n    example: 0,\n    type: \"integer\",\n  })\n  @Column({\n    type: \"bigint\",\n    select: false,\n    insert: false,\n  })\n  active: number;\n\n  @ApiModelProperty({\n    description:\n      \"Number of contributors who are new to contributing (contributed in current time frame but not the previous time frame)\",\n    example: 0,\n    type: \"integer\",\n  })\n  @Column({\n    type: \"bigint\",\n    select: false,\n    insert: false,\n  })\n  new: number;\n\n  @ApiModelProperty({\n    description:\n      \"Number of contributors who did not contribute in current time frame but did in the previous time frame\",\n    example: 0,\n    type: \"integer\",\n  })\n  @Column({\n    type: \"bigint\",\n    select: false,\n    insert: false,\n  })\n  alumni: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbCoupon.html":{"url":"entities/DbCoupon.html","title":"entity - DbCoupon","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbCoupon\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/coupon/entities/coupon.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                code\n                            \n                            \n                                    Public\n                                    Optional\n                                created_at\n                            \n                            \n                                    Public\n                                    Optional\n                                expired_at\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        code\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Coupon identifier', example: 'saucy', type: 'string'})@PrimaryColumn({type: 'text'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/coupon/entities/coupon.entity.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing highlight creation date', example: '2023-01-19 13:24:51.000000'})@CreateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/coupon/entities/coupon.entity.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        expired_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing coupon expiration date', example: '2023-01-19 13:24:51.000000'})@DeleteDateColumn({type: 'timestamp without time zone'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/coupon/entities/coupon.entity.ts:33\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Entity, BaseEntity, CreateDateColumn, DeleteDateColumn, PrimaryColumn } from \"typeorm\";\n\nimport {\n  ApiModelProperty,\n  ApiModelPropertyOptional,\n} from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\n\n@Entity({ name: \"coupons\" })\nexport class DbCoupon extends BaseEntity {\n  @ApiModelProperty({\n    description: \"Coupon identifier\",\n    example: \"saucy\",\n    type: \"string\",\n  })\n  @PrimaryColumn({ type: \"text\" })\n  public code: string;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing highlight creation date\",\n    example: \"2023-01-19 13:24:51.000000\",\n  })\n  @CreateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public created_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing coupon expiration date\",\n    example: \"2023-01-19 13:24:51.000000\",\n  })\n  @DeleteDateColumn({ type: \"timestamp without time zone\" })\n  public expired_at?: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbCustomer.html":{"url":"entities/DbCustomer.html","title":"entity - DbCustomer","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbCustomer\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/customer/customer.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                stripe_customer_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User identifier', example: 237133})@PrimaryColumn('bigint')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/customer/customer.entity.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        stripe_customer_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Stripe Customer Id', example: 498})@Column({type: 'character varying', length: 50})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/customer/customer.entity.ts:22\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Entity, Column, BaseEntity, PrimaryColumn } from \"typeorm\";\n\nimport { ApiModelProperty } from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\n\n@Entity({ name: \"customers\" })\nexport class DbCustomer extends BaseEntity {\n  @ApiModelProperty({\n    description: \"User identifier\",\n    example: 237133,\n  })\n  @PrimaryColumn(\"bigint\")\n  public id!: number;\n\n  @ApiModelProperty({\n    description: \"Stripe Customer Id\",\n    example: 498,\n  })\n  @Column({\n    type: \"character varying\",\n    length: 50,\n  })\n  public stripe_customer_id: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbEmoji.html":{"url":"entities/DbEmoji.html","title":"entity - DbEmoji","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbEmoji\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/emoji/entities/emoji.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                created_at\n                            \n                            \n                                    Public\n                                    Optional\n                                deleted_at\n                            \n                            \n                                    Public\n                                display_order\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                reactions\n                            \n                            \n                                    Public\n                                    Optional\n                                updated_at\n                            \n                            \n                                    Public\n                                url\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing highlight reaction creation', example: '2016-10-19 13:24:51.000000'})@CreateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/emoji/entities/emoji.entity.ts:57\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        deleted_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@DeleteDateColumn({type: 'timestamp without time zone', select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/emoji/entities/emoji.entity.ts:74\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        display_order\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Emoji display order', example: 1, type: 'integer'})@Column({type: 'integer'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/emoji/entities/emoji.entity.ts:47\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Emoji identifier', example: 'uuid-v4'})@PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/emoji/entities/emoji.entity.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Emoji Name', example: '100'})@Column({type: 'text'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/emoji/entities/emoji.entity.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        reactions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbUserHighlightReaction[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@OneToMany(undefined, highlightReaction => highlightReaction.emoji)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/emoji/entities/emoji.entity.ts:78\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing highlight reaction last update', example: '2022-08-28 22:04:29.000000'})@UpdateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/emoji/entities/emoji.entity.ts:67\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        url\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Emoji URL', example: 'https://github.githubassets.com/images/icons/emoji/unicode/1f4af.png?v8'})@Column({type: 'text'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/emoji/entities/emoji.entity.ts:39\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Column,\n  CreateDateColumn,\n  DeleteDateColumn,\n  Entity,\n  OneToMany,\n  PrimaryGeneratedColumn,\n  UpdateDateColumn,\n} from \"typeorm\";\nimport { ApiHideProperty } from \"@nestjs/swagger\";\nimport {\n  ApiModelProperty,\n  ApiModelPropertyOptional,\n} from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\n\nimport { DbUserHighlightReaction } from \"../../user/entities/user-highlight-reaction.entity\";\n\n@Entity({ name: \"emojis\" })\nexport class DbEmoji {\n  @ApiModelProperty({\n    description: \"Emoji identifier\",\n    example: \"uuid-v4\",\n  })\n  @PrimaryGeneratedColumn()\n  public id!: string;\n\n  @ApiModelProperty({\n    description: \"Emoji Name\",\n    example: \"100\",\n  })\n  @Column({ type: \"text\" })\n  public name: string;\n\n  @ApiModelProperty({\n    description: \"Emoji URL\",\n    example: \"https://github.githubassets.com/images/icons/emoji/unicode/1f4af.png?v8\",\n  })\n  @Column({ type: \"text\" })\n  public url: string;\n\n  @ApiModelProperty({\n    description: \"Emoji display order\",\n    example: 1,\n    type: \"integer\",\n  })\n  @Column({ type: \"integer\" })\n  public display_order!: number;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing highlight reaction creation\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  @CreateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public created_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing highlight reaction last update\",\n    example: \"2022-08-28 22:04:29.000000\",\n  })\n  @UpdateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public updated_at?: Date;\n\n  @ApiHideProperty()\n  @DeleteDateColumn({\n    type: \"timestamp without time zone\",\n    select: false,\n  })\n  public deleted_at?: Date;\n\n  @ApiHideProperty()\n  @OneToMany(() => DbUserHighlightReaction, (highlightReaction) => highlightReaction.emoji)\n  public reactions: DbUserHighlightReaction[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbEndorsement.html":{"url":"entities/DbEndorsement.html","title":"entity - DbEndorsement","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbEndorsement\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/endorsement/entities/endorsement.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                created_at\n                            \n                            \n                                    Public\n                                    Optional\n                                creator_user_id\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                    Optional\n                                recipient_user_id\n                            \n                            \n                                    Public\n                                repo_id\n                            \n                            \n                                    Public\n                                    Optional\n                                source_comment_url\n                            \n                            \n                                    Public\n                                source_context_url\n                            \n                            \n                                    Public\n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing endorsement creation', example: '2022-10-19 13:24:51.000000'})@CreateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/endorsement/entities/endorsement.entity.ts:72\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        creator_user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Endorsement Creator User ID', example: 237133, type: 'integer'})@Column({type: 'integer'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/endorsement/entities/endorsement.entity.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Endorsement identifier', example: 'uuid-v4'})@PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/endorsement/entities/endorsement.entity.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        recipient_user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Endorsement Recipient User ID', example: 31333, type: 'integer'})@Column({type: 'integer'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/endorsement/entities/endorsement.entity.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        repo_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Repository ID', example: 78133, type: 'integer'})@Column({type: 'integer'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/endorsement/entities/endorsement.entity.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        source_comment_url\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Endorsement Source Comment URL'})@Column({type: 'character varying', length: 500})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/endorsement/entities/endorsement.entity.ts:45\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        source_context_url\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Endorsement Source Context URL'})@Column({type: 'character varying', length: 20})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/endorsement/entities/endorsement.entity.ts:52\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Endorsement Type', example: 'doc'})@Column({type: 'character varying', length: 20})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/endorsement/entities/endorsement.entity.ts:62\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  ApiModelProperty,\n  ApiModelPropertyOptional,\n} from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\nimport { Column, CreateDateColumn, Entity, PrimaryGeneratedColumn } from \"typeorm\";\n\n@Entity({ name: \"endorsements\" })\nexport class DbEndorsement {\n  @ApiModelProperty({\n    description: \"Endorsement identifier\",\n    example: \"uuid-v4\",\n  })\n  @PrimaryGeneratedColumn()\n  public id!: string;\n\n  @ApiModelProperty({\n    description: \"Endorsement Creator User ID\",\n    example: 237133,\n    type: \"integer\",\n  })\n  @Column({ type: \"integer\" })\n  public creator_user_id?: number;\n\n  @ApiModelProperty({\n    description: \"Endorsement Recipient User ID\",\n    example: 31333,\n    type: \"integer\",\n  })\n  @Column({ type: \"integer\" })\n  public recipient_user_id?: number;\n\n  @ApiModelProperty({\n    description: \"Repository ID\",\n    example: 78133,\n    type: \"integer\",\n  })\n  @Column({ type: \"integer\" })\n  public repo_id: number;\n\n  @ApiModelProperty({ description: \"Endorsement Source Comment URL\" })\n  @Column({\n    type: \"character varying\",\n    length: 500,\n  })\n  public source_comment_url?: string;\n\n  @ApiModelProperty({ description: \"Endorsement Source Context URL\" })\n  @Column({\n    type: \"character varying\",\n    length: 20,\n  })\n  public source_context_url: string;\n\n  @ApiModelProperty({\n    description: \"Endorsement Type\",\n    example: \"doc\",\n  })\n  @Column({\n    type: \"character varying\",\n    length: 20,\n  })\n  public type: string;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing endorsement creation\",\n    example: \"2022-10-19 13:24:51.000000\",\n  })\n  @CreateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public created_at?: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DbFilteredUser.html":{"url":"classes/DbFilteredUser.html","title":"class - DbFilteredUser","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DbFilteredUser\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/entities/filtered-users.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                full_name\n                            \n                            \n                                    Public\n                                    Optional\n                                login\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        full_name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Users fullname', example: 'Brian Douglas'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/filtered-users.entity.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        login\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User Login', example: 'bdougie'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/filtered-users.entity.ts:8\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiModelProperty } from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\n\nexport class DbFilteredUser {\n  @ApiModelProperty({\n    description: \"User Login\",\n    example: \"bdougie\",\n  })\n  public login?: string;\n\n  @ApiModelProperty({\n    description: \"Users fullname\",\n    example: \"Brian Douglas\",\n  })\n  public full_name: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbInsight.html":{"url":"entities/DbInsight.html","title":"entity - DbInsight","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbInsight\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/insight/entities/insight.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                created_at\n                            \n                            \n                                    Public\n                                    Optional\n                                deleted_at\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                is_favorite\n                            \n                            \n                                    Public\n                                is_featured\n                            \n                            \n                                    Public\n                                is_public\n                            \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                repos\n                            \n                            \n                                    Public\n                                short_code\n                            \n                            \n                                    Public\n                                    Optional\n                                updated_at\n                            \n                            \n                                    Public\n                                user\n                            \n                            \n                                    Public\n                                user_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing insight creation', example: '2022-10-19 13:24:51.000000'})@CreateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight.entity.ts:95\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        deleted_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing insight deletion', example: '2022-10-19 13:24:51.000000'})@DeleteDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight.entity.ts:115\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Insight identifier', example: 237133, type: 'integer'})@PrimaryColumn()@PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight.entity.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        is_favorite\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Flag indicating insight favorite', example: false})@Column({default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight.entity.ts:68\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        is_featured\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Flag indicating featured insight', example: false})@Column({default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight.entity.ts:75\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        is_public\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Flag indicating insight visibility', example: false})@Column({default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight.entity.ts:61\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Insight Page Name', example: 'Open Sauced Team'})@Column({type: 'character varying', length: 255})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight.entity.ts:54\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        repos\n                        \n                    \n                \n            \n                \n                    \n                        Type :     DbInsightRepo[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@OneToMany(undefined, insightRepo => insightRepo.insight)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight.entity.ts:127\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        short_code\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Title', example: 'Insight Page Short Code'})@Column({type: 'character varying', length: 25})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight.entity.ts:85\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing insight last updated', example: '2022-10-19 13:24:51.000000'})@UpdateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight.entity.ts:105\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbUser\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@ManyToOne(undefined, user => user.insights, {onDelete: 'CASCADE'})@JoinColumn({name: 'user_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight.entity.ts:123\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User ID', example: 237133, type: 'integer'})@Column({type: 'bigint', select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight.entity.ts:44\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  Column,\n  BaseEntity,\n  PrimaryColumn,\n  CreateDateColumn,\n  UpdateDateColumn,\n  OneToMany,\n  PrimaryGeneratedColumn,\n  DeleteDateColumn,\n  ManyToOne,\n  JoinColumn,\n} from \"typeorm\";\n\nimport {\n  ApiModelProperty,\n  ApiModelPropertyOptional,\n} from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\nimport { ApiHideProperty } from \"@nestjs/swagger\";\n\nimport { DbUser } from \"../../user/user.entity\";\nimport { DbInsightRepo } from \"./insight-repo.entity\";\n\n@Entity({ name: \"insights\" })\nexport class DbInsight extends BaseEntity {\n  @ApiModelProperty({\n    description: \"Insight identifier\",\n    example: 237133,\n    type: \"integer\",\n  })\n  @PrimaryColumn()\n  @PrimaryGeneratedColumn()\n  public id!: number;\n\n  @ApiModelProperty({\n    description: \"User ID\",\n    example: 237133,\n    type: \"integer\",\n  })\n  @Column({\n    type: \"bigint\",\n    select: false,\n  })\n  public user_id: number;\n\n  @ApiModelProperty({\n    description: \"Insight Page Name\",\n    example: \"Open Sauced Team\",\n  })\n  @Column({\n    type: \"character varying\",\n    length: 255,\n  })\n  public name: string;\n\n  @ApiModelProperty({\n    description: \"Flag indicating insight visibility\",\n    example: false,\n  })\n  @Column({ default: false })\n  public is_public: boolean;\n\n  @ApiModelProperty({\n    description: \"Flag indicating insight favorite\",\n    example: false,\n  })\n  @Column({ default: false })\n  public is_favorite: boolean;\n\n  @ApiModelProperty({\n    description: \"Flag indicating featured insight\",\n    example: false,\n  })\n  @Column({ default: false })\n  public is_featured: boolean;\n\n  @ApiModelProperty({\n    description: \"Title\",\n    example: \"Insight Page Short Code\",\n  })\n  @Column({\n    type: \"character varying\",\n    length: 25,\n  })\n  public short_code: string;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing insight creation\",\n    example: \"2022-10-19 13:24:51.000000\",\n  })\n  @CreateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public created_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing insight last updated\",\n    example: \"2022-10-19 13:24:51.000000\",\n  })\n  @UpdateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public updated_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing insight deletion\",\n    example: \"2022-10-19 13:24:51.000000\",\n  })\n  @DeleteDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public deleted_at?: Date;\n\n  @ApiHideProperty()\n  @ManyToOne(() => DbUser, (user) => user.insights, { onDelete: \"CASCADE\" })\n  @JoinColumn({\n    name: \"user_id\",\n    referencedColumnName: \"id\",\n  })\n  public user!: DbUser;\n\n  @ApiHideProperty()\n  @OneToMany(() => DbInsightRepo, (insightRepo) => insightRepo.insight)\n  public repos: DbInsightRepo[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbInsightMember.html":{"url":"entities/DbInsightMember.html","title":"entity - DbInsightMember","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbInsightMember\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/insight/entities/insight-member.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                access\n                            \n                            \n                                    Public\n                                    Optional\n                                created_at\n                            \n                            \n                                    Public\n                                    Optional\n                                deleted_at\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                insight_id\n                            \n                            \n                                    Public\n                                    Optional\n                                invitation_email\n                            \n                            \n                                    Public\n                                    Optional\n                                invitation_emailed_at\n                            \n                            \n                                    Public\n                                    Optional\n                                name\n                            \n                            \n                                    Public\n                                    Optional\n                                updated_at\n                            \n                            \n                                    Public\n                                    Optional\n                                user_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        access\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Insight Member Access', example: 'pending'})@Column({type: 'character varying', length: 20, default: 'pending'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight-member.entity.ts:63\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing team member creation', example: '2022-10-19 13:24:51.000000'})@CreateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight-member.entity.ts:73\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        deleted_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing team member deletion', example: '2022-10-19 13:24:51.000000'})@DeleteDateColumn({type: 'timestamp without time zone'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight-member.entity.ts:90\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Insight Member identifier', example: 'uuid-v4'})@PrimaryColumn()@PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight-member.entity.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        insight_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Insight ID', example: 237133, type: 'integer'})@Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight-member.entity.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        invitation_email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Team Member Invitation Email', example: 'hello@opensauced.pizza'})@Column({type: 'text', select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight-member.entity.ts:110\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        invitation_emailed_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing team member invitation email sent date', example: '2023-04-10 13:24:51.000000'})@Column({type: 'timestamp without time zone', select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight-member.entity.ts:100\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User's Name', example: 'Brian Douglas'})@Column({type: 'text', select: false, insert: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight-member.entity.ts:52\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing team member last updated', example: '2022-10-19 13:24:51.000000'})@UpdateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight-member.entity.ts:83\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User ID', example: 237133, type: 'integer'})@Column({type: 'integer'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight-member.entity.ts:41\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  Column,\n  BaseEntity,\n  PrimaryColumn,\n  CreateDateColumn,\n  UpdateDateColumn,\n  PrimaryGeneratedColumn,\n  DeleteDateColumn,\n} from \"typeorm\";\n\nimport {\n  ApiModelProperty,\n  ApiModelPropertyOptional,\n} from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\n\n@Entity({ name: \"insight_members\" })\nexport class DbInsightMember extends BaseEntity {\n  @ApiModelProperty({\n    description: \"Insight Member identifier\",\n    example: \"uuid-v4\",\n  })\n  @PrimaryColumn()\n  @PrimaryGeneratedColumn()\n  public id!: string;\n\n  @ApiModelProperty({\n    description: \"Insight ID\",\n    example: 237133,\n    type: \"integer\",\n  })\n  @Column()\n  public insight_id: number;\n\n  @ApiModelProperty({\n    description: \"User ID\",\n    example: 237133,\n    type: \"integer\",\n  })\n  @Column({ type: \"integer\" })\n  public user_id?: number;\n\n  @ApiModelProperty({\n    description: \"User's Name\",\n    example: \"Brian Douglas\",\n  })\n  @Column({\n    type: \"text\",\n    select: false,\n    insert: false,\n  })\n  public name?: string;\n\n  @ApiModelProperty({\n    description: \"Insight Member Access\",\n    example: \"pending\",\n  })\n  @Column({\n    type: \"character varying\",\n    length: 20,\n    default: \"pending\",\n  })\n  public access: string;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing team member creation\",\n    example: \"2022-10-19 13:24:51.000000\",\n  })\n  @CreateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public created_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing team member last updated\",\n    example: \"2022-10-19 13:24:51.000000\",\n  })\n  @UpdateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public updated_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing team member deletion\",\n    example: \"2022-10-19 13:24:51.000000\",\n  })\n  @DeleteDateColumn({ type: \"timestamp without time zone\" })\n  public deleted_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing team member invitation email sent date\",\n    example: \"2023-04-10 13:24:51.000000\",\n  })\n  @Column({\n    type: \"timestamp without time zone\",\n    select: false,\n  })\n  public invitation_emailed_at?: Date;\n\n  @ApiModelProperty({\n    description: \"Team Member Invitation Email\",\n    example: \"hello@opensauced.pizza\",\n  })\n  @Column({\n    type: \"text\",\n    select: false,\n  })\n  public invitation_email?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbInsightRepo.html":{"url":"entities/DbInsightRepo.html","title":"entity - DbInsightRepo","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbInsightRepo\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/insight/entities/insight-repo.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                created_at\n                            \n                            \n                                    Public\n                                    Optional\n                                deleted_at\n                            \n                            \n                                    Public\n                                full_name\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                insight\n                            \n                            \n                                    Public\n                                insight_id\n                            \n                            \n                                    Public\n                                repo_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing insight repo creation', example: '2022-10-19 13:24:51.000000'})@CreateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight-repo.entity.ts:63\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        deleted_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing insight repo deletion', example: '2022-10-19 13:24:51.000000'})@DeleteDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight-repo.entity.ts:73\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        full_name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Repo Full Name', example: 'open-sauced/insights'})@Column({type: 'text'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight-repo.entity.ts:53\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Insight identifier', example: 237133, type: 'integer'})@PrimaryColumn()@PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight-repo.entity.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        insight\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbInsight\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@ManyToOne(undefined, insight => insight.repos)@JoinColumn({name: 'insight_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight-repo.entity.ts:81\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        insight_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Insight ID', example: 237133, type: 'integer'})@Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight-repo.entity.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        repo_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Repo ID', example: 237133, type: 'integer'})@Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight-repo.entity.ts:46\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  Column,\n  BaseEntity,\n  PrimaryColumn,\n  CreateDateColumn,\n  ManyToOne,\n  JoinColumn,\n  PrimaryGeneratedColumn,\n  DeleteDateColumn,\n} from \"typeorm\";\nimport { ApiHideProperty } from \"@nestjs/swagger\";\n\nimport {\n  ApiModelProperty,\n  ApiModelPropertyOptional,\n} from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\n\nimport { DbInsight } from \"./insight.entity\";\n\n@Entity({ name: \"insight_repos\" })\nexport class DbInsightRepo extends BaseEntity {\n  @ApiModelProperty({\n    description: \"Insight identifier\",\n    example: 237133,\n    type: \"integer\",\n  })\n  @PrimaryColumn()\n  @PrimaryGeneratedColumn()\n  public id!: number;\n\n  @ApiModelProperty({\n    description: \"Insight ID\",\n    example: 237133,\n    type: \"integer\",\n  })\n  @Column()\n  public insight_id: number;\n\n  @ApiModelProperty({\n    description: \"Repo ID\",\n    example: 237133,\n    type: \"integer\",\n  })\n  @Column()\n  public repo_id: number;\n\n  @ApiModelProperty({\n    description: \"Repo Full Name\",\n    example: \"open-sauced/insights\",\n  })\n  @Column({ type: \"text\" })\n  public full_name: string;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing insight repo creation\",\n    example: \"2022-10-19 13:24:51.000000\",\n  })\n  @CreateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public created_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing insight repo deletion\",\n    example: \"2022-10-19 13:24:51.000000\",\n  })\n  @DeleteDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public deleted_at?: Date;\n\n  @ApiHideProperty()\n  @ManyToOne(() => DbInsight, (insight) => insight.repos)\n  @JoinColumn({\n    name: \"insight_id\",\n    referencedColumnName: \"id\",\n  })\n  public insight!: DbInsight;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbLog.html":{"url":"entities/DbLog.html","title":"entity - DbLog","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbLog\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/log/log.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                context\n                            \n                            \n                                    Public\n                                created_at\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                level\n                            \n                            \n                                    Public\n                                message\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        context\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/log/log.entity.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/log/log.entity.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn('uuid')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/log/log.entity.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        level\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/log/log.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        message\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/log/log.entity.ts:12\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { BaseEntity, Column, CreateDateColumn, Entity, PrimaryGeneratedColumn } from \"typeorm\";\n\n@Entity({ name: \"logs\" })\nexport class DbLog extends BaseEntity {\n  @PrimaryGeneratedColumn(\"uuid\")\n  public id: string;\n\n  @Column()\n  public context: string;\n\n  @Column()\n  public message: string;\n\n  @Column()\n  public level: string;\n\n  @CreateDateColumn()\n  public created_at: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbPRInsight.html":{"url":"entities/DbPRInsight.html","title":"entity - DbPRInsight","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbPRInsight\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/pull-requests/entities/pull-request-insight.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                accepted_prs\n                            \n                            \n                                    Public\n                                all_prs\n                            \n                            \n                                    Public\n                                day\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                interval\n                            \n                            \n                                    Public\n                                spam_prs\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        accepted_prs\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'PR Type: accepted requests count', example: 287, type: 'integer'})@Column({type: 'integer', default: 0, select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request-insight.entity.ts:65\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        all_prs\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'PR Type: all requests count', example: 287, type: 'integer'})@Column({type: 'integer', default: 0, select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request-insight.entity.ts:53\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        day\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Selected interval computed date in human readable format', example: '2022-08-28', type: 'string', format: 'date'})@Column({type: 'timestamp without time zone', default: () => now(), select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request-insight.entity.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Repository identifier', example: 71359796, type: 'integer'})@PrimaryColumn({type: 'bigint', select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request-insight.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        interval\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Selected interval in numerical days, goes back with number, 0 means today', example: 1, default: 0, type: 'integer'})@Column({type: 'integer', default: 0, select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request-insight.entity.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        spam_prs\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'PR Type: spam requests count', example: 287, type: 'integer'})@Column({type: 'integer', default: 0, select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request-insight.entity.ts:77\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Entity, BaseEntity, PrimaryColumn, Column } from \"typeorm\";\nimport { ApiModelProperty } from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\n\n@Entity({ name: \"pull_requests\" })\nexport class DbPRInsight extends BaseEntity {\n  @ApiModelProperty({\n    description: \"Repository identifier\",\n    example: 71359796,\n    type: \"integer\",\n  })\n  @PrimaryColumn({\n    type: \"bigint\",\n    select: false,\n  })\n  public id!: number;\n\n  @ApiModelProperty({\n    description: \"Selected interval in numerical days, goes back with number, 0 means today\",\n    example: 1,\n    default: 0,\n    type: \"integer\",\n  })\n  @Column({\n    type: \"integer\",\n    default: 0,\n    select: false,\n  })\n  public interval: number;\n\n  @ApiModelProperty({\n    description: \"Selected interval computed date in human readable format\",\n    example: \"2022-08-28\",\n    type: \"string\",\n    format: \"date\",\n  })\n  @Column({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n    select: false,\n  })\n  public day: Date;\n\n  @ApiModelProperty({\n    description: \"PR Type: all requests count\",\n    example: 287,\n    type: \"integer\",\n  })\n  @Column({\n    type: \"integer\",\n    default: 0,\n    select: false,\n  })\n  public all_prs: number;\n\n  @ApiModelProperty({\n    description: \"PR Type: accepted requests count\",\n    example: 287,\n    type: \"integer\",\n  })\n  @Column({\n    type: \"integer\",\n    default: 0,\n    select: false,\n  })\n  public accepted_prs: number;\n\n  @ApiModelProperty({\n    description: \"PR Type: spam requests count\",\n    example: 287,\n    type: \"integer\",\n  })\n  @Column({\n    type: \"integer\",\n    default: 0,\n    select: false,\n  })\n  public spam_prs: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbPullRequest.html":{"url":"entities/DbPullRequest.html","title":"entity - DbPullRequest","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbPullRequest\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/pull-requests/entities/pull-request.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                additions\n                            \n                            \n                                    Public\n                                    Optional\n                                assignee_avatar\n                            \n                            \n                                    Public\n                                    Optional\n                                assignee_login\n                            \n                            \n                                    Public\n                                author_avatar\n                            \n                            \n                                    Public\n                                author_login\n                            \n                            \n                                    Public\n                                    Optional\n                                changed_files\n                            \n                            \n                                    Public\n                                    Optional\n                                closed_at\n                            \n                            \n                                    Public\n                                    Optional\n                                comments\n                            \n                            \n                                    Public\n                                    Optional\n                                commits\n                            \n                            \n                                    Public\n                                    Optional\n                                created_at\n                            \n                            \n                                    Public\n                                    Optional\n                                deletions\n                            \n                            \n                                    Public\n                                draft\n                            \n                            \n                                    Public\n                                    Optional\n                                full_name\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                    Optional\n                                label_names\n                            \n                            \n                                    Public\n                                    Optional\n                                labels\n                            \n                            \n                                    Public\n                                    Optional\n                                last_updated_at\n                            \n                            \n                                    Public\n                                mergeable\n                            \n                            \n                                    Public\n                                merged\n                            \n                            \n                                    Public\n                                    Optional\n                                merged_at\n                            \n                            \n                                    Public\n                                    Optional\n                                merged_by_login\n                            \n                            \n                                    Public\n                                number\n                            \n                            \n                                    Public\n                                rebaseable\n                            \n                            \n                                    Public\n                                repo_id\n                            \n                            \n                                    Public\n                                    Optional\n                                source_branch\n                            \n                            \n                                    Public\n                                    Optional\n                                source_label\n                            \n                            \n                                    Public\n                                state\n                            \n                            \n                                    Public\n                                    Optional\n                                target_branch\n                            \n                            \n                                    Public\n                                    Optional\n                                target_label\n                            \n                            \n                                    Public\n                                title\n                            \n                            \n                                    Public\n                                    Optional\n                                updated_at\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        additions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'PR lines added', example: 10, type: 'integer'})@Column({type: 'bigint'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:244\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        assignee_avatar\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Pull request assignee avatar', example: undefined})@Column({type: 'text', default: ''})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:171\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        assignee_login\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Pull request assignee username', example: undefined})@Column({type: 'text', default: ''})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:161\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        author_avatar\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Pull request author avatar', example: 'https://avatars.githubusercontent.com/u/25160953?v=4'})@Column('text')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:151\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        author_login\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Pull request author username', example: 'Th3nn3ss'})@Column('text')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:144\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        changed_files\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'PR files changed', example: 5, type: 'integer'})@Column({type: 'bigint'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:260\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        closed_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Timestamp representing pr close date', example: '2022-08-28 22:04:29.000000'})@Column({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:191\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        comments\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'PR comments', example: 0, type: 'integer'})@Column({type: 'bigint'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:236\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        commits\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Number of commits in the PR', example: 4, type: 'integer'})@Column({type: 'bigint'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:279\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing pr creation date', example: '2022-08-28 22:04:29.000000'})@CreateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:181\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        deletions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'PR lines deleted', example: 5, type: 'integer'})@Column({type: 'bigint'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:252\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        draft\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Pull request is draft', example: false})@Column('boolean')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:45\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        full_name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Pull request repo full name', example: 'open-sauced/insights'})@Column({type: 'text', select: false, insert: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:271\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Pull request identifier', example: 1045024650, type: 'integer'})@PrimaryColumn('integer')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        label_names\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Pull request label names', example: showcase})@Column({type: 'text', select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:137\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        labels\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Pull request labels', example: [\n      {\n        \"id\": 4456742596,\n        \"url\": \"https://api.github.com/repos/denoland/fresh/labels/showcase\",\n        \"name\": \"showcase\",\n        \"color\": \"0e8a16\",\n        \"default\": false,\n        \"node_id\": \"LA_kwDOFcV7488AAAABCaR-xA\",\n        \"description\": \"\"\n      }\n    ]})@Column({type: 'text', select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:127\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        last_updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Timestamp representing internal last update', example: '2022-08-28 22:04:29.000000'})@Column({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:228\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        mergeable\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Pull request is mergeable', example: false})@Column('boolean')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:59\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        merged\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Pull request is merged', example: false})@Column('boolean')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:52\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        merged_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Timestamp representing pr merge date', example: '2022-08-28 22:04:29.000000'})@Column({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:201\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        merged_by_login\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Pull request merged by username', example: 'bdougie'})@Column('text')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:208\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        number\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Pull request number', example: 612, type: 'integer'})@Column('integer')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        rebaseable\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Pull request is rebaseable', example: false})@Column('boolean')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:66\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        repo_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@Column({type: 'integer', select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        source_branch\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Pull request source branch', example: 'main'})@Column('text')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:100\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        source_label\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Pull request source ref', example: 'Th3nn3ss:cli_split_kwargs'})@Column({type: 'text', default: ''})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:83\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        state\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Pull request state', example: 'closed'})@Column('text')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        target_branch\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Pull request target branch', example: 'cli_split_kwargs'})@Column('text')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:107\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        target_label\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Pull request target ref', example: 'aws:main'})@Column({type: 'text', default: ''})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:93\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Pull request title', example: 'fix(cli): arg tags value with equal sign'})@Column('text')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:73\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Timestamp representing repository last update', example: '2022-08-28 22:04:29.000000'})@Column({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:218\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Entity, Column, BaseEntity, PrimaryColumn, CreateDateColumn } from \"typeorm\";\nimport {\n  ApiModelProperty,\n  ApiModelPropertyOptional,\n} from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\nimport { ApiHideProperty } from \"@nestjs/swagger\";\n\n@Entity({ name: \"pull_requests\" })\nexport class DbPullRequest extends BaseEntity {\n  @ApiModelProperty({\n    description: \"Pull request identifier\",\n    example: 1045024650,\n    type: \"integer\",\n  })\n  @PrimaryColumn(\"integer\")\n  public id!: number;\n\n  @ApiHideProperty()\n  @Column({\n    type: \"integer\",\n    select: false,\n  })\n  public repo_id!: number;\n\n  @ApiModelProperty({\n    description: \"Pull request number\",\n    example: 612,\n    type: \"integer\",\n  })\n  @Column(\"integer\")\n  public number: number;\n\n  @ApiModelProperty({\n    description: \"Pull request state\",\n    example: \"closed\",\n  })\n  @Column(\"text\")\n  public state: string;\n\n  @ApiModelProperty({\n    description: \"Pull request is draft\",\n    example: false,\n  })\n  @Column(\"boolean\")\n  public draft: boolean;\n\n  @ApiModelProperty({\n    description: \"Pull request is merged\",\n    example: false,\n  })\n  @Column(\"boolean\")\n  public merged: boolean;\n\n  @ApiModelProperty({\n    description: \"Pull request is mergeable\",\n    example: false,\n  })\n  @Column(\"boolean\")\n  public mergeable: boolean;\n\n  @ApiModelProperty({\n    description: \"Pull request is rebaseable\",\n    example: false,\n  })\n  @Column(\"boolean\")\n  public rebaseable: boolean;\n\n  @ApiModelProperty({\n    description: \"Pull request title\",\n    example: \"fix(cli): arg tags value with equal sign\",\n  })\n  @Column(\"text\")\n  public title: string;\n\n  @ApiModelProperty({\n    description: \"Pull request source ref\",\n    example: \"Th3nn3ss:cli_split_kwargs\",\n  })\n  @Column({\n    type: \"text\",\n    default: \"\",\n  })\n  public source_label?: string;\n\n  @ApiModelProperty({\n    description: \"Pull request target ref\",\n    example: \"aws:main\",\n  })\n  @Column({\n    type: \"text\",\n    default: \"\",\n  })\n  public target_label?: string;\n\n  @ApiModelProperty({\n    description: \"Pull request source branch\",\n    example: \"main\",\n  })\n  @Column(\"text\")\n  public source_branch?: string;\n\n  @ApiModelProperty({\n    description: \"Pull request target branch\",\n    example: \"cli_split_kwargs\",\n  })\n  @Column(\"text\")\n  public target_branch?: string;\n\n  @ApiModelProperty({\n    description: \"Pull request labels\",\n    example: `[\n      {\n        \"id\": 4456742596,\n        \"url\": \"https://api.github.com/repos/denoland/fresh/labels/showcase\",\n        \"name\": \"showcase\",\n        \"color\": \"0e8a16\",\n        \"default\": false,\n        \"node_id\": \"LA_kwDOFcV7488AAAABCaR-xA\",\n        \"description\": \"\"\n      }\n    ]`,\n  })\n  @Column({\n    type: \"text\",\n    select: false,\n  })\n  public labels?: string;\n\n  @ApiModelProperty({\n    description: \"Pull request label names\",\n    example: `showcase`,\n  })\n  @Column({\n    type: \"text\",\n    select: false,\n  })\n  public label_names?: string[];\n\n  @ApiModelProperty({\n    description: \"Pull request author username\",\n    example: \"Th3nn3ss\",\n  })\n  @Column(\"text\")\n  public author_login: string;\n\n  @ApiModelProperty({\n    description: \"Pull request author avatar\",\n    example: \"https://avatars.githubusercontent.com/u/25160953?v=4\",\n  })\n  @Column(\"text\")\n  public author_avatar: string;\n\n  @ApiModelProperty({\n    description: \"Pull request assignee username\",\n    example: null,\n  })\n  @Column({\n    type: \"text\",\n    default: \"\",\n  })\n  public assignee_login?: string;\n\n  @ApiModelProperty({\n    description: \"Pull request assignee avatar\",\n    example: null,\n  })\n  @Column({\n    type: \"text\",\n    default: \"\",\n  })\n  public assignee_avatar?: string;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing pr creation date\",\n    example: \"2022-08-28 22:04:29.000000\",\n  })\n  @CreateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public created_at?: Date;\n\n  @ApiModelProperty({\n    description: \"Timestamp representing pr close date\",\n    example: \"2022-08-28 22:04:29.000000\",\n  })\n  @Column({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public closed_at?: Date;\n\n  @ApiModelProperty({\n    description: \"Timestamp representing pr merge date\",\n    example: \"2022-08-28 22:04:29.000000\",\n  })\n  @Column({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public merged_at?: Date;\n\n  @ApiModelProperty({\n    description: \"Pull request merged by username\",\n    example: \"bdougie\",\n  })\n  @Column(\"text\")\n  public merged_by_login?: string;\n\n  @ApiModelProperty({\n    description: \"Timestamp representing repository last update\",\n    example: \"2022-08-28 22:04:29.000000\",\n  })\n  @Column({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public updated_at?: Date;\n\n  @ApiModelProperty({\n    description: \"Timestamp representing internal last update\",\n    example: \"2022-08-28 22:04:29.000000\",\n  })\n  @Column({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public last_updated_at?: Date;\n\n  @ApiModelProperty({\n    description: \"PR comments\",\n    example: 0,\n    type: \"integer\",\n  })\n  @Column({ type: \"bigint\" })\n  public comments?: number;\n\n  @ApiModelProperty({\n    description: \"PR lines added\",\n    example: 10,\n    type: \"integer\",\n  })\n  @Column({ type: \"bigint\" })\n  public additions?: number;\n\n  @ApiModelProperty({\n    description: \"PR lines deleted\",\n    example: 5,\n    type: \"integer\",\n  })\n  @Column({ type: \"bigint\" })\n  public deletions?: number;\n\n  @ApiModelProperty({\n    description: \"PR files changed\",\n    example: 5,\n    type: \"integer\",\n  })\n  @Column({ type: \"bigint\" })\n  public changed_files?: number;\n\n  @ApiModelProperty({\n    description: \"Pull request repo full name\",\n    example: \"open-sauced/insights\",\n  })\n  @Column({\n    type: \"text\",\n    select: false,\n    insert: false,\n  })\n  public full_name?: string;\n\n  @ApiModelProperty({\n    description: \"Number of commits in the PR\",\n    example: 4,\n    type: \"integer\",\n  })\n  @Column({ type: \"bigint\" })\n  public commits?: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DbPullRequestContributor.html":{"url":"classes/DbPullRequestContributor.html","title":"class - DbPullRequestContributor","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DbPullRequestContributor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/pull-requests/dtos/pull-request-contributor.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                author_login\n                            \n                            \n                                    Public\n                                    Optional\n                                updated_at\n                            \n                            \n                                    Public\n                                user_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        author_login\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Pull request author username', example: 'Th3nn3ss'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/dtos/pull-request-contributor.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Timestamp representing pr last update', example: '2022-08-28 22:04:29.000000'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/dtos/pull-request-contributor.dto.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Pull request author id', example: 1})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/dtos/pull-request-contributor.dto.ts:14\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiModelProperty } from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\n\nexport class DbPullRequestContributor {\n  @ApiModelProperty({\n    description: \"Pull request author username\",\n    example: \"Th3nn3ss\",\n  })\n  public author_login: string;\n\n  @ApiModelProperty({\n    description: \"Pull request author id\",\n    example: 1,\n  })\n  public user_id: number;\n\n  @ApiModelProperty({\n    description: \"Timestamp representing pr last update\",\n    example: \"2022-08-28 22:04:29.000000\",\n  })\n  public updated_at?: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbPullRequestReview.html":{"url":"entities/DbPullRequestReview.html","title":"entity - DbPullRequestReview","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbPullRequestReview\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/pull-requests/entities/pull-request-review.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                created_at\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                    Optional\n                                published_at\n                            \n                            \n                                    Public\n                                pullRequest\n                            \n                            \n                                    Public\n                                reviewer_login\n                            \n                            \n                                    Public\n                                    Optional\n                                state\n                            \n                            \n                                    Public\n                                    Optional\n                                updated_at\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing pr review creation date', example: '2022-08-28 22:04:29.000000'})@CreateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request-review.entity.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Pull request review identifier', example: 123456789, type: 'integer'})@PrimaryColumn('integer')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request-review.entity.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        published_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Timestamp representing pr review published date', example: '2022-08-28 22:04:29.000000'})@Column({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request-review.entity.ts:47\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        pullRequest\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbPullRequest\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined)@JoinColumn({name: 'pull_request_id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request-review.entity.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        reviewer_login\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Pull request reviewer username', example: 'Bdougie'})@Column('text')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request-review.entity.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        state\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Pull request review state', example: 'approved'})@Column('text')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request-review.entity.ts:64\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Timestamp representing pr review update date', example: '2022-08-28 22:04:29.000000'})@Column({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request-review.entity.ts:57\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Entity, Column, ManyToOne, JoinColumn, BaseEntity, CreateDateColumn, PrimaryColumn } from \"typeorm\";\nimport {\n  ApiModelProperty,\n  ApiModelPropertyOptional,\n} from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\nimport { DbPullRequest } from \"./pull-request.entity\";\n\n@Entity(\"pull_request_reviews\")\nexport class DbPullRequestReview extends BaseEntity {\n  @ApiModelProperty({\n    description: \"Pull request review identifier\",\n    example: 123456789,\n    type: \"integer\",\n  })\n  @PrimaryColumn(\"integer\")\n  public id: number;\n\n  @ManyToOne(() => DbPullRequest)\n  @JoinColumn({ name: \"pull_request_id\" })\n  public pullRequest: DbPullRequest;\n\n  @ApiModelProperty({\n    description: \"Pull request reviewer username\",\n    example: \"Bdougie\",\n  })\n  @Column(\"text\")\n  public reviewer_login: string;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing pr review creation date\",\n    example: \"2022-08-28 22:04:29.000000\",\n  })\n  @CreateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public created_at?: Date;\n\n  @ApiModelProperty({\n    description: \"Timestamp representing pr review published date\",\n    example: \"2022-08-28 22:04:29.000000\",\n  })\n  @Column({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public published_at?: Date;\n\n  @ApiModelProperty({\n    description: \"Timestamp representing pr review update date\",\n    example: \"2022-08-28 22:04:29.000000\",\n  })\n  @Column({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public updated_at?: Date;\n\n  @ApiModelProperty({\n    description: \"Pull request review state\",\n    example: \"approved\",\n  })\n  @Column(\"text\")\n  public state?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbRepoLoginContributions.html":{"url":"entities/DbRepoLoginContributions.html","title":"entity - DbRepoLoginContributions","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbRepoLoginContributions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/contribution/entities/repo-user-contributions.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                comments\n                            \n                            \n                                commits\n                            \n                            \n                                issues_created\n                            \n                            \n                                    Public\n                                    Optional\n                                login\n                            \n                            \n                                prs_created\n                            \n                            \n                                prs_reviewed\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        comments\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Number of comments associated with a user login', example: 0, type: 'integer'})@Column({type: 'bigint', select: false, insert: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/contribution/entities/repo-user-contributions.entity.ts:75\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        commits\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Number of commits associated with a user login', example: 0, type: 'integer'})@Column({type: 'bigint', select: false, insert: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/contribution/entities/repo-user-contributions.entity.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        issues_created\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Number of issues created by a user login', example: 0, type: 'integer'})@Column({type: 'bigint', select: false, insert: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/contribution/entities/repo-user-contributions.entity.ts:63\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        login\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User list collaborator's login', example: 'bdougie'})@Column({type: 'text', select: false, insert: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/contribution/entities/repo-user-contributions.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        prs_created\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Number of PRs created associated with a user login', example: 0, type: 'integer'})@Column({type: 'bigint', select: false, insert: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/contribution/entities/repo-user-contributions.entity.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        prs_reviewed\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Number of PRs reviewed by a user login', example: 0, type: 'integer'})@Column({type: 'bigint', select: false, insert: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/contribution/entities/repo-user-contributions.entity.ts:51\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity } from \"typeorm\";\nimport { ApiModelProperty } from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\n\n@Entity({ name: \"repo_user_contributions\" })\nexport class DbRepoLoginContributions {\n  @ApiModelProperty({\n    description: \"User list collaborator's login\",\n    example: \"bdougie\",\n  })\n  @Column({\n    type: \"text\",\n    select: false,\n    insert: false,\n  })\n  public login?: string;\n\n  @ApiModelProperty({\n    description: \"Number of commits associated with a user login\",\n    example: 0,\n    type: \"integer\",\n  })\n  @Column({\n    type: \"bigint\",\n    select: false,\n    insert: false,\n  })\n  commits: number;\n\n  @ApiModelProperty({\n    description: \"Number of PRs created associated with a user login\",\n    example: 0,\n    type: \"integer\",\n  })\n  @Column({\n    type: \"bigint\",\n    select: false,\n    insert: false,\n  })\n  prs_created: number;\n\n  @ApiModelProperty({\n    description: \"Number of PRs reviewed by a user login\",\n    example: 0,\n    type: \"integer\",\n  })\n  @Column({\n    type: \"bigint\",\n    select: false,\n    insert: false,\n  })\n  prs_reviewed: number;\n\n  @ApiModelProperty({\n    description: \"Number of issues created by a user login\",\n    example: 0,\n    type: \"integer\",\n  })\n  @Column({\n    type: \"bigint\",\n    select: false,\n    insert: false,\n  })\n  issues_created: number;\n\n  @ApiModelProperty({\n    description: \"Number of comments associated with a user login\",\n    example: 0,\n    type: \"integer\",\n  })\n  @Column({\n    type: \"bigint\",\n    select: false,\n    insert: false,\n  })\n  comments: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbRepoToUserStargazers.html":{"url":"entities/DbRepoToUserStargazers.html","title":"entity - DbRepoToUserStargazers","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbRepoToUserStargazers\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/repo/entities/repo.to.user.stargazers.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                created_at\n                            \n                            \n                                    Public\n                                    Optional\n                                deleted_at\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                repo\n                            \n                            \n                                    Public\n                                repo_id\n                            \n                            \n                                    Public\n                                    Optional\n                                updated_at\n                            \n                            \n                                    Public\n                                user\n                            \n                            \n                                    Public\n                                user_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing stargaze creation', example: '2016-10-19 13:24:51.000000'})@CreateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.stargazers.entity.ts:53\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        deleted_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@DeleteDateColumn({type: 'timestamp without time zone', select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.stargazers.entity.ts:70\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Stargaze identifier', example: 196, type: 'integer'})@PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.stargazers.entity.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        repo\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbRepo\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@ManyToOne(undefined, repo => repo.repoToUserStargazers)@JoinColumn({name: 'repo_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.stargazers.entity.ts:86\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        repo_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Repository identifier', example: 71359796, type: 'integer'})@Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.stargazers.entity.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing stargaze last update', example: '2022-08-28 22:04:29.000000'})@UpdateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.stargazers.entity.ts:63\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbUser\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@ManyToOne(undefined, user => user.repoToUserStargazers)@JoinColumn({name: 'user_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.stargazers.entity.ts:78\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User identifier', example: 237133, type: 'integer'})@Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.stargazers.entity.ts:35\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Column,\n  CreateDateColumn,\n  DeleteDateColumn,\n  Entity,\n  JoinColumn,\n  ManyToOne,\n  PrimaryGeneratedColumn,\n  UpdateDateColumn,\n} from \"typeorm\";\nimport { ApiHideProperty } from \"@nestjs/swagger\";\nimport {\n  ApiModelProperty,\n  ApiModelPropertyOptional,\n} from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\nimport { DbUser } from \"../../user/user.entity\";\nimport { DbRepo } from \"./repo.entity\";\n\n@Entity({ name: \"users_to_repos_stargazers\" })\nexport class DbRepoToUserStargazers {\n  @ApiModelProperty({\n    description: \"Stargaze identifier\",\n    example: 196,\n    type: \"integer\",\n  })\n  @PrimaryGeneratedColumn()\n  public id!: number;\n\n  @ApiModelProperty({\n    description: \"User identifier\",\n    example: 237133,\n    type: \"integer\",\n  })\n  @Column()\n  public user_id!: number;\n\n  @ApiModelProperty({\n    description: \"Repository identifier\",\n    example: 71359796,\n    type: \"integer\",\n  })\n  @Column()\n  public repo_id!: number;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing stargaze creation\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  @CreateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public created_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing stargaze last update\",\n    example: \"2022-08-28 22:04:29.000000\",\n  })\n  @UpdateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public updated_at?: Date;\n\n  @ApiHideProperty()\n  @DeleteDateColumn({\n    type: \"timestamp without time zone\",\n    select: false,\n  })\n  public deleted_at?: Date;\n\n  @ApiHideProperty()\n  @ManyToOne(() => DbUser, (user) => user.repoToUserStargazers)\n  @JoinColumn({\n    name: \"user_id\",\n    referencedColumnName: \"id\",\n  })\n  public user!: DbUser;\n\n  @ApiHideProperty()\n  @ManyToOne(() => DbRepo, (repo) => repo.repoToUserStargazers)\n  @JoinColumn({\n    name: \"repo_id\",\n    referencedColumnName: \"id\",\n  })\n  public repo!: DbRepo;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbRepoToUserStars.html":{"url":"entities/DbRepoToUserStars.html","title":"entity - DbRepoToUserStars","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbRepoToUserStars\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/repo/entities/repo.to.user.stars.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                created_at\n                            \n                            \n                                    Public\n                                    Optional\n                                deleted_at\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                repo\n                            \n                            \n                                    Public\n                                repo_id\n                            \n                            \n                                    Public\n                                    Optional\n                                updated_at\n                            \n                            \n                                    Public\n                                user\n                            \n                            \n                                    Public\n                                user_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing star creation', example: '2016-10-19 13:24:51.000000'})@CreateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.stars.entity.ts:53\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        deleted_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@DeleteDateColumn({type: 'timestamp without time zone', select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.stars.entity.ts:70\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Star identifier', example: 196, type: 'integer'})@PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.stars.entity.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        repo\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbRepo\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@ManyToOne(undefined, repo => repo.repoToUserStars)@JoinColumn({name: 'repo_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.stars.entity.ts:86\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        repo_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Repository identifier', example: 71359796, type: 'integer'})@Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.stars.entity.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing star last update', example: '2022-08-28 22:04:29.000000'})@UpdateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.stars.entity.ts:63\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbUser\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@ManyToOne(undefined, user => user.repoToUserStars)@JoinColumn({name: 'user_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.stars.entity.ts:78\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User identifier', example: 237133, type: 'integer'})@Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.stars.entity.ts:35\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Column,\n  CreateDateColumn,\n  DeleteDateColumn,\n  Entity,\n  JoinColumn,\n  ManyToOne,\n  PrimaryGeneratedColumn,\n  UpdateDateColumn,\n} from \"typeorm\";\nimport { ApiHideProperty } from \"@nestjs/swagger\";\nimport {\n  ApiModelProperty,\n  ApiModelPropertyOptional,\n} from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\nimport { DbUser } from \"../../user/user.entity\";\nimport { DbRepo } from \"./repo.entity\";\n\n@Entity({ name: \"users_to_repos_stars\" })\nexport class DbRepoToUserStars {\n  @ApiModelProperty({\n    description: \"Star identifier\",\n    example: 196,\n    type: \"integer\",\n  })\n  @PrimaryGeneratedColumn()\n  public id!: number;\n\n  @ApiModelProperty({\n    description: \"User identifier\",\n    example: 237133,\n    type: \"integer\",\n  })\n  @Column()\n  public user_id!: number;\n\n  @ApiModelProperty({\n    description: \"Repository identifier\",\n    example: 71359796,\n    type: \"integer\",\n  })\n  @Column()\n  public repo_id!: number;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing star creation\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  @CreateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public created_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing star last update\",\n    example: \"2022-08-28 22:04:29.000000\",\n  })\n  @UpdateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public updated_at?: Date;\n\n  @ApiHideProperty()\n  @DeleteDateColumn({\n    type: \"timestamp without time zone\",\n    select: false,\n  })\n  public deleted_at?: Date;\n\n  @ApiHideProperty()\n  @ManyToOne(() => DbUser, (user) => user.repoToUserStars)\n  @JoinColumn({\n    name: \"user_id\",\n    referencedColumnName: \"id\",\n  })\n  public user!: DbUser;\n\n  @ApiHideProperty()\n  @ManyToOne(() => DbRepo, (repo) => repo.repoToUserStars)\n  @JoinColumn({\n    name: \"repo_id\",\n    referencedColumnName: \"id\",\n  })\n  public repo!: DbRepo;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbRepoToUserSubmissions.html":{"url":"entities/DbRepoToUserSubmissions.html","title":"entity - DbRepoToUserSubmissions","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbRepoToUserSubmissions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/repo/entities/repo.to.user.submissions.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                created_at\n                            \n                            \n                                    Public\n                                    Optional\n                                deleted_at\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                    Optional\n                                is_accepted\n                            \n                            \n                                    Public\n                                repo\n                            \n                            \n                                    Public\n                                repo_id\n                            \n                            \n                                    Public\n                                    Optional\n                                updated_at\n                            \n                            \n                                    Public\n                                user\n                            \n                            \n                                    Public\n                                user_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing submission creation', example: '2016-10-19 13:24:51.000000'})@CreateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.submissions.entity.ts:60\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        deleted_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@DeleteDateColumn({type: 'timestamp without time zone', select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.submissions.entity.ts:77\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Submission identifier', example: 196, type: 'integer'})@PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.submissions.entity.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        is_accepted\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Flag representing if the submission is approved by open sauced staff', example: false})@Column({default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.submissions.entity.ts:50\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        repo\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbRepo\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@ManyToOne(undefined, repo => repo.repoToUserSubmissions)@JoinColumn({name: 'repo_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.submissions.entity.ts:93\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        repo_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Repository identifier', example: 71359796, type: 'integer'})@Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.submissions.entity.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing submission last update', example: '2022-08-28 22:04:29.000000'})@UpdateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.submissions.entity.ts:70\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbUser\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@ManyToOne(undefined, user => user.repoToUserSubmissions)@JoinColumn({name: 'user_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.submissions.entity.ts:85\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User identifier', example: 237133, type: 'integer'})@Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.submissions.entity.ts:35\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Column,\n  CreateDateColumn,\n  DeleteDateColumn,\n  Entity,\n  JoinColumn,\n  ManyToOne,\n  PrimaryGeneratedColumn,\n  UpdateDateColumn,\n} from \"typeorm\";\nimport { ApiHideProperty } from \"@nestjs/swagger\";\nimport {\n  ApiModelProperty,\n  ApiModelPropertyOptional,\n} from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\nimport { DbUser } from \"../../user/user.entity\";\nimport { DbRepo } from \"./repo.entity\";\n\n@Entity({ name: \"users_to_repos_submissions\" })\nexport class DbRepoToUserSubmissions {\n  @ApiModelProperty({\n    description: \"Submission identifier\",\n    example: 196,\n    type: \"integer\",\n  })\n  @PrimaryGeneratedColumn()\n  public id!: number;\n\n  @ApiModelProperty({\n    description: \"User identifier\",\n    example: 237133,\n    type: \"integer\",\n  })\n  @Column()\n  public user_id!: number;\n\n  @ApiModelProperty({\n    description: \"Repository identifier\",\n    example: 71359796,\n    type: \"integer\",\n  })\n  @Column()\n  public repo_id!: number;\n\n  @ApiModelProperty({\n    description: \"Flag representing if the submission is approved by open sauced staff\",\n    example: false,\n  })\n  @Column({ default: false })\n  public is_accepted?: boolean;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing submission creation\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  @CreateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public created_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing submission last update\",\n    example: \"2022-08-28 22:04:29.000000\",\n  })\n  @UpdateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public updated_at?: Date;\n\n  @ApiHideProperty()\n  @DeleteDateColumn({\n    type: \"timestamp without time zone\",\n    select: false,\n  })\n  public deleted_at?: Date;\n\n  @ApiHideProperty()\n  @ManyToOne(() => DbUser, (user) => user.repoToUserSubmissions)\n  @JoinColumn({\n    name: \"user_id\",\n    referencedColumnName: \"id\",\n  })\n  public user!: DbUser;\n\n  @ApiHideProperty()\n  @ManyToOne(() => DbRepo, (repo) => repo.repoToUserSubmissions)\n  @JoinColumn({\n    name: \"repo_id\",\n    referencedColumnName: \"id\",\n  })\n  public repo!: DbRepo;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbRepoToUserVotes.html":{"url":"entities/DbRepoToUserVotes.html","title":"entity - DbRepoToUserVotes","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbRepoToUserVotes\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/repo/entities/repo.to.user.votes.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                created_at\n                            \n                            \n                                    Public\n                                    Optional\n                                deleted_at\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                repo\n                            \n                            \n                                    Public\n                                repo_id\n                            \n                            \n                                    Public\n                                    Optional\n                                updated_at\n                            \n                            \n                                    Public\n                                user\n                            \n                            \n                                    Public\n                                user_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing vote creation', example: '2016-10-19 13:24:51.000000'})@CreateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.votes.entity.ts:53\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        deleted_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@DeleteDateColumn({type: 'timestamp without time zone', select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.votes.entity.ts:70\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Vote identifier', example: 196, type: 'integer'})@PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.votes.entity.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        repo\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbRepo\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@ManyToOne(undefined, repo => repo.repoToUserVotes)@JoinColumn({name: 'repo_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.votes.entity.ts:86\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        repo_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Repository identifier', example: 71359796, type: 'integer'})@Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.votes.entity.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing vote last update', example: '2022-08-28 22:04:29.000000'})@UpdateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.votes.entity.ts:63\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbUser\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@ManyToOne(undefined, user => user.repoToUserVotes)@JoinColumn({name: 'user_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.votes.entity.ts:78\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User identifier', example: 237133, type: 'integer'})@Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.votes.entity.ts:35\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Column,\n  CreateDateColumn,\n  DeleteDateColumn,\n  Entity,\n  JoinColumn,\n  ManyToOne,\n  PrimaryGeneratedColumn,\n  UpdateDateColumn,\n} from \"typeorm\";\nimport { ApiHideProperty } from \"@nestjs/swagger\";\nimport {\n  ApiModelProperty,\n  ApiModelPropertyOptional,\n} from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\nimport { DbUser } from \"../../user/user.entity\";\nimport { DbRepo } from \"./repo.entity\";\n\n@Entity({ name: \"users_to_repos_votes\" })\nexport class DbRepoToUserVotes {\n  @ApiModelProperty({\n    description: \"Vote identifier\",\n    example: 196,\n    type: \"integer\",\n  })\n  @PrimaryGeneratedColumn()\n  public id!: number;\n\n  @ApiModelProperty({\n    description: \"User identifier\",\n    example: 237133,\n    type: \"integer\",\n  })\n  @Column()\n  public user_id!: number;\n\n  @ApiModelProperty({\n    description: \"Repository identifier\",\n    example: 71359796,\n    type: \"integer\",\n  })\n  @Column()\n  public repo_id!: number;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing vote creation\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  @CreateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public created_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing vote last update\",\n    example: \"2022-08-28 22:04:29.000000\",\n  })\n  @UpdateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public updated_at?: Date;\n\n  @ApiHideProperty()\n  @DeleteDateColumn({\n    type: \"timestamp without time zone\",\n    select: false,\n  })\n  public deleted_at?: Date;\n\n  @ApiHideProperty()\n  @ManyToOne(() => DbUser, (user) => user.repoToUserVotes)\n  @JoinColumn({\n    name: \"user_id\",\n    referencedColumnName: \"id\",\n  })\n  public user!: DbUser;\n\n  @ApiHideProperty()\n  @ManyToOne(() => DbRepo, (repo) => repo.repoToUserVotes)\n  @JoinColumn({\n    name: \"repo_id\",\n    referencedColumnName: \"id\",\n  })\n  public repo!: DbRepo;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbSubscription.html":{"url":"entities/DbSubscription.html","title":"entity - DbSubscription","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbSubscription\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/subscription/stripe-subscription.dto.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                cancel_at\n                            \n                            \n                                    Public\n                                cancel_at_period_end\n                            \n                            \n                                    Public\n                                    Optional\n                                canceled_at\n                            \n                            \n                                    Public\n                                    Optional\n                                created_at\n                            \n                            \n                                    Public\n                                    Optional\n                                current_period_end_at\n                            \n                            \n                                    Public\n                                    Optional\n                                current_period_start_at\n                            \n                            \n                                    Public\n                                    Optional\n                                ended_at\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                metadata\n                            \n                            \n                                    Public\n                                price_id\n                            \n                            \n                                    Public\n                                quantity\n                            \n                            \n                                    Public\n                                status\n                            \n                            \n                                    Public\n                                    Optional\n                                trial_end_at\n                            \n                            \n                                    Public\n                                    Optional\n                                trial_start_at\n                            \n                            \n                                    Public\n                                user_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        cancel_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing cancel date', example: '2016-10-19 13:24:51.000000'})@Column({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/subscription/stripe-subscription.dto.ts:111\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        cancel_at_period_end\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing subscription creation', example: '2016-10-19 13:24:51.000000'})@Column({type: 'boolean'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/subscription/stripe-subscription.dto.ts:61\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        canceled_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing canceled date', example: '2016-10-19 13:24:51.000000'})@Column({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/subscription/stripe-subscription.dto.ts:121\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing subscription creation', example: '2016-10-19 13:24:51.000000'})@CreateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/subscription/stripe-subscription.dto.ts:71\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        current_period_end_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing current period end date', example: '2016-10-19 13:24:51.000000'})@Column({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/subscription/stripe-subscription.dto.ts:91\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        current_period_start_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing current period start date', example: '2016-10-19 13:24:51.000000'})@Column({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/subscription/stripe-subscription.dto.ts:81\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        ended_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing end date', example: '2016-10-19 13:24:51.000000'})@Column({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/subscription/stripe-subscription.dto.ts:101\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Subscription identifier', example: 'sub_1234'})@PrimaryColumn('text')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/subscription/stripe-subscription.dto.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        metadata\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@Column({type: 'text', select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/subscription/stripe-subscription.dto.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        price_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Price ID', example: 'price_12345'})@Column({type: 'text'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/subscription/stripe-subscription.dto.ts:47\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        quantity\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Quantity', example: 1})@Column({type: 'bigint'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/subscription/stripe-subscription.dto.ts:54\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Subscription Status', example: 'active'})@Column({type: 'text', default: 'active'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/subscription/stripe-subscription.dto.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        trial_end_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing trial end date', example: '2016-10-19 13:24:51.000000'})@Column({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/subscription/stripe-subscription.dto.ts:141\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        trial_start_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing trial start date', example: '2016-10-19 13:24:51.000000'})@Column({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/subscription/stripe-subscription.dto.ts:131\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User identifier', example: 42211})@Column({type: 'bigint'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/subscription/stripe-subscription.dto.ts:23\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Entity, BaseEntity, PrimaryColumn, Column, CreateDateColumn } from \"typeorm\";\n\nimport {\n  ApiModelProperty,\n  ApiModelPropertyOptional,\n} from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\nimport { ApiHideProperty } from \"@nestjs/swagger\";\n\n@Entity({ name: \"subscriptions\" })\nexport class DbSubscription extends BaseEntity {\n  @ApiModelProperty({\n    description: \"Subscription identifier\",\n    example: \"sub_1234\",\n  })\n  @PrimaryColumn(\"text\")\n  public id!: string;\n\n  @ApiModelProperty({\n    description: \"User identifier\",\n    example: 42211,\n  })\n  @Column({ type: \"bigint\" })\n  public user_id!: number;\n\n  @ApiModelProperty({\n    description: \"Subscription Status\",\n    example: \"active\",\n  })\n  @Column({\n    type: \"text\",\n    default: \"active\",\n  })\n  public status!: string;\n\n  @ApiHideProperty()\n  @Column({\n    type: \"text\",\n    select: false,\n  })\n  public metadata!: string;\n\n  @ApiModelProperty({\n    description: \"Price ID\",\n    example: \"price_12345\",\n  })\n  @Column({ type: \"text\" })\n  public price_id!: string;\n\n  @ApiModelProperty({\n    description: \"Quantity\",\n    example: 1,\n  })\n  @Column({ type: \"bigint\" })\n  public quantity!: number;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing subscription creation\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  @Column({ type: \"boolean\" })\n  public cancel_at_period_end!: boolean;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing subscription creation\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  @CreateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public created_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing current period start date\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  @Column({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public current_period_start_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing current period end date\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  @Column({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public current_period_end_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing end date\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  @Column({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public ended_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing cancel date\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  @Column({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public cancel_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing canceled date\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  @Column({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public canceled_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing trial start date\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  @Column({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public trial_start_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing trial end date\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  @Column({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public trial_end_at?: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DbTimezone.html":{"url":"classes/DbTimezone.html","title":"class - DbTimezone","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DbTimezone\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user-lists/entities/timezones.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                timezone\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        timezone\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Timezone string', example: 'America/Los_Angeles'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-lists/entities/timezones.entity.ts:8\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiModelProperty } from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\n\nexport class DbTimezone {\n  @ApiModelProperty({\n    description: \"Timezone string\",\n    example: \"America/Los_Angeles\",\n  })\n  public timezone: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DbTopUser.html":{"url":"classes/DbTopUser.html","title":"class - DbTopUser","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DbTopUser\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/entities/top-users.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                login\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        login\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Top User Login', example: 'bdougie'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/top-users.entity.ts:8\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiModelProperty } from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\n\nexport class DbTopUser {\n  @ApiModelProperty({\n    description: \"Top User Login\",\n    example: \"bdougie\",\n  })\n  public login?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbUserCollaboration.html":{"url":"entities/DbUserCollaboration.html","title":"entity - DbUserCollaboration","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbUserCollaboration\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/entities/user-collaboration.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                collaboration_emailed_at\n                            \n                            \n                                    Public\n                                    Optional\n                                created_at\n                            \n                            \n                                    Public\n                                    Optional\n                                deleted_at\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                message\n                            \n                            \n                                    Public\n                                    Optional\n                                request_emailed_at\n                            \n                            \n                                    Public\n                                request_user\n                            \n                            \n                                    Public\n                                    Optional\n                                request_user_id\n                            \n                            \n                                    Public\n                                status\n                            \n                            \n                                    Public\n                                    Optional\n                                updated_at\n                            \n                            \n                                    Public\n                                user\n                            \n                            \n                                    Public\n                                    Optional\n                                user_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        collaboration_emailed_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing collaboration acceptance email sent date', example: '2023-04-10 13:24:51.000000'})@Column({type: 'timestamp without time zone', select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-collaboration.entity.ts:133\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing user collaboration creation', example: '2022-10-19 13:24:51.000000'})@CreateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-collaboration.entity.ts:93\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        deleted_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing user collaboration deletion', example: '2022-10-19 13:24:51.000000'})@DeleteDateColumn({type: 'timestamp without time zone', select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-collaboration.entity.ts:113\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User Collaboration identifier', example: 'uuid-v4'})@PrimaryColumn()@PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-collaboration.entity.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        message\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Collaboration Request Message', example: 'Hey, are you up for collaborating on this cool project?'})@Column({type: 'character varying', length: 500, default: ''})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-collaboration.entity.ts:72\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        request_emailed_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing collaboration request email sent date', example: '2023-04-10 13:24:51.000000'})@Column({type: 'timestamp without time zone', select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-collaboration.entity.ts:123\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        request_user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbUser\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@ManyToOne(undefined, user => user.request_collaborations, {onDelete: 'CASCADE'})@JoinColumn({name: 'request_user_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-collaboration.entity.ts:61\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        request_user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Collaboration Request User ID', example: 31333, type: 'integer'})@Column({type: 'integer'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-collaboration.entity.ts:45\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Collaboration Status', example: 'pending'})@Column({type: 'character varying', length: 20, default: 'pending'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-collaboration.entity.ts:83\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing user collaboration last updated', example: '2022-10-19 13:24:51.000000'})@UpdateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-collaboration.entity.ts:103\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbUser\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@ManyToOne(undefined, user => user.collaborations, {onDelete: 'CASCADE'})@JoinColumn({name: 'user_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-collaboration.entity.ts:53\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Collaboration Receipient User ID', example: 237133, type: 'integer'})@Column({type: 'integer'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-collaboration.entity.ts:37\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  Column,\n  BaseEntity,\n  PrimaryColumn,\n  CreateDateColumn,\n  UpdateDateColumn,\n  PrimaryGeneratedColumn,\n  DeleteDateColumn,\n  JoinColumn,\n  ManyToOne,\n} from \"typeorm\";\n\nimport {\n  ApiModelProperty,\n  ApiModelPropertyOptional,\n} from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\nimport { ApiHideProperty } from \"@nestjs/swagger\";\nimport { DbUser } from \"../user.entity\";\n\n@Entity({ name: \"user_collaborations\" })\nexport class DbUserCollaboration extends BaseEntity {\n  @ApiModelProperty({\n    description: \"User Collaboration identifier\",\n    example: \"uuid-v4\",\n  })\n  @PrimaryColumn()\n  @PrimaryGeneratedColumn()\n  public id!: string;\n\n  @ApiModelProperty({\n    description: \"Collaboration Receipient User ID\",\n    example: 237133,\n    type: \"integer\",\n  })\n  @Column({ type: \"integer\" })\n  public user_id?: number;\n\n  @ApiModelProperty({\n    description: \"Collaboration Request User ID\",\n    example: 31333,\n    type: \"integer\",\n  })\n  @Column({ type: \"integer\" })\n  public request_user_id?: number;\n\n  @ApiHideProperty()\n  @ManyToOne(() => DbUser, (user) => user.collaborations, { onDelete: \"CASCADE\" })\n  @JoinColumn({\n    name: \"user_id\",\n    referencedColumnName: \"id\",\n  })\n  public user: DbUser;\n\n  @ApiHideProperty()\n  @ManyToOne(() => DbUser, (user) => user.request_collaborations, { onDelete: \"CASCADE\" })\n  @JoinColumn({\n    name: \"request_user_id\",\n    referencedColumnName: \"id\",\n  })\n  public request_user: DbUser;\n\n  @ApiModelProperty({\n    description: \"Collaboration Request Message\",\n    example: \"Hey, are you up for collaborating on this cool project?\",\n  })\n  @Column({\n    type: \"character varying\",\n    length: 500,\n    default: \"\",\n  })\n  public message: string;\n\n  @ApiModelProperty({\n    description: \"Collaboration Status\",\n    example: \"pending\",\n  })\n  @Column({\n    type: \"character varying\",\n    length: 20,\n    default: \"pending\",\n  })\n  public status: string;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing user collaboration creation\",\n    example: \"2022-10-19 13:24:51.000000\",\n  })\n  @CreateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public created_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing user collaboration last updated\",\n    example: \"2022-10-19 13:24:51.000000\",\n  })\n  @UpdateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public updated_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing user collaboration deletion\",\n    example: \"2022-10-19 13:24:51.000000\",\n  })\n  @DeleteDateColumn({\n    type: \"timestamp without time zone\",\n    select: false,\n  })\n  public deleted_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing collaboration request email sent date\",\n    example: \"2023-04-10 13:24:51.000000\",\n  })\n  @Column({\n    type: \"timestamp without time zone\",\n    select: false,\n  })\n  public request_emailed_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing collaboration acceptance email sent date\",\n    example: \"2023-04-10 13:24:51.000000\",\n  })\n  @Column({\n    type: \"timestamp without time zone\",\n    select: false,\n  })\n  public collaboration_emailed_at?: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbUserHighlight.html":{"url":"entities/DbUserHighlight.html","title":"entity - DbUserHighlight","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbUserHighlight\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/entities/user-highlight.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                created_at\n                            \n                            \n                                    Public\n                                    Optional\n                                deleted_at\n                            \n                            \n                                    Public\n                                    Optional\n                                featured\n                            \n                            \n                                    Public\n                                    Optional\n                                full_name\n                            \n                            \n                                    Public\n                                highlight\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                    Optional\n                                login\n                            \n                            \n                                    Public\n                                    Optional\n                                name\n                            \n                            \n                                    Public\n                                    Optional\n                                pinned\n                            \n                            \n                                    Public\n                                reactions\n                            \n                            \n                                    Public\n                                    Optional\n                                shipped_at\n                            \n                            \n                                    Public\n                                tagged_repos\n                            \n                            \n                                    Public\n                                    Optional\n                                title\n                            \n                            \n                                    Public\n                                type\n                            \n                            \n                                    Public\n                                    Optional\n                                updated_at\n                            \n                            \n                                    Public\n                                    Optional\n                                url\n                            \n                            \n                                    Public\n                                user\n                            \n                            \n                                    Public\n                                user_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing highlight creation date', example: '2023-01-19 13:24:51.000000'})@CreateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight.entity.ts:99\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        deleted_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing highlight deletion date', example: '2023-01-19 13:24:51.000000'})@DeleteDateColumn({type: 'timestamp without time zone'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight.entity.ts:116\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        featured\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Whether the highlight is featured or not', example: false})@Column({type: 'boolean', default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight.entity.ts:89\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        full_name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Highlight Repo Full Name', example: 'open-sauced/insights'})@Column({type: 'text', select: false, insert: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight.entity.ts:134\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        highlight\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Highlight Text', example: \n    I made my first open source pull request!\n\n    github.com/open-sauced/insights/pull/1})@Column('text')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight.entity.ts:62\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User Highlight identifier', example: 237133, type: 'integer'})@PrimaryGeneratedColumn({type: 'bigint'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight.entity.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        login\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Highlight User Login', example: 'bdougie'})@Column({type: 'text', select: false, insert: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight.entity.ts:156\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Highlight User Full Name', example: 'Brian Douglas'})@Column({type: 'text', select: false, insert: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight.entity.ts:145\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        pinned\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Whether the highlight is pinned to the top', example: false})@Column({type: 'boolean', default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight.entity.ts:79\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        reactions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbUserHighlightReaction[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@OneToMany(undefined, highlightReaction => highlightReaction.highlight)@JoinColumn({name: 'highlight_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight.entity.ts:185\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        shipped_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing highlight shipped date', example: '2023-01-19 13:24:51.000000'})@Column({type: 'timestamp without time zone'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight.entity.ts:123\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        tagged_repos\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'An array of full-names of tagged repositories', example: undefined, type: 'string', isArray: true})@Column({type: 'varchar', array: true, default: '{}'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight.entity.ts:169\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Highlight Title', example: 'My First PR!'})@Column('text')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight.entity.ts:52\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Highlight type', example: 'pull_request'})@Column('text')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight.entity.ts:69\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing highlight updated date', example: '2023-01-19 13:24:51.000000'})@UpdateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight.entity.ts:109\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        url\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Highlight Pull Request URL', example: 'github.com/open-sauced/insights/pull/1'})@Column('text')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight.entity.ts:45\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbUser\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@ManyToOne(undefined, user => user.highlights, {onDelete: 'CASCADE'})@JoinColumn({name: 'user_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight.entity.ts:177\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User identifier', example: 237133, type: 'integer'})@Column('bigint')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight.entity.ts:38\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  BaseEntity,\n  Column,\n  PrimaryGeneratedColumn,\n  CreateDateColumn,\n  DeleteDateColumn,\n  UpdateDateColumn,\n  OneToMany,\n  ManyToOne,\n  JoinColumn,\n} from \"typeorm\";\n\nimport {\n  ApiModelProperty,\n  ApiModelPropertyOptional,\n} from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\nimport { ApiHideProperty } from \"@nestjs/swagger\";\nimport { DbUser } from \"../user.entity\";\nimport { DbUserHighlightReaction } from \"./user-highlight-reaction.entity\";\n\n@Entity({ name: \"user_highlights\" })\nexport class DbUserHighlight extends BaseEntity {\n  @ApiModelProperty({\n    description: \"User Highlight identifier\",\n    example: 237133,\n    type: \"integer\",\n  })\n  @PrimaryGeneratedColumn({ type: \"bigint\" })\n  public id!: number;\n\n  @ApiModelProperty({\n    description: \"User identifier\",\n    example: 237133,\n    type: \"integer\",\n  })\n  @Column(\"bigint\")\n  public user_id: number;\n\n  @ApiModelProperty({\n    description: \"Highlight Pull Request URL\",\n    example: \"github.com/open-sauced/insights/pull/1\",\n  })\n  @Column(\"text\")\n  public url?: string;\n\n  @ApiModelProperty({\n    description: \"Highlight Title\",\n    example: \"My First PR!\",\n  })\n  @Column(\"text\")\n  public title?: string;\n\n  @ApiModelProperty({\n    description: \"Highlight Text\",\n    example: `\n    I made my first open source pull request!\n\n    github.com/open-sauced/insights/pull/1`,\n  })\n  @Column(\"text\")\n  public highlight: string;\n\n  @ApiModelProperty({\n    description: \"Highlight type\",\n    example: \"pull_request\",\n  })\n  @Column(\"text\")\n  public type: string;\n\n  @ApiModelProperty({\n    description: \"Whether the highlight is pinned to the top\",\n    example: false,\n  })\n  @Column({\n    type: \"boolean\",\n    default: false,\n  })\n  public pinned?: boolean;\n\n  @ApiModelProperty({\n    description: \"Whether the highlight is featured or not\",\n    example: false,\n  })\n  @Column({\n    type: \"boolean\",\n    default: false,\n  })\n  public featured?: boolean;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing highlight creation date\",\n    example: \"2023-01-19 13:24:51.000000\",\n  })\n  @CreateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public created_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing highlight updated date\",\n    example: \"2023-01-19 13:24:51.000000\",\n  })\n  @UpdateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public updated_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing highlight deletion date\",\n    example: \"2023-01-19 13:24:51.000000\",\n  })\n  @DeleteDateColumn({ type: \"timestamp without time zone\" })\n  public deleted_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing highlight shipped date\",\n    example: \"2023-01-19 13:24:51.000000\",\n  })\n  @Column({ type: \"timestamp without time zone\" })\n  public shipped_at?: Date;\n\n  @ApiModelProperty({\n    description: \"Highlight Repo Full Name\",\n    example: \"open-sauced/insights\",\n  })\n  @Column({\n    type: \"text\",\n    select: false,\n    insert: false,\n  })\n  public full_name?: string;\n\n  @ApiModelProperty({\n    description: \"Highlight User Full Name\",\n    example: \"Brian Douglas\",\n  })\n  @Column({\n    type: \"text\",\n    select: false,\n    insert: false,\n  })\n  public name?: string;\n\n  @ApiModelProperty({\n    description: \"Highlight User Login\",\n    example: \"bdougie\",\n  })\n  @Column({\n    type: \"text\",\n    select: false,\n    insert: false,\n  })\n  public login?: string;\n\n  @ApiModelProperty({\n    description: \"An array of full-names of tagged repositories\",\n    example: [\"open-sauced/insights\", \"open-sauced/ai\"],\n    type: \"string\",\n    isArray: true,\n  })\n  @Column({\n    type: \"varchar\",\n    array: true,\n    default: \"{}\",\n  })\n  public tagged_repos: string[];\n\n  @ApiHideProperty()\n  @ManyToOne(() => DbUser, (user) => user.highlights, { onDelete: \"CASCADE\" })\n  @JoinColumn({\n    name: \"user_id\",\n    referencedColumnName: \"id\",\n  })\n  public user: DbUser;\n\n  @ApiHideProperty()\n  @OneToMany(() => DbUserHighlightReaction, (highlightReaction) => highlightReaction.highlight)\n  @JoinColumn({\n    name: \"highlight_id\",\n    referencedColumnName: \"id\",\n  })\n  public reactions: DbUserHighlightReaction[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbUserHighlightReaction.html":{"url":"entities/DbUserHighlightReaction.html","title":"entity - DbUserHighlightReaction","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbUserHighlightReaction\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/entities/user-highlight-reaction.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                created_at\n                            \n                            \n                                    Public\n                                    Optional\n                                deleted_at\n                            \n                            \n                                    Optional\n                                emoji\n                            \n                            \n                                    Public\n                                emoji_id\n                            \n                            \n                                    Optional\n                                highlight\n                            \n                            \n                                    Public\n                                highlight_id\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                    Optional\n                                reaction_count\n                            \n                            \n                                    Public\n                                    Optional\n                                updated_at\n                            \n                            \n                                    Optional\n                                user\n                            \n                            \n                                    Public\n                                user_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing highlight reaction creation', example: '2016-10-19 13:24:51.000000'})@CreateDateColumn({type: 'timestamp without time zone', default: () => now(), select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight-reaction.entity.ts:70\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        deleted_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@DeleteDateColumn({type: 'timestamp without time zone'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight-reaction.entity.ts:85\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        emoji\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbEmoji\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@ManyToOne(undefined, reaction => reaction.emoji)@JoinColumn({name: 'emoji_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight-reaction.entity.ts:118\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        emoji_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Emoji identifier', example: 'uuid-v4'})@Column({type: 'text', select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight-reaction.entity.ts:59\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        highlight\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbUserHighlight\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@ManyToOne(undefined, reaction => reaction.highlight)@JoinColumn({name: 'highlight_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight-reaction.entity.ts:102\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        highlight_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Highlight identifier', example: 71359796, type: 'integer'})@Column({type: 'integer', select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight-reaction.entity.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Reaction identifier', example: 'uuid-v4'})@PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight-reaction.entity.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        reaction_count\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({type: 'integer'})@Column({type: 'integer', select: false, insert: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight-reaction.entity.ts:94\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing highlight reaction last update', example: '2022-08-28 22:04:29.000000'})@UpdateDateColumn({type: 'timestamp without time zone', default: () => now(), select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight-reaction.entity.ts:81\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbUser\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@ManyToOne(undefined, reaction => reaction.user)@JoinColumn({name: 'user_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight-reaction.entity.ts:110\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User identifier', example: 237133, type: 'integer'})@Column({type: 'integer', select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight-reaction.entity.ts:49\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Column,\n  CreateDateColumn,\n  DeleteDateColumn,\n  Entity,\n  JoinColumn,\n  ManyToOne,\n  PrimaryGeneratedColumn,\n  UpdateDateColumn,\n} from \"typeorm\";\nimport { ApiHideProperty } from \"@nestjs/swagger\";\nimport {\n  ApiModelProperty,\n  ApiModelPropertyOptional,\n} from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\nimport { DbEmoji } from \"../../emoji/entities/emoji.entity\";\nimport { DbUser } from \"../user.entity\";\nimport { DbUserHighlight } from \"./user-highlight.entity\";\n\n@Entity({ name: \"user_highlight_reactions\" })\nexport class DbUserHighlightReaction {\n  @ApiModelProperty({\n    description: \"Reaction identifier\",\n    example: \"uuid-v4\",\n  })\n  @PrimaryGeneratedColumn()\n  public id!: string;\n\n  @ApiModelProperty({\n    description: \"Highlight identifier\",\n    example: 71359796,\n    type: \"integer\",\n  })\n  @Column({\n    type: \"integer\",\n    select: false,\n  })\n  public highlight_id!: number;\n\n  @ApiModelProperty({\n    description: \"User identifier\",\n    example: 237133,\n    type: \"integer\",\n  })\n  @Column({\n    type: \"integer\",\n    select: false,\n  })\n  public user_id!: number;\n\n  @ApiModelProperty({\n    description: \"Emoji identifier\",\n    example: \"uuid-v4\",\n  })\n  @Column({\n    type: \"text\",\n    select: false,\n  })\n  public emoji_id!: string;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing highlight reaction creation\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  @CreateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n    select: false,\n  })\n  public created_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing highlight reaction last update\",\n    example: \"2022-08-28 22:04:29.000000\",\n  })\n  @UpdateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n    select: false,\n  })\n  public updated_at?: Date;\n\n  @ApiHideProperty()\n  @DeleteDateColumn({ type: \"timestamp without time zone\" })\n  public deleted_at?: Date;\n\n  // virtual columns\n  @ApiModelProperty({ type: \"integer\" })\n  @Column({\n    type: \"integer\",\n    select: false,\n    insert: false,\n  })\n  public reaction_count?: number;\n\n  @ApiHideProperty()\n  @ManyToOne(() => DbUserHighlightReaction, (reaction) => reaction.highlight)\n  @JoinColumn({\n    name: \"highlight_id\",\n    referencedColumnName: \"id\",\n  })\n  highlight?: DbUserHighlight;\n\n  @ApiHideProperty()\n  @ManyToOne(() => DbUserHighlightReaction, (reaction) => reaction.user)\n  @JoinColumn({\n    name: \"user_id\",\n    referencedColumnName: \"id\",\n  })\n  user?: DbUser;\n\n  @ApiHideProperty()\n  @ManyToOne(() => DbUserHighlightReaction, (reaction) => reaction.emoji)\n  @JoinColumn({\n    name: \"emoji_id\",\n    referencedColumnName: \"id\",\n  })\n  emoji?: DbEmoji;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DbUserHighlightReactionResponse.html":{"url":"classes/DbUserHighlightReactionResponse.html","title":"class - DbUserHighlightReactionResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DbUserHighlightReactionResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/highlight/dtos/highlight-options.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                    Optional\n                                reaction_users\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        reaction_users\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Usernames of users who reacted with this emoji', type: 'string', example: undefined, isArray: true})@IsString({each: true})@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/highlight/dtos/highlight-options.dto.ts:25\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiPropertyOptional, PickType } from \"@nestjs/swagger\";\nimport { IsOptional, IsString } from \"class-validator\";\nimport { PageOptionsDto } from \"../../common/dtos/page-options.dto\";\nimport { DbUserHighlightReaction } from \"../../user/entities/user-highlight-reaction.entity\";\n\nexport class HighlightOptionsDto extends PageOptionsDto {\n  @ApiPropertyOptional({\n    description: \"Highlight Repo Filter\",\n    example: \"open-sauced/insights\",\n  })\n  @IsString()\n  @IsOptional()\n  readonly repo?: string;\n}\n\nexport class DbUserHighlightReactionResponse extends PickType(DbUserHighlightReaction, [\"emoji_id\", \"reaction_count\"]) {\n  @ApiPropertyOptional({\n    description: \"Usernames of users who reacted with this emoji\",\n    type: \"string\",\n    example: [\"RitaDee\", \"diivi\"],\n    isArray: true,\n  })\n  @IsString({ each: true })\n  @IsOptional()\n  readonly reaction_users?: string[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DbUserHighlightRepo.html":{"url":"classes/DbUserHighlightRepo.html","title":"class - DbUserHighlightRepo","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DbUserHighlightRepo\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/highlight/entities/user-highlight-repo.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                full_name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        full_name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Highlight Repo Full Name', example: 'open-sauced/insights'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/highlight/entities/user-highlight-repo.entity.ts:8\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiModelProperty } from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\n\nexport class DbUserHighlightRepo {\n  @ApiModelProperty({\n    description: \"Highlight Repo Full Name\",\n    example: \"open-sauced/insights\",\n  })\n  public full_name?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbUserList.html":{"url":"entities/DbUserList.html","title":"entity - DbUserList","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbUserList\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user-lists/entities/user-list.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                created_at\n                            \n                            \n                                    Public\n                                    Optional\n                                deleted_at\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                is_featured\n                            \n                            \n                                    Public\n                                is_public\n                            \n                            \n                                    Public\n                                list_user\n                            \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                    Optional\n                                updated_at\n                            \n                            \n                                    Public\n                                user_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing insight creation', example: '2022-10-19 13:24:51.000000'})@CreateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-lists/entities/user-list.entity.ts:75\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        deleted_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing insight deletion', example: '2022-10-19 13:24:51.000000'})@DeleteDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-lists/entities/user-list.entity.ts:95\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User List identifier', example: 'uuid-v4'})@PrimaryColumn()@PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-lists/entities/user-list.entity.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        is_featured\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Flag indicating featured list', example: false})@Column({default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-lists/entities/user-list.entity.ts:65\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        is_public\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Flag indicating insight visibility', example: false})@Column({default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-lists/entities/user-list.entity.ts:58\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        list_user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbUser\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@ManyToOne(undefined, user => user.lists, {onDelete: 'CASCADE'})@JoinColumn({name: 'user_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-lists/entities/user-list.entity.ts:103\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'List Name', example: 'JavaScript Developers'})@Column({type: 'character varying', length: 255})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-lists/entities/user-list.entity.ts:51\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing insight last updated', example: '2022-10-19 13:24:51.000000'})@UpdateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-lists/entities/user-list.entity.ts:85\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User ID', example: 237133, type: 'integer'})@Column({type: 'bigint', select: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-lists/entities/user-list.entity.ts:41\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  Column,\n  BaseEntity,\n  PrimaryColumn,\n  CreateDateColumn,\n  UpdateDateColumn,\n  PrimaryGeneratedColumn,\n  DeleteDateColumn,\n  ManyToOne,\n  JoinColumn,\n} from \"typeorm\";\n\nimport {\n  ApiModelProperty,\n  ApiModelPropertyOptional,\n} from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\nimport { ApiHideProperty } from \"@nestjs/swagger\";\n\nimport { DbUser } from \"../../user/user.entity\";\n\n@Entity({ name: \"user_lists\" })\nexport class DbUserList extends BaseEntity {\n  @ApiModelProperty({\n    description: \"User List identifier\",\n    example: \"uuid-v4\",\n  })\n  @PrimaryColumn()\n  @PrimaryGeneratedColumn()\n  public id!: string;\n\n  @ApiModelProperty({\n    description: \"User ID\",\n    example: 237133,\n    type: \"integer\",\n  })\n  @Column({\n    type: \"bigint\",\n    select: true,\n  })\n  public user_id: number;\n\n  @ApiModelProperty({\n    description: \"List Name\",\n    example: \"JavaScript Developers\",\n  })\n  @Column({\n    type: \"character varying\",\n    length: 255,\n  })\n  public name: string;\n\n  @ApiModelProperty({\n    description: \"Flag indicating insight visibility\",\n    example: false,\n  })\n  @Column({ default: false })\n  public is_public: boolean;\n\n  @ApiModelProperty({\n    description: \"Flag indicating featured list\",\n    example: false,\n  })\n  @Column({ default: false })\n  public is_featured: boolean;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing insight creation\",\n    example: \"2022-10-19 13:24:51.000000\",\n  })\n  @CreateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public created_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing insight last updated\",\n    example: \"2022-10-19 13:24:51.000000\",\n  })\n  @UpdateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public updated_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing insight deletion\",\n    example: \"2022-10-19 13:24:51.000000\",\n  })\n  @DeleteDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public deleted_at?: Date;\n\n  @ApiHideProperty()\n  @ManyToOne(() => DbUser, (user) => user.lists, { onDelete: \"CASCADE\" })\n  @JoinColumn({\n    name: \"user_id\",\n    referencedColumnName: \"id\",\n  })\n  public list_user!: DbUser;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbUserListContributor.html":{"url":"entities/DbUserListContributor.html","title":"entity - DbUserListContributor","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbUserListContributor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user-lists/entities/user-list-contributor.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                created_at\n                            \n                            \n                                    Public\n                                    Optional\n                                deleted_at\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                list_id\n                            \n                            \n                                    Public\n                                    Optional\n                                login\n                            \n                            \n                                    Public\n                                user_id\n                            \n                            \n                                    Public\n                                user_list_contributor\n                            \n                            \n                                    Public\n                                    Optional\n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing top repo first index', example: '2016-10-19 13:24:51.000000'})@CreateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-lists/entities/user-list-contributor.entity.ts:59\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        deleted_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@DeleteDateColumn({type: 'timestamp without time zone', select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-lists/entities/user-list-contributor.entity.ts:66\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User list contributor identifier', example: 'uuid-v4'})@PrimaryColumn()@PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-lists/entities/user-list-contributor.entity.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        list_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'List identifier', example: 'uuid-v4'})@Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-lists/entities/user-list-contributor.entity.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        login\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User list collaborator's login', example: 'bdougie'})@Column({type: 'text', select: false, insert: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-lists/entities/user-list-contributor.entity.ts:85\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User identifier', example: 237133, type: 'integer'})@Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-lists/entities/user-list-contributor.entity.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        user_list_contributor\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbUser\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@ManyToOne(undefined, user => user.user_list_contributors)@JoinColumn({name: 'user_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-lists/entities/user-list-contributor.entity.ts:74\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'List user source username', example: 'sauceduser'})@Column({type: 'text'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-lists/entities/user-list-contributor.entity.ts:49\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Column,\n  CreateDateColumn,\n  DeleteDateColumn,\n  Entity,\n  JoinColumn,\n  ManyToOne,\n  PrimaryColumn,\n  PrimaryGeneratedColumn,\n} from \"typeorm\";\nimport { ApiHideProperty } from \"@nestjs/swagger\";\nimport {\n  ApiModelProperty,\n  ApiModelPropertyOptional,\n} from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\n\nimport { DbUser } from \"../../user/user.entity\";\n\n@Entity({ name: \"user_list_contributors\" })\nexport class DbUserListContributor {\n  @ApiModelProperty({\n    description: \"User list contributor identifier\",\n    example: \"uuid-v4\",\n  })\n  @PrimaryColumn()\n  @PrimaryGeneratedColumn()\n  public id!: string;\n\n  @ApiModelProperty({\n    description: \"User identifier\",\n    example: 237133,\n    type: \"integer\",\n  })\n  @Column()\n  public user_id!: number;\n\n  @ApiModelProperty({\n    description: \"List identifier\",\n    example: \"uuid-v4\",\n  })\n  @Column()\n  public list_id!: string;\n\n  @ApiModelProperty({\n    description: \"List user source username\",\n    example: \"sauceduser\",\n  })\n  @Column({ type: \"text\" })\n  public username?: string;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing top repo first index\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  @CreateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public created_at?: Date;\n\n  @ApiHideProperty()\n  @DeleteDateColumn({\n    type: \"timestamp without time zone\",\n    select: false,\n  })\n  public deleted_at?: Date;\n\n  @ApiHideProperty()\n  @ManyToOne(() => DbUser, (user) => user.user_list_contributors)\n  @JoinColumn({\n    name: \"user_id\",\n    referencedColumnName: \"id\",\n  })\n  public user_list_contributor!: DbUser;\n\n  @ApiModelProperty({\n    description: \"User list collaborator's login\",\n    example: \"bdougie\",\n  })\n  @Column({\n    type: \"text\",\n    select: false,\n    insert: false,\n  })\n  public login?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbUserListContributorStat.html":{"url":"entities/DbUserListContributorStat.html","title":"entity - DbUserListContributorStat","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbUserListContributorStat\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/contribution/dtos/repo-user-contributions.dto.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                comments\n                            \n                            \n                                commits\n                            \n                            \n                                issues_created\n                            \n                            \n                                    Public\n                                    Optional\n                                login\n                            \n                            \n                                prs_created\n                            \n                            \n                                prs_reviewed\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        comments\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Number of comments associated with a user login', example: 0, type: 'integer'})@Column({type: 'bigint', select: false, insert: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/contribution/dtos/repo-user-contributions.dto.ts:75\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        commits\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Number of commits associated with a user login', example: 0, type: 'integer'})@Column({type: 'bigint', select: false, insert: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/contribution/dtos/repo-user-contributions.dto.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        issues_created\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Number of issues created by a user login', example: 0, type: 'integer'})@Column({type: 'bigint', select: false, insert: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/contribution/dtos/repo-user-contributions.dto.ts:63\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        login\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User list collaborator's login', example: 'bdougie'})@Column({type: 'text', select: false, insert: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/contribution/dtos/repo-user-contributions.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        prs_created\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Number of PRs created associated with a user login', example: 0, type: 'integer'})@Column({type: 'bigint', select: false, insert: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/contribution/dtos/repo-user-contributions.dto.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        prs_reviewed\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Number of PRs reviewed by a user login', example: 0, type: 'integer'})@Column({type: 'bigint', select: false, insert: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/contribution/dtos/repo-user-contributions.dto.ts:51\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity } from \"typeorm\";\nimport { ApiModelProperty } from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\n\n@Entity({ name: \"user_list_contributors\" })\nexport class DbUserListContributorStat {\n  @ApiModelProperty({\n    description: \"User list collaborator's login\",\n    example: \"bdougie\",\n  })\n  @Column({\n    type: \"text\",\n    select: false,\n    insert: false,\n  })\n  public login?: string;\n\n  @ApiModelProperty({\n    description: \"Number of commits associated with a user login\",\n    example: 0,\n    type: \"integer\",\n  })\n  @Column({\n    type: \"bigint\",\n    select: false,\n    insert: false,\n  })\n  commits: number;\n\n  @ApiModelProperty({\n    description: \"Number of PRs created associated with a user login\",\n    example: 0,\n    type: \"integer\",\n  })\n  @Column({\n    type: \"bigint\",\n    select: false,\n    insert: false,\n  })\n  prs_created: number;\n\n  @ApiModelProperty({\n    description: \"Number of PRs reviewed by a user login\",\n    example: 0,\n    type: \"integer\",\n  })\n  @Column({\n    type: \"bigint\",\n    select: false,\n    insert: false,\n  })\n  prs_reviewed: number;\n\n  @ApiModelProperty({\n    description: \"Number of issues created by a user login\",\n    example: 0,\n    type: \"integer\",\n  })\n  @Column({\n    type: \"bigint\",\n    select: false,\n    insert: false,\n  })\n  issues_created: number;\n\n  @ApiModelProperty({\n    description: \"Number of comments associated with a user login\",\n    example: 0,\n    type: \"integer\",\n  })\n  @Column({\n    type: \"bigint\",\n    select: false,\n    insert: false,\n  })\n  comments: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbUserListContributorStat-1.html":{"url":"entities/DbUserListContributorStat-1.html","title":"entity - DbUserListContributorStat-1","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbUserListContributorStat\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user-lists/entities/user-list-contributor-stats.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                comments\n                            \n                            \n                                commits\n                            \n                            \n                                issues_created\n                            \n                            \n                                    Public\n                                    Optional\n                                login\n                            \n                            \n                                prs_created\n                            \n                            \n                                prs_reviewed\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        comments\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Number of comments associated with a user login', example: 0, type: 'integer'})@Column({type: 'bigint', select: false, insert: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-lists/entities/user-list-contributor-stats.entity.ts:75\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        commits\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Number of commits associated with a user login', example: 0, type: 'integer'})@Column({type: 'bigint', select: false, insert: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-lists/entities/user-list-contributor-stats.entity.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        issues_created\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Number of issues created by a user login', example: 0, type: 'integer'})@Column({type: 'bigint', select: false, insert: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-lists/entities/user-list-contributor-stats.entity.ts:63\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        login\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User list collaborator's login', example: 'bdougie'})@Column({type: 'text', select: false, insert: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-lists/entities/user-list-contributor-stats.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        prs_created\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Number of PRs created associated with a user login', example: 0, type: 'integer'})@Column({type: 'bigint', select: false, insert: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-lists/entities/user-list-contributor-stats.entity.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        prs_reviewed\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Number of PRs reviewed by a user login', example: 0, type: 'integer'})@Column({type: 'bigint', select: false, insert: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-lists/entities/user-list-contributor-stats.entity.ts:51\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity } from \"typeorm\";\nimport { ApiModelProperty } from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\n\n@Entity({ name: \"user_list_contributors\" })\nexport class DbUserListContributorStat {\n  @ApiModelProperty({\n    description: \"User list collaborator's login\",\n    example: \"bdougie\",\n  })\n  @Column({\n    type: \"text\",\n    select: false,\n    insert: false,\n  })\n  public login?: string;\n\n  @ApiModelProperty({\n    description: \"Number of commits associated with a user login\",\n    example: 0,\n    type: \"integer\",\n  })\n  @Column({\n    type: \"bigint\",\n    select: false,\n    insert: false,\n  })\n  commits: number;\n\n  @ApiModelProperty({\n    description: \"Number of PRs created associated with a user login\",\n    example: 0,\n    type: \"integer\",\n  })\n  @Column({\n    type: \"bigint\",\n    select: false,\n    insert: false,\n  })\n  prs_created: number;\n\n  @ApiModelProperty({\n    description: \"Number of PRs reviewed by a user login\",\n    example: 0,\n    type: \"integer\",\n  })\n  @Column({\n    type: \"bigint\",\n    select: false,\n    insert: false,\n  })\n  prs_reviewed: number;\n\n  @ApiModelProperty({\n    description: \"Number of issues created by a user login\",\n    example: 0,\n    type: \"integer\",\n  })\n  @Column({\n    type: \"bigint\",\n    select: false,\n    insert: false,\n  })\n  issues_created: number;\n\n  @ApiModelProperty({\n    description: \"Number of comments associated with a user login\",\n    example: 0,\n    type: \"integer\",\n  })\n  @Column({\n    type: \"bigint\",\n    select: false,\n    insert: false,\n  })\n  comments: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbUserNotification.html":{"url":"entities/DbUserNotification.html","title":"entity - DbUserNotification","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbUserNotification\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/entities/user-notification.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                from_user\n                            \n                            \n                                    Public\n                                    Optional\n                                from_user_id\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                    Optional\n                                message\n                            \n                            \n                                    Public\n                                    Optional\n                                meta_id\n                            \n                            \n                                    Public\n                                    Optional\n                                notified_at\n                            \n                            \n                                    Public\n                                    Optional\n                                read_at\n                            \n                            \n                                    Public\n                                type\n                            \n                            \n                                    Public\n                                user_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        from_user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbUser\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@ManyToOne(undefined, user => user.from_user_notifications)@JoinColumn({name: 'from_user_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-notification.entity.ts:92\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        from_user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'From User ID', example: 43311, type: 'integer'})@Column({type: 'bigint'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-notification.entity.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Notification identifier', example: 237133, type: 'integer'})@PrimaryColumn('bigint')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-notification.entity.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        message\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User notification message', example: 'bdougie followed you'})@Column({type: 'character varying', length: 100})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-notification.entity.ts:55\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        meta_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Notification Source ID (highlight, user, invite)', example: '133'})@Column({type: 'character varying', length: 32})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-notification.entity.ts:84\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        notified_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing db-user-notification creation', example: '2022-10-19 13:24:51.000000'})@CreateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-notification.entity.ts:65\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        read_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing user notification read date', example: '2023-04-19 13:24:51.000000'})@Column({type: 'timestamp without time zone'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-notification.entity.ts:74\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User notification type', example: 'welcome'})@Column({type: 'character varying', enum: UserNotificationTypes, length: 25})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-notification.entity.ts:45\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User ID', example: 498, type: 'integer'})@Column({type: 'bigint'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-notification.entity.ts:26\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Entity, Column, BaseEntity, PrimaryColumn, CreateDateColumn, JoinColumn, ManyToOne } from \"typeorm\";\nimport {\n  ApiModelProperty,\n  ApiModelPropertyOptional,\n} from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\nimport { ApiHideProperty } from \"@nestjs/swagger\";\nimport { DbUser } from \"../user.entity\";\nimport { UserNotificationTypes } from \"./user-notification.constants\";\n\n@Entity({ name: \"user_notifications\" })\nexport class DbUserNotification extends BaseEntity {\n  @ApiModelProperty({\n    description: \"Notification identifier\",\n    example: 237133,\n    type: \"integer\",\n  })\n  @PrimaryColumn(\"bigint\")\n  public id!: number;\n\n  @ApiModelProperty({\n    description: \"User ID\",\n    example: 498,\n    type: \"integer\",\n  })\n  @Column({ type: \"bigint\" })\n  public user_id: number;\n\n  @ApiModelProperty({\n    description: \"From User ID\",\n    example: 43311,\n    type: \"integer\",\n  })\n  @Column({ type: \"bigint\" })\n  public from_user_id?: number;\n\n  @ApiModelProperty({\n    description: \"User notification type\",\n    example: \"welcome\",\n  })\n  @Column({\n    type: \"character varying\",\n    enum: UserNotificationTypes,\n    length: 25,\n  })\n  public type: string;\n\n  @ApiModelProperty({\n    description: \"User notification message\",\n    example: \"bdougie followed you\",\n  })\n  @Column({\n    type: \"character varying\",\n    length: 100,\n  })\n  public message?: string;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing db-user-notification creation\",\n    example: \"2022-10-19 13:24:51.000000\",\n  })\n  @CreateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public notified_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing user notification read date\",\n    example: \"2023-04-19 13:24:51.000000\",\n  })\n  @Column({\n    type: \"timestamp without time zone\",\n  })\n  public read_at?: Date;\n\n  @ApiModelProperty({\n    description: \"Notification Source ID (highlight, user, invite)\",\n    example: \"133\",\n  })\n  @Column({\n    type: \"character varying\",\n    length: 32,\n  })\n  public meta_id?: string;\n\n  @ApiHideProperty()\n  @ManyToOne(() => DbUser, (user) => user.from_user_notifications)\n  @JoinColumn({\n    name: \"from_user_id\",\n    referencedColumnName: \"id\",\n  })\n  public from_user: DbUser;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbUserOrganization.html":{"url":"entities/DbUserOrganization.html","title":"entity - DbUserOrganization","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbUserOrganization\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/entities/user-organization.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                created_at\n                            \n                            \n                                    Public\n                                    Optional\n                                deleted_at\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                organization_id\n                            \n                            \n                                    Public\n                                organization_user\n                            \n                            \n                                    Public\n                                user\n                            \n                            \n                                    Public\n                                user_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing top repo first index', example: '2016-10-19 13:24:51.000000'})@CreateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-organization.entity.ts:52\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        deleted_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@DeleteDateColumn({type: 'timestamp without time zone', select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-organization.entity.ts:59\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User organization identifier', example: 196, type: 'integer'})@PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-organization.entity.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        organization_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Organization identifier', example: 71359796, type: 'integer'})@Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-organization.entity.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        organization_user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbUser\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@ManyToOne(undefined, user => user.organizations)@JoinColumn({name: 'organization_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-organization.entity.ts:75\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbUser\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@ManyToOne(undefined, user => user.organizations)@JoinColumn({name: 'user_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-organization.entity.ts:67\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User identifier', example: 237133, type: 'integer'})@Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-organization.entity.ts:34\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Column,\n  CreateDateColumn,\n  DeleteDateColumn,\n  Entity,\n  JoinColumn,\n  ManyToOne,\n  PrimaryGeneratedColumn,\n} from \"typeorm\";\nimport { ApiHideProperty } from \"@nestjs/swagger\";\nimport {\n  ApiModelProperty,\n  ApiModelPropertyOptional,\n} from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\n\nimport { DbUser } from \"../user.entity\";\n\n@Entity({ name: \"user_organizations\" })\nexport class DbUserOrganization {\n  @ApiModelProperty({\n    description: \"User organization identifier\",\n    example: 196,\n    type: \"integer\",\n  })\n  @PrimaryGeneratedColumn()\n  public id!: number;\n\n  @ApiModelProperty({\n    description: \"User identifier\",\n    example: 237133,\n    type: \"integer\",\n  })\n  @Column()\n  public user_id!: number;\n\n  @ApiModelProperty({\n    description: \"Organization identifier\",\n    example: 71359796,\n    type: \"integer\",\n  })\n  @Column()\n  public organization_id!: number;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing top repo first index\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  @CreateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public created_at?: Date;\n\n  @ApiHideProperty()\n  @DeleteDateColumn({\n    type: \"timestamp without time zone\",\n    select: false,\n  })\n  public deleted_at?: Date;\n\n  @ApiHideProperty()\n  @ManyToOne(() => DbUser, (user) => user.organizations)\n  @JoinColumn({\n    name: \"user_id\",\n    referencedColumnName: \"id\",\n  })\n  public user!: DbUser;\n\n  @ApiHideProperty()\n  @ManyToOne(() => DbUser, (user) => user.organizations)\n  @JoinColumn({\n    name: \"organization_id\",\n    referencedColumnName: \"id\",\n  })\n  public organization_user: DbUser;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbUserRepo.html":{"url":"entities/DbUserRepo.html","title":"entity - DbUserRepo","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbUserRepo\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user-repo/user-repo.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                created_at\n                            \n                            \n                                    Public\n                                full_name\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                repo_id\n                            \n                            \n                                    Public\n                                user_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing user creation', example: '2022-10-19 13:24:51.000000'})@CreateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-repo/user-repo.entity.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        full_name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Repo Full Name', example: 'open-sauced/insights'})@Column({type: 'text'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-repo/user-repo.entity.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User Repo identifier', example: 237133})@PrimaryColumn('bigint')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-repo/user-repo.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        repo_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Repo identifier', example: 237133})@Column('bigint')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-repo/user-repo.entity.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User identifier', example: 237133})@Column('bigint')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-repo/user-repo.entity.ts:22\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Entity, BaseEntity, Column, PrimaryColumn, CreateDateColumn } from \"typeorm\";\n\nimport {\n  ApiModelProperty,\n  ApiModelPropertyOptional,\n} from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\n\n@Entity({ name: \"user_repos\" })\nexport class DbUserRepo extends BaseEntity {\n  @ApiModelProperty({\n    description: \"User Repo identifier\",\n    example: 237133,\n  })\n  @PrimaryColumn(\"bigint\")\n  public id!: number;\n\n  @ApiModelProperty({\n    description: \"User identifier\",\n    example: 237133,\n  })\n  @Column(\"bigint\")\n  public user_id: number;\n\n  @ApiModelProperty({\n    description: \"Repo identifier\",\n    example: 237133,\n  })\n  @Column(\"bigint\")\n  public repo_id: number;\n\n  @ApiModelProperty({\n    description: \"Repo Full Name\",\n    example: \"open-sauced/insights\",\n  })\n  @Column({ type: \"text\" })\n  public full_name: string;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing user creation\",\n    example: \"2022-10-19 13:24:51.000000\",\n  })\n  @CreateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public created_at?: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbUserToUserFollows.html":{"url":"entities/DbUserToUserFollows.html","title":"entity - DbUserToUserFollows","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbUserToUserFollows\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/entities/user-follows.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                created_at\n                            \n                            \n                                    Public\n                                    Optional\n                                deleted_at\n                            \n                            \n                                    Public\n                                following_user_id\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                    Optional\n                                updated_at\n                            \n                            \n                                    Public\n                                user_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing user follow creation', example: '2016-10-19 13:24:51.000000'})@CreateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-follows.entity.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        deleted_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@DeleteDateColumn({type: 'timestamp without time zone', select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-follows.entity.ts:59\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        following_user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User follower identifier', example: 71359796, type: 'integer'})@Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-follows.entity.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User Follow identifier', example: 196, type: 'integer'})@PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-follows.entity.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing user follow last update', example: '2022-08-28 22:04:29.000000'})@UpdateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-follows.entity.ts:52\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User identifier', example: 237133, type: 'integer'})@Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-follows.entity.ts:24\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, CreateDateColumn, DeleteDateColumn, Entity, PrimaryGeneratedColumn, UpdateDateColumn } from \"typeorm\";\nimport { ApiHideProperty } from \"@nestjs/swagger\";\nimport {\n  ApiModelProperty,\n  ApiModelPropertyOptional,\n} from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\n\n@Entity({ name: \"users_to_users_followers\" })\nexport class DbUserToUserFollows {\n  @ApiModelProperty({\n    description: \"User Follow identifier\",\n    example: 196,\n    type: \"integer\",\n  })\n  @PrimaryGeneratedColumn()\n  public id!: number;\n\n  @ApiModelProperty({\n    description: \"User identifier\",\n    example: 237133,\n    type: \"integer\",\n  })\n  @Column()\n  public user_id!: number;\n\n  @ApiModelProperty({\n    description: \"User follower identifier\",\n    example: 71359796,\n    type: \"integer\",\n  })\n  @Column()\n  public following_user_id!: number;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing user follow creation\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  @CreateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public created_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing user follow last update\",\n    example: \"2022-08-28 22:04:29.000000\",\n  })\n  @UpdateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public updated_at?: Date;\n\n  @ApiHideProperty()\n  @DeleteDateColumn({\n    type: \"timestamp without time zone\",\n    select: false,\n  })\n  public deleted_at?: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbUserTopRepo.html":{"url":"entities/DbUserTopRepo.html","title":"entity - DbUserTopRepo","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbUserTopRepo\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/entities/user-top-repo.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                created_at\n                            \n                            \n                                    Public\n                                    Optional\n                                deleted_at\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                repo\n                            \n                            \n                                    Public\n                                repo_id\n                            \n                            \n                                    Public\n                                    Optional\n                                updated_at\n                            \n                            \n                                    Public\n                                user\n                            \n                            \n                                    Public\n                                user_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing top repo first index', example: '2016-10-19 13:24:51.000000'})@CreateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-top-repo.entity.ts:53\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        deleted_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@DeleteDateColumn({type: 'timestamp without time zone', select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-top-repo.entity.ts:70\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Top repo connection identifier', example: 196, type: 'integer'})@PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-top-repo.entity.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        repo\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbRepo\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@ManyToOne(undefined, repo => repo.repoToUserTopRepos)@JoinColumn({name: 'repo_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-top-repo.entity.ts:86\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        repo_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Repository identifier', example: 71359796, type: 'integer'})@Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-top-repo.entity.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing top repo last update', example: '2022-08-28 22:04:29.000000'})@UpdateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-top-repo.entity.ts:63\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbUser\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@ManyToOne(undefined, user => user.topRepos)@JoinColumn({name: 'user_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-top-repo.entity.ts:78\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User identifier', example: 237133, type: 'integer'})@Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-top-repo.entity.ts:35\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Column,\n  CreateDateColumn,\n  DeleteDateColumn,\n  Entity,\n  JoinColumn,\n  ManyToOne,\n  PrimaryGeneratedColumn,\n  UpdateDateColumn,\n} from \"typeorm\";\nimport { ApiHideProperty } from \"@nestjs/swagger\";\nimport {\n  ApiModelProperty,\n  ApiModelPropertyOptional,\n} from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\nimport { DbUser } from \"../user.entity\";\nimport { DbRepo } from \"../../repo/entities/repo.entity\";\n\n@Entity({ name: \"user_top_repos\" })\nexport class DbUserTopRepo {\n  @ApiModelProperty({\n    description: \"Top repo connection identifier\",\n    example: 196,\n    type: \"integer\",\n  })\n  @PrimaryGeneratedColumn()\n  public id!: number;\n\n  @ApiModelProperty({\n    description: \"User identifier\",\n    example: 237133,\n    type: \"integer\",\n  })\n  @Column()\n  public user_id!: number;\n\n  @ApiModelProperty({\n    description: \"Repository identifier\",\n    example: 71359796,\n    type: \"integer\",\n  })\n  @Column()\n  public repo_id!: number;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing top repo first index\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  @CreateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public created_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing top repo last update\",\n    example: \"2022-08-28 22:04:29.000000\",\n  })\n  @UpdateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public updated_at?: Date;\n\n  @ApiHideProperty()\n  @DeleteDateColumn({\n    type: \"timestamp without time zone\",\n    select: false,\n  })\n  public deleted_at?: Date;\n\n  @ApiHideProperty()\n  @ManyToOne(() => DbUser, (user) => user.topRepos)\n  @JoinColumn({\n    name: \"user_id\",\n    referencedColumnName: \"id\",\n  })\n  public user!: DbUser;\n\n  @ApiHideProperty()\n  @ManyToOne(() => DbRepo, (repo) => repo.repoToUserTopRepos)\n  @JoinColumn({\n    name: \"repo_id\",\n    referencedColumnName: \"id\",\n  })\n  public repo!: DbRepo;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/EmojiController.html":{"url":"controllers/EmojiController.html","title":"controller - EmojiController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  EmojiController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/emoji/emoji.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                emojis\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                findAllEmojis\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllEmojis\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllEmojis(pageOptionsDto: PageOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/')@ApiOperation({operationId: 'findAllEmojis', summary: 'Listing all emojis and paginates them'})@ApiPaginatedResponse(DbEmoji)@ApiOkResponse({type: DbEmoji})@ApiNotFoundResponse({description: 'Emojis not found'})\n                \n            \n\n            \n                \n                    Defined in src/emoji/emoji.controller.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Query } from \"@nestjs/common\";\nimport { ApiOperation, ApiOkResponse, ApiNotFoundResponse, ApiTags } from \"@nestjs/swagger\";\n\nimport { ApiPaginatedResponse } from \"../common/decorators/api-paginated-response.decorator\";\nimport { PageOptionsDto } from \"../common/dtos/page-options.dto\";\n\nimport { EmojiService } from \"./emoji.service\";\nimport { DbEmoji } from \"./entities/emoji.entity\";\n\n@Controller(\"emojis\")\n@ApiTags(\"Emojis service\")\nexport class EmojiController {\n  constructor(private emojiService: EmojiService) {}\n\n  @Get(\"/\")\n  @ApiOperation({\n    operationId: \"findAllEmojis\",\n    summary: \"Listing all emojis and paginates them\",\n  })\n  @ApiPaginatedResponse(DbEmoji)\n  @ApiOkResponse({ type: DbEmoji })\n  @ApiNotFoundResponse({ description: \"Emojis not found\" })\n  async findAllEmojis(@Query() pageOptionsDto: PageOptionsDto) {\n    return this.emojiService.findAll(pageOptionsDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/EmojiModule.html":{"url":"modules/EmojiModule.html","title":"module - EmojiModule","body":"\n                   \n\n\n\n\n    Modules\n    EmojiModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_EmojiModule\n\n\n\ncluster_EmojiModule_providers\n\n\n\n\nEmojiService\n\nEmojiService\n\n\n\nEmojiModule\n\nEmojiModule\n\nEmojiModule -->\n\nEmojiService->EmojiModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/emoji/emoji.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            EmojiService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            EmojiController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\n\nimport { EmojiController } from \"./emoji.controller\";\nimport { DbEmoji } from \"./entities/emoji.entity\";\nimport { EmojiService } from \"./emoji.service\";\n\n@Module({\n  imports: [TypeOrmModule.forFeature([DbEmoji], \"ApiConnection\")],\n  controllers: [EmojiController],\n  providers: [EmojiService],\n})\nexport class EmojiModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/EmojiService.html":{"url":"injectables/EmojiService.html","title":"injectable - EmojiService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  EmojiService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/emoji/emoji.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                baseQueryBuilder\n                            \n                            \n                                    Async\n                                findAll\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(emojiRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/emoji/emoji.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        emojiRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        baseQueryBuilder\n                        \n                    \n                \n            \n            \n                \nbaseQueryBuilder()\n                \n            \n\n\n            \n                \n                    Defined in src/emoji/emoji.service.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll(pageOptionsDto: PageOptionsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/emoji/emoji.service.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { Repository } from \"typeorm\";\n\nimport { PageDto } from \"../common/dtos/page.dto\";\nimport { PageMetaDto } from \"../common/dtos/page-meta.dto\";\nimport { PageOptionsDto } from \"../common/dtos/page-options.dto\";\nimport { DbEmoji } from \"./entities/emoji.entity\";\n\n@Injectable()\nexport class EmojiService {\n  constructor(\n    @InjectRepository(DbEmoji, \"ApiConnection\")\n    private emojiRepository: Repository\n  ) {}\n\n  baseQueryBuilder() {\n    return this.emojiRepository.createQueryBuilder(\"emoji\");\n  }\n\n  async findAll(pageOptionsDto: PageOptionsDto) {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder.orderBy(\"emoji.display_order\", \"ASC\");\n\n    const itemCount = await queryBuilder.getCount();\n    const entities = await queryBuilder.getMany();\n\n    const pageMetaDto = new PageMetaDto({ itemCount, pageOptionsDto });\n\n    return new PageDto(entities, pageMetaDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/EndorsementController.html":{"url":"controllers/EndorsementController.html","title":"controller - EndorsementController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  EndorsementController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/endorsement/endorsement.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                endorsements\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createEndorsement\n                            \n                            \n                                    Async\n                                deleteEndoresementById\n                            \n                            \n                                    Async\n                                findAllByRepoOwnerOrUsername\n                            \n                            \n                                    Async\n                                findAllEndorsements\n                            \n                            \n                                    Async\n                                findAllEndorsementsByRepo\n                            \n                            \n                                    Async\n                                findAllUserCreatedEndorsementsByUsername\n                            \n                            \n                                    Async\n                                findAllUserReceivedEndorsementsByUsername\n                            \n                            \n                                    Async\n                                findEndorsementById\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createEndorsement\n                        \n                    \n                \n            \n            \n                \n                    \n                    createEndorsement(_token: string, createEndorsementDto: CreateEndorsementDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/')@UseGuards(EndorsementTokenGuard)@ApiOperation({operationId: 'createEndorsement', summary: 'Creates a new endorsement record'})@ApiOkResponse({type: DbEndorsement})@ApiBody({type: CreateEndorsementDto})\n                \n            \n\n            \n                \n                    Defined in src/endorsement/endorsement.controller.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    _token\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    createEndorsementDto\n                                    \n                                                CreateEndorsementDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteEndoresementById\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteEndoresementById(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')@ApiOperation({operationId: 'deleteEndoresementById', summary: 'Finds ands deletes the endorsement by ID'})@ApiNotFoundResponse({description: 'Endorsement not found'})\n                \n            \n\n            \n                \n                    Defined in src/endorsement/endorsement.controller.ts:138\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllByRepoOwnerOrUsername\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllByRepoOwnerOrUsername(repoOwnerOrUser: string, pageOptionsDto: PageOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/repos/:repoOwnerOrUser')@ApiOperation({operationId: 'findAllByRepoOwnerOrUsername', summary: 'Finds all endorsements by repo org or username and paginates them'})@ApiPaginatedResponse(DbEndorsement)@ApiOkResponse({type: DbEndorsement})\n                \n            \n\n            \n                \n                    Defined in src/endorsement/endorsement.controller.ts:51\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    repoOwnerOrUser\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllEndorsements\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllEndorsements(pageOptionsDto: PageOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/')@ApiOperation({operationId: 'findAllEndorsements', summary: 'Finds all endorsements and paginates them'})@ApiPaginatedResponse(DbEndorsement)@ApiOkResponse({type: DbEndorsement})\n                \n            \n\n            \n                \n                    Defined in src/endorsement/endorsement.controller.ts:40\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllEndorsementsByRepo\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllEndorsementsByRepo(owner: string, repo: string, pageOptionsDto: PageOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/repos/:owner/:repo')@ApiOperation({operationId: 'findAllEndorsementsByRepo', summary: 'Finds all endorsements by repo owner or username and paginates them'})@ApiPaginatedResponse(DbEndorsement)@ApiOkResponse({type: DbEndorsement})\n                \n            \n\n            \n                \n                    Defined in src/endorsement/endorsement.controller.ts:65\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    owner\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    repo\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllUserCreatedEndorsementsByUsername\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllUserCreatedEndorsementsByUsername(username: string, pageOptionsDto: PageOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/user/:username/created')@ApiOperation({operationId: 'findAllUserCreatedEndorsementsByUsername', summary: 'Finds all endorsements received by the user and paginates them'})@ApiPaginatedResponse(DbEndorsement)@ApiOkResponse({type: DbEndorsement})\n                \n            \n\n            \n                \n                    Defined in src/endorsement/endorsement.controller.ts:107\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllUserReceivedEndorsementsByUsername\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllUserReceivedEndorsementsByUsername(username: string, pageOptionsDto: PageOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/user/:username/received')@ApiOperation({operationId: 'findAllUserReceivedEndorsementsByUsername', summary: 'Finds all endorsements received by the user and paginates them'})@ApiPaginatedResponse(DbEndorsement)@ApiOkResponse({type: DbEndorsement})\n                \n            \n\n            \n                \n                    Defined in src/endorsement/endorsement.controller.ts:123\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findEndorsementById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findEndorsementById(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')@ApiOperation({operationId: 'findEndorsementById', summary: 'Retrieves the endorsement based on ID'})@ApiOkResponse({type: DbEndorsement})@ApiNotFoundResponse({description: 'Endorsement not found'})\n                \n            \n\n            \n                \n                    Defined in src/endorsement/endorsement.controller.ts:96\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Post, Body, Param, Delete, Query, UseGuards, Headers } from \"@nestjs/common\";\nimport { ApiBody, ApiNotFoundResponse, ApiOkResponse, ApiOperation, ApiTags } from \"@nestjs/swagger\";\n\nimport { PageOptionsDto } from \"../common/dtos/page-options.dto\";\nimport { ApiPaginatedResponse } from \"../common/decorators/api-paginated-response.decorator\";\nimport { UserService } from \"../user/services/user.service\";\n\nimport { EndorsementService } from \"./endorsement.service\";\nimport { CreateEndorsementDto } from \"./dto/create-endorsement.dto\";\nimport { DbEndorsement } from \"./entities/endorsement.entity\";\nimport { EndorsementTokenGuard } from \"./endorsement-token.guard\";\n\n@Controller(\"endorsements\")\n@ApiTags(\"Endorsements service\")\nexport class EndorsementController {\n  constructor(private readonly endorsementService: EndorsementService, private readonly userService: UserService) {}\n\n  @Post(\"/\")\n  @UseGuards(EndorsementTokenGuard)\n  @ApiOperation({\n    operationId: \"createEndorsement\",\n    summary: \"Creates a new endorsement record\",\n  })\n  @ApiOkResponse({ type: DbEndorsement })\n  @ApiBody({ type: CreateEndorsementDto })\n  async createEndorsement(\n    @Headers(\"X-OpenSauced-token\") _token: string,\n    @Body() createEndorsementDto: CreateEndorsementDto\n  ) {\n    return this.endorsementService.create(createEndorsementDto);\n  }\n\n  @Get(\"/\")\n  @ApiOperation({\n    operationId: \"findAllEndorsements\",\n    summary: \"Finds all endorsements and paginates them\",\n  })\n  @ApiPaginatedResponse(DbEndorsement)\n  @ApiOkResponse({ type: DbEndorsement })\n  async findAllEndorsements(@Query() pageOptionsDto: PageOptionsDto) {\n    return this.endorsementService.findAll(pageOptionsDto);\n  }\n\n  @Get(\"/repos/:repoOwnerOrUser\")\n  @ApiOperation({\n    operationId: \"findAllByRepoOwnerOrUsername\",\n    summary: \"Finds all endorsements by repo org or username and paginates them\",\n  })\n  @ApiPaginatedResponse(DbEndorsement)\n  @ApiOkResponse({ type: DbEndorsement })\n  async findAllByRepoOwnerOrUsername(\n    @Param(\"repoOwnerOrUser\") repoOwnerOrUser: string,\n    @Query() pageOptionsDto: PageOptionsDto\n  ) {\n    return this.endorsementService.findAllByRepoOwnerOrUser(repoOwnerOrUser, pageOptionsDto);\n  }\n\n  @Get(\"/repos/:owner/:repo\")\n  @ApiOperation({\n    operationId: \"findAllEndorsementsByRepo\",\n    summary: \"Finds all endorsements by repo owner or username and paginates them\",\n  })\n  @ApiPaginatedResponse(DbEndorsement)\n  @ApiOkResponse({ type: DbEndorsement })\n  async findAllEndorsementsByRepo(\n    @Param(\"owner\") owner: string,\n    @Param(\"repo\") repo: string,\n    @Query() pageOptionsDto: PageOptionsDto\n  ) {\n    return this.endorsementService.findAllEndorsementsByRepo(owner, repo, pageOptionsDto);\n  }\n\n  /*\n   * @Get(\"/repos/:owner/:repo/byUser\")\n   * @ApiOperation({\n   *   operationId: \"findAllEndorsementsByRepoByUser\",\n   *   summary: \"Finds all endorsements by repo owner grouped by user\",\n   * })\n   * @ApiOkResponse({ type: DbEndorsement })\n   * async findAllEndorsementsByRepoByUser (\n   * @Param(\"owner\") owner: string,\n   *   @Param(\"repo\") repo: string,\n   *   @Query() pageOptionsDto: PageOptionsDto,\n   * ) {\n   *   return this.endorsementService.findAllEndorsementsByRepoByUser(owner, repo, pageOptionsDto);\n   * }\n   */\n\n  @Get(\":id\")\n  @ApiOperation({\n    operationId: \"findEndorsementById\",\n    summary: \"Retrieves the endorsement based on ID\",\n  })\n  @ApiOkResponse({ type: DbEndorsement })\n  @ApiNotFoundResponse({ description: \"Endorsement not found\" })\n  async findEndorsementById(@Param(\"id\") id: string) {\n    return this.endorsementService.findOneById(id);\n  }\n\n  @Get(\"/user/:username/created\")\n  @ApiOperation({\n    operationId: \"findAllUserCreatedEndorsementsByUsername\",\n    summary: \"Finds all endorsements received by the user and paginates them\",\n  })\n  @ApiPaginatedResponse(DbEndorsement)\n  @ApiOkResponse({ type: DbEndorsement })\n  async findAllUserCreatedEndorsementsByUsername(\n    @Param(\"username\") username: string,\n    @Query() pageOptionsDto: PageOptionsDto\n  ) {\n    const user = await this.userService.findOneByUsername(username);\n\n    return this.endorsementService.findAllByCreatorUserId(user.id, pageOptionsDto);\n  }\n\n  @Get(\"/user/:username/received\")\n  @ApiOperation({\n    operationId: \"findAllUserReceivedEndorsementsByUsername\",\n    summary: \"Finds all endorsements received by the user and paginates them\",\n  })\n  @ApiPaginatedResponse(DbEndorsement)\n  @ApiOkResponse({ type: DbEndorsement })\n  async findAllUserReceivedEndorsementsByUsername(\n    @Param(\"username\") username: string,\n    @Query() pageOptionsDto: PageOptionsDto\n  ) {\n    const user = await this.userService.findOneByUsername(username);\n\n    return this.endorsementService.findAllByRecipientUserId(user.id, pageOptionsDto);\n  }\n\n  @Delete(\":id\")\n  @ApiOperation({\n    operationId: \"deleteEndoresementById\",\n    summary: \"Finds ands deletes the endorsement by ID\",\n  })\n  @ApiNotFoundResponse({ description: \"Endorsement not found\" })\n  async deleteEndoresementById(@Param(\"id\") id: string) {\n    return this.endorsementService.remove(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/EndorsementModule.html":{"url":"modules/EndorsementModule.html","title":"module - EndorsementModule","body":"\n                   \n\n\n\n\n    Modules\n    EndorsementModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_EndorsementModule\n\n\n\ncluster_EndorsementModule_exports\n\n\n\ncluster_EndorsementModule_providers\n\n\n\ncluster_EndorsementModule_imports\n\n\n\n\nApiServicesModule\n\nApiServicesModule\n\n\n\nEndorsementModule\n\nEndorsementModule\n\nEndorsementModule -->\n\nApiServicesModule->EndorsementModule\n\n\n\n\n\nAuthModule\n\nAuthModule\n\nEndorsementModule -->\n\nAuthModule->EndorsementModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nEndorsementModule -->\n\nUserModule->EndorsementModule\n\n\n\n\n\nEndorsementService \n\nEndorsementService \n\nEndorsementService  -->\n\nEndorsementModule->EndorsementService \n\n\n\n\n\nEndorsementService\n\nEndorsementService\n\nEndorsementModule -->\n\nEndorsementService->EndorsementModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/endorsement/endorsement.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            EndorsementService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            EndorsementController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            ApiServicesModule\n                        \n                        \n                            AuthModule\n                        \n                        \n                            UserModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            EndorsementService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\n\nimport { UserModule } from \"../user/user.module\";\nimport { AuthModule } from \"../auth/auth.module\";\nimport { ApiServicesModule } from \"../common/services/api-services.module\";\nimport { EndorsementService } from \"./endorsement.service\";\nimport { EndorsementController } from \"./endorsement.controller\";\nimport { DbEndorsement } from \"./entities/endorsement.entity\";\nimport { EndorsementTokenGuard } from \"./endorsement-token.guard\";\n\n@Module({\n  imports: [TypeOrmModule.forFeature([DbEndorsement], \"ApiConnection\"), UserModule, AuthModule, ApiServicesModule],\n  controllers: [EndorsementController],\n  providers: [EndorsementService, EndorsementTokenGuard],\n  exports: [EndorsementService],\n})\nexport class EndorsementModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/EndorsementService.html":{"url":"injectables/EndorsementService.html","title":"injectable - EndorsementService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  EndorsementService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/endorsement/endorsement.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                baseQueryBuilder\n                            \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findAllByCreatorUserId\n                            \n                            \n                                    Async\n                                findAllByRecipientUserId\n                            \n                            \n                                    Async\n                                findAllByRepoOwnerOrUser\n                            \n                            \n                                    Async\n                                findAllEndorsementsByRepo\n                            \n                            \n                                    Async\n                                findAllEndorsementsByRepoByUser\n                            \n                            \n                                    Async\n                                findOneById\n                            \n                            \n                                    Async\n                                remove\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(endorsementRepository: Repository, pagerService: PagerService)\n                    \n                \n                        \n                            \n                                Defined in src/endorsement/endorsement.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        endorsementRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        pagerService\n                                                  \n                                                        \n                                                                        PagerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        baseQueryBuilder\n                        \n                    \n                \n            \n            \n                \nbaseQueryBuilder()\n                \n            \n\n\n            \n                \n                    Defined in src/endorsement/endorsement.service.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createEndorsementDto: CreateEndorsementDto)\n                \n            \n\n\n            \n                \n                    Defined in src/endorsement/endorsement.service.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createEndorsementDto\n                                    \n                                                CreateEndorsementDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll(pageOptionsDto: PageOptionsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/endorsement/endorsement.service.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllByCreatorUserId\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllByCreatorUserId(userId: number, pageOptionsDto: PageOptionsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/endorsement/endorsement.service.ts:37\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllByRecipientUserId\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllByRecipientUserId(userId: number, pageOptionsDto: PageOptionsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/endorsement/endorsement.service.ts:48\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllByRepoOwnerOrUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllByRepoOwnerOrUser(repoOwnerOrUser: string, pageOptionsDto: PageOptionsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/endorsement/endorsement.service.ts:61\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    repoOwnerOrUser\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllEndorsementsByRepo\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllEndorsementsByRepo(owner: string, repo: string, pageOptionsDto: PageOptionsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/endorsement/endorsement.service.ts:77\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    owner\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    repo\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllEndorsementsByRepoByUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllEndorsementsByRepoByUser(owner: string, repo: string, pageOptionsDto: PageOptionsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/endorsement/endorsement.service.ts:91\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    owner\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    repo\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneById(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/endorsement/endorsement.service.ts:110\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/endorsement/endorsement.service.ts:124\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from \"@nestjs/common\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { Repository } from \"typeorm\";\n\nimport { PageOptionsDto } from \"../common/dtos/page-options.dto\";\nimport { PagerService } from \"../common/services/pager.service\";\nimport { CreateEndorsementDto } from \"./dto/create-endorsement.dto\";\nimport { DbEndorsement } from \"./entities/endorsement.entity\";\n\n@Injectable()\nexport class EndorsementService {\n  constructor(\n    @InjectRepository(DbEndorsement, \"ApiConnection\")\n    private endorsementRepository: Repository,\n    private pagerService: PagerService\n  ) {}\n\n  baseQueryBuilder() {\n    return this.endorsementRepository.createQueryBuilder(\"endorsements\");\n  }\n\n  async create(createEndorsementDto: CreateEndorsementDto) {\n    return this.endorsementRepository.save(createEndorsementDto);\n  }\n\n  async findAll(pageOptionsDto: PageOptionsDto) {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder.orderBy(\"endorsements.created_at\", \"DESC\");\n\n    return this.pagerService.applyPagination({\n      pageOptionsDto,\n      queryBuilder,\n    });\n  }\n\n  async findAllByCreatorUserId(userId: number, pageOptionsDto: PageOptionsDto) {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder.where(\"endorsements.creator_user_id = :userId\", { userId }).orderBy(\"endorsements.created_at\", \"DESC\");\n\n    return this.pagerService.applyPagination({\n      pageOptionsDto,\n      queryBuilder,\n    });\n  }\n\n  async findAllByRecipientUserId(userId: number, pageOptionsDto: PageOptionsDto) {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .where(\"endorsements.recipient_user_id = :userId\", { userId })\n      .orderBy(\"endorsements.created_at\", \"DESC\");\n\n    return this.pagerService.applyPagination({\n      pageOptionsDto,\n      queryBuilder,\n    });\n  }\n\n  async findAllByRepoOwnerOrUser(repoOwnerOrUser: string, pageOptionsDto: PageOptionsDto) {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .innerJoin(\"repos\", \"repos\", \"endorsements.repo_id=repos.id\")\n      .leftJoin(\"users\", \"users\", \"endorsements.recipient_user_id=users.id\")\n      .where(\"LOWER(repos.full_name) LIKE ':ownerOrUser/%'\", { ownerOrUser: repoOwnerOrUser.toLowerCase() })\n      .orWhere(\"LOWER(users.login) = :user\", { user: repoOwnerOrUser.toLowerCase() })\n      .orderBy(\"endorsements.created_at\", \"DESC\");\n\n    return this.pagerService.applyPagination({\n      pageOptionsDto,\n      queryBuilder,\n    });\n  }\n\n  async findAllEndorsementsByRepo(owner: string, repo: string, pageOptionsDto: PageOptionsDto) {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .innerJoin(\"repos\", \"repos\", \"endorsements.repo_id=repos.id\")\n      .where(\"LOWER(repos.full_name) = :repo\", { repo: `${owner}/${repo}`.toLowerCase() })\n      .orderBy(\"endorsements.created_at\", \"DESC\");\n\n    return this.pagerService.applyPagination({\n      pageOptionsDto,\n      queryBuilder,\n    });\n  }\n\n  async findAllEndorsementsByRepoByUser(owner: string, repo: string, pageOptionsDto: PageOptionsDto) {\n    const queryBuilder = this.endorsementRepository.manager.createQueryBuilder();\n\n    queryBuilder\n      .from(DbEndorsement, \"endorsements\")\n      .innerJoin(\"repos\", \"repos\", \"endorsements.repo_id=repos.id\")\n      .leftJoin(\"users\", \"users\", \"endorsements.repo_id=users.id\")\n      .select(\"users.login\")\n      .addSelect(\"\", \"endorsements\")\n      .where(\"LOWER(repos.full_name) = :repo\", { repo: `${owner}/${repo}`.toLowerCase() })\n      .groupBy(\"users.login\")\n      .orderBy(\"endorsements.created_at\", \"DESC\");\n\n    return this.pagerService.applyPagination({\n      pageOptionsDto,\n      queryBuilder,\n    });\n  }\n\n  async findOneById(id: string) {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder.where(\"endorsements.id = :id\", { id });\n\n    const item = await queryBuilder.getOne();\n\n    if (!item) {\n      throw new NotFoundException();\n    }\n\n    return item;\n  }\n\n  async remove(id: string) {\n    await this.endorsementRepository.softDelete(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/EndorsementTokenGuard.html":{"url":"guards/EndorsementTokenGuard.html","title":"guard - EndorsementTokenGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    EndorsementTokenGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/endorsement/endorsement-token.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/endorsement/endorsement-token.guard.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(host: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/endorsement/endorsement-token.guard.ts:8\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    host\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n        \n\n\n        \n            import { CanActivate, ExecutionContext, Injectable } from \"@nestjs/common\";\nimport { ConfigService } from \"@nestjs/config\";\n\n@Injectable()\nexport class EndorsementTokenGuard implements CanActivate {\n  constructor(private configService: ConfigService) {}\n\n  canActivate(host: ExecutionContext) {\n    const apiToken = this.configService.get(\"api.endorsementServiceToken\");\n    const ctx = host.switchToHttp();\n    const request: { headers: Record } = ctx.getRequest();\n    const token = request.headers[\"x-opensauced-token\"];\n\n    if (!apiToken) {\n      return false;\n    }\n\n    const isValid = token === apiToken;\n\n    if (!isValid) {\n      return false;\n    }\n\n    return true;\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FilterListContributorsDto.html":{"url":"classes/FilterListContributorsDto.html","title":"class - FilterListContributorsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FilterListContributorsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user-lists/dtos/filter-contributors.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                contributor\n                            \n                            \n                                    Readonly\n                                    Optional\n                                limit\n                            \n                            \n                                    Optional\n                                location\n                            \n                            \n                                    Readonly\n                                    Optional\n                                page\n                            \n                            \n                                    Optional\n                                pr_velocity\n                            \n                            \n                                    Optional\n                                timezone\n                            \n                        \n                    \n                \n\n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    skip\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        contributor\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: 'string', example: 'bdougie'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-lists/dtos/filter-contributors.dto.ts:48\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 10\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, maximum: 1000, default: 10, type: 'integer'})@Type(undefined)@IsInt()@Min(1)@Max(100)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-lists/dtos/filter-contributors.dto.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        location\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({isArray: true, type: 'string', example: undefined})@IsArray()@IsString({each: true})@Type(undefined)@Transform( => , {toClassOnly: true})@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-lists/dtos/filter-contributors.dto.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, default: 1, type: 'integer'})@Type(undefined)@IsInt()@Min(1)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-lists/dtos/filter-contributors.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        pr_velocity\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: 'integer', example: 2, description: 'Less than or equal to the average number of days to merge a PR over the last 30 days'})@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-lists/dtos/filter-contributors.dto.ts:68\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        timezone\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({isArray: true, type: 'string', example: undefined})@IsArray()@IsString({each: true})@Type(undefined)@Transform( => , {toClassOnly: true})@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-lists/dtos/filter-contributors.dto.ts:60\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        skip\n                    \n                \n\n                \n                    \n                        getskip()\n                    \n                \n                            \n                                \n                                    Defined in src/user-lists/dtos/filter-contributors.dto.ts:70\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { ApiPropertyOptional } from \"@nestjs/swagger\";\nimport { Transform, Type } from \"class-transformer\";\nimport { IsInt, Min, IsOptional, Max, IsString, IsArray } from \"class-validator\";\n\nexport class FilterListContributorsDto {\n  @ApiPropertyOptional({\n    minimum: 1,\n    default: 1,\n    type: \"integer\",\n  })\n  @Type(() => Number)\n  @IsInt()\n  @Min(1)\n  @IsOptional()\n  readonly page?: number = 1;\n\n  @ApiPropertyOptional({\n    minimum: 1,\n    maximum: 1000,\n    default: 10,\n    type: \"integer\",\n  })\n  @Type(() => Number)\n  @IsInt()\n  @Min(1)\n  @Max(100)\n  @IsOptional()\n  readonly limit?: number = 10;\n\n  @ApiPropertyOptional({\n    isArray: true,\n    type: \"string\",\n    example: [\"Denver, Colorado\", \"Germany\"],\n  })\n  @IsArray()\n  @IsString({ each: true })\n  @Type(() => String)\n  @Transform(({ value }) => (Array.isArray(value) ? value : Array(value)) as string[], { toClassOnly: true })\n  @IsOptional()\n  location?: string[];\n\n  @ApiPropertyOptional({\n    type: \"string\",\n    example: \"bdougie\",\n  })\n  @IsString()\n  @IsOptional()\n  contributor?: string;\n\n  @ApiPropertyOptional({\n    isArray: true,\n    type: \"string\",\n    example: [\"Mountain Standard Time\", \"UTC\"],\n  })\n  @IsArray()\n  @IsString({ each: true })\n  @Type(() => String)\n  @Transform(({ value }) => (Array.isArray(value) ? value : Array(value)) as string[], { toClassOnly: true })\n  @IsOptional()\n  timezone?: string[];\n\n  @ApiPropertyOptional({\n    type: \"integer\",\n    example: 2,\n    description: \"Less than or equal to the average number of days to merge a PR over the last 30 days\",\n  })\n  @IsOptional()\n  pr_velocity?: number;\n\n  get skip(): number {\n    return ((this.page ?? 1) - 1) * (this.limit ?? 10);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FilterOptionsDto.html":{"url":"classes/FilterOptionsDto.html","title":"class - FilterOptionsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FilterOptionsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/dtos/filter-options.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PageOptionsDto\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                    Optional\n                                filter\n                            \n                            \n                                    Readonly\n                                    Optional\n                                repo\n                            \n                            \n                                    Readonly\n                                    Optional\n                                repoIds\n                            \n                            \n                                    Readonly\n                                    Optional\n                                topic\n                            \n                            \n                                    Readonly\n                                    Optional\n                                limit\n                            \n                            \n                                    Readonly\n                                    Optional\n                                orderDirection\n                            \n                            \n                                    Readonly\n                                    Optional\n                                page\n                            \n                            \n                                    Readonly\n                                    Optional\n                                prev_days_start_date\n                            \n                            \n                                    Readonly\n                                    Optional\n                                range\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        filter\n                        \n                    \n                \n            \n                \n                    \n                        Type :         InsightFilterFieldsEnum\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: InsightFilterFieldsEnum, enumName: 'InsightFilterFieldsEnum'})@IsEnum(InsightFilterFieldsEnum)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dtos/filter-options.dto.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        repo\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: 'string', example: 'open-sauced/insights'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dtos/filter-options.dto.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        repoIds\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional()@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dtos/filter-options.dto.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        topic\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: 'string', default: ''})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dtos/filter-options.dto.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 50\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, maximum: 1000, default: 10, type: 'integer'})@Type(undefined)@IsInt()@Min(1)@Max(10000)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:30\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        orderDirection\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OrderDirectionEnum\n\n                    \n                \n                \n                    \n                        Default value : OrderDirectionEnum.DESC\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: OrderDirectionEnum, enumName: 'OrderDirectionEnum', default: undefined})@IsEnum(OrderDirectionEnum)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:35\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, default: 1, type: 'integer'})@Type(undefined)@IsInt()@Min(1)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:17\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        prev_days_start_date\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 0\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Number of days in the past to start range block', default: 0, type: 'integer'})@Type(undefined)@IsIn(['0', '7', '30', '90'])@IsInt()@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:57\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        range\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 30\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Range in days', default: 30, type: 'integer'})@Type(undefined)@IsIn(['7', '30', '90'])@IsInt()@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:46\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiPropertyOptional } from \"@nestjs/swagger\";\nimport { IsString, IsOptional, IsEnum } from \"class-validator\";\n\nimport { InsightFilterFieldsEnum } from \"../../insight/dtos/insight-options.dto\";\nimport { PageOptionsDto } from \"./page-options.dto\";\n\nexport class FilterOptionsDto extends PageOptionsDto {\n  @ApiPropertyOptional({\n    enum: InsightFilterFieldsEnum,\n    enumName: \"InsightFilterFieldsEnum\",\n  })\n  @IsEnum(InsightFilterFieldsEnum)\n  @IsOptional()\n  readonly filter?: InsightFilterFieldsEnum;\n\n  @ApiPropertyOptional({\n    type: \"string\",\n    default: \"\",\n  })\n  @IsString()\n  @IsOptional()\n  readonly topic?: string;\n\n  @ApiPropertyOptional({\n    type: \"string\",\n    example: \"open-sauced/insights\",\n  })\n  @IsString()\n  @IsOptional()\n  readonly repo?: string;\n\n  @ApiPropertyOptional()\n  @IsString()\n  @IsOptional()\n  readonly repoIds?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FilteredUsersDto.html":{"url":"classes/FilteredUsersDto.html","title":"class - FilteredUsersDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FilteredUsersDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dtos/filtered-users.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                    Optional\n                                limit\n                            \n                            \n                                    Readonly\n                                    Optional\n                                page\n                            \n                            \n                                    Readonly\n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    skip\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 10\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, maximum: 1000, default: 10, type: 'integer'})@Type(undefined)@IsInt()@Min(1)@Max(100)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/filtered-users.dto.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, default: 1, type: 'integer'})@Type(undefined)@IsInt()@Min(1)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/filtered-users.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"\"\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Username search query to filter from the list of users', type: 'string'})@MinLength(3)@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/filtered-users.dto.ts:23\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        skip\n                    \n                \n\n                \n                    \n                        getskip()\n                    \n                \n                            \n                                \n                                    Defined in src/user/dtos/filtered-users.dto.ts:38\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from \"@nestjs/swagger\";\nimport { Type } from \"class-transformer\";\nimport { IsInt, Min, IsOptional, Max, MinLength } from \"class-validator\";\n\nexport class FilteredUsersDto {\n  @ApiPropertyOptional({\n    minimum: 1,\n    default: 1,\n    type: \"integer\",\n  })\n  @Type(() => Number)\n  @IsInt()\n  @Min(1)\n  @IsOptional()\n  readonly page?: number = 1;\n\n  @ApiProperty({\n    description: \"Username search query to filter from the list of users\",\n    type: \"string\",\n  })\n  @MinLength(3)\n  @Type(() => String)\n  readonly username: string = \"\";\n\n  @ApiPropertyOptional({\n    minimum: 1,\n    maximum: 1000,\n    default: 10,\n    type: \"integer\",\n  })\n  @Type(() => Number)\n  @IsInt()\n  @Min(1)\n  @Max(100)\n  @IsOptional()\n  readonly limit?: number = 10;\n\n  get skip(): number {\n    return ((this.page ?? 1) - 1) * (this.limit ?? 10);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FollowManyUsersDto.html":{"url":"classes/FollowManyUsersDto.html","title":"class - FollowManyUsersDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FollowManyUsersDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dtos/follow-many-users.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                usernames\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        usernames\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'An array of usernames  to follow', example: undefined, type: 'string', isArray: true})@IsArray()@IsString({each: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/follow-many-users.dto.ts:13\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsArray, IsString } from \"class-validator\";\n\nexport class FollowManyUsersDto {\n  @ApiProperty({\n    description: \"An array of usernames  to follow\",\n    example: [\"jpmcb\", \"bdougie\", \"brandonroberts\"],\n    type: \"string\",\n    isArray: true,\n  })\n  @IsArray()\n  @IsString({ each: true })\n  public usernames: string[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GenerateCodeExplanationDto.html":{"url":"classes/GenerateCodeExplanationDto.html","title":"class - GenerateCodeExplanationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GenerateCodeExplanationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/pull-requests/dtos/create-code-explanation.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                code\n                            \n                            \n                                descriptionLength\n                            \n                            \n                                language\n                            \n                            \n                                temperature\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        code\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Code', type: String})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/dtos/create-code-explanation.dto.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        descriptionLength\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Description Length', type: 'integer', example: 250})@IsNumber()@Min(100)@Max(500)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/dtos/create-code-explanation.dto.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        language\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Description Language', type: String, example: 'english', default: 'english'})@IsString()@IsIn(['english', 'spanish', 'french', 'german', 'italian', 'portuguese', 'dutch', 'russian', 'chinese', 'korean'])\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/dtos/create-code-explanation.dto.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        temperature\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Description Temperature', type: 'integer', example: 7})@IsNumber()@Min(0)@Max(10)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/dtos/create-code-explanation.dto.ts:23\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsNumber, IsString, Max, Min, IsIn } from \"class-validator\";\n\nexport class GenerateCodeExplanationDto {\n  @ApiProperty({\n    description: \"Description Length\",\n    type: \"integer\",\n    example: 250,\n  })\n  @IsNumber()\n  @Min(100)\n  @Max(500)\n  descriptionLength: number;\n\n  @ApiProperty({\n    description: \"Description Temperature\",\n    type: \"integer\",\n    example: 7,\n  })\n  @IsNumber()\n  @Min(0)\n  @Max(10)\n  temperature: number;\n\n  @ApiProperty({\n    description: \"Description Language\",\n    type: String,\n    example: \"english\",\n    default: \"english\",\n  })\n  @IsString()\n  @IsIn([\"english\", \"spanish\", \"french\", \"german\", \"italian\", \"portuguese\", \"dutch\", \"russian\", \"chinese\", \"korean\"])\n  language: string;\n\n  @ApiProperty({\n    description: \"Code\",\n    type: String,\n  })\n  @IsString()\n  code: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GenerateCodeRefactorSuggestionDto.html":{"url":"classes/GenerateCodeRefactorSuggestionDto.html","title":"class - GenerateCodeRefactorSuggestionDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GenerateCodeRefactorSuggestionDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/pull-requests/dtos/create-code-refactor-suggestion.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                code\n                            \n                            \n                                descriptionLength\n                            \n                            \n                                language\n                            \n                            \n                                temperature\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        code\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Code', type: String})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/dtos/create-code-refactor-suggestion.dto.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        descriptionLength\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Suggestion Length', type: 'integer', example: 250})@IsNumber()@Min(100)@Max(500)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/dtos/create-code-refactor-suggestion.dto.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        language\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Suggestion Language', type: String, example: 'english', default: 'english'})@IsString()@IsIn(['english', 'spanish', 'french', 'german', 'italian', 'portuguese', 'dutch', 'russian', 'chinese', 'korean'])\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/dtos/create-code-refactor-suggestion.dto.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        temperature\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Description Temperature', type: 'integer', example: 7})@IsNumber()@Min(0)@Max(10)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/dtos/create-code-refactor-suggestion.dto.ts:23\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsIn, IsNumber, IsString, Max, Min } from \"class-validator\";\n\nexport class GenerateCodeRefactorSuggestionDto {\n  @ApiProperty({\n    description: \"Suggestion Length\",\n    type: \"integer\",\n    example: 250,\n  })\n  @IsNumber()\n  @Min(100)\n  @Max(500)\n  descriptionLength: number;\n\n  @ApiProperty({\n    description: \"Description Temperature\",\n    type: \"integer\",\n    example: 7,\n  })\n  @IsNumber()\n  @Min(0)\n  @Max(10)\n  temperature: number;\n\n  @ApiProperty({\n    description: \"Suggestion Language\",\n    type: String,\n    example: \"english\",\n    default: \"english\",\n  })\n  @IsString()\n  @IsIn([\"english\", \"spanish\", \"french\", \"german\", \"italian\", \"portuguese\", \"dutch\", \"russian\", \"chinese\", \"korean\"])\n  language: string;\n\n  @ApiProperty({\n    description: \"Code\",\n    type: String,\n  })\n  @IsString()\n  code: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GenerateCodeTestSuggestionDto.html":{"url":"classes/GenerateCodeTestSuggestionDto.html","title":"class - GenerateCodeTestSuggestionDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GenerateCodeTestSuggestionDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/pull-requests/dtos/create-code-test-suggestion.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                code\n                            \n                            \n                                descriptionLength\n                            \n                            \n                                temperature\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        code\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Code', type: String})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/dtos/create-code-test-suggestion.dto.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        descriptionLength\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Suggestion Length', type: 'integer', example: 250})@IsNumber()@Min(100)@Max(500)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/dtos/create-code-test-suggestion.dto.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        temperature\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Description Temperature', type: 'integer', example: 7})@IsNumber()@Min(0)@Max(10)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/dtos/create-code-test-suggestion.dto.ts:23\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsNumber, IsString, Max, Min } from \"class-validator\";\n\nexport class GenerateCodeTestSuggestionDto {\n  @ApiProperty({\n    description: \"Suggestion Length\",\n    type: \"integer\",\n    example: 250,\n  })\n  @IsNumber()\n  @Min(100)\n  @Max(500)\n  descriptionLength: number;\n\n  @ApiProperty({\n    description: \"Description Temperature\",\n    type: \"integer\",\n    example: 7,\n  })\n  @IsNumber()\n  @Min(0)\n  @Max(10)\n  temperature: number;\n\n  @ApiProperty({\n    description: \"Code\",\n    type: String,\n  })\n  @IsString()\n  code: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GeneratePullRequestDescriptionDto.html":{"url":"classes/GeneratePullRequestDescriptionDto.html","title":"class - GeneratePullRequestDescriptionDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GeneratePullRequestDescriptionDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/pull-requests/dtos/create-pull-request-description.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                commitMessages\n                            \n                            \n                                descriptionLength\n                            \n                            \n                                    Optional\n                                diff\n                            \n                            \n                                language\n                            \n                            \n                                temperature\n                            \n                            \n                                tone\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        commitMessages\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'PR Commit Messages', type: String, isArray: true, example: undefined})@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/dtos/create-pull-request-description.dto.ts:59\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        descriptionLength\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Description Length', type: 'integer', example: 250})@IsNumber()@Min(100)@Max(500)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/dtos/create-pull-request-description.dto.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        diff\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'PR Diff', type: String})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/dtos/create-pull-request-description.dto.ts:50\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        language\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Description Language', type: String, example: 'english', default: 'english'})@IsString()@IsIn(['english', 'spanish', 'french', 'german', 'italian', 'portuguese', 'dutch', 'russian', 'chinese', 'korean'])\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/dtos/create-pull-request-description.dto.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        temperature\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Description Temperature', type: 'integer', example: 7})@IsNumber()@Min(0)@Max(10)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/dtos/create-pull-request-description.dto.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        tone\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Description Tone', type: String, example: 'formal'})@IsString()@IsIn(['exciting', 'persuasive', 'informative', 'humorous', 'formal'])\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/dtos/create-pull-request-description.dto.ts:32\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from \"@nestjs/swagger\";\nimport { IsIn, IsNumber, IsOptional, IsString, Max, Min } from \"class-validator\";\n\nexport class GeneratePullRequestDescriptionDto {\n  @ApiProperty({\n    description: \"Description Length\",\n    type: \"integer\",\n    example: 250,\n  })\n  @IsNumber()\n  @Min(100)\n  @Max(500)\n  descriptionLength: number;\n\n  @ApiProperty({\n    description: \"Description Temperature\",\n    type: \"integer\",\n    example: 7,\n  })\n  @IsNumber()\n  @Min(0)\n  @Max(10)\n  temperature: number;\n\n  @ApiProperty({\n    description: \"Description Tone\",\n    type: String,\n    example: \"formal\",\n  })\n  @IsString()\n  @IsIn([\"exciting\", \"persuasive\", \"informative\", \"humorous\", \"formal\"])\n  tone: string;\n\n  @ApiProperty({\n    description: \"Description Language\",\n    type: String,\n    example: \"english\",\n    default: \"english\",\n  })\n  @IsString()\n  @IsIn([\"english\", \"spanish\", \"french\", \"german\", \"italian\", \"portuguese\", \"dutch\", \"russian\", \"chinese\", \"korean\"])\n  language: string;\n\n  @ApiPropertyOptional({\n    description: \"PR Diff\",\n    type: String,\n  })\n  @IsString()\n  @IsOptional()\n  diff?: string;\n\n  @ApiPropertyOptional({\n    description: \"PR Commit Messages\",\n    type: String,\n    isArray: true,\n    example: [\"chore: fixed a bug with the UI\", \"style: added some rounded corners to some boxes\"],\n  })\n  @IsOptional()\n  commitMessages?: string[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/HealthController.html":{"url":"controllers/HealthController.html","title":"controller - HealthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  HealthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/health/health.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                health\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                service\n                            \n                            \n                                    Async\n                                web\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        service\n                        \n                    \n                \n            \n            \n                \n                    \n                    service()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/service')@ApiOperation({operationId: 'healthStatusService', summary: 'Check the health of Open Sauced service endpoints'})@HealthCheck()@ApiOkResponse()\n                \n            \n\n            \n                \n                    Defined in src/health/health.controller.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        web\n                        \n                    \n                \n            \n            \n                \n                    \n                    web()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/web')@ApiOperation({operationId: 'healthStatusWeb', summary: 'Check the health of Open Sauced web endpoints'})@HealthCheck()@ApiOkResponse()\n                \n            \n\n            \n                \n                    Defined in src/health/health.controller.ts:57\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from \"@nestjs/common\";\nimport {\n  HealthCheckService,\n  HttpHealthIndicator,\n  TypeOrmHealthIndicator,\n  HealthCheck,\n  MemoryHealthIndicator,\n  DiskHealthIndicator,\n} from \"@nestjs/terminus\";\nimport { ConfigService } from \"@nestjs/config\";\nimport { ApiOkResponse, ApiOperation, ApiTags } from \"@nestjs/swagger\";\n\n@Controller(\"health\")\n@ApiTags(\"Health check service\")\nexport class HealthController {\n  constructor(\n    private health: HealthCheckService,\n    private http: HttpHealthIndicator,\n    private database: TypeOrmHealthIndicator,\n    private memory: MemoryHealthIndicator,\n    private disk: DiskHealthIndicator,\n    private readonly configService: ConfigService\n  ) {}\n\n  @Get(\"/service\")\n  @ApiOperation({\n    operationId: \"healthStatusService\",\n    summary: \"Check the health of Open Sauced service endpoints\",\n  })\n  @HealthCheck()\n  @ApiOkResponse()\n  async service() {\n    return this.health.check([\n      async () => this.database.pingCheck(\"db\"),\n      async () => this.memory.checkHeap(\"memory.heap\", this.configService.get(\"memory_heap\")!),\n      async () => this.memory.checkRSS(\"memory.rss\", this.configService.get(\"memory_rss\")!),\n      async () =>\n        this.disk.checkStorage(\"disk.usage\", {\n          thresholdPercent: this.configService.get(\"disk_percentage\")!,\n          path: \"/\",\n        }),\n      async () =>\n        this.disk.checkStorage(\"disk.storage\", {\n          thresholdPercent: this.configService.get(\"disk_size\")!,\n          path: \"/\",\n        }),\n    ]);\n  }\n\n  @Get(\"/web\")\n  @ApiOperation({\n    operationId: \"healthStatusWeb\",\n    summary: \"Check the health of Open Sauced web endpoints\",\n  })\n  @HealthCheck()\n  @ApiOkResponse()\n  async web() {\n    return this.health.check([\n      async () => this.http.pingCheck(\"opensauced.pizza\", this.configService.get(\"endpoint.landing\")!),\n      async () => this.http.pingCheck(\"app.opensauced\", this.configService.get(\"endpoint.app\")!),\n      async () => this.http.pingCheck(\"hot.opensauced\", this.configService.get(\"endpoint.hot\")!),\n      async () => this.http.pingCheck(\"docs.opensauced\", this.configService.get(\"endpoint.docs\")!),\n      async () => this.http.pingCheck(\"explore.opensauced\", this.configService.get(\"endpoint.explore\")!),\n      async () => this.http.pingCheck(\"admin.opensauced\", this.configService.get(\"endpoint.admin\")!),\n    ]);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/HealthModule.html":{"url":"modules/HealthModule.html","title":"module - HealthModule","body":"\n                   \n\n\n\n\n    Modules\n    HealthModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/health/health.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Controllers\n                    \n                        \n                            HealthController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { TerminusModule } from \"@nestjs/terminus\";\nimport { HealthController } from \"./health.controller\";\n\n@Module({\n  imports: [TerminusModule],\n  controllers: [HealthController],\n})\nexport class HealthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/HighlightController.html":{"url":"controllers/HighlightController.html","title":"controller - HighlightController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  HighlightController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/highlight/highlight.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                highlights\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                featureHighlight\n                            \n                            \n                                    Async\n                                findAllFeaturedHighlights\n                            \n                            \n                                    Async\n                                findAllHighlightRepos\n                            \n                            \n                                    Async\n                                findAllHighlights\n                            \n                            \n                                    Async\n                                findTopHighlights\n                            \n                            \n                                    Async\n                                getAllHighlightReactions\n                            \n                            \n                                    Async\n                                unfeatureHighlight\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        featureHighlight\n                        \n                    \n                \n            \n            \n                \n                    \n                    featureHighlight(id: number, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/:id/featured')@ApiOperation({operationId: 'addAFeaturedHighlight', summary: 'Add a highlight to the featured list'})@UseGuards(SupabaseGuard)@ApiBearerAuth()@ApiOkResponse({type: DbUserHighlight})@ApiNotFoundResponse({description: 'Unable to find highlight'})@ApiBadRequestResponse({description: 'Invalid request'})@ApiParam({name: 'id', type: 'integer'})\n                \n            \n\n            \n                \n                    Defined in src/highlight/highlight.controller.ts:61\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllFeaturedHighlights\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllFeaturedHighlights(pageOptionsDto: HighlightOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/featured')@ApiOperation({operationId: 'findAllFeaturedHighlights', summary: 'Finds all featured highlights and paginates them'})@ApiPaginatedResponse(DbUserHighlight)@ApiOkResponse({type: DbUserHighlight})\n                \n            \n\n            \n                \n                    Defined in src/highlight/highlight.controller.ts:46\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                HighlightOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllHighlightRepos\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllHighlightRepos(pageOptionsDto: PageOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/repos/list')@ApiOperation({operationId: 'findAllHighlightRepos', summary: 'Finds all highlight repos and paginates them'})@ApiPaginatedResponse(DbUserHighlightRepo)@ApiOkResponse({type: DbUserHighlightRepo})\n                \n            \n\n            \n                \n                    Defined in src/highlight/highlight.controller.ts:93\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllHighlights\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllHighlights(pageOptionsDto: HighlightOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/list')@ApiOperation({operationId: 'findAllHighlights', summary: 'Finds all highlights and paginates them'})@ApiPaginatedResponse(DbUserHighlight)@ApiOkResponse({type: DbUserHighlight})\n                \n            \n\n            \n                \n                    Defined in src/highlight/highlight.controller.ts:35\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                HighlightOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findTopHighlights\n                        \n                    \n                \n            \n            \n                \n                    \n                    findTopHighlights(pageOptionsDto: PageOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/top')@ApiOperation({operationId: 'findTopHighlights', summary: 'Finds top highlights for the day range and paginates them'})@ApiPaginatedResponse(DbUserHighlight)@ApiOkResponse({type: DbUserHighlight})\n                \n            \n\n            \n                \n                    Defined in src/highlight/highlight.controller.ts:117\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAllHighlightReactions\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllHighlightReactions(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:id/reactions')@ApiOperation({operationId: 'getAllHighlightReactions', summary: 'Retrieves total reactions for a highlight'})@ApiOkResponse({type: DbUserHighlightReactionResponse})@ApiNotFoundResponse({description: 'Unable to get user highlight reactions'})@ApiBadRequestResponse({description: 'Invalid request'})@ApiParam({name: 'id', type: 'integer'})\n                \n            \n\n            \n                \n                    Defined in src/highlight/highlight.controller.ts:106\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        unfeatureHighlight\n                        \n                    \n                \n            \n            \n                \n                    \n                    unfeatureHighlight(id: number, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/:id/featured')@ApiOperation({operationId: 'removeAFeaturedHighlight', summary: 'Remove a highlight from the featured list'})@UseGuards(SupabaseGuard)@ApiBearerAuth()@ApiOkResponse({type: DbUserHighlight})@ApiNotFoundResponse({description: 'Unable to find highlight'})@ApiBadRequestResponse({description: 'Invalid request'})@ApiParam({name: 'id', type: 'integer'})\n                \n            \n\n            \n                \n                    Defined in src/highlight/highlight.controller.ts:79\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Delete, Get, Param, ParseIntPipe, Post, Query, UseGuards } from \"@nestjs/common\";\nimport {\n  ApiOperation,\n  ApiOkResponse,\n  ApiTags,\n  ApiBadRequestResponse,\n  ApiNotFoundResponse,\n  ApiBearerAuth,\n  ApiParam,\n} from \"@nestjs/swagger\";\n\nimport { UserId } from \"../auth/supabase.user.decorator\";\nimport { SupabaseGuard } from \"../auth/supabase.guard\";\nimport { ApiPaginatedResponse } from \"../common/decorators/api-paginated-response.decorator\";\nimport { PageOptionsDto } from \"../common/dtos/page-options.dto\";\nimport { PageDto } from \"../common/dtos/page.dto\";\n\nimport { DbUserHighlight } from \"../user/entities/user-highlight.entity\";\nimport { UserHighlightsService } from \"../user/user-highlights.service\";\nimport { DbUserHighlightRepo } from \"./entities/user-highlight-repo.entity\";\nimport { DbUserHighlightReactionResponse, HighlightOptionsDto } from \"./dtos/highlight-options.dto\";\n\n@Controller(\"highlights\")\n@ApiTags(\"Highlights service\")\nexport class HighlightController {\n  constructor(private readonly userHighlightsService: UserHighlightsService) {}\n\n  @Get(\"/list\")\n  @ApiOperation({\n    operationId: \"findAllHighlights\",\n    summary: \"Finds all highlights and paginates them\",\n  })\n  @ApiPaginatedResponse(DbUserHighlight)\n  @ApiOkResponse({ type: DbUserHighlight })\n  async findAllHighlights(@Query() pageOptionsDto: HighlightOptionsDto): Promise> {\n    return this.userHighlightsService.findAll(pageOptionsDto);\n  }\n\n  @Get(\"/featured\")\n  @ApiOperation({\n    operationId: \"findAllFeaturedHighlights\",\n    summary: \"Finds all featured highlights and paginates them\",\n  })\n  @ApiPaginatedResponse(DbUserHighlight)\n  @ApiOkResponse({ type: DbUserHighlight })\n  async findAllFeaturedHighlights(@Query() pageOptionsDto: HighlightOptionsDto): Promise> {\n    return this.userHighlightsService.findAllFeatured(pageOptionsDto);\n  }\n\n  @Post(\"/:id/featured\")\n  @ApiOperation({\n    operationId: \"addAFeaturedHighlight\",\n    summary: \"Add a highlight to the featured list\",\n  })\n  @UseGuards(SupabaseGuard)\n  @ApiBearerAuth()\n  @ApiOkResponse({ type: DbUserHighlight })\n  @ApiNotFoundResponse({ description: \"Unable to find highlight\" })\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  @ApiParam({ name: \"id\", type: \"integer\" })\n  async featureHighlight(\n    @Param(\"id\", ParseIntPipe) id: number,\n    @UserId() userId: number\n  ): Promise {\n    return this.userHighlightsService.addFeatured(id, userId);\n  }\n\n  @Delete(\"/:id/featured\")\n  @ApiOperation({\n    operationId: \"removeAFeaturedHighlight\",\n    summary: \"Remove a highlight from the featured list\",\n  })\n  @UseGuards(SupabaseGuard)\n  @ApiBearerAuth()\n  @ApiOkResponse({ type: DbUserHighlight })\n  @ApiNotFoundResponse({ description: \"Unable to find highlight\" })\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  @ApiParam({ name: \"id\", type: \"integer\" })\n  async unfeatureHighlight(\n    @Param(\"id\", ParseIntPipe) id: number,\n    @UserId() userId: number\n  ): Promise {\n    return this.userHighlightsService.removeFeatured(id, userId);\n  }\n\n  @Get(\"/repos/list\")\n  @ApiOperation({\n    operationId: \"findAllHighlightRepos\",\n    summary: \"Finds all highlight repos and paginates them\",\n  })\n  @ApiPaginatedResponse(DbUserHighlightRepo)\n  @ApiOkResponse({ type: DbUserHighlightRepo })\n  async findAllHighlightRepos(@Query() pageOptionsDto: PageOptionsDto): Promise> {\n    return this.userHighlightsService.findAllHighlightRepos(pageOptionsDto);\n  }\n\n  @Get(\"/:id/reactions\")\n  @ApiOperation({\n    operationId: \"getAllHighlightReactions\",\n    summary: \"Retrieves total reactions for a highlight\",\n  })\n  @ApiOkResponse({ type: DbUserHighlightReactionResponse })\n  @ApiNotFoundResponse({ description: \"Unable to get user highlight reactions\" })\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  @ApiParam({ name: \"id\", type: \"integer\" })\n  async getAllHighlightReactions(@Param(\"id\", ParseIntPipe) id: number): Promise {\n    return this.userHighlightsService.findAllHighlightReactions(id);\n  }\n\n  @Get(\"/top\")\n  @ApiOperation({\n    operationId: \"findTopHighlights\",\n    summary: \"Finds top highlights for the day range and paginates them\",\n  })\n  @ApiPaginatedResponse(DbUserHighlight)\n  @ApiOkResponse({ type: DbUserHighlight })\n  async findTopHighlights(@Query() pageOptionsDto: PageOptionsDto): Promise> {\n    return this.userHighlightsService.findTop(pageOptionsDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/HighlightModule.html":{"url":"modules/HighlightModule.html","title":"module - HighlightModule","body":"\n                   \n\n\n\n\n    Modules\n    HighlightModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_HighlightModule\n\n\n\ncluster_HighlightModule_imports\n\n\n\n\nUserModule\n\nUserModule\n\n\n\nHighlightModule\n\nHighlightModule\n\nHighlightModule -->\n\nUserModule->HighlightModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/highlight/highlight.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Controllers\n                    \n                        \n                            HighlightController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UserModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\n\nimport { DbUserHighlight } from \"../user/entities/user-highlight.entity\";\nimport { UserModule } from \"../user/user.module\";\nimport { HighlightController } from \"./highlight.controller\";\n\n@Module({\n  controllers: [HighlightController],\n  imports: [TypeOrmModule.forFeature([DbUserHighlight], \"ApiConnection\"), UserModule],\n})\nexport class HighlightModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/HighlightOptionsDto.html":{"url":"classes/HighlightOptionsDto.html","title":"class - HighlightOptionsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  HighlightOptionsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/highlight/dtos/highlight-options.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PageOptionsDto\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                    Optional\n                                repo\n                            \n                            \n                                    Readonly\n                                    Optional\n                                limit\n                            \n                            \n                                    Readonly\n                                    Optional\n                                orderDirection\n                            \n                            \n                                    Readonly\n                                    Optional\n                                page\n                            \n                            \n                                    Readonly\n                                    Optional\n                                prev_days_start_date\n                            \n                            \n                                    Readonly\n                                    Optional\n                                range\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        repo\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Highlight Repo Filter', example: 'open-sauced/insights'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/highlight/dtos/highlight-options.dto.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 50\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, maximum: 1000, default: 10, type: 'integer'})@Type(undefined)@IsInt()@Min(1)@Max(10000)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:30\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        orderDirection\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OrderDirectionEnum\n\n                    \n                \n                \n                    \n                        Default value : OrderDirectionEnum.DESC\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: OrderDirectionEnum, enumName: 'OrderDirectionEnum', default: undefined})@IsEnum(OrderDirectionEnum)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:35\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, default: 1, type: 'integer'})@Type(undefined)@IsInt()@Min(1)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:17\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        prev_days_start_date\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 0\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Number of days in the past to start range block', default: 0, type: 'integer'})@Type(undefined)@IsIn(['0', '7', '30', '90'])@IsInt()@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:57\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        range\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 30\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Range in days', default: 30, type: 'integer'})@Type(undefined)@IsIn(['7', '30', '90'])@IsInt()@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:46\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiPropertyOptional, PickType } from \"@nestjs/swagger\";\nimport { IsOptional, IsString } from \"class-validator\";\nimport { PageOptionsDto } from \"../../common/dtos/page-options.dto\";\nimport { DbUserHighlightReaction } from \"../../user/entities/user-highlight-reaction.entity\";\n\nexport class HighlightOptionsDto extends PageOptionsDto {\n  @ApiPropertyOptional({\n    description: \"Highlight Repo Filter\",\n    example: \"open-sauced/insights\",\n  })\n  @IsString()\n  @IsOptional()\n  readonly repo?: string;\n}\n\nexport class DbUserHighlightReactionResponse extends PickType(DbUserHighlightReaction, [\"emoji_id\", \"reaction_count\"]) {\n  @ApiPropertyOptional({\n    description: \"Usernames of users who reacted with this emoji\",\n    type: \"string\",\n    example: [\"RitaDee\", \"diivi\"],\n    isArray: true,\n  })\n  @IsString({ each: true })\n  @IsOptional()\n  readonly reaction_users?: string[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/HttpLoggerMiddleware.html":{"url":"injectables/HttpLoggerMiddleware.html","title":"injectable - HttpLoggerMiddleware","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  HttpLoggerMiddleware\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/middleware/http-logger.middleware.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                use\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        use\n                        \n                    \n                \n            \n            \n                \nuse(request: Request, response: Response, next: NextFunction)\n                \n            \n\n\n            \n                \n                    Defined in src/common/middleware/http-logger.middleware.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    response\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                            NextFunction\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(`HTTP`)\n                    \n                \n                    \n                        \n                                Defined in src/common/middleware/http-logger.middleware.ts:9\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Logger, NestMiddleware } from \"@nestjs/common\";\nimport { clc } from \"@nestjs/common/utils/cli-colors.util\";\nimport { Request, Response, NextFunction } from \"express\";\n\nimport { cliDuration } from \"../util/cli-duration\";\n\n@Injectable()\nexport class HttpLoggerMiddleware implements NestMiddleware {\n  private logger = new Logger(`HTTP`);\n\n  use(request: Request, response: Response, next: NextFunction) {\n    const startTime = Date.now();\n\n    response.on(\"finish\", () => {\n      const { method, originalUrl } = request;\n      const { statusCode, statusMessage } = response;\n\n      const message = `${method} ${originalUrl} ${statusCode} ${statusMessage}`;\n\n      if (statusCode >= 500) {\n        return this.logger.error(cliDuration(startTime, clc.red(message)));\n      }\n\n      if (statusCode >= 400) {\n        return this.logger.warn(cliDuration(startTime, clc.magentaBright(message)));\n      }\n\n      return this.logger.log(cliDuration(startTime, message));\n    });\n\n    next();\n  }\n}\n\nexport default HttpLoggerMiddleware;\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/InsightController.html":{"url":"controllers/InsightController.html","title":"controller - InsightController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  InsightController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/insight/insight.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                insights\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                findInsightPageById\n                            \n                            \n                                    Async\n                                removeInsightForUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findInsightPageById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findInsightPageById(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:id')@ApiOperation({operationId: 'findInsightPageById', summary: 'Finds a insight page by :id'})@ApiOkResponse({type: DbInsight})@ApiNotFoundResponse({description: 'Insight page not found'})@ApiUnauthorizedResponse({description: 'Not Authorized to view this Insight'})@ApiParam({name: 'id', type: 'integer'})\n                \n            \n\n            \n                \n                    Defined in src/insight/insight.controller.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        removeInsightForUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    removeInsightForUser(id: number, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/:id')@ApiOperation({operationId: 'removeInsightForUser', summary: 'Removes an insight page for the authenticated user'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOkResponse({type: DbInsight})@ApiNotFoundResponse({description: 'Unable to remove user insight'})@ApiBadRequestResponse({description: 'Invalid request'})@ApiBody({type: UpdateInsightDto})@ApiParam({name: 'id', type: 'integer'})\n                \n            \n\n            \n                \n                    Defined in src/insight/insight.controller.ts:50\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Delete, Get, Param, ParseIntPipe, UnauthorizedException, UseGuards } from \"@nestjs/common\";\nimport {\n  ApiOperation,\n  ApiOkResponse,\n  ApiNotFoundResponse,\n  ApiTags,\n  ApiUnauthorizedResponse,\n  ApiBadRequestResponse,\n  ApiBearerAuth,\n  ApiBody,\n  ApiParam,\n} from \"@nestjs/swagger\";\nimport { SupabaseGuard } from \"../auth/supabase.guard\";\nimport { UserId } from \"../auth/supabase.user.decorator\";\nimport { UpdateInsightDto } from \"./dtos/update-insight.dto\";\n\nimport { DbInsight } from \"./entities/insight.entity\";\nimport { InsightsService } from \"./insights.service\";\n\n@Controller(\"insights\")\n@ApiTags(\"Insights service\")\nexport class InsightController {\n  constructor(private readonly insightsService: InsightsService) {}\n\n  @Get(\"/:id\")\n  @ApiOperation({\n    operationId: \"findInsightPageById\",\n    summary: \"Finds a insight page by :id\",\n  })\n  @ApiOkResponse({ type: DbInsight })\n  @ApiNotFoundResponse({ description: \"Insight page not found\" })\n  @ApiUnauthorizedResponse({ description: \"Not Authorized to view this Insight\" })\n  @ApiParam({ name: \"id\", type: \"integer\" })\n  async findInsightPageById(@Param(\"id\", ParseIntPipe) id: number): Promise {\n    return this.insightsService.findOneById(id);\n  }\n\n  @Delete(\"/:id\")\n  @ApiOperation({\n    operationId: \"removeInsightForUser\",\n    summary: \"Removes an insight page for the authenticated user\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOkResponse({ type: DbInsight })\n  @ApiNotFoundResponse({ description: \"Unable to remove user insight\" })\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  @ApiBody({ type: UpdateInsightDto })\n  @ApiParam({ name: \"id\", type: \"integer\" })\n  async removeInsightForUser(@Param(\"id\", ParseIntPipe) id: number, @UserId() userId: number): Promise {\n    const insight = await this.insightsService.findOneById(id);\n\n    if (Number(insight.user.id) !== userId) {\n      throw new UnauthorizedException();\n    }\n\n    await this.insightsService.removeInsight(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/InsightMemberService.html":{"url":"injectables/InsightMemberService.html","title":"injectable - InsightMemberService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  InsightMemberService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/insight/insight-member.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addInsightMember\n                            \n                            \n                                baseQueryBuilder\n                            \n                            \n                                    Async\n                                canUserManageInsight\n                            \n                            \n                                    Async\n                                findAllInsightMembers\n                            \n                            \n                                    Async\n                                findOneById\n                            \n                            \n                                    Async\n                                removeInsightMember\n                            \n                            \n                                    Async\n                                updateInsightMember\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(insightMemberRepository: Repository, insightService: InsightsService, pagerService: PagerService)\n                    \n                \n                        \n                            \n                                Defined in src/insight/insight-member.service.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        insightMemberRepository\n                                                  \n                                                        \n                                                                    Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        insightService\n                                                  \n                                                        \n                                                                        InsightsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        pagerService\n                                                  \n                                                        \n                                                                        PagerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addInsightMember\n                        \n                    \n                \n            \n            \n                \n                    \n                    addInsightMember(insightMember: Partial)\n                \n            \n\n\n            \n                \n                    Defined in src/insight/insight-member.service.ts:41\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    insightMember\n                                    \n                                            Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        baseQueryBuilder\n                        \n                    \n                \n            \n            \n                \nbaseQueryBuilder()\n                \n            \n\n\n            \n                \n                    Defined in src/insight/insight-member.service.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     SelectQueryBuilder\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        canUserManageInsight\n                        \n                    \n                \n            \n            \n                \n                    \n                    canUserManageInsight(userId: number, insightId: number, accessRoles: string[], checkOwner)\n                \n            \n\n\n            \n                \n                    Defined in src/insight/insight-member.service.ts:53\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    insightId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    accessRoles\n                                    \n                                            string[]\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    checkOwner\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        true\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllInsightMembers\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllInsightMembers(pageOptionsDto: PageOptionsDto, insightId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/insight/insight-member.service.ts:81\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    insightId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneById(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/insight/insight-member.service.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        removeInsightMember\n                        \n                    \n                \n            \n            \n                \n                    \n                    removeInsightMember(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/insight/insight-member.service.ts:49\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateInsightMember\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateInsightMember(id: string, insightMember: Partial)\n                \n            \n\n\n            \n                \n                    Defined in src/insight/insight-member.service.ts:45\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    insightMember\n                                    \n                                            Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from \"@nestjs/common\";\nimport { Repository, SelectQueryBuilder } from \"typeorm\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\n\nimport { PageDto } from \"../common/dtos/page.dto\";\n\nimport { PageOptionsDto } from \"../common/dtos/page-options.dto\";\nimport { PagerService } from \"../common/services/pager.service\";\nimport { DbInsightMember } from \"./entities/insight-member.entity\";\nimport { InsightsService } from \"./insights.service\";\n\n@Injectable()\nexport class InsightMemberService {\n  constructor(\n    @InjectRepository(DbInsightMember, \"ApiConnection\")\n    private insightMemberRepository: Repository,\n    private insightService: InsightsService,\n    private pagerService: PagerService\n  ) {}\n\n  baseQueryBuilder(): SelectQueryBuilder {\n    const builder = this.insightMemberRepository.createQueryBuilder(\"insight_members\");\n\n    return builder;\n  }\n\n  async findOneById(id: string): Promise {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder.where(\"insight_members.id = :id\", { id });\n\n    const item: DbInsightMember | null = await queryBuilder.getOne();\n\n    if (!item) {\n      throw new NotFoundException();\n    }\n\n    return item;\n  }\n\n  async addInsightMember(insightMember: Partial) {\n    return this.insightMemberRepository.save(insightMember);\n  }\n\n  async updateInsightMember(id: string, insightMember: Partial) {\n    return this.insightMemberRepository.update(id, insightMember);\n  }\n\n  async removeInsightMember(id: string) {\n    return this.insightMemberRepository.softDelete(id);\n  }\n\n  async canUserManageInsight(\n    userId: number,\n    insightId: number,\n    accessRoles: string[],\n    checkOwner = true\n  ): Promise {\n    const insight = await this.insightService.findOneById(insightId);\n\n    if (checkOwner && Number(insight.user.id) === userId) {\n      return true;\n    }\n\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .where(\"insight_members.insight_id = :insightId\", { insightId })\n      .andWhere(\"insight_members.user_id = :userId\", { userId })\n      .andWhere(\"insight_members.access IN (:...accessRoles)\", { accessRoles });\n\n    const item: DbInsightMember | null = await queryBuilder.getOne();\n\n    if (!item) {\n      return false;\n    }\n\n    return true;\n  }\n\n  async findAllInsightMembers(pageOptionsDto: PageOptionsDto, insightId: number): Promise> {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .addSelect(\"users.name\", \"insight_members_name\")\n      .addSelect(\"insight_members.invitation_email\", \"insight_members_invitation_email\")\n      .innerJoin(\"insights\", \"insights\", \"insight_members.insight_id=insights.id\")\n      .leftJoin(\"users\", \"users\", \"insight_members.user_id=users.id\")\n      .where(\"insight_members.insight_id = :insightId\", { insightId })\n      .orderBy(\"users.name\", \"ASC\");\n\n    return this.pagerService.applyPagination({\n      pageOptionsDto,\n      queryBuilder,\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/InsightOptionsDto.html":{"url":"classes/InsightOptionsDto.html","title":"class - InsightOptionsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  InsightOptionsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/insight/dtos/insight-options.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PageOptionsDto\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                    Optional\n                                filter\n                            \n                            \n                                    Readonly\n                                    Optional\n                                repo\n                            \n                            \n                                    Readonly\n                                    Optional\n                                repoIds\n                            \n                            \n                                    Readonly\n                                    Optional\n                                topic\n                            \n                            \n                                    Readonly\n                                    Optional\n                                limit\n                            \n                            \n                                    Readonly\n                                    Optional\n                                orderDirection\n                            \n                            \n                                    Readonly\n                                    Optional\n                                page\n                            \n                            \n                                    Readonly\n                                    Optional\n                                prev_days_start_date\n                            \n                            \n                                    Readonly\n                                    Optional\n                                range\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        filter\n                        \n                    \n                \n            \n                \n                    \n                        Type :         InsightFilterFieldsEnum\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: InsightFilterFieldsEnum, enumName: 'InsightFilterFieldsEnum'})@IsEnum(InsightFilterFieldsEnum)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/dtos/insight-options.dto.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        repo\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional()@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/dtos/insight-options.dto.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        repoIds\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional()@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/dtos/insight-options.dto.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        topic\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"javscript\"\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: 'string', default: 'javscript'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/dtos/insight-options.dto.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 50\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, maximum: 1000, default: 10, type: 'integer'})@Type(undefined)@IsInt()@Min(1)@Max(10000)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:30\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        orderDirection\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OrderDirectionEnum\n\n                    \n                \n                \n                    \n                        Default value : OrderDirectionEnum.DESC\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: OrderDirectionEnum, enumName: 'OrderDirectionEnum', default: undefined})@IsEnum(OrderDirectionEnum)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:35\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, default: 1, type: 'integer'})@Type(undefined)@IsInt()@Min(1)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:17\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        prev_days_start_date\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 0\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Number of days in the past to start range block', default: 0, type: 'integer'})@Type(undefined)@IsIn(['0', '7', '30', '90'])@IsInt()@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:57\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        range\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 30\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Range in days', default: 30, type: 'integer'})@Type(undefined)@IsIn(['7', '30', '90'])@IsInt()@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:46\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiPropertyOptional } from \"@nestjs/swagger\";\nimport { IsEnum, IsOptional, IsString } from \"class-validator\";\n\nimport { PageOptionsDto } from \"../../common/dtos/page-options.dto\";\n\nexport enum InsightFilterFieldsEnum {\n  Recent = \"recent\",\n  Top100 = \"top-100-repos\",\n  MinimumContributors = \"minimum-5-contributors\",\n  MostActive = \"most-active\",\n  MostSpammed = \"most-spammed\",\n}\n\nexport class InsightOptionsDto extends PageOptionsDto {\n  @ApiPropertyOptional({\n    enum: InsightFilterFieldsEnum,\n    enumName: \"InsightFilterFieldsEnum\",\n  })\n  @IsEnum(InsightFilterFieldsEnum)\n  @IsOptional()\n  readonly filter?: InsightFilterFieldsEnum;\n\n  @ApiPropertyOptional()\n  @IsString()\n  @IsOptional()\n  readonly repo?: string;\n\n  @ApiPropertyOptional({\n    type: \"string\",\n    default: \"javscript\",\n  })\n  @IsString()\n  @IsOptional()\n  readonly topic?: string = \"javscript\";\n\n  @ApiPropertyOptional()\n  @IsString()\n  @IsOptional()\n  readonly repoIds?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/InsightPageOptionsDto.html":{"url":"classes/InsightPageOptionsDto.html","title":"class - InsightPageOptionsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  InsightPageOptionsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/insight/dtos/insight-page-options.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PageOptionsDto\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                    Optional\n                                limit\n                            \n                            \n                                    Readonly\n                                    Optional\n                                orderDirection\n                            \n                            \n                                    Readonly\n                                    Optional\n                                page\n                            \n                            \n                                    Readonly\n                                    Optional\n                                prev_days_start_date\n                            \n                            \n                                    Readonly\n                                    Optional\n                                range\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 50\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, maximum: 1000, default: 10, type: 'integer'})@Type(undefined)@IsInt()@Min(1)@Max(10000)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:30\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        orderDirection\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OrderDirectionEnum\n\n                    \n                \n                \n                    \n                        Default value : OrderDirectionEnum.DESC\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: OrderDirectionEnum, enumName: 'OrderDirectionEnum', default: undefined})@IsEnum(OrderDirectionEnum)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:35\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, default: 1, type: 'integer'})@Type(undefined)@IsInt()@Min(1)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:17\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        prev_days_start_date\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 0\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Number of days in the past to start range block', default: 0, type: 'integer'})@Type(undefined)@IsIn(['0', '7', '30', '90'])@IsInt()@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:57\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        range\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 30\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Range in days', default: 30, type: 'integer'})@Type(undefined)@IsIn(['7', '30', '90'])@IsInt()@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:46\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PageOptionsDto } from \"../../common/dtos/page-options.dto\";\n\nexport class InsightPageOptionsDto extends PageOptionsDto {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/InsightRepoService.html":{"url":"injectables/InsightRepoService.html","title":"injectable - InsightRepoService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  InsightRepoService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/insight/insight-repo.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addInsightRepo\n                            \n                            \n                                    Async\n                                removeInsightRepo\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(insightRepoRepository: Repository, pizzaOvenService: PizzaOvenService)\n                    \n                \n                        \n                            \n                                Defined in src/insight/insight-repo.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        insightRepoRepository\n                                                  \n                                                        \n                                                                    Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        pizzaOvenService\n                                                  \n                                                        \n                                                                        PizzaOvenService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addInsightRepo\n                        \n                    \n                \n            \n            \n                \n                    \n                    addInsightRepo(insightId: number, repo: RepoInfo)\n                \n            \n\n\n            \n                \n                    Defined in src/insight/insight-repo.service.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    insightId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    repo\n                                    \n                                                RepoInfo\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        removeInsightRepo\n                        \n                    \n                \n            \n            \n                \n                    \n                    removeInsightRepo(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/insight/insight-repo.service.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { Repository } from \"typeorm\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\n\nimport { RepoInfo } from \"../repo/dtos/repo-info.dto\";\nimport { PizzaOvenService } from \"../pizza/pizza-oven.service\";\nimport { BakeRepoDto } from \"../pizza/dtos/baked-repo.dto\";\nimport { DbInsightRepo } from \"./entities/insight-repo.entity\";\n\n@Injectable()\nexport class InsightRepoService {\n  constructor(\n    @InjectRepository(DbInsightRepo, \"ApiConnection\")\n    private insightRepoRepository: Repository,\n    private pizzaOvenService: PizzaOvenService\n  ) {}\n\n  async addInsightRepo(insightId: number, repo: RepoInfo) {\n    // when individual insight pages are fetched, go bake their repos to get fresh commit data\n    const bakeRepoInfo: BakeRepoDto = {\n      url: `https://github.com/${repo.fullName}`,\n      wait: false,\n    };\n\n    try {\n      await this.pizzaOvenService.postToPizzaOvenService(bakeRepoInfo);\n    } catch (e: unknown) {\n      if (e instanceof Error) {\n        console.error(`error posting to pizza-oven service for repo ${bakeRepoInfo.url}: ${e.message}`);\n      }\n    }\n\n    return this.insightRepoRepository.save({ insight_id: insightId, repo_id: repo.id, full_name: repo.fullName });\n  }\n\n  async removeInsightRepo(id: number) {\n    return this.insightRepoRepository.softDelete(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/InsightsModule.html":{"url":"modules/InsightsModule.html","title":"module - InsightsModule","body":"\n                   \n\n\n\n\n    Modules\n    InsightsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_InsightsModule\n\n\n\ncluster_InsightsModule_providers\n\n\n\ncluster_InsightsModule_imports\n\n\n\ncluster_InsightsModule_exports\n\n\n\n\nApiServicesModule\n\nApiServicesModule\n\n\n\nInsightsModule\n\nInsightsModule\n\nInsightsModule -->\n\nApiServicesModule->InsightsModule\n\n\n\n\n\nPizzaOvenModule\n\nPizzaOvenModule\n\nInsightsModule -->\n\nPizzaOvenModule->InsightsModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nInsightsModule -->\n\nUserModule->InsightsModule\n\n\n\n\n\nInsightRepoService \n\nInsightRepoService \n\nInsightRepoService  -->\n\nInsightsModule->InsightRepoService \n\n\n\n\n\nInsightsService \n\nInsightsService \n\nInsightsService  -->\n\nInsightsModule->InsightsService \n\n\n\n\n\nInsightMemberService\n\nInsightMemberService\n\nInsightsModule -->\n\nInsightMemberService->InsightsModule\n\n\n\n\n\nInsightRepoService\n\nInsightRepoService\n\nInsightsModule -->\n\nInsightRepoService->InsightsModule\n\n\n\n\n\nInsightsService\n\nInsightsService\n\nInsightsModule -->\n\nInsightsService->InsightsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/insight/insights.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            InsightMemberService\n                        \n                        \n                            InsightRepoService\n                        \n                        \n                            InsightsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            InsightController\n                        \n                        \n                            UserInsightsController\n                        \n                        \n                            UserInsightMemberController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            ApiServicesModule\n                        \n                        \n                            PizzaOvenModule\n                        \n                        \n                            UserModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            InsightRepoService\n                        \n                        \n                            InsightsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\n\nimport { UserModule } from \"../user/user.module\";\nimport { ApiServicesModule } from \"../common/services/api-services.module\";\nimport { PizzaOvenModule } from \"../pizza/pizza-oven.module\";\nimport { DbInsight } from \"./entities/insight.entity\";\nimport { DbInsightRepo } from \"./entities/insight-repo.entity\";\nimport { DbInsightMember } from \"./entities/insight-member.entity\";\nimport { InsightController } from \"./insight.controller\";\nimport { UserInsightsController } from \"./user-insight.controller\";\nimport { InsightsService } from \"./insights.service\";\nimport { InsightRepoService } from \"./insight-repo.service\";\nimport { UserInsightMemberController } from \"./user-insight-member.controller\";\nimport { InsightMemberService } from \"./insight-member.service\";\n\n@Module({\n  controllers: [InsightController, UserInsightsController, UserInsightMemberController],\n  imports: [\n    TypeOrmModule.forFeature([DbInsight, DbInsightRepo, DbInsightMember], \"ApiConnection\"),\n    UserModule,\n    ApiServicesModule,\n    PizzaOvenModule,\n  ],\n  providers: [InsightsService, InsightRepoService, InsightMemberService],\n  exports: [InsightsService, InsightRepoService],\n})\nexport class InsightsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/InsightsService.html":{"url":"injectables/InsightsService.html","title":"injectable - InsightsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  InsightsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/insight/insights.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addInsight\n                            \n                            \n                                baseQueryBuilder\n                            \n                            \n                                    Async\n                                findAllByUserId\n                            \n                            \n                                    Async\n                                findOneById\n                            \n                            \n                                    Async\n                                removeInsight\n                            \n                            \n                                    Async\n                                updateInsight\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(insightRepository: Repository, pizzaOvenService: PizzaOvenService)\n                    \n                \n                        \n                            \n                                Defined in src/insight/insights.service.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        insightRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        pizzaOvenService\n                                                  \n                                                        \n                                                                        PizzaOvenService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addInsight\n                        \n                    \n                \n            \n            \n                \n                    \n                    addInsight(insight: Partial)\n                \n            \n\n\n            \n                \n                    Defined in src/insight/insights.service.ts:60\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    insight\n                                    \n                                                Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        baseQueryBuilder\n                        \n                    \n                \n            \n            \n                \nbaseQueryBuilder()\n                \n            \n\n\n            \n                \n                    Defined in src/insight/insights.service.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         SelectQueryBuilder\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllByUserId\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllByUserId(pageOptionsDto: InsightPageOptionsDto, userId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/insight/insights.service.ts:72\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                InsightPageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneById(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/insight/insights.service.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        removeInsight\n                        \n                    \n                \n            \n            \n                \n                    \n                    removeInsight(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/insight/insights.service.ts:68\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateInsight\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateInsight(id: number, insight: Partial)\n                \n            \n\n\n            \n                \n                    Defined in src/insight/insights.service.ts:64\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    insight\n                                    \n                                                Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from \"@nestjs/common\";\nimport { Repository, SelectQueryBuilder } from \"typeorm\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\n\nimport { PageDto } from \"../common/dtos/page.dto\";\nimport { PageMetaDto } from \"../common/dtos/page-meta.dto\";\n\nimport { PizzaOvenService } from \"../pizza/pizza-oven.service\";\nimport { BakeRepoDto } from \"../pizza/dtos/baked-repo.dto\";\nimport { DbInsight } from \"./entities/insight.entity\";\nimport { InsightPageOptionsDto } from \"./dtos/insight-page-options.dto\";\n\n@Injectable()\nexport class InsightsService {\n  constructor(\n    @InjectRepository(DbInsight, \"ApiConnection\")\n    private insightRepository: Repository,\n    private pizzaOvenService: PizzaOvenService\n  ) {}\n\n  baseQueryBuilder(): SelectQueryBuilder {\n    const builder = this.insightRepository.createQueryBuilder(\"insights\");\n\n    return builder;\n  }\n\n  async findOneById(id: number): Promise {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .where(\"insights.id = :id\", { id })\n      .innerJoinAndSelect(`insights.user`, `user`)\n      .leftJoinAndSelect(`insights.repos`, `insight_repos`, `insights.id=insight_repos.insight_id`);\n\n    const item: DbInsight | null = await queryBuilder.getOne();\n\n    if (!item) {\n      throw new NotFoundException();\n    }\n\n    item.repos.forEach(async (url) => {\n      // when individual insight pages are fetched, go bake their repos to get fresh commit data\n      const bakeRepoInfo: BakeRepoDto = {\n        url: `https://github.com/${url.full_name}`,\n        wait: false,\n      };\n\n      try {\n        await this.pizzaOvenService.postToPizzaOvenService(bakeRepoInfo);\n      } catch (e: unknown) {\n        if (e instanceof Error) {\n          console.error(`error posting to pizza-oven service for repo ${bakeRepoInfo.url}: ${e.message}`);\n        }\n      }\n    });\n\n    return item;\n  }\n\n  async addInsight(insight: Partial) {\n    return this.insightRepository.save(insight);\n  }\n\n  async updateInsight(id: number, insight: Partial) {\n    return this.insightRepository.update(id, insight);\n  }\n\n  async removeInsight(id: number) {\n    return this.insightRepository.softDelete(id);\n  }\n\n  async findAllByUserId(pageOptionsDto: InsightPageOptionsDto, userId: string): Promise> {\n    const queryBuilder = this.insightRepository.createQueryBuilder(\"insights\");\n\n    queryBuilder\n      .where(\"insights.user_id = :userId\", { userId })\n      .orWhere(\n        `(\n          ((SELECT COUNT(id) FROM insights where user_id=:userId)=0)\n          AND\n          (is_featured=true AND insights.deleted_at IS NULL)\n        )\n      `,\n        { userId }\n      )\n      .orWhere(\n        `:userId IN (\n          SELECT user_id\n          FROM insight_members\n          WHERE insight_id = insights.id\n          AND user_id = :userId\n          AND access != 'pending'\n          AND deleted_at IS NULL\n        )\n      `,\n        { userId }\n      )\n      .leftJoinAndSelect(`insights.repos`, `insight_repos`, `insights.id=insight_repos.insight_id`)\n      .orderBy(\"insights.updated_at\", \"DESC\");\n\n    queryBuilder.skip(pageOptionsDto.skip).take(pageOptionsDto.limit);\n\n    const itemCount = await queryBuilder.getCount();\n    const entities = await queryBuilder.getMany();\n\n    const pageMetaDto = new PageMetaDto({ itemCount, pageOptionsDto });\n\n    return new PageDto(entities, pageMetaDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/IssueSummaryController.html":{"url":"controllers/IssueSummaryController.html","title":"controller - IssueSummaryController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  IssueSummaryController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issues/issue-summary.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                issues\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                generateIssueSummary\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        generateIssueSummary\n                        \n                    \n                \n            \n            \n                \n                    \n                    generateIssueSummary(generateIssueSummaryDto: CreateIssueSummaryDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/summary/generate')@ApiOperation({operationId: 'generateIssueSummary', summary: 'Generate a summary for an issue'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiBadRequestResponse({description: 'Invalid request'})@ApiBody({type: CreateIssueSummaryDto})\n                \n            \n\n            \n                \n                    Defined in src/issues/issue-summary.controller.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    generateIssueSummaryDto\n                                    \n                                                CreateIssueSummaryDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { BadRequestException, Body, Controller, Post, UseGuards } from \"@nestjs/common\";\nimport { ApiOperation, ApiBearerAuth, ApiBadRequestResponse, ApiBody, ApiTags } from \"@nestjs/swagger\";\n\nimport { SupabaseGuard } from \"../auth/supabase.guard\";\nimport { CreateIssueSummaryDto } from \"./dtos/create-issue-summary.dto\";\nimport { IssueSummaryService } from \"./issue-summary.service\";\n\n@Controller(\"issues\")\n@ApiTags(\"Issue summary service\")\nexport class IssueSummaryController {\n  constructor(private readonly issueSummaryService: IssueSummaryService) {}\n\n  @Post(\"/summary/generate\")\n  @ApiOperation({\n    operationId: \"generateIssueSummary\",\n    summary: \"Generate a summary for an issue\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  @ApiBody({ type: CreateIssueSummaryDto })\n  async generateIssueSummary(@Body() generateIssueSummaryDto: CreateIssueSummaryDto) {\n    const summary = await this.issueSummaryService.generateIssueSummary(generateIssueSummaryDto);\n\n    if (!summary) {\n      throw new BadRequestException();\n    }\n\n    return { summary };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/IssueSummaryModule.html":{"url":"modules/IssueSummaryModule.html","title":"module - IssueSummaryModule","body":"\n                   \n\n\n\n\n    Modules\n    IssueSummaryModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_IssueSummaryModule\n\n\n\ncluster_IssueSummaryModule_providers\n\n\n\ncluster_IssueSummaryModule_exports\n\n\n\ncluster_IssueSummaryModule_imports\n\n\n\n\nOpenAiModule\n\nOpenAiModule\n\n\n\nIssueSummaryModule\n\nIssueSummaryModule\n\nIssueSummaryModule -->\n\nOpenAiModule->IssueSummaryModule\n\n\n\n\n\nIssueSummaryService \n\nIssueSummaryService \n\nIssueSummaryService  -->\n\nIssueSummaryModule->IssueSummaryService \n\n\n\n\n\nIssueSummaryService\n\nIssueSummaryService\n\nIssueSummaryModule -->\n\nIssueSummaryService->IssueSummaryModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/issues/issue-summary.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            IssueSummaryService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            IssueSummaryController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            OpenAiModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            IssueSummaryService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { OpenAiModule } from \"../open-ai/open-ai.module\";\nimport { IssueSummaryService } from \"./issue-summary.service\";\nimport { IssueSummaryController } from \"./issue-summary.controller\";\n\n@Module({\n  imports: [OpenAiModule],\n  controllers: [IssueSummaryController],\n  providers: [IssueSummaryService],\n  exports: [IssueSummaryService],\n})\nexport class IssueSummaryModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/IssueSummaryService.html":{"url":"injectables/IssueSummaryService.html","title":"injectable - IssueSummaryService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  IssueSummaryService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issues/issue-summary.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                generateIssueSummary\n                            \n                            \n                                    Private\n                                generatePrompt\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(openAiService: OpenAiService)\n                    \n                \n                        \n                            \n                                Defined in src/issues/issue-summary.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        openAiService\n                                                  \n                                                        \n                                                                        OpenAiService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        generateIssueSummary\n                        \n                    \n                \n            \n            \n                \n                    \n                    generateIssueSummary(options: CreateIssueSummaryDto)\n                \n            \n\n\n            \n                \n                    Defined in src/issues/issue-summary.service.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                CreateIssueSummaryDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        generatePrompt\n                        \n                    \n                \n            \n            \n                \n                    \n                    generatePrompt(language: string, maxLength: number, tone: string)\n                \n            \n\n\n            \n                \n                    Defined in src/issues/issue-summary.service.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    language\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    maxLength\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    tone\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\n\nimport { OpenAiService } from \"../open-ai/open-ai.service\";\nimport { CreateIssueSummaryDto } from \"./dtos/create-issue-summary.dto\";\n\n@Injectable()\nexport class IssueSummaryService {\n  constructor(private openAiService: OpenAiService) {}\n\n  private generatePrompt(language: string, maxLength: number, tone: string) {\n    return [\n      `Generate an apt issue summary for an issue taken from github issues with the specifications mentioned below`,\n      `The summary should be written in past tense and ${tone} tone`,\n      `Summary language: ${language}`,\n      `Summary must be a maximum of ${maxLength} characters.`,\n      \"If the issue or its comments include a solution, include it in the summary.\",\n      \"Exclude anything unnecessary such as translation. Your entire response will be used to summarize and analyze the issue.\",\n    ].join(\"\\n\");\n  }\n\n  async generateIssueSummary(options: CreateIssueSummaryDto) {\n    const content = `Issue Title: ${options.issueTitle}\\nIssue Description: ${options.issueDescription}\\nIssue Comments: ${options.issueComments}`;\n\n    try {\n      const completion = this.openAiService.generateCompletion(\n        this.generatePrompt(options.language, options.summaryLength, options.tone),\n        content,\n        options.temperature\n      );\n\n      return completion;\n    } catch (error: unknown) {\n      if (error instanceof Error) {\n        console.error(\"OpenAI error: \", error.message);\n      }\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/LogModule.html":{"url":"modules/LogModule.html","title":"module - LogModule","body":"\n                   \n\n\n\n\n    Modules\n    LogModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_LogModule\n\n\n\ncluster_LogModule_exports\n\n\n\ncluster_LogModule_providers\n\n\n\n\nCustomLogger \n\nCustomLogger \n\n\n\nLogModule\n\nLogModule\n\nCustomLogger  -->\n\nLogModule->CustomLogger \n\n\n\n\n\nCustomLogger\n\nCustomLogger\n\nLogModule -->\n\nCustomLogger->LogModule\n\n\n\n\n\nLogService\n\nLogService\n\nLogModule -->\n\nLogService->LogModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/log/log.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CustomLogger\n                        \n                        \n                            LogService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            CustomLogger\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { ConfigModule } from \"@nestjs/config\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\nimport { LogService } from \"./log.service\";\nimport { DbLog } from \"./log.entity\";\nimport CustomLogger from \"./custom-logger\";\n\n@Module({\n  imports: [ConfigModule, TypeOrmModule.forFeature([DbLog], \"LogConnection\")],\n  providers: [CustomLogger, LogService],\n  exports: [CustomLogger],\n})\nexport class LogModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LogService.html":{"url":"injectables/LogService.html","title":"injectable - LogService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LogService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/log/log.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createLog\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(logsRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/log/log.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        logsRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createLog\n                        \n                    \n                \n            \n            \n                \n                    \n                    createLog(log: CreateLogDto)\n                \n            \n\n\n            \n                \n                    Defined in src/log/log.service.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    log\n                                    \n                                                CreateLogDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { Repository } from \"typeorm\";\nimport { DbLog } from \"./log.entity\";\nimport { CreateLogDto } from \"./dtos/create-log.dto\";\n\n@Injectable()\nexport class LogService {\n  constructor(\n    @InjectRepository(DbLog, \"LogConnection\")\n    private logsRepository: Repository\n  ) {}\n\n  async createLog(log: CreateLogDto) {\n    const newLog = this.logsRepository.create(log);\n\n    await this.logsRepository.save(newLog, { data: { isCreatingLogs: true } });\n\n    return newLog;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/OpenAiModule.html":{"url":"modules/OpenAiModule.html","title":"module - OpenAiModule","body":"\n                   \n\n\n\n\n    Modules\n    OpenAiModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_OpenAiModule\n\n\n\ncluster_OpenAiModule_providers\n\n\n\ncluster_OpenAiModule_exports\n\n\n\n\nOpenAiService \n\nOpenAiService \n\n\n\nOpenAiModule\n\nOpenAiModule\n\nOpenAiService  -->\n\nOpenAiModule->OpenAiService \n\n\n\n\n\nOpenAiService\n\nOpenAiService\n\nOpenAiModule -->\n\nOpenAiService->OpenAiModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/open-ai/open-ai.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            OpenAiService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            OpenAiService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { OpenAiService } from \"./open-ai.service\";\n\n@Module({\n  providers: [OpenAiService],\n  exports: [OpenAiService],\n})\nexport class OpenAiModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/OpenAiService.html":{"url":"injectables/OpenAiService.html","title":"injectable - OpenAiService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  OpenAiService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/open-ai/open-ai.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                generateCompletion\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/open-ai/open-ai.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        generateCompletion\n                        \n                    \n                \n            \n            \n                \n                    \n                    generateCompletion(systemMessage: string, userMessage: string, temperature: number)\n                \n            \n\n\n            \n                \n                    Defined in src/open-ai/open-ai.service.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    systemMessage\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userMessage\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    temperature\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { Fetch } from \"@supabase/supabase-js/dist/module/lib/types\";\nimport { ConfigService } from \"@nestjs/config\";\n\ninterface ChatResponse {\n  choices: { message: { content: string } }[];\n}\n\n@Injectable()\nexport class OpenAiService {\n  constructor(private configService: ConfigService) {}\n\n  async generateCompletion(systemMessage: string, userMessage: string, temperature: number) {\n    // eslint-disable-next-line\n    const fetcher: Fetch = typeof fetch !== \"undefined\" ? fetch : (require(\"node-fetch\") as Fetch);\n    const response = await fetcher(this.configService.get(\"openai.completionsURL\")!, {\n      method: \"POST\",\n      headers: {\n        Authorization: `Bearer ${this.configService.get(\"openai.APIKey\")!}`,\n        \"Content-type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        model: this.configService.get(\"openai.modelName\"),\n        messages: [\n          {\n            role: \"system\",\n            content: systemMessage,\n          },\n          {\n            role: \"user\",\n            content: userMessage,\n          },\n        ],\n        temperature: temperature / 10,\n        n: 1,\n      }),\n    });\n\n    if (response.ok) {\n      const data = (await response.json()) as ChatResponse;\n\n      return data.choices[0]?.message.content;\n    }\n\n    throw new Error(response.statusText);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PageDto.html":{"url":"classes/PageDto.html","title":"class - PageDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PageDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/dtos/page.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                data\n                            \n                            \n                                    Readonly\n                                meta\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(data: T[], meta: PageMetaDto)\n                    \n                \n                        \n                            \n                                Defined in src/common/dtos/page.dto.ts:16\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        data\n                                                  \n                                                        \n                                                                    T[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        meta\n                                                  \n                                                        \n                                                                        PageMetaDto\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        data\n                        \n                    \n                \n            \n                \n                    \n                        Type :     T[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsArray()@ApiProperty({isArray: true})@ValidateNested({each: true})@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dtos/page.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        meta\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PageMetaDto\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: () => PageMetaDto})@ValidateNested()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dtos/page.dto.ts:16\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsArray, ValidateNested } from \"class-validator\";\nimport { Type } from \"class-transformer\";\nimport { PageMetaDto } from \"./page-meta.dto\";\n\nexport class PageDto {\n  @IsArray()\n  @ApiProperty({ isArray: true })\n  @ValidateNested({ each: true })\n  @Type(() => Array)\n  readonly data: T[];\n\n  @ApiProperty({ type: () => PageMetaDto })\n  @ValidateNested()\n  @Type(() => PageMetaDto)\n  readonly meta: PageMetaDto;\n\n  constructor(data: T[], meta: PageMetaDto) {\n    this.data = data;\n    this.meta = meta;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PageMetaDto.html":{"url":"classes/PageMetaDto.html","title":"class - PageMetaDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PageMetaDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/dtos/page-meta.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                hasNextPage\n                            \n                            \n                                    Readonly\n                                hasPreviousPage\n                            \n                            \n                                    Readonly\n                                itemCount\n                            \n                            \n                                    Readonly\n                                limit\n                            \n                            \n                                    Readonly\n                                page\n                            \n                            \n                                    Readonly\n                                pageCount\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(undefined: PageMetaParameters)\n                    \n                \n                        \n                            \n                                Defined in src/common/dtos/page-meta.dto.ts:43\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                  \n                                                        \n                                                                        PageMetaParameters\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        hasNextPage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Flag indicating if there is a next page', example: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dtos/page-meta.dto.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        hasPreviousPage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Flag indicating if there is a previous page', example: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dtos/page-meta.dto.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        itemCount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The number of items in the collection', example: 100, type: 'integer'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dtos/page-meta.dto.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The number of items per page', example: 10, type: 'integer'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dtos/page-meta.dto.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The current page', example: 1, type: 'integer'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dtos/page-meta.dto.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        pageCount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The number of pages in the collection', example: 10, type: 'integer'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dtos/page-meta.dto.ts:31\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { PageMetaParameters } from \"./page-meta-parameters.dto\";\n\nexport class PageMetaDto {\n  @ApiProperty({\n    description: \"The current page\",\n    example: 1,\n    type: \"integer\",\n  })\n  readonly page: number;\n\n  @ApiProperty({\n    description: \"The number of items per page\",\n    example: 10,\n    type: \"integer\",\n  })\n  readonly limit: number;\n\n  @ApiProperty({\n    description: \"The number of items in the collection\",\n    example: 100,\n    type: \"integer\",\n  })\n  readonly itemCount: number;\n\n  @ApiProperty({\n    description: \"The number of pages in the collection\",\n    example: 10,\n    type: \"integer\",\n  })\n  readonly pageCount: number;\n\n  @ApiProperty({\n    description: \"Flag indicating if there is a previous page\",\n    example: false,\n  })\n  readonly hasPreviousPage: boolean;\n\n  @ApiProperty({\n    description: \"Flag indicating if there is a next page\",\n    example: true,\n  })\n  readonly hasNextPage: boolean;\n\n  constructor({ pageOptionsDto, itemCount }: PageMetaParameters) {\n    this.page = pageOptionsDto.page ?? 1;\n    this.limit = pageOptionsDto.limit ?? 10;\n    this.itemCount = itemCount;\n    this.pageCount = Math.ceil(this.itemCount / this.limit);\n    this.hasPreviousPage = this.page > 1;\n    this.hasNextPage = this.page \n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/PageMetaParameters.html":{"url":"interfaces/PageMetaParameters.html","title":"interface - PageMetaParameters","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  PageMetaParameters\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/dtos/page-meta-parameters.dto.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            itemCount\n                                        \n                                \n                                \n                                        \n                                            pageOptionsDto\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        itemCount\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        itemCount:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        pageOptionsDto\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        pageOptionsDto:         PageOptionsDto\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         PageOptionsDto\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { PageOptionsDto } from \"./page-options.dto\";\n\nexport interface PageMetaParameters {\n  pageOptionsDto: PageOptionsDto;\n  itemCount: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PageOptionsDto.html":{"url":"classes/PageOptionsDto.html","title":"class - PageOptionsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PageOptionsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/dtos/page-options.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                    Optional\n                                limit\n                            \n                            \n                                    Readonly\n                                    Optional\n                                orderDirection\n                            \n                            \n                                    Readonly\n                                    Optional\n                                page\n                            \n                            \n                                    Readonly\n                                    Optional\n                                prev_days_start_date\n                            \n                            \n                                    Readonly\n                                    Optional\n                                range\n                            \n                        \n                    \n                \n\n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    skip\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 50\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, maximum: 1000, default: 10, type: 'integer'})@Type(undefined)@IsInt()@Min(1)@Max(10000)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dtos/page-options.dto.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        orderDirection\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OrderDirectionEnum\n\n                    \n                \n                \n                    \n                        Default value : OrderDirectionEnum.DESC\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: OrderDirectionEnum, enumName: 'OrderDirectionEnum', default: undefined})@IsEnum(OrderDirectionEnum)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dtos/page-options.dto.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, default: 1, type: 'integer'})@Type(undefined)@IsInt()@Min(1)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dtos/page-options.dto.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        prev_days_start_date\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 0\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Number of days in the past to start range block', default: 0, type: 'integer'})@Type(undefined)@IsIn(['0', '7', '30', '90'])@IsInt()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dtos/page-options.dto.ts:57\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        range\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 30\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Range in days', default: 30, type: 'integer'})@Type(undefined)@IsIn(['7', '30', '90'])@IsInt()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dtos/page-options.dto.ts:46\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        skip\n                    \n                \n\n                \n                    \n                        getskip()\n                    \n                \n                            \n                                \n                                    Defined in src/common/dtos/page-options.dto.ts:59\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { ApiPropertyOptional } from \"@nestjs/swagger\";\nimport { Type } from \"class-transformer\";\nimport { IsEnum, IsIn, IsInt, IsOptional, Max, Min } from \"class-validator\";\n\nimport { OrderDirectionEnum } from \"../constants/order-direction.constant\";\n\nexport class PageOptionsDto {\n  @ApiPropertyOptional({\n    minimum: 1,\n    default: 1,\n    type: \"integer\",\n  })\n  @Type(() => Number)\n  @IsInt()\n  @Min(1)\n  @IsOptional()\n  readonly page?: number = 1;\n\n  @ApiPropertyOptional({\n    minimum: 1,\n    maximum: 1000,\n    default: 10,\n    type: \"integer\",\n  })\n  @Type(() => Number)\n  @IsInt()\n  @Min(1)\n  @Max(10000)\n  @IsOptional()\n  readonly limit?: number = 50;\n\n  @ApiPropertyOptional({ enum: OrderDirectionEnum, enumName: \"OrderDirectionEnum\", default: OrderDirectionEnum.DESC })\n  @IsEnum(OrderDirectionEnum)\n  @IsOptional()\n  readonly orderDirection?: OrderDirectionEnum = OrderDirectionEnum.DESC;\n\n  @ApiPropertyOptional({\n    description: \"Range in days\",\n    default: 30,\n    type: \"integer\",\n  })\n  @Type(() => Number)\n  @IsIn([7, 30, 90])\n  @IsInt()\n  @IsOptional()\n  readonly range?: number = 30;\n\n  @ApiPropertyOptional({\n    description: \"Number of days in the past to start range block\",\n    default: 0,\n    type: \"integer\",\n  })\n  @Type(() => Number)\n  @IsIn([0, 7, 30, 90])\n  @IsInt()\n  @IsOptional()\n  readonly prev_days_start_date?: number = 0;\n\n  get skip(): number {\n    return ((this.page ?? 1) - 1) * (this.limit ?? 50);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PagerService.html":{"url":"injectables/PagerService.html","title":"injectable - PagerService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PagerService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/services/pager.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                applyPagination\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        applyPagination\n                        \n                    \n                \n            \n            \n                \n                    \n                    applyPagination(undefined: PaginationInput)\n                \n            \n\n\n            \n                \n                    Defined in src/common/services/pager.service.ts:16\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        Entity\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                PaginationInput\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { SelectQueryBuilder } from \"typeorm/query-builder/SelectQueryBuilder\";\nimport { ObjectLiteral } from \"typeorm\";\n\nimport { PageMetaDto } from \"../dtos/page-meta.dto\";\nimport { PageDto } from \"../dtos/page.dto\";\nimport { PageOptionsDto } from \"../dtos/page-options.dto\";\n\ninterface PaginationInput {\n  queryBuilder: SelectQueryBuilder;\n  pageOptionsDto: PageOptionsDto;\n}\n\n@Injectable()\nexport class PagerService {\n  async applyPagination({ queryBuilder, pageOptionsDto }: PaginationInput) {\n    queryBuilder.offset(pageOptionsDto.skip).limit(pageOptionsDto.limit);\n\n    const [itemCount, entities] = await Promise.all([queryBuilder.getCount(), queryBuilder.getMany()]);\n\n    const pageMetaDto = new PageMetaDto({ itemCount, pageOptionsDto });\n\n    return new PageDto(entities, pageMetaDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/PaginationInput.html":{"url":"interfaces/PaginationInput.html","title":"interface - PaginationInput","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  PaginationInput\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/services/pager.service.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            pageOptionsDto\n                                        \n                                \n                                \n                                        \n                                            queryBuilder\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        pageOptionsDto\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        pageOptionsDto:         PageOptionsDto\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         PageOptionsDto\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        queryBuilder\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        queryBuilder:     SelectQueryBuilder\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     SelectQueryBuilder\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { SelectQueryBuilder } from \"typeorm/query-builder/SelectQueryBuilder\";\nimport { ObjectLiteral } from \"typeorm\";\n\nimport { PageMetaDto } from \"../dtos/page-meta.dto\";\nimport { PageDto } from \"../dtos/page.dto\";\nimport { PageOptionsDto } from \"../dtos/page-options.dto\";\n\ninterface PaginationInput {\n  queryBuilder: SelectQueryBuilder;\n  pageOptionsDto: PageOptionsDto;\n}\n\n@Injectable()\nexport class PagerService {\n  async applyPagination({ queryBuilder, pageOptionsDto }: PaginationInput) {\n    queryBuilder.offset(pageOptionsDto.skip).limit(pageOptionsDto.limit);\n\n    const [itemCount, entities] = await Promise.all([queryBuilder.getCount(), queryBuilder.getMany()]);\n\n    const pageMetaDto = new PageMetaDto({ itemCount, pageOptionsDto });\n\n    return new PageDto(entities, pageMetaDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/PizzaOvenController.html":{"url":"controllers/PizzaOvenController.html","title":"controller - PizzaOvenController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  PizzaOvenController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/pizza/pizza-oven.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                bake\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                findBakedRepoById\n                            \n                            \n                                    Async\n                                findCommitAuthorById\n                            \n                            \n                                    Async\n                                findCommitById\n                            \n                            \n                                    Async\n                                listAllBakedRepos\n                            \n                            \n                                    Async\n                                listAllCommitAuthors\n                            \n                            \n                                    Async\n                                listAllCommitsByBakedRepoId\n                            \n                            \n                                    Async\n                                listAllCommitsByCommitAuthorId\n                            \n                            \n                                    Async\n                                postToPizzaOvenService\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findBakedRepoById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findBakedRepoById(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('repos/:id')@ApiOperation({operationId: 'findBakedRepoById', summary: 'Finds a baked repo by :id'})@ApiOkResponse({type: DbBakedRepo})@ApiNotFoundResponse({description: 'Baked repository not found'})@ApiParam({name: 'id', type: 'integer'})\n                \n            \n\n            \n                \n                    Defined in src/pizza/pizza-oven.controller.ts:57\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findCommitAuthorById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findCommitAuthorById(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('commit-authors/:id')@ApiOperation({operationId: 'findCommitAuthorById', summary: 'Finds a commit author by :id'})@ApiOkResponse({type: DbCommitAuthors})@ApiNotFoundResponse({description: 'Commit author not found'})@ApiParam({name: 'id', type: 'integer'})\n                \n            \n\n            \n                \n                    Defined in src/pizza/pizza-oven.controller.ts:80\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findCommitById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findCommitById(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('commits/:id')@ApiOperation({operationId: 'findCommitById', summary: 'Finds a commit by :id'})@ApiOkResponse({type: DbCommits})@ApiNotFoundResponse({description: 'Commit not found'})@ApiParam({name: 'id', type: 'integer'})\n                \n            \n\n            \n                \n                    Defined in src/pizza/pizza-oven.controller.ts:103\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        listAllBakedRepos\n                        \n                    \n                \n            \n            \n                \n                    \n                    listAllBakedRepos(pageOptionsDto: PageOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/repos/list')@ApiOperation({operationId: 'listAllBakedRepos', summary: 'Finds all baked repos and paginates them'})@ApiPaginatedResponse(DbBakedRepo)@ApiOkResponse({type: DbBakedRepo})\n                \n            \n\n            \n                \n                    Defined in src/pizza/pizza-oven.controller.ts:68\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        listAllCommitAuthors\n                        \n                    \n                \n            \n            \n                \n                    \n                    listAllCommitAuthors(pageOptionsDto: PageOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/commit-authors/list')@ApiOperation({operationId: 'listAllCommitAuthors', summary: 'Finds all commit authors and paginates them'})@ApiPaginatedResponse(DbCommitAuthors)@ApiOkResponse({type: DbCommitAuthors})\n                \n            \n\n            \n                \n                    Defined in src/pizza/pizza-oven.controller.ts:91\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        listAllCommitsByBakedRepoId\n                        \n                    \n                \n            \n            \n                \n                    \n                    listAllCommitsByBakedRepoId(pageOptionsDto: PageOptionsDto, id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/commits/list/repo/:id')@ApiOperation({operationId: 'listAllCommitsByBakedRepoId', summary: 'Finds all commits by baked repo :id and paginates them'})@ApiPaginatedResponse(DbCommits)@ApiOkResponse({type: DbCommits})@ApiParam({name: 'id', type: 'integer'})\n                \n            \n\n            \n                \n                    Defined in src/pizza/pizza-oven.controller.ts:115\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        listAllCommitsByCommitAuthorId\n                        \n                    \n                \n            \n            \n                \n                    \n                    listAllCommitsByCommitAuthorId(pageOptionsDto: PageOptionsDto, id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/commits/list/commit-author/:id')@ApiOperation({operationId: 'listAllCommitsByCommitAuthorId', summary: 'Finds all commits by commit author :id and paginates them'})@ApiPaginatedResponse(DbCommits)@ApiOkResponse({type: DbCommits})@ApiParam({name: 'id', type: 'integer'})\n                \n            \n\n            \n                \n                    Defined in src/pizza/pizza-oven.controller.ts:130\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        postToPizzaOvenService\n                        \n                    \n                \n            \n            \n                \n                    \n                    postToPizzaOvenService(bakeOptionsInfo: BakeRepoDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/')@ApiOperation({operationId: 'Bake a repository with the pizza oven microservice', summary: 'postToPizzaOvenService'})@ApiAcceptedResponse()@ApiBadRequestResponse({description: 'Invalid request'})@ApiBody({type: BakeRepoDto})\n                \n            \n\n            \n                \n                    Defined in src/pizza/pizza-oven.controller.ts:41\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    bakeOptionsInfo\n                                    \n                                                BakeRepoDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { BadRequestException, Body, Controller, Get, Param, ParseIntPipe, Post, Query } from \"@nestjs/common\";\nimport {\n  ApiAcceptedResponse,\n  ApiBadRequestResponse,\n  ApiBody,\n  ApiNotFoundResponse,\n  ApiOkResponse,\n  ApiOperation,\n  ApiParam,\n  ApiTags,\n} from \"@nestjs/swagger\";\n\nimport { ApiPaginatedResponse } from \"../common/decorators/api-paginated-response.decorator\";\nimport { PageOptionsDto } from \"../common/dtos/page-options.dto\";\nimport { PageDto } from \"../common/dtos/page.dto\";\nimport { BakeRepoDto } from \"./dtos/baked-repo.dto\";\nimport { PizzaOvenService } from \"./pizza-oven.service\";\nimport { DbBakedRepo } from \"./entities/baked-repo.entity\";\nimport { DbCommitAuthors } from \"./entities/commit_authors.entity\";\nimport { CommitAuthorsService } from \"./commit-authors.service\";\nimport { CommitsService } from \"./commits.service\";\nimport { DbCommits } from \"./entities/commits.entity\";\n\n@Controller(\"bake\")\n@ApiTags(\"Pizza oven service\")\nexport class PizzaOvenController {\n  constructor(\n    private readonly pizzaOvenService: PizzaOvenService,\n    private readonly commitAuthorService: CommitAuthorsService,\n    private readonly commitsService: CommitsService\n  ) {}\n\n  @Post(\"/\")\n  @ApiOperation({\n    operationId: \"Bake a repository with the pizza oven microservice\",\n    summary: \"postToPizzaOvenService\",\n  })\n  @ApiAcceptedResponse()\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  @ApiBody({ type: BakeRepoDto })\n  async postToPizzaOvenService(@Body() bakeOptionsInfo: BakeRepoDto) {\n    const statusCode = await this.pizzaOvenService.postToPizzaOvenService(bakeOptionsInfo);\n\n    if (statusCode !== 202) {\n      throw new BadRequestException();\n    }\n  }\n\n  @Get(\"repos/:id\")\n  @ApiOperation({\n    operationId: \"findBakedRepoById\",\n    summary: \"Finds a baked repo by :id\",\n  })\n  @ApiOkResponse({ type: DbBakedRepo })\n  @ApiNotFoundResponse({ description: \"Baked repository not found\" })\n  @ApiParam({ name: \"id\", type: \"integer\" })\n  async findBakedRepoById(@Param(\"id\", ParseIntPipe) id: number): Promise {\n    return this.pizzaOvenService.findBakedRepoById(id);\n  }\n\n  @Get(\"/repos/list\")\n  @ApiOperation({\n    operationId: \"listAllBakedRepos\",\n    summary: \"Finds all baked repos and paginates them\",\n  })\n  @ApiPaginatedResponse(DbBakedRepo)\n  @ApiOkResponse({ type: DbBakedRepo })\n  async listAllBakedRepos(@Query() pageOptionsDto: PageOptionsDto): Promise> {\n    return this.pizzaOvenService.findAllBakedRepos(pageOptionsDto);\n  }\n\n  @Get(\"commit-authors/:id\")\n  @ApiOperation({\n    operationId: \"findCommitAuthorById\",\n    summary: \"Finds a commit author by :id\",\n  })\n  @ApiOkResponse({ type: DbCommitAuthors })\n  @ApiNotFoundResponse({ description: \"Commit author not found\" })\n  @ApiParam({ name: \"id\", type: \"integer\" })\n  async findCommitAuthorById(@Param(\"id\", ParseIntPipe) id: number): Promise {\n    return this.commitAuthorService.findCommitAuthorById(id);\n  }\n\n  @Get(\"/commit-authors/list\")\n  @ApiOperation({\n    operationId: \"listAllCommitAuthors\",\n    summary: \"Finds all commit authors and paginates them\",\n  })\n  @ApiPaginatedResponse(DbCommitAuthors)\n  @ApiOkResponse({ type: DbCommitAuthors })\n  async listAllCommitAuthors(@Query() pageOptionsDto: PageOptionsDto): Promise> {\n    return this.commitAuthorService.findAllCommitAuthors(pageOptionsDto);\n  }\n\n  @Get(\"commits/:id\")\n  @ApiOperation({\n    operationId: \"findCommitById\",\n    summary: \"Finds a commit by :id\",\n  })\n  @ApiOkResponse({ type: DbCommits })\n  @ApiNotFoundResponse({ description: \"Commit not found\" })\n  @ApiParam({ name: \"id\", type: \"integer\" })\n  async findCommitById(@Param(\"id\", ParseIntPipe) id: number): Promise {\n    return this.commitsService.findCommitById(id);\n  }\n\n  @Get(\"/commits/list/repo/:id\")\n  @ApiOperation({\n    operationId: \"listAllCommitsByBakedRepoId\",\n    summary: \"Finds all commits by baked repo :id and paginates them\",\n  })\n  @ApiPaginatedResponse(DbCommits)\n  @ApiOkResponse({ type: DbCommits })\n  @ApiParam({ name: \"id\", type: \"integer\" })\n  async listAllCommitsByBakedRepoId(\n    @Query() pageOptionsDto: PageOptionsDto,\n    @Param(\"id\", ParseIntPipe) id: number\n  ): Promise> {\n    return this.commitsService.findAllCommitsByBakedRepoId(pageOptionsDto, id);\n  }\n\n  @Get(\"/commits/list/commit-author/:id\")\n  @ApiOperation({\n    operationId: \"listAllCommitsByCommitAuthorId\",\n    summary: \"Finds all commits by commit author :id and paginates them\",\n  })\n  @ApiPaginatedResponse(DbCommits)\n  @ApiOkResponse({ type: DbCommits })\n  @ApiParam({ name: \"id\", type: \"integer\" })\n  async listAllCommitsByCommitAuthorId(\n    @Query() pageOptionsDto: PageOptionsDto,\n    @Param(\"id\", ParseIntPipe) id: number\n  ): Promise> {\n    return this.commitsService.findAllCommitsByCommitAuthorId(pageOptionsDto, id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PizzaOvenModule.html":{"url":"modules/PizzaOvenModule.html","title":"module - PizzaOvenModule","body":"\n                   \n\n\n\n\n    Modules\n    PizzaOvenModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_PizzaOvenModule\n\n\n\ncluster_PizzaOvenModule_providers\n\n\n\ncluster_PizzaOvenModule_exports\n\n\n\ncluster_PizzaOvenModule_imports\n\n\n\n\nApiServicesModule\n\nApiServicesModule\n\n\n\nPizzaOvenModule\n\nPizzaOvenModule\n\nPizzaOvenModule -->\n\nApiServicesModule->PizzaOvenModule\n\n\n\n\n\nCommitAuthorsService \n\nCommitAuthorsService \n\nCommitAuthorsService  -->\n\nPizzaOvenModule->CommitAuthorsService \n\n\n\n\n\nCommitsService \n\nCommitsService \n\nCommitsService  -->\n\nPizzaOvenModule->CommitsService \n\n\n\n\n\nPizzaOvenService \n\nPizzaOvenService \n\nPizzaOvenService  -->\n\nPizzaOvenModule->PizzaOvenService \n\n\n\n\n\nCommitAuthorsService\n\nCommitAuthorsService\n\nPizzaOvenModule -->\n\nCommitAuthorsService->PizzaOvenModule\n\n\n\n\n\nCommitsService\n\nCommitsService\n\nPizzaOvenModule -->\n\nCommitsService->PizzaOvenModule\n\n\n\n\n\nPizzaOvenService\n\nPizzaOvenService\n\nPizzaOvenModule -->\n\nPizzaOvenService->PizzaOvenModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/pizza/pizza-oven.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CommitAuthorsService\n                        \n                        \n                            CommitsService\n                        \n                        \n                            PizzaOvenService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            PizzaOvenController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            ApiServicesModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            CommitAuthorsService\n                        \n                        \n                            CommitsService\n                        \n                        \n                            PizzaOvenService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\nimport { HttpModule } from \"@nestjs/axios\";\n\nimport { ApiServicesModule } from \"../common/services/api-services.module\";\nimport { PizzaOvenService } from \"./pizza-oven.service\";\nimport { PizzaOvenController } from \"./pizza-oven.controller\";\nimport { DbBakedRepo } from \"./entities/baked-repo.entity\";\nimport { DbCommitAuthors } from \"./entities/commit_authors.entity\";\nimport { DbCommits } from \"./entities/commits.entity\";\nimport { CommitAuthorsService } from \"./commit-authors.service\";\nimport { CommitsService } from \"./commits.service\";\n\n@Module({\n  imports: [\n    ApiServicesModule,\n    HttpModule,\n    TypeOrmModule.forFeature([DbBakedRepo, DbCommitAuthors, DbCommits], \"ApiConnection\"),\n  ],\n  controllers: [PizzaOvenController],\n  providers: [PizzaOvenService, CommitAuthorsService, CommitsService],\n  exports: [PizzaOvenService, CommitAuthorsService, CommitsService],\n})\nexport class PizzaOvenModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PizzaOvenService.html":{"url":"injectables/PizzaOvenService.html","title":"injectable - PizzaOvenService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PizzaOvenService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/pizza/pizza-oven.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                baseQueryBuilder\n                            \n                            \n                                    Async\n                                findAllBakedRepos\n                            \n                            \n                                    Async\n                                findBakedRepoById\n                            \n                            \n                                    Async\n                                postToPizzaOvenService\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(bakedRepoRepository: Repository, httpService: HttpService, configService: ConfigService, pagerService: PagerService)\n                    \n                \n                        \n                            \n                                Defined in src/pizza/pizza-oven.service.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        bakedRepoRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        httpService\n                                                  \n                                                        \n                                                                    HttpService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        pagerService\n                                                  \n                                                        \n                                                                        PagerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        baseQueryBuilder\n                        \n                    \n                \n            \n            \n                \nbaseQueryBuilder()\n                \n            \n\n\n            \n                \n                    Defined in src/pizza/pizza-oven.service.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllBakedRepos\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllBakedRepos(pageOptionsDto: PageOptionsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/pizza/pizza-oven.service.ts:56\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findBakedRepoById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findBakedRepoById(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/pizza/pizza-oven.service.ts:42\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        postToPizzaOvenService\n                        \n                    \n                \n            \n            \n                \n                    \n                    postToPizzaOvenService(bakeRepoInfo: BakeRepoDto)\n                \n            \n\n\n            \n                \n                    Defined in src/pizza/pizza-oven.service.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    bakeRepoInfo\n                                    \n                                                BakeRepoDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from \"@nestjs/common\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { lastValueFrom, map } from \"rxjs\";\nimport { HttpService } from \"@nestjs/axios\";\nimport { Repository } from \"typeorm\";\nimport { ConfigService } from \"@nestjs/config\";\n\nimport { PageOptionsDto } from \"../common/dtos/page-options.dto\";\nimport { PageDto } from \"../common/dtos/page.dto\";\nimport { PagerService } from \"../common/services/pager.service\";\nimport { BakeRepoDto } from \"./dtos/baked-repo.dto\";\nimport { DbBakedRepo } from \"./entities/baked-repo.entity\";\n\n@Injectable()\nexport class PizzaOvenService {\n  constructor(\n    @InjectRepository(DbBakedRepo, \"ApiConnection\")\n    private bakedRepoRepository: Repository,\n    private readonly httpService: HttpService,\n    private configService: ConfigService,\n    private pagerService: PagerService\n  ) {}\n\n  baseQueryBuilder() {\n    const builder = this.bakedRepoRepository.createQueryBuilder(\"baked_repos\");\n\n    return builder;\n  }\n\n  async postToPizzaOvenService(bakeRepoInfo: BakeRepoDto): Promise {\n    const data = {\n      url: bakeRepoInfo.url,\n      wait: bakeRepoInfo.wait,\n    };\n\n    const host: string = this.configService.get(\"pizza.host\")!;\n    const port: string = this.configService.get(\"pizza.port\")!;\n\n    return lastValueFrom(this.httpService.post(`${host}:${port}/bake`, data).pipe(map((resp) => resp.status)));\n  }\n\n  async findBakedRepoById(id: number): Promise {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder.where(\"id = :id\", { id });\n\n    const item = await queryBuilder.getOne();\n\n    if (!item) {\n      throw new NotFoundException();\n    }\n\n    return item;\n  }\n\n  async findAllBakedRepos(pageOptionsDto: PageOptionsDto): Promise> {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder.offset(pageOptionsDto.skip).limit(pageOptionsDto.limit);\n\n    return this.pagerService.applyPagination({\n      pageOptionsDto,\n      queryBuilder,\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PullRequestContributorInsightsDto.html":{"url":"classes/PullRequestContributorInsightsDto.html","title":"class - PullRequestContributorInsightsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PullRequestContributorInsightsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/pull-requests/dtos/pull-request-contributor-insights.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PageOptionsDto\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                limit\n                            \n                            \n                                    Readonly\n                                    Optional\n                                repoIds\n                            \n                            \n                                    Readonly\n                                    Optional\n                                orderDirection\n                            \n                            \n                                    Readonly\n                                    Optional\n                                page\n                            \n                            \n                                    Readonly\n                                    Optional\n                                prev_days_start_date\n                            \n                            \n                                    Readonly\n                                    Optional\n                                range\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 50\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, maximum: 1000, default: 10, type: 'integer'})@Type(undefined)@IsInt()@Min(1)@Max(10000)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:24\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        repoIds\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional()@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/dtos/pull-request-contributor-insights.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        orderDirection\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OrderDirectionEnum\n\n                    \n                \n                \n                    \n                        Default value : OrderDirectionEnum.DESC\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: OrderDirectionEnum, enumName: 'OrderDirectionEnum', default: undefined})@IsEnum(OrderDirectionEnum)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:35\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, default: 1, type: 'integer'})@Type(undefined)@IsInt()@Min(1)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:17\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        prev_days_start_date\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 0\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Number of days in the past to start range block', default: 0, type: 'integer'})@Type(undefined)@IsIn(['0', '7', '30', '90'])@IsInt()@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:57\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        range\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 30\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Range in days', default: 30, type: 'integer'})@Type(undefined)@IsIn(['7', '30', '90'])@IsInt()@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:46\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiPropertyOptional } from \"@nestjs/swagger\";\nimport { IsInt, IsOptional, IsString, Max, Min } from \"class-validator\";\nimport { Type } from \"class-transformer\";\n\nimport { PageOptionsDto } from \"../../common/dtos/page-options.dto\";\n\nexport class PullRequestContributorInsightsDto extends PageOptionsDto {\n  @ApiPropertyOptional()\n  @IsString()\n  @IsOptional()\n  readonly repoIds?: string;\n\n  @ApiPropertyOptional({\n    minimum: 1,\n    maximum: 1000,\n    default: 10,\n    type: \"integer\",\n  })\n  @Type(() => Number)\n  @IsInt()\n  @Min(1)\n  @Max(10000)\n  @IsOptional()\n  limit?: number = 50;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PullRequestContributorOptionsDto.html":{"url":"classes/PullRequestContributorOptionsDto.html","title":"class - PullRequestContributorOptionsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PullRequestContributorOptionsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/pull-requests/dtos/pull-request-contributor-options.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PageOptionsDto\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                    Optional\n                                filter\n                            \n                            \n                                    Readonly\n                                    Optional\n                                repo\n                            \n                            \n                                    Readonly\n                                    Optional\n                                repoIds\n                            \n                            \n                                    Readonly\n                                    Optional\n                                topic\n                            \n                            \n                                    Readonly\n                                    Optional\n                                limit\n                            \n                            \n                                    Readonly\n                                    Optional\n                                orderDirection\n                            \n                            \n                                    Readonly\n                                    Optional\n                                page\n                            \n                            \n                                    Readonly\n                                    Optional\n                                prev_days_start_date\n                            \n                            \n                                    Readonly\n                                    Optional\n                                range\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        filter\n                        \n                    \n                \n            \n                \n                    \n                        Type :         InsightFilterFieldsEnum\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: InsightFilterFieldsEnum, enumName: 'InsightFilterFieldsEnum'})@IsEnum(InsightFilterFieldsEnum)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/dtos/pull-request-contributor-options.dto.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        repo\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: 'string', example: 'open-sauced/insights'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/dtos/pull-request-contributor-options.dto.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        repoIds\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional()@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/dtos/pull-request-contributor-options.dto.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        topic\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: 'string', example: 'javascript'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/dtos/pull-request-contributor-options.dto.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 50\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, maximum: 1000, default: 10, type: 'integer'})@Type(undefined)@IsInt()@Min(1)@Max(10000)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:30\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        orderDirection\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OrderDirectionEnum\n\n                    \n                \n                \n                    \n                        Default value : OrderDirectionEnum.DESC\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: OrderDirectionEnum, enumName: 'OrderDirectionEnum', default: undefined})@IsEnum(OrderDirectionEnum)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:35\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, default: 1, type: 'integer'})@Type(undefined)@IsInt()@Min(1)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:17\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        prev_days_start_date\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 0\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Number of days in the past to start range block', default: 0, type: 'integer'})@Type(undefined)@IsIn(['0', '7', '30', '90'])@IsInt()@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:57\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        range\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 30\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Range in days', default: 30, type: 'integer'})@Type(undefined)@IsIn(['7', '30', '90'])@IsInt()@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:46\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiPropertyOptional } from \"@nestjs/swagger\";\nimport { IsEnum, IsOptional, IsString } from \"class-validator\";\n\nimport { PageOptionsDto } from \"../../common/dtos/page-options.dto\";\nimport { InsightFilterFieldsEnum } from \"../../insight/dtos/insight-options.dto\";\n\nexport class PullRequestContributorOptionsDto extends PageOptionsDto {\n  @ApiPropertyOptional({\n    enum: InsightFilterFieldsEnum,\n    enumName: \"InsightFilterFieldsEnum\",\n  })\n  @IsEnum(InsightFilterFieldsEnum)\n  @IsOptional()\n  readonly filter?: InsightFilterFieldsEnum;\n\n  @ApiPropertyOptional({\n    type: \"string\",\n    example: \"javascript\",\n  })\n  @IsString()\n  @IsOptional()\n  readonly topic?: string;\n\n  @ApiPropertyOptional({\n    type: \"string\",\n    example: \"open-sauced/insights\",\n  })\n  @IsString()\n  @IsOptional()\n  readonly repo?: string;\n\n  @ApiPropertyOptional()\n  @IsString()\n  @IsOptional()\n  readonly repoIds?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/PullRequestController.html":{"url":"controllers/PullRequestController.html","title":"controller - PullRequestController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  PullRequestController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/pull-requests/pull-request.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                prs\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getPullRequestInsights\n                            \n                            \n                                    Async\n                                getPullRequestReviews\n                            \n                            \n                                    Async\n                                listAllPullRequests\n                            \n                            \n                                    Async\n                                searchAllPullRequests\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getPullRequestInsights\n                        \n                    \n                \n            \n            \n                \n                    \n                    getPullRequestInsights(pageOptionsDto: FilterOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/insights')@ApiOperation({operationId: 'getPullRequestInsights', summary: 'Find pull request insights over the last 2 months'})@ApiOkResponse({type: undefined})\n                \n            \n\n            \n                \n                    Defined in src/pull-requests/pull-request.controller.ts:53\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                FilterOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getPullRequestReviews\n                        \n                    \n                \n            \n            \n                \n                    \n                    getPullRequestReviews(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:id/reviews')@ApiOperation({operationId: 'getPullRequestReviews', summary: 'Find all pull request reviews by pull request ID'})@ApiOkResponse({type: undefined})@ApiParam({name: 'id', type: 'string'})\n                \n            \n\n            \n                \n                    Defined in src/pull-requests/pull-request.controller.ts:66\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        listAllPullRequests\n                        \n                    \n                \n            \n            \n                \n                    \n                    listAllPullRequests(pageOptionsDto: PageOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/list')@ApiOperation({operationId: 'listAllPullRequests', summary: 'Finds all pull requests and paginates them'})@ApiPaginatedResponse(DbPullRequest)@ApiOkResponse({type: DbPullRequest})\n                \n            \n\n            \n                \n                    Defined in src/pull-requests/pull-request.controller.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        searchAllPullRequests\n                        \n                    \n                \n            \n            \n                \n                    \n                    searchAllPullRequests(pageOptionsDto: PullRequestPageOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/search')@ApiOperation({operationId: 'searchAllPullRequests', summary: 'Searches pull requests using filters and paginates them'})@ApiPaginatedResponse(DbPullRequest)@ApiOkResponse({type: DbPullRequest})\n                \n            \n\n            \n                \n                    Defined in src/pull-requests/pull-request.controller.ts:43\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PullRequestPageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Param, ParseIntPipe, Query } from \"@nestjs/common\";\nimport { ApiOperation, ApiOkResponse, ApiTags, ApiParam } from \"@nestjs/swagger\";\n\nimport { PageOptionsDto } from \"../common/dtos/page-options.dto\";\nimport { ApiPaginatedResponse } from \"../common/decorators/api-paginated-response.decorator\";\nimport { PageDto } from \"../common/dtos/page.dto\";\nimport { FilterOptionsDto } from \"../common/dtos/filter-options.dto\";\nimport { DbPullRequest } from \"./entities/pull-request.entity\";\nimport { PullRequestService } from \"./pull-request.service\";\nimport { PullRequestPageOptionsDto } from \"./dtos/pull-request-page-options.dto\";\nimport { PullRequestInsightsService } from \"./pull-request-insights.service\";\nimport { DbPRInsight } from \"./entities/pull-request-insight.entity\";\nimport { DbPullRequestReview } from \"./entities/pull-request-review.entity\";\nimport { PullRequestReviewService } from \"./pull-request-review.service\";\n\n@Controller(\"prs\")\n@ApiTags(\"Pull Requests service\")\nexport class PullRequestController {\n  constructor(\n    private readonly pullRequestService: PullRequestService,\n    private readonly pullRequestsInsightService: PullRequestInsightsService,\n    private readonly pullRequestReviewService: PullRequestReviewService\n  ) {}\n\n  @Get(\"/list\")\n  @ApiOperation({\n    operationId: \"listAllPullRequests\",\n    summary: \"Finds all pull requests and paginates them\",\n  })\n  @ApiPaginatedResponse(DbPullRequest)\n  @ApiOkResponse({ type: DbPullRequest })\n  async listAllPullRequests(@Query() pageOptionsDto: PageOptionsDto): Promise> {\n    return this.pullRequestService.findAll(pageOptionsDto);\n  }\n\n  @Get(\"/search\")\n  @ApiOperation({\n    operationId: \"searchAllPullRequests\",\n    summary: \"Searches pull requests using filters and paginates them\",\n  })\n  @ApiPaginatedResponse(DbPullRequest)\n  @ApiOkResponse({ type: DbPullRequest })\n  async searchAllPullRequests(@Query() pageOptionsDto: PullRequestPageOptionsDto): Promise> {\n    return this.pullRequestService.findAllWithFilters(pageOptionsDto);\n  }\n\n  @Get(\"/insights\")\n  @ApiOperation({\n    operationId: \"getPullRequestInsights\",\n    summary: \"Find pull request insights over the last 2 months\",\n  })\n  @ApiOkResponse({ type: [DbPRInsight] })\n  async getPullRequestInsights(@Query() pageOptionsDto: FilterOptionsDto): Promise {\n    return Promise.all(\n      [30, 60].map(async (interval) => this.pullRequestsInsightService.getInsight(interval, pageOptionsDto))\n    );\n  }\n\n  @Get(\"/:id/reviews\")\n  @ApiOperation({\n    operationId: \"getPullRequestReviews\",\n    summary: \"Find all pull request reviews by pull request ID\",\n  })\n  @ApiOkResponse({ type: [DbPullRequestReview] })\n  @ApiParam({ name: \"id\", type: \"string\" })\n  async getPullRequestReviews(@Param(\"id\", ParseIntPipe) id: number): Promise {\n    return this.pullRequestReviewService.findAllReviewsByPrId(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/PullRequestDescriptionController.html":{"url":"controllers/PullRequestDescriptionController.html","title":"controller - PullRequestDescriptionController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  PullRequestDescriptionController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/pull-requests/pull-request-description.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                prs\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                generatePRDescription\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        generatePRDescription\n                        \n                    \n                \n            \n            \n                \n                    \n                    generatePRDescription(generatePullRequestDescriptionDto: GeneratePullRequestDescriptionDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/description/generate')@ApiOperation({operationId: 'generatePRDescription', summary: 'Generates a PR description based on the provided information'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiBadRequestResponse({description: 'Invalid request'})@ApiBody({type: GeneratePullRequestDescriptionDto})\n                \n            \n\n            \n                \n                    Defined in src/pull-requests/pull-request-description.controller.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    generatePullRequestDescriptionDto\n                                    \n                                                GeneratePullRequestDescriptionDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { BadRequestException, Body, Controller, Post, UseGuards } from \"@nestjs/common\";\nimport { ApiOperation, ApiBearerAuth, ApiBadRequestResponse, ApiBody, ApiTags } from \"@nestjs/swagger\";\n\nimport { SupabaseGuard } from \"../auth/supabase.guard\";\nimport { GeneratePullRequestDescriptionDto } from \"./dtos/create-pull-request-description.dto\";\nimport { PullRequestDescriptionService } from \"./pull-request-description.service\";\n\n@Controller(\"prs\")\n@ApiTags(\"Pull Requests service\")\nexport class PullRequestDescriptionController {\n  constructor(private pullRequestDescriptionService: PullRequestDescriptionService) {}\n\n  @Post(\"/description/generate\")\n  @ApiOperation({\n    operationId: \"generatePRDescription\",\n    summary: \"Generates a PR description based on the provided information\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  @ApiBody({ type: GeneratePullRequestDescriptionDto })\n  async generatePRDescription(@Body() generatePullRequestDescriptionDto: GeneratePullRequestDescriptionDto) {\n    const description = await this.pullRequestDescriptionService.generateDescription(generatePullRequestDescriptionDto);\n\n    if (!description) {\n      throw new BadRequestException();\n    }\n\n    return { description };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PullRequestDescriptionService.html":{"url":"injectables/PullRequestDescriptionService.html","title":"injectable - PullRequestDescriptionService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PullRequestDescriptionService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/pull-requests/pull-request-description.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                generateDescription\n                            \n                            \n                                    Private\n                                generatePrompt\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(openAiService: OpenAiService)\n                    \n                \n                        \n                            \n                                Defined in src/pull-requests/pull-request-description.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        openAiService\n                                                  \n                                                        \n                                                                        OpenAiService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        generateDescription\n                        \n                    \n                \n            \n            \n                \n                    \n                    generateDescription(options: GeneratePullRequestDescriptionDto)\n                \n            \n\n\n            \n                \n                    Defined in src/pull-requests/pull-request-description.service.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                GeneratePullRequestDescriptionDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        generatePrompt\n                        \n                    \n                \n            \n            \n                \n                    \n                    generatePrompt(language: string, maxLength: number, tone: string)\n                \n            \n\n\n            \n                \n                    Defined in src/pull-requests/pull-request-description.service.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    language\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    maxLength\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    tone\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\n\nimport { OpenAiService } from \"../open-ai/open-ai.service\";\nimport { GeneratePullRequestDescriptionDto } from \"./dtos/create-pull-request-description.dto\";\n\n@Injectable()\nexport class PullRequestDescriptionService {\n  constructor(private openAiService: OpenAiService) {}\n\n  private generatePrompt(language: string, maxLength: number, tone: string) {\n    return [\n      `Generate an apt github PR description written in present tense and ${tone} tone for the given code diff/commit-messages with the specifications mentioned below`,\n      `Description language: ${language}`,\n      `Description must be a maximum of ${maxLength} characters.`,\n      \"Exclude anything unnecessary such as translation. Your entire response will be passed directly into a pull request description\",\n    ].join(\"\\n\");\n  }\n\n  async generateDescription(options: GeneratePullRequestDescriptionDto) {\n    const content = `${options.diff ? `Diff: ${options.diff}\\n` : \"\"}${\n      options.commitMessages ? `\\nCommit Messages: ${options.commitMessages.join(\",\")}` : \"\"\n    }`;\n\n    try {\n      const completion = this.openAiService.generateCompletion(\n        this.generatePrompt(options.language, options.descriptionLength, options.tone),\n        content,\n        options.temperature\n      );\n\n      return completion;\n    } catch (error: unknown) {\n      if (error instanceof Error) {\n        console.error(\"OpenAI error: \", error.message);\n      }\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PullRequestInsightsService.html":{"url":"injectables/PullRequestInsightsService.html","title":"injectable - PullRequestInsightsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PullRequestInsightsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/pull-requests/pull-request-insights.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                baseQueryBuilder\n                            \n                            \n                                    Async\n                                getInsight\n                            \n                            \n                                hacktoberfestPrCountFilterBuilderEnd\n                            \n                            \n                                hacktoberfestPrCountFilterBuilderStart\n                            \n                            \n                                hacktoberfestPrDateCharBuilder\n                            \n                            \n                                subQueryCountPrs\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prInsightRepository: Repository, repoFilterService: RepoFilterService, configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/pull-requests/pull-request-insights.service.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prInsightRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        repoFilterService\n                                                  \n                                                        \n                                                                        RepoFilterService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        baseQueryBuilder\n                        \n                    \n                \n            \n            \n                \nbaseQueryBuilder()\n                \n            \n\n\n            \n                \n                    Defined in src/pull-requests/pull-request-insights.service.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getInsight\n                        \n                    \n                \n            \n            \n                \n                    \n                    getInsight(interval: number, options: FilterOptionsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/pull-requests/pull-request-insights.service.ts:97\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    interval\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        0\n                                    \n\n                                \n                                \n                                    options\n                                    \n                                                FilterOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        hacktoberfestPrCountFilterBuilderEnd\n                        \n                    \n                \n            \n            \n                \nhacktoberfestPrCountFilterBuilderEnd(interval: number)\n                \n            \n\n\n            \n                \n                    Defined in src/pull-requests/pull-request-insights.service.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    interval\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        0\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        hacktoberfestPrCountFilterBuilderStart\n                        \n                    \n                \n            \n            \n                \nhacktoberfestPrCountFilterBuilderStart()\n                \n            \n\n\n            \n                \n                    Defined in src/pull-requests/pull-request-insights.service.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        hacktoberfestPrDateCharBuilder\n                        \n                    \n                \n            \n            \n                \nhacktoberfestPrDateCharBuilder(interval: number)\n                \n            \n\n\n            \n                \n                    Defined in src/pull-requests/pull-request-insights.service.ts:49\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    interval\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        0\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        subQueryCountPrs\n                        \n                    \n                \n            \n            \n                \nsubQueryCountPrs(qb: SelectQueryBuilder, type: string, interval: number, options: FilterOptionsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/pull-requests/pull-request-insights.service.ts:63\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    qb\n                                    \n                                            SelectQueryBuilder\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    type\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        \"all\"\n                                    \n\n                                \n                                \n                                    interval\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        0\n                                    \n\n                                \n                                \n                                    options\n                                    \n                                                FilterOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from \"@nestjs/common\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { ObjectLiteral, Repository, SelectQueryBuilder } from \"typeorm\";\n\nimport { ConfigService } from \"@nestjs/config\";\nimport { RepoFilterService } from \"../common/filters/repo-filter.service\";\nimport { FilterOptionsDto } from \"../common/dtos/filter-options.dto\";\nimport { GetPrevDateISOString } from \"../common/util/datetimes\";\nimport { DbPRInsight } from \"./entities/pull-request-insight.entity\";\n\n@Injectable()\nexport class PullRequestInsightsService {\n  constructor(\n    @InjectRepository(DbPRInsight, \"ApiConnection\")\n    private prInsightRepository: Repository,\n    private repoFilterService: RepoFilterService,\n    private configService: ConfigService\n  ) {}\n\n  baseQueryBuilder() {\n    return this.prInsightRepository.createQueryBuilder(\"pr\");\n  }\n\n  hacktoberfestPrCountFilterBuilderStart() {\n    const hacktoberfestYear: string = this.configService.get(\"hacktoberfest.year\")!;\n\n    /*\n     * take the date range starting from the last day of October.\n     * this ensures inclusive date range blocks for years in the past.\n     */\n    return `to_date('${hacktoberfestYear}', 'YYYY')\n            + INTERVAL '10 months'\n            - INTERVAL '1 day' >= \"pr\".\"updated_at\"`;\n  }\n\n  hacktoberfestPrCountFilterBuilderEnd(interval = 0) {\n    const hacktoberfestYear: string = this.configService.get(\"hacktoberfest.year\")!;\n\n    /*\n     * take the date range starting from the last day of October minus the range.\n     * so Oct 31st minus 30 days would be the full hacktoberfest month date range\n     */\n    return `to_date('${hacktoberfestYear}', 'YYYY')\n            + INTERVAL '10 months'\n            - INTERVAL '1 day'\n            - INTERVAL '${interval} days' (\n    qb: SelectQueryBuilder,\n    type = \"all\",\n    interval = 0,\n    options: FilterOptionsDto\n  ) {\n    const startDate = GetPrevDateISOString(options.prev_days_start_date);\n    const prQuery = this.baseQueryBuilder()\n      .select(`COALESCE(COUNT(\"pr\".\"id\"), 0)`)\n      .innerJoin(\"repos\", \"repos\", `\"pr\".\"repo_id\"=\"repos\".\"id\"`);\n\n    const filters = this.repoFilterService.getRepoFilters(options, startDate, interval);\n\n    switch (options.topic) {\n      case \"hacktoberfest\":\n        filters.push([this.hacktoberfestPrCountFilterBuilderStart(), {}]);\n        filters.push([this.hacktoberfestPrCountFilterBuilderEnd(interval), {}]);\n        break;\n\n      default:\n        filters.push([`'${startDate}'::TIMESTAMP >= \"pr\".\"updated_at\"`, {}]);\n        filters.push([`'${startDate}'::TIMESTAMP - INTERVAL '${interval} days'  {\n    const startDate = GetPrevDateISOString(options.prev_days_start_date);\n    let queryBuilder: SelectQueryBuilder;\n\n    switch (options.topic) {\n      case \"hacktoberfest\":\n        queryBuilder = this.baseQueryBuilder()\n          .select(this.hacktoberfestPrDateCharBuilder(interval), \"day\")\n          .addSelect(`${interval}::INTEGER`, \"interval\");\n        break;\n\n      default:\n        queryBuilder = this.baseQueryBuilder()\n          .select(`TO_CHAR('${startDate}'::TIMESTAMP - INTERVAL '${interval} days', 'YYYY-MM-DD')`, \"day\")\n          .addSelect(`${interval}::INTEGER`, \"interval\");\n        break;\n    }\n\n    queryBuilder.limit(1);\n\n    [\"all\", \"accepted\", \"spam\"].forEach((type) => {\n      this.subQueryCountPrs(queryBuilder, type, interval, options);\n    });\n\n    queryBuilder.setParameters({ ...options, repoIds: options.repoIds ? options.repoIds.split(\",\") : [] });\n\n    const item: DbPRInsight | undefined = await queryBuilder.getRawOne();\n\n    if (!item) {\n      throw new NotFoundException();\n    }\n\n    return item;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PullRequestModule.html":{"url":"modules/PullRequestModule.html","title":"module - PullRequestModule","body":"\n                   \n\n\n\n\n    Modules\n    PullRequestModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_PullRequestModule\n\n\n\ncluster_PullRequestModule_exports\n\n\n\ncluster_PullRequestModule_providers\n\n\n\ncluster_PullRequestModule_imports\n\n\n\n\nOpenAiModule\n\nOpenAiModule\n\n\n\nPullRequestModule\n\nPullRequestModule\n\nPullRequestModule -->\n\nOpenAiModule->PullRequestModule\n\n\n\n\n\nRepoFilterModule\n\nRepoFilterModule\n\nPullRequestModule -->\n\nRepoFilterModule->PullRequestModule\n\n\n\n\n\nPullRequestReviewService \n\nPullRequestReviewService \n\nPullRequestReviewService  -->\n\nPullRequestModule->PullRequestReviewService \n\n\n\n\n\nPullRequestService \n\nPullRequestService \n\nPullRequestService  -->\n\nPullRequestModule->PullRequestService \n\n\n\n\n\nCodeExplanationService\n\nCodeExplanationService\n\nPullRequestModule -->\n\nCodeExplanationService->PullRequestModule\n\n\n\n\n\nCodeRefactorSuggestionService\n\nCodeRefactorSuggestionService\n\nPullRequestModule -->\n\nCodeRefactorSuggestionService->PullRequestModule\n\n\n\n\n\nCodeTestSuggestionService\n\nCodeTestSuggestionService\n\nPullRequestModule -->\n\nCodeTestSuggestionService->PullRequestModule\n\n\n\n\n\nPullRequestDescriptionService\n\nPullRequestDescriptionService\n\nPullRequestModule -->\n\nPullRequestDescriptionService->PullRequestModule\n\n\n\n\n\nPullRequestInsightsService\n\nPullRequestInsightsService\n\nPullRequestModule -->\n\nPullRequestInsightsService->PullRequestModule\n\n\n\n\n\nPullRequestReviewService\n\nPullRequestReviewService\n\nPullRequestModule -->\n\nPullRequestReviewService->PullRequestModule\n\n\n\n\n\nPullRequestService\n\nPullRequestService\n\nPullRequestModule -->\n\nPullRequestService->PullRequestModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/pull-requests/pull-request.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CodeExplanationService\n                        \n                        \n                            CodeRefactorSuggestionService\n                        \n                        \n                            CodeTestSuggestionService\n                        \n                        \n                            PullRequestDescriptionService\n                        \n                        \n                            PullRequestInsightsService\n                        \n                        \n                            PullRequestReviewService\n                        \n                        \n                            PullRequestService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            PullRequestController\n                        \n                        \n                            PullRequestDescriptionController\n                        \n                        \n                            CodeRefactorSuggestionController\n                        \n                        \n                            CodeTestSuggestionController\n                        \n                        \n                            CodeExplanationController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            OpenAiModule\n                        \n                        \n                            RepoFilterModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            PullRequestReviewService\n                        \n                        \n                            PullRequestService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\n\nimport { RepoFilterModule } from \"../common/filters/repo-filter.module\";\nimport { OpenAiModule } from \"../open-ai/open-ai.module\";\nimport { DbPRInsight } from \"./entities/pull-request-insight.entity\";\nimport { DbPullRequest } from \"./entities/pull-request.entity\";\nimport { PullRequestInsightsService } from \"./pull-request-insights.service\";\nimport { PullRequestController } from \"./pull-request.controller\";\nimport { PullRequestService } from \"./pull-request.service\";\nimport { PullRequestDescriptionService } from \"./pull-request-description.service\";\nimport { PullRequestDescriptionController } from \"./pull-request-description.controller\";\nimport { CodeRefactorSuggestionController } from \"./code-refactor-suggestion.controller\";\nimport { CodeRefactorSuggestionService } from \"./code-refactor-suggestion.service\";\nimport { CodeTestSuggestionController } from \"./code-test.suggestion.controller\";\nimport { CodeExplanationService } from \"./code-explanation.service\";\nimport { CodeExplanationController } from \"./code-explanation.controller\";\nimport { CodeTestSuggestionService } from \"./code-test-suggestion.service\";\nimport { PullRequestReviewService } from \"./pull-request-review.service\";\nimport { DbPullRequestReview } from \"./entities/pull-request-review.entity\";\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([DbPullRequest, DbPRInsight, DbPullRequestReview], \"ApiConnection\"),\n    RepoFilterModule,\n    OpenAiModule,\n  ],\n  controllers: [\n    PullRequestController,\n    PullRequestDescriptionController,\n    CodeRefactorSuggestionController,\n    CodeTestSuggestionController,\n    CodeExplanationController,\n  ],\n  providers: [\n    PullRequestService,\n    PullRequestInsightsService,\n    PullRequestDescriptionService,\n    CodeRefactorSuggestionService,\n    CodeTestSuggestionService,\n    CodeExplanationService,\n    PullRequestReviewService,\n  ],\n  exports: [PullRequestService, PullRequestReviewService],\n})\nexport class PullRequestModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PullRequestPageOptionsDto.html":{"url":"classes/PullRequestPageOptionsDto.html","title":"class - PullRequestPageOptionsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PullRequestPageOptionsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/pull-requests/dtos/pull-request-page-options.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PageOptionsDto\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                    Optional\n                                contributor\n                            \n                            \n                                    Readonly\n                                    Optional\n                                filter\n                            \n                            \n                                    Readonly\n                                    Optional\n                                listId\n                            \n                            \n                                    Readonly\n                                    Optional\n                                orderBy\n                            \n                            \n                                    Readonly\n                                    Optional\n                                repo\n                            \n                            \n                                    Readonly\n                                    Optional\n                                repoIds\n                            \n                            \n                                    Readonly\n                                    Optional\n                                status\n                            \n                            \n                                    Readonly\n                                    Optional\n                                topic\n                            \n                            \n                                    Readonly\n                                    Optional\n                                limit\n                            \n                            \n                                    Readonly\n                                    Optional\n                                orderDirection\n                            \n                            \n                                    Readonly\n                                    Optional\n                                page\n                            \n                            \n                                    Readonly\n                                    Optional\n                                prev_days_start_date\n                            \n                            \n                                    Readonly\n                                    Optional\n                                range\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        contributor\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: 'string', example: 'bdougie'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/dtos/pull-request-page-options.dto.ts:72\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        filter\n                        \n                    \n                \n            \n                \n                    \n                        Type :         InsightFilterFieldsEnum\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: InsightFilterFieldsEnum, enumName: 'InsightFilterFieldsEnum'})@IsEnum(InsightFilterFieldsEnum)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/dtos/pull-request-page-options.dto.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        listId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: 'string', example: 'uuid-v4'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/dtos/pull-request-page-options.dto.ts:80\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        orderBy\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PullRequestOrderFieldsEnum\n\n                    \n                \n                \n                    \n                        Default value : PullRequestOrderFieldsEnum.updated_at\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: PullRequestOrderFieldsEnum, enumName: 'PullRequestOrderFieldsEnum', default: undefined})@IsEnum(PullRequestOrderFieldsEnum)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/dtos/pull-request-page-options.dto.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        repo\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: 'string', example: 'open-sauced/insights'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/dtos/pull-request-page-options.dto.ts:51\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        repoIds\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional()@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/dtos/pull-request-page-options.dto.ts:56\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PullRequestStatusEnum\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: PullRequestStatusEnum, enumName: 'PullRequestStatusEnum'})@IsEnum(PullRequestStatusEnum)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/dtos/pull-request-page-options.dto.ts:64\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        topic\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: 'string', example: 'javascript'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/dtos/pull-request-page-options.dto.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 50\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, maximum: 1000, default: 10, type: 'integer'})@Type(undefined)@IsInt()@Min(1)@Max(10000)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:30\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        orderDirection\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OrderDirectionEnum\n\n                    \n                \n                \n                    \n                        Default value : OrderDirectionEnum.DESC\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: OrderDirectionEnum, enumName: 'OrderDirectionEnum', default: undefined})@IsEnum(OrderDirectionEnum)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:35\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, default: 1, type: 'integer'})@Type(undefined)@IsInt()@Min(1)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:17\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        prev_days_start_date\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 0\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Number of days in the past to start range block', default: 0, type: 'integer'})@Type(undefined)@IsIn(['0', '7', '30', '90'])@IsInt()@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:57\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        range\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 30\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Range in days', default: 30, type: 'integer'})@Type(undefined)@IsIn(['7', '30', '90'])@IsInt()@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:46\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiPropertyOptional } from \"@nestjs/swagger\";\nimport { IsEnum, IsOptional, IsString } from \"class-validator\";\n\nimport { PageOptionsDto } from \"../../common/dtos/page-options.dto\";\nimport { InsightFilterFieldsEnum } from \"../../insight/dtos/insight-options.dto\";\n\nexport enum PullRequestOrderFieldsEnum {\n  created_at = \"created_at\",\n  closed_at = \"closed_at\",\n  merged_at = \"merged_at\",\n  updated_at = \"updated_at\",\n}\n\nexport enum PullRequestStatusEnum {\n  open = \"open\",\n  closed = \"closed\",\n}\n\nexport class PullRequestPageOptionsDto extends PageOptionsDto {\n  @ApiPropertyOptional({\n    enum: PullRequestOrderFieldsEnum,\n    enumName: \"PullRequestOrderFieldsEnum\",\n    default: PullRequestOrderFieldsEnum.updated_at,\n  })\n  @IsEnum(PullRequestOrderFieldsEnum)\n  @IsOptional()\n  readonly orderBy?: PullRequestOrderFieldsEnum = PullRequestOrderFieldsEnum.updated_at;\n\n  @ApiPropertyOptional({\n    enum: InsightFilterFieldsEnum,\n    enumName: \"InsightFilterFieldsEnum\",\n  })\n  @IsEnum(InsightFilterFieldsEnum)\n  @IsOptional()\n  readonly filter?: InsightFilterFieldsEnum;\n\n  @ApiPropertyOptional({\n    type: \"string\",\n    example: \"javascript\",\n  })\n  @IsString()\n  @IsOptional()\n  readonly topic?: string;\n\n  @ApiPropertyOptional({\n    type: \"string\",\n    example: \"open-sauced/insights\",\n  })\n  @IsString()\n  @IsOptional()\n  readonly repo?: string;\n\n  @ApiPropertyOptional()\n  @IsString()\n  @IsOptional()\n  readonly repoIds?: string;\n\n  @ApiPropertyOptional({\n    enum: PullRequestStatusEnum,\n    enumName: \"PullRequestStatusEnum\",\n  })\n  @IsEnum(PullRequestStatusEnum)\n  @IsOptional()\n  readonly status?: PullRequestStatusEnum;\n\n  @ApiPropertyOptional({\n    type: \"string\",\n    example: \"bdougie\",\n  })\n  @IsString()\n  @IsOptional()\n  readonly contributor?: string;\n\n  @ApiPropertyOptional({\n    type: \"string\",\n    example: \"uuid-v4\",\n  })\n  @IsString()\n  @IsOptional()\n  readonly listId?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PullRequestReviewService.html":{"url":"injectables/PullRequestReviewService.html","title":"injectable - PullRequestReviewService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PullRequestReviewService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/pull-requests/pull-request-review.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                findAllReviewsByPrId\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(pullRequestReviewRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/pull-requests/pull-request-review.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        pullRequestReviewRepository\n                                                  \n                                                        \n                                                                    Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllReviewsByPrId\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllReviewsByPrId(PrId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/pull-requests/pull-request-review.service.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    PrId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { Repository } from \"typeorm\";\nimport { DbPullRequestReview } from \"./entities/pull-request-review.entity\";\n\n@Injectable()\nexport class PullRequestReviewService {\n  constructor(\n    @InjectRepository(DbPullRequestReview, \"ApiConnection\")\n    private pullRequestReviewRepository: Repository\n  ) {}\n\n  async findAllReviewsByPrId(PrId: number): Promise {\n    return this.pullRequestReviewRepository.find({\n      where: { pullRequest: { id: PrId } },\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PullRequestService.html":{"url":"injectables/PullRequestService.html","title":"injectable - PullRequestService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PullRequestService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/pull-requests/pull-request.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                baseQueryBuilder\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findAllByContributor\n                            \n                            \n                                    Async\n                                findAllChurnContributors\n                            \n                            \n                                    Async\n                                findAllContributorsWithFilters\n                            \n                            \n                                    Async\n                                findAllRecentContributors\n                            \n                            \n                                    Async\n                                findAllRepeatContributors\n                            \n                            \n                                    Async\n                                findAllWithFilters\n                            \n                            \n                                    Async\n                                findNewContributorsInTimeRange\n                            \n                            \n                                    Private\n                                getContributorRangeQueryBuilder\n                            \n                            \n                                hacktoberfestPrFilterBuilderEnd\n                            \n                            \n                                hacktoberfestPrFilterBuilderStart\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(pullRequestRepository: Repository, filterService: RepoFilterService, configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/pull-requests/pull-request.service.ts:21\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        pullRequestRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        filterService\n                                                  \n                                                        \n                                                                        RepoFilterService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        baseQueryBuilder\n                        \n                    \n                \n            \n            \n                \nbaseQueryBuilder()\n                \n            \n\n\n            \n                \n                    Defined in src/pull-requests/pull-request.service.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll(pageOptionsDto: PageOptionsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/pull-requests/pull-request.service.ts:60\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllByContributor\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllByContributor(contributor: string, pageOptionsDto: ContributorPullRequestsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/pull-requests/pull-request.service.ts:76\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    contributor\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                ContributorPullRequestsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllChurnContributors\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllChurnContributors(pageOptionsDto: PullRequestContributorOptionsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/pull-requests/pull-request.service.ts:285\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PullRequestContributorOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllContributorsWithFilters\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllContributorsWithFilters(pageOptionsDto: PullRequestContributorOptionsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/pull-requests/pull-request.service.ts:174\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PullRequestContributorOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllRecentContributors\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllRecentContributors(pageOptionsDto: PullRequestContributorInsightsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/pull-requests/pull-request.service.ts:266\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PullRequestContributorInsightsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllRepeatContributors\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllRepeatContributors(pageOptionsDto: PullRequestContributorOptionsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/pull-requests/pull-request.service.ts:323\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PullRequestContributorOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllWithFilters\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllWithFilters(pageOptionsDto: PullRequestPageOptionsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/pull-requests/pull-request.service.ts:109\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PullRequestPageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findNewContributorsInTimeRange\n                        \n                    \n                \n            \n            \n                \n                    \n                    findNewContributorsInTimeRange(pageOptionsDto: PullRequestContributorInsightsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/pull-requests/pull-request.service.ts:228\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PullRequestContributorInsightsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        getContributorRangeQueryBuilder\n                        \n                    \n                \n            \n            \n                \n                    \n                    getContributorRangeQueryBuilder(start_date: string, start_range: number, end_range: number, repoIds: string[])\n                \n            \n\n\n            \n                \n                    Defined in src/pull-requests/pull-request.service.ts:361\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    start_date\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    start_range\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    end_range\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    repoIds\n                                    \n                                            string[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        hacktoberfestPrFilterBuilderEnd\n                        \n                    \n                \n            \n            \n                \nhacktoberfestPrFilterBuilderEnd(range: number)\n                \n            \n\n\n            \n                \n                    Defined in src/pull-requests/pull-request.service.ts:47\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    range\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        30\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        hacktoberfestPrFilterBuilderStart\n                        \n                    \n                \n            \n            \n                \nhacktoberfestPrFilterBuilderStart()\n                \n            \n\n\n            \n                \n                    Defined in src/pull-requests/pull-request.service.ts:35\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { BadRequestException, Injectable } from \"@nestjs/common\";\nimport { Repository } from \"typeorm\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\n\nimport { ConfigService } from \"@nestjs/config\";\nimport { GetPrevDateISOString } from \"../common/util/datetimes\";\nimport { PageMetaDto } from \"../common/dtos/page-meta.dto\";\nimport { PageDto } from \"../common/dtos/page.dto\";\nimport { OrderDirectionEnum } from \"../common/constants/order-direction.constant\";\nimport { PageOptionsDto } from \"../common/dtos/page-options.dto\";\nimport { RepoFilterService } from \"../common/filters/repo-filter.service\";\nimport { InsightFilterFieldsEnum } from \"../insight/dtos/insight-options.dto\";\nimport { ContributorPullRequestsDto, RangeTypeEnum } from \"../user/dtos/contributor-prs.dto\";\nimport { PullRequestPageOptionsDto } from \"./dtos/pull-request-page-options.dto\";\nimport { DbPullRequest } from \"./entities/pull-request.entity\";\nimport { DbPullRequestContributor } from \"./dtos/pull-request-contributor.dto\";\nimport { PullRequestContributorOptionsDto } from \"./dtos/pull-request-contributor-options.dto\";\nimport { PullRequestContributorInsightsDto } from \"./dtos/pull-request-contributor-insights.dto\";\n\n@Injectable()\nexport class PullRequestService {\n  constructor(\n    @InjectRepository(DbPullRequest, \"ApiConnection\")\n    private pullRequestRepository: Repository,\n    private filterService: RepoFilterService,\n    private configService: ConfigService\n  ) {}\n\n  baseQueryBuilder() {\n    const builder = this.pullRequestRepository.createQueryBuilder(\"pull_requests\");\n\n    return builder;\n  }\n\n  hacktoberfestPrFilterBuilderStart() {\n    const hacktoberfestYear: string = this.configService.get(\"hacktoberfest.year\")!;\n\n    /*\n     * take the date range starting from the last day of October.\n     * this is inclusive of previous years where the current pull_requests have \"newer\" updates\n     */\n    return `to_date('${hacktoberfestYear}', 'YYYY')\n                + INTERVAL '10 months'\n                - INTERVAL '1 day' >= \"pull_requests\".\"updated_at\"`;\n  }\n\n  hacktoberfestPrFilterBuilderEnd(range = 30) {\n    const hacktoberfestYear: string = this.configService.get(\"hacktoberfest.year\")!;\n\n    /*\n     * take the date range starting from the last day of October.\n     * so Oct 31st minus 30 days would be the full hacktoberfest month date range\n     */\n    return `to_date('${hacktoberfestYear}', 'YYYY')\n                + INTERVAL '10 months'\n                - INTERVAL '1 day'\n                - INTERVAL '${range} days' > {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .addOrderBy(`\"pull_requests\".\"updated_at\"`, OrderDirectionEnum.DESC)\n      .offset(pageOptionsDto.skip)\n      .limit(pageOptionsDto.limit);\n\n    const itemCount = await queryBuilder.getCount();\n    const entities = await queryBuilder.getMany();\n\n    const pageMetaDto = new PageMetaDto({ itemCount, pageOptionsDto });\n\n    return new PageDto(entities, pageMetaDto);\n  }\n\n  async findAllByContributor(\n    contributor: string,\n    pageOptionsDto: ContributorPullRequestsDto\n  ): Promise> {\n    const queryBuilder = this.baseQueryBuilder();\n    const startDate = GetPrevDateISOString(pageOptionsDto.prev_days_start_date);\n    const range = pageOptionsDto.range!;\n\n    queryBuilder\n      .innerJoin(\"repos\", \"repos\", `\"pull_requests\".\"repo_id\"=\"repos\".\"id\"`)\n      .addSelect(\"repos.full_name\", \"pull_requests_full_name\")\n      .addSelect(\"repos.id\", \"pull_requests_repo_id\")\n      .where(`LOWER(\"pull_requests\".\"author_login\")=:contributor`, { contributor: contributor.toLowerCase() });\n\n    if (pageOptionsDto.rangeType === RangeTypeEnum.Recent) {\n      queryBuilder\n        .andWhere(`'${startDate}'::TIMESTAMP >= \"pull_requests\".\"updated_at\"`)\n        .andWhere(`'${startDate}'::TIMESTAMP - INTERVAL '${range} days' > {\n    const queryBuilder = this.baseQueryBuilder();\n    const startDate = GetPrevDateISOString(pageOptionsDto.prev_days_start_date);\n    const range = pageOptionsDto.range!;\n\n    queryBuilder\n      .innerJoin(\"repos\", \"repos\", `\"pull_requests\".\"repo_id\"=\"repos\".\"id\"`)\n      .addSelect(\"repos.full_name\", \"pull_requests_full_name\")\n      .addSelect(\"repos.id\", \"pull_requests_repo_id\");\n\n    const filters = this.filterService.getRepoFilters(pageOptionsDto, startDate, range);\n\n    switch (pageOptionsDto.topic) {\n      case \"hacktoberfest\":\n        filters.push([this.hacktoberfestPrFilterBuilderStart(), {}]);\n        filters.push([this.hacktoberfestPrFilterBuilderEnd(range), {}]);\n        break;\n      default:\n        filters.push([`'${startDate}'::TIMESTAMP >= \"pull_requests\".\"updated_at\"`, {}]);\n        filters.push([`'${startDate}'::TIMESTAMP - INTERVAL '${range} days' > {\n    const queryBuilder = this.pullRequestRepository.manager.createQueryBuilder();\n    const startDate = GetPrevDateISOString(pageOptionsDto.prev_days_start_date);\n    const range = pageOptionsDto.range!;\n\n    queryBuilder\n      .from(DbPullRequest, \"pull_requests\")\n      .distinct()\n      .select(\"pull_requests.author_login\", \"author_login\")\n      .addSelect(\"MAX(pull_requests.updated_at)\", \"updated_at\")\n      .addSelect(\"users.id\", \"user_id\")\n      .innerJoin(\"repos\", \"repos\", `\"pull_requests\".\"repo_id\"=\"repos\".\"id\"`)\n      .innerJoin(\"users\", \"users\", `\"pull_requests\".\"author_login\"=\"users\".\"login\"`)\n      .addGroupBy(\"author_login\")\n      .addGroupBy(\"users.id\");\n\n    const filters = this.filterService.getRepoFilters(pageOptionsDto, startDate, range);\n\n    switch (pageOptionsDto.topic) {\n      case \"hacktoberfest\":\n        filters.push([this.hacktoberfestPrFilterBuilderStart(), {}]);\n        filters.push([this.hacktoberfestPrFilterBuilderEnd(range), {}]);\n        break;\n      default:\n        filters.push([`'${startDate}'::TIMESTAMP >= \"pull_requests\".\"updated_at\"`, {}]);\n        filters.push([`'${startDate}'::TIMESTAMP - INTERVAL '${range} days' ();\n    const itemCount = parseInt(`${countQueryResult?.count ?? \"0\"}`, 10);\n\n    queryBuilder\n      .addOrderBy(`\"updated_at\"`, OrderDirectionEnum.DESC)\n      .offset(pageOptionsDto.skip)\n      .limit(pageOptionsDto.limit);\n\n    const entities: DbPullRequestContributor[] = await queryBuilder.getRawMany();\n\n    const pageMetaDto = new PageMetaDto({ itemCount, pageOptionsDto });\n\n    return new PageDto(entities, pageMetaDto);\n  }\n\n  async findNewContributorsInTimeRange(\n    pageOptionsDto: PullRequestContributorInsightsDto\n  ): Promise> {\n    const startDate = GetPrevDateISOString(pageOptionsDto.prev_days_start_date);\n    const range = pageOptionsDto.range!;\n    const repoIds = pageOptionsDto.repoIds?.split(\",\") ?? [];\n\n    const queryBuilder = this.pullRequestRepository.manager.createQueryBuilder();\n    const currentMonthQuery = this.getContributorRangeQueryBuilder(startDate, 0, range, repoIds);\n\n    queryBuilder\n      .select(\"current_month.author_login\")\n      .distinct()\n      .from(`(${currentMonthQuery.getQuery()})`, \"current_month\")\n      .leftJoin(\n        (qb) =>\n          qb\n            .select(\"author_login\")\n            .distinct()\n            .from(DbPullRequest, \"pull_requests\")\n            .innerJoin(\"repos\", \"repos\", `\"pull_requests\".\"repo_id\"=\"repos\".\"id\"`)\n            .where(`pull_requests.updated_at >= '${startDate}'::TIMESTAMP - INTERVAL '${range + range} days'`)\n            .andWhere(`pull_requests.updated_at > {\n    const startDate = GetPrevDateISOString(pageOptionsDto.prev_days_start_date);\n    const range = pageOptionsDto.range!;\n    const repoIds = pageOptionsDto.repoIds?.split(\",\") ?? [];\n\n    const queryBuilder = this.getContributorRangeQueryBuilder(startDate, 0, range, repoIds);\n    const entities: DbPullRequestContributor[] = await queryBuilder.getRawMany();\n    const itemCount = entities.length;\n\n    const pageMetaDto = new PageMetaDto({\n      itemCount,\n      pageOptionsDto: { ...pageOptionsDto, limit: itemCount, skip: 0 },\n    });\n\n    return new PageDto(entities, pageMetaDto);\n  }\n\n  async findAllChurnContributors(\n    pageOptionsDto: PullRequestContributorOptionsDto\n  ): Promise> {\n    const startDate = GetPrevDateISOString(pageOptionsDto.prev_days_start_date);\n    const range = pageOptionsDto.range!;\n    const repoIds = pageOptionsDto.repoIds?.split(\",\") ?? [];\n\n    const queryBuilder = this.pullRequestRepository.manager.createQueryBuilder();\n    const prevMonthQuery = this.getContributorRangeQueryBuilder(startDate, range, range + range, repoIds);\n\n    queryBuilder\n      .select(\"previous_month.author_login\")\n      .distinct()\n      .from(`(${prevMonthQuery.getQuery()})`, \"previous_month\")\n      .leftJoin(\n        (qb) =>\n          qb\n            .select(\"author_login\")\n            .distinct()\n            .from(DbPullRequest, \"pull_requests\")\n            .innerJoin(\"repos\", \"repos\", `\"pull_requests\".\"repo_id\"=\"repos\".\"id\"`)\n            .where(`pull_requests.updated_at >= '${startDate}'::TIMESTAMP - INTERVAL '${range} days'`)\n            .andWhere(`pull_requests.updated_at > {\n    const startDate = GetPrevDateISOString(pageOptionsDto.prev_days_start_date);\n    const range = pageOptionsDto.range!;\n    const repoIds = pageOptionsDto.repoIds?.split(\",\") ?? [];\n\n    const queryBuilder = this.pullRequestRepository.manager.createQueryBuilder();\n    const prevMonthQuery = this.getContributorRangeQueryBuilder(startDate, range, range + range, repoIds);\n\n    queryBuilder\n      .select(\"previous_month.author_login\")\n      .distinct()\n      .from(`(${prevMonthQuery.getQuery()})`, \"previous_month\")\n      .leftJoin(\n        (qb) =>\n          qb\n            .select(\"author_login\")\n            .distinct()\n            .from(DbPullRequest, \"pull_requests\")\n            .innerJoin(\"repos\", \"repos\", `\"pull_requests\".\"repo_id\"=\"repos\".\"id\"`)\n            .where(`pull_requests.updated_at >= '${startDate}'::TIMESTAMP - INTERVAL '${range} days'`)\n            .andWhere(`pull_requests.updated_at = '${start_date}'::TIMESTAMP - INTERVAL '${end_range} days'`)\n      .andWhere(`pull_requests.updated_at \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/RepoContributionsController.html":{"url":"controllers/RepoContributionsController.html","title":"controller - RepoContributionsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  RepoContributionsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/contribution/repo-contributions.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                repos\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                findAllByOwnerAndRepo\n                            \n                            \n                                    Async\n                                findAllByOwnerRepoAndContributorLogin\n                            \n                            \n                                    Async\n                                findAllByRepoId\n                            \n                            \n                                    Async\n                                findAllUserContributionsByRepoId\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllByOwnerAndRepo\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllByOwnerAndRepo(owner: string, repo: string, pageOptionsDto: ContributionPageOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:owner/:repo/contributions')@ApiOperation({operationId: 'findAllByOwnerAndRepo', summary: 'Finds a repo by :owner and :repo listing all contributions and paginating them'})@ApiPaginatedResponse(DbContribution)@ApiOkResponse({type: DbContribution})@ApiNotFoundResponse({description: 'Repo not found'})\n                \n            \n\n            \n                \n                    Defined in src/contribution/repo-contributions.controller.ts:42\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    owner\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    repo\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                ContributionPageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllByOwnerRepoAndContributorLogin\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllByOwnerRepoAndContributorLogin(owner: string, repo: string, login: string, range: number, prev_days_start_date: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:owner/:repo/:login/contributions')@ApiOperation({operationId: 'findAllByOwnerRepoAndContributorLogin', summary: 'Finds a repo by :owner and :repo listing all contributions for a given :login and paginating them'})@ApiOkResponse({type: DbRepoLoginContributions})@ApiNotFoundResponse({description: 'Repo not found'})@ApiQuery({name: 'range', type: 'integer', description: 'Range in days', required: false})@ApiQuery({name: 'prev_days_start_date', type: 'integer', description: 'Previous number of days to go back to start date range', required: false})\n                \n            \n\n            \n                \n                    Defined in src/contribution/repo-contributions.controller.ts:101\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    owner\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    repo\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    login\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    range\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        30\n                                    \n\n                                \n                                \n                                    prev_days_start_date\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        0\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllByRepoId\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllByRepoId(id: number, pageOptionsDto: ContributionPageOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:id/contributions')@ApiOperation({operationId: 'findAllByRepoId', summary: 'Find a repo by :id listing all contributions and paginating them'})@ApiPaginatedResponse(DbContribution)@ApiOkResponse({type: DbContribution})@ApiNotFoundResponse({description: 'Repo not found'})@ApiParam({name: 'id', type: 'integer'})\n                \n            \n\n            \n                \n                    Defined in src/contribution/repo-contributions.controller.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                ContributionPageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllUserContributionsByRepoId\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllUserContributionsByRepoId(owner: string, repo: string, range: number, prev_days_start_date: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:owner/:repo/contributions/contributors')@ApiOperation({operationId: 'findAllContributorsByRepoId', summary: 'Finds a repo by :owner and :repo listing all contributions by their user login'})@ApiOkResponse({type: DbRepoLoginContributions, isArray: true})@ApiNotFoundResponse({description: 'Repo not found'})@ApiQuery({name: 'range', type: 'integer', description: 'Range in days', required: false})@ApiQuery({name: 'prev_days_start_date', type: 'integer', description: 'Previous number of days to go back to start date range', required: false})\n                \n            \n\n            \n                \n                    Defined in src/contribution/repo-contributions.controller.ts:71\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    owner\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    repo\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    range\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        30\n                                    \n\n                                \n                                \n                                    prev_days_start_date\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        0\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Param, ParseIntPipe, Query } from \"@nestjs/common\";\nimport { ApiNotFoundResponse, ApiOkResponse, ApiOperation, ApiParam, ApiQuery, ApiTags } from \"@nestjs/swagger\";\nimport { RepoService } from \"../repo/repo.service\";\nimport { ApiPaginatedResponse } from \"../common/decorators/api-paginated-response.decorator\";\nimport { PageDto } from \"../common/dtos/page.dto\";\nimport { ContributionService } from \"./contribution.service\";\nimport { DbContribution } from \"./contribution.entity\";\nimport { ContributionPageOptionsDto } from \"./dtos/contribution-page-options.dto\";\nimport { DbRepoLoginContributions } from \"./entities/repo-user-contributions.entity\";\n\n@Controller(\"repos\")\n@ApiTags(\"Repository service\", \"Contribution service\")\nexport class RepoContributionsController {\n  constructor(private readonly repoService: RepoService, private readonly contributionService: ContributionService) {}\n\n  @Get(\"/:id/contributions\")\n  @ApiOperation({\n    operationId: \"findAllByRepoId\",\n    summary: \"Find a repo by :id listing all contributions and paginating them\",\n  })\n  @ApiPaginatedResponse(DbContribution)\n  @ApiOkResponse({ type: DbContribution })\n  @ApiNotFoundResponse({ description: \"Repo not found\" })\n  @ApiParam({ name: \"id\", type: \"integer\" })\n  async findAllByRepoId(\n    @Param(\"id\", ParseIntPipe) id: number,\n    @Query() pageOptionsDto: ContributionPageOptionsDto\n  ): Promise> {\n    const item = await this.repoService.findOneById(id);\n\n    return this.contributionService.findAll(pageOptionsDto, item.id);\n  }\n\n  @Get(\"/:owner/:repo/contributions\")\n  @ApiOperation({\n    operationId: \"findAllByOwnerAndRepo\",\n    summary: \"Finds a repo by :owner and :repo listing all contributions and paginating them\",\n  })\n  @ApiPaginatedResponse(DbContribution)\n  @ApiOkResponse({ type: DbContribution })\n  @ApiNotFoundResponse({ description: \"Repo not found\" })\n  async findAllByOwnerAndRepo(\n    @Param(\"owner\") owner: string,\n    @Param(\"repo\") repo: string,\n    @Query() pageOptionsDto: ContributionPageOptionsDto\n  ): Promise> {\n    const item = await this.repoService.findOneByOwnerAndRepo(owner, repo);\n\n    return this.contributionService.findAll(pageOptionsDto, item.id);\n  }\n\n  @Get(\"/:owner/:repo/contributions/contributors\")\n  @ApiOperation({\n    operationId: \"findAllContributorsByRepoId\",\n    summary: \"Finds a repo by :owner and :repo listing all contributions by their user login\",\n  })\n  @ApiOkResponse({ type: DbRepoLoginContributions, isArray: true })\n  @ApiNotFoundResponse({ description: \"Repo not found\" })\n  @ApiQuery({\n    name: \"range\",\n    type: \"integer\",\n    description: \"Range in days\",\n    required: false,\n  })\n  @ApiQuery({\n    name: \"prev_days_start_date\",\n    type: \"integer\",\n    description: \"Previous number of days to go back to start date range\",\n    required: false,\n  })\n  async findAllUserContributionsByRepoId(\n    @Param(\"owner\") owner: string,\n    @Param(\"repo\") repo: string,\n    @Query(\"range\") range = 30,\n    @Query(\"prev_days_start_date\") prev_days_start_date = 0\n  ): Promise {\n    const item = await this.repoService.findOneByOwnerAndRepo(owner, repo);\n\n    return this.contributionService.findAllByRepoId(item.id, range, prev_days_start_date);\n  }\n\n  @Get(\"/:owner/:repo/:login/contributions\")\n  @ApiOperation({\n    operationId: \"findAllByOwnerRepoAndContributorLogin\",\n    summary: \"Finds a repo by :owner and :repo listing all contributions for a given :login and paginating them\",\n  })\n  @ApiOkResponse({ type: DbRepoLoginContributions })\n  @ApiNotFoundResponse({ description: \"Repo not found\" })\n  @ApiQuery({\n    name: \"range\",\n    type: \"integer\",\n    description: \"Range in days\",\n    required: false,\n  })\n  @ApiQuery({\n    name: \"prev_days_start_date\",\n    type: \"integer\",\n    description: \"Previous number of days to go back to start date range\",\n    required: false,\n  })\n  async findAllByOwnerRepoAndContributorLogin(\n    @Param(\"owner\") owner: string,\n    @Param(\"repo\") repo: string,\n    @Param(\"login\") login: string,\n    @Query(\"range\") range = 30,\n    @Query(\"prev_days_start_date\") prev_days_start_date = 0\n  ): Promise {\n    const item = await this.repoService.findOneByOwnerAndRepo(owner, repo);\n\n    return this.contributionService.findAllByUserLogin(item.id, login, range, prev_days_start_date);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/RepoController.html":{"url":"controllers/RepoController.html","title":"controller - RepoController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  RepoController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/repo/repo.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                repos\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findAllReposWithFilters\n                            \n                            \n                                    Async\n                                findOneById\n                            \n                            \n                                    Async\n                                findOneByOwnerAndRepo\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll(pageOptionsDto: RepoPageOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/list')@ApiOperation({operationId: 'findAll', summary: 'Finds all repos and paginates them'})@ApiPaginatedResponse(DbRepo)@ApiOkResponse({type: DbRepo})\n                \n            \n\n            \n                \n                    Defined in src/repo/repo.controller.ts:45\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                RepoPageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllReposWithFilters\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllReposWithFilters(pageOptionsDto: RepoSearchOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/search')@ApiOperation({operationId: 'findAllReposWithFilters', summary: 'Finds all repos using filters and paginates them'})@ApiPaginatedResponse(DbRepo)@ApiOkResponse({type: DbRepo})\n                \n            \n\n            \n                \n                    Defined in src/repo/repo.controller.ts:56\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                RepoSearchOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneById(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:id')@ApiOperation({operationId: 'findOneById', summary: 'Finds a repo by :id'})@ApiOkResponse({type: DbRepo})@ApiNotFoundResponse({description: 'Repository not found'})@ApiParam({name: 'id', type: 'integer'})\n                \n            \n\n            \n                \n                    Defined in src/repo/repo.controller.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneByOwnerAndRepo\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneByOwnerAndRepo(owner: string, repo: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:owner/:repo')@ApiOperation({operationId: 'findOneByOwnerAndRepo', summary: 'Finds a repo by :owner and :repo'})@ApiOkResponse({type: DbRepo})@ApiNotFoundResponse({description: 'Repository not found'})\n                \n            \n\n            \n                \n                    Defined in src/repo/repo.controller.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    owner\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    repo\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Param, ParseIntPipe, Query } from \"@nestjs/common\";\nimport { ApiNotFoundResponse, ApiOkResponse, ApiOperation, ApiParam, ApiTags } from \"@nestjs/swagger\";\nimport { PageDto } from \"../common/dtos/page.dto\";\nimport { ApiPaginatedResponse } from \"../common/decorators/api-paginated-response.decorator\";\nimport { DbRepo } from \"./entities/repo.entity\";\nimport { RepoService } from \"./repo.service\";\nimport { RepoPageOptionsDto } from \"./dtos/repo-page-options.dto\";\nimport { RepoSearchOptionsDto } from \"./dtos/repo-search-options.dto\";\n\n@Controller(\"repos\")\n@ApiTags(\"Repository service\")\nexport class RepoController {\n  constructor(private readonly repoService: RepoService) {}\n\n  @Get(\"/:id\")\n  @ApiOperation({\n    operationId: \"findOneById\",\n    summary: \"Finds a repo by :id\",\n  })\n  @ApiOkResponse({ type: DbRepo })\n  @ApiNotFoundResponse({ description: \"Repository not found\" })\n  @ApiParam({ name: \"id\", type: \"integer\" })\n  async findOneById(@Param(\"id\", ParseIntPipe) id: number): Promise {\n    return this.repoService.findOneById(id);\n  }\n\n  @Get(\"/:owner/:repo\")\n  @ApiOperation({\n    operationId: \"findOneByOwnerAndRepo\",\n    summary: \"Finds a repo by :owner and :repo\",\n  })\n  @ApiOkResponse({ type: DbRepo })\n  @ApiNotFoundResponse({ description: \"Repository not found\" })\n  async findOneByOwnerAndRepo(@Param(\"owner\") owner: string, @Param(\"repo\") repo: string): Promise {\n    return this.repoService.findOneByOwnerAndRepo(owner, repo);\n  }\n\n  @Get(\"/list\")\n  @ApiOperation({\n    operationId: \"findAll\",\n    summary: \"Finds all repos and paginates them\",\n  })\n  @ApiPaginatedResponse(DbRepo)\n  @ApiOkResponse({ type: DbRepo })\n  async findAll(@Query() pageOptionsDto: RepoPageOptionsDto): Promise> {\n    return this.repoService.findAll(pageOptionsDto);\n  }\n\n  @Get(\"/search\")\n  @ApiOperation({\n    operationId: \"findAllReposWithFilters\",\n    summary: \"Finds all repos using filters and paginates them\",\n  })\n  @ApiPaginatedResponse(DbRepo)\n  @ApiOkResponse({ type: DbRepo })\n  async findAllReposWithFilters(@Query() pageOptionsDto: RepoSearchOptionsDto): Promise> {\n    return this.repoService.findAllWithFilters(pageOptionsDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/RepoFilterModule.html":{"url":"modules/RepoFilterModule.html","title":"module - RepoFilterModule","body":"\n                   \n\n\n\n\n    Modules\n    RepoFilterModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_RepoFilterModule\n\n\n\ncluster_RepoFilterModule_exports\n\n\n\ncluster_RepoFilterModule_providers\n\n\n\n\nRepoFilterService \n\nRepoFilterService \n\n\n\nRepoFilterModule\n\nRepoFilterModule\n\nRepoFilterService  -->\n\nRepoFilterModule->RepoFilterService \n\n\n\n\n\nRepoFilterService\n\nRepoFilterService\n\nRepoFilterModule -->\n\nRepoFilterService->RepoFilterModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/common/filters/repo-filter.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            RepoFilterService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            RepoFilterService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\n\nimport { RepoFilterService } from \"./repo-filter.service\";\n\n@Module({\n  providers: [RepoFilterService],\n  exports: [RepoFilterService],\n})\nexport class RepoFilterModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RepoFilterService.html":{"url":"injectables/RepoFilterService.html","title":"injectable - RepoFilterService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RepoFilterService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/filters/repo-filter.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                applyQueryBuilderFilters\n                            \n                            \n                                getRepoFilters\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        applyQueryBuilderFilters\n                        \n                    \n                \n            \n            \n                \napplyQueryBuilderFilters(qb: SelectQueryBuilder, filters: [])\n                \n            \n\n\n            \n                \n                    Defined in src/common/filters/repo-filter.service.ts:86\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n                    applies the filters using the provided QueryBuilder\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    qb\n                                    \n                                            SelectQueryBuilder\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    filters\n                                    \n                                            []\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        []\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getRepoFilters\n                        \n                    \n                \n            \n            \n                \ngetRepoFilters(options: FilterOptionsDto, startDate: string, range: number)\n                \n            \n\n\n            \n                \n                    Defined in src/common/filters/repo-filter.service.ts:15\n                \n            \n\n\n            \n                \n                    applies repo-based filters based on the filter/InsightFilterFieldsEnum query param\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                FilterOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    startDate\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        \"NOW()\"\n                                    \n\n                                \n                                \n                                    range\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        0\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     []\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { ObjectLiteral, SelectQueryBuilder } from \"typeorm\";\n\nimport { InsightFilterFieldsEnum } from \"../../insight/dtos/insight-options.dto\";\nimport { FilterOptionsDto } from \"../dtos/filter-options.dto\";\n\n@Injectable()\nexport class RepoFilterService {\n  /**\n   * applies repo-based filters based on the filter/InsightFilterFieldsEnum query param\n   * @param options\n   * @param range\n   */\n\n  getRepoFilters(options: FilterOptionsDto, startDate = \"NOW()\", range = 0): [string, object][] {\n    const filters: [string, object][] = [];\n\n    if (options.repoIds) {\n      filters.push([`repos.id IN (:...repoIds)`, { repoIds: options.repoIds.split(\",\") }]);\n    }\n\n    if (options.repo) {\n      filters.push([`LOWER(repos.full_name)=:repo`, { repo: decodeURIComponent(options.repo.toLowerCase()) }]);\n    }\n\n    if (options.topic) {\n      filters.push([`:topic = ANY(\"repos\".\"topics\")`, { topic: options.topic }]);\n    }\n\n    if (options.filter === InsightFilterFieldsEnum.Recent) {\n      filters.push([\"repos.stars >= 1000\", {}]);\n    } else if (options.filter === InsightFilterFieldsEnum.Top100) {\n      filters.push([\n        `\n        repos.id IN (\n          SELECT \"top_repos\".id\n          FROM \"repos\" \"top_repos\"\n          WHERE\n            top_repos.stars > 1000\n          ORDER BY top_repos.stars DESC\n          LIMIT 1000\n        )\n      `,\n        {},\n      ]);\n    } else if (options.filter === InsightFilterFieldsEnum.MostSpammed) {\n      filters.push([\n        `\n        repos.id IN (\n          SELECT spam_pull_requests.repo_id\n          FROM \"pull_requests\" \"spam_pull_requests\"\n          WHERE\n            'spam' = ANY(\"spam_pull_requests\".\"label_names\")\n            AND '${startDate}'::TIMESTAMP >= \"spam_pull_requests\".\"updated_at\"\n            AND '${startDate}'::TIMESTAMP - INTERVAL '${range} days' = 5\n     *   )`, {}]);\n     * }\n     */\n\n    return filters;\n  }\n\n  /**\n   * applies the filters using the provided QueryBuilder\n   * @param qb\n   * @param filters\n   */\n\n  applyQueryBuilderFilters(qb: SelectQueryBuilder, filters: [string, object][] = []) {\n    filters.forEach(([sql, data], index) => {\n      if (index === 0) {\n        qb.where(sql, data);\n      } else {\n        qb.andWhere(sql, data);\n      }\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RepoInfo.html":{"url":"classes/RepoInfo.html","title":"class - RepoInfo","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RepoInfo\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/repo/dtos/repo-info.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                fullName\n                            \n                            \n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        fullName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Repo Full Name', type: String, example: 'open-sauced/insights'})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/dtos/repo-info.dto.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Repo ID', type: 'integer', example: 234343})@IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/dtos/repo-info.dto.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsNumber, IsString } from \"class-validator\";\n\nexport class RepoInfo {\n  @ApiProperty({\n    description: \"Repo ID\",\n    type: \"integer\",\n    example: 234343,\n  })\n  @IsNumber()\n  id: number;\n\n  @ApiProperty({\n    description: \"Repo Full Name\",\n    type: String,\n    example: \"open-sauced/insights\",\n  })\n  @IsString()\n  fullName: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/RepoModule.html":{"url":"modules/RepoModule.html","title":"module - RepoModule","body":"\n                   \n\n\n\n\n    Modules\n    RepoModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_RepoModule\n\n\n\ncluster_RepoModule_imports\n\n\n\ncluster_RepoModule_providers\n\n\n\ncluster_RepoModule_exports\n\n\n\n\nRepoFilterModule\n\nRepoFilterModule\n\n\n\nRepoModule\n\nRepoModule\n\nRepoModule -->\n\nRepoFilterModule->RepoModule\n\n\n\n\n\nRepoService \n\nRepoService \n\nRepoService  -->\n\nRepoModule->RepoService \n\n\n\n\n\nRepoService\n\nRepoService\n\nRepoModule -->\n\nRepoService->RepoModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/repo/repo.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            RepoService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            RepoController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            RepoFilterModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            RepoService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\n\nimport { RepoFilterModule } from \"../common/filters/repo-filter.module\";\nimport { DbRepo } from \"./entities/repo.entity\";\nimport { RepoService } from \"./repo.service\";\nimport { RepoController } from \"./repo.controller\";\n\n@Module({\n  imports: [TypeOrmModule.forFeature([DbRepo], \"ApiConnection\"), RepoFilterModule],\n  controllers: [RepoController],\n  providers: [RepoService],\n  exports: [RepoService],\n})\nexport class RepoModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RepoPageOptionsDto.html":{"url":"classes/RepoPageOptionsDto.html","title":"class - RepoPageOptionsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RepoPageOptionsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/repo/dtos/repo-page-options.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PageOptionsDto\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                    Optional\n                                orderBy\n                            \n                            \n                                    Readonly\n                                    Optional\n                                limit\n                            \n                            \n                                    Readonly\n                                    Optional\n                                orderDirection\n                            \n                            \n                                    Readonly\n                                    Optional\n                                page\n                            \n                            \n                                    Readonly\n                                    Optional\n                                prev_days_start_date\n                            \n                            \n                                    Readonly\n                                    Optional\n                                range\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        orderBy\n                        \n                    \n                \n            \n                \n                    \n                        Type :         RepoOrderFieldsEnum\n\n                    \n                \n                \n                    \n                        Default value : RepoOrderFieldsEnum.stars\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: RepoOrderFieldsEnum, enumName: 'RepoOrderFieldsEnum', default: undefined})@IsEnum(RepoOrderFieldsEnum)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/dtos/repo-page-options.dto.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 50\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, maximum: 1000, default: 10, type: 'integer'})@Type(undefined)@IsInt()@Min(1)@Max(10000)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:30\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        orderDirection\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OrderDirectionEnum\n\n                    \n                \n                \n                    \n                        Default value : OrderDirectionEnum.DESC\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: OrderDirectionEnum, enumName: 'OrderDirectionEnum', default: undefined})@IsEnum(OrderDirectionEnum)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:35\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, default: 1, type: 'integer'})@Type(undefined)@IsInt()@Min(1)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:17\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        prev_days_start_date\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 0\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Number of days in the past to start range block', default: 0, type: 'integer'})@Type(undefined)@IsIn(['0', '7', '30', '90'])@IsInt()@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:57\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        range\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 30\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Range in days', default: 30, type: 'integer'})@Type(undefined)@IsIn(['7', '30', '90'])@IsInt()@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:46\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiPropertyOptional } from \"@nestjs/swagger\";\nimport { IsEnum, IsOptional } from \"class-validator\";\n\nimport { PageOptionsDto } from \"../../common/dtos/page-options.dto\";\n\nexport enum RepoFilterFieldsEnum {\n  Recent = \"recent\",\n  Top100 = \"top-100-repos\",\n  MinimumContributors = \"minimum-5-contributors\",\n  MostActive = \"most-active\",\n  MostSpammed = \"most-spammed\",\n}\n\nexport enum RepoOrderFieldsEnum {\n  issues = \"issues\",\n  stars = \"stars\",\n  watchers = \"watchers\",\n  subscribers = \"subscribers\",\n  created_at = \"created_at\",\n  updated_at = \"updated_at\",\n  name = \"name\",\n  contributionsCount = \"contributionsCount\",\n  votesCount = \"votesCount\",\n  submissionsCount = \"submissionsCount\",\n  stargazersCount = \"stargazersCount\",\n  starsCount = \"starsCount\",\n}\n\nexport class RepoPageOptionsDto extends PageOptionsDto {\n  @ApiPropertyOptional({\n    enum: RepoOrderFieldsEnum,\n    enumName: \"RepoOrderFieldsEnum\",\n    default: RepoOrderFieldsEnum.stars,\n  })\n  @IsEnum(RepoOrderFieldsEnum)\n  @IsOptional()\n  readonly orderBy?: RepoOrderFieldsEnum = RepoOrderFieldsEnum.stars;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RepoSearchOptionsDto.html":{"url":"classes/RepoSearchOptionsDto.html","title":"class - RepoSearchOptionsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RepoSearchOptionsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/repo/dtos/repo-search-options.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        RepoPageOptionsDto\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                    Optional\n                                filter\n                            \n                            \n                                    Readonly\n                                    Optional\n                                repo\n                            \n                            \n                                    Readonly\n                                    Optional\n                                repoIds\n                            \n                            \n                                    Readonly\n                                    Optional\n                                topic\n                            \n                            \n                                    Readonly\n                                    Optional\n                                orderBy\n                            \n                            \n                                    Readonly\n                                    Optional\n                                limit\n                            \n                            \n                                    Readonly\n                                    Optional\n                                orderDirection\n                            \n                            \n                                    Readonly\n                                    Optional\n                                page\n                            \n                            \n                                    Readonly\n                                    Optional\n                                prev_days_start_date\n                            \n                            \n                                    Readonly\n                                    Optional\n                                range\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        filter\n                        \n                    \n                \n            \n                \n                    \n                        Type :         InsightFilterFieldsEnum\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: InsightFilterFieldsEnum, enumName: 'InsightFilterFieldsEnum'})@IsEnum(InsightFilterFieldsEnum)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/dtos/repo-search-options.dto.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        repo\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional()@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/dtos/repo-search-options.dto.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        repoIds\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional()@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/dtos/repo-search-options.dto.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        topic\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: 'string', default: ''})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/dtos/repo-search-options.dto.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        orderBy\n                        \n                    \n                \n            \n                \n                    \n                        Type :         RepoOrderFieldsEnum\n\n                    \n                \n                \n                    \n                        Default value : RepoOrderFieldsEnum.stars\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: RepoOrderFieldsEnum, enumName: 'RepoOrderFieldsEnum', default: undefined})@IsEnum(RepoOrderFieldsEnum)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         RepoPageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         RepoPageOptionsDto:37\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 50\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, maximum: 1000, default: 10, type: 'integer'})@Type(undefined)@IsInt()@Min(1)@Max(10000)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:30\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        orderDirection\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OrderDirectionEnum\n\n                    \n                \n                \n                    \n                        Default value : OrderDirectionEnum.DESC\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: OrderDirectionEnum, enumName: 'OrderDirectionEnum', default: undefined})@IsEnum(OrderDirectionEnum)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:35\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, default: 1, type: 'integer'})@Type(undefined)@IsInt()@Min(1)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:17\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        prev_days_start_date\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 0\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Number of days in the past to start range block', default: 0, type: 'integer'})@Type(undefined)@IsIn(['0', '7', '30', '90'])@IsInt()@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:57\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        range\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 30\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Range in days', default: 30, type: 'integer'})@Type(undefined)@IsIn(['7', '30', '90'])@IsInt()@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:46\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiPropertyOptional } from \"@nestjs/swagger\";\nimport { IsEnum, IsOptional, IsString } from \"class-validator\";\nimport { InsightFilterFieldsEnum } from \"../../insight/dtos/insight-options.dto\";\n\nimport { RepoPageOptionsDto } from \"./repo-page-options.dto\";\n\nexport class RepoSearchOptionsDto extends RepoPageOptionsDto {\n  @ApiPropertyOptional({\n    enum: InsightFilterFieldsEnum,\n    enumName: \"InsightFilterFieldsEnum\",\n  })\n  @IsEnum(InsightFilterFieldsEnum)\n  @IsOptional()\n  readonly filter?: InsightFilterFieldsEnum;\n\n  @ApiPropertyOptional()\n  @IsString()\n  @IsOptional()\n  readonly repo?: string;\n\n  @ApiPropertyOptional({\n    type: \"string\",\n    default: \"\",\n  })\n  @IsString()\n  @IsOptional()\n  readonly topic?: string;\n\n  @ApiPropertyOptional()\n  @IsString()\n  @IsOptional()\n  readonly repoIds?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RepoService.html":{"url":"injectables/RepoService.html","title":"injectable - RepoService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RepoService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/repo/repo.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                baseFilterQueryBuilder\n                            \n                            \n                                baseQueryBuilder\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findAllWithFilters\n                            \n                            \n                                    Async\n                                findOneById\n                            \n                            \n                                    Async\n                                findOneByOwnerAndRepo\n                            \n                            \n                                    Async\n                                findOrgsRecommendations\n                            \n                            \n                                    Async\n                                findRecommendations\n                            \n                            \n                                    Private\n                                hacktoberfestfilterquerybuilder\n                            \n                            \n                                subQueryCount\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(repoRepository: Repository, filterService: RepoFilterService, configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/repo/repo.service.ts:18\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        repoRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        filterService\n                                                  \n                                                        \n                                                                        RepoFilterService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        baseFilterQueryBuilder\n                        \n                    \n                \n            \n            \n                \n                    \n                    baseFilterQueryBuilder(startDate: string, range: number)\n                \n            \n\n\n            \n                \n                    Defined in src/repo/repo.service.ts:66\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    startDate\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        \"NOW()\"\n                                    \n\n                                \n                                \n                                    range\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        30\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        baseQueryBuilder\n                        \n                    \n                \n            \n            \n                \nbaseQueryBuilder()\n                \n            \n\n\n            \n                \n                    Defined in src/repo/repo.service.ts:41\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll(pageOptionsDto: RepoPageOptionsDto, userId?: number, userRelations?: string[])\n                \n            \n\n\n            \n                \n                    Defined in src/repo/repo.service.ts:313\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                RepoPageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    userRelations\n                                    \n                                            string[]\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllWithFilters\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllWithFilters(pageOptionsDto: RepoSearchOptionsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/repo/repo.service.ts:347\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                RepoSearchOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneById(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/repo/repo.service.ts:285\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneByOwnerAndRepo\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneByOwnerAndRepo(owner: string, repo: string)\n                \n            \n\n\n            \n                \n                    Defined in src/repo/repo.service.ts:299\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    owner\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    repo\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOrgsRecommendations\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOrgsRecommendations(userId: number, pageOptionsDto: PageOptionsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/repo/repo.service.ts:448\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findRecommendations\n                        \n                    \n                \n            \n            \n                \n                    \n                    findRecommendations(interests: string[])\n                \n            \n\n\n            \n                \n                    Defined in src/repo/repo.service.ts:418\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    interests\n                                    \n                                            string[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        hacktoberfestfilterquerybuilder\n                        \n                    \n                \n            \n            \n                \n                    \n                    hacktoberfestfilterquerybuilder(range: number)\n                \n            \n\n\n            \n                \n                    Defined in src/repo/repo.service.ts:157\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    range\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        30\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        subQueryCount\n                        \n                    \n                \n            \n            \n                \nsubQueryCount(subQuery: SelectQueryBuilder, entity: string, alias: string, target: string)\n                \n            \n\n\n            \n                \n                    Defined in src/repo/repo.service.ts:26\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    subQuery\n                                    \n                                            SelectQueryBuilder\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    entity\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    alias\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    target\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        \"repo\"\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from \"@nestjs/common\";\nimport { ObjectLiteral, Repository, SelectQueryBuilder } from \"typeorm\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\n\nimport { ConfigService } from \"@nestjs/config\";\nimport { PageMetaDto } from \"../common/dtos/page-meta.dto\";\nimport { PageDto } from \"../common/dtos/page.dto\";\nimport { OrderDirectionEnum } from \"../common/constants/order-direction.constant\";\nimport { InsightFilterFieldsEnum } from \"../insight/dtos/insight-options.dto\";\nimport { RepoFilterService } from \"../common/filters/repo-filter.service\";\nimport { PageOptionsDto } from \"../common/dtos/page-options.dto\";\nimport { GetPrevDateISOString } from \"../common/util/datetimes\";\nimport { RepoOrderFieldsEnum, RepoPageOptionsDto } from \"./dtos/repo-page-options.dto\";\nimport { DbRepo } from \"./entities/repo.entity\";\nimport { RepoSearchOptionsDto } from \"./dtos/repo-search-options.dto\";\n\n@Injectable()\nexport class RepoService {\n  constructor(\n    @InjectRepository(DbRepo, \"ApiConnection\")\n    private repoRepository: Repository,\n    private filterService: RepoFilterService,\n    private configService: ConfigService\n  ) {}\n\n  subQueryCount(\n    subQuery: SelectQueryBuilder,\n    entity: string,\n    alias: string,\n    target = \"repo\"\n  ) {\n    const aliasName = `${alias}Count`;\n    const aliasTable = `${alias}CountSelect`;\n\n    return subQuery\n      .select(\"COUNT(DISTINCT id)\", aliasName)\n      .from(entity, aliasTable)\n      .where(`${aliasTable}.${target}_id = ${target}.id`);\n  }\n\n  baseQueryBuilder() {\n    const builder = this.repoRepository\n      .createQueryBuilder(\"repo\")\n\n      /*\n       * .select(['repo.id'])\n       * .leftJoinAndSelect(\"repo.user\", \"user\")\n       * .leftJoinAndSelect(DbRepoToUserStars, \"stars\")\n       * .leftJoinAndMapMany(\"repo.contributions\", DbContribution, \"contributions\", \"contributions.repo_id = repo.id\")\n       */\n\n      .addSelect((qb) => this.subQueryCount(qb, \"DbContribution\", \"contributions\"), \"contributionsCount\")\n      .addSelect((qb) => this.subQueryCount(qb, \"DbRepoToUserVotes\", \"votes\"), \"votesCount\")\n      .addSelect((qb) => this.subQueryCount(qb, \"DbRepoToUserSubmissions\", \"submissions\"), \"submissionsCount\")\n      .addSelect((qb) => this.subQueryCount(qb, \"DbRepoToUserStargazers\", \"stargazers\"), \"stargazersCount\")\n      .addSelect((qb) => this.subQueryCount(qb, \"DbRepoToUserStars\", \"stars\"), \"starsCount\")\n      .loadRelationCountAndMap(\"repo.contributionsCount\", \"repo.contributions\")\n      .loadRelationCountAndMap(\"repo.votesCount\", \"repo.repoToUserVotes\")\n      .loadRelationCountAndMap(\"repo.submissionsCount\", \"repo.repoToUserSubmissions\")\n      .loadRelationCountAndMap(\"repo.stargazersCount\", \"repo.repoToUserStargazers\")\n      .loadRelationCountAndMap(\"repo.starsCount\", \"repo.repoToUserStars\");\n\n    return builder;\n  }\n\n  private baseFilterQueryBuilder(startDate = \"NOW()\", range = 30) {\n    return this.repoRepository\n      .createQueryBuilder(\"repos\")\n      .addSelect(\n        `(\n          SELECT COALESCE(COUNT(\"open_pull_requests\".\"id\"), 0)\n          FROM \"pull_requests\" \"open_pull_requests\"\n          WHERE\n            LOWER(\"open_pull_requests\".\"state\") = 'open'\n            AND \"open_pull_requests\".\"repo_id\" = \"repos\".\"id\"\n            AND '${startDate}'::TIMESTAMP >= \"open_pull_requests\".\"updated_at\"\n            AND '${startDate}'::TIMESTAMP - INTERVAL '${range} days' = \"closed_pull_requests\".\"updated_at\"\n            AND '${startDate}'::TIMESTAMP - INTERVAL '${range} days' = \"merged_pull_requests\".\"updated_at\"\n            AND '${startDate}'::TIMESTAMP - INTERVAL '${range} days' = \"draft_pull_requests\".\"updated_at\"\n            AND '${startDate}'::TIMESTAMP - INTERVAL '${range} days' = \"spam_pull_requests\".\"updated_at\"\n            AND '${startDate}'::TIMESTAMP - INTERVAL '${range} days'  \"pull_requests_velocity\".\"created_at\"\n            AND '${startDate}'::TIMESTAMP >= \"pull_requests_velocity\".\"updated_at\"\n            AND '${startDate}'::TIMESTAMP - INTERVAL '${range} days' = \"active_pull_requests\".\"updated_at\"\n            AND '${startDate}'::TIMESTAMP - INTERVAL '${range} days' = \"open_pull_requests\".\"updated_at\"\n            AND to_date('${hacktoberfestYear}', 'YYYY')\n                + INTERVAL '10 months'\n                - INTERVAL '1 day'\n                - INTERVAL '${range} days' = \"closed_pull_requests\".\"updated_at\"\n            AND to_date('${hacktoberfestYear}', 'YYYY')\n                + INTERVAL '10 months'\n                - INTERVAL '1 day'\n                - INTERVAL '${range} days' = \"merged_pull_requests\".\"updated_at\"\n            AND to_date('${hacktoberfestYear}', 'YYYY')\n                + INTERVAL '10 months'\n                - INTERVAL '1 day'\n                - INTERVAL '${range} days' = \"draft_pull_requests\".\"updated_at\"\n            AND to_date('${hacktoberfestYear}', 'YYYY')\n                + INTERVAL '10 months'\n                - INTERVAL '1 day'\n                - INTERVAL '${range} days' = \"spam_pull_requests\".\"updated_at\"\n            AND to_date('${hacktoberfestYear}', 'YYYY')\n                + INTERVAL '10 months'\n                - INTERVAL '1 day'\n                - INTERVAL '${range} days'  \"pull_requests_velocity\".\"created_at\"\n            AND to_date('${hacktoberfestYear}', 'YYYY')\n                + INTERVAL '10 months'\n                - INTERVAL '1 day' >= \"pull_requests_velocity\".\"updated_at\"\n            AND to_date('${hacktoberfestYear}', 'YYYY')\n                + INTERVAL '10 months'\n                - INTERVAL '1 day'\n                - INTERVAL '${range} days' = \"active_pull_requests\".\"updated_at\"\n            AND to_date('${hacktoberfestYear}', 'YYYY')\n                + INTERVAL '10 months'\n                - INTERVAL '1 day'\n                - INTERVAL '${range} days'  {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder.where(\"repo.id = :id\", { id });\n\n    const item = await queryBuilder.getOne();\n\n    if (!item) {\n      throw new NotFoundException();\n    }\n\n    return item;\n  }\n\n  async findOneByOwnerAndRepo(owner: string, repo: string): Promise {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder.where(\"repo.full_name = :name\", { name: `${owner}/${repo}` });\n\n    const item = await queryBuilder.getOne();\n\n    if (!item) {\n      throw new NotFoundException();\n    }\n\n    return item;\n  }\n\n  async findAll(\n    pageOptionsDto: RepoPageOptionsDto,\n    userId?: number,\n    userRelations?: string[]\n  ): Promise> {\n    const queryBuilder = this.baseQueryBuilder();\n    const orderField = pageOptionsDto.orderBy ?? RepoOrderFieldsEnum.stars;\n\n    if (userId) {\n      userRelations?.map((relation) =>\n        queryBuilder.innerJoin(\n          `repo.repoToUser${relation}`,\n          `authUser${relation}`,\n          `authUser${relation}.user_id = :userId`,\n          { userId }\n        )\n      );\n    }\n\n    queryBuilder\n      .orderBy(`\"repo\".\"is_fork\"`, OrderDirectionEnum.ASC)\n      .addOrderBy(`\"${orderField}\"`, pageOptionsDto.orderDirection)\n      .addOrderBy(`\"repo\".\"created_at\"`, OrderDirectionEnum.DESC)\n      .offset(pageOptionsDto.skip)\n      .limit(pageOptionsDto.limit);\n\n    const itemCount = await queryBuilder.getCount();\n    const entities = await queryBuilder.getMany();\n\n    const pageMetaDto = new PageMetaDto({ itemCount, pageOptionsDto });\n\n    return new PageDto(entities, pageMetaDto);\n  }\n\n  async findAllWithFilters(pageOptionsDto: RepoSearchOptionsDto): Promise> {\n    const orderField = pageOptionsDto.orderBy ?? \"stars\";\n    const startDate = GetPrevDateISOString(pageOptionsDto.prev_days_start_date);\n    const range = pageOptionsDto.range!;\n\n    let queryBuilder;\n\n    switch (pageOptionsDto.topic) {\n      case \"hacktoberfest\":\n        queryBuilder = this.hacktoberfestfilterquerybuilder(range);\n        break;\n      default:\n        queryBuilder = this.baseFilterQueryBuilder(startDate, range);\n        break;\n    }\n\n    const filters = this.filterService.getRepoFilters(pageOptionsDto, startDate, range);\n\n    if (!pageOptionsDto.repoIds && !pageOptionsDto.repo) {\n      filters.push([`'${startDate}'::TIMESTAMP >= \"repos\".\"updated_at\"`, { range }]);\n      filters.push([`'${startDate}'::TIMESTAMP - INTERVAL '${range} days' = \"repos\".\"updated_at\"`, { range }]);\n      countFilters.push([`'${startDate}'::TIMESTAMP - INTERVAL '${range} days' ();\n    const itemCount = parseInt(`${countQueryResult?.count ?? \"0\"}`, 10);\n\n    queryBuilder\n      .addOrderBy(`\"repos\".\"${orderField}\"`, OrderDirectionEnum.DESC)\n      .offset(pageOptionsDto.skip)\n      .limit(pageOptionsDto.limit);\n\n    const entities = await queryBuilder.getMany();\n    const pageMetaDto = new PageMetaDto({ itemCount, pageOptionsDto });\n\n    return new PageDto(entities, pageMetaDto);\n  }\n\n  async findRecommendations(interests: string[]): Promise> {\n    const queryBuilder = this.repoRepository.createQueryBuilder(\"repo\");\n    const userInterests: Record = {};\n\n    const promises = interests.map(async (interest) => {\n      queryBuilder\n        .where(`(:topic = ANY(\"repo\".\"topics\"))`, { topic: interest })\n        .andWhere(\n          `\n          repo.id IN (\n            SELECT repo_id FROM pull_requests\n            WHERE now() - INTERVAL '30 days'  {\n      userInterests[interest] = results[index];\n    });\n\n    return userInterests;\n  }\n\n  async findOrgsRecommendations(userId: number, pageOptionsDto: PageOptionsDto) {\n    const queryBuilder = this.baseFilterQueryBuilder();\n    const startDate = GetPrevDateISOString(pageOptionsDto.prev_days_start_date);\n    const range = pageOptionsDto.range!;\n\n    queryBuilder\n      .leftJoin(\n        (qb: SelectQueryBuilder) =>\n          qb\n            .select(\"users.id\", \"id\")\n            .addSelect(\"users.login\", \"login\")\n            .addSelect(\"user_orgs.user_id\", \"user_id\")\n            .from(\"user_organizations\", \"user_orgs\")\n            .innerJoin(\"users\", \"users\", \"user_orgs.organization_id = users.id\"),\n        \"user_orgs\",\n        \"repos.full_name LIKE user_orgs.login || '/%'\"\n      )\n      .where(\"user_orgs.user_id = :userId\", { userId })\n      .andWhere(`'${startDate}'::TIMESTAMP >= \"repos\".\"updated_at\"`)\n      .andWhere(`'${startDate}'::TIMESTAMP - INTERVAL '${range} days' \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/RepoStarController.html":{"url":"controllers/RepoStarController.html","title":"controller - RepoStarController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  RepoStarController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/star/repo-star.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                repos\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                downStarOneById\n                            \n                            \n                                    Async\n                                downStarOneByOwnerAndRepo\n                            \n                            \n                                    Async\n                                findAllUserStarred\n                            \n                            \n                                    Async\n                                starOneById\n                            \n                            \n                                    Async\n                                starOneByOwnerAndRepo\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        downStarOneById\n                        \n                    \n                \n            \n            \n                \n                    \n                    downStarOneById(id: number, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/:id/star')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'downStarOneById', summary: 'Finds a repo by :id and removes existing star'})@ApiOkResponse({description: 'Returns the repo star', type: DbRepoToUserStars})@ApiNotFoundResponse({description: 'Repo or star not found'})@ApiConflictResponse({description: 'You have already removed your star'})@ApiParam({name: 'id', type: 'integer'})\n                \n            \n\n            \n                \n                    Defined in src/star/repo-star.controller.ts:100\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        downStarOneByOwnerAndRepo\n                        \n                    \n                \n            \n            \n                \n                    \n                    downStarOneByOwnerAndRepo(owner: string, repo: string, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/:owner/:repo/star')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'downStarOneByOwnerAndRepo', summary: 'Finds a repo by :owner and :repo and removes existing star'})@ApiOkResponse({description: 'Returns the repo star', type: DbRepoToUserStars})@ApiNotFoundResponse({description: 'Repo or star not found'})@ApiConflictResponse({description: 'You have already removed your star'})\n                \n            \n\n            \n                \n                    Defined in src/star/repo-star.controller.ts:119\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    owner\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    repo\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllUserStarred\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllUserStarred(pageOptionsDto: RepoPageOptionsDto, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/listUserStarred')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'findAllUserStarred', summary: 'Finds all repos starred by authenticated user and paginates them'})@ApiPaginatedResponse(DbRepo)@ApiOkResponse({type: DbRepo})\n                \n            \n\n            \n                \n                    Defined in src/star/repo-star.controller.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                RepoPageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        starOneById\n                        \n                    \n                \n            \n            \n                \n                    \n                    starOneById(id: number, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('/:id/star')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'starOneById', summary: 'Finds a repo by :id and adds a star'})@ApiOkResponse({description: 'Returns the repo star', type: DbRepoToUserStars})@ApiNotFoundResponse({description: 'Repo or star not found'})@ApiConflictResponse({description: 'You have already starred this repo'})@ApiParam({name: 'id', type: 'integer'})\n                \n            \n\n            \n                \n                    Defined in src/star/repo-star.controller.ts:57\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        starOneByOwnerAndRepo\n                        \n                    \n                \n            \n            \n                \n                    \n                    starOneByOwnerAndRepo(owner: string, repo: string, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('/:owner/:repo/star')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'starOneByOwnerAndRepo', summary: 'Finds a repo by :owner and :repo and adds a star'})@ApiOkResponse({description: 'Returns the repo star', type: DbRepoToUserStars})@ApiNotFoundResponse({description: 'Repo or star not found'})@ApiConflictResponse({description: 'You have already starred this repo'})\n                \n            \n\n            \n                \n                    Defined in src/star/repo-star.controller.ts:76\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    owner\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    repo\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Delete, Get, Param, ParseIntPipe, Put, Query, UseGuards } from \"@nestjs/common\";\nimport {\n  ApiBearerAuth,\n  ApiConflictResponse,\n  ApiNotFoundResponse,\n  ApiOkResponse,\n  ApiOperation,\n  ApiParam,\n  ApiTags,\n} from \"@nestjs/swagger\";\n\nimport { RepoService } from \"../repo/repo.service\";\nimport { SupabaseGuard } from \"../auth/supabase.guard\";\nimport { UserId } from \"../auth/supabase.user.decorator\";\nimport { DbRepoToUserStars } from \"../repo/entities/repo.to.user.stars.entity\";\nimport { ApiPaginatedResponse } from \"../common/decorators/api-paginated-response.decorator\";\nimport { DbRepo } from \"../repo/entities/repo.entity\";\nimport { RepoPageOptionsDto } from \"../repo/dtos/repo-page-options.dto\";\nimport { PageDto } from \"../common/dtos/page.dto\";\nimport { StarService } from \"./star.service\";\n\n@Controller(\"repos\")\n@ApiTags(\"Repository service guarded\", \"Star service\")\nexport class RepoStarController {\n  constructor(private readonly repoService: RepoService, private readonly starService: StarService) {}\n\n  @Get(\"/listUserStarred\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"findAllUserStarred\",\n    summary: \"Finds all repos starred by authenticated user and paginates them\",\n  })\n  @ApiPaginatedResponse(DbRepo)\n  @ApiOkResponse({ type: DbRepo })\n  async findAllUserStarred(\n    @Query() pageOptionsDto: RepoPageOptionsDto,\n    @UserId() userId: number\n  ): Promise> {\n    return this.repoService.findAll(pageOptionsDto, userId, [\"Stars\"]);\n  }\n\n  @Put(\"/:id/star\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"starOneById\",\n    summary: \"Finds a repo by :id and adds a star\",\n  })\n  @ApiOkResponse({\n    description: \"Returns the repo star\",\n    type: DbRepoToUserStars,\n  })\n  @ApiNotFoundResponse({ description: \"Repo or star not found\" })\n  @ApiConflictResponse({ description: \"You have already starred this repo\" })\n  @ApiParam({ name: \"id\", type: \"integer\" })\n  async starOneById(@Param(\"id\", ParseIntPipe) id: number, @UserId() userId: number): Promise {\n    const item = await this.repoService.findOneById(id);\n\n    return this.starService.starByRepoId(item.id, userId);\n  }\n\n  @Put(\"/:owner/:repo/star\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"starOneByOwnerAndRepo\",\n    summary: \"Finds a repo by :owner and :repo and adds a star\",\n  })\n  @ApiOkResponse({\n    description: \"Returns the repo star\",\n    type: DbRepoToUserStars,\n  })\n  @ApiNotFoundResponse({ description: \"Repo or star not found\" })\n  @ApiConflictResponse({ description: \"You have already starred this repo\" })\n  async starOneByOwnerAndRepo(\n    @Param(\"owner\") owner: string,\n    @Param(\"repo\") repo: string,\n    @UserId() userId: number\n  ): Promise {\n    const item = await this.repoService.findOneByOwnerAndRepo(owner, repo);\n\n    return this.starService.starByRepoId(item.id, userId);\n  }\n\n  @Delete(\"/:id/star\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"downStarOneById\",\n    summary: \"Finds a repo by :id and removes existing star\",\n  })\n  @ApiOkResponse({\n    description: \"Returns the repo star\",\n    type: DbRepoToUserStars,\n  })\n  @ApiNotFoundResponse({ description: \"Repo or star not found\" })\n  @ApiConflictResponse({ description: \"You have already removed your star\" })\n  @ApiParam({ name: \"id\", type: \"integer\" })\n  async downStarOneById(@Param(\"id\", ParseIntPipe) id: number, @UserId() userId: number): Promise {\n    const item = await this.repoService.findOneById(id);\n\n    return this.starService.downStarByRepoId(item.id, userId);\n  }\n\n  @Delete(\"/:owner/:repo/star\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"downStarOneByOwnerAndRepo\",\n    summary: \"Finds a repo by :owner and :repo and removes existing star\",\n  })\n  @ApiOkResponse({\n    description: \"Returns the repo star\",\n    type: DbRepoToUserStars,\n  })\n  @ApiNotFoundResponse({ description: \"Repo or star not found\" })\n  @ApiConflictResponse({ description: \"You have already removed your star\" })\n  async downStarOneByOwnerAndRepo(\n    @Param(\"owner\") owner: string,\n    @Param(\"repo\") repo: string,\n    @UserId() userId: number\n  ): Promise {\n    const item = await this.repoService.findOneByOwnerAndRepo(owner, repo);\n\n    return this.starService.downStarByRepoId(item.id, userId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/RepoStargazeController.html":{"url":"controllers/RepoStargazeController.html","title":"controller - RepoStargazeController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  RepoStargazeController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/stargaze/repo-stargaze.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                repos\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                downStargazeOneById\n                            \n                            \n                                    Async\n                                downStargazeOneByOwnerAndRepo\n                            \n                            \n                                    Async\n                                findAllUserStargazed\n                            \n                            \n                                    Async\n                                stargazeOneById\n                            \n                            \n                                    Async\n                                stargazeOneByOwnerAndRepo\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        downStargazeOneById\n                        \n                    \n                \n            \n            \n                \n                    \n                    downStargazeOneById(id: number, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/:id/stargaze')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'downStargazeOneById', summary: 'Finds a repo by :id and unfollows'})@ApiOkResponse({description: 'Returns the repo follow', type: DbRepoToUserStargazers})@ApiNotFoundResponse({description: 'Repo or follow not found'})@ApiConflictResponse({description: 'You have already unfollowed this repo'})@ApiParam({name: 'id', type: 'integer'})\n                \n            \n\n            \n                \n                    Defined in src/stargaze/repo-stargaze.controller.ts:103\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        downStargazeOneByOwnerAndRepo\n                        \n                    \n                \n            \n            \n                \n                    \n                    downStargazeOneByOwnerAndRepo(owner: string, repo: string, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/:owner/:repo/stargaze')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'downStargazeOneByOwnerAndRepo', summary: 'Finds a repo by :owner and :repo and unfollows'})@ApiOkResponse({description: 'Returns the repo follow', type: DbRepoToUserStargazers})@ApiNotFoundResponse({description: 'Repo or stargaze not found'})@ApiConflictResponse({description: 'You have already unfollowed this repo'})\n                \n            \n\n            \n                \n                    Defined in src/stargaze/repo-stargaze.controller.ts:125\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    owner\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    repo\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllUserStargazed\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllUserStargazed(pageOptionsDto: RepoPageOptionsDto, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/listUserStargazed')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'findAllUserStargazed', summary: 'Finds all repos followed by authenticated user and paginates them'})@ApiPaginatedResponse(DbRepo)@ApiOkResponse({type: DbRepo})\n                \n            \n\n            \n                \n                    Defined in src/stargaze/repo-stargaze.controller.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                RepoPageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        stargazeOneById\n                        \n                    \n                \n            \n            \n                \n                    \n                    stargazeOneById(id: number, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('/:id/stargaze')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'stargazeOneById', summary: 'Finds a repo by :id and follows'})@ApiOkResponse({description: 'Returns the repo follow', type: DbRepoToUserStargazers})@ApiNotFoundResponse({description: 'Repo or follow not found'})@ApiConflictResponse({description: 'You have already followed this repo'})@ApiParam({name: 'id', type: 'integer'})\n                \n            \n\n            \n                \n                    Defined in src/stargaze/repo-stargaze.controller.ts:57\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        stargazeOneByOwnerAndRepo\n                        \n                    \n                \n            \n            \n                \n                    \n                    stargazeOneByOwnerAndRepo(owner: string, repo: string, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('/:owner/:repo/stargaze')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'stargazeOneByOwnerAndRepo', summary: 'Finds a repo by :owner and :repo and follows'})@ApiOkResponse({description: 'Returns the repo follow', type: DbRepoToUserStargazers})@ApiNotFoundResponse({description: 'Repo or follow not found'})@ApiConflictResponse({description: 'You have already followed this repo'})\n                \n            \n\n            \n                \n                    Defined in src/stargaze/repo-stargaze.controller.ts:79\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    owner\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    repo\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Delete, Get, Param, ParseIntPipe, Put, Query, UseGuards } from \"@nestjs/common\";\nimport {\n  ApiBearerAuth,\n  ApiConflictResponse,\n  ApiNotFoundResponse,\n  ApiOkResponse,\n  ApiOperation,\n  ApiParam,\n  ApiTags,\n} from \"@nestjs/swagger\";\n\nimport { RepoService } from \"../repo/repo.service\";\nimport { SupabaseGuard } from \"../auth/supabase.guard\";\nimport { UserId } from \"../auth/supabase.user.decorator\";\nimport { DbRepoToUserStargazers } from \"../repo/entities/repo.to.user.stargazers.entity\";\nimport { ApiPaginatedResponse } from \"../common/decorators/api-paginated-response.decorator\";\nimport { DbRepo } from \"../repo/entities/repo.entity\";\nimport { RepoPageOptionsDto } from \"../repo/dtos/repo-page-options.dto\";\nimport { PageDto } from \"../common/dtos/page.dto\";\nimport { StargazeService } from \"./stargaze.service\";\n\n@Controller(\"repos\")\n@ApiTags(\"Repository service guarded\", \"Stargaze service\")\nexport class RepoStargazeController {\n  constructor(private readonly repoService: RepoService, private readonly stargazeService: StargazeService) {}\n\n  @Get(\"/listUserStargazed\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"findAllUserStargazed\",\n    summary: \"Finds all repos followed by authenticated user and paginates them\",\n  })\n  @ApiPaginatedResponse(DbRepo)\n  @ApiOkResponse({ type: DbRepo })\n  async findAllUserStargazed(\n    @Query() pageOptionsDto: RepoPageOptionsDto,\n    @UserId() userId: number\n  ): Promise> {\n    return this.repoService.findAll(pageOptionsDto, userId, [\"Stargazers\"]);\n  }\n\n  @Put(\"/:id/stargaze\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"stargazeOneById\",\n    summary: \"Finds a repo by :id and follows\",\n  })\n  @ApiOkResponse({\n    description: \"Returns the repo follow\",\n    type: DbRepoToUserStargazers,\n  })\n  @ApiNotFoundResponse({ description: \"Repo or follow not found\" })\n  @ApiConflictResponse({ description: \"You have already followed this repo\" })\n  @ApiParam({ name: \"id\", type: \"integer\" })\n  async stargazeOneById(\n    @Param(\"id\", ParseIntPipe) id: number,\n    @UserId() userId: number\n  ): Promise {\n    const item = await this.repoService.findOneById(id);\n\n    return this.stargazeService.stargazeByRepoId(item.id, userId);\n  }\n\n  @Put(\"/:owner/:repo/stargaze\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"stargazeOneByOwnerAndRepo\",\n    summary: \"Finds a repo by :owner and :repo and follows\",\n  })\n  @ApiOkResponse({\n    description: \"Returns the repo follow\",\n    type: DbRepoToUserStargazers,\n  })\n  @ApiNotFoundResponse({ description: \"Repo or follow not found\" })\n  @ApiConflictResponse({ description: \"You have already followed this repo\" })\n  async stargazeOneByOwnerAndRepo(\n    @Param(\"owner\") owner: string,\n    @Param(\"repo\") repo: string,\n    @UserId() userId: number\n  ): Promise {\n    const item = await this.repoService.findOneByOwnerAndRepo(owner, repo);\n\n    return this.stargazeService.stargazeByRepoId(item.id, userId);\n  }\n\n  @Delete(\"/:id/stargaze\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"downStargazeOneById\",\n    summary: \"Finds a repo by :id and unfollows\",\n  })\n  @ApiOkResponse({\n    description: \"Returns the repo follow\",\n    type: DbRepoToUserStargazers,\n  })\n  @ApiNotFoundResponse({ description: \"Repo or follow not found\" })\n  @ApiConflictResponse({ description: \"You have already unfollowed this repo\" })\n  @ApiParam({ name: \"id\", type: \"integer\" })\n  async downStargazeOneById(\n    @Param(\"id\", ParseIntPipe) id: number,\n    @UserId() userId: number\n  ): Promise {\n    const item = await this.repoService.findOneById(id);\n\n    return this.stargazeService.downStargazeByRepoId(item.id, userId);\n  }\n\n  @Delete(\"/:owner/:repo/stargaze\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"downStargazeOneByOwnerAndRepo\",\n    summary: \"Finds a repo by :owner and :repo and unfollows\",\n  })\n  @ApiOkResponse({\n    description: \"Returns the repo follow\",\n    type: DbRepoToUserStargazers,\n  })\n  @ApiNotFoundResponse({ description: \"Repo or stargaze not found\" })\n  @ApiConflictResponse({ description: \"You have already unfollowed this repo\" })\n  async downStargazeOneByOwnerAndRepo(\n    @Param(\"owner\") owner: string,\n    @Param(\"repo\") repo: string,\n    @UserId() userId: number\n  ): Promise {\n    const item = await this.repoService.findOneByOwnerAndRepo(owner, repo);\n\n    return this.stargazeService.downStargazeByRepoId(item.id, userId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/RepoSubmitController.html":{"url":"controllers/RepoSubmitController.html","title":"controller - RepoSubmitController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  RepoSubmitController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/submit/repo-submit.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                repos\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                downSubmitOneById\n                            \n                            \n                                    Async\n                                downSubmitOneByOwnerAndRepo\n                            \n                            \n                                    Async\n                                findAllUserSubmitted\n                            \n                            \n                                    Async\n                                submitOneById\n                            \n                            \n                                    Async\n                                submitOneByOwnerAndRepo\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        downSubmitOneById\n                        \n                    \n                \n            \n            \n                \n                    \n                    downSubmitOneById(id: number, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/:id/submit')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'downSubmitOneById', summary: 'Finds a repo by :id and removes existing submission'})@ApiOkResponse({description: 'Returns the repo submission', type: DbRepoToUserSubmissions})@ApiNotFoundResponse({description: 'Repo or submission not found'})@ApiConflictResponse({description: 'You have already removed your submission'})@ApiParam({name: 'id', type: 'integer'})\n                \n            \n\n            \n                \n                    Defined in src/submit/repo-submit.controller.ts:103\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        downSubmitOneByOwnerAndRepo\n                        \n                    \n                \n            \n            \n                \n                    \n                    downSubmitOneByOwnerAndRepo(owner: string, repo: string, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/:owner/:repo/submit')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'downSubmitOneByOwnerAndRepo', summary: 'Finds a repo by :owner and :repo and removes existing submission'})@ApiOkResponse({description: 'Returns the repo submission', type: DbRepoToUserSubmissions})@ApiNotFoundResponse({description: 'Repo or submission not found'})@ApiConflictResponse({description: 'You have already removed your submission'})\n                \n            \n\n            \n                \n                    Defined in src/submit/repo-submit.controller.ts:125\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    owner\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    repo\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllUserSubmitted\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllUserSubmitted(pageOptionsDto: RepoPageOptionsDto, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/listUserSubmitted')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'findAllUserSubmitted', summary: 'Finds all repos submitted by authenticated user and paginates them'})@ApiPaginatedResponse(DbRepo)@ApiOkResponse({type: DbRepo})\n                \n            \n\n            \n                \n                    Defined in src/submit/repo-submit.controller.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                RepoPageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        submitOneById\n                        \n                    \n                \n            \n            \n                \n                    \n                    submitOneById(id: number, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('/:id/submit')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'submitOneById', summary: 'Finds a repo by :id and adds a submission'})@ApiOkResponse({description: 'Returns the repo submission', type: DbRepoToUserSubmissions})@ApiNotFoundResponse({description: 'Repo or submission not found'})@ApiConflictResponse({description: 'You have already submitted this repo'})@ApiParam({name: 'id', type: 'integer'})\n                \n            \n\n            \n                \n                    Defined in src/submit/repo-submit.controller.ts:57\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        submitOneByOwnerAndRepo\n                        \n                    \n                \n            \n            \n                \n                    \n                    submitOneByOwnerAndRepo(owner: string, repo: string, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('/:owner/:repo/submit')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'submitOneByOwnerAndRepo', summary: 'Finds a repo by :owner and :repo and adds a submission'})@ApiOkResponse({description: 'Returns the repo submission', type: DbRepoToUserSubmissions})@ApiNotFoundResponse({description: 'Repo or submission not found'})@ApiConflictResponse({description: 'You have already submitted this repo'})\n                \n            \n\n            \n                \n                    Defined in src/submit/repo-submit.controller.ts:79\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    owner\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    repo\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Delete, Get, Param, ParseIntPipe, Put, Query, UseGuards } from \"@nestjs/common\";\nimport {\n  ApiBearerAuth,\n  ApiConflictResponse,\n  ApiNotFoundResponse,\n  ApiOkResponse,\n  ApiOperation,\n  ApiParam,\n  ApiTags,\n} from \"@nestjs/swagger\";\n\nimport { RepoService } from \"../repo/repo.service\";\nimport { SupabaseGuard } from \"../auth/supabase.guard\";\nimport { UserId } from \"../auth/supabase.user.decorator\";\nimport { DbRepoToUserSubmissions } from \"../repo/entities/repo.to.user.submissions.entity\";\nimport { ApiPaginatedResponse } from \"../common/decorators/api-paginated-response.decorator\";\nimport { DbRepo } from \"../repo/entities/repo.entity\";\nimport { RepoPageOptionsDto } from \"../repo/dtos/repo-page-options.dto\";\nimport { PageDto } from \"../common/dtos/page.dto\";\nimport { SubmitService } from \"./submit.service\";\n\n@Controller(\"repos\")\n@ApiTags(\"Repository service guarded\", \"Submit service\")\nexport class RepoSubmitController {\n  constructor(private readonly repoService: RepoService, private readonly submitService: SubmitService) {}\n\n  @Get(\"/listUserSubmitted\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"findAllUserSubmitted\",\n    summary: \"Finds all repos submitted by authenticated user and paginates them\",\n  })\n  @ApiPaginatedResponse(DbRepo)\n  @ApiOkResponse({ type: DbRepo })\n  async findAllUserSubmitted(\n    @Query() pageOptionsDto: RepoPageOptionsDto,\n    @UserId() userId: number\n  ): Promise> {\n    return this.repoService.findAll(pageOptionsDto, userId, [\"Submissions\"]);\n  }\n\n  @Put(\"/:id/submit\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"submitOneById\",\n    summary: \"Finds a repo by :id and adds a submission\",\n  })\n  @ApiOkResponse({\n    description: \"Returns the repo submission\",\n    type: DbRepoToUserSubmissions,\n  })\n  @ApiNotFoundResponse({ description: \"Repo or submission not found\" })\n  @ApiConflictResponse({ description: \"You have already submitted this repo\" })\n  @ApiParam({ name: \"id\", type: \"integer\" })\n  async submitOneById(\n    @Param(\"id\", ParseIntPipe) id: number,\n    @UserId() userId: number\n  ): Promise {\n    const item = await this.repoService.findOneById(id);\n\n    return this.submitService.submitByRepoId(item.id, userId);\n  }\n\n  @Put(\"/:owner/:repo/submit\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"submitOneByOwnerAndRepo\",\n    summary: \"Finds a repo by :owner and :repo and adds a submission\",\n  })\n  @ApiOkResponse({\n    description: \"Returns the repo submission\",\n    type: DbRepoToUserSubmissions,\n  })\n  @ApiNotFoundResponse({ description: \"Repo or submission not found\" })\n  @ApiConflictResponse({ description: \"You have already submitted this repo\" })\n  async submitOneByOwnerAndRepo(\n    @Param(\"owner\") owner: string,\n    @Param(\"repo\") repo: string,\n    @UserId() userId: number\n  ): Promise {\n    const item = await this.repoService.findOneByOwnerAndRepo(owner, repo);\n\n    return this.submitService.submitByRepoId(item.id, userId);\n  }\n\n  @Delete(\"/:id/submit\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"downSubmitOneById\",\n    summary: \"Finds a repo by :id and removes existing submission\",\n  })\n  @ApiOkResponse({\n    description: \"Returns the repo submission\",\n    type: DbRepoToUserSubmissions,\n  })\n  @ApiNotFoundResponse({ description: \"Repo or submission not found\" })\n  @ApiConflictResponse({ description: \"You have already removed your submission\" })\n  @ApiParam({ name: \"id\", type: \"integer\" })\n  async downSubmitOneById(\n    @Param(\"id\", ParseIntPipe) id: number,\n    @UserId() userId: number\n  ): Promise {\n    const item = await this.repoService.findOneById(id);\n\n    return this.submitService.downSubmitByRepoId(item.id, userId);\n  }\n\n  @Delete(\"/:owner/:repo/submit\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"downSubmitOneByOwnerAndRepo\",\n    summary: \"Finds a repo by :owner and :repo and removes existing submission\",\n  })\n  @ApiOkResponse({\n    description: \"Returns the repo submission\",\n    type: DbRepoToUserSubmissions,\n  })\n  @ApiNotFoundResponse({ description: \"Repo or submission not found\" })\n  @ApiConflictResponse({ description: \"You have already removed your submission\" })\n  async downSubmitOneByOwnerAndRepo(\n    @Param(\"owner\") owner: string,\n    @Param(\"repo\") repo: string,\n    @UserId() userId: number\n  ): Promise {\n    const item = await this.repoService.findOneByOwnerAndRepo(owner, repo);\n\n    return this.submitService.downSubmitByRepoId(item.id, userId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/RepoVoteController.html":{"url":"controllers/RepoVoteController.html","title":"controller - RepoVoteController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  RepoVoteController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/vote/repo-vote.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                repos\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                downVoteOneById\n                            \n                            \n                                    Async\n                                downVoteOneByOwnerAndRepo\n                            \n                            \n                                    Async\n                                findAllUserVoted\n                            \n                            \n                                    Async\n                                findOneByRepoId\n                            \n                            \n                                    Async\n                                voteOneById\n                            \n                            \n                                    Async\n                                voteOneByOwnerAndRepo\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        downVoteOneById\n                        \n                    \n                \n            \n            \n                \n                    \n                    downVoteOneById(id: number, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/:id/vote')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'downVoteOneById', summary: 'Finds a repo by :id and removes existing vote'})@ApiOkResponse({description: 'Returns the repo vote', type: DbRepoToUserVotes})@ApiNotFoundResponse({description: 'Repo or vote not found'})@ApiConflictResponse({description: 'You have already removed your vote'})@ApiParam({name: 'id', type: 'integer'})\n                \n            \n\n            \n                \n                    Defined in src/vote/repo-vote.controller.ts:117\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        downVoteOneByOwnerAndRepo\n                        \n                    \n                \n            \n            \n                \n                    \n                    downVoteOneByOwnerAndRepo(owner: string, repo: string, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/:owner/:repo/vote')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'downVoteOneByOwnerAndRepo', summary: 'Finds a repo by :owner and :repo and removes existing vote'})@ApiOkResponse({description: 'Returns the repo vote', type: DbRepoToUserVotes})@ApiNotFoundResponse({description: 'Repo or vote not found'})@ApiConflictResponse({description: 'You have already removed your vote'})\n                \n            \n\n            \n                \n                    Defined in src/vote/repo-vote.controller.ts:136\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    owner\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    repo\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllUserVoted\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllUserVoted(pageOptionsDto: RepoPageOptionsDto, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/listUserVoted')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'findAllUserVoted', summary: 'Finds all repos voted by authenticated user and paginates them'})@ApiPaginatedResponse(DbRepo)@ApiOkResponse({type: DbRepo})\n                \n            \n\n            \n                \n                    Defined in src/vote/repo-vote.controller.ts:37\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                RepoPageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneByRepoId\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneByRepoId(repoId: number, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:repoId/vote')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'findOneByRepoId', summary: 'Finds a repo by :repoId and returns if authenticated user has voted for it'})@ApiOkResponse({type: VotedRepoDto, description: 'Returns if authenticated user has voted for it'})@ApiParam({name: 'repoId', type: 'integer'})\n                \n            \n\n            \n                \n                    Defined in src/vote/repo-vote.controller.ts:56\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    repoId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        voteOneById\n                        \n                    \n                \n            \n            \n                \n                    \n                    voteOneById(id: number, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('/:id/vote')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'voteOneById', summary: 'Finds a repo by :id and adds a vote'})@ApiOkResponse({description: 'Returns the repo vote', type: DbRepoToUserVotes})@ApiNotFoundResponse({description: 'Repo or vote not found'})@ApiConflictResponse({description: 'You have already voted for this repo'})@ApiParam({name: 'id', type: 'integer'})\n                \n            \n\n            \n                \n                    Defined in src/vote/repo-vote.controller.ts:74\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        voteOneByOwnerAndRepo\n                        \n                    \n                \n            \n            \n                \n                    \n                    voteOneByOwnerAndRepo(owner: string, repo: string, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('/:owner/:repo/vote')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'voteOneByOwnerAndRepo', summary: 'Finds a repo by :owner and :repo and adds a vote'})@ApiOkResponse({description: 'Returns the repo vote', type: DbRepoToUserVotes})@ApiNotFoundResponse({description: 'Repo or vote not found'})@ApiConflictResponse({description: 'You have already voted for this repo'})\n                \n            \n\n            \n                \n                    Defined in src/vote/repo-vote.controller.ts:93\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    owner\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    repo\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Delete, Get, Param, ParseIntPipe, Put, Query, UseGuards } from \"@nestjs/common\";\nimport {\n  ApiBearerAuth,\n  ApiConflictResponse,\n  ApiNotFoundResponse,\n  ApiOkResponse,\n  ApiOperation,\n  ApiParam,\n  ApiTags,\n} from \"@nestjs/swagger\";\n\nimport { RepoService } from \"../repo/repo.service\";\nimport { SupabaseGuard } from \"../auth/supabase.guard\";\nimport { UserId } from \"../auth/supabase.user.decorator\";\nimport { DbRepoToUserVotes } from \"../repo/entities/repo.to.user.votes.entity\";\nimport { ApiPaginatedResponse } from \"../common/decorators/api-paginated-response.decorator\";\nimport { DbRepo } from \"../repo/entities/repo.entity\";\nimport { RepoPageOptionsDto } from \"../repo/dtos/repo-page-options.dto\";\nimport { PageDto } from \"../common/dtos/page.dto\";\nimport { VotedRepoDto } from \"./../user-repo/dtos/user-repos.dto\";\nimport { VoteService } from \"./vote.service\";\n\n@Controller(\"repos\")\n@ApiTags(\"Repository service guarded\", \"Vote service\")\nexport class RepoVoteController {\n  constructor(private readonly repoService: RepoService, private readonly voteService: VoteService) {}\n\n  @Get(\"/listUserVoted\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"findAllUserVoted\",\n    summary: \"Finds all repos voted by authenticated user and paginates them\",\n  })\n  @ApiPaginatedResponse(DbRepo)\n  @ApiOkResponse({ type: DbRepo })\n  async findAllUserVoted(\n    @Query() pageOptionsDto: RepoPageOptionsDto,\n    @UserId() userId: number\n  ): Promise> {\n    return this.repoService.findAll(pageOptionsDto, userId, [\"Votes\"]);\n  }\n\n  @Get(\"/:repoId/vote\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"findOneByRepoId\",\n    summary: \"Finds a repo by :repoId and returns if authenticated user has voted for it\",\n  })\n  @ApiOkResponse({\n    type: VotedRepoDto,\n    description: \"Returns if authenticated user has voted for it\",\n  })\n  @ApiParam({ name: \"repoId\", type: \"integer\" })\n  async findOneByRepoId(@Param(\"repoId\", ParseIntPipe) repoId: number, @UserId() userId: number) {\n    return this.voteService.findOneByRepoId(repoId, userId);\n  }\n\n  @Put(\"/:id/vote\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"voteOneById\",\n    summary: \"Finds a repo by :id and adds a vote\",\n  })\n  @ApiOkResponse({\n    description: \"Returns the repo vote\",\n    type: DbRepoToUserVotes,\n  })\n  @ApiNotFoundResponse({ description: \"Repo or vote not found\" })\n  @ApiConflictResponse({ description: \"You have already voted for this repo\" })\n  @ApiParam({ name: \"id\", type: \"integer\" })\n  async voteOneById(@Param(\"id\", ParseIntPipe) id: number, @UserId() userId: number): Promise {\n    const item = await this.repoService.findOneById(id);\n\n    return this.voteService.voteByRepoId(item.id, userId);\n  }\n\n  @Put(\"/:owner/:repo/vote\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"voteOneByOwnerAndRepo\",\n    summary: \"Finds a repo by :owner and :repo and adds a vote\",\n  })\n  @ApiOkResponse({\n    description: \"Returns the repo vote\",\n    type: DbRepoToUserVotes,\n  })\n  @ApiNotFoundResponse({ description: \"Repo or vote not found\" })\n  @ApiConflictResponse({ description: \"You have already voted for this repo\" })\n  async voteOneByOwnerAndRepo(\n    @Param(\"owner\") owner: string,\n    @Param(\"repo\") repo: string,\n    @UserId() userId: number\n  ): Promise {\n    const item = await this.repoService.findOneByOwnerAndRepo(owner, repo);\n\n    return this.voteService.voteByRepoId(item.id, userId);\n  }\n\n  @Delete(\"/:id/vote\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"downVoteOneById\",\n    summary: \"Finds a repo by :id and removes existing vote\",\n  })\n  @ApiOkResponse({\n    description: \"Returns the repo vote\",\n    type: DbRepoToUserVotes,\n  })\n  @ApiNotFoundResponse({ description: \"Repo or vote not found\" })\n  @ApiConflictResponse({ description: \"You have already removed your vote\" })\n  @ApiParam({ name: \"id\", type: \"integer\" })\n  async downVoteOneById(@Param(\"id\", ParseIntPipe) id: number, @UserId() userId: number): Promise {\n    const item = await this.repoService.findOneById(id);\n\n    return this.voteService.downVoteByRepoId(item.id, userId);\n  }\n\n  @Delete(\"/:owner/:repo/vote\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"downVoteOneByOwnerAndRepo\",\n    summary: \"Finds a repo by :owner and :repo and removes existing vote\",\n  })\n  @ApiOkResponse({\n    description: \"Returns the repo vote\",\n    type: DbRepoToUserVotes,\n  })\n  @ApiNotFoundResponse({ description: \"Repo or vote not found\" })\n  @ApiConflictResponse({ description: \"You have already removed your vote\" })\n  async downVoteOneByOwnerAndRepo(\n    @Param(\"owner\") owner: string,\n    @Param(\"repo\") repo: string,\n    @UserId() userId: number\n  ): Promise {\n    const item = await this.repoService.findOneByOwnerAndRepo(owner, repo);\n\n    return this.voteService.downVoteByRepoId(item.id, userId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/StarModule.html":{"url":"modules/StarModule.html","title":"module - StarModule","body":"\n                   \n\n\n\n\n    Modules\n    StarModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_StarModule\n\n\n\ncluster_StarModule_imports\n\n\n\ncluster_StarModule_exports\n\n\n\ncluster_StarModule_providers\n\n\n\n\nRepoModule\n\nRepoModule\n\n\n\nStarModule\n\nStarModule\n\nStarModule -->\n\nRepoModule->StarModule\n\n\n\n\n\nStarService \n\nStarService \n\nStarService  -->\n\nStarModule->StarService \n\n\n\n\n\nStarService\n\nStarService\n\nStarModule -->\n\nStarService->StarModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/star/star.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            StarService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            RepoStarController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            RepoModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            StarService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\n\nimport { DbRepo } from \"../repo/entities/repo.entity\";\nimport { DbRepoToUserStars } from \"../repo/entities/repo.to.user.stars.entity\";\nimport { RepoModule } from \"../repo/repo.module\";\nimport { StarService } from \"./star.service\";\nimport { RepoStarController } from \"./repo-star.controller\";\n\n@Module({\n  imports: [TypeOrmModule.forFeature([DbRepo, DbRepoToUserStars], \"ApiConnection\"), RepoModule],\n  controllers: [RepoStarController],\n  providers: [StarService],\n  exports: [StarService],\n})\nexport class StarModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/StarService.html":{"url":"injectables/StarService.html","title":"injectable - StarService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  StarService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/star/star.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                baseQueryBuilder\n                            \n                            \n                                    Async\n                                downStarByRepoId\n                            \n                            \n                                    Async\n                                starByRepoId\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(repoStarRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/star/star.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        repoStarRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        baseQueryBuilder\n                        \n                    \n                \n            \n            \n                \nbaseQueryBuilder()\n                \n            \n\n\n            \n                \n                    Defined in src/star/star.service.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        downStarByRepoId\n                        \n                    \n                \n            \n            \n                \n                    \n                    downStarByRepoId(repoId: number, userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/star/star.service.ts:42\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    repoId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        starByRepoId\n                        \n                    \n                \n            \n            \n                \n                    \n                    starByRepoId(repoId: number, userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/star/star.service.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    repoId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ConflictException, Injectable, NotFoundException } from \"@nestjs/common\";\nimport { Repository } from \"typeorm\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { DbRepoToUserStars } from \"../repo/entities/repo.to.user.stars.entity\";\n\n@Injectable()\nexport class StarService {\n  constructor(\n    @InjectRepository(DbRepoToUserStars, \"ApiConnection\")\n    private repoStarRepository: Repository\n  ) {}\n\n  baseQueryBuilder() {\n    const builder = this.repoStarRepository.createQueryBuilder(\"r2stars\").withDeleted();\n\n    return builder;\n  }\n\n  async starByRepoId(repoId: number, userId: number): Promise {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder.where(\"r2stars.repo_id = :repoId\", { repoId }).andWhere(\"r2stars.user_id = :userId\", { userId });\n\n    const starExists = await queryBuilder.getOne();\n\n    if (starExists) {\n      if (!starExists.deleted_at) {\n        throw new ConflictException(\"You have already starred this repo\");\n      }\n\n      await this.repoStarRepository.restore(starExists.id);\n\n      return starExists;\n    }\n\n    return this.repoStarRepository.save({\n      repo_id: repoId,\n      user_id: userId,\n    });\n  }\n\n  async downStarByRepoId(repoId: number, userId: number): Promise {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder.where(\"r2stars.repo_id = :repoId\", { repoId }).andWhere(\"r2stars.user_id = :userId\", { userId });\n\n    const starExists = await queryBuilder.getOne();\n\n    if (!starExists) {\n      throw new NotFoundException(\"You have not starred this repo\");\n    }\n\n    if (starExists.deleted_at) {\n      throw new ConflictException(\"You have already removed your star\");\n    }\n\n    await this.repoStarRepository.softDelete(starExists.id);\n\n    return starExists;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/StargazeModule.html":{"url":"modules/StargazeModule.html","title":"module - StargazeModule","body":"\n                   \n\n\n\n\n    Modules\n    StargazeModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_StargazeModule\n\n\n\ncluster_StargazeModule_exports\n\n\n\ncluster_StargazeModule_providers\n\n\n\ncluster_StargazeModule_imports\n\n\n\n\nRepoModule\n\nRepoModule\n\n\n\nStargazeModule\n\nStargazeModule\n\nStargazeModule -->\n\nRepoModule->StargazeModule\n\n\n\n\n\nStargazeService \n\nStargazeService \n\nStargazeService  -->\n\nStargazeModule->StargazeService \n\n\n\n\n\nStargazeService\n\nStargazeService\n\nStargazeModule -->\n\nStargazeService->StargazeModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/stargaze/stargaze.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            StargazeService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            RepoStargazeController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            RepoModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            StargazeService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\n\nimport { DbRepo } from \"../repo/entities/repo.entity\";\nimport { DbRepoToUserStargazers } from \"../repo/entities/repo.to.user.stargazers.entity\";\nimport { RepoModule } from \"../repo/repo.module\";\nimport { StargazeService } from \"./stargaze.service\";\nimport { RepoStargazeController } from \"./repo-stargaze.controller\";\n\n@Module({\n  imports: [TypeOrmModule.forFeature([DbRepo, DbRepoToUserStargazers], \"ApiConnection\"), RepoModule],\n  controllers: [RepoStargazeController],\n  providers: [StargazeService],\n  exports: [StargazeService],\n})\nexport class StargazeModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/StargazeService.html":{"url":"injectables/StargazeService.html","title":"injectable - StargazeService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  StargazeService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/stargaze/stargaze.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                baseQueryBuilder\n                            \n                            \n                                    Async\n                                downStargazeByRepoId\n                            \n                            \n                                    Async\n                                stargazeByRepoId\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(repoStargazeRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/stargaze/stargaze.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        repoStargazeRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        baseQueryBuilder\n                        \n                    \n                \n            \n            \n                \nbaseQueryBuilder()\n                \n            \n\n\n            \n                \n                    Defined in src/stargaze/stargaze.service.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        downStargazeByRepoId\n                        \n                    \n                \n            \n            \n                \n                    \n                    downStargazeByRepoId(repoId: number, userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/stargaze/stargaze.service.ts:44\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    repoId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        stargazeByRepoId\n                        \n                    \n                \n            \n            \n                \n                    \n                    stargazeByRepoId(repoId: number, userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/stargaze/stargaze.service.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    repoId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ConflictException, Injectable, NotFoundException } from \"@nestjs/common\";\nimport { Repository } from \"typeorm\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { DbRepoToUserStargazers } from \"../repo/entities/repo.to.user.stargazers.entity\";\n\n@Injectable()\nexport class StargazeService {\n  constructor(\n    @InjectRepository(DbRepoToUserStargazers, \"ApiConnection\")\n    private repoStargazeRepository: Repository\n  ) {}\n\n  baseQueryBuilder() {\n    const builder = this.repoStargazeRepository.createQueryBuilder(\"r2stargazes\").withDeleted();\n\n    return builder;\n  }\n\n  async stargazeByRepoId(repoId: number, userId: number): Promise {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .where(\"r2stargazes.repo_id = :repoId\", { repoId })\n      .andWhere(\"r2stargazes.user_id = :userId\", { userId });\n\n    const stargazeExists = await queryBuilder.getOne();\n\n    if (stargazeExists) {\n      if (!stargazeExists.deleted_at) {\n        throw new ConflictException(\"You have already unfollowed this repo\");\n      }\n\n      await this.repoStargazeRepository.restore(stargazeExists.id);\n\n      return stargazeExists;\n    }\n\n    return this.repoStargazeRepository.save({\n      repo_id: repoId,\n      user_id: userId,\n    });\n  }\n\n  async downStargazeByRepoId(repoId: number, userId: number): Promise {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .where(\"r2stargazes.repo_id = :repoId\", { repoId })\n      .andWhere(\"r2stargazes.user_id = :userId\", { userId });\n\n    const stargazeExists = await queryBuilder.getOne();\n\n    if (!stargazeExists) {\n      throw new NotFoundException(\"You have not followed this repo\");\n    }\n\n    if (stargazeExists.deleted_at) {\n      throw new ConflictException(\"You have already unfollowed this repo\");\n    }\n\n    await this.repoStargazeRepository.softDelete(stargazeExists.id);\n\n    return stargazeExists;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/StripeModule.html":{"url":"modules/StripeModule.html","title":"module - StripeModule","body":"\n                   \n\n\n\n\n    Modules\n    StripeModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_StripeModule\n\n\n\ncluster_StripeModule_exports\n\n\n\ncluster_StripeModule_providers\n\n\n\n\nStripeService \n\nStripeService \n\n\n\nStripeModule\n\nStripeModule\n\nStripeService  -->\n\nStripeModule->StripeService \n\n\n\n\n\nStripeService\n\nStripeService\n\nStripeModule -->\n\nStripeService->StripeModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/stripe/stripe.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            StripeService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            StripeService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { StripeService } from \"./stripe.service\";\n\n@Module({\n  imports: [],\n  providers: [StripeService],\n  exports: [StripeService],\n})\nexport class StripeModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/StripeService.html":{"url":"injectables/StripeService.html","title":"injectable - StripeService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  StripeService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/stripe/stripe.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Optional\n                                _stripe\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addCustomer\n                            \n                            \n                                    Async\n                                createCheckoutSession\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    stripe\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/stripe/stripe.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addCustomer\n                        \n                    \n                \n            \n            \n                \n                    \n                    addCustomer(id: number, email?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/stripe/stripe.service.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createCheckoutSession\n                        \n                    \n                \n            \n            \n                \n                    \n                    createCheckoutSession(customer: string)\n                \n            \n\n\n            \n                \n                    Defined in src/stripe/stripe.service.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    customer\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Optional\n                        _stripe\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Stripe\n\n                    \n                \n                    \n                        \n                                Defined in src/stripe/stripe.service.ts:8\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        stripe\n                    \n                \n\n                \n                    \n                        getstripe()\n                    \n                \n                            \n                                \n                                    Defined in src/stripe/stripe.service.ts:12\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { ConfigService } from \"@nestjs/config\";\n\nimport Stripe from \"stripe\";\n\n@Injectable()\nexport class StripeService {\n  private _stripe?: Stripe;\n\n  constructor(private configService: ConfigService) {}\n\n  get stripe() {\n    if (!this._stripe) {\n      this._stripe = new Stripe(this.configService.get(\"stripe.secretKey\")!, { apiVersion: \"2022-11-15\" });\n    }\n\n    return this._stripe;\n  }\n\n  async addCustomer(id: number, email?: string) {\n    return this.stripe.customers.create({\n      metadata: { userId: id },\n      email,\n    });\n  }\n\n  async createCheckoutSession(customer: string) {\n    const session = await this.stripe.checkout.sessions.create({\n      payment_method_types: [\"card\"],\n      billing_address_collection: \"required\",\n      allow_promotion_codes: true,\n      customer,\n      line_items: [\n        {\n          price: this.configService.get(\"stripe.subscriptionPriceID\")!,\n          quantity: 1,\n        },\n      ],\n      mode: \"subscription\",\n      success_url: `${this.configService.get(\"stripe.subscriptionSessionCheckoutSuccessURL\")!}`,\n      cancel_url: `${this.configService.get(\"stripe.subscriptionSessionCancelURL\")!}`,\n    });\n\n    return { sessionId: session.id };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/StripeSubscriptionModule.html":{"url":"modules/StripeSubscriptionModule.html","title":"module - StripeSubscriptionModule","body":"\n                   \n\n\n\n\n    Modules\n    StripeSubscriptionModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_StripeSubscriptionModule\n\n\n\ncluster_StripeSubscriptionModule_exports\n\n\n\ncluster_StripeSubscriptionModule_providers\n\n\n\n\nStripeSubscriptionService \n\nStripeSubscriptionService \n\n\n\nStripeSubscriptionModule\n\nStripeSubscriptionModule\n\nStripeSubscriptionService  -->\n\nStripeSubscriptionModule->StripeSubscriptionService \n\n\n\n\n\nStripeSubscriptionService\n\nStripeSubscriptionService\n\nStripeSubscriptionModule -->\n\nStripeSubscriptionService->StripeSubscriptionModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/subscription/stripe-subscription.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            StripeSubscriptionService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            StripeSubscriptionService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\n\nimport { DbSubscription } from \"../subscription/stripe-subscription.dto\";\nimport { StripeSubscriptionService } from \"./stripe-subscription.service\";\n\n@Module({\n  imports: [TypeOrmModule.forFeature([DbSubscription], \"ApiConnection\")],\n  providers: [StripeSubscriptionService],\n  exports: [StripeSubscriptionService],\n})\nexport class StripeSubscriptionModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/StripeSubscriptionService.html":{"url":"injectables/StripeSubscriptionService.html","title":"injectable - StripeSubscriptionService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  StripeSubscriptionService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/subscription/stripe-subscription.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                baseQueryBuilder\n                            \n                            \n                                    Async\n                                upsertSubscription\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(subscriptionRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/subscription/stripe-subscription.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        subscriptionRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        baseQueryBuilder\n                        \n                    \n                \n            \n            \n                \nbaseQueryBuilder()\n                \n            \n\n\n            \n                \n                    Defined in src/subscription/stripe-subscription.service.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        upsertSubscription\n                        \n                    \n                \n            \n            \n                \n                    \n                    upsertSubscription(subscription: Partial)\n                \n            \n\n\n            \n                \n                    Defined in src/subscription/stripe-subscription.service.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    subscription\n                                    \n                                                Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { Repository } from \"typeorm\";\n\nimport { DbSubscription } from \"./stripe-subscription.dto\";\n\n@Injectable()\nexport class StripeSubscriptionService {\n  constructor(\n    @InjectRepository(DbSubscription, \"ApiConnection\")\n    private subscriptionRepository: Repository\n  ) {}\n\n  baseQueryBuilder() {\n    return this.subscriptionRepository.createQueryBuilder(\"subscription\");\n  }\n\n  async upsertSubscription(subscription: Partial) {\n    return this.subscriptionRepository.save(subscription);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/StripeWebHookModule.html":{"url":"modules/StripeWebHookModule.html","title":"module - StripeWebHookModule","body":"\n                   \n\n\n\n\n    Modules\n    StripeWebHookModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_StripeWebHookModule\n\n\n\ncluster_StripeWebHookModule_exports\n\n\n\ncluster_StripeWebHookModule_imports\n\n\n\n\nCustomerModule\n\nCustomerModule\n\n\n\nStripeWebHookModule\n\nStripeWebHookModule\n\nStripeWebHookModule -->\n\nCustomerModule->StripeWebHookModule\n\n\n\n\n\nStripeModule\n\nStripeModule\n\nStripeWebHookModule -->\n\nStripeModule->StripeWebHookModule\n\n\n\n\n\nStripeSubscriptionModule\n\nStripeSubscriptionModule\n\nStripeWebHookModule -->\n\nStripeSubscriptionModule->StripeWebHookModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nStripeWebHookModule -->\n\nUserModule->StripeWebHookModule\n\n\n\n\n\nStripeWebhookController \n\nStripeWebhookController \n\nStripeWebhookController  -->\n\nStripeWebHookModule->StripeWebhookController \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/stripe-webhook/webhook.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Controllers\n                    \n                        \n                            StripeWebhookController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            CustomerModule\n                        \n                        \n                            StripeModule\n                        \n                        \n                            StripeSubscriptionModule\n                        \n                        \n                            UserModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            StripeWebhookController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\n\nimport { StripeSubscriptionModule } from \"../subscription/stripe-subscription.module\";\nimport { CustomerModule } from \"../customer/customer.module\";\n\nimport { StripeModule } from \"../stripe/stripe.module\";\nimport { UserModule } from \"../user/user.module\";\nimport { StripeWebhookController } from \"./stripe-webhook.controller\";\n\n@Module({\n  imports: [StripeSubscriptionModule, CustomerModule, StripeModule, UserModule],\n  providers: [StripeWebhookController],\n  controllers: [StripeWebhookController],\n  exports: [StripeWebhookController],\n})\nexport class StripeWebHookModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/StripeWebhookController.html":{"url":"controllers/StripeWebhookController.html","title":"controller - StripeWebhookController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  StripeWebhookController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/stripe-webhook/stripe-webhook.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                stripe\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                handleStripeWebhook\n                            \n                            \n                                    Private\n                                    Async\n                                manageSubscriptionStatusChange\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        handleStripeWebhook\n                        \n                    \n                \n            \n            \n                \n                    \n                    handleStripeWebhook(req: RawBodyRequest)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/webhooks')@ApiOkResponse()\n                \n            \n\n            \n                \n                    Defined in src/stripe-webhook/stripe-webhook.controller.ts:82\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            RawBodyRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        Async\n                        manageSubscriptionStatusChange\n                        \n                    \n                \n            \n            \n                \n                    \n                    manageSubscriptionStatusChange(subscriptionId: string, customerId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/stripe-webhook/stripe-webhook.controller.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    subscriptionId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    customerId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { ConfigService } from \"@nestjs/config\";\nimport { BadRequestException, Controller, Logger, Post, RawBodyRequest, Req } from \"@nestjs/common\";\nimport { ApiOkResponse, ApiTags } from \"@nestjs/swagger\";\nimport Stripe from \"stripe\";\n\nimport { CustomerService } from \"../customer/customer.service\";\nimport { StripeSubscriptionService } from \"../subscription/stripe-subscription.service\";\nimport { StripeService } from \"../stripe/stripe.service\";\nimport { UserService } from \"../user/services/user.service\";\nimport { toDateTime } from \"./utils\";\n\nconst relevantEvents = new Set([\n  \"checkout.session.completed\",\n  \"customer.subscription.created\",\n  \"customer.subscription.updated\",\n  \"customer.subscription.deleted\",\n]);\n\n@ApiTags(\"Stripe service\")\n@Controller(\"stripe\")\nexport class StripeWebhookController {\n  private logger = new Logger(`StripeWebhook`);\n\n  constructor(\n    private customerService: CustomerService,\n    private stripeSubscriptionService: StripeSubscriptionService,\n    private stripeService: StripeService,\n    private configService: ConfigService,\n    private userService: UserService\n  ) {}\n\n  private async manageSubscriptionStatusChange(subscriptionId: string, customerId: string) {\n    const customerData = await this.customerService.findByCustomerId(customerId);\n\n    if (!customerData) {\n      throw new BadRequestException();\n    }\n\n    const { id: uuid } = customerData;\n    const userId = parseInt(`${uuid}`, 10);\n    const subscription = await this.stripeService.stripe.subscriptions.retrieve(subscriptionId, {\n      expand: [\"default_payment_method\"],\n    });\n\n    // upsert the latest status of the subscription object.\n    const subscriptionData = {\n      id: subscription.id,\n      user_id: userId,\n      metadata: JSON.stringify(subscription.metadata),\n      status: subscription.status as string,\n      price_id: subscription.items.data[0].price.id,\n      quantity: subscription.items.data.length,\n      cancel_at_period_end: subscription.cancel_at_period_end,\n      cancel_at: subscription.cancel_at ? toDateTime(subscription.cancel_at) : undefined,\n      canceled_at: subscription.canceled_at ? toDateTime(subscription.canceled_at) : undefined,\n      current_period_start_at: toDateTime(subscription.current_period_start),\n      current_period_end_at: toDateTime(subscription.current_period_end),\n      created_at: toDateTime(subscription.created),\n      ended_at: subscription.ended_at ? toDateTime(subscription.ended_at) : undefined,\n      trial_start_at: subscription.trial_start ? toDateTime(subscription.trial_start) : undefined,\n      trial_end_at: subscription.trial_end ? toDateTime(subscription.trial_end) : undefined,\n    };\n\n    try {\n      await this.stripeSubscriptionService.upsertSubscription(subscriptionData);\n\n      const userRole = subscription.status === \"active\" ? 50 : 10;\n\n      await this.userService.updateRole(userId, userRole);\n    } catch (e: unknown) {\n      this.logger.error(\n        `Error inserting/updating subscription [${subscription.id}] for user [${userId}]: ${(e as Error).toString()}`\n      );\n      throw new BadRequestException();\n    }\n\n    this.logger.log(`Inserted/updated subscription [${subscription.id}] for user [${userId}]`);\n  }\n\n  @Post(\"/webhooks\")\n  @ApiOkResponse()\n  async handleStripeWebhook(@Req() req: RawBodyRequest) {\n    const sig = (req.headers as unknown as Record)[\"stripe-signature\"];\n    const webhookSecret: string | undefined = this.configService.get(\"stripe.webhookSecret\");\n\n    if (!sig || !webhookSecret) {\n      return;\n    }\n\n    const event = this.stripeService.stripe.webhooks.constructEvent(req.rawBody!, sig, webhookSecret);\n\n    if (relevantEvents.has(event.type)) {\n      const subEvents = [\n        \"customer.subscription.created\",\n        \"customer.subscription.updated\",\n        \"customer.subscription.deleted\",\n      ];\n\n      if (subEvents.includes(event.type)) {\n        const subscription = event.data.object as Stripe.Subscription;\n\n        await this.manageSubscriptionStatusChange(subscription.id, subscription.customer as string);\n      } else if (event.type === \"checkout.session.completed\") {\n        const checkoutSession = event.data.object as Stripe.Checkout.Session;\n\n        if (checkoutSession.mode === \"subscription\") {\n          const subscriptionId = checkoutSession.subscription;\n\n          await this.manageSubscriptionStatusChange(subscriptionId as string, checkoutSession.customer as string);\n        }\n      } else {\n        throw new BadRequestException();\n      }\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/SubmitModule.html":{"url":"modules/SubmitModule.html","title":"module - SubmitModule","body":"\n                   \n\n\n\n\n    Modules\n    SubmitModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_SubmitModule\n\n\n\ncluster_SubmitModule_exports\n\n\n\ncluster_SubmitModule_providers\n\n\n\ncluster_SubmitModule_imports\n\n\n\n\nRepoModule\n\nRepoModule\n\n\n\nSubmitModule\n\nSubmitModule\n\nSubmitModule -->\n\nRepoModule->SubmitModule\n\n\n\n\n\nSubmitService \n\nSubmitService \n\nSubmitService  -->\n\nSubmitModule->SubmitService \n\n\n\n\n\nSubmitService\n\nSubmitService\n\nSubmitModule -->\n\nSubmitService->SubmitModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/submit/submit.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            SubmitService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            RepoSubmitController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            RepoModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            SubmitService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\n\nimport { DbRepo } from \"../repo/entities/repo.entity\";\nimport { DbRepoToUserSubmissions } from \"../repo/entities/repo.to.user.submissions.entity\";\nimport { RepoModule } from \"../repo/repo.module\";\nimport { SubmitService } from \"./submit.service\";\nimport { RepoSubmitController } from \"./repo-submit.controller\";\n\n@Module({\n  imports: [TypeOrmModule.forFeature([DbRepo, DbRepoToUserSubmissions], \"ApiConnection\"), RepoModule],\n  controllers: [RepoSubmitController],\n  providers: [SubmitService],\n  exports: [SubmitService],\n})\nexport class SubmitModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SubmitService.html":{"url":"injectables/SubmitService.html","title":"injectable - SubmitService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SubmitService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/submit/submit.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                baseQueryBuilder\n                            \n                            \n                                    Async\n                                downSubmitByRepoId\n                            \n                            \n                                    Async\n                                submitByRepoId\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(repoSubmitRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/submit/submit.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        repoSubmitRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        baseQueryBuilder\n                        \n                    \n                \n            \n            \n                \nbaseQueryBuilder()\n                \n            \n\n\n            \n                \n                    Defined in src/submit/submit.service.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        downSubmitByRepoId\n                        \n                    \n                \n            \n            \n                \n                    \n                    downSubmitByRepoId(repoId: number, userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/submit/submit.service.ts:42\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    repoId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        submitByRepoId\n                        \n                    \n                \n            \n            \n                \n                    \n                    submitByRepoId(repoId: number, userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/submit/submit.service.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    repoId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ConflictException, Injectable, NotFoundException } from \"@nestjs/common\";\nimport { Repository } from \"typeorm\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { DbRepoToUserSubmissions } from \"../repo/entities/repo.to.user.submissions.entity\";\n\n@Injectable()\nexport class SubmitService {\n  constructor(\n    @InjectRepository(DbRepoToUserSubmissions, \"ApiConnection\")\n    private repoSubmitRepository: Repository\n  ) {}\n\n  baseQueryBuilder() {\n    const builder = this.repoSubmitRepository.createQueryBuilder(\"r2submits\").withDeleted();\n\n    return builder;\n  }\n\n  async submitByRepoId(repoId: number, userId: number): Promise {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder.where(\"r2submits.repo_id = :repoId\", { repoId }).andWhere(\"r2submits.user_id = :userId\", { userId });\n\n    const submitExists = await queryBuilder.getOne();\n\n    if (submitExists) {\n      if (!submitExists.deleted_at) {\n        throw new ConflictException(\"You have already submitd for this repo\");\n      }\n\n      await this.repoSubmitRepository.restore(submitExists.id);\n\n      return submitExists;\n    }\n\n    return this.repoSubmitRepository.save({\n      repo_id: repoId,\n      user_id: userId,\n    });\n  }\n\n  async downSubmitByRepoId(repoId: number, userId: number): Promise {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder.where(\"r2submits.repo_id = :repoId\", { repoId }).andWhere(\"r2submits.user_id = :userId\", { userId });\n\n    const submitExists = await queryBuilder.getOne();\n\n    if (!submitExists) {\n      throw new NotFoundException(\"You have not submitd for this repo\");\n    }\n\n    if (submitExists.deleted_at) {\n      throw new ConflictException(\"You have already removed your submit\");\n    }\n\n    await this.repoSubmitRepository.softDelete(submitExists.id);\n\n    return submitExists;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SupabaseAuthDto.html":{"url":"classes/SupabaseAuthDto.html","title":"class - SupabaseAuthDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SupabaseAuthDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dtos/supabase-auth-response.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                    Optional\n                                bio\n                            \n                            \n                                    Readonly\n                                    Optional\n                                company\n                            \n                            \n                                    Readonly\n                                    Optional\n                                confirmed_at\n                            \n                            \n                                    Readonly\n                                    Optional\n                                coupon_code\n                            \n                            \n                                    Readonly\n                                    Optional\n                                created_at\n                            \n                            \n                                    Readonly\n                                    Optional\n                                discord_url\n                            \n                            \n                                    Readonly\n                                    Optional\n                                display_local_time\n                            \n                            \n                                    Readonly\n                                    Optional\n                                email\n                            \n                            \n                                    Readonly\n                                    Optional\n                                github_sponsors_url\n                            \n                            \n                                    Readonly\n                                id\n                            \n                            \n                                    Readonly\n                                    Optional\n                                insights_count\n                            \n                            \n                                    Readonly\n                                    Optional\n                                insights_role\n                            \n                            \n                                    Readonly\n                                    Optional\n                                is_onboarded\n                            \n                            \n                                    Readonly\n                                    Optional\n                                is_waitlisted\n                            \n                            \n                                    Readonly\n                                    Optional\n                                last_sign_in_at\n                            \n                            \n                                    Readonly\n                                    Optional\n                                linkedin_url\n                            \n                            \n                                    Readonly\n                                    Optional\n                                location\n                            \n                            \n                                    Readonly\n                                    Optional\n                                name\n                            \n                            \n                                    Readonly\n                                    Optional\n                                notification_count\n                            \n                            \n                                    Readonly\n                                    Optional\n                                role\n                            \n                            \n                                    Readonly\n                                    Optional\n                                twitter_username\n                            \n                            \n                                    Readonly\n                                    Optional\n                                updated_at\n                            \n                            \n                                    Readonly\n                                    Optional\n                                url\n                            \n                            \n                                    Readonly\n                                    Optional\n                                user_name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        bio\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'User bio information', example: 'OpenSauced User'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/supabase-auth-response.dto.ts:75\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        company\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'User company information', example: 'OpenSauced'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/supabase-auth-response.dto.ts:99\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        confirmed_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Timestamp representing supabase user registration confirmation', example: '2016-10-19 13:24:51.000000'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/supabase-auth-response.dto.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        coupon_code\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Coupon Code', example: 'saucy'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/supabase-auth-response.dto.ts:149\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Timestamp representing supabase user creation', example: '2016-10-19 13:24:51.000000'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/supabase-auth-response.dto.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        discord_url\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Discord URL', example: 'https://discord.gg/opensauced'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/supabase-auth-response.dto.ts:129\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        display_local_time\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'User display local time information', example: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/supabase-auth-response.dto.ts:111\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Supabase authenticated user email', example: 'vortex@opensauced.pizza'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/supabase-auth-response.dto.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        github_sponsors_url\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'GitHub Sponsors URL', example: 'https://github.com/sponsors/open-sauced'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/supabase-auth-response.dto.ts:123\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Supabase authenticated unique user identifier', example: 237133})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/supabase-auth-response.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        insights_count\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Unread Insight Pagees Count', example: 2, type: 'integer'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/supabase-auth-response.dto.ts:143\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        insights_role\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Authenticated User's Insights Role', example: 10, type: 'integer'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/supabase-auth-response.dto.ts:69\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        is_onboarded\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Flag indicated whether the user is onboarded', example: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/supabase-auth-response.dto.ts:56\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        is_waitlisted\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Flag indicated whether the user is waitlisted', example: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/supabase-auth-response.dto.ts:62\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        last_sign_in_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Timestamp representing supabase user last sign in', example: '2016-10-19 13:24:51.000000'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/supabase-auth-response.dto.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        linkedin_url\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'LinkedIn URL', example: 'https://www.linkedin.com/in/brianldouglas'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/supabase-auth-response.dto.ts:117\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        location\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'User location information', example: 'San Francisco, CA'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/supabase-auth-response.dto.ts:105\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'User name information', example: 'MrPizza'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/supabase-auth-response.dto.ts:81\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        notification_count\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Unread User Notification Count', example: 5, type: 'integer'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/supabase-auth-response.dto.ts:136\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Supabase authenticated user role', example: 'authenticated'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/supabase-auth-response.dto.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        twitter_username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'User Twitter information', example: 'saucedopen'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/supabase-auth-response.dto.ts:93\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Timestamp representing supabase user last update', example: '2016-10-19 13:24:51.000000'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/supabase-auth-response.dto.ts:50\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        url\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'User website', example: 'https://opensauced.pizza'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/supabase-auth-response.dto.ts:87\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        user_name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Supabase authenticated user login name', example: '0-vortex'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/supabase-auth-response.dto.ts:14\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from \"@nestjs/swagger\";\n\nexport class SupabaseAuthDto {\n  @ApiProperty({\n    description: \"Supabase authenticated unique user identifier\",\n    example: 237133,\n  })\n  readonly id: string;\n\n  @ApiPropertyOptional({\n    description: \"Supabase authenticated user login name\",\n    example: \"0-vortex\",\n  })\n  readonly user_name?: string;\n\n  @ApiPropertyOptional({\n    description: \"Supabase authenticated user role\",\n    example: \"authenticated\",\n  })\n  readonly role?: string;\n\n  @ApiPropertyOptional({\n    description: \"Supabase authenticated user email\",\n    example: \"vortex@opensauced.pizza\",\n  })\n  readonly email?: string;\n\n  @ApiPropertyOptional({\n    description: \"Timestamp representing supabase user registration confirmation\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  readonly confirmed_at?: string;\n\n  @ApiPropertyOptional({\n    description: \"Timestamp representing supabase user last sign in\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  readonly last_sign_in_at?: string;\n\n  @ApiPropertyOptional({\n    description: \"Timestamp representing supabase user creation\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  readonly created_at?: string;\n\n  @ApiPropertyOptional({\n    description: \"Timestamp representing supabase user last update\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  readonly updated_at?: string;\n\n  @ApiPropertyOptional({\n    description: \"Flag indicated whether the user is onboarded\",\n    example: false,\n  })\n  readonly is_onboarded?: boolean;\n\n  @ApiPropertyOptional({\n    description: \"Flag indicated whether the user is waitlisted\",\n    example: false,\n  })\n  readonly is_waitlisted?: boolean;\n\n  @ApiPropertyOptional({\n    description: \"Authenticated User's Insights Role\",\n    example: 10,\n    type: \"integer\",\n  })\n  readonly insights_role?: number;\n\n  @ApiPropertyOptional({\n    description: \"User bio information\",\n    example: \"OpenSauced User\",\n  })\n  readonly bio?: string;\n\n  @ApiPropertyOptional({\n    description: \"User name information\",\n    example: \"MrPizza\",\n  })\n  readonly name?: string;\n\n  @ApiPropertyOptional({\n    description: \"User website\",\n    example: \"https://opensauced.pizza\",\n  })\n  readonly url?: string;\n\n  @ApiPropertyOptional({\n    description: \"User Twitter information\",\n    example: \"saucedopen\",\n  })\n  readonly twitter_username?: string;\n\n  @ApiPropertyOptional({\n    description: \"User company information\",\n    example: \"OpenSauced\",\n  })\n  readonly company?: string;\n\n  @ApiPropertyOptional({\n    description: \"User location information\",\n    example: \"San Francisco, CA\",\n  })\n  readonly location?: string;\n\n  @ApiPropertyOptional({\n    description: \"User display local time information\",\n    example: false,\n  })\n  readonly display_local_time?: boolean;\n\n  @ApiPropertyOptional({\n    description: \"LinkedIn URL\",\n    example: \"https://www.linkedin.com/in/brianldouglas\",\n  })\n  readonly linkedin_url?: string;\n\n  @ApiPropertyOptional({\n    description: \"GitHub Sponsors URL\",\n    example: \"https://github.com/sponsors/open-sauced\",\n  })\n  readonly github_sponsors_url?: string;\n\n  @ApiPropertyOptional({\n    description: \"Discord URL\",\n    example: \"https://discord.gg/opensauced\",\n  })\n  readonly discord_url?: string;\n\n  @ApiPropertyOptional({\n    description: \"Unread User Notification Count\",\n    example: 5,\n    type: \"integer\",\n  })\n  readonly notification_count?: number;\n\n  @ApiPropertyOptional({\n    description: \"Unread Insight Pagees Count\",\n    example: 2,\n    type: \"integer\",\n  })\n  readonly insights_count?: number;\n\n  @ApiPropertyOptional({\n    description: \"Coupon Code\",\n    example: \"saucy\",\n  })\n  readonly coupon_code?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SupabaseGuard.html":{"url":"injectables/SupabaseGuard.html","title":"injectable - SupabaseGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SupabaseGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/supabase.guard.ts\n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { AuthGuard } from \"@nestjs/passport\";\n\n@Injectable()\nexport class SupabaseGuard extends AuthGuard(\"supabase\") {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SupabaseStrategy.html":{"url":"injectables/SupabaseStrategy.html","title":"injectable - SupabaseStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SupabaseStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/supabase.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                authenticate\n                            \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Public\n                        constructor()\n                    \n                \n                        \n                            \n                                Defined in src/auth/supabase.strategy.ts:7\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        authenticate\n                        \n                    \n                \n            \n            \n                \nauthenticate(req: never)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/supabase.strategy.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            never\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(user: SupabaseAuthUser)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/supabase.strategy.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                SupabaseAuthUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { PassportStrategy } from \"@nestjs/passport\";\nimport { ExtractJwt } from \"passport-jwt\";\nimport { SupabaseAuthStrategy, SupabaseAuthUser } from \"nestjs-supabase-auth\";\n\n@Injectable()\nexport class SupabaseStrategy extends PassportStrategy(SupabaseAuthStrategy, \"supabase\") {\n  public constructor() {\n    super({\n      supabaseUrl: process.env.SUPABASE_URL,\n      supabaseKey: process.env.SUPABASE_API_KEY,\n      supabaseOptions: {},\n      supabaseJwtSecret: process.env.SUPABASE_JWT_SECRET,\n      extractor: ExtractJwt.fromAuthHeaderAsBearerToken(),\n    });\n  }\n\n  async validate(user: SupabaseAuthUser) {\n    return super.validate(user);\n  }\n\n  authenticate(req: never) {\n    super.authenticate(req);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/TierModule.html":{"url":"modules/TierModule.html","title":"module - TierModule","body":"\n                   \n\n\n\n\n    Modules\n    TierModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_TierModule\n\n\n\ncluster_TierModule_providers\n\n\n\ncluster_TierModule_exports\n\n\n\n\nTierService \n\nTierService \n\n\n\nTierModule\n\nTierModule\n\nTierService  -->\n\nTierModule->TierService \n\n\n\n\n\nTierService\n\nTierService\n\nTierModule -->\n\nTierService->TierModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/tier/tier.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            TierService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            TierService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { TierService } from \"./tier.service\";\n\n@Module({\n  providers: [TierService],\n  exports: [TierService],\n})\nexport class TierModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TierService.html":{"url":"injectables/TierService.html","title":"injectable - TierService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TierService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tier/tier.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                checkAddOrg\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/tier/tier.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        checkAddOrg\n                        \n                    \n                \n            \n            \n                \n                    \n                    checkAddOrg(userId: number, userDetails: literal type)\n                \n            \n\n\n            \n                \n                    Defined in src/tier/tier.service.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userDetails\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(TierService.name)\n                    \n                \n                    \n                        \n                                Defined in src/tier/tier.service.ts:7\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Logger } from \"@nestjs/common\";\nimport { ConfigService } from \"@nestjs/config\";\nimport { Features, lookupOrg, subscribe } from \"tier\";\n\n@Injectable()\nexport class TierService {\n  private logger = new Logger(TierService.name);\n\n  constructor(private configService: ConfigService) {}\n\n  async checkAddOrg(userId: number, userDetails: { email: string; name: string; login: string }) {\n    try {\n      // check to see if the user is registered\n      await lookupOrg(`org:${userId}`);\n    } catch (e) {\n      const { email, name, login } = userDetails;\n\n      // use free account plan\n      const plan: Features = this.configService.get(\"tier.freePlan\")! as Features;\n\n      try {\n        // register the user with a free account\n        await subscribe(`org:${userId}`, plan, {\n          info: {\n            email,\n            name,\n            description: `OpenSauced Free Account`,\n            phone: \"\",\n            metadata: {\n              login,\n            },\n          },\n        });\n      } catch (e: unknown) {\n        if (e instanceof Error) {\n          this.logger.error(`Unable to register account for ${login}`);\n        }\n      }\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TopProjectsDto.html":{"url":"classes/TopProjectsDto.html","title":"class - TopProjectsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TopProjectsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user-lists/dtos/top-projects.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                    Optional\n                                range\n                            \n                            \n                                repo_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        range\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 30\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Range in days', default: 30, type: 'integer'})@Type(undefined)@IsIn(['7', '30', '90'])@IsInt()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-lists/dtos/top-projects.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        repo_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Repo ID', type: 'integer', example: 234343})@Type(undefined)@IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-lists/dtos/top-projects.dto.ts:24\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from \"@nestjs/swagger\";\nimport { Type } from \"class-transformer\";\nimport { IsIn, IsInt, IsNumber, IsOptional } from \"class-validator\";\n\nexport class TopProjectsDto {\n  @ApiPropertyOptional({\n    description: \"Range in days\",\n    default: 30,\n    type: \"integer\",\n  })\n  @Type(() => Number)\n  @IsIn([7, 30, 90])\n  @IsInt()\n  @IsOptional()\n  readonly range?: number = 30;\n\n  @ApiProperty({\n    description: \"Repo ID\",\n    type: \"integer\",\n    example: 234343,\n  })\n  @Type(() => Number)\n  @IsNumber()\n  repo_id: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TopUsersDto.html":{"url":"classes/TopUsersDto.html","title":"class - TopUsersDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TopUsersDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dtos/top-users.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                    Optional\n                                limit\n                            \n                            \n                                    Readonly\n                                    Optional\n                                page\n                            \n                            \n                                    Readonly\n                                    Optional\n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    skip\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 50\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, maximum: 1000, default: 10, type: 'integer'})@Type(undefined)@IsInt()@Min(1)@Max(10000)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/top-users.dto.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, default: 1, type: 'integer'})@Type(undefined)@IsInt()@Min(1)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/top-users.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 0\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'User ID to filter followings from the list', type: 'integer'})@IsOptional()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/top-users.dto.ts:23\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        skip\n                    \n                \n\n                \n                    \n                        getskip()\n                    \n                \n                            \n                                \n                                    Defined in src/user/dtos/top-users.dto.ts:38\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { ApiPropertyOptional } from \"@nestjs/swagger\";\nimport { Type } from \"class-transformer\";\nimport { IsInt, Min, IsOptional, Max } from \"class-validator\";\n\nexport class TopUsersDto {\n  @ApiPropertyOptional({\n    minimum: 1,\n    default: 1,\n    type: \"integer\",\n  })\n  @Type(() => Number)\n  @IsInt()\n  @Min(1)\n  @IsOptional()\n  readonly page?: number = 1;\n\n  @ApiPropertyOptional({\n    description: \"User ID to filter followings from the list\",\n    type: \"integer\",\n  })\n  @IsOptional()\n  @Type(() => Number)\n  readonly userId?: number = 0;\n\n  @ApiPropertyOptional({\n    minimum: 1,\n    maximum: 1000,\n    default: 10,\n    type: \"integer\",\n  })\n  @Type(() => Number)\n  @IsInt()\n  @Min(1)\n  @Max(10000)\n  @IsOptional()\n  readonly limit?: number = 50;\n\n  get skip(): number {\n    return ((this.page ?? 1) - 1) * (this.limit ?? 50);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateEndorsementDto.html":{"url":"classes/UpdateEndorsementDto.html","title":"class - UpdateEndorsementDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateEndorsementDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/endorsement/dto/update-endorsement.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from \"@nestjs/swagger\";\nimport { CreateEndorsementDto } from \"./create-endorsement.dto\";\n\nexport class UpdateEndorsementDto extends PartialType(CreateEndorsementDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateInsightDto.html":{"url":"classes/UpdateInsightDto.html","title":"class - UpdateInsightDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateInsightDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/insight/dtos/update-insight.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        CreateInsightDto\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                is_public\n                            \n                            \n                                name\n                            \n                            \n                                repos\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        is_public\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Insight Page Visibility', type: Boolean, example: false})@IsBoolean()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         CreateInsightDto\n\n                            \n                        \n                    \n                        \n                                Defined in         CreateInsightDto:22\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Insight Page Name', type: String, example: 'My Team'})@IsString()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         CreateInsightDto\n\n                            \n                        \n                    \n                        \n                                Defined in         CreateInsightDto:14\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        repos\n                        \n                    \n                \n            \n                \n                    \n                        Type :         RepoInfo[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'An array of repository information objects', isArray: true, type: RepoInfo, example: undefined})@Type(undefined)@IsArray()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         CreateInsightDto\n\n                            \n                        \n                    \n                        \n                                Defined in         CreateInsightDto:32\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { CreateInsightDto } from \"./create-insight.dto\";\n\nexport class UpdateInsightDto extends CreateInsightDto {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateInsightMemberDto.html":{"url":"classes/UpdateInsightMemberDto.html","title":"class - UpdateInsightMemberDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateInsightMemberDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/insight/dtos/update-insight-member.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                access\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        access\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Insight Member Access', type: String, example: 'view'})@IsString()@IsIn(['view', 'edit', 'admin', 'pending'])\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/dtos/update-insight-member.dto.ts:12\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsString, IsIn } from \"class-validator\";\n\nexport class UpdateInsightMemberDto {\n  @ApiProperty({\n    description: \"Insight Member Access\",\n    type: String,\n    example: \"view\",\n  })\n  @IsString()\n  @IsIn([\"view\", \"edit\", \"admin\", \"pending\"])\n  access: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserCollaborationDto.html":{"url":"classes/UpdateUserCollaborationDto.html","title":"class - UpdateUserCollaborationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserCollaborationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dtos/update-user-collaboration.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                status\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Collaboration Request Status', type: String, example: 'accept'})@IsString()@IsIn(['accept', 'ignore'])\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/update-user-collaboration.dto.ts:12\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsIn, IsString } from \"class-validator\";\n\nexport class UpdateUserCollaborationDto {\n  @ApiProperty({\n    description: \"Collaboration Request Status\",\n    type: String,\n    example: \"accept\",\n  })\n  @IsString()\n  @IsIn([\"accept\", \"ignore\"])\n  status: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserDto.html":{"url":"classes/UpdateUserDto.html","title":"class - UpdateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dtos/update-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                bio\n                            \n                            \n                                    Public\n                                    Optional\n                                company\n                            \n                            \n                                    Readonly\n                                    Optional\n                                discord_url\n                            \n                            \n                                    Public\n                                    Optional\n                                display_local_time\n                            \n                            \n                                    Public\n                                email\n                            \n                            \n                                    Readonly\n                                    Optional\n                                github_sponsors_url\n                            \n                            \n                                    Readonly\n                                    Optional\n                                linkedin_url\n                            \n                            \n                                    Public\n                                    Optional\n                                location\n                            \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                    Optional\n                                timezone\n                            \n                            \n                                    Public\n                                    Optional\n                                twitter_username\n                            \n                            \n                                    Public\n                                    Optional\n                                url\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        bio\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'User Profile Bio', type: String, example: 'I make the pizza'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/update-user.dto.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        company\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'User Profile Company', type: String, example: 'OpenSauced'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/update-user.dto.ts:59\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        discord_url\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Discord URL', example: 'https://discord.gg/opensauced'})@IsUrl()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/update-user.dto.ts:110\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        display_local_time\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Display user local time in profile', type: Boolean, example: false})@IsBoolean()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/update-user.dto.ts:77\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'User Profile Email', type: String, example: 'hello@opensauced.pizza'})@IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/update-user.dto.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        github_sponsors_url\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'GitHub Sponsors URL', example: 'https://github.com/sponsors/open-sauced'})@IsUrl()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/update-user.dto.ts:102\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        linkedin_url\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'LinkedIn URL', example: 'https://www.linkedin.com/in/brianldouglas'})@IsUrl()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/update-user.dto.ts:94\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        location\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'User Profile Location', type: String, example: 'OpenSauced'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/update-user.dto.ts:68\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'User Profile Name', type: String, example: 'Pizza Maker'})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/update-user.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        timezone\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'User timezone in UTC', type: String, example: 'UTC-5'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/update-user.dto.ts:86\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        twitter_username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'User Profile Twitter Username', type: String, example: 'saucedopen'})@IsString()@Matches(/^(?!.*?admin)(?!.*?twitter)\\w{0,15}$/i, {message: 'Twitter username can only contain letters, numbers, and underscores. It also cannot contain reserved Twitter usernames (twitter or admin).'})@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/update-user.dto.ts:50\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        url\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'User Profile URL', type: String, example: 'https://opensauced.pizza'})@IsUrl()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/update-user.dto.ts:37\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from \"@nestjs/swagger\";\nimport { IsBoolean, IsEmail, IsOptional, IsString, IsUrl, Matches } from \"class-validator\";\n\nexport class UpdateUserDto {\n  @ApiProperty({\n    description: \"User Profile Name\",\n    type: String,\n    example: \"Pizza Maker\",\n  })\n  @IsString()\n  public name: string;\n\n  @ApiProperty({\n    description: \"User Profile Email\",\n    type: String,\n    example: \"hello@opensauced.pizza\",\n  })\n  @IsEmail()\n  public email: string;\n\n  @ApiPropertyOptional({\n    description: \"User Profile Bio\",\n    type: String,\n    example: \"I make the pizza\",\n  })\n  @IsString()\n  @IsOptional()\n  public bio?: string;\n\n  @ApiPropertyOptional({\n    description: \"User Profile URL\",\n    type: String,\n    example: \"https://opensauced.pizza\",\n  })\n  @IsUrl()\n  @IsOptional()\n  public url?: string;\n\n  @ApiPropertyOptional({\n    description: \"User Profile Twitter Username\",\n    type: String,\n    example: \"saucedopen\",\n  })\n  @IsString()\n  @Matches(/^(?!.*?admin)(?!.*?twitter)\\w{0,15}$/i, {\n    message:\n      \"Twitter username can only contain letters, numbers, and underscores. It also cannot contain reserved Twitter usernames (twitter or admin).\",\n  })\n  @IsOptional()\n  public twitter_username?: string;\n\n  @ApiPropertyOptional({\n    description: \"User Profile Company\",\n    type: String,\n    example: \"OpenSauced\",\n  })\n  @IsString()\n  @IsOptional()\n  public company?: string;\n\n  @ApiPropertyOptional({\n    description: \"User Profile Location\",\n    type: String,\n    example: \"OpenSauced\",\n  })\n  @IsString()\n  @IsOptional()\n  public location?: string;\n\n  @ApiPropertyOptional({\n    description: \"Display user local time in profile\",\n    type: Boolean,\n    example: false,\n  })\n  @IsBoolean()\n  @IsOptional()\n  public display_local_time?: boolean;\n\n  @ApiPropertyOptional({\n    description: \"User timezone in UTC\",\n    type: String,\n    example: \"UTC-5\",\n  })\n  @IsString()\n  @IsOptional()\n  public timezone?: string;\n\n  @ApiPropertyOptional({\n    description: \"LinkedIn URL\",\n    example: \"https://www.linkedin.com/in/brianldouglas\",\n  })\n  @IsUrl()\n  @IsOptional()\n  readonly linkedin_url?: string;\n\n  @ApiPropertyOptional({\n    description: \"GitHub Sponsors URL\",\n    example: \"https://github.com/sponsors/open-sauced\",\n  })\n  @IsUrl()\n  @IsOptional()\n  readonly github_sponsors_url?: string;\n\n  @ApiPropertyOptional({\n    description: \"Discord URL\",\n    example: \"https://discord.gg/opensauced\",\n  })\n  @IsUrl()\n  @IsOptional()\n  readonly discord_url?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserEmailPreferencesDto.html":{"url":"classes/UpdateUserEmailPreferencesDto.html","title":"class - UpdateUserEmailPreferencesDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserEmailPreferencesDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dtos/update-user-email-prefs.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                display_email\n                            \n                            \n                                    Public\n                                receive_collaboration\n                            \n                            \n                                    Public\n                                receive_product_updates\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        display_email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'User Display Public Email', type: Boolean, example: false})@IsBoolean()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/update-user-email-prefs.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        receive_collaboration\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'User Recieve Collaboration Requests', type: Boolean, example: false})@IsBoolean()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/update-user-email-prefs.dto.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        receive_product_updates\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'User Recieve Email Product Updates', type: Boolean, example: false})@IsBoolean()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/update-user-email-prefs.dto.ts:27\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsBoolean } from \"class-validator\";\n\nexport class UpdateUserEmailPreferencesDto {\n  @ApiProperty({\n    description: \"User Display Public Email\",\n    type: Boolean,\n    example: false,\n  })\n  @IsBoolean()\n  public display_email: boolean;\n\n  @ApiProperty({\n    description: \"User Recieve Collaboration Requests\",\n    type: Boolean,\n    example: false,\n  })\n  @IsBoolean()\n  public receive_collaboration: boolean;\n\n  @ApiProperty({\n    description: \"User Recieve Email Product Updates\",\n    type: Boolean,\n    example: false,\n  })\n  @IsBoolean()\n  public receive_product_updates: boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserProfileInterestsDto.html":{"url":"classes/UpdateUserProfileInterestsDto.html","title":"class - UpdateUserProfileInterestsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserProfileInterestsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dtos/update-user-interests.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                interests\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        interests\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'An array of interests', type: 'string', isArray: true, example: undefined})@IsArray()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/update-user-interests.dto.ts:12\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsArray } from \"class-validator\";\n\nexport class UpdateUserProfileInterestsDto {\n  @ApiProperty({\n    description: \"An array of interests\",\n    type: \"string\",\n    isArray: true,\n    example: [\"javascript\", \"react\"],\n  })\n  @IsArray()\n  public interests: string[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserCollaborationController.html":{"url":"controllers/UserCollaborationController.html","title":"controller - UserCollaborationController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserCollaborationController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user-collaboration.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                user/collaborations\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addUserCollaboration\n                            \n                            \n                                    Async\n                                findAllUserCollaborations\n                            \n                            \n                                    Async\n                                removeUserCollaborationById\n                            \n                            \n                                    Async\n                                updateUserCollaboration\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addUserCollaboration\n                        \n                    \n                \n            \n            \n                \n                    \n                    addUserCollaboration(createUserCollaborationDto: CreateUserCollaborationDto, user: SupabaseAuthUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/')@ApiOperation({operationId: 'addUserCollaboration', summary: 'Adds a new collaboration request for the user'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOkResponse({type: DbUserCollaboration})@ApiNotFoundResponse({description: 'Unable to add user collaboration'})@ApiBadRequestResponse({description: 'Invalid request'})@ApiConflictResponse({description: 'The requested user is not accepting collaboration requests'})@ApiBody({type: CreateUserCollaborationDto})\n                \n            \n\n            \n                \n                    Defined in src/user/user-collaboration.controller.ts:74\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createUserCollaborationDto\n                                    \n                                                CreateUserCollaborationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                SupabaseAuthUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllUserCollaborations\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllUserCollaborations(pageOptionsDto: PageOptionsDto, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/')@ApiOperation({operationId: 'findAllUserCollaborations', summary: 'Listing all collaborations for the authenticated user'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiPaginatedResponse(DbUserCollaboration)@ApiOkResponse({type: DbUserCollaboration})\n                \n            \n\n            \n                \n                    Defined in src/user/user-collaboration.controller.ts:55\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        removeUserCollaborationById\n                        \n                    \n                \n            \n            \n                \n                    \n                    removeUserCollaborationById(id: string, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')@ApiOperation({operationId: 'removeUserCollaborationById', summary: 'Removes the user collaboration request'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiNotFoundResponse({description: 'Unable to remove user collaboration'})@ApiBadRequestResponse({description: 'Invalid request'})\n                \n            \n\n            \n                \n                    Defined in src/user/user-collaboration.controller.ts:137\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateUserCollaboration\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateUserCollaboration(id: string, userId: number, updateUserCollaborationDto: UpdateUserCollaborationDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')@ApiOperation({operationId: 'updateUserCollaboration', summary: 'Updates a user collaboration'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOkResponse({type: DbUserCollaboration})@ApiNotFoundResponse({description: 'Unable to find user collaboration'})@ApiBadRequestResponse({description: 'Invalid request'})@ApiBody({type: UpdateUserCollaborationDto})\n                \n            \n\n            \n                \n                    Defined in src/user/user-collaboration.controller.ts:110\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateUserCollaborationDto\n                                    \n                                                UpdateUserCollaborationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  ConflictException,\n  Controller,\n  Delete,\n  Get,\n  Param,\n  Patch,\n  Post,\n  Query,\n  UnauthorizedException,\n  UseGuards,\n} from \"@nestjs/common\";\nimport {\n  ApiOperation,\n  ApiOkResponse,\n  ApiNotFoundResponse,\n  ApiBearerAuth,\n  ApiTags,\n  ApiBadRequestResponse,\n  ApiBody,\n  ApiConflictResponse,\n} from \"@nestjs/swagger\";\nimport { SupabaseAuthUser } from \"nestjs-supabase-auth\";\n\nimport { SupabaseGuard } from \"../auth/supabase.guard\";\nimport { User, UserId } from \"../auth/supabase.user.decorator\";\nimport { ApiPaginatedResponse } from \"../common/decorators/api-paginated-response.decorator\";\nimport { PageDto } from \"../common/dtos/page.dto\";\n\nimport { PageOptionsDto } from \"../common/dtos/page-options.dto\";\nimport { UserService } from \"./services/user.service\";\nimport { UserCollaborationService } from \"./user-collaboration.service\";\nimport { CreateUserCollaborationDto } from \"./dtos/create-user-collaboration.dto\";\nimport { DbUserCollaboration } from \"./entities/user-collaboration.entity\";\nimport { UpdateUserCollaborationDto } from \"./dtos/update-user-collaboration.dto\";\n\n@Controller(\"user/collaborations\")\n@ApiTags(\"User Collaborations service\")\nexport class UserCollaborationController {\n  constructor(\n    private readonly userCollaborationService: UserCollaborationService,\n    private readonly userService: UserService\n  ) {}\n\n  @Get(\"/\")\n  @ApiOperation({\n    operationId: \"findAllUserCollaborations\",\n    summary: \"Listing all collaborations for the authenticated user\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiPaginatedResponse(DbUserCollaboration)\n  @ApiOkResponse({ type: DbUserCollaboration })\n  async findAllUserCollaborations(\n    @Query() pageOptionsDto: PageOptionsDto,\n    @UserId() userId: number\n  ): Promise> {\n    return this.userCollaborationService.findAllUserCollaborations(pageOptionsDto, userId);\n  }\n\n  @Post(\"/\")\n  @ApiOperation({\n    operationId: \"addUserCollaboration\",\n    summary: \"Adds a new collaboration request for the user\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOkResponse({ type: DbUserCollaboration })\n  @ApiNotFoundResponse({ description: \"Unable to add user collaboration\" })\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  @ApiConflictResponse({ description: \"The requested user is not accepting collaboration requests\" })\n  @ApiBody({ type: CreateUserCollaborationDto })\n  async addUserCollaboration(\n    @Body() createUserCollaborationDto: CreateUserCollaborationDto,\n    @User() user: SupabaseAuthUser\n  ): Promise {\n    const recipient = await this.userService.findOneByUsername(createUserCollaborationDto.username);\n    const requester = await this.userService.findOneById(user.user_metadata.sub as number);\n\n    if (requester.role  {\n    const collaboration = await this.userCollaborationService.findOneById(id);\n\n    if (collaboration.user_id !== userId) {\n      throw new UnauthorizedException();\n    }\n\n    const updatedUserCollaboration: Partial = { status: updateUserCollaborationDto.status };\n\n    await this.userCollaborationService.updateUserCollaboration(id, updatedUserCollaboration);\n\n    return this.userCollaborationService.findOneById(id);\n  }\n\n  @Delete(\":id\")\n  @ApiOperation({\n    operationId: \"removeUserCollaborationById\",\n    summary: \"Removes the user collaboration request\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiNotFoundResponse({ description: \"Unable to remove user collaboration\" })\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  async removeUserCollaborationById(@Param(\"id\") id: string, @UserId() userId: number): Promise {\n    const userCollaboration = await this.userCollaborationService.findOneById(id);\n\n    if (userCollaboration.user_id !== userId) {\n      throw new UnauthorizedException();\n    }\n\n    await this.userCollaborationService.removeUserCollaboration(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserCollaborationService.html":{"url":"injectables/UserCollaborationService.html","title":"injectable - UserCollaborationService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserCollaborationService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user-collaboration.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addUserCollaboration\n                            \n                            \n                                baseQueryBuilder\n                            \n                            \n                                    Async\n                                findAllUserCollaborations\n                            \n                            \n                                    Async\n                                findOneById\n                            \n                            \n                                    Async\n                                removeUserCollaboration\n                            \n                            \n                                    Async\n                                updateUserCollaboration\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userCollaborationRepository: Repository, pagerService: PagerService)\n                    \n                \n                        \n                            \n                                Defined in src/user/user-collaboration.service.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userCollaborationRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        pagerService\n                                                  \n                                                        \n                                                                        PagerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addUserCollaboration\n                        \n                    \n                \n            \n            \n                \n                    \n                    addUserCollaboration(userCollaboration: Partial)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-collaboration.service.ts:39\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userCollaboration\n                                    \n                                                Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        baseQueryBuilder\n                        \n                    \n                \n            \n            \n                \nbaseQueryBuilder()\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-collaboration.service.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         SelectQueryBuilder\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllUserCollaborations\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllUserCollaborations(pageOptionsDto: PageOptionsDto, userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-collaboration.service.ts:51\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneById(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-collaboration.service.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        removeUserCollaboration\n                        \n                    \n                \n            \n            \n                \n                    \n                    removeUserCollaboration(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-collaboration.service.ts:47\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateUserCollaboration\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateUserCollaboration(id: string, userCollaboration: Partial)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-collaboration.service.ts:43\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userCollaboration\n                                    \n                                                Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from \"@nestjs/common\";\nimport { Repository, SelectQueryBuilder } from \"typeorm\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\n\nimport { PageDto } from \"../common/dtos/page.dto\";\n\nimport { PageOptionsDto } from \"../common/dtos/page-options.dto\";\nimport { PagerService } from \"../common/services/pager.service\";\nimport { DbUserCollaboration } from \"./entities/user-collaboration.entity\";\n\n@Injectable()\nexport class UserCollaborationService {\n  constructor(\n    @InjectRepository(DbUserCollaboration, \"ApiConnection\")\n    private userCollaborationRepository: Repository,\n    private pagerService: PagerService\n  ) {}\n\n  baseQueryBuilder(): SelectQueryBuilder {\n    const builder = this.userCollaborationRepository.createQueryBuilder(\"user_collaborations\");\n\n    return builder;\n  }\n\n  async findOneById(id: string): Promise {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder.where(\"user_collaborations.id = :id\", { id });\n\n    const item: DbUserCollaboration | null = await queryBuilder.getOne();\n\n    if (!item) {\n      throw new NotFoundException();\n    }\n\n    return item;\n  }\n\n  async addUserCollaboration(userCollaboration: Partial) {\n    return this.userCollaborationRepository.save(userCollaboration);\n  }\n\n  async updateUserCollaboration(id: string, userCollaboration: Partial) {\n    return this.userCollaborationRepository.update(id, userCollaboration);\n  }\n\n  async removeUserCollaboration(id: string) {\n    return this.userCollaborationRepository.softDelete(id);\n  }\n\n  async findAllUserCollaborations(\n    pageOptionsDto: PageOptionsDto,\n    userId: number\n  ): Promise> {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .innerJoinAndSelect(\"user_collaborations.user\", \"user\")\n      .innerJoinAndSelect(\"user_collaborations.request_user\", \"request_user\")\n      .where(\"user_collaborations.user_id = :userId\", { userId })\n      .orderBy(\"user_collaborations.updated_at\", \"DESC\");\n\n    return this.pagerService.applyPagination({\n      pageOptionsDto,\n      queryBuilder,\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserController.html":{"url":"controllers/UserController.html","title":"controller - UserController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                findAllHighlightsByUsername\n                            \n                            \n                                    Async\n                                findAllOrgsByUsername\n                            \n                            \n                                    Async\n                                findAllTopReposByUsername\n                            \n                            \n                                    Async\n                                findContributorPullRequests\n                            \n                            \n                                    Async\n                                findOneUserById\n                            \n                            \n                                    Async\n                                getTopUsers\n                            \n                            \n                                    Async\n                                getUsersByFilter\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllHighlightsByUsername\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllHighlightsByUsername(username: string, pageOptionsDto: PageOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:username/highlights')@ApiOperation({operationId: 'findAllHighlightsByUsername', summary: 'Listing all Highlights for a user and paginate them'})@ApiPaginatedResponse(DbUserHighlight)@ApiOkResponse({type: DbUserHighlight})@ApiNotFoundResponse({description: 'Highlights not found'})\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:68\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllOrgsByUsername\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllOrgsByUsername(username: string, pageOptionsDto: PageOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:username/organizations')@ApiOperation({operationId: 'findAllOrgsByUsername', summary: 'Listing public orgs for a user and paginate them'})@ApiPaginatedResponse(DbUserOrganization)@ApiOkResponse({type: DbUserOrganization})@ApiNotFoundResponse({description: 'Top repos not found'})\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:102\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllTopReposByUsername\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllTopReposByUsername(username: string, pageOptionsDto: PageOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:username/top-repos')@ApiOperation({operationId: 'findAllTopReposByUsername', summary: 'Listing all Top Repos for a user and paginate them'})@ApiPaginatedResponse(DbRepo)@ApiOkResponse({type: DbRepo})@ApiNotFoundResponse({description: 'Top repos not found'})\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:85\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findContributorPullRequests\n                        \n                    \n                \n            \n            \n                \n                    \n                    findContributorPullRequests(username: string, pageOptionsDto: ContributorPullRequestsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:username/prs')@ApiOperation({operationId: 'findContributorPullRequests', summary: 'Finds pull requests by :username'})@ApiPaginatedResponse(DbPullRequest)@ApiOkResponse({type: DbPullRequest})@ApiNotFoundResponse({description: 'User not found'})\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:53\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                ContributorPullRequestsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneUserById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneUserById(username: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:username')@ApiOperation({operationId: 'findOneUserByUserame', summary: 'Finds a user by :username'})@ApiOkResponse({type: DbUser})@ApiNotFoundResponse({description: 'User not found'})\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:41\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getTopUsers\n                        \n                    \n                \n            \n            \n                \n                    \n                    getTopUsers(pageOptionsDto: TopUsersDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/top')@ApiOperation({operationId: 'getTop10Highlights', summary: 'List top users'})@ApiOkResponse({type: DbTopUser})\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:117\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                TopUsersDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getUsersByFilter\n                        \n                    \n                \n            \n            \n                \n                    \n                    getUsersByFilter(pageOptionsDto: FilteredUsersDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/search')@ApiOperation({operationId: 'getUsersByFilter', summary: 'Search users'})@ApiOkResponse({type: DbFilteredUser})@ApiBadRequestResponse({description: 'Username is required'})\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:128\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                FilteredUsersDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Param, Query } from \"@nestjs/common\";\nimport { ApiBadRequestResponse, ApiNotFoundResponse, ApiOkResponse, ApiOperation, ApiTags } from \"@nestjs/swagger\";\n\nimport { PageOptionsDto } from \"../common/dtos/page-options.dto\";\nimport { PageDto } from \"../common/dtos/page.dto\";\nimport { ApiPaginatedResponse } from \"../common/decorators/api-paginated-response.decorator\";\nimport { PullRequestService } from \"../pull-requests/pull-request.service\";\nimport { DbPullRequest } from \"../pull-requests/entities/pull-request.entity\";\nimport { RepoService } from \"../repo/repo.service\";\nimport { DbRepo } from \"../repo/entities/repo.entity\";\nimport { DbUserHighlight } from \"./entities/user-highlight.entity\";\nimport { UserHighlightsService } from \"./user-highlights.service\";\nimport { DbUser } from \"./user.entity\";\nimport { UserService } from \"./services/user.service\";\nimport { DbTopUser } from \"./entities/top-users.entity\";\nimport { TopUsersDto } from \"./dtos/top-users.dto\";\nimport { DbFilteredUser } from \"./entities/filtered-users.entity\";\nimport { FilteredUsersDto } from \"./dtos/filtered-users.dto\";\nimport { DbUserOrganization } from \"./entities/user-organization.entity\";\nimport { UserOrganizationService } from \"./user-organization.service\";\nimport { ContributorPullRequestsDto } from \"./dtos/contributor-prs.dto\";\n\n@Controller(\"users\")\n@ApiTags(\"User service\")\nexport class UserController {\n  constructor(\n    private userService: UserService,\n    private pullRequestService: PullRequestService,\n    private userHighlightsService: UserHighlightsService,\n    private repoService: RepoService,\n    private userOrganizationService: UserOrganizationService\n  ) {}\n\n  @Get(\"/:username\")\n  @ApiOperation({\n    operationId: \"findOneUserByUserame\",\n    summary: \"Finds a user by :username\",\n  })\n  @ApiOkResponse({ type: DbUser })\n  @ApiNotFoundResponse({ description: \"User not found\" })\n  async findOneUserById(@Param(\"username\") username: string): Promise {\n    return this.userService.findOneByUsername(username);\n  }\n\n  @Get(\"/:username/prs\")\n  @ApiOperation({\n    operationId: \"findContributorPullRequests\",\n    summary: \"Finds pull requests by :username\",\n  })\n  @ApiPaginatedResponse(DbPullRequest)\n  @ApiOkResponse({ type: DbPullRequest })\n  @ApiNotFoundResponse({ description: \"User not found\" })\n  async findContributorPullRequests(\n    @Param(\"username\") username: string,\n    @Query() pageOptionsDto: ContributorPullRequestsDto\n  ): Promise> {\n    return this.pullRequestService.findAllByContributor(username, pageOptionsDto);\n  }\n\n  @Get(\"/:username/highlights\")\n  @ApiOperation({\n    operationId: \"findAllHighlightsByUsername\",\n    summary: \"Listing all Highlights for a user and paginate them\",\n  })\n  @ApiPaginatedResponse(DbUserHighlight)\n  @ApiOkResponse({ type: DbUserHighlight })\n  @ApiNotFoundResponse({ description: \"Highlights not found\" })\n  async findAllHighlightsByUsername(\n    @Param(\"username\") username: string,\n    @Query() pageOptionsDto: PageOptionsDto\n  ): Promise> {\n    const user = await this.userService.findOneByUsername(username);\n\n    return this.userHighlightsService.findAllByUserId(pageOptionsDto, user.id);\n  }\n\n  @Get(\"/:username/top-repos\")\n  @ApiOperation({\n    operationId: \"findAllTopReposByUsername\",\n    summary: \"Listing all Top Repos for a user and paginate them\",\n  })\n  @ApiPaginatedResponse(DbRepo)\n  @ApiOkResponse({ type: DbRepo })\n  @ApiNotFoundResponse({ description: \"Top repos not found\" })\n  async findAllTopReposByUsername(\n    @Param(\"username\") username: string,\n    @Query() pageOptionsDto: PageOptionsDto\n  ): Promise> {\n    const user = await this.userService.findOneByUsername(username);\n\n    return this.repoService.findAll(pageOptionsDto, user.id, [\"TopRepos\"]);\n  }\n\n  @Get(\"/:username/organizations\")\n  @ApiOperation({\n    operationId: \"findAllOrgsByUsername\",\n    summary: \"Listing public orgs for a user and paginate them\",\n  })\n  @ApiPaginatedResponse(DbUserOrganization)\n  @ApiOkResponse({ type: DbUserOrganization })\n  @ApiNotFoundResponse({ description: \"Top repos not found\" })\n  async findAllOrgsByUsername(\n    @Param(\"username\") username: string,\n    @Query() pageOptionsDto: PageOptionsDto\n  ): Promise> {\n    const user = await this.userService.findOneByUsername(username);\n\n    return this.userOrganizationService.findAllByUserId(user.id, pageOptionsDto);\n  }\n\n  @Get(\"/top\")\n  @ApiOperation({\n    operationId: \"getTop10Highlights\",\n    summary: \"List top users\",\n  })\n  @ApiOkResponse({ type: DbTopUser })\n  async getTopUsers(@Query() pageOptionsDto: TopUsersDto): Promise> {\n    return this.userService.findTopUsers(pageOptionsDto);\n  }\n\n  @Get(\"/search\")\n  @ApiOperation({\n    operationId: \"getUsersByFilter\",\n    summary: \"Search users\",\n  })\n  @ApiOkResponse({ type: DbFilteredUser })\n  @ApiBadRequestResponse({ description: \"Username is required\" })\n  async getUsersByFilter(@Query() pageOptionsDto: FilteredUsersDto): Promise> {\n    return this.userService.findUsersByFilter(pageOptionsDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserEndorsementController.html":{"url":"controllers/UserEndorsementController.html","title":"controller - UserEndorsementController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserEndorsementController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user-endorsement.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                user/endorsements\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                findAllUserCreatedEndorsements\n                            \n                            \n                                    Async\n                                findAllUserReceivedEndorsements\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllUserCreatedEndorsements\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllUserCreatedEndorsements(userId: number, pageOptionsDto: PageOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/created')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'findAllUserCreatedEndorsements', summary: 'Finds all endorsements created by the authenticated user and paginates them'})@ApiPaginatedResponse(DbEndorsement)@ApiOkResponse({type: DbEndorsement})\n                \n            \n\n            \n                \n                    Defined in src/user/user-endorsement.controller.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllUserReceivedEndorsements\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllUserReceivedEndorsements(userId: number, pageOptionsDto: PageOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/received')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'findAllUserReceivedEndorsements', summary: 'Finds all endorsements received by the authenticated user and paginates them'})@ApiPaginatedResponse(DbEndorsement)@ApiOkResponse({type: DbEndorsement})\n                \n            \n\n            \n                \n                    Defined in src/user/user-endorsement.controller.ts:38\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Query, UseGuards } from \"@nestjs/common\";\nimport { ApiBearerAuth, ApiOkResponse, ApiOperation, ApiTags } from \"@nestjs/swagger\";\nimport { SupabaseGuard } from \"../auth/supabase.guard\";\nimport { UserId } from \"../auth/supabase.user.decorator\";\nimport { ApiPaginatedResponse } from \"../common/decorators/api-paginated-response.decorator\";\n\nimport { PageOptionsDto } from \"../common/dtos/page-options.dto\";\nimport { EndorsementService } from \"../endorsement/endorsement.service\";\nimport { DbEndorsement } from \"../endorsement/entities/endorsement.entity\";\n\n@Controller(\"user/endorsements\")\n@ApiTags(\"Endorsements service\")\nexport class UserEndorsementController {\n  constructor(private readonly endorsementService: EndorsementService) {}\n\n  @Get(\"/created\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"findAllUserCreatedEndorsements\",\n    summary: \"Finds all endorsements created by the authenticated user and paginates them\",\n  })\n  @ApiPaginatedResponse(DbEndorsement)\n  @ApiOkResponse({ type: DbEndorsement })\n  async findAllUserCreatedEndorsements(@UserId() userId: number, @Query() pageOptionsDto: PageOptionsDto) {\n    return this.endorsementService.findAllByCreatorUserId(userId, pageOptionsDto);\n  }\n\n  @Get(\"/received\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"findAllUserReceivedEndorsements\",\n    summary: \"Finds all endorsements received by the authenticated user and paginates them\",\n  })\n  @ApiPaginatedResponse(DbEndorsement)\n  @ApiOkResponse({ type: DbEndorsement })\n  async findAllUserReceivedEndorsements(@UserId() userId: number, @Query() pageOptionsDto: PageOptionsDto) {\n    return this.endorsementService.findAllByRecipientUserId(userId, pageOptionsDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserFollowService.html":{"url":"injectables/UserFollowService.html","title":"injectable - UserFollowService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserFollowService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user-follow.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addUserFollowerByUserId\n                            \n                            \n                                baseQueryBuilder\n                            \n                            \n                                    Async\n                                findAllFollowers\n                            \n                            \n                                    Async\n                                findAllFollowingList\n                            \n                            \n                                    Async\n                                findUserFollowerById\n                            \n                            \n                                    Async\n                                removeUserFollowerById\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userFollowRepository: Repository, userService: UserService, userNotificationService: UserNotificationService)\n                    \n                \n                        \n                            \n                                Defined in src/user/user-follow.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userFollowRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userNotificationService\n                                                  \n                                                        \n                                                                        UserNotificationService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addUserFollowerByUserId\n                        \n                    \n                \n            \n            \n                \n                    \n                    addUserFollowerByUserId(userId: number, followedUserId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-follow.service.ts:63\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    followedUserId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        baseQueryBuilder\n                        \n                    \n                \n            \n            \n                \nbaseQueryBuilder()\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-follow.service.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllFollowers\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllFollowers(userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-follow.service.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllFollowingList\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllFollowingList(userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-follow.service.ts:37\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findUserFollowerById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findUserFollowerById(userId: number, followerUserId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-follow.service.ts:47\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    followerUserId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        removeUserFollowerById\n                        \n                    \n                \n            \n            \n                \n                    \n                    removeUserFollowerById(userId: number, followerUserId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-follow.service.ts:92\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    followerUserId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ConflictException, Injectable, NotFoundException } from \"@nestjs/common\";\nimport { Repository } from \"typeorm\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\n\nimport { DbUserToUserFollows } from \"./entities/user-follows.entity\";\nimport { UserNotificationService } from \"./user-notifcation.service\";\nimport { UserService } from \"./services/user.service\";\n\n@Injectable()\nexport class UserFollowService {\n  constructor(\n    @InjectRepository(DbUserToUserFollows, \"ApiConnection\")\n    private userFollowRepository: Repository,\n    private userService: UserService,\n    private userNotificationService: UserNotificationService\n  ) {}\n\n  baseQueryBuilder() {\n    const builder = this.userFollowRepository.createQueryBuilder(\"user_follows\").withDeleted();\n\n    return builder;\n  }\n\n  async findAllFollowers(userId: number) {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .innerJoin(\"users\", \"users\", \"user_follows.user_id=users.id\")\n      .where(\"user_follows.following_user_id = :userId\", { userId })\n      .andWhere(\"user_follows.deleted_at IS NULL\");\n\n    const entities = await queryBuilder.getMany();\n\n    return entities;\n  }\n\n  async findAllFollowingList(userId: number): Promise {\n    const queryBuilder = this.baseQueryBuilder();\n\n    return queryBuilder\n      .innerJoin(\"users\", \"users\", \"user_follows.user_id=users.id\")\n      .where(\"user_follows.user_id = :userId\", { userId })\n      .andWhere(\"user_follows.deleted_at IS NULL\")\n      .getMany();\n  }\n\n  async findUserFollowerById(userId: number, followerUserId: number): Promise {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .where(\"user_follows.user_id = :userId\", { userId })\n      .andWhere(\"user_follows.following_user_id = :followerUserId\", { followerUserId })\n      .andWhere(\"user_follows.deleted_at IS NULL\");\n    const followExists = await queryBuilder.getOne();\n\n    if (!followExists) {\n      throw new NotFoundException(\"You are not following this user\");\n    }\n\n    return followExists;\n  }\n\n  async addUserFollowerByUserId(userId: number, followedUserId: number): Promise {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .addSelect(\"user_follows.deleted_at\", \"user_follows_deleted_at\")\n      .where(\"user_follows.user_id = :userId\", { userId })\n      .andWhere(\"user_follows.following_user_id = :followedUserId\", { followedUserId });\n\n    const followExists = await queryBuilder.getOne();\n\n    if (followExists) {\n      if (!followExists.deleted_at) {\n        throw new ConflictException(`You have already followed this user: ${followedUserId}`);\n      }\n\n      await this.userFollowRepository.restore(followExists.id);\n      await this.userNotificationService.addUserFollowerNotification(userId, followedUserId);\n\n      return followExists;\n    }\n\n    await this.userNotificationService.addUserFollowerNotification(userId, followedUserId);\n\n    return this.userFollowRepository.save({\n      user_id: userId,\n      following_user_id: followedUserId,\n    });\n  }\n\n  async removeUserFollowerById(userId: number, followerUserId: number): Promise {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .addSelect(\"user_follows.deleted_at\", \"user_follows_deleted_at\")\n      .where(\"user_follows.user_id = :userId\", { userId })\n      .andWhere(\"user_follows.following_user_id = :followerUserId\", { followerUserId });\n\n    const followExists = await queryBuilder.getOne();\n\n    if (!followExists) {\n      throw new NotFoundException(\"You have not followed this user\");\n    }\n\n    if (followExists.deleted_at) {\n      throw new ConflictException(\"You are not following this user\");\n    }\n\n    await this.userFollowRepository.softDelete(followExists.id);\n\n    return queryBuilder.getOneOrFail();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserFollowingController.html":{"url":"controllers/UserFollowingController.html","title":"controller - UserFollowingController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserFollowingController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user-following.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getFollowingListByUsername\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getFollowingListByUsername\n                        \n                    \n                \n            \n            \n                \n                    \n                    getFollowingListByUsername(username: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:username/following')@ApiOperation({operationId: 'getFollowingListByUsername', summary: 'Get list of following users by the provided username'})@ApiNotFoundResponse({description: 'User not found'})\n                \n            \n\n            \n                \n                    Defined in src/user/user-following.controller.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Param } from \"@nestjs/common\";\nimport { ApiNotFoundResponse, ApiOperation, ApiTags } from \"@nestjs/swagger\";\nimport { UserService } from \"./services/user.service\";\nimport { DbUser } from \"./user.entity\";\nimport { UserFollowService } from \"./user-follow.service\";\nimport { DbUserToUserFollows } from \"./entities/user-follows.entity\";\n\n@Controller(\"users\")\n@ApiTags(\"User service\")\nexport class UserFollowingController {\n  constructor(private readonly userService: UserService, private readonly userFollowService: UserFollowService) {}\n\n  @Get(\"/:username/following\")\n  @ApiOperation({\n    operationId: \"getFollowingListByUsername\",\n    summary: \"Get list of following users by the provided username\",\n  })\n  @ApiNotFoundResponse({ description: \"User not found\" })\n  async getFollowingListByUsername(@Param(\"username\") username: string): Promise {\n    const user: DbUser = await this.userService.findOneByUsername(username);\n\n    return this.userFollowService.findAllFollowingList(user.id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserFollowsController.html":{"url":"controllers/UserFollowsController.html","title":"controller - UserFollowsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserFollowsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user-follow.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                followUserByUsername\n                            \n                            \n                                    Async\n                                followUsersByUsernames\n                            \n                            \n                                    Async\n                                getFollowStatusByUsername\n                            \n                            \n                                    Async\n                                unfollowUserByUserId\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        followUserByUsername\n                        \n                    \n                \n            \n            \n                \n                    \n                    followUserByUsername(username: string, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('/:username/follow')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'followUserById', summary: 'Follows a user by username'})@ApiNotFoundResponse({description: 'User not found'})@ApiConflictResponse({description: 'You have already followed this user'})\n                \n            \n\n            \n                \n                    Defined in src/user/user-follow.controller.ts:50\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        followUsersByUsernames\n                        \n                    \n                \n            \n            \n                \n                    \n                    followUsersByUsernames(bulkFollow: FollowManyUsersDto, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('/:username/follows')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'followUsersByUsernames', summary: 'Follows a number of users by username'})@ApiNotFoundResponse({description: 'Users not found'})@ApiConflictResponse({description: 'You have already followed this user'})@ApiBody({type: FollowManyUsersDto})\n                \n            \n\n            \n                \n                    Defined in src/user/user-follow.controller.ts:69\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    bulkFollow\n                                    \n                                                FollowManyUsersDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getFollowStatusByUsername\n                        \n                    \n                \n            \n            \n                \n                    \n                    getFollowStatusByUsername(username: string, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:username/follow')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'getFollowStatusByUsername', summary: 'Checks if the authenticated user follows the provided username'})@ApiNotFoundResponse({description: 'User follow not found'})\n                \n            \n\n            \n                \n                    Defined in src/user/user-follow.controller.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        unfollowUserByUserId\n                        \n                    \n                \n            \n            \n                \n                    \n                    unfollowUserByUserId(username: string, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/:username/follow')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'unfollowUserByUsername', summary: 'Unfollows a user by username'})@ApiOkResponse({description: 'Returns the user follow', type: DbUserToUserFollows})@ApiNotFoundResponse({description: 'User not found'})@ApiConflictResponse({description: 'You are now following this user'})\n                \n            \n\n            \n                \n                    Defined in src/user/user-follow.controller.ts:108\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Delete, Get, Param, Put, UseGuards } from \"@nestjs/common\";\nimport {\n  ApiBearerAuth,\n  ApiBody,\n  ApiConflictResponse,\n  ApiNotFoundResponse,\n  ApiOkResponse,\n  ApiOperation,\n  ApiTags,\n} from \"@nestjs/swagger\";\n\nimport { SupabaseGuard } from \"../auth/supabase.guard\";\nimport { UserId } from \"../auth/supabase.user.decorator\";\nimport { DbUserToUserFollows } from \"./entities/user-follows.entity\";\nimport { UserFollowService } from \"./user-follow.service\";\nimport { UserService } from \"./services/user.service\";\nimport { FollowManyUsersDto } from \"./dtos/follow-many-users.dto\";\n\n@Controller(\"users\")\n@ApiTags(\"User service\")\nexport class UserFollowsController {\n  constructor(private readonly userService: UserService, private readonly userFollowService: UserFollowService) {}\n\n  @Get(\"/:username/follow\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"getFollowStatusByUsername\",\n    summary: \"Checks if the authenticated user follows the provided username\",\n  })\n  @ApiNotFoundResponse({ description: \"User follow not found\" })\n  async getFollowStatusByUsername(\n    @Param(\"username\") username: string,\n    @UserId() userId: number\n  ): Promise {\n    const user = await this.userService.findOneByUsername(username);\n\n    return this.userFollowService.findUserFollowerById(userId, user.id);\n  }\n\n  @Put(\"/:username/follow\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"followUserById\",\n    summary: \"Follows a user by username\",\n  })\n  @ApiNotFoundResponse({ description: \"User not found\" })\n  @ApiConflictResponse({ description: \"You have already followed this user\" })\n  async followUserByUsername(\n    @Param(\"username\") username: string,\n    @UserId() userId: number\n  ): Promise {\n    const user = await this.userService.findOneByUsername(username);\n\n    return this.userFollowService.addUserFollowerByUserId(userId, user.id);\n  }\n\n  @Put(\"/:username/follows\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"followUsersByUsernames\",\n    summary: \"Follows a number of users by username\",\n  })\n  @ApiNotFoundResponse({ description: \"Users not found\" })\n  @ApiConflictResponse({ description: \"You have already followed this user\" })\n  @ApiBody({ type: FollowManyUsersDto })\n  async followUsersByUsernames(\n    @Body() bulkFollow: FollowManyUsersDto,\n    @UserId() userId: number\n  ): Promise {\n    const users = await this.userService.findManyByUsernames(bulkFollow.usernames);\n    const allErrs: Error[] = [];\n\n    const promises = users.map(async (user) => {\n      try {\n        return await this.userFollowService.addUserFollowerByUserId(userId, user.id);\n      } catch (e: unknown) {\n        if (e instanceof Error) {\n          allErrs.push(e);\n        }\n      }\n    });\n\n    const results = await Promise.all(promises);\n    const validResults = results.filter(Boolean);\n\n    return {\n      follows: validResults as DbUserToUserFollows[],\n      errors: allErrs,\n    };\n  }\n\n  @Delete(\"/:username/follow\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"unfollowUserByUsername\",\n    summary: \"Unfollows a user by username\",\n  })\n  @ApiOkResponse({\n    description: \"Returns the user follow\",\n    type: DbUserToUserFollows,\n  })\n  @ApiNotFoundResponse({ description: \"User not found\" })\n  @ApiConflictResponse({ description: \"You are now following this user\" })\n  async unfollowUserByUserId(\n    @Param(\"username\") username: string,\n    @UserId() userId: number\n  ): Promise {\n    const user = await this.userService.findOneByUsername(username);\n\n    return this.userFollowService.removeUserFollowerById(userId, user.id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserHighlightsController.html":{"url":"controllers/UserHighlightsController.html","title":"controller - UserHighlightsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserHighlightsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user-highlight.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                user/highlights\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addHighlightReactionForUser\n                            \n                            \n                                    Async\n                                addInsightForUser\n                            \n                            \n                                    Async\n                                deleteHighlightForUser\n                            \n                            \n                                    Async\n                                deleteHighlightReactionForUser\n                            \n                            \n                                    Async\n                                getAllHighlightUserReactions\n                            \n                            \n                                    Async\n                                getFollowingHighlightRepos\n                            \n                            \n                                    Async\n                                getFollowingHighlights\n                            \n                            \n                                    Async\n                                getUserHighlight\n                            \n                            \n                                    Async\n                                updateHighlightForUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addHighlightReactionForUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    addHighlightReactionForUser(highlightId: number, emojiId: string, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/:id/reactions/:emojiId')@ApiOperation({operationId: 'addHighlightReactionForUser', summary: 'Adds a new highlight reaction for the authenticated user'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOkResponse({type: DbUserHighlightReaction})@ApiNotFoundResponse({description: 'Highlight does not exist'})@ApiBadRequestResponse({description: 'Invalid request'})@ApiConflictResponse({description: 'Unable to add user highlight reaction'})@ApiParam({name: 'id', type: 'integer'})\n                \n            \n\n            \n                \n                    Defined in src/user/user-highlight.controller.ts:153\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    highlightId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    emojiId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addInsightForUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    addInsightForUser(createHighlightDto: CreateUserHighlightDto, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/')@ApiOperation({operationId: 'addHighlightForUser', summary: 'Adds a new highlight for the authenticated user'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOkResponse({type: undefined})@ApiNotFoundResponse({description: 'Unable to add user highlight'})@ApiBadRequestResponse({description: 'Invalid request'})@ApiBody({type: CreateUserHighlightDto})\n                \n            \n\n            \n                \n                    Defined in src/user/user-highlight.controller.ts:53\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createHighlightDto\n                                    \n                                                CreateUserHighlightDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteHighlightForUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteHighlightForUser(userId: number, highlightId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/:id')@ApiOperation({operationId: 'deleteHighlightForUser', summary: 'Deletes the highlight for the authenticated user'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiNotFoundResponse({description: 'Unable to delete user highlight'})@ApiBadRequestResponse({description: 'Invalid request'})@ApiParam({name: 'id', type: 'integer'})\n                \n            \n\n            \n                \n                    Defined in src/user/user-highlight.controller.ts:114\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    highlightId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteHighlightReactionForUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteHighlightReactionForUser(userId: number, highlightId: number, emojiId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/:id/reactions/:emojiId')@ApiOperation({operationId: 'deleteHighlightReactionForUser', summary: 'Deletes the highlight reaction for the authenticated user'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiNotFoundResponse({description: 'Unable to delete user highlight reaction'})@ApiBadRequestResponse({description: 'Invalid request'})@ApiParam({name: 'id', type: 'integer'})\n                \n            \n\n            \n                \n                    Defined in src/user/user-highlight.controller.ts:177\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    highlightId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    emojiId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAllHighlightUserReactions\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllHighlightUserReactions(id: number, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:id/reactions')@ApiOperation({operationId: 'getAllHighlightUserReactions', summary: 'Retrieves a highlight reactions for the authenticated user'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOkResponse({type: DbUserHighlightReactionResponse})@ApiNotFoundResponse({description: 'Unable to get user highlight reactions'})@ApiBadRequestResponse({description: 'Invalid request'})@ApiParam({name: 'id', type: 'integer'})\n                \n            \n\n            \n                \n                    Defined in src/user/user-highlight.controller.ts:134\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getFollowingHighlightRepos\n                        \n                    \n                \n            \n            \n                \n                    \n                    getFollowingHighlightRepos(pageOptionsDto: HighlightOptionsDto, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/following/repos')@ApiOperation({operationId: 'getFollowingHighlightRepos', summary: 'Fetches highlight repos for users the authenticated user follows'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOkResponse({type: DbUserHighlightRepo})@ApiBadRequestResponse({description: 'Invalid request'})\n                \n            \n\n            \n                \n                    Defined in src/user/user-highlight.controller.ts:215\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                HighlightOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getFollowingHighlights\n                        \n                    \n                \n            \n            \n                \n                    \n                    getFollowingHighlights(pageOptionsDto: HighlightOptionsDto, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/following')@ApiOperation({operationId: 'getFollowingHighlights', summary: 'Fetches highlights for users the authenticated user follows'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOkResponse({type: DbUserHighlight})\n                \n            \n\n            \n                \n                    Defined in src/user/user-highlight.controller.ts:199\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                HighlightOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getUserHighlight\n                        \n                    \n                \n            \n            \n                \n                    \n                    getUserHighlight(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:id')@ApiOperation({operationId: 'getUserHighlight', summary: 'Retrieves a highlight'})@ApiOkResponse({type: DbUserHighlight})@ApiNotFoundResponse({description: 'Unable to get user highlight'})@ApiBadRequestResponse({description: 'Invalid request'})@ApiParam({name: 'id', type: 'integer'})\n                \n            \n\n            \n                \n                    Defined in src/user/user-highlight.controller.ts:69\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateHighlightForUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateHighlightForUser(updateHighlightDto: CreateUserHighlightDto, userId: number, highlightId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch('/:id')@ApiOperation({operationId: 'updateHighlightForUser', summary: 'Updates the highlight for the authenticated user'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOkResponse({type: DbUserHighlight})@ApiNotFoundResponse({description: 'Unable to update user highlight'})@ApiBadRequestResponse({description: 'Invalid request'})@ApiBody({type: CreateUserHighlightDto})@ApiParam({name: 'id', type: 'integer'})\n                \n            \n\n            \n                \n                    Defined in src/user/user-highlight.controller.ts:85\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    updateHighlightDto\n                                    \n                                                CreateUserHighlightDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    highlightId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  ConflictException,\n  Controller,\n  Delete,\n  Get,\n  Param,\n  ParseIntPipe,\n  Patch,\n  Post,\n  Query,\n  UseGuards,\n} from \"@nestjs/common\";\nimport {\n  ApiOperation,\n  ApiOkResponse,\n  ApiNotFoundResponse,\n  ApiBearerAuth,\n  ApiTags,\n  ApiBadRequestResponse,\n  ApiBody,\n  ApiConflictResponse,\n  OmitType,\n  ApiParam,\n} from \"@nestjs/swagger\";\nimport { PageDto } from \"../common/dtos/page.dto\";\n\nimport { SupabaseGuard } from \"../auth/supabase.guard\";\nimport { UserId } from \"../auth/supabase.user.decorator\";\nimport { DbUserHighlightReactionResponse, HighlightOptionsDto } from \"../highlight/dtos/highlight-options.dto\";\nimport { DbUserHighlightRepo } from \"../highlight/entities/user-highlight-repo.entity\";\nimport { CreateUserHighlightDto } from \"./dtos/create-user-highlight.dto\";\nimport { DbUserHighlightReaction } from \"./entities/user-highlight-reaction.entity\";\nimport { DbUserHighlight } from \"./entities/user-highlight.entity\";\nimport { UserHighlightsService } from \"./user-highlights.service\";\n\n@Controller(\"user/highlights\")\n@ApiTags(\"User Highlights service\")\nexport class UserHighlightsController {\n  constructor(private readonly userHighlightsService: UserHighlightsService) {}\n\n  @Post(\"/\")\n  @ApiOperation({\n    operationId: \"addHighlightForUser\",\n    summary: \"Adds a new highlight for the authenticated user\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOkResponse({ type: OmitType(DbUserHighlight, [\"id\"]) })\n  @ApiNotFoundResponse({ description: \"Unable to add user highlight\" })\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  @ApiBody({ type: CreateUserHighlightDto })\n  async addInsightForUser(\n    @Body() createHighlightDto: CreateUserHighlightDto,\n    @UserId() userId: number\n  ): Promise {\n    return this.userHighlightsService.addUserHighlight(userId, createHighlightDto);\n  }\n\n  @Get(\"/:id\")\n  @ApiOperation({\n    operationId: \"getUserHighlight\",\n    summary: \"Retrieves a highlight\",\n  })\n  @ApiOkResponse({ type: DbUserHighlight })\n  @ApiNotFoundResponse({ description: \"Unable to get user highlight\" })\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  @ApiParam({ name: \"id\", type: \"integer\" })\n  async getUserHighlight(@Param(\"id\", ParseIntPipe) id: number): Promise {\n    return this.userHighlightsService.findOneById(id);\n  }\n\n  @Patch(\"/:id\")\n  @ApiOperation({\n    operationId: \"updateHighlightForUser\",\n    summary: \"Updates the highlight for the authenticated user\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOkResponse({ type: DbUserHighlight })\n  @ApiNotFoundResponse({ description: \"Unable to update user highlight\" })\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  @ApiBody({ type: CreateUserHighlightDto })\n  @ApiParam({ name: \"id\", type: \"integer\" })\n  async updateHighlightForUser(\n    @Body() updateHighlightDto: CreateUserHighlightDto,\n    @UserId() userId: number,\n    @Param(\"id\", ParseIntPipe) highlightId: number\n  ): Promise {\n    const highlight = await this.userHighlightsService.findOneById(highlightId, userId);\n\n    await this.userHighlightsService.updateUserHighlight(highlight.id, {\n      title: updateHighlightDto.title,\n      highlight: updateHighlightDto.highlight,\n      url: updateHighlightDto.url,\n      type: updateHighlightDto.type,\n      shipped_at: updateHighlightDto.shipped_at ? new Date(updateHighlightDto.shipped_at) : highlight.created_at,\n      tagged_repos: updateHighlightDto.taggedRepos,\n    });\n\n    return this.userHighlightsService.findOneById(highlight.id, userId);\n  }\n\n  @Delete(\"/:id\")\n  @ApiOperation({\n    operationId: \"deleteHighlightForUser\",\n    summary: \"Deletes the highlight for the authenticated user\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiNotFoundResponse({ description: \"Unable to delete user highlight\" })\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  @ApiParam({ name: \"id\", type: \"integer\" })\n  async deleteHighlightForUser(\n    @UserId() userId: number,\n    @Param(\"id\", ParseIntPipe) highlightId: number\n  ): Promise {\n    const highlight = await this.userHighlightsService.findOneById(highlightId, userId);\n\n    await this.userHighlightsService.deleteUserHighlight(highlight.id);\n  }\n\n  @Get(\"/:id/reactions\")\n  @ApiOperation({\n    operationId: \"getAllHighlightUserReactions\",\n    summary: \"Retrieves a highlight reactions for the authenticated user\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOkResponse({ type: DbUserHighlightReactionResponse })\n  @ApiNotFoundResponse({ description: \"Unable to get user highlight reactions\" })\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  @ApiParam({ name: \"id\", type: \"integer\" })\n  async getAllHighlightUserReactions(\n    @Param(\"id\", ParseIntPipe) id: number,\n    @UserId() userId: number\n  ): Promise {\n    return this.userHighlightsService.findAllHighlightReactions(id, userId);\n  }\n\n  @Post(\"/:id/reactions/:emojiId\")\n  @ApiOperation({\n    operationId: \"addHighlightReactionForUser\",\n    summary: \"Adds a new highlight reaction for the authenticated user\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOkResponse({ type: DbUserHighlightReaction })\n  @ApiNotFoundResponse({ description: \"Highlight does not exist\" })\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  @ApiConflictResponse({ description: \"Unable to add user highlight reaction\" })\n  @ApiParam({ name: \"id\", type: \"integer\" })\n  async addHighlightReactionForUser(\n    @Param(\"id\", ParseIntPipe) highlightId: number,\n    @Param(\"emojiId\") emojiId: string,\n    @UserId() userId: number\n  ): Promise {\n    const highlight = await this.userHighlightsService.findOneById(highlightId);\n\n    if (Number(highlight.user_id) === userId) {\n      throw new ConflictException(\"You cannot react to your own highlight\");\n    }\n\n    await this.userHighlightsService.addUserHighlightReaction(userId, highlightId, emojiId, highlight.user_id);\n  }\n\n  @Delete(\"/:id/reactions/:emojiId\")\n  @ApiOperation({\n    operationId: \"deleteHighlightReactionForUser\",\n    summary: \"Deletes the highlight reaction for the authenticated user\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiNotFoundResponse({ description: \"Unable to delete user highlight reaction\" })\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  @ApiParam({ name: \"id\", type: \"integer\" })\n  async deleteHighlightReactionForUser(\n    @UserId() userId: number,\n    @Param(\"id\", ParseIntPipe) highlightId: number,\n    @Param(\"emojiId\") emojiId: string\n  ): Promise {\n    const userHighlightReaction = await this.userHighlightsService.findOneUserHighlightReaction(\n      highlightId,\n      userId,\n      emojiId\n    );\n\n    await this.userHighlightsService.deleteUserHighlightReaction(userHighlightReaction.id);\n  }\n\n  @Get(\"/following\")\n  @ApiOperation({\n    operationId: \"getFollowingHighlights\",\n    summary: \"Fetches highlights for users the authenticated user follows\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOkResponse({ type: DbUserHighlight })\n  async getFollowingHighlights(\n    @Query() pageOptionsDto: HighlightOptionsDto,\n    @UserId() userId: number\n  ): Promise> {\n    return this.userHighlightsService.findAll(pageOptionsDto, userId);\n  }\n\n  @Get(\"/following/repos\")\n  @ApiOperation({\n    operationId: \"getFollowingHighlightRepos\",\n    summary: \"Fetches highlight repos for users the authenticated user follows\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOkResponse({ type: DbUserHighlightRepo })\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  async getFollowingHighlightRepos(\n    @Query() pageOptionsDto: HighlightOptionsDto,\n    @UserId() userId: number\n  ): Promise> {\n    return this.userHighlightsService.findAllHighlightRepos(pageOptionsDto, userId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserHighlightsService.html":{"url":"injectables/UserHighlightsService.html","title":"injectable - UserHighlightsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserHighlightsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user-highlights.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addFeatured\n                            \n                            \n                                    Async\n                                addUserHighlight\n                            \n                            \n                                    Async\n                                addUserHighlightReaction\n                            \n                            \n                                baseQueryBuilder\n                            \n                            \n                                    Async\n                                deleteUserHighlight\n                            \n                            \n                                    Async\n                                deleteUserHighlightReaction\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findAllByUserId\n                            \n                            \n                                    Async\n                                findAllFeatured\n                            \n                            \n                                    Async\n                                findAllHighlightReactions\n                            \n                            \n                                    Async\n                                findAllHighlightRepos\n                            \n                            \n                                    Async\n                                findOneById\n                            \n                            \n                                    Async\n                                findOneUserHighlightReaction\n                            \n                            \n                                    Async\n                                findTop\n                            \n                            \n                                    Async\n                                removeFeatured\n                            \n                            \n                                    Async\n                                updateUserHighlight\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userHighlightRepository: Repository, userHighlightReactionRepository: Repository, userNotificationService: UserNotificationService, userService: UserService, userFollowService: UserFollowService, pagerService: PagerService)\n                    \n                \n                        \n                            \n                                Defined in src/user/user-highlights.service.ts:19\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userHighlightRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userHighlightReactionRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userNotificationService\n                                                  \n                                                        \n                                                                        UserNotificationService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userFollowService\n                                                  \n                                                        \n                                                                        UserFollowService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        pagerService\n                                                  \n                                                        \n                                                                        PagerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addFeatured\n                        \n                    \n                \n            \n            \n                \n                    \n                    addFeatured(highlightId: number, userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-highlights.service.ts:138\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    highlightId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addUserHighlight\n                        \n                    \n                \n            \n            \n                \n                    \n                    addUserHighlight(userId: number, highlight: CreateUserHighlightDto)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-highlights.service.ts:228\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    highlight\n                                    \n                                                CreateUserHighlightDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addUserHighlightReaction\n                        \n                    \n                \n            \n            \n                \n                    \n                    addUserHighlightReaction(userId: number, highlightId: number, emojiId: string, highlightUserId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-highlights.service.ts:299\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    highlightId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    emojiId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    highlightUserId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        baseQueryBuilder\n                        \n                    \n                \n            \n            \n                \nbaseQueryBuilder()\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-highlights.service.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         SelectQueryBuilder\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteUserHighlight\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteUserHighlight(highlightId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-highlights.service.ts:256\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    highlightId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteUserHighlightReaction\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteUserHighlightReaction(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-highlights.service.ts:331\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll(pageOptionsDto: HighlightOptionsDto, followerUserId?: number)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-highlights.service.ts:58\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                HighlightOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    followerUserId\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllByUserId\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllByUserId(pageOptionsDto: PageOptionsDto, userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-highlights.service.ts:217\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllFeatured\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllFeatured(pageOptionsDto: PageOptionsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-highlights.service.ts:102\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllHighlightReactions\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllHighlightReactions(highlightId: number, userId?: number)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-highlights.service.ts:260\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    highlightId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllHighlightRepos\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllHighlightRepos(pageOptionsDto: PageOptionsDto, follwerUserId?: number)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-highlights.service.ts:177\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    follwerUserId\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneById(id: number, userId?: number)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-highlights.service.ts:37\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneUserHighlightReaction\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneUserHighlightReaction(highlightId: number, userId: number, emojiId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-highlights.service.ts:282\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    highlightId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    emojiId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findTop\n                        \n                    \n                \n            \n            \n                \n                    \n                    findTop(pageOptionsDto: PageOptionsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-highlights.service.ts:113\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        removeFeatured\n                        \n                    \n                \n            \n            \n                \n                    \n                    removeFeatured(highlightId: number, userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-highlights.service.ts:157\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    highlightId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateUserHighlight\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateUserHighlight(highlightId: number, highlight: Partial)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-highlights.service.ts:252\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    highlightId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    highlight\n                                    \n                                                Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ConflictException, Injectable, NotFoundException, UnauthorizedException } from \"@nestjs/common\";\nimport { Repository, SelectQueryBuilder } from \"typeorm\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\n\nimport { GetPrevDateISOString } from \"../common/util/datetimes\";\nimport { PageOptionsDto } from \"../common/dtos/page-options.dto\";\nimport { PageDto } from \"../common/dtos/page.dto\";\nimport { PageMetaDto } from \"../common/dtos/page-meta.dto\";\nimport { DbUserHighlightReactionResponse, HighlightOptionsDto } from \"../highlight/dtos/highlight-options.dto\";\nimport { PagerService } from \"../common/services/pager.service\";\nimport { DbUserHighlight } from \"./entities/user-highlight.entity\";\nimport { CreateUserHighlightDto } from \"./dtos/create-user-highlight.dto\";\nimport { DbUserHighlightReaction } from \"./entities/user-highlight-reaction.entity\";\nimport { UserNotificationService } from \"./user-notifcation.service\";\nimport { UserService } from \"./services/user.service\";\nimport { UserFollowService } from \"./user-follow.service\";\n\n@Injectable()\nexport class UserHighlightsService {\n  constructor(\n    @InjectRepository(DbUserHighlight, \"ApiConnection\")\n    private userHighlightRepository: Repository,\n    @InjectRepository(DbUserHighlightReaction, \"ApiConnection\")\n    private userHighlightReactionRepository: Repository,\n    private userNotificationService: UserNotificationService,\n    private userService: UserService,\n    private userFollowService: UserFollowService,\n    private pagerService: PagerService\n  ) {}\n\n  baseQueryBuilder(): SelectQueryBuilder {\n    const builder = this.userHighlightRepository.createQueryBuilder(\"user_highlights\");\n\n    return builder;\n  }\n\n  async findOneById(id: number, userId?: number): Promise {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .innerJoin(\"users\", \"users\", \"user_highlights.user_id=users.id\")\n      .addSelect(\"users.login\", \"user_highlights_login\")\n      .where(\"user_highlights.id = :id\", { id });\n\n    if (userId) {\n      queryBuilder.andWhere(\"user_highlights.user_id = :userId\", { userId });\n    }\n\n    const item: DbUserHighlight | null = await queryBuilder.getOne();\n\n    if (!item) {\n      throw new NotFoundException();\n    }\n\n    return item;\n  }\n\n  async findAll(pageOptionsDto: HighlightOptionsDto, followerUserId?: number): Promise> {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .innerJoin(\"users\", \"users\", \"user_highlights.user_id=users.id\")\n      .addSelect(\"users.name\", \"user_highlights_name\")\n      .addSelect(\"users.login\", \"user_highlights_login\")\n      .orderBy(\"user_highlights.updated_at\", \"DESC\");\n\n    const filters: [string, object][] = [];\n\n    if (followerUserId) {\n      filters.push([\n        `user_highlights.user_id IN (\n        SELECT following_user_id FROM users_to_users_followers\n        WHERE user_id=:userId\n        AND deleted_at IS NULL\n      )`,\n        { userId: followerUserId },\n      ]);\n    }\n\n    if (pageOptionsDto.repo) {\n      filters.push([\n        // eslint-disable-next-line no-useless-escape\n        `REGEXP_REPLACE(REGEXP_REPLACE(user_highlights.url, '(^(http(s)?:\\/\\/)?([\\w]+\\.)?github\\.com\\/)', ''), '/pull/.*', '')=:repo`,\n        { repo: decodeURIComponent(pageOptionsDto.repo) },\n      ]);\n    }\n\n    filters.forEach(([sql, data], index) => {\n      if (index === 0) {\n        queryBuilder.where(sql, data);\n      } else {\n        queryBuilder.andWhere(sql, data);\n      }\n    });\n\n    return this.pagerService.applyPagination({\n      pageOptionsDto,\n      queryBuilder,\n    });\n  }\n\n  async findAllFeatured(pageOptionsDto: PageOptionsDto): Promise> {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder.where(`user_highlights.featured = true`).orderBy(\"user_highlights.updated_at\", \"DESC\");\n\n    return this.pagerService.applyPagination({\n      pageOptionsDto,\n      queryBuilder,\n    });\n  }\n\n  async findTop(pageOptionsDto: PageOptionsDto): Promise> {\n    const queryBuilder = this.baseQueryBuilder();\n    const startDate = GetPrevDateISOString(pageOptionsDto.prev_days_start_date);\n    const range = pageOptionsDto.range!;\n\n    queryBuilder\n      .addSelect(\n        `\n        (SELECT COUNT(id) FROM user_highlight_reactions\n        WHERE highlight_id=user_highlights.id\n        AND deleted_at IS NULL)\n      `,\n        \"reactions\"\n      )\n      .where(`'${startDate}'::TIMESTAMP >= user_highlights.created_at`)\n      .andWhere(`'${startDate}'::TIMESTAMP - INTERVAL '${range} days' ({\n      pageOptionsDto,\n      queryBuilder,\n    });\n  }\n\n  async addFeatured(highlightId: number, userId: number): Promise {\n    const user = await this.userService.findOneById(userId);\n\n    if (user.role  {\n    const user = await this.userService.findOneById(userId);\n\n    if (user.role ();\n    const itemCount = parseInt(`${countQueryResult?.count ?? \"0\"}`, 10);\n    const entities = DbUserHighlight.create(await queryBuilder.getRawMany());\n\n    const pageMetaDto = new PageMetaDto({ itemCount, pageOptionsDto });\n\n    return new PageDto(entities, pageMetaDto);\n  }\n\n  async findAllByUserId(pageOptionsDto: PageOptionsDto, userId: number): Promise> {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder.where(\"user_highlights.user_id = :userId\", { userId }).orderBy(\"user_highlights.updated_at\", \"DESC\");\n\n    return this.pagerService.applyPagination({\n      pageOptionsDto,\n      queryBuilder,\n    });\n  }\n\n  async addUserHighlight(userId: number, highlight: CreateUserHighlightDto) {\n    const newUserHighlight = this.userHighlightRepository.create({\n      user_id: userId,\n      url: highlight.url,\n      highlight: highlight.highlight,\n      title: highlight.title ?? \"\",\n      shipped_at: highlight.shipped_at ? new Date(highlight.shipped_at) : new Date(),\n      type: highlight.type,\n      tagged_repos: highlight.taggedRepos,\n    });\n\n    const newHighlight = await this.userHighlightRepository.save(newUserHighlight);\n\n    const followers = await this.userFollowService.findAllFollowers(userId);\n\n    const notifications = followers.map(async (follower) =>\n      this.userNotificationService.addUserHighlightNotification(newHighlight.id, userId, follower.user_id)\n    );\n\n    await Promise.all(notifications);\n\n    return newHighlight;\n  }\n\n  async updateUserHighlight(highlightId: number, highlight: Partial) {\n    return this.userHighlightRepository.update(highlightId, highlight);\n  }\n\n  async deleteUserHighlight(highlightId: number) {\n    return this.userHighlightRepository.softDelete(highlightId);\n  }\n\n  async findAllHighlightReactions(highlightId: number, userId?: number) {\n    const queryBuilder = this.userHighlightReactionRepository.createQueryBuilder(\"user_highlight_reactions\");\n\n    queryBuilder\n      .select(\"emoji_id\", \"emoji_id\")\n      .addSelect(\"COUNT(emoji_id)\", \"reaction_count\")\n      .addSelect(\"ARRAY_AGG(users.login)\", \"reaction_users\")\n      .innerJoin(\"users\", \"users\", \"user_highlight_reactions.user_id=users.id\")\n      .where(\"user_highlight_reactions.highlight_id = :highlightId\", { highlightId })\n      .addGroupBy(\"emoji_id\");\n\n    if (userId) {\n      queryBuilder.andWhere(\"user_highlight_reactions.user_id = :userId\", { userId });\n    }\n\n    queryBuilder.addGroupBy(\"emoji_id\");\n\n    const entities: DbUserHighlightReactionResponse[] = await queryBuilder.getRawMany();\n\n    return entities;\n  }\n\n  async findOneUserHighlightReaction(highlightId: number, userId: number, emojiId: string) {\n    const queryBuilder = this.userHighlightReactionRepository.createQueryBuilder(\"user_highlight_reactions\");\n\n    queryBuilder\n      .where(\"user_highlight_reactions.highlight_id = :highlightId\", { highlightId })\n      .andWhere(\"user_highlight_reactions.user_id = :userId\", { userId })\n      .andWhere(\"user_highlight_reactions.emoji_id = :emojiId\", { emojiId });\n\n    const item: DbUserHighlightReaction | null = await queryBuilder.getOne();\n\n    if (!item) {\n      throw new NotFoundException();\n    }\n\n    return item;\n  }\n\n  async addUserHighlightReaction(userId: number, highlightId: number, emojiId: string, highlightUserId: number) {\n    const queryBuilder = this.userHighlightReactionRepository\n      .createQueryBuilder(\"user_highlight_reactions\")\n      .withDeleted();\n\n    queryBuilder\n      .where(\"user_highlight_reactions.highlight_id = :highlightId\", { highlightId })\n      .andWhere(\"user_highlight_reactions.user_id = :userId\", { userId })\n      .andWhere(\"user_highlight_reactions.emoji_id = :emojiId\", { emojiId });\n\n    const reactionExists = await queryBuilder.getOne();\n\n    if (reactionExists) {\n      if (!reactionExists.deleted_at) {\n        throw new ConflictException(\"You have already added this reaction for this highlight\");\n      }\n\n      await this.userHighlightReactionRepository.restore(reactionExists.id);\n      await this.userNotificationService.addUserHighlightReactionNotification(userId, highlightUserId, highlightId);\n\n      return reactionExists;\n    }\n\n    await this.userNotificationService.addUserHighlightReactionNotification(userId, highlightUserId, highlightId);\n\n    return this.userHighlightReactionRepository.save({\n      user_id: userId,\n      highlight_id: highlightId,\n      emoji_id: emojiId,\n    });\n  }\n\n  async deleteUserHighlightReaction(id: string) {\n    return this.userHighlightReactionRepository.softDelete(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserInsightMemberController.html":{"url":"controllers/UserInsightMemberController.html","title":"controller - UserInsightMemberController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserInsightMemberController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/insight/user-insight-member.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                user/insights\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addInsightMember\n                            \n                            \n                                    Async\n                                findAllInsightsByUserId\n                            \n                            \n                                    Async\n                                removeInsightMemberById\n                            \n                            \n                                    Async\n                                updateInsightMember\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addInsightMember\n                        \n                    \n                \n            \n            \n                \n                    \n                    addInsightMember(createInsightMemberDto: CreateInsightMemberDto, insightId: number, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post(':id/members')@ApiOperation({operationId: 'addMemberForInsight', summary: 'Adds a new member for the insight'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOkResponse({type: DbInsightMember})@ApiNotFoundResponse({description: 'Unable to add insight member'})@ApiBadRequestResponse({description: 'Invalid request'})@ApiBody({type: CreateInsightMemberDto})@ApiParam({name: 'id', type: 'integer'})\n                \n            \n\n            \n                \n                    Defined in src/insight/user-insight-member.controller.ts:92\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createInsightMemberDto\n                                    \n                                                CreateInsightMemberDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    insightId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllInsightsByUserId\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllInsightsByUserId(pageOptionsDto: InsightPageOptionsDto, insightId: number, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id/members')@ApiOperation({operationId: 'findAllInsightMembers', summary: 'Listing all members for an insight and paginate them'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiPaginatedResponse(DbInsightMember)@ApiOkResponse({type: DbInsightMember})@ApiNotFoundResponse({description: 'Insight not found'})@ApiParam({name: 'id', type: 'integer'})\n                \n            \n\n            \n                \n                    Defined in src/insight/user-insight-member.controller.ts:61\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                InsightPageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    insightId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        removeInsightMemberById\n                        \n                    \n                \n            \n            \n                \n                    \n                    removeInsightMemberById(id: number, memberId: string, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id/members/:memberId')@ApiOperation({operationId: 'removeInsightMemberById', summary: 'Removes a member from an insight'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOkResponse({type: DbInsight})@ApiNotFoundResponse({description: 'Unable to remove insight member'})@ApiBadRequestResponse({description: 'Invalid request'})@ApiParam({name: 'id', type: 'integer'})\n                \n            \n\n            \n                \n                    Defined in src/insight/user-insight-member.controller.ts:178\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    memberId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateInsightMember\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateInsightMember(id: number, memberId: string, userId: number, updateInsightMemberDto: UpdateInsightMemberDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id/members/:memberId')@ApiOperation({operationId: 'updateInsightMember', summary: 'Updates an insight member information'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOkResponse({type: DbInsight})@ApiNotFoundResponse({description: 'Unable to find insight member'})@ApiBadRequestResponse({description: 'Invalid request'})@ApiUnprocessableEntityResponse({description: 'Unable to unable insight member'})@ApiBody({type: UpdateInsightMemberDto})@ApiParam({name: 'id', type: 'integer'})\n                \n            \n\n            \n                \n                    Defined in src/insight/user-insight-member.controller.ts:140\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    memberId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateInsightMemberDto\n                                    \n                                                UpdateInsightMemberDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  ConflictException,\n  Controller,\n  Delete,\n  Get,\n  Param,\n  ParseIntPipe,\n  Patch,\n  Post,\n  Query,\n  UnauthorizedException,\n  UseGuards,\n} from \"@nestjs/common\";\nimport {\n  ApiOperation,\n  ApiOkResponse,\n  ApiNotFoundResponse,\n  ApiBearerAuth,\n  ApiTags,\n  ApiBadRequestResponse,\n  ApiBody,\n  ApiUnprocessableEntityResponse,\n  ApiParam,\n} from \"@nestjs/swagger\";\n\nimport { SupabaseGuard } from \"../auth/supabase.guard\";\nimport { UserId } from \"../auth/supabase.user.decorator\";\nimport { ApiPaginatedResponse } from \"../common/decorators/api-paginated-response.decorator\";\nimport { PageDto } from \"../common/dtos/page.dto\";\nimport { UserService } from \"../user/services/user.service\";\nimport { CreateInsightMemberDto } from \"./dtos/create-insight-member.dto\";\n\nimport { InsightPageOptionsDto } from \"./dtos/insight-page-options.dto\";\nimport { UpdateInsightMemberDto } from \"./dtos/update-insight-member.dto\";\nimport { DbInsightMember } from \"./entities/insight-member.entity\";\nimport { DbInsight } from \"./entities/insight.entity\";\nimport { InsightMemberService } from \"./insight-member.service\";\nimport { InsightsService } from \"./insights.service\";\n\n@Controller(\"user/insights\")\n@ApiTags(\"Insights service\")\nexport class UserInsightMemberController {\n  constructor(\n    private readonly insightsService: InsightsService,\n    private readonly insightMemberService: InsightMemberService,\n    private userService: UserService\n  ) {}\n\n  @Get(\":id/members\")\n  @ApiOperation({\n    operationId: \"findAllInsightMembers\",\n    summary: \"Listing all members for an insight and paginate them\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiPaginatedResponse(DbInsightMember)\n  @ApiOkResponse({ type: DbInsightMember })\n  @ApiNotFoundResponse({ description: \"Insight not found\" })\n  @ApiParam({ name: \"id\", type: \"integer\" })\n  async findAllInsightsByUserId(\n    @Query() pageOptionsDto: InsightPageOptionsDto,\n    @Param(\"id\", ParseIntPipe) insightId: number,\n    @UserId() userId: number\n  ): Promise> {\n    const insight = await this.insightsService.findOneById(insightId);\n    const canAccess = await this.insightMemberService.canUserManageInsight(userId, insight.id, [\n      \"admin\",\n      \"edit\",\n      \"view\",\n    ]);\n\n    if (!canAccess) {\n      throw new UnauthorizedException();\n    }\n\n    return this.insightMemberService.findAllInsightMembers(pageOptionsDto, insightId);\n  }\n\n  @Post(\":id/members\")\n  @ApiOperation({\n    operationId: \"addMemberForInsight\",\n    summary: \"Adds a new member for the insight\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOkResponse({ type: DbInsightMember })\n  @ApiNotFoundResponse({ description: \"Unable to add insight member\" })\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  @ApiBody({ type: CreateInsightMemberDto })\n  @ApiParam({ name: \"id\", type: \"integer\" })\n  async addInsightMember(\n    @Body() createInsightMemberDto: CreateInsightMemberDto,\n    @Param(\"id\", ParseIntPipe) insightId: number,\n    @UserId() userId: number\n  ): Promise {\n    const insight = await this.insightsService.findOneById(insightId);\n    const canUpdate = await this.insightMemberService.canUserManageInsight(userId, insight.id, [\"admin\", \"edit\"]);\n\n    if (!canUpdate) {\n      throw new UnauthorizedException();\n    }\n\n    const isMember = await this.insightMemberService.canUserManageInsight(\n      userId,\n      insight.id,\n      [\"admin\", \"edit\", \"view\"],\n      false\n    );\n\n    if (isMember) {\n      throw new ConflictException(\"The user is already a team member of this insight\");\n    }\n\n    const existingUser = await this.userService.findOneByEmail(createInsightMemberDto.email);\n\n    const newInsightMember = await this.insightMemberService.addInsightMember({\n      insight_id: insightId,\n      user_id: existingUser?.id,\n      invitation_email: existingUser?.email ?? createInsightMemberDto.email,\n      access: \"pending\",\n    });\n\n    return newInsightMember;\n  }\n\n  @Patch(\":id/members/:memberId\")\n  @ApiOperation({\n    operationId: \"updateInsightMember\",\n    summary: \"Updates an insight member information\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOkResponse({ type: DbInsight })\n  @ApiNotFoundResponse({ description: \"Unable to find insight member\" })\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  @ApiUnprocessableEntityResponse({ description: \"Unable to unable insight member\" })\n  @ApiBody({ type: UpdateInsightMemberDto })\n  @ApiParam({ name: \"id\", type: \"integer\" })\n  async updateInsightMember(\n    @Param(\"id\", ParseIntPipe) id: number,\n    @Param(\"memberId\") memberId: string,\n    @UserId() userId: number,\n    @Body() updateInsightMemberDto: UpdateInsightMemberDto\n  ): Promise {\n    const insight = await this.insightsService.findOneById(id);\n    const canUpdate = await this.insightMemberService.canUserManageInsight(userId, insight.id, [\"admin\", \"edit\"]);\n    const insightMember = await this.insightMemberService.findOneById(memberId);\n\n    if (!canUpdate && insightMember.access !== \"pending\") {\n      throw new UnauthorizedException();\n    }\n\n    const updatedInsightMember: Partial = { access: updateInsightMemberDto.access };\n\n    if (insightMember.access === \"pending\") {\n      // the user is accepting the invitation, update the user_id\n      updatedInsightMember.user_id = userId;\n      updatedInsightMember.access = \"view\";\n    }\n\n    await this.insightMemberService.updateInsightMember(memberId, updatedInsightMember);\n\n    return this.insightMemberService.findOneById(memberId);\n  }\n\n  @Delete(\":id/members/:memberId\")\n  @ApiOperation({\n    operationId: \"removeInsightMemberById\",\n    summary: \"Removes a member from an insight\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOkResponse({ type: DbInsight })\n  @ApiNotFoundResponse({ description: \"Unable to remove insight member\" })\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  @ApiParam({ name: \"id\", type: \"integer\" })\n  async removeInsightMemberById(\n    @Param(\"id\", ParseIntPipe) id: number,\n    @Param(\"memberId\") memberId: string,\n    @UserId() userId: number\n  ): Promise {\n    const insight = await this.insightsService.findOneById(id);\n    const canUpdate = await this.insightMemberService.canUserManageInsight(userId, insight.id, [\"admin\", \"edit\"]);\n\n    if (!canUpdate) {\n      throw new UnauthorizedException();\n    }\n\n    await this.insightMemberService.removeInsightMember(memberId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserInsightsController.html":{"url":"controllers/UserInsightsController.html","title":"controller - UserInsightsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserInsightsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/insight/user-insight.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                user/insights\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addInsightForUser\n                            \n                            \n                                    Async\n                                findAllInsightsByUserId\n                            \n                            \n                                    Async\n                                updateInsightForUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addInsightForUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    addInsightForUser(createInsightDto: CreateInsightDto, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/')@ApiOperation({operationId: 'addInsightForUser', summary: 'Adds a new insight page for the authenticated user'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOkResponse({type: DbInsight})@ApiNotFoundResponse({description: 'Unable to add user insight'})@ApiBadRequestResponse({description: 'Invalid request'})@ApiBody({type: CreateInsightDto})\n                \n            \n\n            \n                \n                    Defined in src/insight/user-insight.controller.ts:77\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createInsightDto\n                                    \n                                                CreateInsightDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllInsightsByUserId\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllInsightsByUserId(pageOptionsDto: InsightPageOptionsDto, userId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/')@ApiOperation({operationId: 'findAllInsightsByUserId', summary: 'Listing all insights for a user and paginate them'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiPaginatedResponse(DbInsight)@ApiOkResponse({type: DbInsight})@ApiNotFoundResponse({description: 'Insights not found'})\n                \n            \n\n            \n                \n                    Defined in src/insight/user-insight.controller.ts:59\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                InsightPageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateInsightForUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateInsightForUser(id: number, updateInsightDto: UpdateInsightDto, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch('/:id')@ApiOperation({operationId: 'updateInsightForUser', summary: 'Updates an insight page for the authenticated user'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOkResponse({type: DbInsight})@ApiNotFoundResponse({description: 'Unable to update user insight'})@ApiBadRequestResponse({description: 'Invalid request'})@ApiUnprocessableEntityResponse({description: 'Unable to unable insight repos'})@ApiBody({type: UpdateInsightDto})@ApiParam({name: 'id', type: 'integer'})\n                \n            \n\n            \n                \n                    Defined in src/insight/user-insight.controller.ts:108\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateInsightDto\n                                    \n                                                UpdateInsightDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  BadRequestException,\n  Body,\n  Controller,\n  Get,\n  Param,\n  ParseIntPipe,\n  Patch,\n  Post,\n  Query,\n  UnauthorizedException,\n  UnprocessableEntityException,\n  UseGuards,\n} from \"@nestjs/common\";\nimport {\n  ApiOperation,\n  ApiOkResponse,\n  ApiNotFoundResponse,\n  ApiBearerAuth,\n  ApiTags,\n  ApiBadRequestResponse,\n  ApiBody,\n  ApiUnprocessableEntityResponse,\n  ApiParam,\n} from \"@nestjs/swagger\";\n\nimport { SupabaseGuard } from \"../auth/supabase.guard\";\nimport { UserId } from \"../auth/supabase.user.decorator\";\nimport { ApiPaginatedResponse } from \"../common/decorators/api-paginated-response.decorator\";\nimport { PageDto } from \"../common/dtos/page.dto\";\nimport { CreateInsightDto } from \"./dtos/create-insight.dto\";\n\nimport { InsightPageOptionsDto } from \"./dtos/insight-page-options.dto\";\nimport { UpdateInsightDto } from \"./dtos/update-insight.dto\";\nimport { DbInsight } from \"./entities/insight.entity\";\nimport { InsightMemberService } from \"./insight-member.service\";\nimport { InsightRepoService } from \"./insight-repo.service\";\nimport { InsightsService } from \"./insights.service\";\n\n@Controller(\"user/insights\")\n@ApiTags(\"Insights service\")\nexport class UserInsightsController {\n  constructor(\n    private readonly insightsService: InsightsService,\n    private readonly insightsRepoService: InsightRepoService,\n    private insightMemberService: InsightMemberService\n  ) {}\n\n  @Get(\"/\")\n  @ApiOperation({\n    operationId: \"findAllInsightsByUserId\",\n    summary: \"Listing all insights for a user and paginate them\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiPaginatedResponse(DbInsight)\n  @ApiOkResponse({ type: DbInsight })\n  @ApiNotFoundResponse({ description: \"Insights not found\" })\n  async findAllInsightsByUserId(\n    @Query() pageOptionsDto: InsightPageOptionsDto,\n    @UserId() userId: string\n  ): Promise> {\n    return this.insightsService.findAllByUserId(pageOptionsDto, userId);\n  }\n\n  @Post(\"/\")\n  @ApiOperation({\n    operationId: \"addInsightForUser\",\n    summary: \"Adds a new insight page for the authenticated user\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOkResponse({ type: DbInsight })\n  @ApiNotFoundResponse({ description: \"Unable to add user insight\" })\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  @ApiBody({ type: CreateInsightDto })\n  async addInsightForUser(@Body() createInsightDto: CreateInsightDto, @UserId() userId: number): Promise {\n    if (!createInsightDto.name || !Array.isArray(createInsightDto.repos)) {\n      throw new BadRequestException();\n    }\n\n    const newInsight = await this.insightsService.addInsight({\n      name: createInsightDto.name,\n      is_public: createInsightDto.is_public,\n      user_id: userId,\n    });\n\n    createInsightDto.repos.forEach(async (repo) => {\n      await this.insightsRepoService.addInsightRepo(newInsight.id, repo);\n    });\n\n    return newInsight;\n  }\n\n  @Patch(\"/:id\")\n  @ApiOperation({\n    operationId: \"updateInsightForUser\",\n    summary: \"Updates an insight page for the authenticated user\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOkResponse({ type: DbInsight })\n  @ApiNotFoundResponse({ description: \"Unable to update user insight\" })\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  @ApiUnprocessableEntityResponse({ description: \"Unable to unable insight repos\" })\n  @ApiBody({ type: UpdateInsightDto })\n  @ApiParam({ name: \"id\", type: \"integer\" })\n  async updateInsightForUser(\n    @Param(\"id\", ParseIntPipe) id: number,\n    @Body() updateInsightDto: UpdateInsightDto,\n    @UserId() userId: number\n  ): Promise {\n    const insight = await this.insightsService.findOneById(id);\n\n    const canUpdate = await this.insightMemberService.canUserManageInsight(userId, insight.id, [\"admin\", \"edit\"]);\n\n    if (!canUpdate) {\n      throw new UnauthorizedException();\n    }\n\n    // update insight\n    await this.insightsService.updateInsight(id, {\n      name: updateInsightDto.name,\n      is_public: updateInsightDto.is_public,\n    });\n\n    try {\n      // current set of insight repos\n      const currentRepos = insight.repos.filter((insightRepo) => !insightRepo.deleted_at);\n\n      // remove deleted repos\n      const reposToRemove = currentRepos.filter(\n        (repo) => !updateInsightDto.repos.find((repoInfo) => `${repoInfo.id}` === `${repo.repo_id}`)\n      );\n\n      const reposToRemoveRequests = reposToRemove.map(async (insightRepo) =>\n        this.insightsRepoService.removeInsightRepo(insightRepo.id)\n      );\n\n      await Promise.all(reposToRemoveRequests);\n\n      // add new repos\n      const currentRepoIds = currentRepos.map((cr) => cr.repo_id);\n      const reposToAdd = updateInsightDto.repos.filter(\n        (repoInfo) => !currentRepoIds.find((id) => `${id}` === `${repoInfo.id}`)\n      );\n\n      const repoToAddRequests = reposToAdd.map(async (repo) =>\n        this.insightsRepoService.addInsightRepo(insight.id, repo)\n      );\n\n      await Promise.all(repoToAddRequests);\n    } catch (e) {\n      throw new UnprocessableEntityException();\n    }\n\n    return this.insightsService.findOneById(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserListController.html":{"url":"controllers/UserListController.html","title":"controller - UserListController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserListController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user-lists/user-list.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                lists\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addListForUser\n                            \n                            \n                                    Async\n                                deleteListForUser\n                            \n                            \n                                    Async\n                                deleteUserListContributors\n                            \n                            \n                                    Async\n                                getContributors\n                            \n                            \n                                    Async\n                                getFeaturedLists\n                            \n                            \n                                    Async\n                                getListsForUser\n                            \n                            \n                                    Async\n                                getTimezones\n                            \n                            \n                                    Async\n                                getUserList\n                            \n                            \n                                    Async\n                                getUserListContributorHighlights\n                            \n                            \n                                    Async\n                                getUserListContributors\n                            \n                            \n                                    Async\n                                postUserListContributors\n                            \n                            \n                                    Async\n                                updateListForUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addListForUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    addListForUser(createUserListDto: CreateUserListDto, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/')@ApiOperation({operationId: 'addListForUser', summary: 'Adds a new list for the authenticated user'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOkResponse({type: DbUserList})@ApiNotFoundResponse({description: 'Unable to add user list'})@ApiBadRequestResponse({description: 'Invalid request'})@ApiBody({type: CreateUserListDto})\n                \n            \n\n            \n                \n                    Defined in src/user-lists/user-list.controller.ts:73\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createUserListDto\n                                    \n                                                CreateUserListDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteListForUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteListForUser(userId: number, listId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/:id')@ApiOperation({operationId: 'deleteListForUser', summary: 'Deletes the list for the authenticated user'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiNotFoundResponse({description: 'Unable to delete user list'})@ApiBadRequestResponse({description: 'Invalid request'})@ApiParam({name: 'id', type: 'string'})\n                \n            \n\n            \n                \n                    Defined in src/user-lists/user-list.controller.ts:135\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    listId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteUserListContributors\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteUserListContributors(id: string, userListContributorId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/:id/contributors/:userListContributorId')@ApiOperation({operationId: 'deleteUserListContributor', summary: 'Delete contributor from an individual user list'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiNotFoundResponse({description: 'Unable to delete user from user list contributors'})@ApiBadRequestResponse({description: 'Invalid request'})@ApiParam({name: 'id', type: 'string'})@ApiParam({name: 'userListContributorId', type: 'integer'})\n                \n            \n\n            \n                \n                    Defined in src/user-lists/user-list.controller.ts:207\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userListContributorId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getContributors\n                        \n                    \n                \n            \n            \n                \n                    \n                    getContributors(pageOptionsDto: FilterListContributorsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/contributors')@ApiOperation({operationId: 'getContributors', summary: 'Retrieves paginated contributors'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiPaginatedResponse(DbUser)@ApiOkResponse({type: DbUser})@ApiNotFoundResponse({description: 'Unable to get contributors'})@ApiBadRequestResponse({description: 'Invalid request'})\n                \n            \n\n            \n                \n                    Defined in src/user-lists/user-list.controller.ts:152\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                FilterListContributorsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getFeaturedLists\n                        \n                    \n                \n            \n            \n                \n                    \n                    getFeaturedLists(pageOptionsDto: PageOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/featured')@ApiOperation({operationId: 'getFeaturedLists', summary: 'Gets public featured lists'})@ApiOkResponse({type: DbUserList})\n                \n            \n\n            \n                \n                    Defined in src/user-lists/user-list.controller.ts:58\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getListsForUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    getListsForUser(userId: number, pageOptionsDto: PageOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/')@ApiOperation({operationId: 'getListsForUser', summary: 'Gets lists for the authenticated user'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOkResponse({type: DbUserList})@ApiNotFoundResponse({description: 'Unable to get user lists'})@ApiBadRequestResponse({description: 'Invalid request'})\n                \n            \n\n            \n                \n                    Defined in src/user-lists/user-list.controller.ts:45\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getTimezones\n                        \n                    \n                \n            \n            \n                \n                    \n                    getTimezones()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/timezones')@ApiOperation({operationId: 'getTimezones', summary: 'Retrieves all users timezones'})@ApiOkResponse({type: DbTimezone})@ApiNotFoundResponse({description: 'Unable to get timezones'})\n                \n            \n\n            \n                \n                    Defined in src/user-lists/user-list.controller.ts:238\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getUserList\n                        \n                    \n                \n            \n            \n                \n                    \n                    getUserList(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:id')@ApiOperation({operationId: 'getUserList', summary: 'Retrieves an individual user list'})@ApiOkResponse({type: DbUserList})@ApiNotFoundResponse({description: 'Unable to get user list'})@ApiBadRequestResponse({description: 'Invalid request'})@ApiParam({name: 'id', type: 'string'})\n                \n            \n\n            \n                \n                    Defined in src/user-lists/user-list.controller.ts:94\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getUserListContributorHighlights\n                        \n                    \n                \n            \n            \n                \n                    \n                    getUserListContributorHighlights(pageOptionsDto: HighlightOptionsDto, id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:id/contributors/highlights')@ApiOperation({operationId: 'getUserListContributorHighlights', summary: 'Retrieves highlights for contributors for an individual user list'})@ApiPaginatedResponse(DbUserHighlight)@ApiOkResponse({type: DbUserHighlight})@ApiNotFoundResponse({description: 'Unable to get user list contributor highlights'})@ApiBadRequestResponse({description: 'Invalid request'})@ApiParam({name: 'id', type: 'string'})\n                \n            \n\n            \n                \n                    Defined in src/user-lists/user-list.controller.ts:224\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                HighlightOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getUserListContributors\n                        \n                    \n                \n            \n            \n                \n                    \n                    getUserListContributors(pageOptionsDto: FilterListContributorsDto, id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:id/contributors')@ApiOperation({operationId: 'getUserListContributors', summary: 'Retrieves contributors for an individual user list'})@ApiPaginatedResponse(DbUserListContributor)@ApiOkResponse({type: DbUserListContributor})@ApiNotFoundResponse({description: 'Unable to get user list contributors'})@ApiBadRequestResponse({description: 'Invalid request'})@ApiParam({name: 'id', type: 'string'})\n                \n            \n\n            \n                \n                    Defined in src/user-lists/user-list.controller.ts:168\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                FilterListContributorsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        postUserListContributors\n                        \n                    \n                \n            \n            \n                \n                    \n                    postUserListContributors(updateCollaboratorsDto: CollaboratorsDto, id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/:id/contributors')@ApiOperation({operationId: 'postUserListContributors', summary: 'Add new contributors to an individual user list'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiNotFoundResponse({description: 'Unable to add to user list contributors'})@ApiBadRequestResponse({description: 'Invalid request'})@ApiParam({name: 'id', type: 'string'})\n                \n            \n\n            \n                \n                    Defined in src/user-lists/user-list.controller.ts:185\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    updateCollaboratorsDto\n                                    \n                                                CollaboratorsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateListForUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateListForUser(updateListDto: CreateUserListDto, userId: number, listId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch('/:id')@ApiOperation({operationId: 'updateListForUser', summary: 'Updates the list for the authenticated user'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOkResponse({type: DbUserList})@ApiNotFoundResponse({description: 'Unable to update user list'})@ApiBadRequestResponse({description: 'Invalid request'})@ApiBody({type: CreateUserListDto})@ApiParam({name: 'id', type: 'string'})\n                \n            \n\n            \n                \n                    Defined in src/user-lists/user-list.controller.ts:110\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    updateListDto\n                                    \n                                                CreateUserListDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    listId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Delete, Get, Param, Patch, Post, Query, UseGuards, ValidationPipe } from \"@nestjs/common\";\nimport {\n  ApiOperation,\n  ApiOkResponse,\n  ApiNotFoundResponse,\n  ApiBearerAuth,\n  ApiTags,\n  ApiBadRequestResponse,\n  ApiBody,\n  ApiParam,\n} from \"@nestjs/swagger\";\n\nimport { DbUserHighlight } from \"../user/entities/user-highlight.entity\";\nimport { DbUser } from \"../user/user.entity\";\nimport { PageOptionsDto } from \"../common/dtos/page-options.dto\";\nimport { ApiPaginatedResponse } from \"../common/decorators/api-paginated-response.decorator\";\nimport { PageDto } from \"../common/dtos/page.dto\";\nimport { UserId } from \"../auth/supabase.user.decorator\";\nimport { SupabaseGuard } from \"../auth/supabase.guard\";\n\nimport { HighlightOptionsDto } from \"../highlight/dtos/highlight-options.dto\";\nimport { CreateUserListDto } from \"./dtos/create-user-list.dto\";\nimport { DbUserList } from \"./entities/user-list.entity\";\nimport { UserListService } from \"./user-list.service\";\nimport { DbUserListContributor } from \"./entities/user-list-contributor.entity\";\nimport { CollaboratorsDto } from \"./dtos/collaborators.dto\";\nimport { FilterListContributorsDto } from \"./dtos/filter-contributors.dto\";\nimport { DbTimezone } from \"./entities/timezones.entity\";\n\n@Controller(\"lists\")\n@ApiTags(\"User Lists service\")\nexport class UserListController {\n  constructor(private readonly userListService: UserListService) {}\n\n  @Get(\"/\")\n  @ApiOperation({\n    operationId: \"getListsForUser\",\n    summary: \"Gets lists for the authenticated user\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOkResponse({ type: DbUserList })\n  @ApiNotFoundResponse({ description: \"Unable to get user lists\" })\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  async getListsForUser(\n    @UserId() userId: number,\n    @Query() pageOptionsDto: PageOptionsDto\n  ): Promise> {\n    return this.userListService.findAllByUserId(pageOptionsDto, userId);\n  }\n\n  @Get(\"/featured\")\n  @ApiOperation({\n    operationId: \"getFeaturedLists\",\n    summary: \"Gets public featured lists\",\n  })\n  @ApiOkResponse({ type: DbUserList })\n  async getFeaturedLists(@Query() pageOptionsDto: PageOptionsDto): Promise> {\n    return this.userListService.findAllFeatured(pageOptionsDto);\n  }\n\n  @Post(\"/\")\n  @ApiOperation({\n    operationId: \"addListForUser\",\n    summary: \"Adds a new list for the authenticated user\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOkResponse({ type: DbUserList })\n  @ApiNotFoundResponse({ description: \"Unable to add user list\" })\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  @ApiBody({ type: CreateUserListDto })\n  async addListForUser(@Body() createUserListDto: CreateUserListDto, @UserId() userId: number): Promise {\n    const newList = await this.userListService.addUserList(userId, createUserListDto);\n\n    const listContributors = createUserListDto.contributors.map(async (contributor) =>\n      this.userListService.addUserListContributor(newList.id, contributor.id, contributor.login)\n    );\n\n    await Promise.allSettled(listContributors);\n\n    return newList;\n  }\n\n  @Get(\"/:id\")\n  @ApiOperation({\n    operationId: \"getUserList\",\n    summary: \"Retrieves an individual user list\",\n  })\n  @ApiOkResponse({ type: DbUserList })\n  @ApiNotFoundResponse({ description: \"Unable to get user list\" })\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  @ApiParam({ name: \"id\", type: \"string\" })\n  async getUserList(@Param(\"id\") id: string): Promise {\n    return this.userListService.findPublicOneById(id);\n  }\n\n  @Patch(\"/:id\")\n  @ApiOperation({\n    operationId: \"updateListForUser\",\n    summary: \"Updates the list for the authenticated user\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOkResponse({ type: DbUserList })\n  @ApiNotFoundResponse({ description: \"Unable to update user list\" })\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  @ApiBody({ type: CreateUserListDto })\n  @ApiParam({ name: \"id\", type: \"string\" })\n  async updateListForUser(\n    @Body() updateListDto: CreateUserListDto,\n    @UserId() userId: number,\n    @Param(\"id\") listId: string\n  ): Promise {\n    const list = await this.userListService.findOneById(listId, userId);\n\n    await this.userListService.updateUserList(list.id, {\n      name: updateListDto.name,\n      is_public: updateListDto.is_public,\n    });\n\n    return this.userListService.findOneById(list.id, userId);\n  }\n\n  @Delete(\"/:id\")\n  @ApiOperation({\n    operationId: \"deleteListForUser\",\n    summary: \"Deletes the list for the authenticated user\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiNotFoundResponse({ description: \"Unable to delete user list\" })\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  @ApiParam({ name: \"id\", type: \"string\" })\n  async deleteListForUser(@UserId() userId: number, @Param(\"id\") listId: string): Promise {\n    const list = await this.userListService.findOneById(listId, userId);\n\n    await this.userListService.deleteUserList(list.id);\n  }\n\n  @Get(\"/contributors\")\n  @ApiOperation({\n    operationId: \"getContributors\",\n    summary: \"Retrieves paginated contributors\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiPaginatedResponse(DbUser)\n  @ApiOkResponse({ type: DbUser })\n  @ApiNotFoundResponse({ description: \"Unable to get contributors\" })\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  async getContributors(\n    @Query(new ValidationPipe({ transform: true, forbidUnknownValues: true })) pageOptionsDto: FilterListContributorsDto\n  ): Promise> {\n    return this.userListService.findContributorsByFilter(pageOptionsDto);\n  }\n\n  @Get(\"/:id/contributors\")\n  @ApiOperation({\n    operationId: \"getUserListContributors\",\n    summary: \"Retrieves contributors for an individual user list\",\n  })\n  @ApiPaginatedResponse(DbUserListContributor)\n  @ApiOkResponse({ type: DbUserListContributor })\n  @ApiNotFoundResponse({ description: \"Unable to get user list contributors\" })\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  @ApiParam({ name: \"id\", type: \"string\" })\n  async getUserListContributors(\n    @Query() pageOptionsDto: FilterListContributorsDto,\n    @Param(\"id\") id: string\n  ): Promise> {\n    return this.userListService.findContributorsByListId(pageOptionsDto, id);\n  }\n\n  @Post(\"/:id/contributors\")\n  @ApiOperation({\n    operationId: \"postUserListContributors\",\n    summary: \"Add new contributors to an individual user list\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiNotFoundResponse({ description: \"Unable to add to user list contributors\" })\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  @ApiParam({ name: \"id\", type: \"string\" })\n  async postUserListContributors(\n    @Body() updateCollaboratorsDto: CollaboratorsDto,\n    @Param(\"id\") id: string\n  ): Promise {\n    const contributors = updateCollaboratorsDto.contributors.map(async (contributorId) =>\n      this.userListService.addUserListContributor(id, contributorId)\n    );\n\n    return Promise.all(contributors);\n  }\n\n  @Delete(\"/:id/contributors/:userListContributorId\")\n  @ApiOperation({\n    operationId: \"deleteUserListContributor\",\n    summary: \"Delete contributor from an individual user list\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiNotFoundResponse({ description: \"Unable to delete user from user list contributors\" })\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  @ApiParam({ name: \"id\", type: \"string\" })\n  @ApiParam({ name: \"userListContributorId\", type: \"integer\" })\n  async deleteUserListContributors(\n    @Param(\"id\") id: string,\n    @Param(\"userListContributorId\") userListContributorId: string\n  ): Promise {\n    await this.userListService.deleteUserListContributor(id, userListContributorId);\n  }\n\n  @Get(\"/:id/contributors/highlights\")\n  @ApiOperation({\n    operationId: \"getUserListContributorHighlights\",\n    summary: \"Retrieves highlights for contributors for an individual user list\",\n  })\n  @ApiPaginatedResponse(DbUserHighlight)\n  @ApiOkResponse({ type: DbUserHighlight })\n  @ApiNotFoundResponse({ description: \"Unable to get user list contributor highlights\" })\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  @ApiParam({ name: \"id\", type: \"string\" })\n  async getUserListContributorHighlights(\n    @Query() pageOptionsDto: HighlightOptionsDto,\n    @Param(\"id\") id: string\n  ): Promise> {\n    return this.userListService.findListContributorsHighlights(pageOptionsDto, id);\n  }\n\n  @Get(\"/timezones\")\n  @ApiOperation({\n    operationId: \"getTimezones\",\n    summary: \"Retrieves all users timezones\",\n  })\n  @ApiOkResponse({ type: DbTimezone })\n  @ApiNotFoundResponse({ description: \"Unable to get timezones\" })\n  async getTimezones(): Promise {\n    return this.userListService.getAllTimezones();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UserListModule.html":{"url":"modules/UserListModule.html","title":"module - UserListModule","body":"\n                   \n\n\n\n\n    Modules\n    UserListModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_UserListModule\n\n\n\ncluster_UserListModule_imports\n\n\n\ncluster_UserListModule_exports\n\n\n\ncluster_UserListModule_providers\n\n\n\n\nApiServicesModule\n\nApiServicesModule\n\n\n\nUserListModule\n\nUserListModule\n\nUserListModule -->\n\nApiServicesModule->UserListModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nUserListModule -->\n\nUserModule->UserListModule\n\n\n\n\n\nUserListService \n\nUserListService \n\nUserListService  -->\n\nUserListModule->UserListService \n\n\n\n\n\nUserListStatsService \n\nUserListStatsService \n\nUserListStatsService  -->\n\nUserListModule->UserListStatsService \n\n\n\n\n\nUserListService\n\nUserListService\n\nUserListModule -->\n\nUserListService->UserListModule\n\n\n\n\n\nUserListStatsService\n\nUserListStatsService\n\nUserListModule -->\n\nUserListStatsService->UserListModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/user-lists/user-list.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UserListService\n                        \n                        \n                            UserListStatsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UserListController\n                        \n                        \n                            UserListStatsController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            ApiServicesModule\n                        \n                        \n                            UserModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UserListService\n                        \n                        \n                            UserListStatsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\n\nimport { UserModule } from \"../user/user.module\";\nimport { ApiServicesModule } from \"../common/services/api-services.module\";\nimport { DbUser } from \"../user/user.entity\";\nimport { DbPullRequest } from \"../pull-requests/entities/pull-request.entity\";\nimport { DbUserHighlight } from \"../user/entities/user-highlight.entity\";\nimport { DbUserListContributor } from \"./entities/user-list-contributor.entity\";\nimport { DbUserList } from \"./entities/user-list.entity\";\nimport { UserListService } from \"./user-list.service\";\nimport { UserListController } from \"./user-list.controller\";\nimport { UserListStatsService } from \"./user-list-stat.service\";\nimport { UserListStatsController } from \"./user-list-stats.controller\";\nimport { DbUserListContributorStat } from \"./entities/user-list-contributor-stats.entity\";\nimport { DbContributionStatTimeframe } from \"./entities/contributions-timeframe.entity\";\nimport { DbContributorCategoryTimeframe } from \"./entities/contributors-timeframe.entity\";\n\n@Module({\n  imports: [\n    ApiServicesModule,\n    UserModule,\n    TypeOrmModule.forFeature(\n      [\n        DbUser,\n        DbUserList,\n        DbUserHighlight,\n        DbPullRequest,\n        DbUserListContributor,\n        DbUserListContributorStat,\n        DbContributionStatTimeframe,\n        DbContributorCategoryTimeframe,\n      ],\n      \"ApiConnection\"\n    ),\n  ],\n  controllers: [UserListController, UserListStatsController],\n  providers: [UserListService, UserListStatsService],\n  exports: [UserListService, UserListStatsService],\n})\nexport class UserListModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserListMostActiveContributorsDto.html":{"url":"classes/UserListMostActiveContributorsDto.html","title":"class - UserListMostActiveContributorsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserListMostActiveContributorsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user-lists/dtos/most-active-contributors.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PageOptionsDto\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                contributorType\n                            \n                            \n                                    Readonly\n                                    Optional\n                                orderBy\n                            \n                            \n                                    Readonly\n                                    Optional\n                                limit\n                            \n                            \n                                    Readonly\n                                    Optional\n                                orderDirection\n                            \n                            \n                                    Readonly\n                                    Optional\n                                page\n                            \n                            \n                                    Readonly\n                                    Optional\n                                prev_days_start_date\n                            \n                            \n                                    Readonly\n                                    Optional\n                                range\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        contributorType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserListContributorStatsTypeEnum\n\n                    \n                \n                \n                    \n                        Default value : UserListContributorStatsTypeEnum.all\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: UserListContributorStatsTypeEnum, enumName: 'UserListContributorStatsTypeEnum', default: undefined})@IsEnum(UserListContributorStatsTypeEnum)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-lists/dtos/most-active-contributors.dto.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        orderBy\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserListContributorStatsOrderEnum\n\n                    \n                \n                \n                    \n                        Default value : UserListContributorStatsOrderEnum.commits\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: UserListContributorStatsOrderEnum, enumName: 'UserListContributorStatsOrderEnum', default: undefined})@IsEnum(UserListContributorStatsOrderEnum)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-lists/dtos/most-active-contributors.dto.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 50\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, maximum: 1000, default: 10, type: 'integer'})@Type(undefined)@IsInt()@Min(1)@Max(10000)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:30\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        orderDirection\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OrderDirectionEnum\n\n                    \n                \n                \n                    \n                        Default value : OrderDirectionEnum.DESC\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: OrderDirectionEnum, enumName: 'OrderDirectionEnum', default: undefined})@IsEnum(OrderDirectionEnum)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:35\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, default: 1, type: 'integer'})@Type(undefined)@IsInt()@Min(1)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:17\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        prev_days_start_date\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 0\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Number of days in the past to start range block', default: 0, type: 'integer'})@Type(undefined)@IsIn(['0', '7', '30', '90'])@IsInt()@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:57\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        range\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 30\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Range in days', default: 30, type: 'integer'})@Type(undefined)@IsIn(['7', '30', '90'])@IsInt()@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:46\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEnum, IsOptional } from \"class-validator\";\n\nimport { ApiPropertyOptional } from \"@nestjs/swagger\";\nimport { PageOptionsDto } from \"../../common/dtos/page-options.dto\";\n\nexport enum UserListContributorStatsOrderEnum {\n  commits = \"commits\",\n  prs_created = \"prs_created\",\n  total_contributions = \"total_contributions\",\n}\n\nexport enum UserListContributorStatsTypeEnum {\n  all = \"all\",\n  active = \"active\",\n  new = \"new\",\n  alumni = \"alumni\",\n}\n\nexport class UserListMostActiveContributorsDto extends PageOptionsDto {\n  @ApiPropertyOptional({\n    enum: UserListContributorStatsTypeEnum,\n    enumName: \"UserListContributorStatsTypeEnum\",\n    default: UserListContributorStatsTypeEnum.all,\n  })\n  @IsEnum(UserListContributorStatsTypeEnum)\n  @IsOptional()\n  contributorType?: UserListContributorStatsTypeEnum = UserListContributorStatsTypeEnum.all;\n\n  @ApiPropertyOptional({\n    enum: UserListContributorStatsOrderEnum,\n    enumName: \"UserListContributorStatsOrderEnum\",\n    default: UserListContributorStatsOrderEnum.commits,\n  })\n  @IsEnum(UserListContributorStatsOrderEnum)\n  @IsOptional()\n  readonly orderBy?: UserListContributorStatsOrderEnum = UserListContributorStatsOrderEnum.commits;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserListService.html":{"url":"injectables/UserListService.html","title":"injectable - UserListService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserListService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user-lists/user-list.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addUserList\n                            \n                            \n                                    Async\n                                addUserListContributor\n                            \n                            \n                                baseListContributorQueryBuilder\n                            \n                            \n                                baseQueryBuilder\n                            \n                            \n                                baseUserQueryBuilder\n                            \n                            \n                                    Async\n                                deleteUserList\n                            \n                            \n                                    Async\n                                deleteUserListContributor\n                            \n                            \n                                    Async\n                                findAllByUserId\n                            \n                            \n                                    Async\n                                findAllFeatured\n                            \n                            \n                                    Async\n                                findContributorsByFilter\n                            \n                            \n                                    Async\n                                findContributorsByListId\n                            \n                            \n                                    Async\n                                findListContributorsHighlights\n                            \n                            \n                                    Async\n                                findOneById\n                            \n                            \n                                    Async\n                                findPublicOneById\n                            \n                            \n                                    Async\n                                getAllTimezones\n                            \n                            \n                                    Async\n                                updateUserList\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userListRepository: Repository, userListContributorRepository: Repository, userHighlightRepository: Repository, userRepository: Repository, pagerService: PagerService)\n                    \n                \n                        \n                            \n                                Defined in src/user-lists/user-list.service.ts:21\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userListRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userListContributorRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userHighlightRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        pagerService\n                                                  \n                                                        \n                                                                        PagerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addUserList\n                        \n                    \n                \n            \n            \n                \n                    \n                    addUserList(userId: number, list: CreateUserListDto)\n                \n            \n\n\n            \n                \n                    Defined in src/user-lists/user-list.service.ts:116\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    list\n                                    \n                                                CreateUserListDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addUserListContributor\n                        \n                    \n                \n            \n            \n                \n                    \n                    addUserListContributor(listId: string, userId: number, username?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/user-lists/user-list.service.ts:126\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    listId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        baseListContributorQueryBuilder\n                        \n                    \n                \n            \n            \n                \nbaseListContributorQueryBuilder()\n                \n            \n\n\n            \n                \n                    Defined in src/user-lists/user-list.service.ts:40\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         SelectQueryBuilder\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        baseQueryBuilder\n                        \n                    \n                \n            \n            \n                \nbaseQueryBuilder()\n                \n            \n\n\n            \n                \n                    Defined in src/user-lists/user-list.service.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         SelectQueryBuilder\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        baseUserQueryBuilder\n                        \n                    \n                \n            \n            \n                \nbaseUserQueryBuilder()\n                \n            \n\n\n            \n                \n                    Defined in src/user-lists/user-list.service.ts:46\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         SelectQueryBuilder\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteUserList\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteUserList(listId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/user-lists/user-list.service.ts:166\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    listId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteUserListContributor\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteUserListContributor(id: string, userListContributorId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/user-lists/user-list.service.ts:147\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userListContributorId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllByUserId\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllByUserId(pageOptionsDto: PageOptionsDto, userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/user-lists/user-list.service.ts:94\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllFeatured\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllFeatured(pageOptionsDto: PageOptionsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/user-lists/user-list.service.ts:105\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findContributorsByFilter\n                        \n                    \n                \n            \n            \n                \n                    \n                    findContributorsByFilter(pageOptionsDto: FilterListContributorsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/user-lists/user-list.service.ts:170\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                FilterListContributorsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findContributorsByListId\n                        \n                    \n                \n            \n            \n                \n                    \n                    findContributorsByListId(pageOptionsDto: FilterListContributorsDto, listId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/user-lists/user-list.service.ts:218\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                FilterListContributorsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    listId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findListContributorsHighlights\n                        \n                    \n                \n            \n            \n                \n                    \n                    findListContributorsHighlights(pageOptionsDto: HighlightOptionsDto, listId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/user-lists/user-list.service.ts:241\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                HighlightOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    listId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneById(id: string, userId?: number)\n                \n            \n\n\n            \n                \n                    Defined in src/user-lists/user-list.service.ts:52\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findPublicOneById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findPublicOneById(id: string, userId?: number)\n                \n            \n\n\n            \n                \n                    Defined in src/user-lists/user-list.service.ts:73\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAllTimezones\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllTimezones()\n                \n            \n\n\n            \n                \n                    Defined in src/user-lists/user-list.service.ts:280\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateUserList\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateUserList(listId: string, highlight: Partial)\n                \n            \n\n\n            \n                \n                    Defined in src/user-lists/user-list.service.ts:162\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    listId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    highlight\n                                    \n                                                Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException, UnauthorizedException } from \"@nestjs/common\";\nimport { Repository, SelectQueryBuilder } from \"typeorm\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\n\nimport { DbPullRequest } from \"../pull-requests/entities/pull-request.entity\";\nimport { PageOptionsDto } from \"../common/dtos/page-options.dto\";\nimport { PageDto } from \"../common/dtos/page.dto\";\nimport { PagerService } from \"../common/services/pager.service\";\nimport { DbUser } from \"../user/user.entity\";\nimport { PageMetaDto } from \"../common/dtos/page-meta.dto\";\nimport { HighlightOptionsDto } from \"../highlight/dtos/highlight-options.dto\";\nimport { DbUserHighlight } from \"../user/entities/user-highlight.entity\";\nimport { GetPrevDateISOString } from \"../common/util/datetimes\";\nimport { CreateUserListDto } from \"./dtos/create-user-list.dto\";\nimport { DbUserList } from \"./entities/user-list.entity\";\nimport { DbUserListContributor } from \"./entities/user-list-contributor.entity\";\nimport { FilterListContributorsDto } from \"./dtos/filter-contributors.dto\";\nimport { DbTimezone } from \"./entities/timezones.entity\";\n\n@Injectable()\nexport class UserListService {\n  constructor(\n    @InjectRepository(DbUserList, \"ApiConnection\")\n    private userListRepository: Repository,\n    @InjectRepository(DbUserListContributor, \"ApiConnection\")\n    private userListContributorRepository: Repository,\n    @InjectRepository(DbUserHighlight, \"ApiConnection\")\n    private userHighlightRepository: Repository,\n    @InjectRepository(DbUser, \"ApiConnection\")\n    private userRepository: Repository,\n    private pagerService: PagerService\n  ) {}\n\n  baseQueryBuilder(): SelectQueryBuilder {\n    const builder = this.userListRepository.createQueryBuilder(\"user_lists\");\n\n    return builder;\n  }\n\n  baseListContributorQueryBuilder(): SelectQueryBuilder {\n    const builder = this.userListContributorRepository.createQueryBuilder(\"user_list_contributors\");\n\n    return builder;\n  }\n\n  baseUserQueryBuilder(): SelectQueryBuilder {\n    const builder = this.userRepository.createQueryBuilder(\"users\");\n\n    return builder;\n  }\n\n  async findOneById(id: string, userId?: number): Promise {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .innerJoin(\"users\", \"users\", \"user_lists.user_id=users.id\")\n      .addSelect(\"users.login\", \"user_lists_login\")\n      .where(\"user_lists.id = :id\", { id });\n\n    if (userId) {\n      queryBuilder.andWhere(\"user_lists.user_id = :userId\", { userId });\n    }\n\n    const item: DbUserList | null = await queryBuilder.getOne();\n\n    if (!item) {\n      throw new NotFoundException();\n    }\n\n    return item;\n  }\n\n  async findPublicOneById(id: string, userId?: number): Promise {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .innerJoin(\"users\", \"users\", \"user_lists.user_id=users.id\")\n      .addSelect(\"users.login\", \"user_lists_login\")\n      .where(\"user_lists.id = :id\", { id });\n\n    const item: DbUserList | null = await queryBuilder.getOne();\n\n    if (!item) {\n      throw new NotFoundException();\n    }\n\n    if (!item.is_public && userId && userId !== item.user_id) {\n      throw new UnauthorizedException(\"You're not authorized to view this list\");\n    }\n\n    return item;\n  }\n\n  async findAllByUserId(pageOptionsDto: PageOptionsDto, userId: number): Promise> {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder.where(\"user_lists.user_id = :userId\", { userId }).orderBy(\"user_lists.updated_at\", \"DESC\");\n\n    return this.pagerService.applyPagination({\n      pageOptionsDto,\n      queryBuilder,\n    });\n  }\n\n  async findAllFeatured(pageOptionsDto: PageOptionsDto): Promise> {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder.where(\"is_featured=true\").andWhere(\"is_public=true\").orderBy(\"user_lists.updated_at\", \"DESC\");\n\n    return this.pagerService.applyPagination({\n      pageOptionsDto,\n      queryBuilder,\n    });\n  }\n\n  async addUserList(userId: number, list: CreateUserListDto) {\n    const newUserList = this.userListRepository.create({\n      user_id: userId,\n      name: list.name,\n      is_public: list.is_public,\n    });\n\n    return this.userListRepository.save(newUserList);\n  }\n\n  async addUserListContributor(listId: string, userId: number, username?: string) {\n    const existingContributor = await this.userListContributorRepository.findOne({\n      where: {\n        list_id: listId,\n        user_id: userId,\n      },\n    });\n\n    if (existingContributor) {\n      return existingContributor;\n    }\n\n    const newUserListContributor = this.userListContributorRepository.create({\n      list_id: listId,\n      user_id: userId,\n      username,\n    });\n\n    return this.userListContributorRepository.save(newUserListContributor);\n  }\n\n  async deleteUserListContributor(id: string, userListContributorId: string) {\n    const contributor = await this.userListContributorRepository.findOne({\n      where: {\n        id: userListContributorId,\n        list_id: id,\n      },\n    });\n\n    if (contributor) {\n      return this.userListContributorRepository.softDelete(userListContributorId);\n    }\n\n    throw new NotFoundException(\"User list contributor not found for given list ID\");\n  }\n\n  async updateUserList(listId: string, highlight: Partial) {\n    return this.userListRepository.update(listId, highlight);\n  }\n\n  async deleteUserList(listId: string) {\n    return this.userListRepository.softDelete(listId);\n  }\n\n  async findContributorsByFilter(pageOptionsDto: FilterListContributorsDto): Promise> {\n    const queryBuilder = this.userRepository.createQueryBuilder(\"user\");\n\n    queryBuilder.leftJoin(\n      (qb) =>\n        qb\n          .select(\"author_login\")\n          .addSelect(\n            \"COALESCE(AVG((pull_requests.merged_at::DATE - pull_requests.created_at::DATE)), 0)\",\n            \"avg_merge_time\"\n          )\n          .from(DbPullRequest, \"pull_requests\")\n          .where(\"now() - INTERVAL '30 days' > {\n    const queryBuilder = this.userListContributorRepository.createQueryBuilder(\"user_list_contributors\");\n\n    queryBuilder\n      .leftJoin(\"users\", \"users\", \"user_list_contributors.user_id=users.id\")\n      .addSelect(\"users.login\", \"user_list_contributors_login\")\n      .where(\"user_list_contributors.list_id = :listId\", { listId });\n\n    if (pageOptionsDto.contributor) {\n      queryBuilder.andWhere(\"LOWER(users.login) LIKE :contributor\", {\n        contributor: `%${pageOptionsDto.contributor.toLowerCase()}%`,\n      });\n    }\n\n    return this.pagerService.applyPagination({\n      pageOptionsDto,\n      queryBuilder,\n    });\n  }\n\n  async findListContributorsHighlights(\n    pageOptionsDto: HighlightOptionsDto,\n    listId: string\n  ): Promise> {\n    const startDate = GetPrevDateISOString(pageOptionsDto.prev_days_start_date);\n    const range = pageOptionsDto.range ?? 30;\n    const orderBy = pageOptionsDto.orderDirection ?? \"DESC\";\n    const queryBuilder = this.userHighlightRepository.createQueryBuilder(\"user_highlights\");\n\n    // return all highlights that belongs to a contributor of the list id\n    queryBuilder\n      .innerJoin(\n        \"user_list_contributors\",\n        \"user_list_contributors\",\n        \"user_list_contributors.user_id = user_highlights.user_id\"\n      )\n      .where(\"user_list_contributors.list_id = :listId\", { listId })\n      .andWhere(`'${startDate}'::TIMESTAMP - INTERVAL '${range} days'  {\n    const queryBuilder = this.baseUserQueryBuilder();\n\n    queryBuilder\n      .select(\"DISTINCT users.timezone as timezone\")\n      .where(\"users.timezone IS NOT NULL\")\n      .andWhere(\"users.timezone != ''\");\n\n    const timezones: DbTimezone[] = await queryBuilder.getRawMany();\n\n    return timezones;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserListStatsController.html":{"url":"controllers/UserListStatsController.html","title":"controller - UserListStatsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserListStatsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user-lists/user-list-stats.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                lists\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getContributionsByProject\n                            \n                            \n                                    Async\n                                getContributionsByTimeframe\n                            \n                            \n                                    Async\n                                getContributionsByTimeFrame\n                            \n                            \n                                    Async\n                                getContributorContributionsByProject\n                            \n                            \n                                    Async\n                                getMostActiveContributors\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getContributionsByProject\n                        \n                    \n                \n            \n            \n                \n                    \n                    getContributionsByProject(id: string, options: ContributionsByProjectDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id/stats/contributions-by-project')@ApiOperation({operationId: 'getContributionsByProject', summary: 'Gets contributions in a given timeframe'})@ApiOkResponse({type: DbContributionsProjects})@ApiNotFoundResponse({description: 'Unable to get contributions by project'})@ApiBadRequestResponse({description: 'Invalid request'})@ApiParam({name: 'id', type: 'string'})@ApiQuery({name: 'range', type: 'integer', required: false})\n                \n            \n\n            \n                \n                    Defined in src/user-lists/user-list-stats.controller.ts:73\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                ContributionsByProjectDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getContributionsByTimeframe\n                        \n                    \n                \n            \n            \n                \n                    \n                    getContributionsByTimeframe(id: string, options: ContributionsTimeframeDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id/stats/contributions-evolution-by-contributor-type')@ApiOperation({operationId: 'getContributorsByTimeframe', summary: 'Gets contributions by category within timeframe'})@ApiOkResponse({type: DbContributorCategoryTimeframe})@ApiNotFoundResponse({description: 'Unable to get contributions'})@ApiBadRequestResponse({description: 'Invalid request'})@ApiParam({name: 'id', type: 'string'})\n                \n            \n\n            \n                \n                    Defined in src/user-lists/user-list-stats.controller.ts:105\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                ContributionsTimeframeDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getContributionsByTimeFrame\n                        \n                    \n                \n            \n            \n                \n                    \n                    getContributionsByTimeFrame(id: string, options: ContributionsTimeframeDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id/stats/contributions-evolution-by-type')@ApiOperation({operationId: 'getContributionsByTimeFrame', summary: 'Gets contributions in a given timeframe'})@ApiOkResponse({type: DbContributionStatTimeframe})@ApiNotFoundResponse({description: 'Unable to get contributions'})@ApiBadRequestResponse({description: 'Invalid request'})@ApiParam({name: 'id', type: 'string'})\n                \n            \n\n            \n                \n                    Defined in src/user-lists/user-list-stats.controller.ts:56\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                ContributionsTimeframeDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getContributorContributionsByProject\n                        \n                    \n                \n            \n            \n                \n                    \n                    getContributorContributionsByProject(id: string, options: TopProjectsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id/stats/top-project-contributions-by-contributor/')@ApiOperation({operationId: 'getContributorContributionsByProject', summary: 'Gets top 20 contributor stats in a list by a given project'})@ApiOkResponse({type: DbUserListContributorStat})@ApiNotFoundResponse({description: 'Unable to get contributions'})@ApiBadRequestResponse({description: 'Invalid request'})@ApiParam({name: 'id', type: 'string'})\n                \n            \n\n            \n                \n                    Defined in src/user-lists/user-list-stats.controller.ts:89\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                TopProjectsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getMostActiveContributors\n                        \n                    \n                \n            \n            \n                \n                    \n                    getMostActiveContributors(id: string, pageOptionsDto: UserListMostActiveContributorsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id/stats/most-active-contributors')@ApiOperation({operationId: 'getMostActiveContributors', summary: 'Gets most active contributors for a given list'})@ApiPaginatedResponse(DbUserListContributorStat)@ApiOkResponse({type: DbUserListContributorStat})@ApiNotFoundResponse({description: 'Unable to get list most active contributors'})@ApiBadRequestResponse({description: 'Invalid request'})@ApiParam({name: 'id', type: 'string'})\n                \n            \n\n            \n                \n                    Defined in src/user-lists/user-list-stats.controller.ts:40\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                UserListMostActiveContributorsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Param, Query } from \"@nestjs/common\";\nimport {\n  ApiOperation,\n  ApiOkResponse,\n  ApiNotFoundResponse,\n  ApiTags,\n  ApiBadRequestResponse,\n  ApiParam,\n  ApiQuery,\n} from \"@nestjs/swagger\";\n\nimport { PageDto } from \"../common/dtos/page.dto\";\n\nimport { ApiPaginatedResponse } from \"../common/decorators/api-paginated-response.decorator\";\nimport { UserListMostActiveContributorsDto } from \"./dtos/most-active-contributors.dto\";\nimport { DbUserListContributorStat } from \"./entities/user-list-contributor-stats.entity\";\nimport { UserListStatsService } from \"./user-list-stat.service\";\nimport { DbContributionStatTimeframe } from \"./entities/contributions-timeframe.entity\";\nimport { ContributionsTimeframeDto } from \"./dtos/contributions-timeframe.dto\";\nimport { DbContributionsProjects } from \"./entities/contributions-projects.entity\";\nimport { DbContributorCategoryTimeframe } from \"./entities/contributors-timeframe.entity\";\nimport { ContributionsByProjectDto } from \"./dtos/contributions-by-project.dto\";\nimport { TopProjectsDto } from \"./dtos/top-projects.dto\";\n\n@Controller(\"lists\")\n@ApiTags(\"User Lists service\")\nexport class UserListStatsController {\n  constructor(private readonly userListStatsService: UserListStatsService) {}\n\n  @Get(\":id/stats/most-active-contributors\")\n  @ApiOperation({\n    operationId: \"getMostActiveContributors\",\n    summary: \"Gets most active contributors for a given list\",\n  })\n  @ApiPaginatedResponse(DbUserListContributorStat)\n  @ApiOkResponse({ type: DbUserListContributorStat })\n  @ApiNotFoundResponse({ description: \"Unable to get list most active contributors\" })\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  @ApiParam({ name: \"id\", type: \"string\" })\n  async getMostActiveContributors(\n    @Param(\"id\") id: string,\n    @Query() pageOptionsDto: UserListMostActiveContributorsDto\n  ): Promise> {\n    return this.userListStatsService.findAllListContributorStats(pageOptionsDto, id);\n  }\n\n  @Get(\":id/stats/contributions-evolution-by-type\")\n  @ApiOperation({\n    operationId: \"getContributionsByTimeFrame\",\n    summary: \"Gets contributions in a given timeframe\",\n  })\n  @ApiOkResponse({ type: DbContributionStatTimeframe })\n  @ApiNotFoundResponse({ description: \"Unable to get contributions\" })\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  @ApiParam({ name: \"id\", type: \"string\" })\n  async getContributionsByTimeFrame(\n    @Param(\"id\") id: string,\n    @Query() options: ContributionsTimeframeDto\n  ): Promise {\n    return this.userListStatsService.findContributionsInTimeframe(options, id);\n  }\n\n  @Get(\":id/stats/contributions-by-project\")\n  @ApiOperation({\n    operationId: \"getContributionsByProject\",\n    summary: \"Gets contributions in a given timeframe\",\n  })\n  @ApiOkResponse({ type: DbContributionsProjects })\n  @ApiNotFoundResponse({ description: \"Unable to get contributions by project\" })\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  @ApiParam({ name: \"id\", type: \"string\" })\n  @ApiQuery({ name: \"range\", type: \"integer\", required: false })\n  async getContributionsByProject(\n    @Param(\"id\") id: string,\n    @Query() options: ContributionsByProjectDto\n  ): Promise {\n    return this.userListStatsService.findContributionsByProject(id, options);\n  }\n\n  @Get(\":id/stats/top-project-contributions-by-contributor/\")\n  @ApiOperation({\n    operationId: \"getContributorContributionsByProject\",\n    summary: \"Gets top 20 contributor stats in a list by a given project\",\n  })\n  @ApiOkResponse({ type: DbUserListContributorStat })\n  @ApiNotFoundResponse({ description: \"Unable to get contributions\" })\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  @ApiParam({ name: \"id\", type: \"string\" })\n  async getContributorContributionsByProject(\n    @Param(\"id\") id: string,\n    @Query() options: TopProjectsDto\n  ): Promise {\n    return this.userListStatsService.findListContributorStatsByProject(options, id);\n  }\n\n  @Get(\":id/stats/contributions-evolution-by-contributor-type\")\n  @ApiOperation({\n    operationId: \"getContributorsByTimeframe\",\n    summary: \"Gets contributions by category within timeframe\",\n  })\n  @ApiOkResponse({ type: DbContributorCategoryTimeframe })\n  @ApiNotFoundResponse({ description: \"Unable to get contributions\" })\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  @ApiParam({ name: \"id\", type: \"string\" })\n  async getContributionsByTimeframe(\n    @Param(\"id\") id: string,\n    @Query() options: ContributionsTimeframeDto\n  ): Promise {\n    return this.userListStatsService.findContributorCategoriesByTimeframe(options, id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserListStatsService.html":{"url":"injectables/UserListStatsService.html","title":"injectable - UserListStatsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserListStatsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user-lists/user-list-stat.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                applyActiveContributorsFilter\n                            \n                            \n                                    Private\n                                applyAlumniContributorsFilter\n                            \n                            \n                                    Private\n                                applyNewContributorsFilter\n                            \n                            \n                                baseQueryBuilder\n                            \n                            \n                                    Async\n                                findAllListContributorStats\n                            \n                            \n                                    Async\n                                findContributionsByProject\n                            \n                            \n                                    Async\n                                findContributionsInTimeframe\n                            \n                            \n                                    Async\n                                findContributionsInTimeframeHelper\n                            \n                            \n                                    Async\n                                findContributorCategoriesByTimeframe\n                            \n                            \n                                    Async\n                                findContributorCategoriesInTimeframeHelper\n                            \n                            \n                                    Async\n                                findListContributorStatsByProject\n                            \n                            \n                                getDateFrames\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userListContributorRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/user-lists/user-list-stat.service.ts:27\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userListContributorRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        applyActiveContributorsFilter\n                        \n                    \n                \n            \n            \n                \n                    \n                    applyActiveContributorsFilter(queryBuilder: SelectQueryBuilder, startDate: string, range: number)\n                \n            \n\n\n            \n                \n                    Defined in src/user-lists/user-list-stat.service.ts:402\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    queryBuilder\n                                    \n                                                SelectQueryBuilder\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    startDate\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    range\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        30\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        applyAlumniContributorsFilter\n                        \n                    \n                \n            \n            \n                \n                    \n                    applyAlumniContributorsFilter(queryBuilder: SelectQueryBuilder, startDate: string, range: number)\n                \n            \n\n\n            \n                \n                    Defined in src/user-lists/user-list-stat.service.ts:462\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    queryBuilder\n                                    \n                                                SelectQueryBuilder\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    startDate\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    range\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        30\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        applyNewContributorsFilter\n                        \n                    \n                \n            \n            \n                \n                    \n                    applyNewContributorsFilter(queryBuilder: SelectQueryBuilder, startDate: string, range: number)\n                \n            \n\n\n            \n                \n                    Defined in src/user-lists/user-list-stat.service.ts:432\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    queryBuilder\n                                    \n                                                SelectQueryBuilder\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    startDate\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    range\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        30\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        baseQueryBuilder\n                        \n                    \n                \n            \n            \n                \nbaseQueryBuilder()\n                \n            \n\n\n            \n                \n                    Defined in src/user-lists/user-list-stat.service.ts:33\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         SelectQueryBuilder\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllListContributorStats\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllListContributorStats(pageOptionsDto: UserListMostActiveContributorsDto, listId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/user-lists/user-list-stat.service.ts:82\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                UserListMostActiveContributorsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    listId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findContributionsByProject\n                        \n                    \n                \n            \n            \n                \n                    \n                    findContributionsByProject(listId: string, options: ContributionsByProjectDto)\n                \n            \n\n\n            \n                \n                    Defined in src/user-lists/user-list-stat.service.ts:363\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    listId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                ContributionsByProjectDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findContributionsInTimeframe\n                        \n                    \n                \n            \n            \n                \n                    \n                    findContributionsInTimeframe(options: ContributionsTimeframeDto, listId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/user-lists/user-list-stat.service.ts:206\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                ContributionsTimeframeDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    listId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findContributionsInTimeframeHelper\n                        \n                    \n                \n            \n            \n                \n                    \n                    findContributionsInTimeframeHelper(startDate: string, range: number, contributorType: string, listId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/user-lists/user-list-stat.service.ts:236\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    startDate\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    range\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    contributorType\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    listId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findContributorCategoriesByTimeframe\n                        \n                    \n                \n            \n            \n                \n                    \n                    findContributorCategoriesByTimeframe(options: ContributionsTimeframeDto, listId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/user-lists/user-list-stat.service.ts:191\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                ContributionsTimeframeDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    listId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findContributorCategoriesInTimeframeHelper\n                        \n                    \n                \n            \n            \n                \n                    \n                    findContributorCategoriesInTimeframeHelper(startDate: string, range: number, listId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/user-lists/user-list-stat.service.ts:312\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    startDate\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    range\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    listId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findListContributorStatsByProject\n                        \n                    \n                \n            \n            \n                \n                    \n                    findListContributorStatsByProject(options: TopProjectsDto, listId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/user-lists/user-list-stat.service.ts:39\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                TopProjectsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    listId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getDateFrames\n                        \n                    \n                \n            \n            \n                \ngetDateFrames(range: number, denominator: number)\n                \n            \n\n\n            \n                \n                    Defined in src/user-lists/user-list-stat.service.ts:221\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    range\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        30\n                                    \n\n                                \n                                \n                                    denominator\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        7\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Date[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from \"@nestjs/common\";\nimport { Repository, SelectQueryBuilder } from \"typeorm\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\n\nimport { PageDto } from \"../common/dtos/page.dto\";\nimport { DbUserListContributor } from \"./entities/user-list-contributor.entity\";\nimport { DbUserListContributorStat } from \"./entities/user-list-contributor-stats.entity\";\nimport {\n  UserListContributorStatsOrderEnum,\n  UserListContributorStatsTypeEnum,\n  UserListMostActiveContributorsDto,\n} from \"./dtos/most-active-contributors.dto\";\nimport { ContributionsTimeframeDto } from \"./dtos/contributions-timeframe.dto\";\nimport { DbContributionStatTimeframe } from \"./entities/contributions-timeframe.entity\";\nimport { DbContributionsProjects } from \"./entities/contributions-projects.entity\";\nimport { DbContributorCategoryTimeframe } from \"./entities/contributors-timeframe.entity\";\nimport { ContributionPageMetaDto as ContributionsPageMetaDto } from \"./dtos/contributions-pagemeta.dto\";\nimport { ContributionsPageDto } from \"./dtos/contributions-page.dto\";\nimport { ContributionsByProjectDto } from \"./dtos/contributions-by-project.dto\";\nimport { TopProjectsDto } from \"./dtos/top-projects.dto\";\n\ninterface AllContributionsCount {\n  all_contributions: number;\n}\n\n@Injectable()\nexport class UserListStatsService {\n  constructor(\n    @InjectRepository(DbUserListContributor, \"ApiConnection\")\n    private userListContributorRepository: Repository\n  ) {}\n\n  baseQueryBuilder(): SelectQueryBuilder {\n    const builder = this.userListContributorRepository.createQueryBuilder(\"user_list_contributors\");\n\n    return builder;\n  }\n\n  async findListContributorStatsByProject(\n    options: TopProjectsDto,\n    listId: string\n  ): Promise {\n    const range = options.range!;\n    const repoId = options.repo_id;\n\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder.innerJoin(\"users\", \"users\", \"user_list_contributors.user_id=users.id\");\n\n    queryBuilder\n      .select(\"users.login\", \"login\")\n      .andWhere(\"user_list_contributors.list_id = :listId\", { listId })\n      .addSelect(\n        `(\n          SELECT COALESCE(SUM(\"pull_requests\".\"commits\"), 0)\n          FROM \"pull_requests\"\n          WHERE \"pull_requests\".\"author_login\" = \"users\".\"login\"\n            AND \"pull_requests\".\"repo_id\" = ${repoId}\n            AND now() - INTERVAL '${range} days' > {\n    const range = pageOptionsDto.range!;\n    const now = new Date().toISOString();\n\n    const cteBuilder = this.baseQueryBuilder();\n\n    cteBuilder.innerJoin(\"users\", \"users\", \"user_list_contributors.user_id=users.id\");\n\n    switch (pageOptionsDto.contributorType) {\n      case UserListContributorStatsTypeEnum.all:\n        break;\n\n      case UserListContributorStatsTypeEnum.active:\n        this.applyActiveContributorsFilter(cteBuilder, now, range);\n        break;\n\n      case UserListContributorStatsTypeEnum.new:\n        this.applyNewContributorsFilter(cteBuilder, now, range);\n        break;\n\n      case UserListContributorStatsTypeEnum.alumni: {\n        this.applyAlumniContributorsFilter(cteBuilder, now, range);\n        break;\n      }\n\n      default:\n        break;\n    }\n\n    cteBuilder\n      .select(\"users.login\", \"login\")\n      .andWhere(\"user_list_contributors.list_id = :listId\", { listId })\n      .addSelect(\n        `(\n          SELECT COALESCE(SUM(\"pull_requests\".\"commits\"), 0)\n          FROM \"pull_requests\"\n          WHERE \"pull_requests\".\"author_login\" = \"users\".\"login\"\n            AND now() - INTERVAL '${range} days' (),\n        new ContributionsPageMetaDto({ itemCount, pageOptionsDto }, 0)\n      );\n    }\n\n    const allContributionsCount = allContributionsResult.all_contributions;\n\n    cteBuilder.offset(pageOptionsDto.skip).limit(pageOptionsDto.limit);\n\n    const entities: DbUserListContributorStat[] = await entityQb.getRawMany();\n\n    const pageMetaDto = new ContributionsPageMetaDto({ itemCount, pageOptionsDto }, allContributionsCount);\n\n    return new ContributionsPageDto(entities, pageMetaDto);\n  }\n\n  async findContributorCategoriesByTimeframe(\n    options: ContributionsTimeframeDto,\n    listId: string\n  ): Promise {\n    const denominator = 82;\n    const range = options.range!;\n    const dates = this.getDateFrames(range, denominator);\n\n    const framePromises = dates.map(async (frameStartDate) =>\n      this.findContributorCategoriesInTimeframeHelper(frameStartDate.toISOString(), range / denominator, listId)\n    );\n\n    return Promise.all(framePromises);\n  }\n\n  async findContributionsInTimeframe(\n    options: ContributionsTimeframeDto,\n    listId: string\n  ): Promise {\n    const range = options.range!;\n    const contributorType = options.contributorType!;\n    const dates = this.getDateFrames(range);\n\n    const framePromises = dates.map(async (frameStartDate) =>\n      this.findContributionsInTimeframeHelper(frameStartDate.toISOString(), range / 7, contributorType, listId)\n    );\n\n    return Promise.all(framePromises);\n  }\n\n  getDateFrames(range = 30, denominator = 7): Date[] {\n    const currentDate = new Date();\n    const frameDuration = range / denominator;\n    const dates: Date[] = [];\n\n    // eslint-disable-next-line no-loops/no-loops\n    for (let i = 0; i  {\n    const subQueryBuilder = this.baseQueryBuilder();\n\n    subQueryBuilder.innerJoin(\n      \"users\",\n      \"users\",\n      `user_list_contributors.user_id=users.id AND user_list_contributors.list_id='${listId}'`\n    );\n\n    switch (contributorType) {\n      case UserListContributorStatsTypeEnum.all:\n        break;\n\n      case UserListContributorStatsTypeEnum.active:\n        this.applyActiveContributorsFilter(subQueryBuilder, startDate, range);\n        break;\n\n      case UserListContributorStatsTypeEnum.new:\n        this.applyNewContributorsFilter(subQueryBuilder, startDate, range);\n        break;\n\n      case UserListContributorStatsTypeEnum.alumni: {\n        this.applyAlumniContributorsFilter(subQueryBuilder, startDate, range);\n        break;\n      }\n\n      default:\n        break;\n    }\n\n    subQueryBuilder\n      .addSelect(\n        `(\n          SELECT COALESCE(SUM(\"pull_requests\".\"commits\"), 0)\n          FROM \"pull_requests\"\n          WHERE \"pull_requests\".\"author_login\" = \"users\".\"login\"\n            AND \"pull_requests\".\"updated_at\" > '${startDate}'::TIMESTAMP - INTERVAL '${range} days'\n            AND \"pull_requests\".\"updated_at\"  '${startDate}'::TIMESTAMP - INTERVAL '${range} days'\n            AND \"pull_requests\".\"updated_at\"  {\n    const activeCountQueryBuilder = this.baseQueryBuilder();\n\n    activeCountQueryBuilder.innerJoin(\n      \"users\",\n      \"users\",\n      `user_list_contributors.user_id=users.id AND user_list_contributors.list_id='${listId}'`\n    );\n\n    this.applyActiveContributorsFilter(activeCountQueryBuilder, startDate, range);\n\n    const activeCount = await activeCountQueryBuilder.getCount();\n\n    const newCountQueryBuilder = this.baseQueryBuilder();\n\n    newCountQueryBuilder.innerJoin(\n      \"users\",\n      \"users\",\n      `user_list_contributors.user_id=users.id AND user_list_contributors.list_id='${listId}'`\n    );\n\n    this.applyNewContributorsFilter(newCountQueryBuilder, startDate, range);\n\n    const newCount = await newCountQueryBuilder.getCount();\n\n    const alumniCountQueryBuilder = this.baseQueryBuilder();\n\n    alumniCountQueryBuilder.innerJoin(\n      \"users\",\n      \"users\",\n      `user_list_contributors.user_id=users.id AND user_list_contributors.list_id='${listId}'`\n    );\n\n    this.applyAlumniContributorsFilter(alumniCountQueryBuilder, startDate, range);\n\n    const alumniCount = await alumniCountQueryBuilder.getCount();\n\n    return {\n      time_start: startDate,\n      time_end: `${new Date(new Date(startDate).getTime() + range * 86400000).toISOString()}`,\n      active: activeCount,\n      new: newCount,\n      alumni: alumniCount,\n      all: activeCount + newCount + alumniCount,\n    };\n  }\n\n  async findContributionsByProject(\n    listId: string,\n    options: ContributionsByProjectDto\n  ): Promise {\n    const range = options.range!;\n\n    const queryBuilder = this.userListContributorRepository.manager\n      .createQueryBuilder()\n      .select(\"split_part(repos.full_name, '/', 1)\", \"org_id\")\n      .addSelect(\"split_part(repos.full_name, '/', 2)\", \"project_id\")\n      .addSelect(\"repos.id\", \"repo_id\")\n      .addSelect(\"COUNT(pr.id)\", \"contributions\")\n\n      // grab pull requests first\n      .from(\"pull_requests\", \"pr\")\n\n      // and join them with repos\n      .innerJoin(\"repos\", \"repos\", 'pr.\"repo_id\" = \"repos\".\"id\"')\n\n      // join with filtered users from the user list\n      .innerJoin(\n        (subQuery) =>\n          subQuery\n            .select(\"users.login\", \"user_login\")\n            .from(\"user_list_contributors\", \"user_list_contributors\")\n            .innerJoin(\"users\", \"users\", '\"user_list_contributors\".\"user_id\" = \"users\".\"id\"')\n            .where(`\"user_list_contributors\".\"list_id\" = '${listId}'`),\n        \"filtered_users\",\n        'pr.\"author_login\" = \"filtered_users\".\"user_login\"'\n      )\n\n      .where(`pr.\"updated_at\" BETWEEN NOW() - INTERVAL '${range} days' AND NOW()`)\n      .groupBy(\"repos.full_name, repos.id\");\n\n    const entities: DbContributionsProjects[] = await queryBuilder.getRawMany();\n\n    return entities;\n  }\n\n  private applyActiveContributorsFilter(\n    queryBuilder: SelectQueryBuilder,\n    startDate: string,\n    range = 30\n  ) {\n    queryBuilder\n      .leftJoin(\n        `(\n        SELECT DISTINCT \"author_login\"\n        FROM \"pull_requests\"\n        WHERE \"pull_requests\".\"updated_at\" BETWEEN '${startDate}'::TIMESTAMP - INTERVAL '${range} days'\n          AND '${startDate}'::TIMESTAMP\n      )`,\n        \"current_month_prs\",\n        `\"users\".\"login\" = \"current_month_prs\".\"author_login\"`\n      )\n      .leftJoin(\n        `(\n        SELECT DISTINCT \"author_login\"\n        FROM \"pull_requests\"\n        WHERE \"pull_requests\".\"updated_at\" BETWEEN '${startDate}'::TIMESTAMP - INTERVAL '${range + range} days'\n          AND '${startDate}'::TIMESTAMP - INTERVAL '${range} days'\n      )`,\n        \"previous_month_prs\",\n        `\"users\".\"login\" = \"previous_month_prs\".\"author_login\"`\n      )\n      .where(`\"previous_month_prs\".\"author_login\" IS NOT NULL`)\n      .andWhere(`\"current_month_prs\".\"author_login\" IS NOT NULL`);\n  }\n\n  private applyNewContributorsFilter(\n    queryBuilder: SelectQueryBuilder,\n    startDate: string,\n    range = 30\n  ) {\n    queryBuilder\n      .leftJoin(\n        `(\n            SELECT DISTINCT \"author_login\"\n            FROM \"pull_requests\"\n            WHERE \"pull_requests\".\"updated_at\" BETWEEN NOW() - INTERVAL '${range} days'\n              AND '${startDate}'::TIMESTAMP\n          )`,\n        \"current_month_prs\",\n        `\"users\".\"login\" = \"current_month_prs\".\"author_login\"`\n      )\n      .leftJoin(\n        `(\n            SELECT DISTINCT \"author_login\"\n            FROM \"pull_requests\"\n            WHERE \"pull_requests\".\"updated_at\" BETWEEN NOW() - INTERVAL '${range + range} days'\n              AND '${startDate}'::TIMESTAMP - INTERVAL '${range} days'\n          )`,\n        \"previous_month_prs\",\n        `\"users\".\"login\" = \"previous_month_prs\".\"author_login\"`\n      )\n      .where(`\"previous_month_prs\".\"author_login\" IS NULL`)\n      .andWhere(`\"current_month_prs\".\"author_login\" IS NOT NULL`);\n  }\n\n  private applyAlumniContributorsFilter(\n    queryBuilder: SelectQueryBuilder,\n    startDate: string,\n    range = 30\n  ) {\n    queryBuilder\n      .leftJoin(\n        `(\n            SELECT DISTINCT \"author_login\"\n            FROM \"pull_requests\"\n            WHERE \"pull_requests\".\"updated_at\" BETWEEN '${startDate}'::TIMESTAMP - INTERVAL '${range} days'\n              AND '${startDate}'::TIMESTAMP\n          )`,\n        \"current_month_prs\",\n        `\"users\".\"login\" = \"current_month_prs\".\"author_login\"`\n      )\n      .leftJoin(\n        `(\n            SELECT DISTINCT \"author_login\"\n            FROM \"pull_requests\"\n            WHERE \"pull_requests\".\"updated_at\" BETWEEN '${startDate}'::TIMESTAMP - INTERVAL '${range + range} days'\n              AND '${startDate}'::TIMESTAMP - INTERVAL '${range} days'\n          )`,\n        \"previous_month_prs\",\n        `\"users\".\"login\" = \"previous_month_prs\".\"author_login\"`\n      )\n      .where(`\"previous_month_prs\".\"author_login\" IS NOT NULL`)\n      .andWhere(`\"current_month_prs\".\"author_login\" IS NULL`);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UserModule.html":{"url":"modules/UserModule.html","title":"module - UserModule","body":"\n                   \n\n\n\n\n    Modules\n    UserModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_UserModule\n\n\n\ncluster_UserModule_imports\n\n\n\ncluster_UserModule_providers\n\n\n\ncluster_UserModule_exports\n\n\n\n\nApiServicesModule\n\nApiServicesModule\n\n\n\nUserModule\n\nUserModule\n\nUserModule -->\n\nApiServicesModule->UserModule\n\n\n\n\n\nPullRequestModule\n\nPullRequestModule\n\nUserModule -->\n\nPullRequestModule->UserModule\n\n\n\n\n\nRepoModule\n\nRepoModule\n\nUserModule -->\n\nRepoModule->UserModule\n\n\n\n\n\nTierModule\n\nTierModule\n\nUserModule -->\n\nTierModule->UserModule\n\n\n\n\n\nEndorsementService \n\nEndorsementService \n\nEndorsementService  -->\n\nUserModule->EndorsementService \n\n\n\n\n\nRepoService \n\nRepoService \n\nRepoService  -->\n\nUserModule->RepoService \n\n\n\n\n\nUserFollowService \n\nUserFollowService \n\nUserFollowService  -->\n\nUserModule->UserFollowService \n\n\n\n\n\nUserHighlightsService \n\nUserHighlightsService \n\nUserHighlightsService  -->\n\nUserModule->UserHighlightsService \n\n\n\n\n\nUserOrganizationService \n\nUserOrganizationService \n\nUserOrganizationService  -->\n\nUserModule->UserOrganizationService \n\n\n\n\n\nUserService \n\nUserService \n\nUserService  -->\n\nUserModule->UserService \n\n\n\n\n\nEndorsementService\n\nEndorsementService\n\nUserModule -->\n\nEndorsementService->UserModule\n\n\n\n\n\nRepoFilterService\n\nRepoFilterService\n\nUserModule -->\n\nRepoFilterService->UserModule\n\n\n\n\n\nRepoService\n\nRepoService\n\nUserModule -->\n\nRepoService->UserModule\n\n\n\n\n\nUserCollaborationService\n\nUserCollaborationService\n\nUserModule -->\n\nUserCollaborationService->UserModule\n\n\n\n\n\nUserFollowService\n\nUserFollowService\n\nUserModule -->\n\nUserFollowService->UserModule\n\n\n\n\n\nUserHighlightsService\n\nUserHighlightsService\n\nUserModule -->\n\nUserHighlightsService->UserModule\n\n\n\n\n\nUserNotificationService\n\nUserNotificationService\n\nUserModule -->\n\nUserNotificationService->UserModule\n\n\n\n\n\nUserOrganizationService\n\nUserOrganizationService\n\nUserModule -->\n\nUserOrganizationService->UserModule\n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/user/user.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            EndorsementService\n                        \n                        \n                            RepoFilterService\n                        \n                        \n                            RepoService\n                        \n                        \n                            UserCollaborationService\n                        \n                        \n                            UserFollowService\n                        \n                        \n                            UserHighlightsService\n                        \n                        \n                            UserNotificationService\n                        \n                        \n                            UserOrganizationService\n                        \n                        \n                            UserService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UserController\n                        \n                        \n                            UserHighlightsController\n                        \n                        \n                            UserFollowsController\n                        \n                        \n                            UserNotificationController\n                        \n                        \n                            UserCollaborationController\n                        \n                        \n                            UserEndorsementController\n                        \n                        \n                            UserRecommendationController\n                        \n                        \n                            UserFollowingController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            ApiServicesModule\n                        \n                        \n                            PullRequestModule\n                        \n                        \n                            RepoModule\n                        \n                        \n                            TierModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            EndorsementService\n                        \n                        \n                            RepoService\n                        \n                        \n                            UserFollowService\n                        \n                        \n                            UserHighlightsService\n                        \n                        \n                            UserOrganizationService\n                        \n                        \n                            UserService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\n\nimport { PullRequestModule } from \"../pull-requests/pull-request.module\";\nimport { RepoModule } from \"../repo/repo.module\";\n\nimport { DbRepo } from \"../repo/entities/repo.entity\";\nimport { RepoService } from \"../repo/repo.service\";\nimport { RepoFilterService } from \"../common/filters/repo-filter.service\";\nimport { EndorsementService } from \"../endorsement/endorsement.service\";\nimport { DbEndorsement } from \"../endorsement/entities/endorsement.entity\";\nimport { ApiServicesModule } from \"../common/services/api-services.module\";\nimport { DbUserList } from \"../user-lists/entities/user-list.entity\";\nimport { DbInsight } from \"../insight/entities/insight.entity\";\nimport { TierModule } from \"../tier/tier.module\";\nimport { DbUser } from \"./user.entity\";\nimport { UserService } from \"./services/user.service\";\nimport { UserController } from \"./user.controller\";\nimport { DbUserHighlight } from \"./entities/user-highlight.entity\";\nimport { UserHighlightsController } from \"./user-highlight.controller\";\nimport { UserHighlightsService } from \"./user-highlights.service\";\nimport { UserFollowsController } from \"./user-follow.controller\";\nimport { UserFollowService } from \"./user-follow.service\";\nimport { DbUserToUserFollows } from \"./entities/user-follows.entity\";\nimport { DbUserHighlightReaction } from \"./entities/user-highlight-reaction.entity\";\nimport { DbUserTopRepo } from \"./entities/user-top-repo.entity\";\nimport { DbUserNotification } from \"./entities/user-notification.entity\";\nimport { DbUserCollaboration } from \"./entities/user-collaboration.entity\";\nimport { UserNotificationService } from \"./user-notifcation.service\";\nimport { UserNotificationController } from \"./user-notification.controller\";\nimport { UserCollaborationService } from \"./user-collaboration.service\";\nimport { UserCollaborationController } from \"./user-collaboration.controller\";\nimport { UserEndorsementController } from \"./user-endorsement.controller\";\n\nimport { UserRecommendationController } from \"./user-recommendation.controller\";\nimport { DbUserOrganization } from \"./entities/user-organization.entity\";\nimport { UserFollowingController } from \"./user-following.controller\";\nimport { UserOrganizationService } from \"./user-organization.service\";\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature(\n      [\n        DbUser,\n        DbUserHighlight,\n        DbUserHighlightReaction,\n        DbUserToUserFollows,\n        DbUserTopRepo,\n        DbUserNotification,\n        DbUserCollaboration,\n        DbRepo,\n        DbEndorsement,\n        DbUserOrganization,\n        DbInsight,\n        DbUserList,\n      ],\n      \"ApiConnection\"\n    ),\n    PullRequestModule,\n    RepoModule,\n    ApiServicesModule,\n    TierModule,\n  ],\n  controllers: [\n    UserController,\n    UserHighlightsController,\n    UserFollowsController,\n    UserNotificationController,\n    UserCollaborationController,\n    UserEndorsementController,\n    UserRecommendationController,\n    UserFollowingController,\n  ],\n  providers: [\n    UserService,\n    UserController,\n    UserHighlightsService,\n    UserHighlightsController,\n    UserFollowService,\n    RepoService,\n    RepoFilterService,\n    UserNotificationService,\n    UserCollaborationService,\n    EndorsementService,\n    UserOrganizationService,\n  ],\n  exports: [\n    UserService,\n    UserHighlightsService,\n    UserFollowService,\n    RepoService,\n    EndorsementService,\n    UserOrganizationService,\n  ],\n})\nexport class UserModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserNotificationController.html":{"url":"controllers/UserNotificationController.html","title":"controller - UserNotificationController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserNotificationController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user-notification.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                user/notifications\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getUserNotifications\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getUserNotifications\n                        \n                    \n                \n            \n            \n                \n                    \n                    getUserNotifications(userId: number, pageOptionsDto: PageOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/')@ApiOperation({operationId: 'getUserNotifications', summary: 'Retrieves notifications for the authenticated user'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOkResponse({type: undefined})@ApiNotFoundResponse({description: 'Unable to get user notifications'})\n                \n            \n\n            \n                \n                    Defined in src/user/user-notification.controller.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Query, UseGuards } from \"@nestjs/common\";\nimport { ApiBearerAuth, ApiNotFoundResponse, ApiOkResponse, ApiOperation, ApiTags, OmitType } from \"@nestjs/swagger\";\n\nimport { PageOptionsDto } from \"../common/dtos/page-options.dto\";\nimport { PageDto } from \"../common/dtos/page.dto\";\nimport { UserId } from \"../auth/supabase.user.decorator\";\nimport { SupabaseGuard } from \"../auth/supabase.guard\";\nimport { DbUserNotification } from \"./entities/user-notification.entity\";\nimport { UserNotificationService } from \"./user-notifcation.service\";\n\n@Controller(\"user/notifications\")\n@ApiTags(\"User service\")\nexport class UserNotificationController {\n  constructor(private userNotificationService: UserNotificationService) {}\n\n  @Get(\"/\")\n  @ApiOperation({\n    operationId: \"getUserNotifications\",\n    summary: \"Retrieves notifications for the authenticated user\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOkResponse({ type: OmitType(DbUserNotification, [\"read_at\"]) })\n  @ApiNotFoundResponse({ description: \"Unable to get user notifications\" })\n  async getUserNotifications(\n    @UserId() userId: number,\n    @Query() pageOptionsDto: PageOptionsDto\n  ): Promise> {\n    return this.userNotificationService.findAllByUserId(userId, pageOptionsDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserNotificationService.html":{"url":"injectables/UserNotificationService.html","title":"injectable - UserNotificationService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserNotificationService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user-notifcation.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addUserFollowerNotification\n                            \n                            \n                                    Async\n                                addUserHighlightNotification\n                            \n                            \n                                    Async\n                                addUserHighlightReactionNotification\n                            \n                            \n                                    Async\n                                addUserNotification\n                            \n                            \n                                baseQueryBuilder\n                            \n                            \n                                    Async\n                                findAllByUserId\n                            \n                            \n                                    Async\n                                markNotificationsAsRead\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userNotificationRepository: Repository, userService: UserService)\n                    \n                \n                        \n                            \n                                Defined in src/user/user-notifcation.service.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userNotificationRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addUserFollowerNotification\n                        \n                    \n                \n            \n            \n                \n                    \n                    addUserFollowerNotification(userId: number, followedUserId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-notifcation.service.ts:63\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    followedUserId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addUserHighlightNotification\n                        \n                    \n                \n            \n            \n                \n                    \n                    addUserHighlightNotification(highlightId: number, userId: number, highlightUserId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-notifcation.service.ts:87\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    highlightId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    highlightUserId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addUserHighlightReactionNotification\n                        \n                    \n                \n            \n            \n                \n                    \n                    addUserHighlightReactionNotification(userId: number, highlightUserId: number, highlightId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-notifcation.service.ts:75\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    highlightUserId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    highlightId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addUserNotification\n                        \n                    \n                \n            \n            \n                \n                    \n                    addUserNotification(userNotification: Partial)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-notifcation.service.ts:52\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userNotification\n                                    \n                                                Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        baseQueryBuilder\n                        \n                    \n                \n            \n            \n                \nbaseQueryBuilder()\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-notifcation.service.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         SelectQueryBuilder\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllByUserId\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllByUserId(userId: number, pageOptionsDto: PageOptionsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-notifcation.service.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        markNotificationsAsRead\n                        \n                    \n                \n            \n            \n                \n                    \n                    markNotificationsAsRead(notificationIds: number[])\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-notifcation.service.ts:99\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    notificationIds\n                                    \n                                            number[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { Repository, SelectQueryBuilder } from \"typeorm\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\n\nimport { PageMetaDto } from \"../common/dtos/page-meta.dto\";\nimport { PageDto } from \"../common/dtos/page.dto\";\nimport { PageOptionsDto } from \"../common/dtos/page-options.dto\";\nimport { DbUserNotification } from \"./entities/user-notification.entity\";\nimport { UserNotificationTypes, userNotificationTypes } from \"./entities/user-notification.constants\";\nimport { UserService } from \"./services/user.service\";\n\n@Injectable()\nexport class UserNotificationService {\n  constructor(\n    @InjectRepository(DbUserNotification, \"ApiConnection\")\n    private userNotificationRepository: Repository,\n    private userService: UserService\n  ) {}\n\n  baseQueryBuilder(): SelectQueryBuilder {\n    const builder = this.userNotificationRepository.createQueryBuilder(\"user_notifications\");\n\n    return builder;\n  }\n\n  async findAllByUserId(userId: number, pageOptionsDto: PageOptionsDto) {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .innerJoin(\"users\", \"users\", \"user_notifications.user_id=users.id\")\n      .innerJoinAndSelect(\"user_notifications.from_user\", \"from_user\")\n      .where(\"user_id = :userId\", { userId })\n      .andWhere(\"user_notifications.type IN (:...userNotificationTypes)\", { userNotificationTypes })\n      .orderBy(\"user_notifications.notified_at\", \"DESC\");\n\n    queryBuilder.offset(pageOptionsDto.skip).limit(pageOptionsDto.limit);\n\n    const entities = await queryBuilder.getMany();\n    const itemCount = await queryBuilder.getCount();\n\n    const notificationIds = entities\n      .filter((notification) => !notification.read_at)\n      .map((notification) => notification.id);\n\n    await this.markNotificationsAsRead(notificationIds);\n\n    const pageMetaDto = new PageMetaDto({ itemCount, pageOptionsDto });\n\n    return new PageDto(entities, pageMetaDto);\n  }\n\n  async addUserNotification(userNotification: Partial) {\n    return this.userNotificationRepository.save({\n      type: userNotification.type,\n      notified_at: new Date(),\n      user_id: userNotification.user_id,\n      message: userNotification.message,\n      from_user_id: userNotification.from_user_id,\n      meta_id: userNotification.meta_id,\n    });\n  }\n\n  async addUserFollowerNotification(userId: number, followedUserId: number) {\n    const followUser = await this.userService.findOneById(userId);\n\n    return this.addUserNotification({\n      type: UserNotificationTypes.Follow,\n      user_id: followedUserId,\n      from_user_id: userId,\n      message: `${followUser.login} followed you`,\n      meta_id: followUser.login,\n    });\n  }\n\n  async addUserHighlightReactionNotification(userId: number, highlightUserId: number, highlightId: number) {\n    const followUser = await this.userService.findOneById(userId);\n\n    return this.addUserNotification({\n      type: UserNotificationTypes.HighlightReaction,\n      user_id: highlightUserId,\n      from_user_id: userId,\n      message: `${followUser.login} reacted to your highlight`,\n      meta_id: `${highlightId}`,\n    });\n  }\n\n  async addUserHighlightNotification(highlightId: number, userId: number, highlightUserId: number) {\n    const followUser = await this.userService.findOneById(userId);\n\n    return this.addUserNotification({\n      type: UserNotificationTypes.HighlightCreated,\n      user_id: highlightUserId,\n      from_user_id: userId,\n      message: `${followUser.login} created a new highlight`,\n      meta_id: `${highlightId}`,\n    });\n  }\n\n  async markNotificationsAsRead(notificationIds: number[]) {\n    const updates = notificationIds.map(async (id) =>\n      this.userNotificationRepository.update(id, { read_at: new Date() })\n    );\n\n    await Promise.all(updates);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserOnboardingDto.html":{"url":"classes/UserOnboardingDto.html","title":"class - UserOnboardingDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserOnboardingDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dtos/user-onboarding.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                interests\n                            \n                            \n                                    Public\n                                timezone\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        interests\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'An array of interests', type: 'string', isArray: true, example: undefined})@IsArray()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/user-onboarding.dto.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        timezone\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'User timezone in UTC', type: String, example: 'UTC-5'})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/user-onboarding.dto.ts:20\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsArray, IsString } from \"class-validator\";\n\nexport class UserOnboardingDto {\n  @ApiProperty({\n    description: \"An array of interests\",\n    type: \"string\",\n    isArray: true,\n    example: [\"javascript\", \"react\"],\n  })\n  @IsArray()\n  public interests: string[];\n\n  @ApiProperty({\n    description: \"User timezone in UTC\",\n    type: String,\n    example: \"UTC-5\",\n  })\n  @IsString()\n  public timezone: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserOrganizationService.html":{"url":"injectables/UserOrganizationService.html","title":"injectable - UserOrganizationService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserOrganizationService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user-organization.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                baseQueryBuilder\n                            \n                            \n                                    Async\n                                findAllByUserId\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userOrganizationRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/user/user-organization.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userOrganizationRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        baseQueryBuilder\n                        \n                    \n                \n            \n            \n                \nbaseQueryBuilder()\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-organization.service.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         SelectQueryBuilder\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllByUserId\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllByUserId(userId: number, pageOptionsDto: PageOptionsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-organization.service.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { Repository, SelectQueryBuilder } from \"typeorm\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\n\nimport { PageMetaDto } from \"../common/dtos/page-meta.dto\";\nimport { PageDto } from \"../common/dtos/page.dto\";\nimport { PageOptionsDto } from \"../common/dtos/page-options.dto\";\nimport { DbUserOrganization } from \"./entities/user-organization.entity\";\n\n@Injectable()\nexport class UserOrganizationService {\n  constructor(\n    @InjectRepository(DbUserOrganization, \"ApiConnection\")\n    private userOrganizationRepository: Repository\n  ) {}\n\n  baseQueryBuilder(): SelectQueryBuilder {\n    const builder = this.userOrganizationRepository.createQueryBuilder(\"user_organizations\");\n\n    return builder;\n  }\n\n  async findAllByUserId(userId: number, pageOptionsDto: PageOptionsDto) {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .innerJoinAndSelect(\"user_organizations.user\", \"user\")\n      .innerJoinAndSelect(\"user_organizations.organization_user\", \"organization_user\")\n      .where(\"user_id = :userId\", { userId })\n      .orderBy(\"user_organizations.created_at\", \"DESC\");\n\n    queryBuilder.offset(pageOptionsDto.skip).limit(pageOptionsDto.limit);\n\n    const entities = await queryBuilder.getMany();\n    const itemCount = await queryBuilder.getCount();\n\n    const pageMetaDto = new PageMetaDto({ itemCount, pageOptionsDto });\n\n    return new PageDto(entities, pageMetaDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserRecommendationController.html":{"url":"controllers/UserRecommendationController.html","title":"controller - UserRecommendationController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserRecommendationController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user-recommendation.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                user/recommendations\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                findUserOrgsRepoRecommendations\n                            \n                            \n                                    Async\n                                findUserRepoRecommendations\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findUserOrgsRepoRecommendations\n                        \n                    \n                \n            \n            \n                \n                    \n                    findUserOrgsRepoRecommendations(userId: number, pageOptionsDto: PageOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/orgs')@ApiOperation({operationId: 'findUserOrgsRepoRecommendations', summary: 'Listing recommended repos for the authenticated user based on their orgs'})@ApiBearerAuth()@ApiPaginatedResponse(DbRepo)@ApiOkResponse({type: DbRepo})@UseGuards(SupabaseGuard)\n                \n            \n\n            \n                \n                    Defined in src/user/user-recommendation.controller.ts:43\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findUserRepoRecommendations\n                        \n                    \n                \n            \n            \n                \n                    \n                    findUserRepoRecommendations(userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/repos')@ApiOperation({operationId: 'findUserRepoRecommendations', summary: 'Listing recommended repos for the authenticated user'})@ApiBearerAuth()@ApiPaginatedResponse(DbRepo)@ApiOkResponse({type: DbRepo})@UseGuards(SupabaseGuard)\n                \n            \n\n            \n                \n                    Defined in src/user/user-recommendation.controller.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Query, UseGuards } from \"@nestjs/common\";\nimport { ApiOperation, ApiBearerAuth, ApiTags, ApiOkResponse } from \"@nestjs/swagger\";\n\nimport { SupabaseGuard } from \"../auth/supabase.guard\";\nimport { UserId } from \"../auth/supabase.user.decorator\";\n\nimport { RepoService } from \"../repo/repo.service\";\nimport { PageOptionsDto } from \"../common/dtos/page-options.dto\";\nimport { ApiPaginatedResponse } from \"../common/decorators/api-paginated-response.decorator\";\nimport { DbRepo } from \"../repo/entities/repo.entity\";\nimport { UserService } from \"./services/user.service\";\n\n@Controller(\"user/recommendations\")\n@ApiTags(\"User Recommendations service\")\nexport class UserRecommendationController {\n  constructor(private readonly repoService: RepoService, private readonly userService: UserService) {}\n\n  @Get(\"/repos\")\n  @ApiOperation({\n    operationId: \"findUserRepoRecommendations\",\n    summary: \"Listing recommended repos for the authenticated user\",\n  })\n  @ApiBearerAuth()\n  @ApiPaginatedResponse(DbRepo)\n  @ApiOkResponse({ type: DbRepo })\n  @UseGuards(SupabaseGuard)\n  async findUserRepoRecommendations(@UserId() userId: number) {\n    const user = await this.userService.findOneById(userId);\n    const interests = user.interests?.split(\",\").filter(Boolean) ?? [];\n\n    return this.repoService.findRecommendations(interests);\n  }\n\n  @Get(\"/orgs\")\n  @ApiOperation({\n    operationId: \"findUserOrgsRepoRecommendations\",\n    summary: \"Listing recommended repos for the authenticated user based on their orgs\",\n  })\n  @ApiBearerAuth()\n  @ApiPaginatedResponse(DbRepo)\n  @ApiOkResponse({ type: DbRepo })\n  @UseGuards(SupabaseGuard)\n  async findUserOrgsRepoRecommendations(@UserId() userId: number, @Query() pageOptionsDto: PageOptionsDto) {\n    return this.repoService.findOrgsRecommendations(userId, pageOptionsDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserRepoOptionsDto.html":{"url":"classes/UserRepoOptionsDto.html","title":"class - UserRepoOptionsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserRepoOptionsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user-repo/dtos/user-repo-options.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PageOptionsDto\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                    Optional\n                                limit\n                            \n                            \n                                    Readonly\n                                    Optional\n                                orderDirection\n                            \n                            \n                                    Readonly\n                                    Optional\n                                page\n                            \n                            \n                                    Readonly\n                                    Optional\n                                prev_days_start_date\n                            \n                            \n                                    Readonly\n                                    Optional\n                                range\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 50\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, maximum: 1000, default: 10, type: 'integer'})@Type(undefined)@IsInt()@Min(1)@Max(10000)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:30\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        orderDirection\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OrderDirectionEnum\n\n                    \n                \n                \n                    \n                        Default value : OrderDirectionEnum.DESC\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: OrderDirectionEnum, enumName: 'OrderDirectionEnum', default: undefined})@IsEnum(OrderDirectionEnum)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:35\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, default: 1, type: 'integer'})@Type(undefined)@IsInt()@Min(1)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:17\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        prev_days_start_date\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 0\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Number of days in the past to start range block', default: 0, type: 'integer'})@Type(undefined)@IsIn(['0', '7', '30', '90'])@IsInt()@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:57\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        range\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 30\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Range in days', default: 30, type: 'integer'})@Type(undefined)@IsIn(['7', '30', '90'])@IsInt()@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:46\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PageOptionsDto } from \"../../common/dtos/page-options.dto\";\n\nexport class UserRepoOptionsDto extends PageOptionsDto {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserRepoOptionsDto-1.html":{"url":"classes/UserRepoOptionsDto-1.html","title":"class - UserRepoOptionsDto-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserRepoOptionsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user-repo/dtos/user-repos.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                ids\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        ids\n                        \n                    \n                \n            \n                \n                    \n                        Type :     number[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The repos to add to onboarding', type: 'integer', isArray: true, example: undefined})@IsArray()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-repo/dtos/user-repos.dto.ts:13\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsArray, IsBoolean, IsOptional } from \"class-validator\";\nimport { DbRepoToUserVotes } from \"../../repo/entities/repo.to.user.votes.entity\";\n\nexport class UserRepoOptionsDto {\n  @ApiProperty({\n    description: \"The repos to add to onboarding\",\n    type: \"integer\",\n    isArray: true,\n    example: [71359796, 426820139],\n  })\n  @IsArray()\n  readonly ids: number[];\n}\n\nexport class VotedRepoDto {\n  @ApiProperty({\n    description: \"If the user has voted for the repo\",\n    type: Boolean,\n    example: true,\n  })\n  @IsBoolean()\n  voted: boolean;\n\n  @IsOptional()\n  data: DbRepoToUserVotes | null;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UserReposModule.html":{"url":"modules/UserReposModule.html","title":"module - UserReposModule","body":"\n                   \n\n\n\n\n    Modules\n    UserReposModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_UserReposModule\n\n\n\ncluster_UserReposModule_providers\n\n\n\ncluster_UserReposModule_exports\n\n\n\ncluster_UserReposModule_imports\n\n\n\n\nApiServicesModule\n\nApiServicesModule\n\n\n\nUserReposModule\n\nUserReposModule\n\nUserReposModule -->\n\nApiServicesModule->UserReposModule\n\n\n\n\n\nUserReposService \n\nUserReposService \n\nUserReposService  -->\n\nUserReposModule->UserReposService \n\n\n\n\n\nUserReposService\n\nUserReposService\n\nUserReposModule -->\n\nUserReposService->UserReposModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/user-repo/user-repos.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UserReposService\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            ApiServicesModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UserReposService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\n\nimport { ApiServicesModule } from \"../common/services/api-services.module\";\nimport { DbUserRepo } from \"./user-repo.entity\";\nimport { UserReposService } from \"./user-repos.service\";\n\n@Module({\n  imports: [TypeOrmModule.forFeature([DbUserRepo], \"ApiConnection\"), ApiServicesModule],\n  providers: [UserReposService],\n  exports: [UserReposService],\n})\nexport class UserReposModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserReposService.html":{"url":"injectables/UserReposService.html","title":"injectable - UserReposService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserReposService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user-repo/user-repos.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addUserRepo\n                            \n                            \n                                baseQueryBuilder\n                            \n                            \n                                    Async\n                                findAllByUserId\n                            \n                            \n                                    Async\n                                findOneById\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userRepoRepository: Repository, pagerService: PagerService)\n                    \n                \n                        \n                            \n                                Defined in src/user-repo/user-repos.service.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userRepoRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        pagerService\n                                                  \n                                                        \n                                                                        PagerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addUserRepo\n                        \n                    \n                \n            \n            \n                \n                    \n                    addUserRepo(userId: number, repo: RepoInfo)\n                \n            \n\n\n            \n                \n                    Defined in src/user-repo/user-repos.service.ts:40\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    repo\n                                    \n                                                RepoInfo\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        baseQueryBuilder\n                        \n                    \n                \n            \n            \n                \nbaseQueryBuilder()\n                \n            \n\n\n            \n                \n                    Defined in src/user-repo/user-repos.service.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         SelectQueryBuilder\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllByUserId\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllByUserId(pageOptionsDto: UserRepoOptionsDto, userId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/user-repo/user-repos.service.ts:50\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                UserRepoOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneById(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/user-repo/user-repos.service.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from \"@nestjs/common\";\nimport { Repository, SelectQueryBuilder } from \"typeorm\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\n\nimport { PageDto } from \"../common/dtos/page.dto\";\n\nimport { RepoInfo } from \"../repo/dtos/repo-info.dto\";\nimport { PagerService } from \"../common/services/pager.service\";\nimport { DbUserRepo } from \"./user-repo.entity\";\nimport { UserRepoOptionsDto } from \"./dtos/user-repo-options.dto\";\n\n@Injectable()\nexport class UserReposService {\n  constructor(\n    @InjectRepository(DbUserRepo, \"ApiConnection\")\n    private userRepoRepository: Repository,\n    private pagerService: PagerService\n  ) {}\n\n  baseQueryBuilder(): SelectQueryBuilder {\n    const builder = this.userRepoRepository.createQueryBuilder(\"user_repos\");\n\n    return builder;\n  }\n\n  async findOneById(id: number): Promise {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder.where(\"id = :id\", { id });\n\n    const item: DbUserRepo | null = await queryBuilder.getOne();\n\n    if (!item) {\n      throw new NotFoundException();\n    }\n\n    return item;\n  }\n\n  async addUserRepo(userId: number, repo: RepoInfo) {\n    const newUserRepo = this.userRepoRepository.create({\n      user_id: userId,\n      repo_id: repo.id,\n      full_name: repo.fullName,\n    });\n\n    return this.userRepoRepository.save(newUserRepo);\n  }\n\n  async findAllByUserId(pageOptionsDto: UserRepoOptionsDto, userId: string): Promise> {\n    const queryBuilder = this.userRepoRepository.createQueryBuilder(\"user_repos\");\n\n    queryBuilder.where(\"user_repos.user_id = :userId\", { userId });\n\n    return this.pagerService.applyPagination({\n      queryBuilder,\n      pageOptionsDto,\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/VoteModule.html":{"url":"modules/VoteModule.html","title":"module - VoteModule","body":"\n                   \n\n\n\n\n    Modules\n    VoteModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_VoteModule\n\n\n\ncluster_VoteModule_providers\n\n\n\ncluster_VoteModule_imports\n\n\n\ncluster_VoteModule_exports\n\n\n\n\nRepoModule\n\nRepoModule\n\n\n\nVoteModule\n\nVoteModule\n\nVoteModule -->\n\nRepoModule->VoteModule\n\n\n\n\n\nVoteService \n\nVoteService \n\nVoteService  -->\n\nVoteModule->VoteService \n\n\n\n\n\nVoteService\n\nVoteService\n\nVoteModule -->\n\nVoteService->VoteModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/vote/vote.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            VoteService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            RepoVoteController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            RepoModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            VoteService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\n\nimport { DbRepo } from \"../repo/entities/repo.entity\";\nimport { DbRepoToUserVotes } from \"../repo/entities/repo.to.user.votes.entity\";\nimport { RepoModule } from \"../repo/repo.module\";\nimport { VoteService } from \"./vote.service\";\nimport { RepoVoteController } from \"./repo-vote.controller\";\n\n@Module({\n  imports: [TypeOrmModule.forFeature([DbRepo, DbRepoToUserVotes], \"ApiConnection\"), RepoModule],\n  controllers: [RepoVoteController],\n  providers: [VoteService],\n  exports: [VoteService],\n})\nexport class VoteModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/VoteService.html":{"url":"injectables/VoteService.html","title":"injectable - VoteService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  VoteService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/vote/vote.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                baseQueryBuilder\n                            \n                            \n                                    Async\n                                downVoteByRepoId\n                            \n                            \n                                    Async\n                                findOneByRepoId\n                            \n                            \n                                    Private\n                                    Async\n                                getVoteQuery\n                            \n                            \n                                    Async\n                                voteByRepoId\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(repoVoteRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/vote/vote.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        repoVoteRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        baseQueryBuilder\n                        \n                    \n                \n            \n            \n                \nbaseQueryBuilder()\n                \n            \n\n\n            \n                \n                    Defined in src/vote/vote.service.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        downVoteByRepoId\n                        \n                    \n                \n            \n            \n                \n                    \n                    downVoteByRepoId(repoId: number, userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/vote/vote.service.ts:61\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    repoId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneByRepoId\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneByRepoId(repoId: number, userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/vote/vote.service.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    repoId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        Async\n                        getVoteQuery\n                        \n                    \n                \n            \n            \n                \n                    \n                    getVoteQuery(repoId: number, userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/vote/vote.service.ts:77\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    repoId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        voteByRepoId\n                        \n                    \n                \n            \n            \n                \n                    \n                    voteByRepoId(repoId: number, userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/vote/vote.service.ts:42\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    repoId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ConflictException, Injectable, NotFoundException } from \"@nestjs/common\";\nimport { Repository } from \"typeorm\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { DbRepoToUserVotes } from \"../repo/entities/repo.to.user.votes.entity\";\n\n@Injectable()\nexport class VoteService {\n  constructor(\n    @InjectRepository(DbRepoToUserVotes, \"ApiConnection\")\n    private repoVoteRepository: Repository\n  ) {}\n\n  baseQueryBuilder() {\n    const builder = this.repoVoteRepository.createQueryBuilder(\"r2votes\").withDeleted();\n\n    return builder;\n  }\n\n  async findOneByRepoId(repoId: number, userId: number) {\n    const voteExists = await this.getVoteQuery(repoId, userId);\n\n    if (!voteExists) {\n      return {\n        voted: false,\n        data: null,\n      };\n    }\n\n    if (voteExists.deleted_at) {\n      return {\n        voted: false,\n        data: null,\n      };\n    }\n\n    return {\n      voted: true,\n      data: voteExists,\n    };\n  }\n\n  async voteByRepoId(repoId: number, userId: number): Promise {\n    const voteExists = await this.getVoteQuery(repoId, userId);\n\n    if (voteExists) {\n      if (!voteExists.deleted_at) {\n        throw new ConflictException(\"You have already voted for this repo\");\n      }\n\n      await this.repoVoteRepository.restore(voteExists.id);\n\n      return voteExists;\n    }\n\n    return this.repoVoteRepository.save({\n      repo_id: repoId,\n      user_id: userId,\n    });\n  }\n\n  async downVoteByRepoId(repoId: number, userId: number): Promise {\n    const voteExists = await this.getVoteQuery(repoId, userId);\n\n    if (!voteExists) {\n      throw new NotFoundException(\"You have not voted for this repo\");\n    }\n\n    if (voteExists.deleted_at) {\n      throw new ConflictException(\"You have already removed your vote\");\n    }\n\n    await this.repoVoteRepository.softDelete(voteExists.id);\n\n    return voteExists;\n  }\n\n  private async getVoteQuery(repoId: number, userId: number) {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .addSelect(\"r2votes.deleted_at\")\n      .where(\"r2votes.repo_id = :repoId\", { repoId })\n      .andWhere(\"r2votes.user_id = :userId\", { userId });\n\n    return queryBuilder.getOne();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/VotedRepoDto.html":{"url":"classes/VotedRepoDto.html","title":"class - VotedRepoDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  VotedRepoDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user-repo/dtos/user-repos.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                data\n                            \n                            \n                                voted\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        data\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbRepoToUserVotes | null\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-repo/dtos/user-repos.dto.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        voted\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'If the user has voted for the repo', type: Boolean, example: true})@IsBoolean()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-repo/dtos/user-repos.dto.ts:23\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsArray, IsBoolean, IsOptional } from \"class-validator\";\nimport { DbRepoToUserVotes } from \"../../repo/entities/repo.to.user.votes.entity\";\n\nexport class UserRepoOptionsDto {\n  @ApiProperty({\n    description: \"The repos to add to onboarding\",\n    type: \"integer\",\n    isArray: true,\n    example: [71359796, 426820139],\n  })\n  @IsArray()\n  readonly ids: number[];\n}\n\nexport class VotedRepoDto {\n  @ApiProperty({\n    description: \"If the user has voted for the repo\",\n    type: Boolean,\n    example: true,\n  })\n  @IsBoolean()\n  voted: boolean;\n\n  @IsOptional()\n  data: DbRepoToUserVotes | null;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/auth/dtos/supabase-auth-response.dto.ts\n            \n            class\n            SupabaseAuthDto\n            \n                0 %\n                (0/25)\n            \n        \n        \n            \n                \n                src/auth/dtos/user-onboarding.dto.ts\n            \n            class\n            UserOnboardingDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/supabase.guard.ts\n            \n            injectable\n            SupabaseGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/supabase.strategy.ts\n            \n            injectable\n            SupabaseStrategy\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auth/supabase.user.decorator.ts\n            \n            variable\n            User\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/supabase.user.decorator.ts\n            \n            variable\n            UserId\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/blogs/blog-summary.service.ts\n            \n            injectable\n            BlogSummaryService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/blogs/dtos/create-blog-summary.dto.ts\n            \n            class\n            CreateBlogSummaryDto\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/blogs/issue-summary.controller.ts\n            \n            controller\n            BlogSummaryController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/common/decorators/api-paginated-response.decorator.ts\n            \n            variable\n            ApiPaginatedResponse\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/dtos/filter-options.dto.ts\n            \n            class\n            FilterOptionsDto\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/common/dtos/page-meta-parameters.dto.ts\n            \n            interface\n            PageMetaParameters\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/common/dtos/page-meta.dto.ts\n            \n            class\n            PageMetaDto\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/common/dtos/page-options.dto.ts\n            \n            class\n            PageOptionsDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/common/dtos/page.dto.ts\n            \n            class\n            PageDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/common/filters/repo-filter.service.ts\n            \n            injectable\n            RepoFilterService\n            \n                66 %\n                (2/3)\n            \n        \n        \n            \n                \n                src/common/middleware/database-logger.middleware.ts\n            \n            class\n            DatabaseLoggerMiddleware\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/common/middleware/http-logger.middleware.ts\n            \n            injectable\n            HttpLoggerMiddleware\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/common/services/pager.service.ts\n            \n            injectable\n            PagerService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/common/services/pager.service.ts\n            \n            interface\n            PaginationInput\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/common/util/cli-duration.ts\n            \n            variable\n            cliDuration\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/util/datetimes.ts\n            \n            variable\n            GetPrevDateISOString\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/util/swagger.ts\n            \n            variable\n            swaggerMarkdownDescription\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/config/api.config.ts\n            \n            variable\n            ApiConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/config/db-api.config.ts\n            \n            variable\n            DbApiConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/config/db-logging.config.ts\n            \n            variable\n            DbLoggingConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/config/endpoint.config.ts\n            \n            variable\n            EndpointConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/config/endpoint.config.ts\n            \n            variable\n            getDomain\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/config/hacktoberfest.config.ts\n            \n            variable\n            HacktoberfestConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/config/openai.config.ts\n            \n            variable\n            OpenAIConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/config/pizza.config.ts\n            \n            variable\n            PizzaConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/config/stripe.config.ts\n            \n            variable\n            StripeConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/config/tier.config.ts\n            \n            variable\n            TierConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/contribution/contribution.entity.ts\n            \n            entity\n            DbContribution\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/contribution/contribution.service.ts\n            \n            injectable\n            ContributionService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/contribution/dtos/contribution-page-options.dto.ts\n            \n            class\n            ContributionPageOptionsDto\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/contribution/dtos/repo-user-contributions.dto.ts\n            \n            entity\n            DbUserListContributorStat\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/contribution/entities/repo-user-contributions.entity.ts\n            \n            entity\n            DbRepoLoginContributions\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/contribution/repo-contributions.controller.ts\n            \n            controller\n            RepoContributionsController\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/contributor/contributor-insights.controller.ts\n            \n            controller\n            ContributorInsightsController\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/contributor/contributor.controller.ts\n            \n            controller\n            ContributorController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/coupon/coupon.service.ts\n            \n            injectable\n            CouponService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/coupon/entities/coupon.entity.ts\n            \n            entity\n            DbCoupon\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/customer/customer.entity.ts\n            \n            entity\n            DbCustomer\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/customer/customer.service.ts\n            \n            injectable\n            CustomerService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/emoji/emoji.controller.ts\n            \n            controller\n            EmojiController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/emoji/emoji.service.ts\n            \n            injectable\n            EmojiService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/emoji/entities/emoji.entity.ts\n            \n            entity\n            DbEmoji\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/endorsement/dto/create-endorsement.dto.ts\n            \n            class\n            CreateEndorsementDto\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/endorsement/dto/update-endorsement.dto.ts\n            \n            class\n            UpdateEndorsementDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/endorsement/endorsement-token.guard.ts\n            \n            guard\n            EndorsementTokenGuard\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/endorsement/endorsement.controller.ts\n            \n            controller\n            EndorsementController\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/endorsement/endorsement.service.ts\n            \n            injectable\n            EndorsementService\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                src/endorsement/entities/endorsement.entity.ts\n            \n            entity\n            DbEndorsement\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/generate-swagger.ts\n            \n            variable\n            generateSwaggerJson\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/health/health.controller.ts\n            \n            controller\n            HealthController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/highlight/dtos/highlight-options.dto.ts\n            \n            class\n            DbUserHighlightReactionResponse\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/highlight/dtos/highlight-options.dto.ts\n            \n            class\n            HighlightOptionsDto\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/highlight/entities/user-highlight-repo.entity.ts\n            \n            class\n            DbUserHighlightRepo\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/highlight/highlight.controller.ts\n            \n            controller\n            HighlightController\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/insight/dtos/create-insight-member.dto.ts\n            \n            class\n            CreateInsightMemberDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/insight/dtos/create-insight.dto.ts\n            \n            class\n            CreateInsightDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/insight/dtos/insight-options.dto.ts\n            \n            class\n            InsightOptionsDto\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/insight/dtos/insight-page-options.dto.ts\n            \n            class\n            InsightPageOptionsDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/insight/dtos/update-insight-member.dto.ts\n            \n            class\n            UpdateInsightMemberDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/insight/dtos/update-insight.dto.ts\n            \n            class\n            UpdateInsightDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/insight/entities/insight-member.entity.ts\n            \n            entity\n            DbInsightMember\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/insight/entities/insight-repo.entity.ts\n            \n            entity\n            DbInsightRepo\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/insight/entities/insight.entity.ts\n            \n            entity\n            DbInsight\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/insight/insight-member.service.ts\n            \n            injectable\n            InsightMemberService\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/insight/insight-repo.service.ts\n            \n            injectable\n            InsightRepoService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/insight/insight.controller.ts\n            \n            controller\n            InsightController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/insight/insights.service.ts\n            \n            injectable\n            InsightsService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/insight/user-insight-member.controller.ts\n            \n            controller\n            UserInsightMemberController\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/insight/user-insight.controller.ts\n            \n            controller\n            UserInsightsController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/issues/dtos/create-issue-summary.dto.ts\n            \n            class\n            CreateIssueSummaryDto\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/issues/issue-summary.controller.ts\n            \n            controller\n            IssueSummaryController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/issues/issue-summary.service.ts\n            \n            injectable\n            IssueSummaryService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/log/custom-logger.ts\n            \n            injectable\n            CustomLogger\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/log/dtos/create-log.dto.ts\n            \n            class\n            CreateLogDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/log/log.entity.ts\n            \n            entity\n            DbLog\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/log/log.service.ts\n            \n            injectable\n            LogService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/open-ai/open-ai.service.ts\n            \n            injectable\n            OpenAiService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/open-ai/open-ai.service.ts\n            \n            interface\n            ChatResponse\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/pizza/commit-authors.service.ts\n            \n            injectable\n            CommitAuthorsService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/pizza/commits.service.ts\n            \n            injectable\n            CommitsService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/pizza/dtos/baked-repo.dto.ts\n            \n            class\n            BakeRepoDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/pizza/dtos/commit_authors.dto.ts\n            \n            class\n            CommitAuthorDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/pizza/dtos/commits.dto.ts\n            \n            class\n            CommitsDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/pizza/entities/baked-repo.entity.ts\n            \n            entity\n            DbBakedRepo\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/pizza/entities/commit_authors.entity.ts\n            \n            entity\n            DbCommitAuthors\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/pizza/entities/commits.entity.ts\n            \n            entity\n            DbCommits\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/pizza/pizza-oven.controller.ts\n            \n            controller\n            PizzaOvenController\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/pizza/pizza-oven.service.ts\n            \n            injectable\n            PizzaOvenService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/pull-requests/code-explanation.controller.ts\n            \n            controller\n            CodeExplanationController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/pull-requests/code-explanation.service.ts\n            \n            injectable\n            CodeExplanationService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/pull-requests/code-refactor-suggestion.controller.ts\n            \n            controller\n            CodeRefactorSuggestionController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/pull-requests/code-refactor-suggestion.service.ts\n            \n            injectable\n            CodeRefactorSuggestionService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/pull-requests/code-test-suggestion.service.ts\n            \n            injectable\n            CodeTestSuggestionService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/pull-requests/code-test.suggestion.controller.ts\n            \n            controller\n            CodeTestSuggestionController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/pull-requests/dtos/create-code-explanation.dto.ts\n            \n            class\n            GenerateCodeExplanationDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/pull-requests/dtos/create-code-refactor-suggestion.dto.ts\n            \n            class\n            GenerateCodeRefactorSuggestionDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/pull-requests/dtos/create-code-test-suggestion.dto.ts\n            \n            class\n            GenerateCodeTestSuggestionDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/pull-requests/dtos/create-pull-request-description.dto.ts\n            \n            class\n            GeneratePullRequestDescriptionDto\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/pull-requests/dtos/pull-request-contributor-insights.dto.ts\n            \n            class\n            PullRequestContributorInsightsDto\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/pull-requests/dtos/pull-request-contributor-options.dto.ts\n            \n            class\n            PullRequestContributorOptionsDto\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/pull-requests/dtos/pull-request-contributor.dto.ts\n            \n            class\n            DbPullRequestContributor\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/pull-requests/dtos/pull-request-page-options.dto.ts\n            \n            class\n            PullRequestPageOptionsDto\n            \n                0 %\n                (0/14)\n            \n        \n        \n            \n                \n                src/pull-requests/entities/pull-request-insight.entity.ts\n            \n            entity\n            DbPRInsight\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/pull-requests/entities/pull-request-review.entity.ts\n            \n            entity\n            DbPullRequestReview\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/pull-requests/entities/pull-request.entity.ts\n            \n            entity\n            DbPullRequest\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/pull-requests/pull-request-description.controller.ts\n            \n            controller\n            PullRequestDescriptionController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/pull-requests/pull-request-description.service.ts\n            \n            injectable\n            PullRequestDescriptionService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/pull-requests/pull-request-insights.service.ts\n            \n            injectable\n            PullRequestInsightsService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/pull-requests/pull-request-review.service.ts\n            \n            injectable\n            PullRequestReviewService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/pull-requests/pull-request.controller.ts\n            \n            controller\n            PullRequestController\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/pull-requests/pull-request.service.ts\n            \n            injectable\n            PullRequestService\n            \n                0 %\n                (0/14)\n            \n        \n        \n            \n                \n                src/repo/dtos/repo-info.dto.ts\n            \n            class\n            RepoInfo\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/repo/dtos/repo-page-options.dto.ts\n            \n            class\n            RepoPageOptionsDto\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/repo/dtos/repo-search-options.dto.ts\n            \n            class\n            RepoSearchOptionsDto\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                src/repo/entities/repo.entity.ts\n            \n            entity\n            DbRepo\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/repo/entities/repo.to.user.stargazers.entity.ts\n            \n            entity\n            DbRepoToUserStargazers\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/repo/entities/repo.to.user.stars.entity.ts\n            \n            entity\n            DbRepoToUserStars\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/repo/entities/repo.to.user.submissions.entity.ts\n            \n            entity\n            DbRepoToUserSubmissions\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/repo/entities/repo.to.user.votes.entity.ts\n            \n            entity\n            DbRepoToUserVotes\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/repo/repo.controller.ts\n            \n            controller\n            RepoController\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/repo/repo.service.ts\n            \n            injectable\n            RepoService\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                src/star/repo-star.controller.ts\n            \n            controller\n            RepoStarController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/star/star.service.ts\n            \n            injectable\n            StarService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/stargaze/repo-stargaze.controller.ts\n            \n            controller\n            RepoStargazeController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/stargaze/stargaze.service.ts\n            \n            injectable\n            StargazeService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/stripe-webhook/stripe-webhook.controller.ts\n            \n            controller\n            StripeWebhookController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/stripe-webhook/stripe-webhook.controller.ts\n            \n            variable\n            relevantEvents\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/stripe-webhook/utils.ts\n            \n            variable\n            toDateTime\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/stripe/stripe.service.ts\n            \n            injectable\n            StripeService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/submit/repo-submit.controller.ts\n            \n            controller\n            RepoSubmitController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/submit/submit.service.ts\n            \n            injectable\n            SubmitService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/subscription/stripe-subscription.dto.ts\n            \n            entity\n            DbSubscription\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/subscription/stripe-subscription.service.ts\n            \n            injectable\n            StripeSubscriptionService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/tier/tier.service.ts\n            \n            injectable\n            TierService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/user-lists/dtos/collaborators.dto.ts\n            \n            class\n            CollaboratorsDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/user-lists/dtos/contributions-by-project.dto.ts\n            \n            class\n            ContributionsByProjectDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/user-lists/dtos/contributions-page.dto.ts\n            \n            class\n            ContributionsPageDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/user-lists/dtos/contributions-pagemeta.dto.ts\n            \n            class\n            ContributionPageMetaDto\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/user-lists/dtos/contributions-timeframe.dto.ts\n            \n            class\n            ContributionsTimeframeDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/user-lists/dtos/create-user-list.dto.ts\n            \n            class\n            Contributor\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/user-lists/dtos/create-user-list.dto.ts\n            \n            class\n            CreateUserListDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/user-lists/dtos/filter-contributors.dto.ts\n            \n            class\n            FilterListContributorsDto\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/user-lists/dtos/most-active-contributors.dto.ts\n            \n            class\n            UserListMostActiveContributorsDto\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/user-lists/dtos/top-projects.dto.ts\n            \n            class\n            TopProjectsDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/user-lists/entities/contributions-projects.entity.ts\n            \n            entity\n            DbContributionsProjects\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/user-lists/entities/contributions-timeframe.entity.ts\n            \n            entity\n            DbContributionStatTimeframe\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/user-lists/entities/contributors-timeframe.entity.ts\n            \n            entity\n            DbContributorCategoryTimeframe\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/user-lists/entities/timezones.entity.ts\n            \n            class\n            DbTimezone\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/user-lists/entities/user-list-contributor-stats.entity.ts\n            \n            entity\n            DbUserListContributorStat\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/user-lists/entities/user-list-contributor.entity.ts\n            \n            entity\n            DbUserListContributor\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/user-lists/entities/user-list.entity.ts\n            \n            entity\n            DbUserList\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/user-lists/user-list-stat.service.ts\n            \n            injectable\n            UserListStatsService\n            \n                0 %\n                (0/14)\n            \n        \n        \n            \n                \n                src/user-lists/user-list-stat.service.ts\n            \n            interface\n            AllContributionsCount\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/user-lists/user-list-stats.controller.ts\n            \n            controller\n            UserListStatsController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/user-lists/user-list.controller.ts\n            \n            controller\n            UserListController\n            \n                0 %\n                (0/13)\n            \n        \n        \n            \n                \n                src/user-lists/user-list.service.ts\n            \n            injectable\n            UserListService\n            \n                0 %\n                (0/18)\n            \n        \n        \n            \n                \n                src/user-repo/dtos/user-repo-options.dto.ts\n            \n            class\n            UserRepoOptionsDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/user-repo/dtos/user-repos.dto.ts\n            \n            class\n            UserRepoOptionsDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/user-repo/dtos/user-repos.dto.ts\n            \n            class\n            VotedRepoDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/user-repo/user-repo.entity.ts\n            \n            entity\n            DbUserRepo\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/user-repo/user-repos.service.ts\n            \n            injectable\n            UserReposService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/user/dtos/apply-user-coupon.dto.ts\n            \n            class\n            ApplyUserCouponDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/user/dtos/contributor-prs.dto.ts\n            \n            class\n            ContributorPullRequestsDto\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/user/dtos/create-user-collaboration.dto.ts\n            \n            class\n            CreateUserCollaborationDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/user/dtos/create-user-highlight.dto.ts\n            \n            class\n            CreateUserHighlightDto\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/user/dtos/filtered-users.dto.ts\n            \n            class\n            FilteredUsersDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/user/dtos/follow-many-users.dto.ts\n            \n            class\n            FollowManyUsersDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/user/dtos/top-users.dto.ts\n            \n            class\n            TopUsersDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/user/dtos/update-user-collaboration.dto.ts\n            \n            class\n            UpdateUserCollaborationDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/user/dtos/update-user-email-prefs.dto.ts\n            \n            class\n            UpdateUserEmailPreferencesDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/user/dtos/update-user-interests.dto.ts\n            \n            class\n            UpdateUserProfileInterestsDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/user/dtos/update-user.dto.ts\n            \n            class\n            UpdateUserDto\n            \n                0 %\n                (0/13)\n            \n        \n        \n            \n                \n                src/user/entities/filtered-users.entity.ts\n            \n            class\n            DbFilteredUser\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/user/entities/top-users.entity.ts\n            \n            class\n            DbTopUser\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/user/entities/user-collaboration.entity.ts\n            \n            entity\n            DbUserCollaboration\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/user/entities/user-follows.entity.ts\n            \n            entity\n            DbUserToUserFollows\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/user/entities/user-highlight-reaction.entity.ts\n            \n            entity\n            DbUserHighlightReaction\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/user/entities/user-highlight.entity.ts\n            \n            entity\n            DbUserHighlight\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/user/entities/user-notification.constants.ts\n            \n            variable\n            userNotificationTypes\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/user/entities/user-notification.entity.ts\n            \n            entity\n            DbUserNotification\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/user/entities/user-organization.entity.ts\n            \n            entity\n            DbUserOrganization\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/user/entities/user-top-repo.entity.ts\n            \n            entity\n            DbUserTopRepo\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/user/services/user.service.ts\n            \n            injectable\n            UserService\n            \n                0 %\n                (0/19)\n            \n        \n        \n            \n                \n                src/user/user-collaboration.controller.ts\n            \n            controller\n            UserCollaborationController\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/user/user-collaboration.service.ts\n            \n            injectable\n            UserCollaborationService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/user/user-endorsement.controller.ts\n            \n            controller\n            UserEndorsementController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/user/user-follow.controller.ts\n            \n            controller\n            UserFollowsController\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/user/user-follow.service.ts\n            \n            injectable\n            UserFollowService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/user/user-following.controller.ts\n            \n            controller\n            UserFollowingController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/user/user-highlight.controller.ts\n            \n            controller\n            UserHighlightsController\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/user/user-highlights.service.ts\n            \n            injectable\n            UserHighlightsService\n            \n                0 %\n                (0/18)\n            \n        \n        \n            \n                \n                src/user/user-notifcation.service.ts\n            \n            injectable\n            UserNotificationService\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/user/user-notification.controller.ts\n            \n            controller\n            UserNotificationController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/user/user-organization.service.ts\n            \n            injectable\n            UserOrganizationService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/user/user-recommendation.controller.ts\n            \n            controller\n            UserRecommendationController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/user/user.controller.ts\n            \n            controller\n            UserController\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/user/user.entity.ts\n            \n            entity\n            DbUser\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/vote/repo-vote.controller.ts\n            \n            controller\n            RepoVoteController\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/vote/vote.service.ts\n            \n            injectable\n            VoteService\n            \n                0 %\n                (0/7)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ContributionOrderFieldsEnum   (src/.../contribution-page-options.dto.ts)\n                        \n                        \n                            InsightFilterFieldsEnum   (src/.../insight-options.dto.ts)\n                        \n                        \n                            OrderDirectionEnum   (src/.../order-direction.constant.ts)\n                        \n                        \n                            PullRequestOrderFieldsEnum   (src/.../pull-request-page-options.dto.ts)\n                        \n                        \n                            PullRequestStatusEnum   (src/.../pull-request-page-options.dto.ts)\n                        \n                        \n                            RangeTypeEnum   (src/.../contributor-prs.dto.ts)\n                        \n                        \n                            RepoFilterFieldsEnum   (src/.../repo-page-options.dto.ts)\n                        \n                        \n                            RepoOrderFieldsEnum   (src/.../repo-page-options.dto.ts)\n                        \n                        \n                            UserListContributorStatsOrderEnum   (src/.../most-active-contributors.dto.ts)\n                        \n                        \n                            UserListContributorStatsTypeEnum   (src/.../most-active-contributors.dto.ts)\n                        \n                        \n                            UserNotificationTypes   (src/.../user-notification.constants.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/contribution/dtos/contribution-page-options.dto.ts\n    \n        \n            \n                \n                    \n                        \n                        ContributionOrderFieldsEnum\n                    \n                \n                        \n                            \n                                 count\n                            \n                        \n                        \n                            \n                                Value : count\n                            \n                        \n                        \n                            \n                                 last_merged_at\n                            \n                        \n                        \n                            \n                                Value : last_merged_at\n                            \n                        \n                        \n                            \n                                 created_at\n                            \n                        \n                        \n                            \n                                Value : created_at\n                            \n                        \n                        \n                            \n                                 updated_at\n                            \n                        \n                        \n                            \n                                Value : updated_at\n                            \n                        \n                        \n                            \n                                 contributor\n                            \n                        \n                        \n                            \n                                Value : contributor\n                            \n                        \n            \n        \n\n    src/insight/dtos/insight-options.dto.ts\n    \n        \n            \n                \n                    \n                        \n                        InsightFilterFieldsEnum\n                    \n                \n                        \n                            \n                                 Recent\n                            \n                        \n                        \n                            \n                                Value : recent\n                            \n                        \n                        \n                            \n                                 Top100\n                            \n                        \n                        \n                            \n                                Value : top-100-repos\n                            \n                        \n                        \n                            \n                                 MinimumContributors\n                            \n                        \n                        \n                            \n                                Value : minimum-5-contributors\n                            \n                        \n                        \n                            \n                                 MostActive\n                            \n                        \n                        \n                            \n                                Value : most-active\n                            \n                        \n                        \n                            \n                                 MostSpammed\n                            \n                        \n                        \n                            \n                                Value : most-spammed\n                            \n                        \n            \n        \n\n    src/common/constants/order-direction.constant.ts\n    \n        \n            \n                \n                    \n                        \n                        OrderDirectionEnum\n                    \n                \n                        \n                            \n                                 ASC\n                            \n                        \n                        \n                            \n                                Value : ASC\n                            \n                        \n                        \n                            \n                                 DESC\n                            \n                        \n                        \n                            \n                                Value : DESC\n                            \n                        \n            \n        \n\n    src/pull-requests/dtos/pull-request-page-options.dto.ts\n    \n        \n            \n                \n                    \n                        \n                        PullRequestOrderFieldsEnum\n                    \n                \n                        \n                            \n                                 created_at\n                            \n                        \n                        \n                            \n                                Value : created_at\n                            \n                        \n                        \n                            \n                                 closed_at\n                            \n                        \n                        \n                            \n                                Value : closed_at\n                            \n                        \n                        \n                            \n                                 merged_at\n                            \n                        \n                        \n                            \n                                Value : merged_at\n                            \n                        \n                        \n                            \n                                 updated_at\n                            \n                        \n                        \n                            \n                                Value : updated_at\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        PullRequestStatusEnum\n                    \n                \n                        \n                            \n                                 open\n                            \n                        \n                        \n                            \n                                Value : open\n                            \n                        \n                        \n                            \n                                 closed\n                            \n                        \n                        \n                            \n                                Value : closed\n                            \n                        \n            \n        \n\n    src/user/dtos/contributor-prs.dto.ts\n    \n        \n            \n                \n                    \n                        \n                        RangeTypeEnum\n                    \n                \n                        \n                            \n                                 All\n                            \n                        \n                        \n                            \n                                Value : all\n                            \n                        \n                        \n                            \n                                 Recent\n                            \n                        \n                        \n                            \n                                Value : recent\n                            \n                        \n            \n        \n\n    src/repo/dtos/repo-page-options.dto.ts\n    \n        \n            \n                \n                    \n                        \n                        RepoFilterFieldsEnum\n                    \n                \n                        \n                            \n                                 Recent\n                            \n                        \n                        \n                            \n                                Value : recent\n                            \n                        \n                        \n                            \n                                 Top100\n                            \n                        \n                        \n                            \n                                Value : top-100-repos\n                            \n                        \n                        \n                            \n                                 MinimumContributors\n                            \n                        \n                        \n                            \n                                Value : minimum-5-contributors\n                            \n                        \n                        \n                            \n                                 MostActive\n                            \n                        \n                        \n                            \n                                Value : most-active\n                            \n                        \n                        \n                            \n                                 MostSpammed\n                            \n                        \n                        \n                            \n                                Value : most-spammed\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        RepoOrderFieldsEnum\n                    \n                \n                        \n                            \n                                 issues\n                            \n                        \n                        \n                            \n                                Value : issues\n                            \n                        \n                        \n                            \n                                 stars\n                            \n                        \n                        \n                            \n                                Value : stars\n                            \n                        \n                        \n                            \n                                 watchers\n                            \n                        \n                        \n                            \n                                Value : watchers\n                            \n                        \n                        \n                            \n                                 subscribers\n                            \n                        \n                        \n                            \n                                Value : subscribers\n                            \n                        \n                        \n                            \n                                 created_at\n                            \n                        \n                        \n                            \n                                Value : created_at\n                            \n                        \n                        \n                            \n                                 updated_at\n                            \n                        \n                        \n                            \n                                Value : updated_at\n                            \n                        \n                        \n                            \n                                 name\n                            \n                        \n                        \n                            \n                                Value : name\n                            \n                        \n                        \n                            \n                                 contributionsCount\n                            \n                        \n                        \n                            \n                                Value : contributionsCount\n                            \n                        \n                        \n                            \n                                 votesCount\n                            \n                        \n                        \n                            \n                                Value : votesCount\n                            \n                        \n                        \n                            \n                                 submissionsCount\n                            \n                        \n                        \n                            \n                                Value : submissionsCount\n                            \n                        \n                        \n                            \n                                 stargazersCount\n                            \n                        \n                        \n                            \n                                Value : stargazersCount\n                            \n                        \n                        \n                            \n                                 starsCount\n                            \n                        \n                        \n                            \n                                Value : starsCount\n                            \n                        \n            \n        \n\n    src/user-lists/dtos/most-active-contributors.dto.ts\n    \n        \n            \n                \n                    \n                        \n                        UserListContributorStatsOrderEnum\n                    \n                \n                        \n                            \n                                 commits\n                            \n                        \n                        \n                            \n                                Value : commits\n                            \n                        \n                        \n                            \n                                 prs_created\n                            \n                        \n                        \n                            \n                                Value : prs_created\n                            \n                        \n                        \n                            \n                                 total_contributions\n                            \n                        \n                        \n                            \n                                Value : total_contributions\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        UserListContributorStatsTypeEnum\n                    \n                \n                        \n                            \n                                 all\n                            \n                        \n                        \n                            \n                                Value : all\n                            \n                        \n                        \n                            \n                                 active\n                            \n                        \n                        \n                            \n                                Value : active\n                            \n                        \n                        \n                            \n                                 new\n                            \n                        \n                        \n                            \n                                Value : new\n                            \n                        \n                        \n                            \n                                 alumni\n                            \n                        \n                        \n                            \n                                Value : alumni\n                            \n                        \n            \n        \n\n    src/user/entities/user-notification.constants.ts\n    \n        \n            \n                \n                    \n                        \n                        UserNotificationTypes\n                    \n                \n                        \n                            \n                                 Welcome\n                            \n                        \n                        \n                            \n                                Value : welcome\n                            \n                        \n                        \n                            \n                                 HighlightReaction\n                            \n                        \n                        \n                            \n                                Value : highlight_reaction\n                            \n                        \n                        \n                            \n                                 HighlightCreated\n                            \n                        \n                        \n                            \n                                Value : highlight_created\n                            \n                        \n                        \n                            \n                                 Follow\n                            \n                        \n                        \n                            \n                                Value : follow\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n  \n  🍕 Open Sauced Insights API 🍕\n  The path to your next Open Source contribution\n  \n  \n  \n\n\n\n  \n  \n  \n    \n  \n  \n    \n  \n  \n    \n  \n  \n    \n  \n\n\n🚀 Live release environments\n\napi.opensauced.pizza\nbeta.api.opensauced.pizza\n\n📖 Prerequisites\nIn order to run the project we need the following software binaries installed on our development machines:\n\nnode>=16.7.0\nnpm>=8.0.0\ndocker>=20.10.12\n\n🖥️ Local development\n📡 Setting Up Your Supabase Instance\nBefore setting up your local PostgreSQL database, a Supabase instance should be created. To do this, follow these steps:\n1. Create a new Supabase project: Visit Supabase and create a new project.\n2. Set Environment Variables in .env file: Once your project is created, Supabase will provide a URL and an API key. Set these in your project's .env file:\nSUPABASE_URL=your_supabase_url\nSUPABASE_API_KEY=your_supabase_api_key\nSUPABASE_JWT_SECRET=your_supabase_jwt_secret\nAPI_DOMAIN=your_api_domainReplace your_supabase_url, your_supabase_api_key, your_supabase_jwt_secret, and your_api_domain with the actual values provided by Supabase and your project's settings.\n🗄️ Setting Up A PostgreSQL Database Locally\nA PostgreSQL Docker container has been set up to facilitate local development. After navigating to the dev/ directory, this container can be set up as follows:\n1. Obtain SSL Certificates:For secure SSL communication, you need a pair of SSL certificates: server.crt and server.key. You can generate self-signed certificates by using OpenSSL:\nopenssl req -x509 -newkey rsa:4096 -keyout server.key -out server.crt -days 365 -nodes -subj \"/CN=localhost\"Please note that this generates self-signed certificates which should only be used for local development.\n2.Build the Docker image:\ndocker build -t my_postgres_image -f Dockerfile.local-postgres .This command will build the Docker image using the Dockerfile in the current directory. The previously generated SSL certificates will need to be in the same directory as the Dockerfile.\n3.Run the Docker container:\ndocker run --name my_postgres_container -p 25060:5432 -d my_postgres_image:latestThis command will start a new Docker container named my_postgres_container, mapping port 25060 on your local machine to port 5432 on the Docker container.\nOnce the database is stood up,\ncan use the dev/apply-migrations.sh script to apply all the migrations in\nthe migrations/ directory.\n🛠️ Installation\nTo install the application:\nnpm ciTo start a local copy of the app on port 3001:\nnpm run start:dev🧪 Test\nFor running the test suite, use the following command. Since the tests run in watch mode by default, some users may encounter errors about too many files being open. In this case, it may be beneficial to install watchman.\nnpm testYou can request a coverage report by running the following command:\nnpm run test:coverageFor writing tests, the rule is move business or service logic to the lib folder and write unit tests. Logic that needs to be in a React component, then leverage tools like Cypress or Vitest mocking to write tests.\n📦 Docker builds\nA development preview can also be run from docker:\ndocker build -t api.opensauced.pizza .\ndocker run -p 8080:3001 api.opensauced.pizzaAlternatively you can pull the production container and skip all builds:\ndocker run -dit -p 8080:3001 ghcr.io/open-sauced/api.opensauced.pizza🎨 Code linting\nTo check the code and styles quality, use the following command:\nnpm run lintThis will also display during development, but not break on errors.\nTo fix the linting errors, use the following command:\nnpm run formatIt is advised to run this command before committing or opening a pull request.\n🕺 OpenAPI Swagger Doc\nWhen making API changes, make sure to run npm run generate:swagger to generate any new Swagger document bits.\n📕 Types\nWe have a couple of scripts to check and adjust missing types.\nIn order to dry run what types would be added to package.json:\nnpm run types:auto-checkIn order to add any missing types to package.json:\nnpm run types:auto-add🚀 Production deployment\nA production deployment is a complete build of the project, including the build of the static assets.\nnpm run build🍕 Pizza service integration\nThis API integrates with the pizza service\nto accept requests for ingesting commits to the database.\nThe environment variables for this are:\nPIZZA_OVEN_HOST=\"http://example.com\"\nPIZZA_OVEN_API=80🔑 Database structure\nClick the image to see the schema diagram full documentation.\n\n🤝 Contributing\nWe encourage you to contribute to Open Sauced! Please check out the Contributing guide for guidelines about how to proceed.\n\n\n🍕 Community\nGot Questions? Join the conversation in our Discord.Find Open Sauced videos and release overviews on our YouTube Channel.\n🎦 Repository Visualization\nBelow is visual representation of our code repository. It is generated by Octo Repo Visualizer.\nThis visualization is being updated on release to our default branch by our release workflow.\n\n\n⚖️ LICENSE\nMIT © Open Sauced\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\nMIT License\nCopyright (c) 2023 Open Sauced\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        ApiServicesModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        BlogSummaryModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ContributionModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ContributorModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CouponModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CustomerModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        EmojiModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        EndorsementModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        HealthModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        HighlightModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        InsightsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        IssueSummaryModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        LogModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        OpenAiModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PizzaOvenModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PullRequestModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        RepoFilterModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        RepoModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        StargazeModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        StarModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        StripeModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        StripeSubscriptionModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        StripeWebHookModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        SubmitModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        TierModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UserListModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UserModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UserReposModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        VoteModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_ApiServicesModule\n\n\n\ncluster_ApiServicesModule_exports\n\n\n\ncluster_ApiServicesModule_providers\n\n\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_BlogSummaryModule\n\n\n\ncluster_BlogSummaryModule_exports\n\n\n\ncluster_BlogSummaryModule_providers\n\n\n\ncluster_ContributionModule\n\n\n\ncluster_ContributionModule_exports\n\n\n\ncluster_ContributionModule_providers\n\n\n\ncluster_CouponModule\n\n\n\ncluster_CouponModule_exports\n\n\n\ncluster_CouponModule_providers\n\n\n\ncluster_CustomerModule\n\n\n\ncluster_CustomerModule_exports\n\n\n\ncluster_CustomerModule_providers\n\n\n\ncluster_EmojiModule\n\n\n\ncluster_EmojiModule_providers\n\n\n\ncluster_EndorsementModule\n\n\n\ncluster_EndorsementModule_exports\n\n\n\ncluster_EndorsementModule_providers\n\n\n\ncluster_InsightsModule\n\n\n\ncluster_InsightsModule_exports\n\n\n\ncluster_InsightsModule_providers\n\n\n\ncluster_IssueSummaryModule\n\n\n\ncluster_IssueSummaryModule_exports\n\n\n\ncluster_IssueSummaryModule_providers\n\n\n\ncluster_LogModule\n\n\n\ncluster_LogModule_exports\n\n\n\ncluster_LogModule_providers\n\n\n\ncluster_OpenAiModule\n\n\n\ncluster_OpenAiModule_exports\n\n\n\ncluster_OpenAiModule_providers\n\n\n\ncluster_PizzaOvenModule\n\n\n\ncluster_PizzaOvenModule_exports\n\n\n\ncluster_PizzaOvenModule_providers\n\n\n\ncluster_PullRequestModule\n\n\n\ncluster_PullRequestModule_imports\n\n\n\ncluster_PullRequestModule_exports\n\n\n\ncluster_PullRequestModule_providers\n\n\n\ncluster_RepoFilterModule\n\n\n\ncluster_RepoFilterModule_exports\n\n\n\ncluster_RepoFilterModule_providers\n\n\n\ncluster_RepoModule\n\n\n\ncluster_RepoModule_exports\n\n\n\ncluster_RepoModule_providers\n\n\n\ncluster_StargazeModule\n\n\n\ncluster_StargazeModule_exports\n\n\n\ncluster_StargazeModule_providers\n\n\n\ncluster_StarModule\n\n\n\ncluster_StarModule_exports\n\n\n\ncluster_StarModule_providers\n\n\n\ncluster_StripeModule\n\n\n\ncluster_StripeModule_exports\n\n\n\ncluster_StripeModule_providers\n\n\n\ncluster_StripeSubscriptionModule\n\n\n\ncluster_StripeSubscriptionModule_exports\n\n\n\ncluster_StripeSubscriptionModule_providers\n\n\n\ncluster_StripeWebHookModule\n\n\n\ncluster_StripeWebHookModule_exports\n\n\n\ncluster_SubmitModule\n\n\n\ncluster_SubmitModule_exports\n\n\n\ncluster_SubmitModule_providers\n\n\n\ncluster_TierModule\n\n\n\ncluster_TierModule_exports\n\n\n\ncluster_TierModule_providers\n\n\n\ncluster_UserListModule\n\n\n\ncluster_UserListModule_exports\n\n\n\ncluster_UserListModule_providers\n\n\n\ncluster_UserModule\n\n\n\ncluster_UserModule_exports\n\n\n\ncluster_UserModule_providers\n\n\n\ncluster_UserReposModule\n\n\n\ncluster_UserReposModule_exports\n\n\n\ncluster_UserReposModule_providers\n\n\n\ncluster_VoteModule\n\n\n\ncluster_VoteModule_exports\n\n\n\ncluster_VoteModule_providers\n\n\n\n\nPagerService \n\nPagerService \n\n\n\nApiServicesModule\n\nApiServicesModule\n\nPagerService  -->\n\nApiServicesModule->PagerService \n\n\n\n\n\nEndorsementModule\n\nEndorsementModule\n\nEndorsementModule -->\n\nApiServicesModule->EndorsementModule\n\n\n\n\n\nInsightsModule\n\nInsightsModule\n\nInsightsModule -->\n\nApiServicesModule->InsightsModule\n\n\n\n\n\nPizzaOvenModule\n\nPizzaOvenModule\n\nPizzaOvenModule -->\n\nApiServicesModule->PizzaOvenModule\n\n\n\n\n\nUserListModule\n\nUserListModule\n\nUserListModule -->\n\nApiServicesModule->UserListModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nUserModule -->\n\nApiServicesModule->UserModule\n\n\n\n\n\nUserReposModule\n\nUserReposModule\n\nUserReposModule -->\n\nApiServicesModule->UserReposModule\n\n\n\n\n\nPagerService\n\nPagerService\n\nApiServicesModule -->\n\nPagerService->ApiServicesModule\n\n\n\n\n\nAuthModule\n\nAuthModule\n\nEndorsementModule -->\n\nAuthModule->EndorsementModule\n\n\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nSupabaseGuard \n\nSupabaseGuard \n\nSupabaseGuard  -->\n\nAuthModule->SupabaseGuard \n\n\n\n\n\nSupabaseStrategy \n\nSupabaseStrategy \n\nSupabaseStrategy  -->\n\nAuthModule->SupabaseStrategy \n\n\n\n\n\nBlogSummaryModule\n\nBlogSummaryModule\n\nAppModule -->\n\nBlogSummaryModule->AppModule\n\n\n\n\n\nBlogSummaryService \n\nBlogSummaryService \n\nBlogSummaryService  -->\n\nBlogSummaryModule->BlogSummaryService \n\n\n\n\n\nContributionModule\n\nContributionModule\n\nAppModule -->\n\nContributionModule->AppModule\n\n\n\n\n\nContributionService \n\nContributionService \n\nContributionService  -->\n\nContributionModule->ContributionService \n\n\n\n\n\nContributorModule\n\nContributorModule\n\nAppModule -->\n\nContributorModule->AppModule\n\n\n\n\n\nCouponModule\n\nCouponModule\n\nAuthModule -->\n\nCouponModule->AuthModule\n\n\n\nAppModule -->\n\nCouponModule->AppModule\n\n\n\n\n\nCouponService \n\nCouponService \n\nCouponService  -->\n\nCouponModule->CouponService \n\n\n\n\n\nCustomerModule\n\nCustomerModule\n\nAuthModule -->\n\nCustomerModule->AuthModule\n\n\n\n\n\nStripeWebHookModule\n\nStripeWebHookModule\n\nStripeWebHookModule -->\n\nCustomerModule->StripeWebHookModule\n\n\n\nAppModule -->\n\nCustomerModule->AppModule\n\n\n\n\n\nCustomerService \n\nCustomerService \n\nCustomerService  -->\n\nCustomerModule->CustomerService \n\n\n\n\n\nEmojiModule\n\nEmojiModule\n\nAppModule -->\n\nEmojiModule->AppModule\n\n\n\nAppModule -->\n\nEndorsementModule->AppModule\n\n\n\n\n\nEndorsementService \n\nEndorsementService \n\nEndorsementService  -->\n\nEndorsementModule->EndorsementService \n\n\n\n\n\nHealthModule\n\nHealthModule\n\nAppModule -->\n\nHealthModule->AppModule\n\n\n\n\n\nHighlightModule\n\nHighlightModule\n\nAppModule -->\n\nHighlightModule->AppModule\n\n\n\nAppModule -->\n\nInsightsModule->AppModule\n\n\n\n\n\nInsightRepoService \n\nInsightRepoService \n\nInsightRepoService  -->\n\nInsightsModule->InsightRepoService \n\n\n\n\n\nInsightsService \n\nInsightsService \n\nInsightsService  -->\n\nInsightsModule->InsightsService \n\n\n\n\n\nIssueSummaryModule\n\nIssueSummaryModule\n\nAppModule -->\n\nIssueSummaryModule->AppModule\n\n\n\n\n\nIssueSummaryService \n\nIssueSummaryService \n\nIssueSummaryService  -->\n\nIssueSummaryModule->IssueSummaryService \n\n\n\n\n\nLogModule\n\nLogModule\n\nAppModule -->\n\nLogModule->AppModule\n\n\n\n\n\nCustomLogger \n\nCustomLogger \n\nCustomLogger  -->\n\nLogModule->CustomLogger \n\n\n\n\n\nOpenAiModule\n\nOpenAiModule\n\nBlogSummaryModule -->\n\nOpenAiModule->BlogSummaryModule\n\n\n\nIssueSummaryModule -->\n\nOpenAiModule->IssueSummaryModule\n\n\n\n\n\nPullRequestModule\n\nPullRequestModule\n\nPullRequestModule -->\n\nOpenAiModule->PullRequestModule\n\n\n\nAppModule -->\n\nOpenAiModule->AppModule\n\n\n\n\n\nOpenAiService \n\nOpenAiService \n\nOpenAiService  -->\n\nOpenAiModule->OpenAiService \n\n\n\nInsightsModule -->\n\nPizzaOvenModule->InsightsModule\n\n\n\nAppModule -->\n\nPizzaOvenModule->AppModule\n\n\n\n\n\nCommitAuthorsService \n\nCommitAuthorsService \n\nCommitAuthorsService  -->\n\nPizzaOvenModule->CommitAuthorsService \n\n\n\n\n\nCommitsService \n\nCommitsService \n\nCommitsService  -->\n\nPizzaOvenModule->CommitsService \n\n\n\n\n\nPizzaOvenService \n\nPizzaOvenService \n\nPizzaOvenService  -->\n\nPizzaOvenModule->PizzaOvenService \n\n\n\nContributorModule -->\n\nPullRequestModule->ContributorModule\n\n\n\nUserModule -->\n\nPullRequestModule->UserModule\n\n\n\nAppModule -->\n\nPullRequestModule->AppModule\n\n\n\n\n\nPullRequestReviewService \n\nPullRequestReviewService \n\nPullRequestReviewService  -->\n\nPullRequestModule->PullRequestReviewService \n\n\n\n\n\nPullRequestService \n\nPullRequestService \n\nPullRequestService  -->\n\nPullRequestModule->PullRequestService \n\n\n\n\n\nRepoModule\n\nRepoModule\n\nContributionModule -->\n\nRepoModule->ContributionModule\n\n\n\n\n\nStarModule\n\nStarModule\n\nStarModule -->\n\nRepoModule->StarModule\n\n\n\n\n\nStargazeModule\n\nStargazeModule\n\nStargazeModule -->\n\nRepoModule->StargazeModule\n\n\n\n\n\nSubmitModule\n\nSubmitModule\n\nSubmitModule -->\n\nRepoModule->SubmitModule\n\n\n\nUserModule -->\n\nRepoModule->UserModule\n\n\n\n\n\nVoteModule\n\nVoteModule\n\nVoteModule -->\n\nRepoModule->VoteModule\n\n\n\nAppModule -->\n\nRepoModule->AppModule\n\n\n\n\n\nRepoService \n\nRepoService \n\nRepoService  -->\n\nRepoModule->RepoService \n\n\n\nAppModule -->\n\nStarModule->AppModule\n\n\n\n\n\nStarService \n\nStarService \n\nStarService  -->\n\nStarModule->StarService \n\n\n\nAppModule -->\n\nStargazeModule->AppModule\n\n\n\n\n\nStargazeService \n\nStargazeService \n\nStargazeService  -->\n\nStargazeModule->StargazeService \n\n\n\n\n\nStripeSubscriptionModule\n\nStripeSubscriptionModule\n\nStripeWebHookModule -->\n\nStripeSubscriptionModule->StripeWebHookModule\n\n\n\nAppModule -->\n\nStripeSubscriptionModule->AppModule\n\n\n\n\n\nStripeSubscriptionService \n\nStripeSubscriptionService \n\nStripeSubscriptionService  -->\n\nStripeSubscriptionModule->StripeSubscriptionService \n\n\n\nAppModule -->\n\nStripeWebHookModule->AppModule\n\n\n\n\n\nStripeWebhookController \n\nStripeWebhookController \n\nStripeWebhookController  -->\n\nStripeWebHookModule->StripeWebhookController \n\n\n\nAppModule -->\n\nSubmitModule->AppModule\n\n\n\n\n\nSubmitService \n\nSubmitService \n\nSubmitService  -->\n\nSubmitModule->SubmitService \n\n\n\nAppModule -->\n\nUserListModule->AppModule\n\n\n\n\n\nUserListService \n\nUserListService \n\nUserListService  -->\n\nUserListModule->UserListService \n\n\n\n\n\nUserListStatsService \n\nUserListStatsService \n\nUserListStatsService  -->\n\nUserListModule->UserListStatsService \n\n\n\nAuthModule -->\n\nUserModule->AuthModule\n\n\n\nEndorsementModule -->\n\nUserModule->EndorsementModule\n\n\n\nHighlightModule -->\n\nUserModule->HighlightModule\n\n\n\nInsightsModule -->\n\nUserModule->InsightsModule\n\n\n\nStripeWebHookModule -->\n\nUserModule->StripeWebHookModule\n\n\n\nUserListModule -->\n\nUserModule->UserListModule\n\n\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\nEndorsementService  -->\n\nUserModule->EndorsementService \n\n\n\nRepoService  -->\n\nUserModule->RepoService \n\n\n\n\n\nUserFollowService \n\nUserFollowService \n\nUserFollowService  -->\n\nUserModule->UserFollowService \n\n\n\n\n\nUserHighlightsService \n\nUserHighlightsService \n\nUserHighlightsService  -->\n\nUserModule->UserHighlightsService \n\n\n\n\n\nUserOrganizationService \n\nUserOrganizationService \n\nUserOrganizationService  -->\n\nUserModule->UserOrganizationService \n\n\n\n\n\nUserService \n\nUserService \n\nUserService  -->\n\nUserModule->UserService \n\n\n\nAuthModule -->\n\nUserReposModule->AuthModule\n\n\n\nAppModule -->\n\nUserReposModule->AppModule\n\n\n\n\n\nUserReposService \n\nUserReposService \n\nUserReposService  -->\n\nUserReposModule->UserReposService \n\n\n\nAppModule -->\n\nVoteModule->AppModule\n\n\n\n\n\nVoteService \n\nVoteService \n\nVoteService  -->\n\nVoteModule->VoteService \n\n\n\n\n\nStripeModule\n\nStripeModule\n\nAuthModule -->\n\nStripeModule->AuthModule\n\n\n\nStripeWebHookModule -->\n\nStripeModule->StripeWebHookModule\n\n\n\n\n\nStripeService \n\nStripeService \n\nStripeService  -->\n\nStripeModule->StripeService \n\n\n\n\n\nSupabaseGuard\n\nSupabaseGuard\n\nAuthModule -->\n\nSupabaseGuard->AuthModule\n\n\n\n\n\nSupabaseStrategy\n\nSupabaseStrategy\n\nAuthModule -->\n\nSupabaseStrategy->AuthModule\n\n\n\n\n\nBlogSummaryService\n\nBlogSummaryService\n\nBlogSummaryModule -->\n\nBlogSummaryService->BlogSummaryModule\n\n\n\n\n\nContributionService\n\nContributionService\n\nContributionModule -->\n\nContributionService->ContributionModule\n\n\n\n\n\nCouponService\n\nCouponService\n\nCouponModule -->\n\nCouponService->CouponModule\n\n\n\n\n\nCustomerService\n\nCustomerService\n\nCustomerModule -->\n\nCustomerService->CustomerModule\n\n\n\n\n\nEmojiService\n\nEmojiService\n\nEmojiModule -->\n\nEmojiService->EmojiModule\n\n\n\n\n\nEndorsementService\n\nEndorsementService\n\nEndorsementModule -->\n\nEndorsementService->EndorsementModule\n\n\n\nUserModule -->\n\nEndorsementService->UserModule\n\n\n\n\n\nInsightMemberService\n\nInsightMemberService\n\nInsightsModule -->\n\nInsightMemberService->InsightsModule\n\n\n\n\n\nInsightRepoService\n\nInsightRepoService\n\nInsightsModule -->\n\nInsightRepoService->InsightsModule\n\n\n\n\n\nInsightsService\n\nInsightsService\n\nInsightsModule -->\n\nInsightsService->InsightsModule\n\n\n\n\n\nIssueSummaryService\n\nIssueSummaryService\n\nIssueSummaryModule -->\n\nIssueSummaryService->IssueSummaryModule\n\n\n\n\n\nCustomLogger\n\nCustomLogger\n\nLogModule -->\n\nCustomLogger->LogModule\n\n\n\n\n\nLogService\n\nLogService\n\nLogModule -->\n\nLogService->LogModule\n\n\n\n\n\nOpenAiService\n\nOpenAiService\n\nOpenAiModule -->\n\nOpenAiService->OpenAiModule\n\n\n\n\n\nCommitAuthorsService\n\nCommitAuthorsService\n\nPizzaOvenModule -->\n\nCommitAuthorsService->PizzaOvenModule\n\n\n\n\n\nCommitsService\n\nCommitsService\n\nPizzaOvenModule -->\n\nCommitsService->PizzaOvenModule\n\n\n\n\n\nPizzaOvenService\n\nPizzaOvenService\n\nPizzaOvenModule -->\n\nPizzaOvenService->PizzaOvenModule\n\n\n\n\n\nRepoFilterModule\n\nRepoFilterModule\n\nPullRequestModule -->\n\nRepoFilterModule->PullRequestModule\n\n\n\nRepoModule -->\n\nRepoFilterModule->RepoModule\n\n\n\n\n\nRepoFilterService \n\nRepoFilterService \n\nRepoFilterService  -->\n\nRepoFilterModule->RepoFilterService \n\n\n\n\n\nCodeExplanationService\n\nCodeExplanationService\n\nPullRequestModule -->\n\nCodeExplanationService->PullRequestModule\n\n\n\n\n\nCodeRefactorSuggestionService\n\nCodeRefactorSuggestionService\n\nPullRequestModule -->\n\nCodeRefactorSuggestionService->PullRequestModule\n\n\n\n\n\nCodeTestSuggestionService\n\nCodeTestSuggestionService\n\nPullRequestModule -->\n\nCodeTestSuggestionService->PullRequestModule\n\n\n\n\n\nPullRequestDescriptionService\n\nPullRequestDescriptionService\n\nPullRequestModule -->\n\nPullRequestDescriptionService->PullRequestModule\n\n\n\n\n\nPullRequestInsightsService\n\nPullRequestInsightsService\n\nPullRequestModule -->\n\nPullRequestInsightsService->PullRequestModule\n\n\n\n\n\nPullRequestReviewService\n\nPullRequestReviewService\n\nPullRequestModule -->\n\nPullRequestReviewService->PullRequestModule\n\n\n\n\n\nPullRequestService\n\nPullRequestService\n\nPullRequestModule -->\n\nPullRequestService->PullRequestModule\n\n\n\n\n\nRepoFilterService\n\nRepoFilterService\n\nUserModule -->\n\nRepoFilterService->UserModule\n\n\n\nRepoFilterModule -->\n\nRepoFilterService->RepoFilterModule\n\n\n\n\n\nRepoService\n\nRepoService\n\nRepoModule -->\n\nRepoService->RepoModule\n\n\n\nUserModule -->\n\nRepoService->UserModule\n\n\n\n\n\nStargazeService\n\nStargazeService\n\nStargazeModule -->\n\nStargazeService->StargazeModule\n\n\n\n\n\nStarService\n\nStarService\n\nStarModule -->\n\nStarService->StarModule\n\n\n\n\n\nStripeService\n\nStripeService\n\nStripeModule -->\n\nStripeService->StripeModule\n\n\n\n\n\nStripeSubscriptionService\n\nStripeSubscriptionService\n\nStripeSubscriptionModule -->\n\nStripeSubscriptionService->StripeSubscriptionModule\n\n\n\n\n\nSubmitService\n\nSubmitService\n\nSubmitModule -->\n\nSubmitService->SubmitModule\n\n\n\n\n\nTierService \n\nTierService \n\n\n\nTierModule\n\nTierModule\n\nUserModule -->\n\nTierModule->UserModule\n\n\n\nTierService  -->\n\nTierModule->TierService \n\n\n\n\n\nTierService\n\nTierService\n\nTierModule -->\n\nTierService->TierModule\n\n\n\n\n\nUserListService\n\nUserListService\n\nUserListModule -->\n\nUserListService->UserListModule\n\n\n\n\n\nUserListStatsService\n\nUserListStatsService\n\nUserListModule -->\n\nUserListStatsService->UserListModule\n\n\n\n\n\nUserCollaborationService\n\nUserCollaborationService\n\nUserModule -->\n\nUserCollaborationService->UserModule\n\n\n\n\n\nUserFollowService\n\nUserFollowService\n\nUserModule -->\n\nUserFollowService->UserModule\n\n\n\n\n\nUserHighlightsService\n\nUserHighlightsService\n\nUserModule -->\n\nUserHighlightsService->UserModule\n\n\n\n\n\nUserNotificationService\n\nUserNotificationService\n\nUserModule -->\n\nUserNotificationService->UserModule\n\n\n\n\n\nUserOrganizationService\n\nUserOrganizationService\n\nUserModule -->\n\nUserOrganizationService->UserModule\n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\nUserReposService\n\nUserReposService\n\nUserReposModule -->\n\nUserReposService->UserReposModule\n\n\n\n\n\nVoteService\n\nVoteService\n\nVoteModule -->\n\nVoteService->VoteModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        31 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    35 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    38 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    45 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    63 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Guard\n                \n            \n        \n        \n            \n                \n                    \n                    4 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 1.57.0-beta.1\n        \n            Description : API dot Open Sauced is NestJS and SupaBase powered OAS3 backend designed to remove client complexity and provide a structured graph of all @open-sauced integrations\n        \n            Keywords : \n        \n            Homepage : https://github.com/open-sauced/api.opensauced.pizza#readme\n        \n            Bugs : https://github.com/open-sauced/api.opensauced.pizza/issues\n        \n            License : MIT\n        \n            Repository : git+https://github.com/open-sauced/api.opensauced.pizza.git\n        \n            Author : TED Vortex \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            SupabaseAuthRequest   (src/.../supabase.user.decorator.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/auth/supabase.user.decorator.ts\n    \n    \n        \n            \n                \n                    \n                    SupabaseAuthRequest\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ApiConfig   (src/.../api.config.ts)\n                        \n                        \n                            ApiPaginatedResponse   (src/.../api-paginated-response.decorator.ts)\n                        \n                        \n                            cliDuration   (src/.../cli-duration.ts)\n                        \n                        \n                            DbApiConfig   (src/.../db-api.config.ts)\n                        \n                        \n                            DbLoggingConfig   (src/.../db-logging.config.ts)\n                        \n                        \n                            EndpointConfig   (src/.../endpoint.config.ts)\n                        \n                        \n                            generateSwaggerJson   (src/.../generate-swagger.ts)\n                        \n                        \n                            getDomain   (src/.../endpoint.config.ts)\n                        \n                        \n                            GetPrevDateISOString   (src/.../datetimes.ts)\n                        \n                        \n                            HacktoberfestConfig   (src/.../hacktoberfest.config.ts)\n                        \n                        \n                            OpenAIConfig   (src/.../openai.config.ts)\n                        \n                        \n                            PizzaConfig   (src/.../pizza.config.ts)\n                        \n                        \n                            relevantEvents   (src/.../stripe-webhook.controller.ts)\n                        \n                        \n                            StripeConfig   (src/.../stripe.config.ts)\n                        \n                        \n                            swaggerMarkdownDescription   (src/.../swagger.ts)\n                        \n                        \n                            TierConfig   (src/.../tier.config.ts)\n                        \n                        \n                            toDateTime   (src/.../utils.ts)\n                        \n                        \n                            User   (src/.../supabase.user.decorator.ts)\n                        \n                        \n                            UserId   (src/.../supabase.user.decorator.ts)\n                        \n                        \n                            userNotificationTypes   (src/.../user-notification.constants.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/config/api.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ApiConfig\n                        \n                    \n                \n            \n                \n                    \n                        Default value : registerAs(\"api\", () => ({\n  codename: String(process.env.API_CODENAME ?? \"api-local\"),\n  logging: process.env.NODE_ENV !== \"production\" ? \"debug\" : \"info\",\n  host: String(process.env.API_HOST ?? \"0.0.0.0\"),\n  port: String(process.env.API_PORT ?? \"3001\"),\n  domain: String(process.env.API_DOMAIN ?? \"api.opensauced.pizza\"),\n  development: !process.env.CI,\n  memory_heap: Number(parseInt(process.env.MEMORY_HEAP ?? \"200\", 10) * 1024 * 1024),\n  memory_rss: Number(parseInt(process.env.MEMORY_RSS ?? \"3000\", 10) * 1024 * 1024),\n  disk_percentage: Number(parseFloat(process.env.DISK_PERCENGATE ?? \"0.7\")),\n  disk_size: Number(parseInt(process.env.DISK_SIZE ?? \"100\", 10) * 1024 * 1024 * 1024),\n  endorsementServiceToken: String(process.env.ENDORSEMENT_SERVICE_TOKEN ?? \"\"),\n}))\n                    \n                \n\n\n        \n    \n\n    src/common/decorators/api-paginated-response.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ApiPaginatedResponse\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (model: TModel) =>\n  applyDecorators(\n    ApiExtraModels(PageDto, model),\n    ApiOkResponse({\n      description: \"Successfully received model list\",\n      schema: {\n        allOf: [\n          { $ref: getSchemaPath(PageDto) },\n          {\n            properties: {\n              data: {\n                type: \"array\",\n                items: { $ref: getSchemaPath(model) },\n              },\n            },\n          },\n        ],\n      },\n    })\n  )\n                    \n                \n\n\n        \n    \n\n    src/common/util/cli-duration.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        cliDuration\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (startTime: number, text: string) =>\n  `${text} ${clc.yellow(`+${String(Date.now() - startTime)}ms`)}`\n                    \n                \n\n\n        \n    \n\n    src/config/db-api.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        DbApiConfig\n                        \n                    \n                \n            \n                \n                    \n                        Default value : registerAs(\"db-api\", () => ({\n  connection: String(process.env.TYPEORM_CONNECTION_API ?? \"postgres\"),\n  host: String(process.env.TYPEORM_HOST_API ?? \"localhost\"),\n  port: String(process.env.TYPEORM_PORT_API ?? \"25060\"),\n  username: String(process.env.TYPEORM_USERNAME_API ?? \"doadmin\"),\n  password: String(process.env.TYPEORM_PASSWORD_API ?? \"UCN2zrH2WGxKck7tT2JG4MY6wbHkeX9s\"),\n  database: String(process.env.TYPEORM_DATABASE_API ?? \"defaultdb\"),\n  certificate: String(process.env.TYPEORM_SSL_CERT_API ?? \"-----------------------------\"),\n  maxQueryExecutionTime: Number(parseInt(process.env.TYPEORM_MAX_QUERY_EXECUTION_TIME_API ?? \"10000\", 10)),\n}))\n                    \n                \n\n\n        \n    \n\n    src/config/db-logging.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        DbLoggingConfig\n                        \n                    \n                \n            \n                \n                    \n                        Default value : registerAs(\"db-logging\", () => ({\n  connection: String(process.env.TYPEORM_CONNECTION_LOGGING ?? \"postgres\"),\n  host: String(process.env.TYPEORM_HOST_LOGGING ?? \"localhost\"),\n  port: String(process.env.TYPEORM_PORT_LOGGING ?? \"25060\"),\n  username: String(process.env.TYPEORM_USERNAME_LOGGING ?? \"doadmin\"),\n  password: String(process.env.TYPEORM_PASSWORD_LOGGING ?? \"UCN2zrH2WGxKck7tT2JG4MY6wbHkeX9s\"),\n  database: String(process.env.TYPEORM_DATABASE_LOGGING ?? \"defaultdb\"),\n  certificate: String(process.env.TYPEORM_SSL_CERT_LOGGING ?? \"-----------------------------\"),\n  maxQueryExecutionTime: Number(parseInt(process.env.TYPEORM_MAX_QUERY_EXECUTION_TIME_LOGGING ?? \"10000\", 10)),\n}))\n                    \n                \n\n\n        \n    \n\n    src/config/endpoint.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        EndpointConfig\n                        \n                    \n                \n            \n                \n                    \n                        Default value : registerAs(\"endpoint\", () => ({\n  landing: getDomain(),\n  app: getDomain(\"app\"),\n  hot: getDomain(\"hot\"),\n  docs: getDomain(\"docs\"),\n  explore: getDomain(\"explore\"),\n  admin: getDomain(\"admin\"),\n}))\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getDomain\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (subdomain?: string) =>\n  new URL(`https://${subdomain ? `${subdomain}.` : \"\"}${process.env.DOMAIN ?? \"opensauced.pizza\"}`).toString()\n                    \n                \n\n\n        \n    \n\n    src/generate-swagger.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        generateSwaggerJson\n                        \n                    \n                \n            \n                \n                    \n                        Default value : async () => {\n  const app = await NestFactory.create(AppModule, new FastifyAdapter({ logger: false }), {\n    bufferLogs: true,\n    rawBody: true,\n  });\n\n  const apiDomain = \"api.opensauced.pizza\";\n\n  const markdownDescription = swaggerMarkdownDescription(apiDomain);\n\n  app.useLogger(app.get(Logger));\n  app.flushLogs();\n  app.enableCors();\n  app.enableVersioning({\n    type: VersioningType.URI,\n    defaultVersion: String(major(\"1.8.0\", { loose: false })),\n  });\n\n  const options = new DocumentBuilder();\n\n  options\n    .addServer(`https://${apiDomain}`, \"Production\", {})\n    .addServer(`https://beta.${apiDomain}`, \"Beta\", {})\n    .addServer(`https://alpha.${apiDomain}`, \"Alpha\", {})\n    .setTitle(`@open-sauced/api.opensauced.pizza`)\n    .setDescription(markdownDescription)\n    .setVersion(`1`)\n    .setContact(\"Open Sauced\", \"https://opensauced.pizza\", \"hello@opensauced.pizza\")\n    .setTermsOfService(\"https://github.com/open-sauced/code-of-conduct\")\n    .setLicense(`The MIT License`, `https://opensource.org/licenses/mit`)\n    .addBearerAuth();\n\n  const document = SwaggerModule.createDocument(app, options.build(), {\n    operationIdFactory: (controllerKey: string, methodKey: string) => methodKey,\n  });\n\n  const yamlSwaggerDoc = yaml.stringify(document);\n\n  // write the yaml swagger doc to the root project directory anytime the server starts\n  await writeFile(path.resolve(process.cwd(), \"swagger.yaml\"), yamlSwaggerDoc, \"utf8\");\n\n  await app.close();\n}\n                    \n                \n\n\n        \n    \n\n    src/common/util/datetimes.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        GetPrevDateISOString\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (prev_start_date = 0): string =>\n  new Date(Date.now() - prev_start_date * 24 * 60 * 60 * 1000).toISOString()\n                    \n                \n\n\n        \n    \n\n    src/config/hacktoberfest.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        HacktoberfestConfig\n                        \n                    \n                \n            \n                \n                    \n                        Default value : registerAs(\"hacktoberfest\", () => ({\n  year: String(process.env.HACKTOBERFEST_YEAR ?? `${new Date().getFullYear()}`),\n}))\n                    \n                \n\n\n        \n    \n\n    src/config/openai.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        OpenAIConfig\n                        \n                    \n                \n            \n                \n                    \n                        Default value : registerAs(\"openai\", () => ({\n  APIKey: String(process.env.OPENAI_API_KEY ?? \"apikey\"),\n  modelName: String(process.env.OPENAI_MODEL_NAME ?? \"gpt-3.5-turbo\"),\n  completionsURL: String(process.env.OPENAI_COMPLETIONS_API_URL ?? \"\"),\n}))\n                    \n                \n\n\n        \n    \n\n    src/config/pizza.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        PizzaConfig\n                        \n                    \n                \n            \n                \n                    \n                        Default value : registerAs(\"pizza\", () => ({\n  host: String(process.env.PIZZA_OVEN_HOST ?? \"0.0.0.0\"),\n  port: String(process.env.PIZZA_OVEN_PORT ?? \"80\"),\n}))\n                    \n                \n\n\n        \n    \n\n    src/stripe-webhook/stripe-webhook.controller.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        relevantEvents\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Set([\n  \"checkout.session.completed\",\n  \"customer.subscription.created\",\n  \"customer.subscription.updated\",\n  \"customer.subscription.deleted\",\n])\n                    \n                \n\n\n        \n    \n\n    src/config/stripe.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        StripeConfig\n                        \n                    \n                \n            \n                \n                    \n                        Default value : registerAs(\"stripe\", () => ({\n  secretKey: String(process.env.STRIPE_SECRET_KEY ?? \"\"),\n  webhookSecret: String(process.env.STRIPE_WEBHOOK_SECRET_LIVE ?? process.env.STRIPE_WEBHOOK_SECRET ?? \"\"),\n  subscriptionPriceID: String(process.env.STRIPE_SUBSCRIPTION_PRICE_ID ?? \"\"),\n  subscriptionSessionCheckoutSuccessURL: String(process.env.STRIPE_CHECKOUT_SESSION_SUCCESS_URL ?? \"\"),\n  subscriptionSessionCancelURL: String(process.env.STRIPE_CHECKOUT_SESSION_CANCEL_URL ?? \"\"),\n}))\n                    \n                \n\n\n        \n    \n\n    src/common/util/swagger.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        swaggerMarkdownDescription\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (apiDomain: string) => `\n## Swagger-UI API Documentation\n\nThis REST API can be used to create, read, update or delete data from the Open Sauced community platform.\nThe Swagger-UI provides useful information to get started and an overview of all available resources.\nEach API route is clickable and has their own detailed description on how to use it.\nThe base URL for the API is [${apiDomain}](https://${apiDomain}).\n\n[comment]: # (TODO: add bearer auth information)\n\n## Rate limiting\n\nEvery IP address is allowed to perform 5000 requests per hour.\nThis is measured by saving the date of the initial request and counting all requests in the next hour.\nWhen an IP address goes over the limit, HTTP status code 429 is returned.\nThe returned HTTP headers of any API request show the current rate limit status:\n\nheader | description\n--- | ---\n\\`X-RateLimit-Limit\\` | The maximum number of requests allowed per hour\n\\`X-RateLimit-Remaining\\` | The number of requests remaining in the current rate limit window\n\\`X-RateLimit-Reset\\` | The date and time at which the current rate limit window resets in [UTC epoch seconds](https://en.wikipedia.org/wiki/Unix_time)\n\n[comment]: # (TODO: add pagination information)\n\n## Common response codes\n\nEach route shows for each method which data they expect and which they will respond when the call succeeds.\nThe table below shows most common response codes you can receive from our endpoints.\n\ncode | condition\n--- | ---\n[\\`200\\`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/200) | The [\\`GET\\`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/GET) request was handled successfully. The response provides the requested data.\n[\\`201\\`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/201) | The [\\`POST\\`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/POST) request was handled successfully. The response provides the created data.\n[\\`204\\`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/204) | The [\\`PATCH\\`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/PATCH) or [\\`DELETE\\`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/DELETE) request was handled successfully. The response provides no data, generally.\n[\\`400\\`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/400) | The server will not process the request due to something that is perceived to be a client error. Check the provided error for mote information.\n[\\`401\\`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/401) | The request requires user authentication. Check the provided error for more information.\n[\\`403\\`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/403) | The request was valid, but the server is refusing user access. Check the provided error for more information.\n[\\`404\\`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/404) | The requested resource could not be found. Check the provided error for more information.\n[\\`429\\`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/429) | The current API Key made too many requests in the last hour. Check [Rate limiting](#ratelimiting) for more information.\n\n## Additional links`\n                    \n                \n\n\n        \n    \n\n    src/config/tier.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        TierConfig\n                        \n                    \n                \n            \n                \n                    \n                        Default value : registerAs(\"tier\", () => ({\n  freePlan: String(process.env.TIER_PLAN_FREE ?? \"plan:free@1\"),\n}))\n                    \n                \n\n\n        \n    \n\n    src/stripe-webhook/utils.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        toDateTime\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (secs: number) => {\n  // unix epoch start\n  const t = new Date(\"1970-01-01T00:30:00Z\");\n\n  t.setSeconds(secs);\n  return t;\n}\n                    \n                \n\n\n        \n    \n\n    src/auth/supabase.user.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        User\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createParamDecorator((_data: unknown, context: ExecutionContext) => {\n  const request = context.switchToHttp().getRequest();\n\n  return request.user;\n})\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        UserId\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createParamDecorator((_data: unknown, context: ExecutionContext) => {\n  const request = context.switchToHttp().getRequest();\n\n  return parseInt(request.user?.user_metadata.sub as string, 10);\n})\n                    \n                \n\n\n        \n    \n\n    src/user/entities/user-notification.constants.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        userNotificationTypes\n                        \n                    \n                \n            \n                \n                    \n                        Default value : [\"highlight_reaction\", \"highlight_created\", \"follow\"] as const\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
