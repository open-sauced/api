var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/interfaces/AllContributionsCount.html",[0,3.007,1,3.952]],["body/interfaces/AllContributionsCount.html",[0,1.722,1,5.066,2,2.148,3,0.022,4,0.022,5,0.022,6,1.159,7,1.969,8,3.107,9,2.603,10,0.107,11,0.658,12,5.826,13,0.612,14,0.117,15,0.005,16,0.079,17,0.802,18,1.361,19,0.38,20,1.393,21,3.78,22,0.651,23,1.14,24,0.834,25,0.967,26,1.024,27,1.896,28,2.245,29,2.051,30,3.004,31,1.262,32,2.264,33,2.264,34,2.148,35,2.148,36,2.409,37,2.728,38,2.051,39,4.226,40,5.391,41,2.409,42,2.051,43,3.586,44,3.586,45,3.403,46,2.409,47,2.051,48,2.264,49,2.264,50,5.121,51,2.603,52,2.264,53,2.603,54,3.403,55,2.409,56,3.403,57,2.264,58,2.409,59,0.025,60,0.099,61,2.051,62,0.783,63,2.409,64,0.879,65,1.687,66,2.409,67,1.219,68,2.359,69,2.114,70,2.409,71,1.411,72,1.324,73,2.603,74,3.554,75,6.519,76,0.981,77,2.077,78,4.046,79,5.826,80,3.004,81,2.603,82,3.421,83,3.275,84,2.603,85,4.12,86,6.251,87,4.739,88,2.344,89,4.124,90,3.873,91,3.111,92,4.739,93,2.499,94,5.32,95,4.739,96,7.559,97,2.409,98,3.338,99,5.312,100,3.561,101,1.969,102,2.155,103,2.603,104,3.586,105,2.603,106,3.403,107,2.603,108,5.785,109,3.586,110,6.102,111,4.124,112,2.603,113,4.124,114,2.603,115,4.124,116,2.603,117,1.109,118,2.398,119,1.151,120,2.603,121,1.642,122,1.816,123,2.603,124,2.245,125,2.603,126,2.603,127,6.35,128,2.603,129,5.121,130,4.124,131,4.124,132,4.124,133,4.124,134,2.603,135,4.124,136,2.603,137,4.453,138,2.603,139,2.603,140,2.114,141,2.603,142,2.727,143,1.986,144,2.603,145,2.603,146,2.148,147,2.148,148,1.774,149,2.148,150,2.603,151,2.603,152,4.124,153,2.603,154,5.826,155,2.603,156,5.278,157,2.603,158,2.603,159,6.573,160,6.333,161,2.603,162,2.603,163,2.603,164,5.121,165,2.603,166,2.603,167,2.603,168,2.603,169,5.121,170,2.603,171,2.603,172,2.603,173,2.603,174,5.121,175,2.603,176,2.264,177,2.264,178,2.603,179,2.603,180,2.603,181,2.148,182,2.603,183,2.603,184,2.603,185,2.603,186,1.071,187,2.409,188,2.603,189,2.051,190,2.409,191,2.409,192,1.309,193,2.603,194,1.896,195,2.603,196,1.262,197,1.55,198,1.896,199,2.603,200,1.588,201,3.816,202,1.866,203,2.148,204,2.603,205,2.409,206,2.603,207,0.537,208,2.409,209,3.816,210,2.603,211,2.603,212,1.832,213,1.896,214,2.603,215,2.603,216,2.603,217,2.603,218,2.603,219,2.603,220,2.603,221,7.077,222,2.603,223,2.409,224,2.051,225,2.603,226,5.874,227,6.251,228,5.574,229,5.121,230,5.121,231,5.121,232,5.121,233,5.121,234,4.121,235,5.121,236,2.603,237,2.603,238,0.002,239,0.002]],["title/modules/ApiServicesModule.html",[240,1.268,241,3.098]],["body/modules/ApiServicesModule.html",[3,0.057,4,0.057,5,0.057,15,0.005,16,0.076,19,0.976,59,0.063,60,0.255,238,0.004,239,0.004,240,2.229,241,6.325,242,2.751,243,3.443,244,6.685,245,6.685,246,6.685,247,5.817,248,3.443,249,2.837,250,2.794,251,7.443,252,7.443,253,3.615,254,3.739,255,7.443]],["title/modules/AppModule.html",[240,1.268,256,3.952]],["body/modules/AppModule.html",[3,0.02,4,0.02,5,0.02,7,1.749,8,1.234,14,0.244,15,0.005,16,0.09,19,0.338,22,0.579,24,0.741,27,2.733,29,1.823,59,0.022,60,0.088,62,0.696,64,1.267,65,1.371,74,1.411,102,1.441,121,1.517,196,2.64,207,1.235,238,0.002,239,0.002,240,1.047,242,0.952,243,1.617,248,1.617,249,0.982,250,0.967,253,1.047,256,8.163,257,2.313,258,2.313,259,5.05,260,5.287,261,5.287,262,5.287,263,5.05,264,4.846,265,5.287,266,5.287,267,5.287,268,5.287,269,5.287,270,5.287,271,5.287,272,4.668,273,5.05,274,4.846,275,4.239,276,5.287,277,5.287,278,5.05,279,5.287,280,5.287,281,5.05,282,5.287,283,4.239,284,5.05,285,5.287,286,2.575,287,2.949,288,0.519,289,2.575,290,4.176,291,6.061,292,0.118,293,2.575,294,0.501,295,0.705,296,0.232,297,2.575,298,0.519,299,1.823,300,2.575,301,2.575,302,1.186,303,5.984,304,4.874,305,1.411,306,3.751,307,2.14,308,3.751,309,2.14,310,2.575,311,1.909,312,4.176,313,6.061,314,6.061,315,2.575,316,2.575,317,2.14,318,2.14,319,2.14,320,3.751,321,3.751,322,3.751,323,3.751,324,3.751,325,3.751,326,3.751,327,3.751,328,3.751,329,3.751,330,4.176,331,1.749,332,2.575,333,1.923,334,1.377,335,1.887,336,1.411,337,2.837,338,2.575,339,2.641,340,1.823,341,2.837,342,2.012,343,2.837,344,2.012,345,2.837,346,2.012,347,2.837,348,2.575,349,2.964,350,2.837,351,2.575,352,2.733,353,2.575,354,2.313,355,2.575,356,2.575,357,2.575,358,2.575,359,2.575,360,1.749,361,2.14,362,2.575,363,4.176,364,2.14,365,2.575,366,2.575,367,2.557,368,2.313,369,2.956,370,4.176,371,3.095,372,2.313,373,3.095,374,3.095,375,2.575,376,2.14,377,1.749,378,2.575,379,2.575,380,3.262,381,2.313,382,3.095,383,2.14,384,3.095,385,2.575,386,1.448,387,2.14,388,2.348,389,3.226,390,1.53,391,2.956,392,1.394,393,2.012,394,2.348,395,4.75,396,1.53,397,2.575,398,2.837,399,1.909,400,2.956,401,2.012,402,2.837,403,2.313,404,2.557,405,1.315,406,1.685,407,2.956,408,1.909,409,3.262,410,1.448,411,2.956,412,2.012,413,2.956,414,2.012,415,2.956,416,2.012,417,2.575,418,2.733,419,2.14,420,2.575,421,0.952,422,1.448,423,2.012,424,2.575,425,4.176,426,2.575,427,2.012,428,2.313,429,2.575,430,2.313,431,2.837,432,3.095,433,1.909,434,3.095,435,2.575,436,2.575,437,2.313,438,2.837,439,2.14,440,2.575,441,2.575,442,2.575,443,2.853,444,5.268,445,6.061,446,4.176,447,9.662,448,2.575,449,4.115,450,2.575,451,4.115,452,2.575,453,2.817,454,2.575,455,4.732,456,2.575,457,4.115,458,2.575,459,5.268,460,2.555,461,5.268,462,3.579,463,4.176,464,4.732,465,4.732,466,2.575,467,5.268,468,3.751,469,2.575,470,6.061,471,3.262,472,2.575,473,2.575,474,2.575,475,2.575,476,2.575,477,2.575,478,2.575,479,3.471,480,2.575,481,2.575,482,2.575,483,2.575,484,2.575,485,2.575,486,2.575,487,2.575,488,2.575,489,2.575,490,2.575,491,2.575,492,1.909,493,2.575,494,2.575,495,2.012,496,2.575,497,2.575,498,2.575,499,2.575,500,2.575,501,2.575,502,2.575,503,2.575,504,2.575,505,2.313,506,2.575,507,2.575,508,1.685,509,2.14,510,1.823,511,1.909,512,2.575,513,2.14,514,1.823,515,2.575,516,1.388,517,2.575,518,2.575,519,2.575,520,2.575]],["title/classes/ApplyUserCouponDto.html",[60,0.174,521,4.206]],["body/classes/ApplyUserCouponDto.html",[3,0.056,4,0.056,5,0.056,10,0.274,11,1.271,14,0.381,15,0.005,16,0.075,59,0.063,60,0.304,76,1.224,207,1.643,238,0.004,239,0.004,292,0.338,521,7.364,522,1.854,523,8.859,524,7.397,525,9.485,526,0.793,527,2.82,528,6.566,529,4.425,530,1.83,531,7.397,532,7.397,533,3.275,534,1.061,535,3.431,536,2.215,537,0.983,538,6.148]],["title/controllers/AuthController.html",[539,1.179,540,4.206]],["body/controllers/AuthController.html",[3,0.02,4,0.02,5,0.02,10,0.096,13,1.032,14,0.387,15,0.005,16,0.078,19,0.341,59,0.022,60,0.089,62,0.703,65,1.587,68,1.831,71,1.523,72,2.012,76,0.324,77,2.996,85,1.199,102,1.153,122,2.019,207,1.878,238,0.002,239,0.002,288,0.85,292,0.371,294,1.579,295,0.902,296,0.731,298,1.637,311,1.929,335,3.239,336,1.427,514,1.843,521,6.748,526,0.871,528,4.965,534,0.373,537,1.044,539,0.606,540,3.502,541,0.721,542,2.603,543,0.962,544,3.933,545,6.099,546,6.099,547,4.213,548,6.099,549,6.099,550,6.099,551,6.699,552,6.699,553,6.099,554,2.603,555,2.603,556,3.308,557,3.784,558,4.649,559,2.862,560,5.568,561,5.622,562,3.784,563,6.099,564,2.603,565,3.327,566,2.603,567,2.603,568,3.291,569,3.502,570,2.603,571,2.908,572,4.767,573,2.603,574,2.603,575,6.273,576,2.603,577,4.213,578,6.439,579,2.603,580,2.603,581,2.603,582,2.603,583,2.603,584,3.784,585,6.099,586,5.307,587,5.307,588,2.757,589,2.603,590,2.603,591,4.145,592,5.07,593,2.603,594,5.273,595,5.07,596,5.515,597,3.995,598,2.603,599,2.603,600,2.603,601,6.099,602,2.603,603,2.603,604,7.778,605,5.959,606,2.603,607,5.222,608,6.099,609,4.213,610,2.603,611,2.603,612,5.959,613,2.603,614,4.965,615,2.603,616,2.603,617,2.603,618,7.292,619,2.603,620,2.603,621,2.603,622,1.843,623,1.3,624,1.176,625,3.84,626,3.499,627,3.738,628,3.39,629,3.13,630,0.962,631,1.843,632,2.908,633,2.033,634,3.757,635,2.338,636,3.757,637,2.338,638,5.307,639,2.603,640,2.603,641,2.603,642,2.603,643,2.603,644,3.933,645,2.603,646,5.568,647,2.603,648,2.603,649,2.603,650,1.114,651,2.338,652,2.338,653,2.603,654,2.603,655,2.603,656,0.907,657,2.603,658,3.738,659,3.047,660,2.603,661,2.603,662,4.146,663,4.213,664,3.784,665,3.784,666,1.658,667,1.869,668,4.213,669,5.307,670,1.178,671,3.784,672,5.307,673,1.594,674,2.603,675,1.427,676,0.769,677,2.338,678,3.784,679,3.784,680,3.784,681,3.502,682,3.291,683,3.502,684,3.502,685,3.502,686,2.06,687,3.502,688,3.502,689,3.502,690,3.784,691,3.784,692,3.784,693,2.603,694,1.427,695,1.768,696,2.603,697,2.603,698,2.603,699,2.603,700,2.603,701,2.603,702,4.213,703,1.843,704,2.603,705,2.603,706,2.603,707,2.603,708,2.603,709,2.603,710,2.603,711,2.603,712,3.502,713,2.603,714,4.767,715,2.603,716,2.603,717,2.603,718,2.603,719,2.603,720,2.603,721,2.603,722,2.603,723,2.603,724,2.603,725,2.603,726,2.603,727,2.603,728,4.146,729,2.603,730,2.603,731,2.603,732,2.603,733,2.033,734,2.603,735,2.603,736,2.603,737,2.603,738,2.603,739,2.603]],["title/modules/AuthModule.html",[240,1.268,259,3.582]],["body/modules/AuthModule.html",[3,0.047,4,0.047,5,0.047,15,0.005,16,0.087,19,0.803,59,0.052,60,0.21,207,1.134,238,0.003,239,0.003,240,1.974,242,2.261,243,3.049,248,3.049,249,2.332,250,2.296,253,3.201,254,3.311,259,7.514,263,6.892,264,6.614,283,5.785,284,6.892,287,3.255,360,4.156,371,4.534,372,5.495,376,5.085,430,5.495,540,7.237,541,2.181,650,4.428,651,5.495,740,5.495,741,5.495,742,5.495,743,5.495,744,6.892,745,8.084,746,6.117,747,7.873,748,5.085,749,5.495,750,6.117,751,6.117]],["title/classes/BakeRepoDto.html",[60,0.174,752,3.582]],["body/classes/BakeRepoDto.html",[3,0.052,4,0.052,5,0.052,10,0.252,11,1.208,14,0.402,15,0.005,16,0.072,59,0.058,60,0.289,76,1.19,238,0.004,239,0.004,292,0.385,460,2.151,522,1.707,526,0.904,527,3.212,530,1.974,533,3.381,534,0.977,535,3.262,536,2.039,537,1.12,656,2.935,686,4.803,752,5.964,753,9.148,754,6.81,755,7.672,756,2.615,757,7.568,758,6.244,759,6.117,760,6.81,761,4.579,762,8.425,763,5.724,764,8.425,765,8.425,766,5.047,767,6.81,768,5.513,769,3.642]],["title/controllers/BlogSummaryController.html",[539,1.179,770,4.206]],["body/controllers/BlogSummaryController.html",[3,0.048,4,0.048,5,0.048,10,0.235,14,0.324,15,0.005,16,0.082,19,0.834,59,0.054,60,0.218,68,1.48,71,1.192,72,1.809,102,1.738,122,1.633,238,0.004,239,0.004,288,1.627,292,0.29,294,1.236,295,0.672,296,0.572,298,1.281,392,2.121,516,1.674,526,0.682,534,0.911,537,0.844,539,1.48,541,1.761,543,2.349,556,3.574,591,3.244,623,3.174,624,2.871,625,3.715,626,4.213,629,3.028,630,2.349,650,2.719,656,2.214,658,2.926,659,2.385,770,6.705,771,7.246,772,5.708,773,6.354,774,8.067,775,6.354,776,7.681,777,5.708,778,7.246,779,5.1,780,7.246,781,8.067,782,6.354,783,4.314,784,3.573,785,5.708,786,8.067,787,1.98,788,4.94,789,4.213,790,2.984,791,3.044,792,6.923,793,4.964,794,6.569,795,4.964,796,6.354,797,6.354,798,2.279,799,5.708,800,6.354,801,6.354,802,2.422]],["title/modules/BlogSummaryModule.html",[240,1.268,260,3.75]],["body/modules/BlogSummaryModule.html",[3,0.053,4,0.053,5,0.053,15,0.005,16,0.082,19,0.921,59,0.06,60,0.241,238,0.004,239,0.004,240,2.152,242,2.596,243,3.325,248,3.325,249,2.677,250,2.636,253,3.49,254,3.61,260,7.695,272,6.597,287,3.549,421,2.596,422,3.948,423,5.485,541,2.379,770,7.708,771,6.308,792,5.485,794,7.812,795,5.485,803,6.308,804,7.022,805,6.308,806,6.308,807,6.308,808,4.971,809,6.308]],["title/injectables/BlogSummaryService.html",[17,0.883,794,3.75]],["body/injectables/BlogSummaryService.html",[3,0.045,4,0.045,5,0.045,10,0.218,13,0.917,14,0.344,15,0.005,16,0.073,17,1.341,19,0.772,59,0.05,60,0.202,62,1.59,65,2.224,68,1.789,71,1.441,72,1.744,74,3.227,76,1.2,198,3.853,238,0.003,239,0.003,288,1.549,292,0.39,294,1.663,295,0.904,296,0.769,298,1.549,421,2.176,422,3.31,510,4.168,556,3.202,675,3.227,694,3.227,776,7.077,778,6.899,779,3.723,787,2.393,791,2.82,792,7.34,793,4.599,794,5.692,798,2.112,810,1.86,811,9.06,812,5.288,813,5.437,814,4.168,815,5.726,816,5.288,817,7.68,818,5.888,819,5.692,820,5.929,821,6.652,822,5.288,823,5.234,824,4,825,4.168,826,4.168,827,3.853,828,4.364,829,5.288,830,2.611,831,4.168,832,4.364,833,4.364,834,4.364,835,4.364,836,4.894,837,4,838,4.599,839,5.288,840,5.288,841,4.168,842,5.594,843,3.498,844,5.888,845,5.888,846,5.437,847,4.168,848,4.364,849,5.288,850,4.894,851,4.168,852,4.965,853,3.605,854,4.168,855,4.168]],["title/interfaces/ChatResponse.html",[0,3.007,856,4.206]],["body/interfaces/ChatResponse.html",[0,3.73,2,4.652,3,0.048,4,0.048,5,0.048,10,0.232,11,1.148,13,0.673,14,0.373,15,0.005,16,0.075,17,1.397,19,0.823,59,0.053,60,0.215,68,2.053,71,1.178,72,1.281,76,1.097,102,1.717,122,2.057,146,4.652,147,4.652,148,3.844,149,4.652,186,2.32,207,1.164,238,0.004,239,0.004,304,4.955,305,3.44,422,3.529,511,4.652,591,3.205,623,3.135,662,6.252,798,2.252,802,2.393,815,3.73,837,4.264,842,6.074,856,7.325,857,5.217,858,5.638,859,8.337,860,6.653,861,8.805,862,5.638,863,5.638,864,3.626,865,5.638,866,7.19,867,5.767,868,5.638,869,5.638,870,3.969,871,5.638,872,5.638,873,4.652,874,5.638,875,5.217,876,5.638,877,5.638,878,5.638,879,2.038,880,5.638,881,4.903,882,5.638,883,5.638,884,1.855,885,5.638,886,5.638,887,3.44,888,5.638,889,5.638,890,5.638]],["title/controllers/CodeExplanationController.html",[539,1.179,891,4.206]],["body/controllers/CodeExplanationController.html",[3,0.048,4,0.048,5,0.048,10,0.236,14,0.325,15,0.005,16,0.082,19,0.835,59,0.054,60,0.218,68,1.483,71,1.195,72,1.81,102,1.741,122,1.636,197,3.404,238,0.004,239,0.004,288,1.628,292,0.291,294,1.238,295,0.673,296,0.573,298,1.284,392,2.125,526,0.683,529,4.431,534,0.913,537,0.846,539,1.483,541,1.764,543,2.353,556,2.855,591,3.25,623,3.18,624,2.876,625,3.719,626,4.218,629,3.031,630,2.353,650,2.724,656,2.218,658,2.931,659,2.389,783,4.318,784,3.579,787,1.984,788,4.945,789,4.218,790,2.989,791,3.049,798,2.283,802,2.427,891,6.713,892,3.518,893,5.717,894,6.366,895,3.898,896,6.308,897,6.366,898,7.9,899,6.366,900,8.076,901,5.985,902,7.254,903,4.945,904,5.291,905,6.366,906,5.718,907,6.574,908,5.718,909,4.718,910,4.718,911,6.366,912,4.972,913,6.026,914,6.366]],["title/injectables/CodeExplanationService.html",[17,0.883,907,3.75]],["body/injectables/CodeExplanationService.html",[3,0.046,4,0.046,5,0.046,10,0.226,13,0.933,14,0.35,15,0.005,16,0.074,17,1.373,19,0.801,59,0.052,60,0.209,62,1.65,65,2.263,68,1.832,71,1.476,72,1.775,74,3.347,76,1.083,122,1.569,238,0.003,239,0.003,288,1.586,292,0.397,294,1.692,295,0.92,296,0.783,298,1.586,421,2.257,422,3.434,529,4.345,675,3.347,694,3.347,779,3.861,787,2.451,791,2.925,798,2.191,810,1.929,813,5.567,814,4.323,815,5.783,819,5.829,820,6.012,823,4.816,824,4.149,825,4.323,826,4.323,827,3.997,828,4.526,830,2.709,831,4.323,841,4.323,842,5.147,846,5.567,847,4.323,848,4.526,851,4.323,852,5.034,853,3.739,854,4.323,855,4.323,892,4.001,893,6.503,898,7.176,902,7.064,906,5.485,907,5.829,915,6.107,916,7.865,917,6.107,918,7.865,919,6.107,920,6.107,921,3.997,922,5.076,923,5.076,924,5.076]],["title/controllers/CodeRefactorSuggestionController.html",[539,1.179,925,4.206]],["body/controllers/CodeRefactorSuggestionController.html",[3,0.048,4,0.048,5,0.048,10,0.232,14,0.322,15,0.005,16,0.082,19,0.823,59,0.053,60,0.215,68,1.462,71,1.178,72,1.798,102,1.717,122,1.613,197,3.357,238,0.004,239,0.004,288,1.614,292,0.287,294,1.221,295,0.664,296,0.565,298,1.266,392,2.095,526,0.673,529,4.402,534,0.9,537,0.834,539,1.462,541,1.739,543,2.32,556,2.829,591,3.205,623,3.135,624,2.836,625,3.686,626,4.18,629,3.004,630,2.32,650,2.686,656,2.187,658,2.89,659,2.356,783,4.28,784,3.529,787,1.956,788,4.901,789,4.18,790,2.947,791,3.007,798,2.252,802,2.393,892,3.486,893,5.666,895,3.844,896,6.252,901,5.932,903,4.901,904,5.217,909,4.652,910,4.652,912,4.903,913,6.513,925,6.653,926,7.657,927,6.277,928,6.277,929,7.878,930,6.277,931,8.004,932,5.438,933,6.277,934,4.903,935,6.531,936,5.217,937,6.277,938,6.277]],["title/injectables/CodeRefactorSuggestionService.html",[17,0.883,935,3.75]],["body/injectables/CodeRefactorSuggestionService.html",[3,0.044,4,0.044,5,0.044,10,0.214,13,0.91,14,0.341,15,0.005,16,0.072,17,1.327,19,0.76,59,0.049,60,0.199,62,1.565,65,2.206,68,1.77,71,1.426,72,1.731,74,3.175,76,1.056,122,1.489,238,0.003,239,0.003,288,1.532,292,0.387,294,1.65,295,0.897,296,0.763,298,1.532,421,2.141,422,3.257,510,4.101,529,4.884,537,0.77,588,3.791,675,3.175,694,3.175,733,4.525,779,3.663,787,2.368,791,2.775,798,2.078,810,1.83,813,5.379,814,4.101,815,5.701,819,5.632,820,5.892,823,4.653,824,3.936,825,4.101,826,4.101,827,3.791,828,4.294,830,2.569,831,4.101,832,4.294,833,4.294,834,4.294,835,4.294,841,4.101,842,4.973,846,5.379,847,4.101,848,4.294,851,4.101,852,4.934,853,3.547,854,4.101,855,4.101,892,3.921,893,6.373,913,5.762,921,3.791,922,7.049,923,4.815,924,4.815,926,7.494,929,7.033,934,4.525,935,5.632,939,5.203,940,6.826,941,5.203,942,6.826,943,5.203,944,5.203,945,5.203,946,5.203,947,2.668,948,4.294,949,3.936,950,6.826,951,5.203,952,2.894,953,5.203]],["title/controllers/CodeTestSuggestionController.html",[539,1.179,954,4.206]],["body/controllers/CodeTestSuggestionController.html",[3,0.048,4,0.048,5,0.048,10,0.235,14,0.324,15,0.005,16,0.082,19,0.832,59,0.054,60,0.218,68,1.478,71,1.19,72,1.807,102,1.735,122,1.63,197,3.392,238,0.004,239,0.004,288,1.625,292,0.29,294,1.234,295,0.671,296,0.571,298,1.279,392,2.117,526,0.68,529,4.423,534,0.91,537,0.843,539,1.478,541,1.757,543,2.345,556,2.848,591,3.239,623,3.168,624,2.866,625,3.711,626,4.208,629,3.024,630,2.345,650,2.714,656,2.21,658,2.921,659,2.381,783,4.309,784,3.567,787,1.977,788,4.934,789,4.208,790,2.978,791,3.039,798,2.275,802,2.418,892,3.51,893,5.704,895,3.884,896,6.294,901,5.972,903,4.934,904,5.272,909,4.701,910,4.701,912,4.955,913,6.016,934,4.955,936,5.272,954,6.698,955,6.343,956,6.343,957,7.895,958,6.343,959,8.058,960,6.905,961,6.343,962,6.563,963,6.343,964,6.343]],["title/injectables/CodeTestSuggestionService.html",[17,0.883,962,3.75]],["body/injectables/CodeTestSuggestionService.html",[3,0.045,4,0.045,5,0.045,10,0.219,13,0.918,14,0.344,15,0.005,16,0.073,17,1.344,19,0.775,59,0.05,60,0.203,62,1.596,65,2.227,68,1.793,71,1.444,72,1.747,74,3.237,238,0.003,239,0.003,288,1.552,292,0.391,294,1.665,295,0.905,296,0.77,298,1.552,421,2.183,422,3.321,510,4.181,529,4.818,537,0.785,588,3.866,675,3.237,694,3.237,733,4.614,779,3.735,787,2.399,791,2.83,798,2.119,810,1.866,813,5.448,814,4.181,815,5.731,820,5.037,824,4.013,825,4.181,826,4.181,827,3.866,830,2.62,831,4.181,832,4.378,833,4.378,834,4.378,835,4.378,841,4.181,842,5.037,846,5.448,847,4.181,851,4.181,852,4.971,853,3.617,854,4.181,855,4.181,892,3.951,893,6.421,913,5.229,921,3.866,922,7.116,923,4.91,934,4.614,939,5.306,941,5.306,943,5.306,944,5.306,945,5.306,946,5.306,947,2.72,948,4.378,949,4.013,950,6.913,951,5.306,952,2.95,953,5.306,957,7.086,960,7.149,962,5.704,965,7.697,966,7.697,967,7.697,968,5.907]],["title/classes/CollaboratorsDto.html",[60,0.174,969,4.206]],["body/classes/CollaboratorsDto.html",[3,0.054,4,0.054,5,0.054,6,3.475,10,0.265,11,1.246,13,1.003,14,0.401,15,0.005,16,0.08,31,3.784,59,0.061,60,0.321,207,1.611,238,0.004,239,0.004,292,0.327,443,3.475,522,1.795,526,0.768,527,2.73,530,1.795,533,3.212,534,1.027,536,2.144,537,0.952,969,7.222,970,7.162,971,5.558,972,4.885,973,6.787,974,4.756,975,2.074,976,5.953,977,7.162,978,3.925,979,5.953,980,7.162]],["title/classes/CommitAuthorDto.html",[60,0.174,981,4.545]],["body/classes/CommitAuthorDto.html",[3,0.056,4,0.056,5,0.056,10,0.274,11,1.271,14,0.381,15,0.005,16,0.075,59,0.063,60,0.304,76,1.224,238,0.004,239,0.004,292,0.338,522,1.854,526,0.793,527,2.82,530,1.83,533,3.275,534,1.061,535,3.431,536,2.215,537,0.983,607,5.425,676,2.618,981,7.958,982,7.397,983,9.485,984,5.602,985,5.602,986,7.397,987,7.397,988,5.482]],["title/injectables/CommitAuthorsService.html",[17,0.883,989,3.75]],["body/injectables/CommitAuthorsService.html",[3,0.045,4,0.045,5,0.045,10,0.218,13,0.918,14,0.344,15,0.005,16,0.084,17,1.342,18,3.61,19,0.774,20,2.751,22,1.325,23,2.32,24,1.698,25,1.968,26,2.085,59,0.05,60,0.202,62,2.077,64,1.789,65,2,67,3.812,68,2.112,69,3.541,71,1.605,72,1.967,77,2.903,82,3.478,83,3.349,102,1.613,119,2.417,122,1.515,238,0.003,239,0.003,247,5.381,288,1.55,292,0.414,294,1.664,295,0.905,296,0.77,298,1.725,350,4.006,670,1.899,802,2.248,810,1.863,989,5.698,990,9.402,991,5.897,992,7.689,993,6.906,994,5.897,995,5.897,996,7.689,997,5.897,998,7.689,999,5.897,1000,6.906,1001,5.897,1002,1.996,1003,1.593,1004,3.729,1005,4.902,1006,5.897,1007,5.897,1008,4.006,1009,3.729,1010,4.607,1011,4.368,1012,2.946]],["title/classes/CommitsDto.html",[60,0.174,1013,4.545]],["body/classes/CommitsDto.html",[3,0.056,4,0.056,5,0.056,10,0.275,11,1.274,14,0.382,15,0.005,16,0.076,59,0.063,60,0.305,76,1.226,238,0.004,239,0.004,292,0.339,522,1.862,526,0.797,527,2.831,530,1.834,533,3.283,534,1.065,535,3.439,536,2.224,537,0.987,984,5.615,1013,7.977,1014,7.427,1015,8.534,1016,7.977,1017,8.881,1018,7.427,1019,7.427,1020,6.672]],["title/injectables/CommitsService.html",[17,0.883,1021,3.75]],["body/injectables/CommitsService.html",[3,0.041,4,0.041,5,0.041,10,0.201,13,1.062,14,0.353,15,0.005,16,0.082,17,1.271,18,3.417,19,0.712,20,2.662,22,1.219,23,2.135,24,1.563,25,1.811,26,1.918,59,0.046,60,0.186,62,1.966,64,1.647,65,1.893,67,3.689,68,2.131,69,3.351,71,1.646,72,2.021,77,3.016,82,3.719,83,3.576,102,1.485,119,2.53,122,1.394,238,0.003,239,0.003,247,5.272,288,1.467,292,0.418,294,1.707,295,0.928,296,0.789,298,1.769,352,3.552,670,2.27,802,2.069,810,1.714,1002,1.837,1003,1.466,1004,3.431,1008,4.944,1009,4.601,1010,4.239,1011,4.192,1012,2.711,1021,5.394,1022,5.427,1023,7.277,1024,7.277,1025,6.537,1026,5.427,1027,5.427,1028,7.277,1029,5.427,1030,7.277,1031,5.427,1032,7.277,1033,5.427,1034,6.537,1035,5.427,1036,4.511,1037,5.427,1038,5.427,1039,5.427,1040,5.427]],["title/modules/ContributionModule.html",[240,1.268,261,3.75]],["body/modules/ContributionModule.html",[3,0.051,4,0.051,5,0.051,15,0.005,16,0.088,19,0.874,24,1.917,59,0.057,60,0.228,64,2.021,196,2.901,238,0.004,239,0.004,240,2.083,242,2.462,243,3.217,248,3.217,249,2.539,250,2.5,253,3.378,254,3.494,261,7.627,275,5.913,287,3.435,302,3.067,331,4.524,333,3.067,334,3.561,335,3.754,336,3.65,337,5.644,388,4.672,389,4.078,390,3.957,541,2.302,756,1.822,1041,5.982,1042,6.659,1043,5.982,1044,5.982,1045,7.759,1046,6.659,1047,7.527,1048,5.535,1049,5.982,1050,6.659,1051,4.714]],["title/classes/ContributionPageMetaDto.html",[49,3.952,60,0.174]],["body/classes/ContributionPageMetaDto.html",[1,7.535,3,0.042,4,0.042,5,0.042,6,3.301,10,0.203,11,1.051,13,1.104,14,0.414,15,0.005,16,0.07,49,5.725,59,0.047,60,0.188,62,1.98,118,4.602,119,1.837,124,4.853,148,3.358,186,2.027,194,4.796,238,0.003,239,0.003,292,0.448,294,1.067,295,0.58,296,0.494,443,2.193,460,1.732,516,2.725,522,1.375,526,1.035,527,3.677,530,2.024,533,2.709,534,0.787,537,0.729,761,3.511,884,2.166,975,2.255,1002,2.481,1052,6.448,1053,5.485,1054,2.517,1055,6.583,1056,6.583,1057,3.375,1058,3.291,1059,6.583,1060,4.927,1061,6.882,1062,7.329,1063,5.402,1064,5.188,1065,5.725,1066,5.052,1067,5.485,1068,4.065,1069,5.485,1070,6.092,1071,6.583,1072,5.485,1073,4.559,1074,5.485,1075,3.468,1076,5.485,1077,4.284,1078,5.485,1079,4.065,1080,4.927,1081,2.933,1082,4.927,1083,5.485]],["title/classes/ContributionPageOptionsDto.html",[60,0.174,1084,3.952]],["body/classes/ContributionPageOptionsDto.html",[3,0.041,4,0.041,5,0.041,10,0.2,11,1.042,13,0.98,14,0.402,15,0.005,16,0.07,31,3.163,59,0.062,60,0.249,78,3.448,93,2.567,100,2.812,117,2.47,119,2.45,140,2.492,142,3.685,186,3.239,238,0.003,239,0.003,292,0.43,296,0.914,516,2.693,522,1.356,526,1.009,534,0.776,536,1.62,666,2.858,667,3.221,830,2.4,884,1.599,947,2.492,1002,1.832,1003,1.462,1054,2.494,1057,3.344,1058,3.053,1066,4.888,1084,5.673,1085,6.524,1086,3.042,1087,5.183,1088,3.98,1089,3.793,1090,7.597,1091,3.532,1092,7.364,1093,3.884,1094,4.384,1095,5.383,1096,5.411,1097,4.497,1098,2.762,1099,3.708,1100,2.703,1101,2.893,1102,3.125,1103,4.095,1104,2.762,1105,2.965,1106,3.042,1107,2.762,1108,3.042,1109,3.221,1110,2.826,1111,2.965,1112,2.965,1113,3.708,1114,3.042,1115,2.762,1116,3.042,1117,3.221,1118,3.215,1119,3.108,1120,4.195,1121,5.383,1122,6.037,1123,5.411]],["title/injectables/ContributionService.html",[17,0.883,1045,3.75]],["body/injectables/ContributionService.html",[3,0.036,4,0.036,5,0.036,10,0.174,13,1.102,14,0.332,15,0.005,16,0.085,17,1.151,18,2.206,19,0.616,20,2.952,22,1.056,23,1.849,24,1.353,25,1.568,26,1.661,59,0.04,60,0.161,62,1.781,64,2.311,65,1.981,68,2.237,71,0.882,72,1.928,76,0.948,77,2.784,78,3.642,80,6.437,82,3.356,85,2.164,88,4.726,90,3.192,91,1.737,92,3.906,93,1.661,94,2.971,95,3.906,97,3.906,99,3.808,100,2.553,102,1.803,104,3.67,118,3.443,119,1.653,121,1.353,122,1.694,124,4.037,156,4.037,159,5.15,160,4.667,196,2.047,207,0.871,238,0.003,239,0.003,288,1.329,292,0.377,294,1.606,295,0.873,296,0.743,298,1.536,335,2.123,336,2.575,337,3.192,388,2.642,389,2.877,390,2.792,810,1.484,1002,1.591,1003,1.269,1045,4.886,1048,3.906,1058,1.637,1081,2.513,1084,6.449,1089,4.541,1090,3.906,1092,4.221,1103,2.347,1104,2.399,1124,4.699,1125,4.479,1126,5.921,1127,7.615,1128,4.699,1129,6.84,1130,6.84,1131,4.699,1132,6.592,1133,4.479,1134,4.699,1135,3.192,1136,4.699,1137,4.699,1138,4.699,1139,4.699,1140,3.075,1141,3.192,1142,3.906,1143,3.67,1144,4.221,1145,3.67,1146,4.221,1147,4.221,1148,4.699,1149,4.221,1150,4.221,1151,4.699,1152,4.221,1153,4.221,1154,4.699,1155,4.221,1156,3.67,1157,4.699,1158,3.906,1159,3.906,1160,3.192,1161,2.877,1162,2.792,1163,4.221,1164,6.592,1165,4.699,1166,4.699,1167,4.699,1168,4.699,1169,4.221,1170,4.699,1171,4.699,1172,2.575,1173,4.699,1174,3.192,1175,3.67,1176,4.699,1177,4.699,1178,4.699,1179,4.667]],["title/classes/ContributionsByProjectDto.html",[54,3.75,60,0.174]],["body/classes/ContributionsByProjectDto.html",[3,0.053,4,0.053,5,0.053,6,3.425,10,0.259,11,1.228,13,0.993,14,0.398,15,0.005,16,0.079,54,6.348,59,0.06,60,0.317,78,3.894,100,3.317,117,2.237,142,4.235,238,0.004,239,0.004,292,0.319,296,0.771,516,2.439,522,1.754,526,0.75,534,1.003,536,2.095,537,0.93,975,1.67,978,3.834,1052,6.69,1091,2.626,1109,3.103,1113,3.572,1115,3.572,1117,3.799,1119,3.665,1180,6.995,1181,6.995,1182,4.04,1183,5.605,1184,5.464,1185,5.464]],["title/classes/ContributionsPageDto.html",[52,3.952,60,0.174]],["body/classes/ContributionsPageDto.html",[3,0.049,4,0.049,5,0.049,6,3.743,10,0.238,11,1.165,14,0.403,15,0.005,16,0.08,52,6.344,59,0.055,60,0.305,62,1.735,124,4.954,238,0.004,239,0.004,292,0.407,294,1.249,295,0.679,296,0.578,443,3.248,516,2.598,522,1.61,526,0.871,533,3.292,534,0.921,536,1.923,887,5.29,972,3.611,974,4.355,978,3.52,1002,2.174,1052,7.311,1079,7.422,1081,3.434,1186,6.422,1187,7.295,1188,6.558,1189,8.121,1190,5.769,1191,5.769,1192,5.769,1193,6.422,1194,5.769,1195,5.769,1196,8,1197,4.203,1198,5.769,1199,5.769]],["title/classes/ContributionsTimeframeDto.html",[39,3.75,60,0.174]],["body/classes/ContributionsTimeframeDto.html",[3,0.049,4,0.049,5,0.049,6,3.568,10,0.239,11,1.167,13,0.957,14,0.397,15,0.005,16,0.08,34,7.428,37,3.83,38,4.562,39,6.033,59,0.055,60,0.306,78,3.802,100,3.152,109,6.969,117,2.385,137,6.969,142,4.15,238,0.004,239,0.004,292,0.372,296,0.843,516,2.35,522,1.616,526,0.873,534,0.924,536,1.93,537,0.857,975,1.538,978,3.532,1052,6.969,1091,3.055,1093,3.447,1094,4.353,1109,2.859,1113,3.291,1115,3.291,1117,3.957,1118,3.83,1119,3.817,1120,3.723,1182,3.723,1183,5.327,1184,5.035,1185,5.035,1200,6.445,1201,5.789,1202,6.445,1203,6.445,1204,5.789]],["title/classes/Contributor.html",[31,2.204,60,0.174]],["body/classes/Contributor.html",[3,0.05,4,0.05,5,0.05,6,3.609,8,4.324,10,0.245,11,1.186,13,0.968,14,0.4,15,0.005,16,0.077,31,4.119,59,0.07,60,0.324,76,1.212,88,4.971,207,1.674,238,0.004,239,0.004,292,0.378,295,0.875,443,2.643,460,2.088,522,1.657,530,1.864,533,3.496,534,0.948,535,3.203,536,1.979,537,1.199,670,2.161,761,3.962,768,5.412,971,3.928,972,3.717,974,4.414,978,3.623,1205,8.107,1206,5.938,1207,6.611,1208,6.611,1209,4.899,1210,4.679,1211,4.18,1212,5.164,1213,5.938,1214,5.495]],["title/controllers/ContributorController.html",[539,1.179,1215,4.206]],["body/controllers/ContributorController.html",[3,0.049,4,0.049,5,0.049,10,0.237,14,0.326,15,0.005,16,0.085,19,0.838,25,2.132,26,2.258,31,2.782,59,0.054,60,0.219,71,1.199,72,1.813,77,2.592,119,2.029,196,4.198,197,4.328,238,0.004,239,0.004,288,1.632,292,0.292,294,1.243,295,0.676,296,0.575,298,1.288,386,3.592,392,2.702,516,1.683,526,0.685,534,0.916,539,1.488,541,1.77,543,2.361,556,2.861,628,3.29,629,3.038,630,2.361,656,2.225,659,2.398,798,2.292,971,5.279,1003,1.726,1215,6.728,1216,6.388,1217,9.638,1218,6.388,1219,7.297,1220,4.99,1221,7.27,1222,5.999,1223,5.297,1224,4.675,1225,6.388,1226,6.585,1227,6.388,1228,3.346,1229,2.942,1230,3,1231,2.942,1232,3,1233,5.815,1234,4.735,1235,5.499,1236,5.31,1237,6.388,1238,5.738,1239,4.99,1240,5.738,1241,6.388]],["title/controllers/ContributorInsightsController.html",[539,1.179,1242,4.206]],["body/controllers/ContributorInsightsController.html",[3,0.036,4,0.036,5,0.036,10,0.174,14,0.38,15,0.005,16,0.079,19,0.617,25,1.57,26,1.663,31,2.049,59,0.04,60,0.161,71,1.55,72,2.026,77,3.026,78,2.596,100,3.492,102,1.805,119,2.369,142,3.792,143,2.299,196,3.319,238,0.003,239,0.003,288,1.331,292,0.377,294,1.607,295,0.874,296,0.743,298,1.666,386,2.645,392,2.202,516,1.239,526,0.886,534,0.675,539,1.096,541,1.304,543,1.739,556,3.341,628,3.536,629,3.265,630,1.739,656,1.639,659,3.101,756,2.586,798,1.688,921,4.318,932,6.127,971,5.616,973,6.453,1226,7.119,1228,3.596,1229,2.167,1230,2.209,1231,2.167,1232,2.209,1233,4.987,1234,3.487,1235,4.483,1236,3.911,1238,4.226,1240,7.42,1242,5.485,1243,8.699,1244,4.705,1245,4.705,1246,8.699,1247,8.699,1248,8.699,1249,8.699,1250,4.705,1251,7.816,1252,4.705,1253,7.383,1254,6.684,1255,6.598,1256,4.075,1257,8.261,1258,4.705,1259,4.705,1260,4.705,1261,4.705,1262,4.705,1263,4.705,1264,6.598,1265,4.705,1266,4.705,1267,4.705,1268,4.705,1269,4.226,1270,4.705,1271,4.705,1272,4.705,1273,4.705,1274,4.705,1275,4.705,1276,4.705,1277,4.705,1278,4.705]],["title/modules/ContributorModule.html",[240,1.268,262,3.75]],["body/modules/ContributorModule.html",[3,0.054,4,0.054,5,0.054,15,0.005,16,0.086,19,0.936,24,2.054,31,3.107,59,0.061,60,0.245,64,2.164,196,3.775,238,0.004,239,0.004,240,2.173,242,2.637,243,3.356,248,3.356,249,2.719,250,2.677,262,7.499,274,6.874,287,3.583,302,3.285,386,4.011,387,5.929,388,4.011,389,4.368,390,4.239,541,2.402,1215,7.761,1242,7.761,1279,7.134,1280,7.134,1281,7.134,1282,7.134,1283,7.134,1284,6.408]],["title/classes/ContributorPullRequestsDto.html",[60,0.174,1285,3.952]],["body/classes/ContributorPullRequestsDto.html",[3,0.042,4,0.042,5,0.042,10,0.205,11,1.059,13,0.988,14,0.404,15,0.005,16,0.071,59,0.063,60,0.253,78,3.482,93,2.609,100,2.858,117,2.479,119,2.463,140,2.553,142,3.721,186,3.271,238,0.003,239,0.003,292,0.433,296,0.918,516,2.647,522,1.39,526,1.016,534,0.795,536,1.66,830,2.459,884,1.638,947,2.553,1002,1.877,1003,1.498,1054,2.535,1057,3.399,1058,2.572,1066,4.927,1088,4.045,1089,3.855,1091,3.557,1093,3.947,1094,4.438,1098,2.83,1099,3.769,1100,2.769,1101,2.964,1102,3.202,1103,4.603,1104,2.83,1105,3.038,1106,3.117,1107,2.83,1108,3.117,1109,3.274,1110,2.895,1111,3.038,1112,3.038,1113,3.769,1114,3.117,1115,2.83,1116,3.117,1117,3.274,1118,3.294,1119,3.159,1120,4.264,1254,5.471,1285,5.766,1286,6.63,1287,4.98,1288,8.299,1289,7.659,1290,7.454,1291,5.544,1292,5.544,1293,5.544]],["title/modules/CouponModule.html",[240,1.268,263,3.582]],["body/modules/CouponModule.html",[3,0.055,4,0.055,5,0.055,15,0.005,16,0.083,19,0.953,24,2.091,59,0.062,60,0.249,64,2.204,238,0.004,239,0.004,240,2.197,242,2.685,243,3.393,248,3.393,249,2.769,250,2.726,253,3.562,254,3.685,263,7.276,287,3.002,302,3.345,434,5.383,644,7.844,1294,6.524,1295,6.524,1296,6.524,1297,7.263,1298,6.524,1299,7.263,1300,7.263]],["title/injectables/CouponService.html",[17,0.883,644,3.75]],["body/injectables/CouponService.html",[3,0.047,4,0.047,5,0.047,10,0.23,14,0.353,15,0.005,16,0.079,17,1.39,18,2.922,19,0.816,20,2.807,22,1.398,23,2.448,24,1.792,59,0.053,60,0.213,62,2.15,64,1.888,65,1.619,67,3.89,68,2.045,69,3.666,71,1.647,72,1.996,76,1.218,82,2.53,83,2.71,98,2.41,102,1.702,122,1.599,234,3.41,238,0.003,239,0.003,288,1.605,292,0.422,294,1.707,295,0.928,296,0.79,298,1.77,434,4.612,528,4.612,529,4.621,644,5.9,787,2.481,802,2.372,810,1.966,1012,3.108,1298,5.59,1301,6.223,1302,7.96,1303,7.96,1304,6.223,1305,6.223,1306,7.96,1307,6.223,1308,7.96,1309,6.223,1310,7.96,1311,6.223,1312,6.223,1313,6.223,1314,6.223,1315,6.223,1316,5.59,1317,1.879,1318,6.223,1319,5.59,1320,6.223]],["title/classes/CreateBlogSummaryDto.html",[60,0.174,776,3.952]],["body/classes/CreateBlogSummaryDto.html",[3,0.041,4,0.041,5,0.041,10,0.199,11,1.039,13,0.938,14,0.42,15,0.005,16,0.062,59,0.046,60,0.248,76,1.279,117,1.75,140,2.48,238,0.003,239,0.003,292,0.429,522,1.35,526,1.008,527,3.582,530,2.016,533,3.549,534,0.773,535,3.534,536,1.613,537,1.249,556,3.451,776,5.656,780,6.504,792,7.874,821,6.46,823,5.588,843,4.303,867,5.972,975,2.088,1182,3.111,1321,9.602,1322,4.838,1323,8.18,1324,8.18,1325,7.347,1326,5.367,1327,4.838,1328,4.838,1329,6.062,1330,3.992,1331,5.367,1332,5.367,1333,5.367,1334,5.367,1335,5.367,1336,5.367,1337,5.367,1338,5.367,1339,5.367,1340,4.838,1341,3.697,1342,3.813,1343,4.838,1344,3.813,1345,4.838,1346,4.477,1347,6.019,1348,6.019,1349,6.019,1350,6.799,1351,4.838,1352,5.172,1353,3.201,1354,3.201,1355,3.813,1356,3.813,1357,3.813,1358,3.813,1359,3.813,1360,4.477,1361,3.992]],["title/classes/CreateEndorsementDto.html",[60,0.174,1362,3.75]],["body/classes/CreateEndorsementDto.html",[3,0.042,4,0.07,5,0.042,10,0.202,11,1.048,13,1.012,14,0.419,15,0.005,16,0.062,20,2.217,59,0.047,60,0.251,76,1.175,117,1.766,192,3.721,207,1.631,238,0.003,239,0.003,292,0.431,296,0.658,508,4.782,522,1.369,526,1.012,527,3.495,530,2.069,533,3.488,534,0.783,535,3.406,536,1.635,537,1.254,670,2.094,676,3.088,686,4.301,758,5.416,975,2.252,979,4.538,1109,2.422,1117,3.241,1119,3.127,1352,5.561,1362,5.416,1363,9.635,1364,4.904,1365,7.398,1366,7.398,1367,7.398,1368,7.398,1369,7.826,1370,6.563,1371,5.46,1372,5.46,1373,5.708,1374,5.46,1375,5.46,1376,5.46,1377,5.46,1378,6.073,1379,4.538,1380,5.46,1381,5.46,1382,5.46,1383,5.46,1384,5.46,1385,5.46,1386,4.904,1387,5.46,1388,4.265]],["title/classes/CreateInsightDto.html",[60,0.174,1389,3.952]],["body/classes/CreateInsightDto.html",[3,0.047,4,0.047,5,0.047,10,0.231,11,1.143,14,0.415,15,0.005,16,0.079,20,2.418,59,0.053,60,0.301,76,1.153,202,3.571,238,0.004,239,0.004,292,0.401,295,1.012,421,2.304,443,3.187,460,1.969,522,1.563,526,0.942,527,3.348,530,2.021,533,3.422,534,0.894,535,3.086,536,1.867,537,1.167,596,5.414,670,1.384,761,4.435,766,4.62,768,5.215,769,3.333,972,4.481,974,4.527,976,5.181,978,3.416,1058,3.225,1210,5.641,1211,5.554,1212,6.225,1389,6.225,1390,8.315,1391,5.599,1392,4.835,1393,6.234,1394,5.599,1395,6.234,1396,6.647,1397,6.234,1398,4.235,1399,5.181,1400,4.62,1401,6.234,1402,3.817]],["title/classes/CreateInsightMemberDto.html",[60,0.174,1403,4.206]],["body/classes/CreateInsightMemberDto.html",[3,0.056,4,0.056,5,0.056,10,0.271,11,1.261,14,0.379,15,0.005,16,0.075,59,0.062,60,0.302,76,1.219,238,0.004,239,0.004,292,0.334,522,1.832,526,0.784,527,2.785,530,1.816,533,3.251,534,1.048,536,2.188,537,0.971,607,6.135,988,5.416,1390,7.9,1392,5.114,1400,6.518,1403,7.31,1404,6.563,1405,6.87,1406,7.9,1407,6.563,1408,7.307,1409,7.9]],["title/classes/CreateIssueSummaryDto.html",[60,0.174,1410,3.952]],["body/classes/CreateIssueSummaryDto.html",[3,0.039,4,0.039,5,0.039,10,0.192,11,1.012,13,0.924,14,0.421,15,0.005,16,0.06,59,0.044,60,0.242,76,1.289,117,1.705,140,2.388,238,0.003,239,0.003,292,0.434,522,1.3,526,1.02,527,3.625,530,1.999,533,3.577,534,0.744,535,3.599,536,1.553,537,1.304,556,3.42,808,7.233,821,6.376,823,5.516,843,4.193,867,5.895,975,2.055,1182,2.995,1322,4.657,1325,7.206,1326,5.945,1327,4.657,1328,4.657,1329,5.945,1330,3.843,1331,5.23,1332,5.23,1333,5.23,1334,5.23,1335,5.23,1336,5.23,1337,5.23,1338,5.23,1339,5.23,1340,4.657,1341,3.603,1342,3.67,1343,4.657,1344,3.67,1345,4.657,1346,4.31,1347,5.866,1348,5.866,1349,5.866,1350,6.668,1351,4.657,1352,5.072,1353,3.081,1354,3.081,1355,3.67,1356,3.67,1357,3.67,1358,3.67,1359,3.67,1360,4.31,1361,3.843,1410,5.512,1411,9.676,1412,8.022,1413,8.022,1414,8.022,1415,4.618,1416,5.185]],["title/classes/CreateLogDto.html",[60,0.174,1417,4.206]],["body/classes/CreateLogDto.html",[3,0.053,4,0.053,5,0.053,10,0.261,11,1.233,14,0.373,15,0.005,16,0.06,59,0.06,60,0.295,76,1.256,238,0.004,239,0.004,292,0.424,296,0.908,492,6.879,508,6.074,516,2.736,522,1.764,526,0.995,535,3.743,536,2.107,864,5.361,1119,4.136,1417,7.145,1418,9.667,1419,7.036,1420,9.281,1421,7.036,1422,7.036,1423,7.036]],["title/classes/CreateUserCollaborationDto.html",[60,0.174,1424,4.206]],["body/classes/CreateUserCollaborationDto.html",[3,0.052,4,0.052,5,0.052,10,0.251,11,1.206,14,0.402,15,0.005,16,0.072,59,0.058,60,0.288,76,1.275,207,1.693,238,0.004,239,0.004,292,0.384,392,2.806,453,5.246,522,1.701,526,0.902,527,3.204,530,1.971,533,3.376,534,0.973,535,3.536,536,2.032,537,1.117,820,4.44,864,5.667,1373,6.566,1424,6.986,1425,8.203,1426,6.094,1427,7.074,1428,8.405,1429,8.405,1430,7.55,1431,6.785,1432,6.785,1433,6.785,1434,6.785,1435,5.639,1436,3.718,1437,4.803,1438,6.785,1439,6.094]],["title/classes/CreateUserHighlightDto.html",[60,0.174,1440,3.952]],["body/classes/CreateUserHighlightDto.html",[3,0.038,4,0.038,5,0.038,10,0.186,11,0.99,14,0.422,15,0.005,16,0.059,59,0.043,60,0.237,76,1.307,117,1.213,143,2.404,198,5.559,200,4.88,207,1.748,238,0.003,239,0.003,292,0.42,296,0.764,405,5.083,421,3.14,443,3.154,522,1.258,526,0.987,527,3.238,530,2.073,533,3.292,534,0.72,535,3.563,536,1.503,537,1.223,676,3.059,686,4.355,769,2.684,808,4.885,820,3.285,843,5.292,870,3.173,952,3.447,972,3.88,974,4.154,1091,1.884,1109,3.061,1117,3.498,1119,3.375,1182,2.899,1197,3.285,1425,8.467,1435,4.172,1439,4.508,1440,5.391,1441,5.019,1442,6.161,1443,7.887,1444,5.019,1445,5.019,1446,6.199,1447,4.364,1448,5.391,1449,3.061,1450,5.019,1451,5.019,1452,3.986,1453,5.736,1454,6.199,1455,6.199,1456,4.508,1457,5.019,1458,5.019,1459,5.019,1460,7.085,1461,5.019,1462,6.901,1463,6.901,1464,5.019,1465,6.199,1466,5.019,1467,5.019,1468,6.901,1469,4.508,1470,2.982,1471,4.508,1472,2.226,1473,5.019,1474,4.508]],["title/classes/CreateUserListDto.html",[60,0.174,1209,3.75]],["body/classes/CreateUserListDto.html",[3,0.047,4,0.047,5,0.047,6,3.688,8,4.568,10,0.228,11,1.135,13,0.849,14,0.412,15,0.005,16,0.074,31,4.017,59,0.067,60,0.316,76,1.215,88,4.463,207,1.71,238,0.003,239,0.003,292,0.399,295,1.009,443,3.166,460,1.949,522,1.547,526,0.938,527,3.332,530,2.015,533,3.409,534,0.885,535,3.065,536,1.847,537,1.162,670,1.94,761,4.418,766,4.573,768,5.181,860,5.128,971,5.194,972,4.451,974,4.509,978,3.381,1205,8.283,1206,5.542,1209,5.867,1210,5.604,1211,5.527,1212,6.184,1213,5.542,1214,5.128,1475,6.17,1476,6.17,1477,6.17,1478,6.17,1479,6.17]],["title/injectables/CustomLogger.html",[17,0.883,1480,3.952]],["body/injectables/CustomLogger.html",[3,0.036,4,0.036,5,0.036,10,0.177,11,0.958,14,0.374,15,0.005,16,0.071,17,1.166,19,0.628,59,0.041,60,0.164,62,1.293,65,2.001,71,1.643,72,2.073,74,4.561,76,1.327,117,1.156,238,0.003,239,0.003,288,1.347,292,0.425,294,1.764,295,0.959,296,0.816,298,1.765,304,5.232,305,2.623,492,6.488,508,6.881,516,2.026,787,2.728,810,1.512,852,5.099,864,5.867,1054,2.293,1135,6.16,1480,6.008,1481,9.492,1482,4.786,1483,7.691,1484,9.305,1485,6.908,1486,6.918,1487,7.691,1488,6.908,1489,6.678,1490,8.323,1491,6.72,1492,6.678,1493,6.678,1494,4.786,1495,6.678,1496,8.323,1497,4.786,1498,6.678,1499,4.786,1500,6.678,1501,4.786,1502,6.678,1503,4.786,1504,4.786,1505,4.786,1506,4.299,1507,4.786,1508,4.786,1509,4.786,1510,4.786,1511,8.754,1512,4.786,1513,4.786,1514,6.678]],["title/modules/CustomerModule.html",[240,1.268,264,3.438]],["body/modules/CustomerModule.html",[3,0.055,4,0.055,5,0.055,15,0.005,16,0.083,19,0.953,24,2.091,59,0.062,60,0.249,64,2.204,238,0.004,239,0.004,240,2.197,242,2.685,243,3.393,248,3.393,249,2.769,250,2.726,253,3.562,254,3.685,264,6.983,287,3.002,302,3.345,374,5.383,636,7.492,1515,6.524,1516,6.524,1517,6.524,1518,7.263,1519,6.524,1520,7.263,1521,7.263]],["title/injectables/CustomerService.html",[17,0.883,636,3.582]],["body/injectables/CustomerService.html",[3,0.046,4,0.046,5,0.046,10,0.223,13,1.04,14,0.368,15,0.005,16,0.078,17,1.361,19,0.79,20,2.773,22,1.354,23,2.371,24,1.735,59,0.051,60,0.207,62,2.106,64,1.828,65,1.568,67,3.844,68,1.816,71,1.715,72,2.063,76,1.207,82,3.17,83,3.396,238,0.003,239,0.003,288,1.572,292,0.432,294,1.778,295,0.967,296,0.822,298,1.843,374,4.466,565,2.797,636,5.519,670,2.101,787,2.694,810,1.903,1012,3.894,1519,5.412,1522,6.025,1523,7.003,1524,7.797,1525,7.797,1526,6.025,1527,6.025,1528,7.797,1529,7.797,1530,8.21,1531,6.025,1532,6.025,1533,7.797,1534,6.025,1535,7.797,1536,6.025,1537,6.025,1538,6.025,1539,6.025,1540,6.025,1541,6.025]],["title/classes/DatabaseLoggerMiddleware.html",[60,0.174,364,4.206]],["body/classes/DatabaseLoggerMiddleware.html",[3,0.065,4,0.035,5,0.035,10,0.168,11,0.924,13,0.803,14,0.377,15,0.005,16,0.064,19,0.597,22,1.022,59,0.055,60,0.156,62,1.229,65,2.321,71,1.789,76,1.295,102,1.245,117,1.1,238,0.003,239,0.003,288,1.3,292,0.435,294,2.011,295,1.008,296,0.843,298,1.85,299,6.082,317,3.782,318,3.782,319,3.782,364,6.22,462,5.837,492,5.547,516,1.971,522,1.141,675,2.494,694,2.494,787,2.537,852,3.532,864,4.962,1135,6.367,1228,3.874,1486,7.415,1488,6.722,1542,9.664,1543,4.087,1544,5.357,1545,7.484,1546,6.445,1547,6.445,1548,6.445,1549,6.445,1550,6.445,1551,6.445,1552,6.445,1553,6.445,1554,6.445,1555,10.447,1556,4.551,1557,6.445,1558,4.551,1559,6.445,1560,4.551,1561,6.445,1562,4.551,1563,6.445,1564,4.551,1565,1.735,1566,6.445,1567,4.551,1568,6.445,1569,4.551,1570,4.551,1571,4.551,1572,4.551,1573,4.551,1574,8.14,1575,4.551,1576,7.484,1577,4.551,1578,4.087,1579,4.551,1580,7.484,1581,4.551,1582,4.551,1583,4.551]],["title/entities/DbBakedRepo.html",[347,3.438,1317,1.083]],["body/entities/DbBakedRepo.html",[3,0.044,4,0.044,5,0.044,10,0.217,11,1.097,13,0.969,14,0.404,15,0.005,16,0.077,20,2.919,22,1.314,59,0.05,60,0.201,76,0.952,121,1.684,192,3.85,238,0.003,239,0.003,292,0.413,295,0.619,347,5.196,352,5.914,526,0.969,530,1.987,534,0.839,537,1.132,670,2.006,676,3.039,686,3.74,757,6.869,758,5.668,879,1.899,975,1.825,1054,2.009,1087,3.698,1172,5.139,1317,1.637,1341,3.905,1584,9.378,1585,4.335,1586,8.521,1587,2.885,1588,5.849,1589,4.544,1590,4.544,1591,5.414,1592,5.254,1593,4.335,1594,7.648,1595,5.849,1596,6.357,1597,3.556,1598,4.09,1599,5.668,1600,5.849,1601,7.648,1602,5.254,1603,3.664,1604,2.785,1605,5.668,1606,2.86,1607,3.059,1608,1.98,1609,1.98,1610,3.522,1611,5.254,1612,5.849,1613,3.379,1614,5.196,1615,5.849]],["title/entities/DbCommitAuthors.html",[350,3.438,1317,1.083]],["body/entities/DbCommitAuthors.html",[3,0.048,4,0.048,5,0.048,10,0.234,11,1.153,13,0.862,14,0.395,15,0.005,16,0.079,22,1.42,59,0.054,60,0.217,76,1.001,91,2.972,121,1.82,238,0.004,239,0.004,292,0.404,295,0.668,350,5.462,352,6.09,460,2.54,526,0.948,530,1.661,534,0.907,537,0.84,670,2.065,676,3.013,879,2.052,975,1.509,984,5.083,985,5.083,1054,2.171,1087,3.997,1172,5.265,1317,1.721,1341,4.105,1587,2.14,1589,4.777,1590,4.777,1591,5.691,1593,4.685,1597,3.163,1598,4.299,1599,4.685,1603,3.851,1604,2.927,1605,5.959,1606,3.091,1607,2.722,1608,2.14,1609,2.14,1610,4.071,1611,5.678,1613,3.651,1614,4.294,1616,6.321,1617,8.841,1618,5.254,1619,6.321,1620,8.04,1621,6.321,1622,6.321,1623,6.321]],["title/entities/DbCommits.html",[352,3.311,1317,1.083]],["body/entities/DbCommits.html",[3,0.037,4,0.037,5,0.037,10,0.182,11,0.974,13,0.98,14,0.414,15,0.005,16,0.075,22,1.102,59,0.042,60,0.168,76,1.047,121,1.412,143,2.366,238,0.003,239,0.003,292,0.428,295,0.824,347,5.713,349,2.398,350,5.713,352,4.444,526,1.005,530,2.027,534,0.703,537,1.174,670,2.119,676,3.08,756,1.858,879,1.592,975,1.86,984,6.037,985,4.294,1015,6.998,1016,6.1,1020,6.1,1054,1.684,1087,3.1,1172,2.687,1317,1.454,1341,4.294,1587,2.99,1589,4.997,1590,4.997,1591,5.953,1596,6.476,1597,3.595,1598,3.631,1599,3.634,1603,3.253,1604,3.216,1606,2.398,1607,3.093,1608,1.66,1609,1.66,1610,3.588,1613,2.832,1614,3.331,1624,4.903,1625,8.831,1626,8.831,1627,8.831,1628,8.831,1629,7.791,1630,3.547,1631,4.903,1632,4.392,1633,4.903,1634,6.791,1635,3.321,1636,4.392,1637,4.903,1638,4.903,1639,4.903,1640,6.791,1641,4.903,1642,6.791,1643,4.903,1644,4.903,1645,4.903,1646,3.978,1647,3.978,1648,4.903,1649,4.903,1650,4.903]],["title/entities/DbContribution.html",[337,3.438,1317,1.083]],["body/entities/DbContribution.html",[3,0.03,4,0.03,5,0.03,10,0.145,11,0.831,13,0.966,14,0.413,15,0.005,16,0.065,20,1.758,22,0.882,31,3.53,59,0.033,60,0.135,76,0.946,91,2.809,93,2.686,98,2.943,117,2.175,121,1.131,143,3.136,192,3.662,194,2.569,196,2.523,197,3.098,207,1.074,238,0.003,239,0.003,292,0.427,295,0.804,296,0.763,333,3.499,334,2.1,337,3.936,460,2.4,526,1.003,530,2.049,534,0.563,537,1.196,597,2.775,666,2.709,667,3.053,670,1.799,676,3.077,686,3.963,756,2.217,758,4.293,879,1.275,884,2.246,949,3.936,975,1.643,1054,1.348,1121,5.102,1122,5.722,1256,3.434,1317,1.24,1341,3.88,1449,3.371,1472,2.569,1565,3.432,1587,2.871,1589,4.516,1590,4.516,1591,5.379,1597,2.99,1598,3.098,1599,2.91,1603,2.775,1604,3.088,1606,1.92,1607,2.969,1608,1.329,1609,1.329,1610,3.17,1614,2.667,1630,2.051,1632,3.026,1635,2.833,1636,3.969,1646,2.958,1647,2.958,1651,3.926,1652,3.366,1653,5.203,1654,3.926,1655,3.926,1656,5.203,1657,5.203,1658,5.203,1659,3.926,1660,2.523,1661,3.91,1662,3.566,1663,7.77,1664,2.617,1665,4.273,1666,1.808,1667,3.786,1668,3.852,1669,3.926,1670,2.333,1671,3.926,1672,5.793,1673,3.926,1674,4.293,1675,4.525,1676,2.779,1677,3.926,1678,3.926,1679,3.926,1680,3.926,1681,2.617,1682,3.026,1683,3.175,1684,2.482,1685,3.926,1686,5.793,1687,3.926,1688,3.926,1689,2.894,1690,2.479,1691,3.175,1692,2.998,1693,2.208,1694,3.264,1695,3.926,1696,3.527]],["title/entities/DbContributionStatTimeframe.html",[42,3.582,1317,1.083]],["body/entities/DbContributionStatTimeframe.html",[3,0.034,4,0.034,5,0.034,6,3.727,10,0.165,11,0.911,13,1.103,14,0.422,15,0.005,16,0.054,22,1.001,42,4.494,59,0.038,60,0.153,76,1.198,88,4.912,91,3.692,93,3.401,121,1.283,176,5.778,177,5.778,207,1.784,212,2.817,238,0.003,239,0.003,292,0.416,295,0.471,460,3.313,526,0.978,530,2.063,537,1.212,879,1.446,895,4.937,947,2.924,948,4.705,975,2.034,1172,4.67,1174,5.025,1317,1.359,1415,5.577,1447,5.098,1565,3.073,1587,3.086,1604,3.394,1607,3.155,1608,1.508,1609,1.508,1635,4.167,1636,5.024,1661,3.224,1682,4.211,1697,8.372,1698,4.002,1699,5.778,1700,5.778,1701,6.271,1702,5.769,1703,4.455,1704,4.002,1705,4.155,1706,5.276,1707,4.455,1708,4.002,1709,4.959,1710,4.455,1711,7.242,1712,7.242,1713,7.242,1714,5.277,1715,4.002,1716,4.002]],["title/entities/DbContributionsProjects.html",[45,3.75,1317,1.083]],["body/entities/DbContributionsProjects.html",[3,0.042,4,0.042,5,0.042,6,3.687,10,0.206,11,1.06,13,1.017,14,0.418,15,0.005,16,0.063,22,1.247,45,5.477,59,0.047,60,0.19,76,1.251,91,3.633,93,3.13,121,1.599,187,6.903,190,6.903,192,3.753,194,6.033,212,3.511,238,0.003,239,0.003,292,0.404,295,0.975,421,2.731,460,3.285,508,4.836,526,0.95,530,2.03,537,1.177,670,1.64,756,2.594,879,1.802,975,1.764,1317,1.582,1437,5.231,1470,4.391,1587,2.997,1604,3.357,1607,3.121,1608,1.88,1609,1.88,1635,3.613,1636,4.624,1697,8.281,1701,6.267,1702,5.677,1714,6.142,1717,5.552,1718,7.389,1719,5.552,1720,6.637,1721,5.552,1722,6.916,1723,5.552,1724,5.231,1725,5.552]],["title/entities/DbContributorCategoryTimeframe.html",[47,3.582,1317,1.083]],["body/entities/DbContributorCategoryTimeframe.html",[3,0.035,4,0.035,5,0.035,6,3.679,10,0.17,11,0.931,13,1.089,14,0.42,15,0.005,16,0.055,22,1.033,37,5.125,47,4.595,59,0.039,60,0.158,76,1.206,91,3.655,93,3.321,102,2.517,121,1.324,176,5.878,177,5.878,181,6.392,212,2.906,238,0.003,239,0.003,292,0.409,295,0.486,460,3.296,526,0.96,530,2.042,537,1.19,879,1.492,947,2.989,948,4.811,971,5.583,975,1.952,1068,6.634,1075,5.659,1317,1.39,1447,5.17,1565,3.87,1587,3.03,1604,3.35,1607,3.114,1608,1.556,1609,1.556,1635,3.998,1636,4.907,1657,7.344,1661,3.27,1682,4.27,1698,4.129,1702,5.711,1704,4.129,1708,4.129,1711,7.344,1712,9.12,1713,7.344,1714,5.396,1715,4.129,1716,4.129,1726,9.2,1727,5.831,1728,4.597,1729,5.831,1730,4.597]],["title/entities/DbCoupon.html",[434,3.75,1317,1.083]],["body/entities/DbCoupon.html",[3,0.045,4,0.045,5,0.045,10,0.218,11,1.102,14,0.4,15,0.005,16,0.065,22,1.323,59,0.05,60,0.202,76,1.064,98,2.974,117,1.856,121,1.695,143,3.468,238,0.003,239,0.003,292,0.39,295,0.623,296,0.815,405,3.921,434,5.692,526,0.917,528,6.715,529,4.27,530,1.99,537,1.136,538,6.384,666,3.363,676,2.974,879,1.911,952,3.836,1054,2.022,1316,7.678,1317,1.644,1447,5.728,1448,7.077,1449,4.018,1472,3.406,1565,3.454,1587,1.993,1597,3.022,1603,3.679,1606,3.756,1607,2.6,1608,1.993,1609,1.993,1660,3.345,1661,3.98,1662,3.81,1664,3.47,1666,2.711,1667,3.81,1668,3.877,1689,3.836,1690,3.286,1692,3.723,1731,5.888,1732,5.888,1733,5.888,1734,5.888,1735,7.68,1736,4,1737,5.888,1738,5.888]],["title/entities/DbCustomer.html",[374,3.75,1317,1.083]],["body/entities/DbCustomer.html",[3,0.052,4,0.052,5,0.052,10,0.251,11,1.206,13,0.902,14,0.367,15,0.005,16,0.072,22,1.524,59,0.058,60,0.233,76,1.047,121,1.954,207,1.558,238,0.004,239,0.004,292,0.384,295,0.718,374,6.23,377,5.71,526,0.902,530,1.971,537,1.117,670,2.178,676,2.954,712,6.986,879,2.203,1054,2.33,1098,4.291,1317,1.8,1341,4.291,1530,8.203,1587,2.845,1589,4.994,1590,4.994,1597,3.307,1603,4.026,1604,3.06,1606,3.318,1607,3.092,1608,2.297,1609,2.297,1614,4.609,1739,6.785,1740,6.094,1741,6.785,1742,6.785,1743,6.785,1744,6.785,1745,3.25,1746,6.094]],["title/entities/DbEmoji.html",[402,3.438,1317,1.083]],["body/entities/DbEmoji.html",[3,0.035,4,0.035,5,0.035,10,0.17,11,0.93,13,0.696,14,0.408,15,0.005,16,0.07,22,1.031,59,0.039,60,0.157,76,1.114,91,2.397,98,3.164,117,1.975,121,1.322,143,3.117,186,2.397,238,0.003,239,0.003,292,0.429,295,0.946,296,0.805,395,2.903,402,4.406,404,5.004,405,4.401,406,3.005,460,2.049,526,1.007,530,2.042,534,0.658,537,1.189,597,3.107,666,2.959,667,3.335,670,1.669,676,3.083,686,4.215,879,1.49,884,1.917,952,4.082,975,1.795,1063,3.005,1256,2.93,1317,1.389,1449,2.877,1472,2.036,1565,3.411,1587,2.766,1593,3.403,1597,2.552,1604,2.975,1605,4.807,1607,2.918,1608,1.554,1609,1.554,1610,3.463,1635,2.245,1652,3.677,1660,2.825,1661,3.872,1662,3.436,1664,2.93,1665,3.647,1666,2.114,1667,3.762,1668,3.828,1670,2.728,1681,2.93,1682,3.387,1683,3.554,1684,2.903,1689,3.24,1690,2.775,1691,3.554,1692,3.275,1693,2.581,1747,4.591,1748,7.52,1749,5.574,1750,6.383,1751,4.591,1752,4.591,1753,7.337,1754,4.807,1755,5.066,1756,4.591,1757,4.101,1758,3.816,1759,4.591,1760,4.591,1761,4.591,1762,5.391,1763,6.486,1764,4.591,1765,4.591,1766,4.591,1767,4.591,1768,3.24,1769,4.124,1770,3.005,1771,4.591]],["title/entities/DbEndorsement.html",[418,3.311,1317,1.083]],["body/entities/DbEndorsement.html",[3,0.035,4,0.066,5,0.035,10,0.171,11,0.934,13,0.962,14,0.422,15,0.005,16,0.055,20,1.977,22,1.038,59,0.039,60,0.158,76,1.172,98,2.523,117,1.574,121,1.33,143,2.27,192,3.41,207,1.52,238,0.003,239,0.003,292,0.43,295,0.489,296,0.847,418,4.264,508,4.264,526,1.009,530,2.044,537,1.25,666,2.969,670,2.123,676,3.085,686,3.186,879,1.5,884,1.925,975,2.283,1317,1.395,1341,4.578,1365,6.778,1366,6.778,1367,6.778,1368,6.778,1369,7.847,1370,5.852,1373,5.089,1378,5.415,1386,5.852,1388,3.609,1449,2.89,1472,2.049,1565,2.483,1587,3.119,1589,5.328,1590,5.328,1597,2.563,1604,3.355,1607,3.185,1608,1.564,1609,1.564,1635,3.69,1660,2.012,1661,3.277,1662,2.74,1664,2.944,1666,2.128,1667,2.74,1668,2.788,1681,2.944,1690,2.788,1692,2.838,1745,3.121,1757,4.119,1758,3.841,1768,3.254,1770,3.024,1772,4.62,1773,4.62,1774,4.62,1775,4.62,1776,5.852,1777,4.62,1778,4.62,1779,6.515,1780,5.415,1781,4.62,1782,6.401,1783,4.62,1784,4.62,1785,4.62,1786,3.609]],["title/classes/DbFilteredUser.html",[60,0.174,1787,4.206]],["body/classes/DbFilteredUser.html",[3,0.054,4,0.054,5,0.054,10,0.262,11,1.236,14,0.347,15,0.005,16,0.06,59,0.06,60,0.242,76,1.205,85,3.968,88,5.067,207,1.598,238,0.004,239,0.004,292,0.393,296,0.775,522,1.771,526,0.924,530,1.999,537,1.145,676,2.983,879,2.293,1402,5.693,1436,4.722,1587,2.917,1607,3.147,1608,2.391,1609,2.391,1787,7.162,1788,9.297,1789,6.345,1790,7.739,1791,7.162,1792,7.162,1793,7.064,1794,6.345]],["title/entities/DbInsight.html",[367,3.098,1317,1.083]],["body/entities/DbInsight.html",[3,0.028,4,0.028,5,0.028,10,0.135,11,0.787,13,0.786,14,0.407,15,0.005,16,0.067,22,0.82,59,0.031,60,0.125,76,0.913,91,2.029,98,3.198,117,2.178,121,1.052,143,2.877,202,2.681,207,1.588,238,0.002,239,0.002,292,0.432,295,0.906,296,0.743,335,3.313,336,2.001,349,1.786,367,3.361,369,5.191,421,2.029,460,2.946,526,1.013,529,1.824,530,2.071,534,0.524,537,1.221,666,2.595,667,2.925,670,1.901,676,3.09,761,3.956,843,3.261,879,1.186,884,2.44,975,1.31,1054,1.254,1058,2.555,1064,5.845,1065,6.45,1210,3.885,1211,4.169,1256,2.48,1317,1.175,1341,3.744,1392,5.212,1400,2.707,1449,3.662,1470,3.261,1472,2.925,1565,3.148,1587,2.9,1589,4.357,1590,4.357,1591,3.885,1593,2.707,1597,2.16,1603,2.629,1604,3.119,1605,4.068,1606,2.684,1607,2.984,1608,1.236,1609,1.236,1610,3.037,1630,1.907,1632,2.867,1635,1.786,1636,2.867,1646,2.802,1647,2.802,1652,3.225,1660,2.872,1661,3.779,1662,3.472,1664,2.48,1666,1.682,1667,3.472,1668,3.533,1681,3.731,1689,2.742,1690,2.349,1691,3.008,1692,3.194,1736,2.481,1745,3.513,1768,2.742,1795,3.652,1796,6.594,1797,5.923,1798,6.594,1799,2.997,1800,3.652,1801,3.885,1802,3.652,1803,3.28,1804,3.652,1805,5.489,1806,5.481,1807,3.652,1808,3.885,1809,3.652,1810,3.652,1811,3.652,1812,3.652,1813,4.93,1814,5.489,1815,3.652,1816,5.489,1817,3.652,1818,4.93,1819,3.652,1820,3.885,1821,2.707,1822,3.652,1823,5.489,1824,4.287,1825,2.853,1826,3.652,1827,3.652,1828,2.39,1829,2.853]],["title/entities/DbInsightMember.html",[400,3.582,1317,1.083]],["body/entities/DbInsightMember.html",[3,0.029,4,0.029,5,0.029,10,0.142,11,0.816,13,0.806,14,0.409,15,0.005,16,0.048,22,0.861,59,0.033,60,0.131,76,1.113,91,3.108,98,2.909,117,2.032,121,1.104,143,3.238,207,1.055,238,0.003,239,0.003,292,0.424,295,0.889,296,0.876,400,4.029,460,2.824,526,0.997,530,2.085,537,1.235,569,4.731,607,4.6,666,2.671,667,3.011,670,1.932,676,3.071,879,1.245,884,2.642,952,3.752,975,1.793,988,2.842,1054,1.317,1256,2.572,1317,1.219,1341,2.906,1392,4.392,1400,6.889,1405,7.605,1447,3.599,1449,3.729,1472,3.332,1565,3.409,1587,2.847,1589,3.382,1590,3.382,1597,2.24,1603,2.727,1604,3.17,1606,2.784,1607,2.947,1608,1.298,1609,1.298,1635,1.875,1652,3.32,1660,3.272,1661,3.952,1662,3.76,1664,2.572,1666,1.766,1667,3.76,1668,3.826,1676,2.714,1681,3.799,1689,2.843,1690,2.436,1691,3.12,1692,3.496,1702,3.288,1736,2.605,1745,3.599,1757,3.599,1768,2.843,1770,2.509,1782,4.446,1791,4.731,1792,3.187,1799,2.588,1801,4.029,1820,4.029,1821,2.842,1830,8.471,1831,3.834,1832,5.948,1833,5.032,1834,6.098,1835,6.789,1836,3.444,1837,5.032,1838,3.834,1839,3.834,1840,3.834,1841,2.995,1842,3.834,1843,2.348,1844,3.834,1845,6.748,1846,3.834,1847,3.834,1848,5.113,1849,4.731,1850,3.834,1851,3.444,1852,3.834,1853,3.834,1854,3.834,1855,3.444]],["title/entities/DbInsightRepo.html",[369,3.582,1317,1.083]],["body/entities/DbInsightRepo.html",[3,0.036,4,0.036,5,0.036,10,0.173,11,0.943,13,0.966,14,0.409,15,0.005,16,0.07,22,1.051,59,0.04,60,0.161,76,0.819,98,3.192,117,1.991,121,1.348,143,2.871,192,3.434,238,0.003,239,0.003,292,0.422,295,0.872,296,0.742,367,5.047,369,4.654,408,3.469,421,2.43,526,0.992,530,2.049,534,0.671,537,1.196,666,2.99,670,2.129,676,3.065,756,2.582,769,2.503,879,1.519,884,2.436,952,3.284,975,1.814,1054,1.607,1317,1.408,1392,5.221,1402,4.653,1449,3.656,1452,3.797,1472,2.916,1565,3.142,1585,3.469,1587,2.79,1592,4.204,1597,2.587,1602,4.204,1603,3.149,1604,3.001,1606,3.215,1607,2.939,1608,1.584,1609,1.584,1610,3.027,1630,2.445,1632,3.434,1646,3.357,1647,3.357,1652,3.716,1660,2.864,1661,3.775,1662,3.466,1664,2.97,1666,2.155,1667,3.466,1668,3.527,1681,3.724,1689,3.284,1690,2.813,1692,3.31,1736,3.18,1745,4.313,1768,3.284,1801,4.654,1803,4.204,1830,8.478,1833,6.435,1843,4.026,1856,4.204,1857,4.68,1858,3.469,1859,4.204,1860,4.68,1861,4.68,1862,4.204,1863,4.204,1864,4.68]],["title/entities/DbLog.html",[384,3.75,1317,1.083]],["body/entities/DbLog.html",[3,0.051,4,0.051,5,0.051,10,0.247,11,1.194,14,0.393,15,0.005,16,0.057,22,1.502,59,0.057,60,0.229,76,1.271,121,1.925,143,2.901,238,0.004,239,0.004,292,0.446,295,0.707,384,6.172,492,6.723,508,5.936,526,1.048,666,3.569,670,2.013,676,3.127,864,5.239,1054,2.295,1317,1.783,1603,3.989,1604,3.678,1690,3.881,1768,3.339,1865,6.684,1866,6.684,1867,6.684,1868,6.684,1869,6.684,1870,6.684,1871,6.684,1872,6.684,1873,6.684]],["title/entities/DbPRInsight.html",[407,3.582,1317,1.083]],["body/entities/DbPRInsight.html",[3,0.034,4,0.034,5,0.034,10,0.166,11,0.915,13,1.056,14,0.424,15,0.005,16,0.054,20,1.935,22,1.007,59,0.038,60,0.154,76,0.794,91,3.638,93,3.479,94,2.834,98,2.469,99,5.275,100,2.469,117,2.378,121,1.291,143,2.976,186,2.357,197,4.747,200,4.865,238,0.003,239,0.003,292,0.405,295,0.474,389,5.593,392,3.049,407,4.514,460,3.109,526,0.952,530,2.033,537,1.18,670,1.647,676,3.018,879,1.455,892,3.978,975,2.369,1054,1.539,1121,6.58,1317,1.365,1565,2.431,1587,3.005,1597,2.509,1598,3.41,1603,3.055,1604,3.232,1606,3.118,1607,3.092,1608,1.518,1609,1.518,1635,3.954,1636,3.33,1661,2.55,1667,2.682,1668,2.729,1681,2.881,1682,3.33,1683,3.495,1874,4.483,1875,7.422,1876,7.422,1877,5.501,1878,7.422,1879,5.728,1880,8.878,1881,4.483,1882,4.483,1883,8.085,1884,6.377,1885,6.377,1886,6.377,1887,8.085,1888,4.483,1889,4.483,1890,4.483,1891,4.483,1892,6.377,1893,5.728,1894,5.728,1895,6.377,1896,6.377,1897,4.483,1898,5.728,1899,4.483]],["title/entities/DbPullRequest.html",[388,2.845,1317,1.083]],["body/entities/DbPullRequest.html",[3,0.015,4,0.044,5,0.015,10,0.075,11,0.489,13,0.991,14,0.415,15,0.005,16,0.038,20,1.034,22,0.453,59,0.017,60,0.069,76,1.185,91,2.617,93,1.205,94,1.274,98,2.953,117,2.18,121,0.58,143,3.006,192,2.001,196,4.325,200,4.728,228,3.283,234,1.868,238,0.001,239,0.001,292,0.441,295,0.616,296,0.894,388,1.917,389,5.932,392,3.315,421,1.26,453,3.381,460,2.725,495,4.069,526,1.035,530,2.122,534,0.289,537,1.287,597,2.495,666,1.743,667,1.965,670,1.293,676,3.113,686,1.667,756,0.932,761,3.391,769,1.078,843,3.461,879,0.654,884,1.007,892,4.219,952,4.179,975,1.76,985,3.294,1054,0.692,1091,1.279,1172,3.192,1256,2.354,1317,0.73,1402,2.712,1415,3.812,1436,1.104,1452,1.969,1453,2.833,1565,2.907,1587,3.238,1597,1.341,1603,1.633,1604,3.22,1606,0.986,1607,3.253,1608,0.682,1609,0.682,1610,1.57,1618,1.675,1635,2.848,1636,3.983,1660,0.878,1661,3.608,1662,3.207,1664,1.54,1667,3.207,1668,3.263,1674,2.526,1675,4.069,1681,3.446,1682,3.983,1683,4.18,1690,1.459,1692,1.485,1693,3.275,1702,1.969,1858,1.494,1900,2.015,1901,4.429,1902,4.429,1903,4.429,1904,4.429,1905,4.429,1906,3.682,1907,4.429,1908,5.232,1909,4.429,1910,5.825,1911,4.429,1912,5.232,1913,6.049,1914,3.682,1915,4.429,1916,5.232,1917,4.429,1918,4.429,1919,4.55,1920,4.429,1921,4.429,1922,4.679,1923,2.526,1924,2.015,1925,5.209,1926,5.209,1927,3.409,1928,2.015,1929,2.015,1930,2.015,1931,2.015,1932,1.81,1933,2.015,1934,2.663,1935,3.062,1936,3.294,1937,2.015,1938,3.062,1939,4.33,1940,2.015,1941,2.015,1942,2.833,1943,2.015,1944,1.675,1945,2.015,1946,2.833,1947,2.015,1948,4.679,1949,2.015,1950,2.015,1951,3.062,1952,1.675,1953,2.015,1954,3.409,1955,2.015,1956,2.015,1957,3.409,1958,3.409,1959,4.429,1960,3.409,1961,3.409,1962,3.409,1963,3.409,1964,3.409,1965,2.015,1966,2.015,1967,3.409,1968,2.015,1969,2.015,1970,2.015,1971,2.015,1972,1.81,1973,2.015,1974,3.062,1975,1.81,1976,2.015,1977,2.015,1978,2.015,1979,1.81,1980,2.015,1981,4.33,1982,1.81,1983,2.015,1984,1.81,1985,2.015,1986,1.81,1987,2.015,1988,1.81,1989,2.015,1990,3.062,1991,3.062,1992,3.062,1993,2.833,1994,1.81,1995,2.015,1996,2.015,1997,1.675,1998,1.81,1999,1.494,2000,5.26,2001,4.679,2002,1.675,2003,1.81,2004,1.81,2005,1.81,2006,1.81,2007,1.675,2008,2.015]],["title/classes/DbPullRequestContributor.html",[60,0.174,1226,3.75]],["body/classes/DbPullRequestContributor.html",[3,0.049,4,0.049,5,0.049,10,0.237,11,1.162,13,0.869,14,0.358,15,0.005,16,0.055,59,0.055,60,0.219,76,1.009,143,2.823,186,2.995,196,4.071,200,4.441,228,6.59,238,0.004,239,0.004,292,0.406,296,0.729,392,3.379,453,4.333,522,1.604,526,0.954,530,2.035,537,1.182,597,3.882,667,3.944,670,1.799,676,3.02,879,2.077,892,4.071,985,5.91,1226,6.006,1235,6.35,1256,3.661,1587,3.01,1607,3.164,1608,2.166,1609,2.166,1661,3.24,1662,3.407,1681,3.661,1682,4.232,1683,4.441,1693,4.556,1799,3.39,2007,6.735,2009,6.399,2010,6.399,2011,6.399,2012,6.399]],["title/entities/DbPullRequestGitHubEvents.html",[438,3.438,1317,1.083]],["body/entities/DbPullRequestGitHubEvents.html",[3,0.02,4,0.051,5,0.02,10,0.097,11,0.608,13,1.005,14,0.417,15,0.005,16,0.036,20,1.286,22,0.589,59,0.022,60,0.09,76,1.167,91,1.566,93,1.498,98,3.051,117,2.105,121,0.755,143,3.129,196,4.315,200,5.04,238,0.002,239,0.002,292,0.442,295,0.564,296,0.891,392,3.307,421,1.566,438,2.879,453,2.266,460,2.391,495,4.784,526,1.039,530,2.132,537,1.288,597,2.03,676,3.112,756,1.159,761,3.446,769,1.402,787,0.817,843,2.518,879,0.851,884,1.252,952,3.593,975,1.807,985,2.679,1054,0.9,1091,1.591,1172,2.322,1256,1.915,1317,0.907,1415,2.773,1452,2.448,1565,3.004,1587,3.262,1597,1.667,1603,2.03,1604,3.172,1606,1.282,1607,3.28,1608,0.888,1609,0.888,1635,3.288,1636,4.365,1660,1.142,1661,3.678,1662,3.313,1664,1.915,1667,3.313,1668,3.372,1674,3.141,1675,4.784,1681,3.56,1682,4.115,1683,4.318,1690,1.813,1692,1.846,1693,3.444,1702,2.448,1858,1.943,1908,3.806,1912,3.806,1913,3.806,1916,3.806,1919,4.784,1922,5.502,1923,3.141,1932,2.355,1934,3.31,1935,3.806,1936,3.873,1938,3.806,1939,4.433,1942,3.522,1944,2.179,1946,3.522,1948,4.79,1951,3.806,1952,2.179,1974,3.806,1975,2.355,1979,2.355,1981,5.091,1982,2.355,1984,2.355,1986,2.355,1988,2.355,1990,3.806,1991,3.806,1992,3.806,1993,3.522,1994,2.355,1997,2.179,1998,2.355,1999,1.943,2000,5.618,2001,4.79,2002,2.179,2003,2.355,2004,2.355,2005,2.355,2006,2.355,2007,2.179,2013,2.622,2014,5.333,2015,5.333,2016,5.333,2017,5.333,2018,5.333,2019,5.333,2020,5.333,2021,5.333,2022,5.333,2023,5.333,2024,5.333,2025,5.333,2026,5.333,2027,5.333,2028,5.333,2029,5.333,2030,5.333,2031,5.333,2032,4.79,2033,5.333,2034,5.333,2035,5.333,2036,4.79,2037,3.522,2038,2.622,2039,2.622,2040,2.622,2041,2.622,2042,2.622,2043,2.622,2044,2.622,2045,2.622,2046,2.622,2047,2.622,2048,2.622,2049,2.622,2050,2.622,2051,2.622,2052,2.622,2053,2.622,2054,2.622,2055,2.622,2056,2.622,2057,2.622,2058,2.622,2059,2.622,2060,2.622,2061,2.622,2062,2.622]],["title/entities/DbPullRequestReview.html",[391,3.582,1317,1.083]],["body/entities/DbPullRequestReview.html",[3,0.034,4,0.034,5,0.034,10,0.167,11,0.917,13,0.686,14,0.396,15,0.005,16,0.063,22,1.011,59,0.038,60,0.154,76,1.008,98,3.442,117,2.148,121,1.296,143,3.431,196,3.982,200,4.871,238,0.003,239,0.003,292,0.418,295,0.476,296,0.841,388,4.553,389,5.722,390,2.674,391,4.526,392,3.339,453,3.419,526,0.981,530,2.034,537,1.181,597,3.063,666,2.926,667,3.299,670,1.651,676,3.052,879,1.461,892,4.07,975,1.074,1054,1.545,1317,0.963,1436,2.466,1565,3.388,1587,2.896,1597,2.516,1603,3.063,1604,2.708,1606,2.2,1607,3.009,1608,1.523,1609,1.523,1646,3.264,1647,3.264,1660,1.96,1661,3.939,1662,3.738,1664,2.889,1667,3.738,1668,3.803,1681,4.016,1682,4.642,1683,4.871,1690,2.736,1692,2.785,1693,4.182,1919,6.682,1939,5.314,1944,3.74,1952,3.74,1972,4.042,1997,3.74,2000,4.994,2063,4.499,2064,7.437,2065,6.681,2066,7.437,2067,9.641,2068,4.499,2069,6.394,2070,4.499,2071,6.394,2072,4.499,2073,4.499,2074,6.394,2075,4.499,2076,6.394,2077,4.499,2078,4.499,2079,4.499,2080,4.499,2081,4.499,2082,4.042]],["title/entities/DbRepoLoginContributions.html",[1145,3.952,1317,1.083]],["body/entities/DbRepoLoginContributions.html",[3,0.036,4,0.036,5,0.036,8,3.202,10,0.177,11,0.959,13,1.112,14,0.419,15,0.005,16,0.057,22,1.077,59,0.041,60,0.164,76,0.832,88,5.187,91,3.682,93,3.453,121,1.38,207,1.916,238,0.003,239,0.003,292,0.414,295,0.507,296,0.601,460,3.308,526,0.973,530,2.057,537,1.205,676,2.275,879,1.556,895,5.099,952,3.339,975,2.091,1145,5.221,1172,4.8,1174,5.229,1317,1.431,1415,5.732,1436,2.626,1587,3.071,1604,3.389,1607,3.151,1608,1.622,1609,1.622,1635,4.283,1636,5.102,1699,6.012,1700,6.012,1701,6.421,1702,5.753,1705,4.374,1706,5.45,1709,5.221,2083,9.308,2084,4.792,2085,4.792,2086,4.792,2087,4.792,2088,5.221,2089,3.552,2090,4.792,2091,4.792,2092,4.792,2093,4.792]],["title/entities/DbRepoToUserStargazers.html",[345,3.438,1317,1.083]],["body/entities/DbRepoToUserStargazers.html",[3,0.035,4,0.035,5,0.035,10,0.168,11,0.924,13,0.956,14,0.41,15,0.005,16,0.073,20,1.954,22,1.021,59,0.039,60,0.156,91,2.38,98,3.15,117,1.966,121,1.309,143,3.107,192,3.88,207,1.7,238,0.003,239,0.003,292,0.428,295,0.791,296,0.802,333,3.746,335,3.676,336,2.491,345,4.375,349,2.222,460,2.034,526,1.005,530,1.995,534,0.652,537,1.141,597,3.085,666,2.943,667,3.317,670,2.035,676,3.08,756,2.349,879,1.475,884,1.903,975,1.785,1256,2.909,1317,1.379,1449,2.856,1472,2.016,1565,3.399,1587,2.532,1597,3.509,1598,3.443,1604,2.723,1607,2.754,1608,1.539,1609,1.539,1610,3.746,1630,3.363,1632,4.249,1646,3.818,1647,3.818,1652,3.657,1660,2.805,1661,3.863,1662,3.421,1664,2.909,1665,3.621,1666,2.093,1667,3.75,1668,3.816,1670,2.701,1681,2.909,1682,3.363,1683,3.529,1684,2.874,1689,3.216,1690,2.755,1691,3.529,1692,3.257,1693,2.555,1745,3.085,1768,3.216,1799,3.273,1843,3.943,2094,4.545,2095,8.01,2096,4.545,2097,4.545,2098,4.375,2099,3.088,2100,4.545,2101,4.545,2102,4.545,2103,4.545,2104,4.545,2105,4.545,2106,4.545,2107,4.545,2108,4.545,2109,4.545,2110,4.082]],["title/entities/DbRepoToUserStars.html",[341,3.438,1317,1.083]],["body/entities/DbRepoToUserStars.html",[3,0.035,4,0.035,5,0.035,10,0.168,11,0.924,13,0.956,14,0.41,15,0.005,16,0.073,20,1.954,22,1.021,59,0.039,60,0.156,91,2.38,98,3.15,117,1.966,121,1.309,143,3.107,192,3.88,207,1.7,238,0.003,239,0.003,292,0.428,295,0.791,296,0.802,333,3.746,335,3.676,336,2.491,341,4.375,349,2.222,460,2.034,526,1.005,530,1.995,534,0.652,537,1.141,597,3.085,666,2.943,667,3.317,670,2.035,676,3.08,756,2.349,879,1.475,884,1.903,975,1.785,1256,2.909,1317,1.379,1449,2.856,1472,2.016,1565,3.399,1587,2.532,1597,3.509,1598,3.443,1604,2.723,1607,2.754,1608,1.539,1609,1.539,1610,3.746,1630,3.363,1632,4.249,1646,3.818,1647,3.818,1652,3.657,1660,2.805,1661,3.863,1662,3.421,1664,2.909,1665,3.621,1666,2.093,1667,3.75,1668,3.816,1670,2.701,1681,2.909,1682,3.363,1683,3.529,1684,2.874,1689,3.216,1690,2.755,1691,3.529,1692,3.257,1693,2.555,1745,3.085,1768,3.216,1799,3.273,1843,3.943,2098,4.375,2099,3.088,2111,4.545,2112,7.412,2113,4.545,2114,4.545,2115,4.545,2116,4.545,2117,4.545,2118,4.545,2119,4.545,2120,4.545,2121,4.545,2122,4.545,2123,4.545,2124,4.545,2125,4.082]],["title/entities/DbRepoToUserSubmissions.html",[343,3.438,1317,1.083]],["body/entities/DbRepoToUserSubmissions.html",[3,0.033,4,0.033,5,0.033,10,0.16,11,0.889,13,0.94,14,0.409,15,0.005,16,0.072,20,1.882,22,0.969,59,0.037,60,0.148,91,2.292,98,3.076,117,2.033,121,1.241,143,3.053,192,3.802,207,1.674,238,0.003,239,0.003,292,0.43,295,0.768,296,0.831,333,3.657,335,3.589,336,2.363,343,4.213,349,2.108,421,2.292,460,2.658,526,1.009,530,2.018,534,0.618,537,1.164,597,2.971,666,2.858,667,3.221,670,2.004,676,3.085,756,2.302,761,2.971,879,1.4,884,1.833,975,1.734,1064,4.39,1256,2.802,1317,1.328,1449,2.75,1470,3.685,1472,1.912,1565,3.34,1587,2.689,1597,3.448,1598,3.316,1604,2.892,1607,2.849,1608,1.459,1609,1.459,1610,3.657,1630,3.239,1632,4.148,1646,3.708,1647,3.708,1652,3.551,1660,2.701,1661,3.819,1662,3.685,1664,2.802,1665,3.487,1666,1.985,1667,3.685,1668,3.749,1670,2.562,1681,2.802,1682,3.239,1683,3.398,1684,2.726,1689,3.097,1690,2.654,1691,3.398,1692,3.163,1693,2.424,1745,2.971,1768,3.097,1799,3.208,1806,3.583,1843,3.797,2082,5.57,2098,4.213,2099,2.929,2126,4.311,2127,7.263,2128,8.299,2129,4.311,2130,4.311,2131,4.311,2132,6.201,2133,4.311,2134,4.311,2135,4.311,2136,4.311,2137,4.311,2138,4.311,2139,4.311,2140,4.311,2141,4.311,2142,4.311,2143,3.872]],["title/entities/DbRepoToUserVotes.html",[339,3.199,1317,1.083]],["body/entities/DbRepoToUserVotes.html",[3,0.035,4,0.035,5,0.035,10,0.168,11,0.924,13,0.956,14,0.41,15,0.005,16,0.073,20,1.954,22,1.021,59,0.039,60,0.156,91,2.38,98,3.15,117,1.966,121,1.309,143,3.107,192,3.88,207,1.7,238,0.003,239,0.003,292,0.428,295,0.791,296,0.802,333,3.746,335,3.676,336,2.491,339,4.071,349,2.222,460,2.034,526,1.005,530,1.995,534,0.652,537,1.141,597,3.085,666,2.943,667,3.317,670,2.035,676,3.08,756,2.349,879,1.475,884,1.903,975,1.785,1256,2.909,1317,1.379,1449,2.856,1472,2.016,1565,3.399,1587,2.532,1597,3.509,1598,3.443,1604,2.723,1607,2.754,1608,1.539,1609,1.539,1610,3.746,1630,3.363,1632,4.249,1646,3.818,1647,3.818,1652,3.657,1660,2.805,1661,3.863,1662,3.421,1664,2.909,1665,3.621,1666,2.093,1667,3.75,1668,3.816,1670,2.701,1681,2.909,1682,3.363,1683,3.529,1684,2.874,1689,3.216,1690,2.755,1691,3.529,1692,3.257,1693,2.555,1745,3.085,1768,3.216,1799,3.273,1843,3.943,2098,4.375,2099,3.088,2144,4.545,2145,7.412,2146,4.545,2147,4.545,2148,4.545,2149,4.545,2150,4.545,2151,4.545,2152,4.545,2153,4.545,2154,4.545,2155,4.545,2156,4.545,2157,4.545,2158,4.082]],["title/entities/DbSubscription.html",[382,3.75,1317,1.083]],["body/entities/DbSubscription.html",[3,0.023,4,0.023,5,0.023,10,0.114,11,0.689,13,0.718,14,0.408,15,0.005,16,0.05,22,0.689,37,3.516,59,0.026,60,0.105,76,1.038,91,1.775,98,3.679,117,2.332,121,0.883,143,3.54,186,1.134,207,0.89,238,0.002,239,0.002,292,0.43,295,0.324,296,0.855,382,3.559,460,1.517,526,1.009,530,2.087,534,0.44,537,1.238,666,2.328,670,1.613,676,3.085,761,3.206,879,0.996,884,2.852,947,3.082,948,5.71,952,3.848,979,2.55,1054,1.054,1075,4.232,1317,1.028,1449,4.28,1472,3.8,1565,3.621,1587,2.46,1597,2.634,1603,2.3,1604,3.391,1606,1.5,1607,2.608,1608,1.039,1609,1.039,1610,2.211,1618,2.55,1636,3.496,1660,3.732,1661,4.102,1662,4.058,1664,3.024,1665,5.425,1666,1.413,1667,3.995,1668,4.065,1676,5.9,1690,2.055,1692,3.817,1799,2.255,2159,7.896,2160,3.068,2161,5.314,2162,5.314,2163,5.314,2164,5.314,2165,5.314,2166,5.314,2167,4.622,2168,5.314,2169,6.039,2170,4.936,2171,5.314,2172,5.314,2173,4.802,2174,3.068,2175,6.51,2176,3.068,2177,4.802,2178,3.068,2179,3.068,2180,6.693,2181,3.068,2182,3.068,2183,3.068,2184,3.068,2185,3.068,2186,3.068,2187,4.313,2188,3.068,2189,3.068,2190,3.068,2191,3.068,2192,3.068,2193,3.068,2194,6.693,2195,3.068,2196,3.068,2197,3.068,2198,3.068,2199,3.068,2200,3.068,2201,3.068,2202,3.068]],["title/classes/DbTimezone.html",[60,0.174,2203,3.952]],["body/classes/DbTimezone.html",[3,0.057,4,0.057,5,0.057,6,3.578,10,0.278,11,1.283,14,0.302,15,0.005,16,0.064,59,0.064,60,0.258,76,1.231,238,0.004,239,0.004,292,0.343,522,1.885,526,0.807,530,1.848,537,0.999,676,2.823,703,7.147,879,2.441,1587,2.546,1607,3.029,1608,2.546,1609,2.546,2203,6.989,2204,7.52,2205,8.947,2206,7.52]],["title/classes/DbTopUser.html",[60,0.174,2207,4.206]],["body/classes/DbTopUser.html",[3,0.057,4,0.057,5,0.057,10,0.276,11,1.277,14,0.3,15,0.005,16,0.064,59,0.064,60,0.256,76,1.109,88,5.144,207,1.651,238,0.004,239,0.004,292,0.341,296,0.801,410,5.006,522,1.87,526,0.8,530,1.839,537,0.991,676,2.813,879,2.421,1436,4.879,1587,2.525,1607,3.014,1608,2.525,1609,2.525,1789,6.699,1794,6.699,2207,7.4,2208,8.903]],["title/entities/DbUserCollaboration.html",[413,3.582,1317,1.083]],["body/entities/DbUserCollaboration.html",[3,0.026,4,0.026,5,0.026,10,0.124,11,0.738,13,0.753,14,0.407,15,0.005,16,0.06,22,0.754,59,0.029,60,0.115,76,0.995,91,2.954,98,2.719,117,2.074,121,0.966,143,3.306,207,1.827,238,0.002,239,0.002,292,0.423,295,0.662,296,0.854,335,3.76,392,2.668,413,3.644,460,2.525,526,0.995,530,2.046,534,0.481,537,1.194,607,4.3,666,2.464,667,2.778,670,2.029,676,3.068,864,4.375,879,1.09,884,2.655,975,1.908,1054,1.153,1256,2.326,1317,1.102,1341,3.585,1427,7.344,1430,4.624,1437,2.376,1447,4.44,1449,3.545,1472,3.359,1565,3.425,1587,2.564,1589,4.173,1590,4.173,1597,2.026,1603,2.466,1604,3.03,1606,2.517,1607,2.706,1608,1.136,1609,1.136,1610,2.884,1630,2.689,1632,3.668,1635,2.517,1646,3.197,1647,3.197,1652,3.062,1660,3.299,1661,3.962,1662,3.778,1664,2.326,1666,1.546,1667,3.778,1668,3.845,1676,3.644,1681,3.611,1689,2.571,1690,2.203,1691,2.821,1692,3.481,1736,2.28,1745,2.466,1757,3.255,1768,2.571,1770,2.196,1776,4.624,1780,4.279,1782,4.021,1799,2.887,1801,3.644,1820,3.644,1821,2.488,1824,5.485,1825,4.021,1829,4.021,1836,3.015,1837,4.641,1841,2.622,1848,6.308,1849,5.837,2170,5.145,2209,5.936,2210,3.356,2211,6.262,2212,6.262,2213,5.625,2214,7.574,2215,5.148,2216,3.356,2217,3.356,2218,3.356,2219,3.356,2220,5.148,2221,4.624,2222,5.148,2223,3.356,2224,3.356,2225,3.356,2226,5.148,2227,3.356,2228,3.356,2229,3.356,2230,3.356,2231,5.148,2232,3.356,2233,5.148,2234,3.356,2235,2.122,2236,3.356]],["title/entities/DbUserHighlight.html",[394,2.845,1317,1.083]],["body/entities/DbUserHighlight.html",[3,0.021,4,0.043,5,0.021,10,0.104,11,0.645,13,0.685,14,0.414,15,0.005,16,0.059,22,0.634,59,0.024,60,0.097,76,1.183,88,3.562,91,2.747,98,2.474,117,2.066,121,0.812,143,3.254,196,2.782,198,4.18,200,1.546,207,1.695,238,0.002,239,0.002,292,0.434,295,0.904,296,0.877,335,2.886,392,2.132,394,2.527,404,3.912,405,5.167,406,1.846,410,2.527,421,2.747,443,2.24,460,3.002,526,1.019,530,2.09,534,0.405,537,1.241,666,2.204,667,2.484,670,1.731,676,3.096,686,3.411,756,1.229,761,3.877,769,2.403,843,4.145,870,1.784,879,0.916,952,4.043,972,3.592,974,2.197,975,1.073,1054,0.969,1317,0.962,1402,3.43,1436,1.546,1442,4.375,1446,4.036,1447,5.118,1448,6.322,1449,3.59,1452,4.293,1453,3.735,1454,4.036,1455,4.036,1460,2.534,1465,5.738,1469,4.036,1472,2.833,1474,2.534,1565,3.085,1587,3.008,1593,2.091,1597,2.513,1603,2.153,1604,2.947,1605,3.331,1607,3.054,1608,0.955,1609,0.955,1610,2.579,1630,1.473,1632,3.336,1636,2.347,1646,2.86,1647,2.294,1652,2.739,1660,2.782,1661,3.735,1662,3.404,1664,2.03,1666,1.299,1667,3.404,1668,3.463,1676,1.997,1689,2.245,1690,1.923,1691,2.463,1692,3.038,1702,4.293,1736,1.916,1745,3.06,1749,4.151,1762,3.735,1768,2.245,1791,3.735,1792,2.345,1799,2.659,1801,3.181,1808,4.938,1820,3.181,1821,2.091,1824,3.51,1825,2.203,1829,2.203,1851,2.534,1858,2.091,2000,4.99,2089,2.091,2209,6.053,2235,1.784,2237,2.821,2238,6.976,2239,4.656,2240,2.821,2241,2.821,2242,5.31,2243,4.494,2244,2.821,2245,2.821,2246,4.036,2247,2.821,2248,2.821,2249,2.821,2250,2.821,2251,2.821,2252,2.821,2253,2.821,2254,2.821,2255,3.735,2256,2.821,2257,2.821,2258,2.821,2259,4.494,2260,2.821,2261,2.821,2262,2.821,2263,2.821,2264,2.821,2265,2.821,2266,2.821,2267,2.821,2268,4.494,2269,2.821,2270,2.821,2271,2.821,2272,2.821,2273,2.534,2274,2.821]],["title/entities/DbUserHighlightReaction.html",[404,3.098,1317,1.083]],["body/entities/DbUserHighlightReaction.html",[3,0.029,4,0.029,5,0.029,10,0.14,11,0.809,13,0.898,14,0.41,15,0.005,16,0.071,22,0.851,59,0.032,60,0.13,76,0.93,91,3.521,98,2.892,117,1.805,121,1.091,143,2.917,207,1.552,238,0.002,239,0.002,292,0.43,295,0.79,296,0.874,335,3.046,394,3.791,396,2.252,402,4.58,403,3.404,404,4.89,405,5.167,460,3.069,526,1.009,530,1.967,534,0.544,537,1.113,597,2.703,666,2.653,667,2.99,670,2.021,676,3.022,879,1.23,884,1.668,952,2.819,975,2.174,1256,2.55,1317,1.208,1449,2.503,1472,1.681,1565,3.192,1587,2.529,1597,3.506,1598,3.018,1604,2.908,1607,2.834,1608,1.283,1609,1.283,1610,3.678,1630,3.521,1632,4.373,1635,3.297,1646,3.814,1647,3.814,1652,3.297,1660,2.458,1661,3.707,1662,3.141,1664,2.55,1665,3.173,1666,1.745,1667,3.521,1668,3.583,1670,2.252,1681,2.55,1682,2.947,1683,3.093,1684,2.396,1689,2.819,1690,2.415,1691,3.093,1692,2.937,1693,2.131,1702,3.26,1745,2.703,1750,7.44,1753,6.238,1757,4.723,1758,3.15,1768,2.819,1770,3.693,1799,3.044,2209,6.022,2235,2.396,2255,6.638,2275,3.79,2276,6.238,2277,5.267,2278,3.79,2279,3.79,2280,3.79,2281,3.79,2282,3.79,2283,3.79,2284,3.79,2285,3.79,2286,3.79,2287,3.79,2288,3.79,2289,3.79,2290,3.79,2291,3.79,2292,3.79,2293,3.79,2294,3.404,2295,3.79,2296,3.79,2297,3.79,2298,3.79,2299,3.79]],["title/classes/DbUserHighlightReactionResponse.html",[60,0.174,2300,3.582]],["body/classes/DbUserHighlightReactionResponse.html",[3,0.049,4,0.049,5,0.049,10,0.239,11,1.17,14,0.359,15,0.005,16,0.08,31,2.817,59,0.069,60,0.306,76,1.23,85,3.757,119,2.045,207,1.199,238,0.004,239,0.004,292,0.295,296,0.734,395,4.09,404,3.961,405,4.562,406,4.233,421,2.391,443,3.262,516,2.549,522,1.621,526,0.694,530,1.938,534,0.928,535,3.634,536,1.937,537,1.188,756,2.232,769,3.459,870,4.09,974,3.989,1002,2.19,1003,1.747,1054,2.801,1086,3.637,1109,2.869,1117,4.162,1119,4.015,1197,4.233,1753,6.373,2276,5.053,2277,5.053,2300,5.775,2301,7.328,2302,7.428,2303,6.373,2304,6.781,2305,6.468,2306,5.81,2307,6.468,2308,5.81,2309,4.233,2310,5.158,2311,7.328,2312,5.81,2313,5.81]],["title/classes/DbUserHighlightRepo.html",[60,0.174,2314,3.582]],["body/classes/DbUserHighlightRepo.html",[3,0.056,4,0.056,5,0.056,10,0.273,11,1.268,14,0.296,15,0.005,16,0.063,59,0.063,60,0.253,76,1.1,238,0.004,239,0.004,292,0.336,295,0.935,296,0.795,405,5.013,421,3.267,522,1.847,526,0.79,530,1.825,537,0.979,676,2.798,756,2.418,769,4.726,879,2.391,1402,5.798,1452,5.105,1585,5.46,1587,2.494,1607,2.992,1608,2.494,1609,2.494,2314,6.256,2315,8.838,2316,7.367]],["title/entities/DbUserList.html",[431,3.438,1317,1.083]],["body/entities/DbUserList.html",[3,0.031,4,0.031,5,0.031,6,3.761,8,4.1,10,0.149,11,0.847,13,0.633,14,0.401,15,0.005,16,0.066,22,0.905,59,0.034,60,0.138,76,0.958,91,2.182,98,3.314,117,2.191,121,1.16,143,2.981,207,1.587,238,0.003,239,0.003,292,0.423,295,0.935,296,0.77,335,3.476,336,2.207,431,4.01,432,6.97,443,2.36,460,2.703,526,0.992,530,2.057,534,0.578,537,1.205,666,2.749,667,3.099,670,1.963,676,3.066,761,3.685,879,1.307,884,2.529,975,0.961,1054,1.383,1064,5.445,1065,6.009,1210,4.178,1211,4.417,1256,2.667,1317,1.264,1341,3.013,1392,4.736,1449,3.796,1472,3.099,1565,3.262,1587,2.772,1589,3.507,1590,3.507,1591,4.178,1597,2.322,1603,2.827,1604,2.982,1606,2.886,1607,2.897,1608,1.363,1609,1.363,1610,2.718,1630,2.103,1632,3.082,1635,1.969,1636,3.082,1646,3.013,1647,3.013,1652,3.416,1660,3.043,1661,3.856,1662,3.599,1664,2.667,1666,1.854,1667,3.599,1668,3.662,1681,3.867,1689,2.948,1690,2.525,1691,3.234,1692,3.351,1736,2.736,1745,2.827,1757,3.732,1768,2.948,1770,2.635,1797,6.275,1799,3.122,1801,4.178,1806,4.906,1808,4.178,1820,4.178,1821,2.985,1824,4.61,1825,3.146,1829,3.146,1841,3.146,2317,4.027,2318,6.986,2319,4.027,2320,4.027,2321,4.027,2322,4.027,2323,4.027,2324,5.902,2325,4.027,2326,4.374,2327,4.027,2328,4.027,2329,4.027,2330,4.027,2331,4.027,2332,4.027]],["title/entities/DbUserListContributor.html",[27,3.311,1317,1.083]],["body/entities/DbUserListContributor.html",[3,0.034,4,0.056,5,0.034,6,3.793,8,4.867,10,0.274,11,0.911,13,0.681,14,0.402,15,0.005,16,0.069,22,1.001,27,4.155,31,2.765,59,0.038,60,0.153,76,1.161,88,4.351,91,2.98,98,2.458,117,1.534,121,1.283,143,2.809,198,4.155,207,1.784,212,2.817,238,0.003,239,0.003,292,0.426,295,0.671,296,0.839,335,3.643,336,2.441,410,3.57,432,7.029,453,4.557,460,2.798,526,1,530,2.031,534,0.639,537,1.177,666,2.91,670,1.892,676,3.074,756,1.737,879,1.446,884,1.876,952,4.027,975,1.063,1214,3.703,1317,1.359,1436,2.441,1449,2.816,1472,1.976,1565,3.073,1587,2.885,1597,3.486,1604,3.103,1606,3.105,1607,2.999,1608,1.508,1609,1.508,1610,3.406,1630,2.327,1632,3.316,1646,3.241,1647,3.241,1652,3.617,1660,1.94,1661,3.543,1662,2.67,1665,3.57,1666,2.051,1667,3.39,1668,3.45,1670,2.647,1689,3.171,1690,2.717,1692,2.765,1702,3.667,1745,3.041,1757,5.098,1768,3.171,1770,4.155,1799,3.249,1841,3.48,1843,2.728,2088,4.959,2089,3.302,2333,4.455,2334,6.644,2335,7.397,2336,4.455,2337,4.455,2338,4.455,2339,4.455,2340,4.455,2341,4.455,2342,4.455,2343,4.455,2344,4.455,2345,4.455,2346,4.455,2347,4.455]],["title/entities/DbUserListContributorStat.html",[30,3.311,1317,1.083]],["body/entities/DbUserListContributorStat.html",[3,0.036,4,0.036,5,0.036,8,3.202,10,0.177,11,0.959,13,1.112,14,0.419,15,0.005,16,0.057,22,1.077,30,4.374,59,0.041,60,0.164,76,0.832,88,5.187,91,3.682,93,3.453,121,1.38,207,1.916,212,3.03,238,0.003,239,0.003,292,0.414,295,0.507,296,0.601,460,3.308,526,0.973,530,2.057,537,1.205,676,2.275,879,1.556,895,5.099,952,3.339,975,2.091,1172,4.8,1174,5.229,1317,1.431,1415,5.732,1436,2.626,1587,3.071,1604,3.389,1607,3.151,1608,1.622,1609,1.622,1635,4.283,1636,5.102,1699,6.012,1700,6.012,1701,6.421,1702,5.753,1705,4.374,1706,5.45,1709,5.221,2088,5.221,2089,3.552,2348,9.308,2349,4.792,2350,4.792,2351,4.792,2352,4.792,2353,4.792,2354,4.792,2355,4.792]],["title/entities/DbUserListContributorStat-1.html",[30,2.754,186,1.556,1317,0.901]],["body/entities/DbUserListContributorStat-1.html",[3,0.036,4,0.036,5,0.036,6,3.703,8,4.601,10,0.174,11,0.946,13,1.11,14,0.419,15,0.005,16,0.056,22,1.057,30,4.318,31,4.034,59,0.04,60,0.161,76,0.822,88,5.173,91,3.67,93,3.44,121,1.355,207,1.841,212,2.975,238,0.003,239,0.003,292,0.412,295,0.498,296,0.594,432,6.864,460,3.303,526,0.967,530,2.051,537,1.198,676,2.252,879,1.527,895,5.058,952,3.296,975,2.076,1172,4.767,1174,5.177,1317,1.413,1415,5.693,1436,2.578,1587,3.053,1604,3.372,1607,3.135,1608,1.593,1609,1.593,1635,4.254,1636,5.083,1699,5.953,1700,5.953,1701,6.384,1702,5.735,1705,4.318,1706,5.406,1709,5.154,2088,5.154,2089,3.487,2356,4.705,2357,4.705,2358,4.705,2359,4.705,2360,4.705,2361,4.705,2362,4.705]],["title/entities/DbUserNotification.html",[411,3.582,1317,1.083]],["body/entities/DbUserNotification.html",[3,0.031,4,0.054,5,0.031,10,0.152,11,0.857,13,0.923,14,0.418,15,0.005,16,0.07,22,0.92,59,0.035,60,0.14,76,1.072,98,2.314,117,1.444,121,1.179,143,2.999,207,1.862,238,0.003,239,0.003,292,0.424,295,0.632,296,0.85,335,3.504,405,3.051,411,4.23,526,0.997,530,2.062,534,0.587,537,1.211,670,2.124,676,3.071,864,4.763,879,1.33,884,1.766,975,1.684,1054,1.406,1063,3.91,1120,3.451,1317,1.279,1341,4.395,1406,5.367,1436,3.275,1447,3.778,1449,3.439,1472,2.65,1565,2.956,1587,2.914,1589,5.116,1590,5.116,1597,2.351,1599,3.036,1603,2.862,1604,3.237,1606,2.003,1607,3.009,1608,1.387,1609,1.387,1610,2.752,1614,2.783,1630,2.139,1632,3.121,1635,2.922,1636,4.05,1646,3.051,1647,3.051,1660,2.603,1661,3.643,1662,3.261,1664,2.7,1666,1.886,1667,3.261,1668,3.318,1676,2.899,1681,2.7,1690,2.557,1692,3.073,1745,2.862,1746,5.367,1799,2.689,1818,5.367,1849,4.967,2209,5.97,2235,2.59,2363,4.096,2364,6.336,2365,7.407,2366,6.336,2367,6.336,2368,5.864,2369,4.096,2370,4.096,2371,5.975,2372,4.096,2373,8.691,2374,4.096,2375,4.23,2376,4.096,2377,4.096,2378,4.096,2379,5.367,2380,4.096,2381,5.975,2382,4.096,2383,5.367,2384,4.096,2385,4.096,2386,5.51,2387,4.096,2388,4.096,2389,3.679,2390,4.096,2391,3.679,2392,4.096,2393,4.096]],["title/entities/DbUserOrganization.html",[415,3.582,1317,1.083]],["body/entities/DbUserOrganization.html",[3,0.037,4,0.037,5,0.037,10,0.287,11,0.968,13,0.977,14,0.409,15,0.005,16,0.071,22,1.091,59,0.041,60,0.167,91,2.494,98,2.612,117,1.63,121,1.398,143,2.918,198,4.415,207,1.835,238,0.003,239,0.003,292,0.427,295,0.82,296,0.754,335,4.221,410,3.793,415,4.776,460,2.131,526,1.002,530,1.967,534,0.697,537,1.113,666,3.05,670,2.074,676,3.077,756,1.846,879,1.577,884,1.994,975,1.85,1317,1.444,1449,2.992,1472,2.154,1565,3.193,1587,2.624,1597,3.584,1598,3.608,1604,2.823,1607,2.836,1608,1.644,1609,1.644,1610,3.857,1630,3.524,1632,4.375,1646,3.958,1647,3.958,1652,3.791,1660,2.115,1661,3.643,1662,2.837,1665,3.793,1666,2.237,1667,3.522,1668,3.584,1670,2.886,1689,3.37,1690,2.887,1692,2.938,1745,3.232,1768,3.37,1799,3.355,1843,4.131,2098,4.583,2099,3.3,2209,6.023,2235,3.071,2394,4.857,2395,8.801,2396,6.963,2397,4.857,2398,4.857,2399,8.376,2400,4.857,2401,4.857,2402,6.747,2403,4.857,2404,4.857,2405,4.857,2406,4.857,2407,6.747]],["title/entities/DbUserRepo.html",[373,3.75,1317,1.083]],["body/entities/DbUserRepo.html",[3,0.042,4,0.042,5,0.042,6,3.783,10,0.204,11,1.054,13,1.015,14,0.388,15,0.005,16,0.063,22,1.238,59,0.047,60,0.189,76,0.915,98,2.847,117,1.776,121,1.586,143,2.561,192,3.738,207,1.754,238,0.003,239,0.003,292,0.42,295,0.875,296,0.662,371,7.011,373,5.449,421,2.717,526,0.986,530,2.073,537,1.222,666,3.255,670,1.836,676,3.059,756,2.588,769,2.946,879,1.789,884,2.173,952,3.672,1054,1.892,1317,1.574,1402,5.066,1449,3.261,1452,4.246,1472,2.444,1565,2.802,1585,4.084,1587,2.988,1597,3.722,1603,3.522,1604,2.677,1606,2.694,1607,3.113,1608,1.865,1609,1.865,1614,3.743,1660,2.4,1661,3.53,1662,3.091,1664,3.322,1666,2.537,1667,3.091,1668,3.146,1681,3.322,1690,3.146,1692,3.202,1740,4.949,1745,3.963,1799,3.154,1858,4.084,1862,4.949,2273,6.603,2408,5.51,2409,5.51,2410,7.352,2411,5.51,2412,5.51,2413,5.51]],["title/entities/DbUserToUserFollows.html",[398,3.438,1317,1.083]],["body/entities/DbUserToUserFollows.html",[3,0.038,4,0.038,5,0.038,10,0.183,11,0.98,13,0.983,14,0.41,15,0.005,16,0.067,22,1.112,59,0.042,60,0.17,91,2.527,98,3.27,117,2.04,121,1.425,143,3.192,207,1.823,238,0.003,239,0.003,292,0.418,295,0.524,296,0.825,398,4.644,460,2.159,526,0.983,530,2.031,534,0.71,537,1.178,597,3.275,666,3.081,667,3.473,670,1.738,676,3.055,879,1.607,884,2.02,975,1.869,1256,3.089,1317,1.464,1449,3.032,1472,2.196,1565,3.493,1587,2.651,1597,3.605,1598,3.655,1604,2.851,1607,2.859,1608,1.676,1609,1.676,1610,3.148,1652,3.829,1660,2.977,1661,3.932,1662,3.551,1664,3.089,1665,3.844,1666,2.28,1667,3.853,1668,3.921,1670,2.941,1681,3.089,1682,3.57,1683,3.746,1684,3.13,1689,3.415,1690,2.925,1691,3.746,1692,3.411,1693,2.783,1745,3.275,1768,3.415,1799,2.985,1843,4.186,2098,4.644,2099,3.363,2209,5.938,2414,4.95,2415,6.509,2416,6.225,2417,4.95,2418,4.95,2419,6.14,2420,4.95,2421,4.95,2422,4.95,2423,4.95,2424,4.446]],["title/entities/DbUserTopRepo.html",[409,3.952,1317,1.083]],["body/entities/DbUserTopRepo.html",[3,0.033,4,0.033,5,0.033,10,0.272,11,0.901,13,0.946,14,0.408,15,0.005,16,0.072,20,1.906,22,0.986,59,0.037,60,0.151,91,2.322,98,3.101,117,1.935,121,1.264,143,3.071,192,3.829,198,4.111,207,1.683,238,0.003,239,0.003,292,0.424,295,0.776,296,0.793,333,3.688,334,2.347,335,3.619,409,4.907,410,5.639,460,1.984,526,0.996,530,1.981,534,0.63,537,1.126,597,3.009,666,2.887,667,3.254,670,2.015,676,3.07,756,2.655,879,1.425,884,1.857,975,1.751,1256,2.839,1317,1.345,1449,2.786,1472,1.947,1565,3.361,1585,3.254,1587,2.484,1597,3.469,1598,3.359,1604,2.671,1607,2.711,1608,1.486,1609,1.486,1610,3.688,1630,3.281,1632,4.183,1646,3.746,1647,3.746,1652,3.588,1660,2.736,1661,3.835,1662,3.368,1665,3.532,1666,2.022,1667,3.707,1668,3.772,1670,2.608,1681,2.839,1682,3.281,1683,3.443,1684,2.776,1689,3.138,1690,2.688,1691,3.443,1692,3.196,1693,2.468,1745,3.009,1768,3.138,1799,3.23,1843,3.847,1856,3.943,1859,3.943,2098,4.268,2099,2.982,2209,5.976,2235,2.776,2425,4.39,2426,5.222,2427,4.39,2428,4.39,2429,4.39,2430,4.39,2431,4.39,2432,4.39,2433,4.39,2434,4.39,2435,4.39,2436,4.39]],["title/controllers/EmojiController.html",[539,1.179,2437,4.206]],["body/controllers/EmojiController.html",[3,0.05,4,0.05,5,0.05,10,0.244,14,0.332,15,0.005,16,0.085,19,0.866,59,0.056,60,0.226,71,1.238,72,1.84,119,2.489,238,0.004,239,0.004,288,1.666,292,0.301,294,1.284,295,0.698,296,0.594,298,1.331,402,5.612,526,0.708,534,0.946,537,0.877,539,1.537,541,1.828,543,2.439,556,2.92,627,3.804,628,3.358,629,3.101,630,2.439,656,2.299,659,2.477,787,2.056,798,2.367,1002,2.234,1003,1.782,1224,4.771,1228,2.728,1229,3.039,1230,3.098,1231,3.039,1232,3.098,1769,8.742,2437,6.866,2438,6.599,2439,9.451,2440,6.599,2441,4.671,2442,5.612,2443,6.599,2444,6.599,2445,4.218,2446,6.599,2447,6.684,2448,5.927,2449,5.485,2450,6.599,2451,6.599,2452,6.599,2453,6.599,2454,6.599]],["title/modules/EmojiModule.html",[240,1.268,265,3.75]],["body/modules/EmojiModule.html",[3,0.055,4,0.055,5,0.055,15,0.005,16,0.085,19,0.957,24,2.1,59,0.062,60,0.25,64,2.213,238,0.004,239,0.004,240,2.202,242,2.696,243,3.401,248,3.401,249,2.78,250,2.737,253,3.571,265,7.538,287,3.015,302,3.358,402,4.954,541,2.434,2437,7.835,2447,7.538,2448,6.55,2449,6.061,2455,6.55,2456,6.55,2457,7.292,2458,7.292,2459,7.292]],["title/injectables/EmojiService.html",[17,0.883,2447,3.75]],["body/injectables/EmojiService.html",[3,0.048,4,0.048,5,0.048,10,0.236,14,0.325,15,0.005,16,0.085,17,1.412,19,0.837,20,2.832,22,1.433,23,2.509,24,1.836,25,2.129,26,2.254,59,0.054,60,0.219,62,2.184,64,1.935,65,1.659,67,3.926,68,2.175,71,1.517,72,1.812,82,2.592,83,2.777,102,2.212,118,4.223,119,2.467,121,1.836,122,2.077,124,4.565,238,0.004,239,0.004,288,1.63,292,0.405,294,1.573,295,0.855,296,0.728,298,1.63,402,4.332,787,1.987,810,2.014,1002,2.737,1003,1.723,1081,3.41,1125,5.493,1133,5.493,1160,4.332,1161,3.905,1162,3.789,2447,5.992,2449,5.3,2460,6.377,2461,6.377,2462,6.377,2463,8.085,2464,6.377,2465,6.377,2466,6.377,2467,6.377,2468,6.377,2469,5.3]],["title/controllers/EndorsementController.html",[539,1.179,2470,4.206]],["body/controllers/EndorsementController.html",[3,0.026,4,0.026,5,0.026,10,0.124,14,0.391,15,0.005,16,0.075,19,0.44,59,0.029,60,0.115,65,0.873,68,1.199,71,1.652,72,2.064,76,1.264,102,1.408,119,2.607,122,1.323,207,1.543,238,0.002,239,0.002,288,1.038,292,0.392,294,1.67,295,0.908,296,0.773,298,1.731,418,6.211,453,4.591,516,1.356,526,0.921,534,0.481,537,0.684,539,0.782,541,0.93,543,1.241,556,3.44,568,4.021,571,1.839,584,4.624,591,2.628,623,2.571,624,1.516,626,2.689,627,2.884,628,3.579,629,3.372,630,1.241,632,3.432,633,2.622,656,1.169,659,3.304,670,1.774,756,2.5,787,2.675,798,1.204,873,2.488,932,3.497,1002,1.136,1003,0.907,1224,5.19,1228,3.304,1229,1.546,1230,1.576,1231,1.546,1232,1.576,1362,6.524,1369,7.14,1720,4.624,1724,2.376,1786,7.244,2441,2.376,2445,3.585,2470,4.279,2471,3.356,2472,7.574,2473,7.022,2474,7.574,2475,7.022,2476,6.803,2477,7.574,2478,7.574,2479,7.022,2480,3.356,2481,3.356,2482,3.356,2483,3.356,2484,3.356,2485,5.148,2486,3.356,2487,3.015,2488,5.279,2489,5.148,2490,3.356,2491,3.356,2492,3.356,2493,3.356,2494,6.803,2495,3.356,2496,4.624,2497,3.356,2498,3.356,2499,3.015,2500,3.356,2501,5.053,2502,3.356,2503,3.356,2504,3.356,2505,5.837,2506,3.356,2507,3.356,2508,3.356,2509,3.356,2510,3.356,2511,3.356,2512,3.815,2513,2.488,2514,3.356,2515,3.356,2516,1.576,2517,4.254,2518,3.015,2519,3.015,2520,2.79,2521,2.79,2522,2.622,2523,3.015,2524,3.356,2525,3.015,2526,3.356,2527,2.79,2528,3.356,2529,3.015,2530,3.356,2531,6.803,2532,3.356,2533,3.356,2534,3.356,2535,3.356,2536,3.356,2537,3.356,2538,3.644,2539,3.497,2540,3.356,2541,3.356,2542,4.624,2543,3.356,2544,3.356,2545,3.356,2546,3.356,2547,3.356,2548,3.356,2549,4.279,2550,4.021,2551,3.356,2552,3.356,2553,3.356,2554,3.015,2555,3.356,2556,3.356]],["title/modules/EndorsementModule.html",[240,1.268,266,3.75]],["body/modules/EndorsementModule.html",[3,0.049,4,0.049,5,0.049,15,0.005,16,0.087,19,0.853,24,1.873,59,0.055,60,0.223,64,1.973,238,0.004,239,0.004,240,2.052,241,6.057,242,2.404,243,3.17,248,3.17,249,2.479,250,2.441,253,3.328,254,3.442,259,7.002,266,7.767,283,5.878,287,3.384,302,2.995,354,5.842,360,4.418,418,4.256,541,2.268,1369,5.08,2470,7.446,2517,7.09,2518,5.842,2521,5.406,2522,6.394,2523,5.842,2557,5.842,2558,5.842,2559,5.842,2560,6.503,2561,6.503,2562,4.604,2563,4.604,2564,5.842,2565,6.503]],["title/injectables/EndorsementService.html",[17,0.883,2517,3.438]],["body/injectables/EndorsementService.html",[3,0.03,4,0.03,5,0.03,10,0.144,13,0.907,14,0.375,15,0.005,16,0.075,17,1.005,18,2.703,19,0.511,20,2.296,22,0.874,23,1.532,24,1.121,59,0.033,60,0.133,62,1.555,64,1.181,65,1.498,67,3.182,68,2.092,71,1.721,72,2.11,76,1.264,82,4.051,83,3.682,85,2.651,87,3.235,90,2.644,102,1.065,119,2.65,122,1.479,202,2.784,203,5.076,207,1.067,238,0.003,239,0.003,247,4.794,288,1.161,292,0.432,294,1.815,295,0.987,296,0.839,298,1.881,418,2.547,565,3.033,588,3.767,670,1.68,756,2.552,787,2.799,802,1.484,810,1.229,1002,1.318,1003,1.051,1004,2.461,1009,5.345,1011,3.497,1012,1.944,1125,3.91,1133,3.91,1175,4.496,1362,5.985,1613,4.883,1786,4.496,2476,5.17,2496,3.496,2499,5.17,2501,3.639,2517,3.91,2519,3.496,2520,3.235,2521,3.235,2542,5.17,2566,3.892,2567,5.756,2568,5.756,2569,5.756,2570,3.639,2571,3.91,2572,3.892,2573,3.892,2574,5.756,2575,3.892,2576,5.756,2577,3.892,2578,3.892,2579,5.756,2580,3.892,2581,5.756,2582,3.892,2583,5.756,2584,3.892,2585,3.892,2586,5.756,2587,3.892,2588,3.639,2589,3.892,2590,5.756,2591,3.892,2592,3.892,2593,3.892,2594,3.892,2595,3.892,2596,3.892,2597,8.076,2598,3.892,2599,6.849,2600,3.892,2601,6.849,2602,5.756,2603,5.756,2604,3.892,2605,5.756,2606,3.892,2607,3.892,2608,3.892,2609,3.892,2610,3.892,2611,3.892]],["title/guards/EndorsementTokenGuard.html",[2522,3.952,2612,4.545]],["body/guards/EndorsementTokenGuard.html",[3,0.051,4,0.051,5,0.051,10,0.248,14,0.335,15,0.005,16,0.071,17,1.456,19,0.879,59,0.057,60,0.23,62,1.809,68,2.277,71,1.704,238,0.004,239,0.004,288,1.681,292,0.381,294,1.622,295,0.882,296,0.75,298,1.35,304,5.603,305,3.67,392,2.235,443,2.678,449,5.231,460,2.633,761,3.208,798,2.402,873,4.963,1544,5.566,1724,4.74,2522,6.512,2527,5.566,2529,8.155,2613,6.697,2614,9.079,2615,6.697,2616,9.501,2617,5.231,2618,6.697,2619,8.337,2620,8.534,2621,6.697,2622,9.079,2623,6.697,2624,6.697,2625,6.697,2626,6.697,2627,6.697,2628,8.337]],["title/classes/FilterListContributorsDto.html",[60,0.174,2629,3.952]],["body/classes/FilterListContributorsDto.html",[3,0.035,4,0.035,5,0.035,6,3.762,10,0.171,11,0.934,13,1.052,14,0.417,15,0.005,16,0.064,31,3.287,59,0.039,60,0.259,71,0.867,76,1.265,100,2.922,117,2.166,142,2.74,186,3.584,189,4.612,200,3.57,238,0.003,239,0.003,292,0.421,296,0.891,443,3.762,516,2.362,522,1.158,526,0.962,530,1.943,534,0.663,535,3.173,536,1.383,537,0.866,682,5.895,703,5.342,830,2.89,884,2.554,974,4.225,975,1.956,978,2.532,1057,3.475,1058,2.629,1091,3.365,1099,3.326,1100,3.254,1107,2.359,1117,4.086,1119,3.942,1183,4.939,1197,4.264,1256,2.944,1353,2.746,1354,2.746,1436,2.532,1565,1.761,1674,4.829,1993,5.415,2306,5.852,2629,5.089,2630,9.408,2631,3.841,2632,7.546,2633,4.829,2634,5.342,2635,4.612,2636,4.15,2637,4.62,2638,4.15,2639,4.62,2640,6.515,2641,6.515,2642,6.515,2643,8.195,2644,4.62,2645,4.62,2646,6.515,2647,6.515,2648,5.089,2649,4.62,2650,4.62,2651,4.62,2652,3.609,2653,4.62,2654,6.778,2655,4.264,2656,4.829,2657,4.15,2658,4.62,2659,4.62,2660,4.62,2661,6.515,2662,6.515,2663,4.62,2664,4.62,2665,3.609,2666,3.424,2667,3.424]],["title/classes/FilterOptionsDto.html",[60,0.174,2668,3.75]],["body/classes/FilterOptionsDto.html",[3,0.038,4,0.038,5,0.038,10,0.185,11,0.986,13,0.953,14,0.411,15,0.005,16,0.072,59,0.043,60,0.236,76,1.226,78,3.334,93,2.43,100,2.662,117,2.423,119,2.404,140,2.298,142,3.564,186,3.132,238,0.003,239,0.003,292,0.444,296,0.931,421,2.541,516,2.757,522,1.251,526,1.044,530,1.42,534,0.716,535,3.282,536,1.495,756,2.151,769,2.669,830,2.214,884,1.475,947,2.298,1003,1.857,1054,2.361,1057,3.166,1058,2.74,1066,4.753,1086,2.806,1088,3.768,1089,3.591,1091,3.336,1093,3.676,1094,4.205,1098,2.548,1099,3.51,1100,2.493,1101,2.669,1102,2.883,1103,3.928,1104,2.548,1105,2.735,1106,2.806,1107,2.548,1108,2.806,1109,3.049,1110,2.607,1111,2.735,1112,2.735,1113,3.51,1114,2.806,1115,2.548,1116,2.806,1117,3.942,1118,2.966,1119,3.803,1120,2.883,1379,4.149,2310,4.972,2635,4.867,2668,5.096,2669,8.888,2670,4.972,2671,5.343,2672,5.808,2673,3.699,2674,4.149,2675,3.899,2676,4.149,2677,3.533,2678,3.899,2679,4.483,2680,3.391,2681,3.699]],["title/classes/FilteredUsersDto.html",[60,0.174,2682,4.206]],["body/classes/FilteredUsersDto.html",[3,0.044,4,0.044,5,0.044,8,3.633,10,0.214,11,1.088,13,1.048,14,0.415,15,0.005,16,0.072,59,0.049,60,0.29,71,1.084,76,1.12,85,3.492,117,2.361,186,3.741,238,0.003,239,0.003,292,0.411,296,0.809,453,4.994,516,2.641,522,1.448,526,0.908,527,2.201,533,2.803,534,0.828,536,1.729,537,0.767,830,3.363,884,2.76,975,1.81,978,3.165,1057,3.899,1058,2.95,1091,3.178,1099,3.872,1100,3.788,1107,2.948,1117,3.756,1119,3.623,1183,5.541,1228,3.135,1353,3.431,1354,3.431,1435,4.8,1471,5.187,2310,4.795,2633,5.62,2634,5.994,2638,5.187,2652,4.511,2655,4.963,2656,5.62,2657,5.187,2666,4.28,2667,4.28,2682,6.303,2683,9.339,2684,4.8,2685,5.187,2686,5.187,2687,5.62,2688,5.774,2689,5.187,2690,5.187]],["title/classes/FollowManyUsersDto.html",[60,0.174,2691,4.206]],["body/classes/FollowManyUsersDto.html",[3,0.054,4,0.054,5,0.054,10,0.265,11,1.245,14,0.376,15,0.005,16,0.074,59,0.061,60,0.298,76,1.21,238,0.004,239,0.004,292,0.326,443,3.737,522,1.792,526,0.767,527,2.725,530,1.792,533,3.208,534,1.025,535,3.361,536,2.14,537,0.95,676,2.762,870,4.519,972,4.879,974,4.753,1197,4.678,1436,3.917,1456,6.42,2303,7.778,2416,5.896,2684,5.941,2691,7.213,2692,8.678,2693,6.432,2694,7.148,2695,7.148,2696,7.148]],["title/classes/GenerateCodeExplanationDto.html",[60,0.174,898,3.952]],["body/classes/GenerateCodeExplanationDto.html",[3,0.045,4,0.045,5,0.045,10,0.22,11,1.107,13,0.975,14,0.414,15,0.005,16,0.066,59,0.051,60,0.265,76,1.225,117,1.866,140,2.734,238,0.003,239,0.003,292,0.415,522,1.488,526,0.975,527,3.464,529,5.079,530,1.995,533,3.483,534,0.851,535,3.323,536,1.777,537,1.351,823,5.769,867,6.166,892,4.104,898,6.031,975,2.169,1182,3.429,1326,4.4,1329,6.36,1330,4.4,1331,5.723,1332,5.723,1333,5.723,1334,5.723,1335,5.723,1336,5.723,1337,5.723,1338,5.723,1339,5.723,1341,3.942,1342,4.202,1344,4.202,1352,5.426,1353,3.527,1354,3.527,1355,4.202,1356,4.202,1357,4.202,1358,4.202,1359,4.202,1361,4.4,2697,7.36,2698,5.936,2699,6.704,2700,5.936,2701,5.936,2702,5.936,2703,5.936]],["title/classes/GenerateCodeRefactorSuggestionDto.html",[60,0.174,929,3.952]],["body/classes/GenerateCodeRefactorSuggestionDto.html",[3,0.045,4,0.045,5,0.045,10,0.218,11,1.102,13,0.972,14,0.414,15,0.005,16,0.065,59,0.05,60,0.263,76,1.222,117,1.856,140,2.711,238,0.003,239,0.003,292,0.414,522,1.476,526,0.972,527,3.454,529,5.072,530,1.99,533,3.474,534,0.844,535,3.31,536,1.763,537,1.281,823,5.754,867,6.15,892,4.093,913,6.155,926,7.34,929,5.999,975,2.162,1182,3.401,1326,4.364,1329,6.335,1330,4.364,1331,5.692,1332,5.692,1333,5.692,1334,5.692,1335,5.692,1336,5.692,1337,5.692,1338,5.692,1339,5.692,1341,3.921,1342,4.168,1344,4.168,1352,5.405,1353,3.498,1354,3.498,1355,4.168,1356,4.168,1357,4.168,1358,4.168,1359,4.168,1361,4.364,2697,7.34,2699,6.677,2704,5.288,2705,5.888,2706,5.288,2707,5.888,2708,5.288]],["title/classes/GenerateCodeTestSuggestionDto.html",[60,0.174,957,3.952]],["body/classes/GenerateCodeTestSuggestionDto.html",[3,0.049,4,0.049,5,0.049,10,0.24,11,1.171,13,1.007,14,0.412,15,0.005,16,0.07,59,0.055,60,0.28,76,1.114,140,2.984,238,0.004,239,0.004,292,0.408,522,1.624,526,0.959,527,3.409,529,5.116,530,1.939,533,3.471,534,0.929,535,3.163,536,1.94,537,1.286,867,6.335,892,4.09,913,5.549,957,6.38,960,6.959,975,2.241,1326,4.803,1341,4.17,1342,4.587,1344,4.587,1352,5.655,1353,3.85,1354,3.85,1355,4.587,1356,4.587,1357,4.587,1358,4.587,1359,4.587,2697,7.335,2699,6.986,2704,5.821,2706,5.821,2708,5.821,2709,6.48]],["title/classes/GeneratePullRequestDescriptionDto.html",[60,0.174,2710,3.952]],["body/classes/GeneratePullRequestDescriptionDto.html",[3,0.039,4,0.039,5,0.039,10,0.188,11,0.999,13,0.916,14,0.417,15,0.005,16,0.059,59,0.043,60,0.239,76,1.276,117,1.684,140,2.344,196,4.121,200,4.683,238,0.003,239,0.003,292,0.422,296,0.769,392,3.158,443,2.786,522,1.276,526,0.991,527,3.257,530,2.042,533,3.308,534,0.73,535,3.309,536,1.524,537,1.354,821,6.335,823,5.48,867,5.857,881,5.443,892,4.121,974,3.407,975,2.04,984,4.406,1109,3.091,1117,3.524,1119,3.4,1182,2.94,1329,5.889,1330,3.772,1331,5.164,1332,5.164,1333,5.164,1334,5.164,1335,5.164,1336,5.164,1337,5.164,1338,5.164,1339,5.164,1341,3.558,1342,3.603,1344,3.603,1346,4.231,1347,5.792,1348,5.792,1349,5.792,1350,6.604,1352,5.024,1353,3.024,1354,3.024,1355,3.603,1356,3.603,1357,3.603,1358,3.603,1359,3.603,1360,4.231,1361,3.772,1923,3.772,2697,7.391,2699,6.206,2710,5.443,2711,5.09,2712,7.945,2713,8.039,2714,5.09,2715,5.09,2716,5.09,2717,5.09,2718,5.09,2719,5.09,2720,5.09,2721,5.09,2722,5.09,2723,5.09,2724,5.09,2725,4.572,2726,5.09,2727,5.09,2728,5.09,2729,5.09]],["title/controllers/HealthController.html",[539,1.179,2730,4.206]],["body/controllers/HealthController.html",[3,0.042,4,0.042,5,0.042,10,0.206,15,0.005,16,0.076,19,0.731,59,0.047,60,0.191,62,1.504,65,2.469,71,1.39,72,2.13,238,0.003,239,0.003,288,1.493,292,0.338,298,1.493,304,4.677,305,3.052,309,4.629,421,3.277,457,4.35,509,4.629,513,6.155,514,6.533,516,1.467,526,0.794,534,0.799,539,1.297,541,1.543,543,2.059,556,3.134,628,3.381,629,3.122,630,2.059,656,3.373,659,2.779,787,2.307,1470,5.268,2730,6.155,2731,5.569,2732,9.489,2733,9.489,2734,5.569,2735,7.404,2736,7.404,2737,5.569,2738,5.569,2739,7.404,2740,5.569,2741,7.404,2742,7.404,2743,7.404,2744,8.318,2745,7.404,2746,7.404,2747,5.569,2748,5.569,2749,5.569,2750,5.569,2751,5.569,2752,6.651,2753,7.404,2754,5.569,2755,5.569,2756,5.569,2757,5.569,2758,5.569,2759,5.569,2760,7.404,2761,5.569,2762,5.569,2763,5.569,2764,5.569,2765,5.569,2766,5.569,2767,5.569,2768,5.569,2769,5.569,2770,5.569,2771,5.569,2772,5.569,2773,5.569,2774,5.569,2775,5.569,2776,5.569]],["title/modules/HealthModule.html",[240,1.268,267,3.75]],["body/modules/HealthModule.html",[3,0.059,4,0.059,5,0.059,15,0.005,16,0.083,19,1.021,59,0.066,60,0.267,238,0.004,239,0.004,240,2.288,242,2.876,267,6.766,287,3.216,308,8.2,309,6.467,541,2.529,2730,8.053,2777,7.78,2778,7.78]],["title/controllers/HighlightController.html",[539,1.179,2779,4.206]],["body/controllers/HighlightController.html",[3,0.027,4,0.027,5,0.027,8,2.602,10,0.133,13,1.041,14,0.403,15,0.005,16,0.079,19,0.472,25,1.202,26,1.273,28,1.761,59,0.031,60,0.123,71,1.6,72,2.052,77,3.081,78,2.137,119,2.433,202,2.208,207,1.007,238,0.002,239,0.002,288,1.095,292,0.389,294,1.659,295,0.968,296,0.767,298,1.719,349,1.761,392,2.182,394,5.049,395,2.277,396,2.14,405,4.81,410,3.054,516,0.949,526,0.914,534,0.516,537,1.092,539,0.839,541,0.998,543,1.331,556,3.401,561,5.029,565,3.335,571,1.973,623,1.799,624,1.627,625,3.011,627,3.353,628,3.568,629,3.294,630,1.331,650,1.541,656,1.254,658,2.501,659,3.2,670,2.091,783,4.392,789,3.803,790,1.691,798,1.292,975,1.961,1002,1.219,1003,1.467,1224,5.069,1228,1.489,1229,1.658,1230,1.691,1231,1.658,1232,1.691,1656,4.878,1749,4.846,1808,5.814,1877,4.025,2300,3.844,2309,5.579,2314,4.628,2488,4.934,2512,4.025,2516,1.691,2571,3.69,2779,4.514,2780,3.601,2781,6.319,2782,6.539,2783,7.281,2784,6.54,2785,7.281,2786,7.281,2787,7.281,2788,6.539,2789,3.601,2790,3.601,2791,5.431,2792,3.326,2793,5.431,2794,4.242,2795,5.396,2796,4.878,2797,4.846,2798,3.601,2799,3.601,2800,2.993,2801,5.873,2802,3.601,2803,3.234,2804,3.234,2805,3.601,2806,3.601,2807,3.601,2808,2.993,2809,3.601,2810,3.601,2811,3.234,2812,3.601,2813,3.601,2814,3.234,2815,3.234,2816,3.234,2817,3.234,2818,3.601,2819,3.601,2820,3.601,2821,5.431,2822,3.601,2823,4.094,2824,3.893,2825,1.926,2826,4.442,2827,3.601,2828,2.813,2829,3.601,2830,3.601,2831,3.601,2832,2.993,2833,5.435,2834,3.601,2835,3.234,2836,2.993,2837,3.601,2838,3.601,2839,3.601,2840,3.326,2841,3.601,2842,3.601,2843,3.601,2844,3.234,2845,3.234,2846,3.601,2847,3.234,2848,3.234,2849,3.601,2850,3.234,2851,3.234,2852,3.601,2853,3.601]],["title/modules/HighlightModule.html",[240,1.268,268,3.75]],["body/modules/HighlightModule.html",[3,0.055,4,0.055,5,0.055,15,0.005,16,0.085,19,0.957,24,2.1,59,0.062,60,0.25,64,2.213,238,0.004,239,0.004,240,2.202,242,2.696,243,3.401,248,3.401,249,2.78,250,2.737,268,7.538,283,6.044,287,3.631,302,3.358,360,4.954,394,4.1,395,4.611,396,4.333,541,2.434,2779,7.835,2854,7.292,2855,7.292,2856,7.292,2857,6.55,2858,7.292]],["title/classes/HighlightOptionsDto.html",[60,0.174,2309,3.311]],["body/classes/HighlightOptionsDto.html",[3,0.038,4,0.038,5,0.038,10,0.187,11,0.996,13,0.958,14,0.404,15,0.005,16,0.073,31,3.451,59,0.059,60,0.272,76,1.149,78,3.354,85,2.331,93,2.454,100,2.688,117,2.386,119,2.412,140,2.331,142,3.585,186,3.151,207,1.287,238,0.003,239,0.003,292,0.431,296,0.916,395,3.2,404,3.099,405,4.56,406,3.312,421,2.566,443,2.776,516,2.72,522,1.269,526,1.013,530,1.845,534,0.726,535,3.301,536,1.516,537,1.053,756,2.443,769,2.707,830,2.245,884,1.496,947,2.331,974,2.475,1002,1.713,1003,1.367,1054,2.72,1057,3.196,1058,2.418,1066,4.776,1086,2.846,1088,3.804,1089,3.625,1091,3.352,1093,2.707,1094,2.707,1097,4.207,1098,2.584,1099,3.544,1100,2.528,1101,2.707,1102,2.923,1103,3.957,1104,2.584,1105,2.774,1106,2.846,1107,2.584,1108,2.846,1109,3.781,1110,2.643,1111,2.774,1112,2.774,1113,3.544,1114,2.846,1115,2.584,1116,2.846,1117,3.781,1119,3.648,1197,3.312,1753,3.954,2276,3.954,2277,3.954,2300,3.583,2301,7.116,2302,4.207,2303,3.954,2304,4.207,2308,4.546,2309,4.543,2310,5.39,2311,6.235,2312,4.546,2313,4.546,2675,3.954,2859,5.061,2860,5.061]],["title/injectables/HttpLoggerMiddleware.html",[17,0.883,361,4.206]],["body/injectables/HttpLoggerMiddleware.html",[3,0.047,4,0.047,5,0.047,10,0.23,11,1.142,14,0.25,15,0.005,16,0.079,17,1.39,19,0.816,59,0.068,60,0.213,65,2.283,68,2.155,71,1.647,102,2.178,117,1.923,148,5.665,238,0.003,239,0.003,288,1.605,292,0.364,294,1.211,295,0.658,296,0.56,298,1.255,299,4.405,317,5.172,318,5.172,319,5.172,361,7.295,392,3.265,462,6.285,511,5.9,810,1.966,837,6.84,864,4.598,1091,2.336,1543,5.59,1544,5.172,1780,5.172,2861,8.777,2862,5.9,2863,7.96,2864,9.251,2865,6.223,2866,7.96,2867,6.223,2868,7.96,2869,5.59,2870,5.59,2871,6.223,2872,6.223,2873,5.59,2874,6.223,2875,6.223,2876,7.96,2877,8.31,2878,7.96,2879,6.223,2880,6.223,2881,6.223,2882,6.223,2883,6.223,2884,6.223]],["title/controllers/InsightController.html",[539,1.179,2885,4.206]],["body/controllers/InsightController.html",[3,0.036,4,0.036,5,0.036,10,0.176,13,1.032,14,0.396,15,0.005,16,0.082,19,0.623,25,1.585,26,1.678,59,0.04,60,0.163,68,1.106,71,1.246,72,1.964,77,2.896,102,1.299,119,1.665,122,1.706,207,1.42,238,0.003,239,0.003,288,1.339,292,0.35,294,1.49,295,0.923,296,0.689,298,1.544,367,5.079,392,2.556,516,1.251,526,0.821,534,0.681,537,1.16,539,1.106,541,1.316,543,1.755,556,3.197,558,3.551,559,3.226,561,4.066,565,3.244,571,2.602,624,2.145,625,3.058,626,3.468,627,3.527,628,3.372,629,3.113,630,1.755,650,2.032,656,1.654,658,2.187,659,2.875,670,2.136,783,4.435,784,2.67,789,4,790,2.23,798,1.703,802,1.81,975,1.98,1003,1.283,1058,3.234,1228,1.963,1392,5.027,1808,4.701,1828,4.346,2445,2.424,2488,4.663,2513,3.519,2516,2.23,2571,4.512,2800,3.947,2823,4.306,2824,4.095,2825,2.539,2836,3.947,2885,5.52,2886,4.748,2887,8.294,2888,8.294,2889,8.294,2890,4.748,2891,5.871,2892,4.748,2893,4.748,2894,4.748,2895,4.748,2896,3.709,2897,5.52,2898,4.748,2899,5.965,2900,5.187,2901,4.748,2902,4.748,2903,4.748,2904,3.947,2905,4.701,2906,4.265,2907,4.265,2908,4.748,2909,4.701,2910,6.641,2911,5.187,2912,3.709,2913,3.947,2914,3.519,2915,5.012,2916,3.226,2917,3.709,2918,4.748,2919,3.947,2920,3.709,2921,4.748,2922,5.52,2923,4.748,2924,4.748,2925,3.947,2926,4.748,2927,4.265,2928,4.748]],["title/injectables/InsightMemberService.html",[17,0.883,2929,3.582]],["body/injectables/InsightMemberService.html",[3,0.033,4,0.033,5,0.033,10,0.159,13,1.009,14,0.363,15,0.005,16,0.079,17,1.082,18,2.909,19,0.565,20,2.409,21,3.881,22,0.967,23,1.694,24,1.24,25,1.437,26,1.522,59,0.037,60,0.148,62,1.674,64,1.307,65,1.888,67,3.338,68,2.103,69,2.853,71,1.765,72,2.073,76,1.216,77,2.805,82,3.561,83,3.161,85,1.983,102,1.178,117,1.04,119,2.196,122,1.865,234,3.396,238,0.003,239,0.003,247,4.946,288,1.249,292,0.422,294,1.756,295,0.955,296,0.812,298,1.82,400,5.138,401,3.364,443,3.174,460,1.36,565,3.017,670,1.867,673,5.363,787,2.262,802,1.641,810,1.36,1002,1.458,1003,1.163,1004,2.723,1009,2.723,1011,4.294,1012,3.095,1091,1.616,1175,3.364,1392,2.249,1828,2.818,2469,3.579,2570,3.918,2588,3.918,2915,5.195,2916,2.925,2927,3.868,2929,4.386,2930,8.45,2931,4.306,2932,5.565,2933,7.258,2934,5.565,2935,6.196,2936,5.565,2937,4.306,2938,7.258,2939,4.306,2940,6.196,2941,6.196,2942,4.306,2943,7.555,2944,4.306,2945,4.306,2946,7.937,2947,8.411,2948,7.938,2949,4.306,2950,6.196,2951,4.306,2952,4.306,2953,6.196,2954,4.306,2955,5.565,2956,4.306,2957,3.364,2958,4.306,2959,4.306,2960,4.306,2961,4.306,2962,4.306,2963,4.306,2964,4.306,2965,6.196,2966,4.306,2967,4.306,2968,3.579,2969,4.306,2970,4.306,2971,4.306,2972,4.306,2973,4.306,2974,4.306,2975,4.306]],["title/classes/InsightOptionsDto.html",[60,0.174,2976,4.545]],["body/classes/InsightOptionsDto.html",[3,0.037,4,0.037,5,0.037,10,0.181,11,0.973,13,0.947,14,0.408,15,0.005,16,0.066,37,2.91,59,0.058,60,0.233,76,1.189,78,3.307,93,2.398,100,2.627,117,2.433,119,2.393,140,2.255,142,3.534,186,3.107,202,1.991,238,0.003,239,0.003,292,0.443,296,0.929,410,2.753,516,2.752,522,1.227,526,1.039,534,0.702,535,3.255,536,1.466,756,2.13,830,2.172,884,1.447,947,2.255,971,2.91,1002,1.658,1003,1.323,1054,2.33,1057,3.124,1058,2.364,1063,3.204,1066,4.72,1086,2.753,1088,3.718,1089,3.543,1091,3.428,1093,3.628,1094,4.163,1097,4.07,1098,2.5,1099,3.464,1100,2.446,1101,2.618,1102,2.828,1103,3.889,1104,2.5,1105,2.683,1106,2.753,1107,2.5,1108,2.753,1109,3.009,1110,2.557,1111,2.683,1112,2.683,1113,3.464,1114,2.753,1115,2.5,1116,2.753,1117,3.915,1118,2.91,1119,3.777,1120,3.919,1254,5.028,1936,3.096,2310,4.922,2635,3.466,2655,3.204,2670,4.922,2671,5.289,2672,5.774,2673,3.629,2677,4.803,2681,3.629,2976,6.094,2977,7.337,2978,4.896,2979,4.896,2980,7.785,2981,4.896,2982,4.896,2983,4.07,2984,4.07,2985,4.07,2986,4.07,2987,4.07]],["title/classes/InsightPageOptionsDto.html",[60,0.174,2891,3.582]],["body/classes/InsightPageOptionsDto.html",[3,0.046,4,0.046,5,0.046,10,0.225,11,1.124,13,1.018,14,0.407,15,0.005,16,0.052,59,0.052,60,0.208,78,3.608,93,2.771,100,3.035,117,2.467,119,2.512,140,2.798,142,3.856,186,3.389,238,0.003,239,0.003,292,0.433,296,0.919,516,2.689,522,1.523,526,1.018,830,2.695,884,1.796,947,2.798,1002,2.057,1003,1.641,1054,2.692,1057,3.61,1058,3.023,1066,5.075,1086,3.416,1088,4.296,1089,4.094,1091,3.562,1093,3.249,1094,3.249,1098,3.102,1099,4.002,1100,3.035,1101,3.249,1102,3.509,1103,4.335,1104,3.102,1105,3.33,1106,3.416,1107,3.102,1108,3.416,1109,3.477,1110,3.173,1111,3.33,1112,3.33,1113,4.002,1114,3.416,1115,3.102,1116,3.416,2891,5.549,2977,5.05]],["title/injectables/InsightRepoService.html",[17,0.883,2988,3.75]],["body/injectables/InsightRepoService.html",[3,0.044,4,0.044,5,0.044,10,0.214,13,1.029,14,0.341,15,0.005,16,0.083,17,1.327,19,0.76,20,2.732,22,1.301,23,2.279,24,1.668,59,0.049,60,0.199,62,2.053,64,1.758,65,1.977,68,1.35,71,1.426,72,1.958,122,1.489,192,2.617,202,2.355,238,0.003,239,0.003,288,1.532,292,0.387,294,1.65,295,0.897,296,0.763,298,1.532,349,2.833,369,4.101,427,4.525,460,1.83,656,2.018,670,1.286,675,3.175,686,2.833,694,3.175,695,5.163,752,5.379,755,4.525,756,2.463,763,3.936,787,2.643,810,1.83,852,3.175,853,3.547,887,3.175,984,3.663,1077,4.525,1392,3.026,1396,6.116,1398,3.936,1399,4.815,1402,3.547,1833,4.294,2930,8.087,2946,6.317,2957,4.525,2988,5.632,2989,5.793,2990,7.599,2991,7.599,2992,5.793,2993,6.642,2994,5.793,2995,7.599,2996,7.599,2997,5.793,2998,7.599,2999,5.793,3000,4.525,3001,5.203,3002,4.525,3003,5.793,3004,4.815,3005,5.203,3006,4.815,3007,4.815,3008,5.203,3009,4.815,3010,5.793,3011,5.203,3012,5.203,3013,5.203,3014,4.815,3015,4.815,3016,5.203,3017,5.793,3018,4.815,3019,5.203,3020,5.793]],["title/modules/InsightsModule.html",[240,1.268,269,3.75]],["body/modules/InsightsModule.html",[3,0.044,4,0.044,5,0.044,15,0.005,16,0.088,19,0.766,24,1.682,59,0.05,60,0.2,64,1.772,207,1.417,238,0.003,239,0.003,240,1.915,241,5.888,242,2.159,243,2.958,248,2.958,249,2.226,250,2.192,253,3.106,254,3.213,269,7.798,273,6.806,283,5.713,287,3.158,302,2.689,349,2.856,360,3.967,367,3.576,369,5.408,400,5.408,401,4.562,427,4.562,428,5.246,541,2.117,1392,4.447,2562,4.134,2563,4.134,2885,7.077,2914,4.328,2915,6.727,2916,3.967,2929,6.806,2957,5.968,2988,7.619,3021,5.246,3022,5.84,3023,5.246,3024,5.246,3025,5.84,3026,7.077,3027,7.077,3028,7.64,3029,4.562,3030,5.84,3031,4.854,3032,5.84]],["title/injectables/InsightsService.html",[17,0.883,2915,3.311]],["body/injectables/InsightsService.html",[3,0.031,4,0.031,5,0.031,10,0.149,13,0.992,14,0.356,15,0.005,16,0.079,17,1.03,18,2.771,19,0.528,20,2.334,21,3.736,22,0.905,23,1.585,24,1.16,25,1.344,26,1.424,59,0.034,60,0.138,62,1.594,64,1.222,65,1.536,67,3.235,68,2.246,69,2.718,71,1.659,72,2.055,76,0.87,77,2.74,82,3.479,83,1.754,91,2.182,102,2.24,118,4.018,119,1.928,121,1.699,122,2.199,124,4.324,202,1.637,207,0.747,234,3.829,238,0.003,239,0.003,288,1.19,292,0.414,294,1.72,295,0.935,296,0.796,298,1.783,367,3.614,427,3.146,460,1.272,565,3.319,656,1.403,670,1.818,673,5.24,675,2.207,686,2.886,694,2.207,695,4.01,752,4.178,755,3.146,756,1.102,763,2.736,787,2.397,802,1.535,810,1.272,852,2.207,853,2.466,887,2.207,984,2.546,1002,1.363,1003,1.088,1011,3.567,1012,2.012,1058,1.403,1077,3.146,1081,2.153,1160,4.01,1161,3.614,1162,3.507,1392,4.47,1613,3.409,1652,1.969,1799,2.25,1828,2.635,1832,2.985,1833,2.985,1837,2.985,1855,3.617,1863,6.275,2570,3.732,2588,3.732,2891,6.259,2914,2.985,2915,3.862,2917,3.146,2993,6.007,3000,3.146,3001,3.617,3002,3.146,3004,3.347,3005,3.617,3006,3.347,3007,3.347,3008,3.617,3009,3.347,3011,3.617,3012,3.617,3013,3.617,3014,3.347,3015,3.347,3016,3.617,3033,4.027,3034,5.902,3035,4.178,3036,4.906,3037,5.902,3038,5.902,3039,4.027,3040,4.027,3041,5.902,3042,5.902,3043,4.027,3044,4.027,3045,4.61,3046,4.027,3047,4.906,3048,4.027,3049,4.027,3050,5.902,3051,4.027,3052,5.902,3053,4.027,3054,4.027,3055,6.986,3056,4.027,3057,4.027,3058,6.986,3059,6.986,3060,4.027,3061,4.027,3062,4.027,3063,4.027,3064,4.027,3065,4.027,3066,5.902,3067,3.617,3068,4.027,3069,4.027,3070,4.027,3071,4.027,3072,5.902,3073,5.902,3074,4.027,3075,4.027]],["title/controllers/IssueSummaryController.html",[539,1.179,3076,4.206]],["body/controllers/IssueSummaryController.html",[3,0.049,4,0.049,5,0.049,10,0.237,14,0.326,15,0.005,16,0.082,19,0.84,59,0.055,60,0.219,68,1.491,71,1.201,72,1.815,102,1.751,122,1.644,238,0.004,239,0.004,288,1.634,292,0.292,294,1.245,295,0.677,296,0.576,298,1.29,392,2.136,516,1.686,526,0.686,534,0.918,537,0.85,539,1.491,541,1.773,543,2.366,556,3.579,591,3.267,623,3.196,624,2.891,625,3.731,626,4.232,629,3.041,630,2.366,650,2.738,656,2.229,658,2.947,659,2.402,772,5.748,777,5.748,779,5.123,783,4.333,784,3.598,785,5.748,787,1.994,788,4.962,789,4.232,790,3.005,791,3.066,793,4.999,795,4.999,798,2.296,799,5.748,802,2.439,808,6.295,1410,7.695,1705,4.188,3076,6.735,3077,6.735,3078,8.396,3079,6.399,3080,6.399,3081,8.103,3082,6.59,3083,6.399,3084,6.399,3085,6.399,3086,6.399]],["title/modules/IssueSummaryModule.html",[240,1.268,270,3.75]],["body/modules/IssueSummaryModule.html",[3,0.053,4,0.053,5,0.053,15,0.005,16,0.082,19,0.921,59,0.06,60,0.241,238,0.004,239,0.004,240,2.152,242,2.596,243,3.325,248,3.325,249,2.677,250,2.636,253,3.49,254,3.61,270,7.695,272,6.597,287,3.549,421,2.596,422,3.948,423,5.485,541,2.379,795,5.485,807,6.308,808,6.077,809,6.308,3076,7.708,3077,5.837,3082,7.812,3087,6.308,3088,7.022,3089,6.308,3090,6.308]],["title/injectables/IssueSummaryService.html",[17,0.883,3082,3.75]],["body/injectables/IssueSummaryService.html",[3,0.044,4,0.044,5,0.044,10,0.214,13,0.908,14,0.341,15,0.005,16,0.072,17,1.324,19,0.758,59,0.049,60,0.198,62,1.56,65,2.203,68,1.767,71,1.423,72,1.728,74,3.165,76,1.194,238,0.003,239,0.003,288,1.529,292,0.387,294,1.647,295,0.896,296,0.762,298,1.529,421,2.134,422,3.247,510,4.088,537,0.767,556,3.301,675,3.165,694,3.165,779,3.651,787,2.363,791,2.766,793,4.511,798,2.071,808,6.785,810,1.824,812,5.187,813,5.368,814,4.088,815,5.696,816,5.187,819,5.62,820,5.885,821,6.611,822,5.187,823,5.185,824,3.923,825,4.088,826,4.088,827,3.779,828,4.28,830,2.561,831,4.088,832,4.28,833,4.28,834,4.28,835,4.28,836,4.8,837,3.923,838,4.511,839,5.187,840,5.187,841,4.088,842,4.963,843,3.431,846,5.368,847,4.088,848,4.28,849,5.187,850,4.8,851,4.088,852,4.928,853,3.536,854,4.088,855,4.088,949,3.923,1110,3.016,1410,7.024,1415,4.963,1705,3.779,3077,7.474,3078,6.812,3082,5.62,3091,7.583,3092,5.774,3093,5.187,3094,5.774,3095,5.187,3096,7.583,3097,5.774,3098,5.774,3099,5.774,3100,5.774]],["title/modules/LogModule.html",[240,1.268,271,3.75]],["body/modules/LogModule.html",[3,0.053,4,0.053,5,0.053,15,0.005,16,0.086,19,0.919,24,2.018,59,0.06,60,0.24,238,0.004,239,0.004,240,2.15,242,2.591,243,3.321,248,3.321,249,2.672,250,2.631,253,3.486,254,3.606,271,7.693,287,2.897,302,3.228,303,7.702,305,3.841,384,5.195,462,4.762,479,5.826,1480,8.231,1491,7.468,1506,6.296,3101,6.296,3102,6.296,3103,6.296,3104,7.009,3105,6.296,3106,7.009,3107,7.009]],["title/injectables/LogService.html",[17,0.883,1491,3.75]],["body/injectables/LogService.html",[3,0.052,4,0.052,5,0.052,10,0.252,14,0.339,15,0.005,16,0.084,17,1.471,19,0.893,20,2.9,22,1.53,23,2.68,24,1.961,59,0.058,60,0.234,62,2.276,65,1.772,68,1.587,71,1.278,72,1.867,122,1.75,238,0.004,239,0.004,288,1.699,292,0.385,294,1.639,295,0.891,296,0.758,298,1.373,384,5.047,443,2.723,479,5.661,787,2.122,791,3.262,810,2.151,887,3.732,1417,7.944,1486,5.661,1491,6.244,3105,6.117,3108,6.81,3109,8.425,3110,6.81,3111,6.81,3112,8.425,3113,8.425,3114,6.81,3115,6.81,3116,6.81,3117,8.425,3118,6.81,3119,6.81,3120,6.81]],["title/modules/OpenAiModule.html",[240,1.268,272,3.311]],["body/modules/OpenAiModule.html",[3,0.056,4,0.056,5,0.056,15,0.005,16,0.076,19,0.972,59,0.063,60,0.254,238,0.004,239,0.004,240,2.224,242,2.74,243,3.435,248,3.435,249,2.825,250,2.782,253,3.606,254,3.73,272,6.754,421,2.74,422,4.168,815,6.304,824,5.036,857,6.161,3121,6.658,3122,6.658,3123,6.658,3124,7.412]],["title/injectables/OpenAiService.html",[17,0.883,815,3.007]],["body/injectables/OpenAiService.html",[0,3.527,3,0.045,4,0.045,5,0.045,10,0.22,13,0.92,14,0.345,15,0.005,16,0.073,17,1.348,19,0.779,59,0.051,60,0.204,62,1.604,68,1.999,71,1.114,72,1.751,76,1.225,102,1.624,122,1.984,146,4.4,147,4.4,148,3.635,149,4.4,186,2.194,207,1.101,238,0.003,239,0.003,288,1.557,292,0.353,294,1.502,295,0.817,296,0.695,298,1.197,304,5.43,305,3.253,422,4.825,511,4.4,591,3.031,623,2.965,662,6.031,787,1.85,798,2.129,802,2.263,810,1.875,815,4.588,837,4.033,842,5.948,856,6.418,857,7.133,858,5.332,859,5.332,861,8.675,862,5.332,863,5.332,864,3.429,865,6.936,866,8.163,867,6.166,868,5.332,869,5.332,870,3.753,871,5.332,872,5.332,873,4.4,874,5.332,875,4.934,876,5.332,877,5.332,878,5.332,879,1.927,880,5.332,881,4.637,882,5.332,883,6.936,884,1.754,885,5.332,886,5.332,887,3.253,888,5.332,889,5.332,890,5.332,2617,4.637,3125,7.721,3126,5.936,3127,5.936]],["title/classes/PageDto.html",[25,1.689,60,0.174]],["body/classes/PageDto.html",[3,0.05,4,0.05,5,0.05,10,0.241,11,1.175,14,0.404,15,0.005,16,0.08,25,2.735,59,0.055,60,0.307,62,1.76,124,4.968,238,0.004,239,0.004,292,0.409,294,1.267,295,0.689,296,0.586,443,3.277,516,2.607,522,1.633,526,0.879,533,3.314,534,0.934,536,1.951,887,5.313,972,3.663,974,4.384,978,3.57,1058,2.27,1079,7.445,1081,3.484,1187,7.361,1188,6.587,1190,5.852,1191,5.852,1192,5.852,1194,5.852,1195,5.852,1196,8.053,1197,4.264,1198,5.852,1199,5.852,3128,6.515,3129,8.195,3130,6.515]],["title/classes/PageMetaDto.html",[60,0.174,124,2.474]],["body/classes/PageMetaDto.html",[3,0.039,4,0.039,5,0.039,10,0.192,11,1.013,13,1.096,14,0.413,15,0.005,16,0.06,59,0.044,60,0.178,62,1.908,118,4.707,119,1.302,124,3.454,148,4.325,186,3.185,238,0.003,239,0.003,292,0.434,294,1.01,295,0.549,296,0.467,443,2.825,460,2.231,516,2.738,522,1.302,526,0.997,527,3.544,530,2.085,533,3.516,534,0.745,537,1.236,761,4.127,884,2.663,975,2.31,1055,7.211,1056,7.211,1057,3.697,1058,3.517,1059,7.211,1060,4.664,1061,6.73,1063,4.623,1064,6.099,1065,6.73,1068,5.235,1070,7.162,1071,7.739,1073,5.871,1075,4.466,1077,5.518,1079,3.848,1080,4.664,2666,5.95,2667,5.235,3131,8.046,3132,5.193,3133,7.064,3134,5.193,3135,5.193,3136,5.193,3137,5.193,3138,5.193,3139,5.193,3140,5.193,3141,5.193,3142,5.193,3143,5.193,3144,5.193,3145,5.193]],["title/interfaces/PageMetaParameters.html",[0,3.007,1061,3.952]],["body/interfaces/PageMetaParameters.html",[0,4.554,2,5.68,3,0.058,4,0.058,5,0.058,10,0.284,11,1.298,13,1.033,14,0.364,15,0.005,16,0.065,59,0.065,118,5.195,119,2.624,238,0.004,239,0.004,1003,2.07,1058,2.67,1061,7.068,1079,5.68,3131,6.37,3146,7.664]],["title/classes/PageOptionsDto.html",[60,0.174,119,1.268]],["body/classes/PageOptionsDto.html",[3,0.037,4,0.037,5,0.037,10,0.182,11,0.977,13,1.094,14,0.415,15,0.005,16,0.072,59,0.042,60,0.268,71,0.924,78,3.69,93,2.978,100,3.262,117,2.464,119,1.707,140,3.136,142,4.019,186,3.631,238,0.003,239,0.003,292,0.418,296,0.884,516,2.686,522,1.234,526,0.949,534,0.706,536,1.474,537,0.905,830,3.021,884,2.013,947,3.136,975,2.011,978,2.698,1057,3.595,1058,2.72,1086,2.768,1088,4.279,1089,4.078,1091,3.32,1093,2.633,1094,3.642,1098,3.986,1099,3.477,1100,3.402,1101,2.633,1103,4.684,1104,3.986,1105,2.698,1107,2.514,1109,3.021,1110,3.557,1111,3.732,1112,2.698,1113,3.477,1115,2.514,1117,4.057,1118,2.925,1119,3.914,1120,2.844,1143,3.846,1182,2.844,1183,5.788,1184,3.846,1185,5.32,1353,2.925,1354,2.925,2633,5.047,2634,5.527,2652,3.846,2655,4.457,2656,5.047,2666,3.649,2667,3.649,2676,4.092,2678,3.846,3131,7.795,3147,4.923,3148,4.923,3149,4.923,3150,4.923,3151,4.923,3152,4.092,3153,4.923,3154,4.923]],["title/injectables/PagerService.html",[17,0.883,247,2.773]],["body/injectables/PagerService.html",[0,4.001,3,0.051,4,0.051,5,0.051,10,0.249,14,0.337,15,0.005,16,0.085,17,1.461,19,0.883,21,4.474,22,1.513,25,2.248,59,0.057,60,0.231,68,1.949,71,1.264,72,1.857,82,3.401,102,2.289,118,4.37,119,2.454,121,1.939,122,1.73,124,4.655,238,0.004,239,0.004,247,4.585,288,1.687,292,0.308,294,1.627,295,0.712,296,0.606,298,1.358,787,2.099,810,2.127,1003,1.819,1008,4.575,1081,3.601,1161,4.123,1162,4.001,1317,1.442,3155,6.049,3156,8.175,3157,6.734,3158,7.913,3159,6.734,3160,6.049,3161,6.049,3162,4.991,3163,7.515,3164,6.049,3165,6.049]],["title/interfaces/PaginationInput.html",[0,3.007,3158,4.206]],["body/interfaces/PaginationInput.html",[0,4.054,2,5.057,3,0.052,4,0.052,5,0.052,10,0.253,11,1.21,14,0.339,15,0.005,16,0.085,17,1.473,19,0.895,21,5.114,22,1.533,25,2.278,59,0.058,60,0.234,68,1.965,71,1.28,72,1.392,82,3.995,102,2.307,118,4.405,119,2.607,121,1.965,122,1.753,124,4.677,238,0.004,239,0.004,247,3.739,1003,1.843,1008,4.635,1081,3.649,1161,4.178,1162,4.054,3155,6.129,3156,6.129,3158,7.61,3160,6.129,3161,6.129,3162,5.057,3163,7.576,3164,6.129,3165,6.129]],["title/controllers/PizzaOvenController.html",[539,1.179,3166,4.206]],["body/controllers/PizzaOvenController.html",[3,0.025,4,0.025,5,0.025,10,0.122,13,1.024,14,0.407,15,0.005,16,0.079,19,0.431,20,2.108,25,1.098,26,1.163,59,0.028,60,0.113,62,0.888,65,1.609,68,0.766,71,1.55,72,2.052,77,3.026,102,0.9,119,2.489,122,0.845,202,2.06,238,0.002,239,0.002,288,1.022,292,0.39,294,1.659,295,0.989,296,0.768,298,1.72,347,4.72,349,1.608,350,4.72,352,4.547,392,1.098,516,1.629,526,0.915,534,0.472,537,0.923,539,0.766,541,0.911,543,1.216,556,3.402,591,1.679,623,2.532,626,2.647,627,3.199,628,3.467,629,3.284,630,1.216,656,1.146,659,3.201,670,2.278,752,5.612,756,1.901,763,4.201,783,2.71,784,1.849,788,3.104,789,2.647,802,1.254,975,2.133,984,5.91,985,5.013,989,3.756,993,6.241,1000,2.954,1002,1.113,1003,0.888,1005,2.734,1021,4.583,1025,6.241,1034,2.954,1036,2.734,1172,3.808,1224,4.927,1228,2.556,1229,1.515,1230,1.544,1231,1.515,1232,1.544,1596,7.09,2445,3.157,2488,5.314,2513,4.583,2516,1.544,2804,2.954,2823,4.458,2824,4.239,2840,3.104,2844,2.954,2877,4.553,2993,4.201,3000,2.569,3002,2.569,3007,5.14,3014,5.14,3166,4.213,3167,7.274,3168,3.289,3169,6.241,3170,6.948,3171,6.948,3172,7.504,3173,7.504,3174,5.554,3175,2.954,3176,3.289,3177,3.289,3178,4.83,3179,3.289,3180,3.289,3181,3.289,3182,3.289,3183,3.289,3184,3.289,3185,3.289,3186,3.289,3187,3.289,3188,3.289,3189,3.289,3190,3.289,3191,3.289,3192,3.289,3193,4.553,3194,3.289,3195,3.289,3196,3.289,3197,3.289,3198,5.068,3199,5.068,3200,3.289,3201,3.289,3202,3.289,3203,3.289,3204,3.289,3205,3.289,3206,2.438,3207,5.068,3208,3.289,3209,3.289,3210,5.068,3211,5.068,3212,2.954,3213,2.734,3214,2.954,3215,2.954,3216,3.289,3217,3.289,3218,3.289,3219,3.289,3220,3.289,3221,3.289,3222,3.289,3223,3.289,3224,3.289,3225,3.289,3226,3.289,3227,3.289,3228,3.289,3229,3.289,3230,3.289,3231,3.289,3232,3.289,3233,3.289,3234,3.289,3235,3.289,3236,3.289,3237,3.289,3238,3.289,3239,3.289,3240,3.289,3241,5.068,3242,3.289,3243,3.289,3244,3.289,3245,3.289]],["title/modules/PizzaOvenModule.html",[240,1.268,273,3.582]],["body/modules/PizzaOvenModule.html",[3,0.047,4,0.047,5,0.047,15,0.005,16,0.088,19,0.804,24,1.764,59,0.052,60,0.21,64,1.859,238,0.003,239,0.003,240,1.976,241,5.964,242,2.265,243,3.052,248,3.052,249,2.336,250,2.3,253,3.204,254,3.314,273,7.42,287,3.258,302,2.822,306,7.08,307,5.093,347,4.163,349,2.996,350,5.355,352,5.158,541,2.184,763,5.355,984,3.874,989,7.672,1005,5.093,1021,7.672,1036,5.093,2562,4.338,2563,4.338,2993,7.032,3000,4.787,3166,7.242,3167,5.093,3213,5.093,3214,5.504,3215,5.504,3246,5.504,3247,5.504,3248,5.504,3249,6.128,3250,6.128,3251,6.128,3252,6.128]],["title/injectables/PizzaOvenService.html",[17,0.883,2993,3.438]],["body/injectables/PizzaOvenService.html",[3,0.039,4,0.039,5,0.039,10,0.191,13,0.858,14,0.346,15,0.005,16,0.085,17,1.228,18,3.304,19,0.677,20,2.608,22,1.16,23,2.031,24,1.487,25,1.723,26,1.825,59,0.044,60,0.177,62,1.901,64,1.566,65,2.236,67,3.615,68,2.213,69,3.24,71,1.613,72,2,76,0.876,77,2.972,82,3.254,83,3.065,102,1.412,119,2.327,122,1.327,238,0.003,239,0.003,247,5.205,288,1.419,292,0.411,294,1.672,295,0.909,296,0.773,298,1.733,304,5.34,305,2.829,307,4.291,347,3.507,349,2.525,449,4.033,451,4.033,516,1.36,670,1.777,686,2.525,752,6.084,755,4.033,802,1.968,810,1.631,887,2.829,1002,1.748,1003,1.395,1004,3.264,1008,3.507,1009,3.264,1010,4.033,1011,4.087,1012,2.579,2993,4.78,3002,4.033,3009,4.291,3015,4.291,3167,7.714,3169,6.32,3174,6.32,3175,6.32,3212,4.637,3213,4.291,3253,5.163,3254,7.036,3255,5.163,3256,9.498,3257,5.163,3258,7.036,3259,5.163,3260,7.036,3261,5.163,3262,5.163,3263,7.036,3264,5.163,3265,5.163,3266,5.163,3267,5.163,3268,5.163,3269,5.163,3270,5.163,3271,5.163,3272,5.163,3273,5.163,3274,5.163,3275,5.163]],["title/classes/PullRequestContributorInsightsDto.html",[60,0.174,1251,3.952]],["body/classes/PullRequestContributorInsightsDto.html",[3,0.042,4,0.042,5,0.042,10,0.202,11,1.048,13,1.033,14,0.412,15,0.005,16,0.075,31,3.183,59,0.047,60,0.282,76,0.91,78,3.46,93,2.583,100,2.829,117,2.441,119,2.454,140,2.514,142,3.698,186,3.389,238,0.003,239,0.003,292,0.431,296,0.916,392,2.439,516,2.662,522,1.369,526,1.012,534,0.783,535,2.829,536,1.635,830,3.241,884,2.159,892,3.183,947,2.514,975,1.303,978,2.992,1002,1.848,1003,1.475,1054,2.509,1057,3.792,1058,2.546,1066,4.902,1088,4.004,1089,3.816,1091,3.441,1093,2.92,1094,2.92,1098,3.731,1099,3.731,1100,3.65,1101,2.92,1103,4.114,1104,2.788,1105,2.992,1106,3.07,1107,2.788,1108,3.07,1109,3.241,1110,2.852,1111,2.992,1112,2.992,1113,3.731,1114,3.07,1115,2.788,1116,3.07,1117,3.653,1119,3.524,1183,4.782,1235,4.964,1251,5.708,1353,3.244,1354,3.244,2655,3.573,2656,4.047,2670,5.207,2677,3.865,3152,4.538,3276,5.46,3277,5.46,3278,5.46]],["title/classes/PullRequestContributorOptionsDto.html",[60,0.174,1219,3.952]],["body/classes/PullRequestContributorOptionsDto.html",[3,0.037,4,0.037,5,0.037,10,0.181,11,0.972,13,0.946,14,0.41,15,0.005,16,0.072,31,3.843,59,0.042,60,0.232,76,1.221,78,3.305,93,2.396,100,2.625,117,2.37,119,2.392,140,2.252,142,3.532,186,3.105,238,0.003,239,0.003,292,0.442,296,0.929,392,2.945,421,2.506,516,2.752,522,1.226,526,1.039,530,1.735,534,0.701,535,3.253,536,1.464,756,2.128,769,2.615,830,2.169,884,1.445,892,3.843,947,2.252,1002,1.655,1003,1.831,1054,2.328,1057,3.121,1058,2.361,1066,4.718,1086,2.749,1088,3.715,1089,3.54,1091,3.311,1093,3.625,1094,4.16,1098,2.497,1099,3.461,1100,2.442,1101,2.615,1102,2.824,1103,3.886,1104,2.497,1105,2.68,1106,2.749,1107,2.497,1108,2.749,1109,3.006,1110,2.554,1111,2.68,1112,2.68,1113,3.461,1114,2.749,1115,2.497,1116,2.749,1117,3.913,1118,2.906,1119,3.775,1120,2.824,1219,5.295,1235,5.994,2310,4.919,2326,3.624,2635,4.798,2670,4.919,2671,5.285,2672,5.772,2673,3.624,2674,4.064,2675,3.82,2676,4.064,2677,3.461,2678,3.82,2679,4.392,2680,3.322,2681,3.624,3279,4.392]],["title/controllers/PullRequestController.html",[539,1.179,3280,4.206]],["body/controllers/PullRequestController.html",[3,0.034,4,0.034,5,0.034,10,0.166,13,0.795,14,0.387,15,0.005,16,0.085,19,0.587,25,1.493,26,1.581,59,0.038,60,0.153,62,1.208,65,1.928,71,1.515,72,2.008,76,0.793,77,2.987,99,2.583,119,2.442,142,1.88,189,4.506,196,4.321,197,4.564,238,0.003,239,0.003,288,1.284,292,0.369,294,1.571,295,0.903,296,0.727,298,1.628,386,4.799,388,4.799,390,2.657,391,4.506,392,3.252,393,3.493,407,4.506,408,3.314,516,1.953,526,0.866,534,0.641,539,1.042,541,1.239,543,1.653,556,3.298,628,3.469,629,3.203,630,1.653,656,1.558,659,3.031,670,1.894,870,2.827,892,3.717,895,2.738,909,3.314,910,3.314,1002,1.514,1003,2.002,1058,1.558,1220,3.493,1221,5.718,1222,4.718,1223,4.166,1224,4.665,1228,1.849,1229,2.059,1230,2.1,1231,2.059,1232,2.1,1233,4.851,1234,3.314,1239,3.493,1256,2.876,1828,4.166,2488,3.579,2513,3.314,2516,2.1,2648,4.972,2668,5.985,2795,5.985,2808,3.717,2823,3.579,2824,3.404,2832,3.717,2916,3.038,3280,5.291,3281,4.472,3282,8.076,3283,8.076,3284,8.076,3285,8.076,3286,4.472,3287,4.472,3288,4.472,3289,4.472,3290,4.472,3291,4.472,3292,6.366,3293,4.472,3294,4.472,3295,4.472,3296,6.366,3297,4.472,3298,4.472,3299,6.308,3300,4.472,3301,4.016,3302,5.493,3303,4.016,3304,4.718,3305,5.493,3306,4.016,3307,4.472,3308,5.718,3309,4.472,3310,4.472,3311,4.472,3312,4.472,3313,4.472,3314,3.493,3315,4.472,3316,4.472,3317,4.472,3318,4.472,3319,4.472,3320,4.472,3321,4.472]],["title/controllers/PullRequestDescriptionController.html",[539,1.179,3322,4.206]],["body/controllers/PullRequestDescriptionController.html",[3,0.048,4,0.048,5,0.048,10,0.232,14,0.322,15,0.005,16,0.082,19,0.823,59,0.053,60,0.215,68,1.462,71,1.178,72,1.798,102,1.717,122,1.613,196,3.486,197,3.357,200,4.387,238,0.004,239,0.004,288,1.614,292,0.287,294,1.221,295,0.664,296,0.565,298,1.266,386,4.5,392,3.2,526,0.673,534,0.9,537,1.303,539,1.462,541,1.739,543,2.32,556,2.829,591,3.205,596,4.264,623,3.135,624,2.836,625,3.686,626,4.18,629,3.004,630,2.32,650,2.686,656,2.187,658,2.89,659,2.356,783,4.28,784,3.529,787,1.956,788,4.901,789,4.18,790,2.947,791,3.007,798,2.252,802,2.393,892,3.486,895,3.844,896,7.25,901,5.932,903,4.901,909,4.652,910,4.652,912,4.903,932,5.438,2710,7.878,3322,6.653,3323,6.277,3324,6.277,3325,6.277,3326,6.277,3327,6.277,3328,5.638,3329,6.531,3330,5.638,3331,6.277,3332,6.277]],["title/injectables/PullRequestDescriptionService.html",[17,0.883,3329,3.75]],["body/injectables/PullRequestDescriptionService.html",[3,0.043,4,0.043,5,0.043,10,0.21,13,0.9,14,0.338,15,0.005,16,0.072,17,1.309,19,0.744,59,0.048,60,0.195,62,1.533,65,2.184,68,1.746,71,1.407,72,1.713,74,3.11,76,1.188,196,3.265,200,3.11,238,0.003,239,0.003,288,1.512,292,0.383,294,1.633,295,0.888,296,0.755,298,1.512,386,5.021,392,3.184,421,2.098,422,3.191,510,4.017,529,2.834,537,1.187,675,3.11,694,3.11,779,3.588,787,2.336,791,2.718,798,2.036,810,1.792,813,5.307,814,4.017,815,5.668,819,5.556,820,5.844,821,6.573,823,5.141,824,3.855,825,4.017,826,4.017,827,3.714,828,4.206,830,2.517,831,4.017,832,4.206,833,4.206,834,4.206,835,4.206,836,4.717,837,3.855,841,4.017,842,4.906,846,5.307,847,4.017,848,4.206,850,4.717,851,4.017,852,4.894,853,3.475,854,4.017,855,4.017,881,5.856,892,3.89,921,3.714,924,4.717,940,6.734,942,6.734,949,3.855,2710,6.976,2713,5.097,3093,5.097,3095,5.097,3328,5.097,3329,5.556,3333,5.675,3334,5.675,3335,5.675,3336,5.675,3337,5.675,3338,5.675,3339,5.675,3340,5.675,3341,5.675,3342,5.675,3343,5.675,3344,5.675,3345,5.675]],["title/injectables/PullRequestGithubEventsService.html",[17,0.883,3346,3.75]],["body/injectables/PullRequestGithubEventsService.html",[3,0.042,4,0.042,5,0.042,10,0.207,14,0.298,15,0.005,16,0.084,17,1.294,19,0.732,20,2.691,22,1.253,23,2.195,24,1.606,25,1.862,26,1.972,59,0.048,60,0.191,62,2.002,65,1.451,67,3.73,68,2.292,69,3.413,71,1.391,72,1.699,76,1.037,77,2.373,78,2.916,91,2.062,93,1.972,99,3.222,100,2.16,101,3.789,102,2.028,104,4.357,118,3.871,119,2.466,121,1.606,122,1.433,124,4.338,156,3.416,200,3.057,224,3.949,238,0.003,239,0.003,288,1.495,292,0.38,294,1.442,295,0.784,296,0.667,298,1.495,438,3.789,471,4.357,810,1.762,884,1.648,895,4.539,932,3.789,985,4.686,1002,2.509,1003,1.507,1075,3.527,1081,2.983,1140,3.65,1141,3.789,1156,4.357,1162,3.314,1179,5.247,1228,2.306,1253,4.357,1452,3.222,1755,6.502,1919,4.357,1999,4.134,2032,6.658,2036,6.658,2648,4.357,2693,4.134,3346,5.493,3347,5.578,3348,7.412,3349,5.578,3350,5.578,3351,7.412,3352,5.578,3353,7.412,3354,5.578,3355,5.01,3356,5.578,3357,5.578,3358,4.134,3359,5.578,3360,5.578,3361,5.578,3362,5.578,3363,5.578,3364,5.578,3365,5.578,3366,5.578,3367,5.578,3368,5.578,3369,5.578,3370,5.578,3371,5.578,3372,5.578,3373,5.578,3374,5.578,3375,5.578,3376,5.578,3377,5.578,3378,5.578,3379,5.578]],["title/injectables/PullRequestInsightsService.html",[17,0.883,3304,3.75]],["body/injectables/PullRequestInsightsService.html",[3,0.031,4,0.031,5,0.031,10,0.153,13,0.98,14,0.381,15,0.005,16,0.078,17,1.05,18,2.824,19,0.542,20,2.363,21,4.425,22,0.929,23,1.626,24,1.19,59,0.035,60,0.142,62,1.625,64,1.254,65,1.845,67,3.275,68,2.077,71,1.461,72,1.228,74,4.885,76,1.11,77,1.323,78,3.256,82,2.883,83,3.089,93,3.151,99,5.886,100,3.016,102,1.131,106,4.458,108,4.258,110,5.02,117,2.087,122,1.062,142,1.738,143,2.713,156,4.342,186,2.223,202,1.68,203,3.063,238,0.003,239,0.003,288,1.213,292,0.407,294,1.68,295,0.875,296,0.745,298,1.742,304,5.012,305,2.265,386,5.136,392,3.109,407,4.258,408,3.063,802,1.576,810,1.306,870,2.613,884,1.778,892,3.978,1003,1.117,1011,3.621,1091,2.923,1110,2.159,1140,2.705,1141,2.808,1188,2.808,1223,2.705,1256,2.718,1452,2.387,1877,6.401,1879,3.713,2668,6.401,2670,2.613,3162,3.063,3301,3.713,3302,3.063,3304,4.458,3314,4.699,3380,4.133,3381,6.015,3382,6.015,3383,7.788,3384,6.015,3385,6.015,3386,4.133,3387,5.834,3388,4.133,3389,6.015,3390,4.133,3391,4.133,3392,4.133,3393,6.015,3394,4.133,3395,4.133,3396,4.133,3397,4.133,3398,4.133,3399,4.133,3400,4.458,3401,2.926,3402,3.063,3403,4.133,3404,4.133,3405,5.403,3406,5.403,3407,5.403,3408,5.403,3409,5.403,3410,4.133,3411,3.713,3412,4.133,3413,3.713,3414,5,3415,5.894,3416,6.015,3417,5.403,3418,3.713,3419,3.713,3420,5.894,3421,3.713,3422,6.015,3423,4.133,3424,4.133,3425,4.133,3426,4.133,3427,5.403,3428,4.133,3429,4.133,3430,5,3431,4.133,3432,6.015,3433,4.133,3434,4.133,3435,4.133,3436,4.133,3437,4.133,3438,4.133,3439,4.133,3440,3.713,3441,3.713,3442,4.133]],["title/modules/PullRequestModule.html",[240,1.268,274,3.438]],["body/modules/PullRequestModule.html",[3,0.039,4,0.039,5,0.039,15,0.005,16,0.089,19,0.681,24,1.495,59,0.044,60,0.178,64,1.575,196,4.049,238,0.003,239,0.003,240,1.771,242,1.919,243,2.735,248,2.735,249,1.979,250,1.949,253,2.872,254,2.97,272,6.084,274,7.166,287,2.92,302,2.391,386,2.92,388,2.92,390,3.085,391,5,392,3.103,393,4.056,407,5,408,3.848,421,1.919,422,2.92,423,4.056,529,4.644,541,1.957,891,6.673,892,2.262,907,6.891,908,4.664,925,6.673,926,5.518,935,6.891,936,5.871,954,6.673,960,3.848,962,6.891,1233,6.606,1234,3.848,1284,4.664,2916,3.528,3280,6.673,3302,5.95,3304,6.891,3305,7.482,3306,4.664,3322,6.673,3329,6.891,3330,4.664,3401,3.676,3443,4.664,3444,4.664,3445,4.664,3446,4.664,3447,6.581,3448,5.193,3449,4.664,3450,5.193,3451,5.193,3452,5.193,3453,5.193,3454,5.193]],["title/classes/PullRequestPageOptionsDto.html",[60,0.174,3299,3.952]],["body/classes/PullRequestPageOptionsDto.html",[3,0.03,4,0.03,5,0.03,10,0.147,11,0.84,13,0.874,14,0.41,15,0.005,16,0.065,31,3.023,59,0.059,60,0.201,75,5.145,76,1.252,78,3.011,93,2.069,100,2.267,117,2.348,119,2.266,140,1.834,142,3.218,186,2.828,238,0.003,239,0.003,292,0.444,296,0.93,392,3.079,421,2.828,516,2.765,522,0.998,526,1.042,530,1.867,534,0.571,535,3.301,536,1.193,666,2.303,667,2.596,756,1.899,769,2.13,830,1.766,884,1.177,892,4.018,947,1.834,1002,1.348,1003,1.581,1054,2.01,1057,2.696,1058,3.313,1066,4.359,1086,2.239,1087,4.389,1088,3.208,1089,3.057,1091,3.199,1093,4.092,1094,4.712,1098,2.033,1099,2.989,1100,1.989,1101,2.13,1102,2.3,1103,3.467,1104,2.033,1105,2.183,1106,2.239,1107,2.033,1108,2.239,1109,2.596,1110,2.08,1111,2.183,1112,2.183,1113,2.989,1114,2.239,1115,2.033,1116,2.239,1117,4.092,1118,2.367,1119,3.948,1120,4.709,1235,6.268,1436,2.183,1757,3.701,1770,2.606,1906,4.866,1914,4.866,1999,4.339,2170,4.716,2310,4.389,2326,2.952,2635,5.416,2636,3.577,2670,4.389,2671,4.716,2672,5.39,2673,2.952,2675,3.111,2677,2.819,2678,3.111,2680,2.706,2681,2.952,3279,3.577,3299,4.573,3455,3.983,3456,3.983,3457,3.983,3458,7.915,3459,6.941,3460,3.983,3461,3.577,3462,3.983,3463,3.983,3464,7.657,3465,3.983,3466,3.983,3467,3.983,3468,3.983,3469,3.983]],["title/injectables/PullRequestReviewService.html",[17,0.883,3305,3.75]],["body/injectables/PullRequestReviewService.html",[3,0.052,4,0.052,5,0.052,10,0.252,13,0.98,14,0.338,15,0.005,16,0.081,17,1.469,19,0.892,20,2.898,22,1.527,23,2.675,24,1.957,59,0.058,60,0.233,62,2.273,64,2.062,65,1.768,71,1.276,72,1.865,77,2.695,238,0.004,239,0.004,288,1.697,292,0.384,294,1.637,295,0.89,296,0.757,298,1.371,386,5.139,391,4.812,392,3.188,393,5.31,670,1.509,810,2.147,892,3.981,2065,6.106,3302,5.038,3305,6.237,3470,6.797,3471,8.415,3472,6.797,3473,6.797,3474,8.415,3475,8.415,3476,6.797,3477,8.415,3478,6.797,3479,6.797]],["title/injectables/PullRequestService.html",[17,0.883,1233,3.311]],["body/injectables/PullRequestService.html",[3,0.02,4,0.02,5,0.02,10,0.099,13,0.777,14,0.345,15,0.005,16,0.079,17,0.75,19,0.35,20,1.876,22,0.599,23,1.048,24,0.767,25,0.889,26,0.942,31,2.953,59,0.023,60,0.091,62,1.16,64,0.808,65,1.764,67,2.6,68,2.397,69,1.977,71,1.36,72,1.934,76,1.069,77,2.75,78,3.92,82,3.788,83,2.348,85,1.227,93,2.185,94,4.286,99,5.054,100,3.169,101,5.177,102,1.982,106,3.182,108,3.039,110,3.039,117,1.303,118,3.98,119,2.375,121,1.552,122,1.589,124,4.108,142,2.267,143,1.878,156,5.011,159,4.829,160,3.817,186,1.587,191,3.568,202,2.946,203,5.37,213,1.744,224,3.039,226,4.212,227,6.334,228,1.975,238,0.002,239,0.002,288,0.866,292,0.406,294,1.671,295,0.908,296,0.773,298,1.764,304,4.284,305,1.46,386,5.07,388,1.498,390,1.583,392,2.064,594,1.685,667,1.182,788,1.632,810,0.842,884,1.593,892,3.928,1002,1.453,1003,1.67,1057,1.227,1058,0.928,1068,1.975,1075,1.685,1081,1.425,1091,1,1103,1.331,1104,2.192,1125,2.917,1130,3.856,1133,1.81,1140,1.744,1141,1.81,1142,2.215,1143,2.081,1150,2.393,1158,3.568,1159,3.568,1160,1.81,1161,1.632,1162,3.204,1169,2.393,1179,3.039,1219,6.192,1223,2.81,1226,3.996,1233,2.81,1236,2.215,1251,5.66,1256,1.94,1269,2.393,1285,4.829,1289,2.215,1290,2.393,1452,1.539,1799,1.016,1877,4.582,2634,1.886,2670,5.312,2672,1.685,2680,1.81,3299,4.212,3302,1.975,3303,5.553,3314,3.354,3358,5.648,3387,4.046,3400,5.37,3401,1.886,3402,1.975,3405,3.856,3406,3.856,3407,3.856,3408,3.856,3409,3.856,3411,2.393,3413,2.393,3414,3.568,3415,3.568,3417,2.393,3418,2.393,3419,2.393,3420,4.482,3421,2.393,3430,5.139,3480,2.665,3481,5.392,3482,5.392,3483,4.293,3484,4.293,3485,4.293,3486,3.856,3487,5.392,3488,4.293,3489,4.293,3490,6.183,3491,2.665,3492,4.843,3493,2.665,3494,2.665,3495,2.665,3496,2.665,3497,2.665,3498,2.665,3499,2.665,3500,2.665,3501,2.665,3502,2.665,3503,2.665,3504,2.665,3505,2.665,3506,2.393,3507,2.665,3508,2.665,3509,2.665,3510,2.665,3511,4.293,3512,5.392,3513,2.665,3514,2.665,3515,4.293,3516,2.665,3517,2.665,3518,2.665,3519,2.393,3520,2.665,3521,2.665,3522,2.665,3523,7.246,3524,4.293,3525,4.293,3526,4.293,3527,2.665,3528,2.665,3529,2.665,3530,3.856,3531,3.856,3532,4.293,3533,4.293,3534,6.183,3535,5.553,3536,2.665,3537,2.665,3538,2.665,3539,2.665,3540,2.665,3541,2.215,3542,2.665,3543,6.183,3544,2.665,3545,6.183,3546,2.665,3547,2.665,3548,2.665,3549,4.843,3550,5.392,3551,6.183,3552,2.665,3553,4.293,3554,4.293,3555,4.293,3556,4.293,3557,2.665]],["title/controllers/RepoContributionsController.html",[539,1.179,1047,4.206]],["body/controllers/RepoContributionsController.html",[3,0.027,4,0.027,5,0.027,10,0.13,13,1.037,14,0.397,15,0.005,16,0.076,19,0.462,25,1.176,26,1.246,59,0.03,60,0.121,65,0.917,68,1.678,71,1.351,72,1.913,76,1.248,77,2.791,78,3.926,88,4.321,93,2.545,100,3.376,117,1.291,119,2.042,122,1.85,142,3.028,143,2.509,194,5.705,202,1.432,207,1.196,238,0.002,239,0.002,288,1.077,292,0.329,294,1.401,295,0.944,296,0.648,298,1.452,337,4.384,443,1.409,460,2.573,516,1.407,526,0.772,534,0.505,537,1.246,539,0.821,541,0.976,543,1.302,556,3.081,627,3.564,628,3.146,629,2.905,630,1.302,656,1.861,659,2.703,670,1.808,756,2.843,798,1.264,921,3.496,947,3.316,974,2.612,975,2.172,1003,0.952,1011,3.677,1045,4.782,1047,4.441,1048,2.929,1049,3.165,1058,1.228,1068,5.337,1084,6.611,1089,4.897,1091,2.005,1126,6.952,1144,3.165,1145,5.625,1146,3.165,1147,3.165,1228,2.668,1229,1.623,1230,1.654,1231,1.623,1232,1.654,1663,2.929,1894,6.468,2442,5.922,2445,3.952,2488,4.58,2501,5.928,2516,1.654,2538,4.568,2539,4.384,2795,3.96,2823,3.004,2824,2.857,2840,2.158,3006,5.986,3178,2.752,3558,7.74,3559,3.524,3560,7.74,3561,7.74,3562,6.453,3563,3.524,3564,3.524,3565,8.146,3566,5.342,3567,5.342,3568,3.524,3569,3.524,3570,3.524,3571,3.524,3572,3.524,3573,5.342,3574,6.809,3575,5.342,3576,3.524,3577,3.524,3578,3.524,3579,3.524,3580,3.524,3581,3.524,3582,5.342,3583,3.524,3584,3.524,3585,3.524,3586,6.952,3587,3.628,3588,2.306,3589,2.494,3590,2.494,3591,3.524,3592,5.342,3593,2.494,3594,5.342,3595,5.342,3596,3.524,3597,4.568,3598,3.524,3599,5.342,3600,5.342,3601,3.524,3602,3.524,3603,3.524,3604,3.524]],["title/controllers/RepoController.html",[539,1.179,3605,4.206]],["body/controllers/RepoController.html",[3,0.037,4,0.037,5,0.037,10,0.179,13,0.83,14,0.394,15,0.005,16,0.081,19,0.635,20,2.537,25,1.615,26,1.71,59,0.041,60,0.166,71,1.569,72,2.036,76,1.133,77,3.047,119,2.096,202,3.573,238,0.003,239,0.003,288,1.357,292,0.382,294,1.627,295,0.929,296,0.752,298,1.686,333,4.298,516,1.274,526,0.897,534,0.694,537,0.894,539,1.127,541,1.34,543,1.788,556,3.364,627,3.562,628,3.573,629,3.298,630,1.788,656,1.685,659,3.138,670,1.951,756,2.644,798,1.735,975,1.606,1003,1.817,1058,1.685,1125,5.68,1133,3.286,1220,3.779,1222,4.986,1223,4.403,1224,4.829,1228,2,1229,2.228,1230,2.271,1231,2.228,1232,2.271,1239,3.779,2445,3.949,2488,5.351,2501,5.287,2513,3.585,2516,2.271,2539,3.286,2570,5.287,2588,3.059,2687,3.585,2808,4.021,2823,3.783,2824,3.598,2832,4.021,2896,3.779,2920,3.779,3029,3.779,3178,3.779,3587,4.349,3589,3.424,3590,3.424,3593,3.424,3597,3.424,3605,5.592,3606,4.837,3607,8.361,3608,7.51,3609,5.287,3610,4.762,3611,4.837,3612,4.837,3613,6.531,3614,4.837,3615,6.043,3616,4.837,3617,4.345,3618,4.837,3619,4.837,3620,4.837,3621,4.021,3622,6.043,3623,4.837,3624,4.837,3625,4.837,3626,4.571,3627,4.837,3628,3.424,3629,4.837,3630,4.837]],["title/modules/RepoFilterModule.html",[240,1.268,3447,3.582]],["body/modules/RepoFilterModule.html",[3,0.056,4,0.056,5,0.056,15,0.005,16,0.076,19,0.974,59,0.063,60,0.255,238,0.004,239,0.004,240,2.226,242,2.745,243,3.439,248,3.439,249,2.831,250,2.788,253,3.61,254,3.735,756,2.032,3387,6.945,3402,5.505,3447,7.309,3631,6.672,3632,6.672,3633,6.672,3634,6.672,3635,7.427]],["title/injectables/RepoFilterService.html",[17,0.883,3387,3.311]],["body/injectables/RepoFilterService.html",[3,0.039,4,0.039,5,0.039,10,0.294,13,0.748,14,0.32,15,0.005,16,0.073,17,1.218,19,0.669,21,4.572,22,1.145,59,0.043,60,0.175,68,1.187,71,0.957,74,3.822,76,1.115,78,3.523,82,2.835,91,2.578,93,2.811,94,3.223,98,2.701,99,2.944,100,1.974,117,1.685,156,4.869,160,4.937,202,2.072,223,5.797,238,0.003,239,0.003,288,1.406,292,0.319,294,1.547,295,0.738,296,0.628,298,1.406,299,3.608,557,7.68,756,2.175,810,1.61,887,4.357,903,4.271,932,5.808,1003,1.884,1057,2.347,1091,2.618,1100,3.972,1188,3.463,1222,5.169,1223,6.472,1228,2.883,1613,2.944,1755,3.982,1898,4.578,1936,3.223,2516,4.341,2668,6.337,2670,4.41,2671,3.463,2672,3.223,2680,3.463,3162,3.778,3387,4.565,3400,5.169,3427,6.265,3440,4.578,3441,4.578,3634,7.142,3636,5.097,3637,6.975,3638,6.975,3639,6.975,3640,5.097,3641,6.975,3642,5.097,3643,6.975,3644,4.237,3645,6.609,3646,5.097,3647,5.097,3648,5.097,3649,5.097,3650,5.097,3651,5.097,3652,7.951,3653,5.097,3654,5.097,3655,5.097,3656,6.265,3657,5.097,3658,5.097,3659,6.975,3660,5.097,3661,5.097,3662,5.097,3663,5.097,3664,4.578,3665,4.578,3666,5.097,3667,5.097]],["title/classes/RepoInfo.html",[60,0.174,1396,3.438]],["body/classes/RepoInfo.html",[3,0.053,4,0.053,5,0.053,10,0.257,11,1.223,13,0.914,14,0.404,15,0.005,16,0.073,59,0.059,60,0.292,76,1.198,238,0.004,239,0.004,292,0.389,295,0.902,421,3.151,522,1.74,526,0.914,527,3.249,530,1.987,533,3.41,534,0.996,535,3.301,536,2.078,537,1.133,670,2.192,756,2.632,759,6.235,769,3.712,975,2.035,1352,5.39,1396,5.791,1452,4.924,1790,8.287,3668,7.207,3669,6.941,3670,6.941,3671,6.941,3672,6.941,3673,6.235]],["title/modules/RepoModule.html",[240,1.268,275,3.007]],["body/modules/RepoModule.html",[3,0.053,4,0.053,5,0.053,15,0.005,16,0.086,19,0.907,24,1.991,59,0.059,60,0.237,64,2.098,238,0.004,239,0.004,240,2.132,242,2.556,243,3.293,248,3.293,249,2.636,250,2.595,253,3.457,254,3.576,275,6.154,287,3.516,302,3.184,333,3.184,541,2.356,1051,4.895,3029,5.401,3401,4.895,3447,7.11,3449,6.211,3587,5.915,3605,7.655,3621,5.748,3674,6.211,3675,6.915,3676,6.211,3677,6.211,3678,6.915,3679,6.915]],["title/classes/RepoPageOptionsDto.html",[60,0.174,3609,3.199]],["body/classes/RepoPageOptionsDto.html",[3,0.039,4,0.039,5,0.039,10,0.188,11,0.997,13,0.958,14,0.397,15,0.005,16,0.068,37,3.012,59,0.068,60,0.238,78,3.356,93,2.456,100,2.69,117,2.446,119,2.413,140,2.334,142,3.587,186,3.153,202,2.06,238,0.003,239,0.003,292,0.421,295,0.735,296,0.905,410,2.85,516,2.667,522,1.271,526,0.99,534,0.727,536,1.518,666,2.734,667,3.082,830,2.248,884,1.498,947,2.334,971,3.012,1002,1.716,1003,1.369,1054,2.386,1057,3.199,1058,2.971,1063,3.317,1066,4.779,1086,2.85,1087,5.013,1088,3.808,1089,3.629,1091,3.464,1093,3.715,1094,4.239,1095,7.005,1098,2.588,1099,3.547,1100,2.532,1101,2.71,1102,2.928,1103,3.96,1104,2.588,1105,2.778,1106,2.85,1107,2.588,1108,2.85,1109,3.082,1110,2.647,1111,2.778,1112,2.778,1113,3.547,1114,2.85,1115,2.588,1116,2.85,1117,3.082,1118,3.012,1119,2.973,1120,4.579,1254,5.15,1705,4.547,1936,3.205,2655,3.317,2983,4.213,2984,4.213,2985,4.213,2986,4.213,2987,4.213,3609,4.393,3668,5.427,3680,6.59,3681,4.553,3682,5.068,3683,4.553,3684,5.427,3685,6.241,3686,6.241,3687,5.775,3688,5.775,3689,5.775,3690,5.775,3691,5.775,3692,5.068]],["title/classes/RepoSearchOptionsDto.html",[60,0.174,3613,3.952]],["body/classes/RepoSearchOptionsDto.html",[3,0.037,4,0.037,5,0.037,10,0.18,11,0.967,13,0.943,14,0.409,15,0.005,16,0.071,59,0.041,60,0.231,76,1.186,78,3.294,93,2.383,100,2.61,117,2.445,119,2.205,140,2.234,142,3.52,186,3.094,238,0.003,239,0.003,292,0.447,296,0.934,516,2.762,522,1.216,526,1.05,534,0.696,535,3.242,536,1.452,756,2.29,830,2.151,884,1.433,947,2.234,1003,1.821,1054,2.315,1057,3.104,1058,2.699,1066,4.869,1086,2.727,1087,4.262,1088,3.694,1089,3.52,1091,3.418,1093,4.142,1094,4.476,1095,5.741,1098,2.476,1099,3.441,1100,2.423,1101,2.594,1102,2.802,1103,3.869,1104,2.476,1105,2.658,1106,2.727,1107,2.476,1108,2.727,1109,2.989,1110,2.533,1111,2.658,1112,2.658,1113,3.441,1114,2.727,1115,2.476,1116,2.727,1117,3.902,1118,2.882,1119,3.764,1120,2.802,1379,4.032,2310,4.898,2635,3.433,2670,4.898,2671,5.263,2672,5.757,2673,3.595,2674,4.032,2677,4.771,2680,3.295,2681,3.595,2687,6.52,3461,4.357,3609,5.293,3613,5.265,3668,6.871,3680,4.032,3681,4.357,3693,4.85,3694,4.85,3695,4.85]],["title/injectables/RepoService.html",[17,0.883,3587,2.845]],["body/injectables/RepoService.html",[3,0.02,4,0.02,5,0.02,10,0.097,13,0.935,14,0.344,15,0.005,16,0.077,17,0.74,18,2.505,19,0.344,20,1.859,21,3.597,22,0.589,23,1.032,24,0.755,25,0.876,26,0.927,59,0.022,60,0.09,62,1.145,64,0.796,65,2.051,67,2.577,68,2.28,69,1.953,71,1.479,72,1.896,76,1.2,77,2.607,78,3.883,82,3.542,83,2.324,85,1.208,88,1.34,90,1.783,91,1.567,93,1.499,94,2.681,98,2.066,99,5.828,100,3.629,101,2.881,102,1.968,106,1.945,108,1.857,110,3.001,117,1.481,118,3.2,119,2.184,121,1.221,122,1.728,124,3.703,142,2.577,156,3.752,160,5.762,186,2.913,192,1.186,194,2.775,205,2.181,207,0.487,209,4.435,213,1.717,226,2.05,238,0.002,239,0.002,288,0.855,292,0.39,294,1.663,295,0.921,296,0.752,298,1.686,304,4.257,305,1.438,333,1.208,337,2.881,339,1.659,341,1.783,343,1.783,345,1.783,421,0.97,495,4.168,565,2.92,614,1.945,670,1.493,756,1.84,787,0.818,802,1.616,810,0.829,884,2.406,1002,1.435,1003,1.655,1011,3.674,1012,2.118,1058,0.914,1081,1.403,1091,2.003,1095,1.945,1103,1.311,1104,2.165,1125,3.625,1133,1.783,1135,2.881,1140,1.717,1141,1.783,1142,2.181,1143,2.05,1152,3.809,1153,3.809,1155,2.357,1156,2.05,1158,3.524,1159,3.524,1160,1.783,1161,2.596,1162,2.52,1179,3.001,1188,1.783,1223,1.717,1317,1.142,1696,2.357,1799,1,1877,5.841,2110,2.357,2125,2.357,2143,2.357,2158,2.357,2501,1.659,2527,2.181,2570,2.681,2588,1.659,2671,1.783,2672,1.659,2680,1.783,2687,1.945,3018,3.524,3162,1.945,3314,6.157,3358,3.143,3387,4.01,3400,3.143,3401,1.857,3402,1.945,3414,6.551,3415,6.551,3420,2.181,3430,3.524,3486,3.809,3492,4.793,3506,3.809,3530,2.357,3531,2.357,3541,2.181,3587,2.384,3608,3.809,3609,3.874,3613,4.786,3617,3.809,3621,2.181,3622,3.809,3664,3.809,3680,2.181,3684,4.168,3687,2.181,3688,2.181,3689,2.181,3690,2.181,3691,2.181,3696,2.624,3697,4.24,3698,4.24,3699,4.24,3700,4.24,3701,5.336,3702,2.624,3703,2.624,3704,4.24,3705,4.24,3706,2.624,3707,2.624,3708,5.336,3709,2.624,3710,2.624,3711,2.624,3712,2.624,3713,4.24,3714,2.624,3715,4.24,3716,2.624,3717,2.624,3718,2.624,3719,2.624,3720,5.336,3721,2.624,3722,2.624,3723,4.24,3724,2.624,3725,4.24,3726,2.624,3727,2.624,3728,2.624,3729,2.624,3730,2.624,3731,4.24,3732,2.624,3733,2.624,3734,2.624,3735,2.624,3736,2.624,3737,2.624,3738,6.726,3739,6.726,3740,2.357,3741,2.357,3742,2.357,3743,2.624,3744,2.624,3745,2.624,3746,2.624,3747,2.624,3748,2.624,3749,2.624,3750,2.624,3751,2.624,3752,2.624,3753,4.24,3754,4.24,3755,4.24,3756,4.24,3757,4.24,3758,4.24,3759,4.24,3760,2.624,3761,2.624,3762,2.624,3763,2.624,3764,2.624,3765,2.624,3766,2.624,3767,2.624,3768,2.624,3769,2.624,3770,2.624,3771,2.624,3772,2.624,3773,2.624,3774,2.357,3775,5.336,3776,2.624,3777,2.624,3778,2.624,3779,4.24,3780,2.357,3781,2.624,3782,4.24,3783,2.624,3784,2.624,3785,2.624,3786,2.624,3787,2.624,3788,2.624,3789,2.624,3790,2.181,3791,2.624,3792,2.624,3793,4.24,3794,2.624,3795,2.624,3796,2.624,3797,2.624,3798,2.624]],["title/controllers/RepoStarController.html",[539,1.179,3799,4.206]],["body/controllers/RepoStarController.html",[3,0.027,4,0.027,5,0.027,10,0.129,13,1.074,14,0.397,15,0.005,16,0.079,19,0.458,25,1.166,26,1.235,59,0.03,60,0.12,65,0.909,68,1.67,71,1.447,72,1.97,76,1.165,77,2.907,119,1.33,122,1.842,202,2.609,207,0.984,238,0.002,239,0.002,288,1.07,292,0.352,294,1.5,295,0.892,296,0.694,298,1.909,333,2.956,334,1.868,341,5.238,342,2.728,516,1.398,526,0.827,534,0.501,537,1.244,539,0.814,541,0.968,543,1.291,556,3.21,558,2.838,565,3.657,571,1.914,624,1.578,625,3.738,627,3.55,628,3.3,629,3.047,630,1.291,650,1.495,656,1.849,658,3.55,659,2.894,670,2.077,756,2.862,790,1.64,798,1.253,975,1.711,1003,0.944,1011,3.66,1058,1.217,1224,3.065,1228,2.194,1229,1.608,1230,1.64,1231,1.608,1232,1.64,1398,2.373,2112,8.42,2445,3.66,2488,5.105,2501,5.497,2516,1.64,2538,3.757,2539,3.605,2823,3.609,2824,3.432,2825,1.868,2905,5.075,3587,3.609,3588,2.286,3589,2.472,3590,2.472,3593,3.757,3597,3.757,3609,4.533,3610,2.472,3626,2.373,3628,2.472,3684,2.728,3799,4.411,3800,8.118,3801,3.493,3802,7.169,3803,7.71,3804,7.71,3805,7.169,3806,7.71,3807,3.493,3808,3.493,3809,5.959,3810,7.169,3811,7.169,3812,5.313,3813,5.022,3814,5.075,3815,3.493,3816,3.493,3817,3.493,3818,3.493,3819,3.493,3820,3.493,3821,3.493,3822,7.292,3823,3.493,3824,3.493,3825,3.493,3826,4.692,3827,2.728,3828,3.493,3829,3.493,3830,3.493,3831,3.493,3832,2.589,3833,5.238,3834,4.757,3835,3.137,3836,2.728,3837,3.493,3838,3.493,3839,3.493,3840,5.307,3841,3.493,3842,3.493,3843,3.493,3844,5.307,3845,3.493]],["title/controllers/RepoStargazeController.html",[539,1.179,3846,4.206]],["body/controllers/RepoStargazeController.html",[3,0.027,4,0.027,5,0.027,10,0.13,13,1.075,14,0.397,15,0.005,16,0.079,19,0.462,25,1.175,26,1.244,59,0.03,60,0.121,65,0.916,68,1.677,71,1.452,72,1.973,76,1.167,77,2.913,119,1.338,122,1.849,202,2.622,207,0.99,238,0.002,239,0.002,288,1.076,292,0.353,294,1.505,295,0.895,296,0.696,298,1.912,333,2.97,334,1.882,345,5.256,346,2.75,516,1.406,526,0.83,534,0.505,537,1.246,539,0.82,541,0.975,543,1.301,556,3.216,558,2.855,565,3.66,571,1.929,624,1.59,625,3.75,627,3.562,628,3.31,629,3.056,630,1.301,650,1.506,656,1.86,658,3.562,659,2.904,670,2.081,756,2.875,790,1.653,798,1.263,975,1.718,1003,0.951,1011,3.675,1058,1.226,1224,3.083,1228,2.207,1229,1.621,1230,1.653,1231,1.621,1232,1.653,1398,2.391,2095,5.793,2375,5.764,2416,6.509,2445,3.675,2488,5.116,2501,5.51,2516,1.653,2538,3.779,2539,3.627,2823,3.626,2824,3.448,2825,1.882,2840,3.269,3587,3.626,3588,2.304,3589,2.492,3590,2.492,3593,3.779,3597,3.779,3609,4.551,3610,2.492,3626,2.391,3628,2.492,3742,3.162,3812,5.334,3813,5.034,3827,4.17,3832,2.609,3833,5.256,3836,2.75,3846,4.437,3847,8.143,3848,3.52,3849,7.736,3850,7.736,3851,7.736,3852,7.736,3853,7.736,3854,3.52,3855,3.52,3856,5.339,3857,7.197,3858,6.465,3859,3.52,3860,3.52,3861,3.52,3862,3.52,3863,3.52,3864,3.52,3865,3.52,3866,3.52,3867,3.52,3868,5.339,3869,3.52,3870,3.52,3871,3.52,3872,3.52,3873,4.78,3874,3.162,3875,3.52,3876,3.52,3877,4.17,3878,5.339,3879,3.52,3880,3.52,3881,4.795,3882,5.339,3883,3.52]],["title/controllers/RepoSubmitController.html",[539,1.179,3884,4.206]],["body/controllers/RepoSubmitController.html",[3,0.026,4,0.026,5,0.026,10,0.129,13,1.073,14,0.396,15,0.005,16,0.079,19,0.456,25,1.161,26,1.23,59,0.03,60,0.119,65,0.905,68,1.667,71,1.444,72,1.968,76,1.164,77,2.905,119,1.326,122,1.838,202,2.603,207,0.981,238,0.002,239,0.002,288,1.067,292,0.351,294,1.497,295,0.891,296,0.693,298,1.908,333,2.949,334,1.861,343,5.229,344,2.718,516,1.394,526,0.826,534,0.499,537,1.242,539,0.811,541,0.964,543,1.286,556,3.206,558,2.83,565,3.656,571,1.907,624,1.572,625,3.733,627,3.544,628,3.295,629,3.042,630,1.286,650,1.489,656,1.843,658,3.544,659,2.889,670,2.075,756,2.861,790,1.634,798,1.248,975,1.708,1003,0.94,1011,3.653,1058,1.212,1224,3.056,1228,2.187,1229,1.602,1230,1.634,1231,1.602,1232,1.634,1398,2.364,2128,9.063,2445,3.653,2488,5.1,2501,5.49,2516,1.634,2538,3.746,2539,3.595,2823,3.6,2824,3.424,2825,1.861,2840,3.24,2905,5.065,3587,3.6,3588,2.277,3589,2.463,3590,2.463,3593,3.746,3597,3.746,3609,4.524,3610,2.463,3626,2.364,3628,2.463,3741,3.125,3809,5.947,3812,5.303,3813,5.015,3814,5.065,3826,4.682,3827,2.718,3832,2.579,3833,5.229,3836,2.718,3884,4.398,3885,8.106,3886,3.479,3887,7.697,3888,7.697,3889,7.697,3890,7.697,3891,7.697,3892,3.479,3893,3.479,3894,7.155,3895,7.155,3896,3.479,3897,3.479,3898,3.479,3899,3.479,3900,3.479,3901,3.479,3902,3.479,3903,8.106,3904,3.479,3905,3.479,3906,3.479,3907,3.479,3908,3.479,3909,3.479,3910,3.479,3911,4.746,3912,3.125,3913,3.125,3914,3.479,3915,3.479,3916,5.292,3917,3.479,3918,3.479,3919,5.292,3920,3.479]],["title/controllers/RepoVoteController.html",[539,1.179,3921,4.206]],["body/controllers/RepoVoteController.html",[3,0.024,4,0.024,5,0.024,10,0.118,13,1.086,14,0.4,15,0.005,16,0.078,19,0.419,25,1.067,26,1.13,59,0.027,60,0.11,65,0.831,68,1.594,71,1.47,72,1.983,76,1.142,77,2.839,80,5.128,119,1.243,122,1.758,202,2.469,207,1.516,238,0.002,239,0.002,288,1,292,0.358,294,1.524,295,0.918,296,0.705,298,1.959,333,2.796,334,1.709,339,4.682,340,2.262,516,1.306,526,0.84,534,0.458,537,1.249,539,0.744,541,0.885,543,1.181,556,3.24,558,4.19,565,3.671,571,1.751,624,1.444,625,3.765,627,3.41,628,3.323,629,3.068,630,1.181,650,1.367,656,1.727,658,3.608,659,2.941,670,2.035,756,2.85,787,0.996,790,1.501,798,1.146,975,1.87,1003,0.863,1011,3.493,1058,1.113,1224,2.863,1228,2.049,1229,1.472,1230,1.501,1231,1.472,1232,1.501,1398,2.171,2145,8.327,2445,3.493,2488,5.154,2501,5.342,2516,1.501,2538,3.509,2539,3.368,2823,3.847,2824,3.659,2825,1.709,2905,4.844,3587,3.414,3588,2.091,3589,2.262,3590,2.262,3593,3.509,3597,3.509,3609,4.326,3610,2.262,3626,2.171,3628,2.262,3740,2.871,3809,5.687,3812,5.071,3813,4.88,3814,4.844,3826,4.478,3827,2.496,3832,2.369,3833,5.031,3836,2.496,3921,4.12,3922,8.175,3923,3.196,3924,6.842,3925,7.406,3926,7.406,3927,6.146,3928,6.842,3929,7.406,3930,3.196,3931,3.196,3932,6.842,3933,6.842,3934,3.196,3935,3.196,3936,3.196,3937,3.196,3938,3.196,3939,3.196,3940,3.196,3941,6.925,3942,3.196,3943,2.871,3944,3.196,3945,3.196,3946,4.743,3947,3.196,3948,3.196,3949,3.196,3950,3.196,3951,3.196,3952,3.196,3953,3.196,3954,3.196,3955,2.496,3956,3.196,3957,4.501,3958,2.871,3959,3.196,3960,3.196,3961,3.196,3962,3.196,3963,3.196,3964,3.196,3965,4.957,3966,3.196,3967,3.196,3968,3.196,3969,4.957,3970,3.196]],["title/modules/StarModule.html",[240,1.268,276,3.75]],["body/modules/StarModule.html",[3,0.052,4,0.052,5,0.052,15,0.005,16,0.086,19,0.897,24,1.968,59,0.058,60,0.234,64,2.074,238,0.004,239,0.004,240,2.117,242,2.527,243,3.27,248,3.27,249,2.606,250,2.566,253,3.433,254,3.551,275,5.951,276,7.661,287,3.491,302,3.148,331,4.644,333,3.148,334,3.656,341,5.737,342,5.34,541,2.34,756,1.87,1051,4.839,3799,7.617,3834,7.785,3835,6.14,3971,6.14,3972,6.14,3973,6.836,3974,6.14,3975,6.836,3976,6.836]],["title/injectables/StarService.html",[17,0.883,3834,3.75]],["body/injectables/StarService.html",[3,0.042,4,0.042,5,0.042,10,0.206,13,1.095,14,0.335,15,0.005,16,0.076,17,1.293,18,2.615,19,0.731,20,2.69,22,1.251,23,2.191,24,1.604,59,0.047,60,0.191,62,2,64,1.69,65,1.449,67,3.728,68,2.15,69,3.41,71,1.664,72,1.936,77,2.839,80,6.337,82,3.01,83,3.225,102,2.276,122,2.278,192,2.516,238,0.003,239,0.003,288,1.493,292,0.405,294,1.618,295,0.88,296,0.748,298,1.677,341,3.784,342,4.35,565,3.636,756,2.026,802,3.171,810,1.759,1012,3.698,1799,2.123,2112,4.629,3813,4.277,3814,3.942,3822,6.651,3834,5.488,3977,5.569,3978,7.404,3979,7.404,3980,5.569,3981,5.569,3982,7.404,3983,5.569,3984,7.404,3985,5.569,3986,7.404,3987,5.569,3988,3.521,3989,5.569,3990,5.569,3991,7.404,3992,7.404,3993,9.489,3994,7.404,3995,5.03,3996,5.569,3997,5.569,3998,4.128,3999,5.569]],["title/modules/StargazeModule.html",[240,1.268,277,3.75]],["body/modules/StargazeModule.html",[3,0.052,4,0.052,5,0.052,15,0.005,16,0.086,19,0.897,24,1.968,59,0.058,60,0.234,64,2.074,238,0.004,239,0.004,240,2.117,242,2.527,243,3.27,248,3.27,249,2.606,250,2.566,253,3.433,254,3.551,275,5.951,277,7.661,287,3.491,302,3.148,331,4.644,333,3.148,334,3.656,345,5.737,346,5.34,541,2.34,756,1.87,1051,4.839,3846,7.617,3873,7.785,3874,6.14,4000,6.14,4001,6.14,4002,6.836,4003,6.14,4004,6.836,4005,6.836]],["title/injectables/StargazeService.html",[17,0.883,3873,3.75]],["body/injectables/StargazeService.html",[3,0.042,4,0.042,5,0.042,10,0.205,13,1.094,14,0.334,15,0.005,16,0.075,17,1.287,18,2.599,19,0.726,20,2.683,22,1.244,23,2.178,24,1.594,59,0.047,60,0.19,62,1.992,64,1.679,65,1.44,67,3.719,68,2.146,69,3.396,71,1.659,72,1.933,77,2.832,80,6.327,82,3.595,83,3.212,102,2.269,122,2.272,192,2.501,238,0.003,239,0.003,288,1.487,292,0.404,294,1.613,295,0.877,296,0.746,298,1.672,345,3.76,346,4.324,565,3.633,756,2.269,802,3.161,810,1.748,1012,3.683,1799,2.11,2375,3.918,3813,4.259,3858,6.624,3873,5.465,3988,3.5,3995,5.01,3998,4.102,4006,5.535,4007,7.374,4008,7.374,4009,5.535,4010,5.535,4011,7.374,4012,5.535,4013,7.374,4014,5.535,4015,7.374,4016,5.535,4017,5.535,4018,5.535,4019,7.374,4020,7.374,4021,9.472,4022,7.374,4023,5.535,4024,5.535,4025,5.535]],["title/modules/StripeModule.html",[240,1.268,744,3.582]],["body/modules/StripeModule.html",[3,0.056,4,0.056,5,0.056,15,0.005,16,0.076,19,0.974,59,0.063,60,0.255,238,0.004,239,0.004,240,2.226,242,2.745,243,3.439,248,3.439,249,2.831,250,2.788,253,3.61,254,3.735,287,3.07,634,7.512,744,7.309,4026,6.672,4027,6.672,4028,6.672,4029,7.427,4030,7.427]],["title/injectables/StripeService.html",[17,0.883,634,3.582]],["body/injectables/StripeService.html",[3,0.045,4,0.045,5,0.045,10,0.219,11,1.104,13,0.918,14,0.365,15,0.005,16,0.073,17,1.344,19,0.775,59,0.05,60,0.203,62,1.596,65,2.227,68,1.376,71,1.607,72,1.968,76,1.201,102,1.616,122,1.518,186,2.183,238,0.003,239,0.003,288,1.552,292,0.43,294,1.665,295,0.905,296,0.846,298,1.552,304,5.423,305,3.237,377,6.673,443,2.362,565,2.119,578,5.306,607,5.554,634,5.448,670,1.708,712,6.398,787,2.399,798,2.119,810,1.866,1135,4.013,1523,6.913,1658,5.306,1681,2.669,2167,4.614,2169,4.91,2175,4.614,2187,5.306,2617,4.614,2633,5.704,3574,4.614,4031,5.907,4032,8.561,4033,7.697,4034,7.697,4035,7.697,4036,5.907,4037,7.697,4038,5.907,4039,5.907,4040,5.907,4041,8.561,4042,5.907,4043,5.907,4044,5.907,4045,5.907,4046,5.907,4047,5.907,4048,5.907,4049,5.907,4050,5.907,4051,5.907,4052,5.907,4053,5.306,4054,5.907,4055,5.907,4056,5.907,4057,5.907,4058,5.907,4059,5.907]],["title/modules/StripeSubscriptionModule.html",[240,1.268,278,3.582]],["body/modules/StripeSubscriptionModule.html",[3,0.055,4,0.055,5,0.055,15,0.005,16,0.083,19,0.947,24,2.079,59,0.061,60,0.248,64,2.19,238,0.004,239,0.004,240,2.189,242,2.669,243,3.381,248,3.381,249,2.752,250,2.71,253,3.549,254,3.671,278,7.267,287,2.984,302,3.324,377,4.905,380,5.639,382,5.351,383,6.001,2159,6.001,4060,6.485,4061,6.485,4062,6.485,4063,7.838,4064,7.219,4065,6.485,4066,7.219]],["title/injectables/StripeSubscriptionService.html",[17,0.883,4063,3.75]],["body/injectables/StripeSubscriptionService.html",[3,0.052,4,0.052,5,0.052,10,0.253,14,0.34,15,0.005,16,0.082,17,1.474,19,0.897,20,2.904,22,1.536,23,2.69,24,1.968,59,0.058,60,0.234,62,2.281,64,2.074,65,1.779,67,4.025,71,1.585,72,1.87,238,0.004,239,0.004,288,1.703,292,0.418,294,1.643,295,0.893,296,0.76,298,1.703,377,4.644,382,5.067,383,5.682,673,5.611,787,2.13,810,2.159,2159,7.955,2175,5.34,4063,6.259,4067,6.836,4068,8.445,4069,6.836,4070,6.836,4071,8.445,4072,6.836,4073,8.445,4074,6.836,4075,6.836,4076,6.836,4077,6.836]],["title/modules/StripeWebHookModule.html",[240,1.268,279,3.75]],["body/modules/StripeWebHookModule.html",[3,0.051,4,0.051,5,0.051,15,0.005,16,0.085,19,0.882,59,0.057,60,0.23,238,0.004,239,0.004,240,2.095,242,2.485,243,3.236,248,3.236,249,2.562,250,2.523,253,2.732,254,3.514,264,6.776,278,7.06,279,7.799,283,5.927,287,3.455,360,4.566,376,5.587,377,4.566,380,5.25,381,6.037,541,2.315,744,7.06,749,6.037,4078,6.037,4079,6.721,4080,6.037,4081,8.105,4082,5.587,4083,6.721,4084,6.721]],["title/controllers/StripeWebhookController.html",[539,1.179,4081,3.952]],["body/controllers/StripeWebhookController.html",[3,0.034,4,0.034,5,0.034,10,0.165,14,0.255,15,0.005,16,0.081,19,0.584,37,2.644,59,0.038,60,0.153,62,1.202,65,2.467,68,2.326,71,0.835,72,1.807,76,1.212,102,2.33,122,2.276,207,1.176,238,0.003,239,0.003,288,1.279,292,0.29,294,1.234,295,0.671,296,0.571,298,1.279,304,4.156,305,2.438,377,5.022,380,3.476,462,4.309,526,0.477,534,0.638,539,1.037,541,1.233,543,1.645,565,2.891,623,2.222,628,2.579,630,1.645,632,4.051,633,3.476,634,5.232,635,3.997,636,5.232,637,3.997,656,1.55,666,1.751,670,1.408,675,2.438,694,2.438,695,4.309,714,6.639,787,1.977,788,4.934,802,2.818,852,2.438,870,5.599,884,1.875,1098,2.272,1578,3.997,1757,2.813,1799,1.696,2037,3.698,2161,3.997,2162,3.997,2163,3.997,2164,3.997,2165,3.997,2166,3.997,2167,3.476,2168,3.997,2169,3.698,2170,4.309,2171,3.997,2172,3.997,2175,6.917,3645,3.698,4063,5.478,4065,3.997,4081,4.955,4082,6.144,4085,6.639,4086,3.997,4087,6.343,4088,6.343,4089,4.449,4090,8.058,4091,4.449,4092,4.449,4093,6.144,4094,6.343,4095,4.449,4096,6.343,4097,3.997,4098,4.449,4099,3.997,4100,3.476,4101,5.698,4102,5.698,4103,5.698,4104,5.698,4105,4.449,4106,4.449,4107,4.449,4108,7.392,4109,4.449,4110,4.449,4111,4.449,4112,4.449,4113,4.449,4114,4.449,4115,4.449,4116,4.449,4117,7.392,4118,4.449,4119,6.343,4120,4.449,4121,4.449,4122,4.449,4123,4.449,4124,4.449,4125,4.449,4126,4.449,4127,4.449,4128,4.449,4129,4.449,4130,4.449,4131,4.449,4132,4.449,4133,4.449,4134,4.449,4135,4.449,4136,4.449,4137,6.343,4138,4.449,4139,4.449,4140,4.449,4141,4.449,4142,4.449,4143,4.449,4144,7.392,4145,4.449,4146,4.449,4147,4.449,4148,6.639,4149,4.449,4150,4.449,4151,4.449,4152,4.449,4153,4.449,4154,6.343,4155,4.449,4156,4.449,4157,4.449,4158,4.449,4159,4.449,4160,4.449,4161,4.449,4162,4.449,4163,4.449,4164,4.449]],["title/modules/SubmitModule.html",[240,1.268,280,3.75]],["body/modules/SubmitModule.html",[3,0.052,4,0.052,5,0.052,15,0.005,16,0.086,19,0.897,24,1.968,59,0.058,60,0.234,64,2.074,238,0.004,239,0.004,240,2.117,242,2.527,243,3.27,248,3.27,249,2.606,250,2.566,253,3.433,254,3.551,275,5.951,280,7.661,287,3.491,302,3.148,331,4.644,333,3.148,334,3.656,343,5.737,344,5.34,541,2.34,756,1.87,1051,4.839,3884,7.617,3911,7.785,3912,6.14,4165,6.14,4166,6.14,4167,6.836,4168,6.14,4169,6.836,4170,6.836]],["title/injectables/SubmitService.html",[17,0.883,3911,3.75]],["body/injectables/SubmitService.html",[3,0.042,4,0.042,5,0.042,10,0.206,13,1.095,14,0.335,15,0.005,16,0.076,17,1.293,18,2.615,19,0.731,20,2.69,22,1.251,23,2.191,24,1.604,59,0.047,60,0.191,62,2,64,1.69,65,1.449,67,3.728,68,2.15,69,3.41,71,1.664,72,1.936,77,2.839,80,6.337,82,3.01,83,3.225,102,2.276,122,2.278,192,2.516,238,0.003,239,0.003,288,1.493,292,0.405,294,1.618,295,0.88,296,0.748,298,1.677,343,3.784,344,4.35,565,3.636,756,2.026,802,3.171,810,1.759,1012,3.698,1799,2.123,3813,4.277,3814,3.942,3911,5.488,3913,5.003,3988,3.521,3995,5.03,3998,4.128,4171,5.569,4172,7.404,4173,7.404,4174,5.569,4175,5.569,4176,7.404,4177,5.569,4178,7.404,4179,5.569,4180,7.404,4181,5.569,4182,5.569,4183,5.569,4184,7.404,4185,7.404,4186,9.489,4187,7.404,4188,7.404,4189,5.569,4190,5.569,4191,5.569]],["title/classes/SupabaseAuthDto.html",[60,0.174,646,4.206]],["body/classes/SupabaseAuthDto.html",[3,0.021,4,0.021,5,0.021,10,0.102,11,0.633,13,0.789,14,0.404,15,0.005,16,0.023,59,0.023,60,0.095,76,1.269,88,2.252,93,1.559,189,3.123,207,1.897,238,0.002,239,0.002,292,0.448,295,0.817,296,0.933,460,2.324,465,3.962,516,2.792,522,0.691,526,1.053,527,1.051,528,3.269,529,2.203,530,2.146,533,1.631,534,0.395,537,1.304,538,3.667,544,7.306,558,4.722,569,3.667,596,5.999,597,2.113,607,4.223,631,6.58,646,3.667,662,6.034,664,4.954,665,4.954,666,2.17,667,2.446,670,1.224,671,4.954,678,4.954,679,4.954,680,4.954,681,5.732,682,5.387,683,4.584,684,5.732,685,4.584,686,4.048,687,4.584,688,4.584,689,4.584,690,4.954,691,4.954,692,4.954,761,3.524,884,2.509,949,2.997,975,1.756,1064,4.463,1109,4.332,1117,4.353,1121,4.672,1256,2.848,1392,2.304,1449,3.56,1470,2.621,1472,3.56,1565,1.682,1597,1.736,1653,3.962,1661,3.21,1662,3.375,1664,1.993,1665,4.513,1694,3.667,1724,4.463,1745,2.113,1754,3.269,1828,2.887,1936,2.789,2002,3.667,2242,5.24,2373,3.962,4192,9.857,4193,2.756,4194,2.756,4195,2.756,4196,4.411,4197,4.411,4198,2.756,4199,2.756,4200,2.756,4201,3.962,4202,3.962,4203,2.756,4204,3.446,4205,2.756,4206,4.411,4207,2.756,4208,3.962,4209,3.962,4210,2.756,4211,2.756,4212,6.304,4213,4.411,4214,2.756,4215,2.756,4216,6.304,4217,4.411,4218,2.756,4219,4.411,4220,2.756,4221,2.756,4222,3.962,4223,3.962,4224,2.756,4225,4.411,4226,4.411,4227,2.756,4228,4.411,4229,2.756,4230,2.756,4231,2.756,4232,3.962,4233,3.962,4234,2.756,4235,2.756,4236,4.411,4237,3.667,4238,2.756,4239,2.756]],["title/injectables/SupabaseGuard.html",[17,0.883,650,2.165]],["body/injectables/SupabaseGuard.html",[3,0.06,4,0.06,5,0.06,15,0.005,16,0.079,17,1.614,19,1.043,59,0.068,60,0.273,238,0.004,239,0.004,650,3.956,748,6.609,810,2.512,1054,2.73,4240,7.951,4241,7.951,4242,7.951]],["title/injectables/SupabaseStrategy.html",[17,0.883,745,3.952]],["body/injectables/SupabaseStrategy.html",[3,0.051,4,0.051,5,0.051,10,0.247,14,0.335,15,0.005,16,0.081,17,1.454,19,0.877,59,0.057,60,0.229,62,2.45,71,1.254,72,1.851,207,1.239,238,0.004,239,0.004,288,1.679,292,0.414,294,1.62,295,0.881,296,0.749,298,1.679,299,4.731,311,4.954,544,4.954,575,7.892,631,5.895,676,2.461,745,6.505,748,5.556,787,2.083,810,2.111,1054,2.295,1082,6.004,4093,5.556,4243,6.684,4244,8.328,4245,8.328,4246,6.684,4247,8.328,4248,9.071,4249,6.684,4250,8.328,4251,6.684,4252,6.684,4253,6.684,4254,6.684,4255,6.684,4256,6.684,4257,6.684,4258,6.684,4259,6.684,4260,6.684,4261,6.684,4262,6.684,4263,6.684,4264,6.684,4265,6.684,4266,6.684,4267,6.684,4268,6.684]],["title/modules/TierModule.html",[240,1.268,4269,3.75]],["body/modules/TierModule.html",[3,0.057,4,0.057,5,0.057,15,0.005,16,0.076,19,0.978,59,0.064,60,0.256,238,0.004,239,0.004,240,2.232,242,2.757,243,3.448,248,3.448,249,2.843,250,2.799,253,3.619,254,3.744,4269,7.659,4270,6.699,4271,6.699,4272,6.699,4273,8.294,4274,7.458,4275,7.458]],["title/injectables/TierService.html",[17,0.883,4273,3.952]],["body/injectables/TierService.html",[3,0.059,4,0.045,5,0.045,10,0.219,11,1.105,13,0.919,14,0.365,15,0.005,16,0.073,17,1.345,19,0.776,59,0.05,60,0.203,62,1.598,65,2.229,68,1.795,72,1.749,76,1.067,88,4.634,102,2.108,117,1.43,122,1.98,207,1.429,238,0.003,239,0.003,288,1.554,292,0.391,294,1.499,295,0.995,296,0.693,298,1.193,304,5.426,305,3.242,462,6.166,514,4.188,537,0.786,565,2.122,572,8.153,607,5.247,675,4.223,694,4.223,695,5.821,787,1.844,798,2.122,810,1.869,852,3.242,853,3.623,860,6.404,1091,2.221,1724,4.188,2167,4.622,2617,4.622,2862,4.385,4273,6.019,4276,5.917,4277,7.705,4278,7.705,4279,7.705,4280,9.077,4281,5.917,4282,7.705,4283,8.568,4284,5.917,4285,5.917,4286,5.917,4287,5.314,4288,5.917,4289,5.917,4290,7.696,4291,8.568,4292,5.917,4293,7.705,4294,5.917,4295,5.917,4296,5.917]],["title/modules/TimescaleModule.html",[240,1.268,281,3.582]],["body/modules/TimescaleModule.html",[3,0.055,4,0.055,5,0.055,15,0.005,16,0.083,19,0.953,24,2.091,59,0.062,60,0.249,238,0.004,239,0.004,240,2.197,242,2.685,243,3.393,248,3.393,249,2.769,250,2.726,253,3.562,254,3.685,281,7.276,287,3.002,302,3.345,438,4.934,471,5.673,3346,7.844,3355,6.524,4297,6.524,4298,6.524,4299,6.524,4300,7.263,4301,7.263,4302,6.524]],["title/classes/TopProjectsDto.html",[56,3.75,60,0.174]],["body/classes/TopProjectsDto.html",[3,0.05,4,0.05,5,0.05,6,3.594,10,0.243,11,1.179,13,1.063,14,0.413,15,0.005,16,0.077,56,6.095,59,0.056,60,0.308,78,3.821,100,3.184,117,2.172,142,4.167,192,4.061,238,0.004,239,0.004,292,0.376,296,0.74,516,2.368,522,1.642,526,0.882,527,2.497,530,1.698,533,3.04,534,0.94,536,1.961,537,1.093,670,1.825,756,2.25,975,2.145,978,3.59,1091,2.459,1109,2.905,1113,3.344,1115,3.344,1117,3.647,1119,3.519,1182,3.784,1183,5.381,1184,5.117,1185,5.117,1352,5.199,3673,5.884,4303,8.988,4304,6.551,4305,6.551,4306,6.551,4307,6.551]],["title/classes/TopUsersDto.html",[60,0.174,4308,4.206]],["body/classes/TopUsersDto.html",[3,0.044,4,0.044,5,0.044,8,3.64,10,0.214,11,1.09,13,1.086,14,0.415,15,0.005,16,0.072,59,0.049,60,0.291,71,1.087,93,2.686,117,2.362,186,3.743,207,1.409,238,0.003,239,0.003,292,0.411,296,0.863,516,2.643,522,1.452,526,0.91,534,0.831,536,1.735,537,0.77,565,3.042,670,1.687,830,3.371,884,2.246,975,2.024,978,3.175,1057,3.905,1058,2.955,1091,3.183,1098,4.33,1099,3.88,1100,3.796,1101,3.098,1107,2.958,1109,2.569,1117,3.993,1119,3.852,1183,5.55,1353,3.442,1354,3.442,2310,4.805,2633,5.632,2634,6.003,2652,4.525,2655,4.973,2656,5.632,2666,4.294,2667,4.294,2684,4.815,2685,5.203,2686,5.203,2689,5.203,2690,5.203,3152,4.815,4308,6.317,4309,9.348,4310,7.599,4311,5.793]],["title/classes/UpdateEndorsementDto.html",[60,0.174,4312,4.545]],["body/classes/UpdateEndorsementDto.html",[3,0.06,4,0.06,5,0.06,15,0.005,16,0.079,59,0.068,60,0.272,238,0.004,239,0.004,522,1.989,534,1.138,588,5.192,1054,2.724,1362,5.88,1364,7.127,2520,6.595,4312,8.294,4313,7.934,4314,7.934,4315,7.934]],["title/classes/UpdateInsightDto.html",[60,0.174,2911,3.952]],["body/classes/UpdateInsightDto.html",[3,0.053,4,0.053,5,0.053,10,0.26,11,1.23,14,0.405,15,0.005,16,0.06,20,2.127,59,0.06,60,0.24,76,1.068,202,3.486,238,0.004,239,0.004,292,0.423,295,0.98,443,2.803,522,1.757,526,0.994,527,3.532,530,1.914,588,4.587,596,4.762,761,4.108,766,5.195,972,3.941,974,3.427,976,5.826,1054,2.945,1058,2.987,1066,4.955,1210,4.961,1211,5.422,1212,5.475,1389,7.871,1391,6.296,1392,4.479,1394,6.296,1396,5.826,2911,6.698,2913,5.826,4316,6.296,4317,7.009,4318,7.009,4319,7.009]],["title/classes/UpdateInsightMemberDto.html",[60,0.174,4320,4.206]],["body/classes/UpdateInsightMemberDto.html",[3,0.055,4,0.055,5,0.055,10,0.268,11,1.255,14,0.378,15,0.005,16,0.075,59,0.062,60,0.3,76,1.216,238,0.004,239,0.004,292,0.331,522,1.817,526,0.777,527,2.763,530,1.808,533,3.235,534,1.04,535,3.389,536,2.17,537,0.963,1182,4.187,1392,5.1,1404,6.511,1405,6.836,1832,7.409,1837,6.487,2900,5.662,4316,7.861,4320,7.275,4321,7.248,4322,7.275,4323,6.487,4324,7.248,4325,7.248]],["title/classes/UpdateUserCollaborationDto.html",[60,0.174,4326,4.206]],["body/classes/UpdateUserCollaborationDto.html",[3,0.056,4,0.056,5,0.056,10,0.271,11,1.261,14,0.379,15,0.005,16,0.075,59,0.062,60,0.302,76,1.219,207,1.631,238,0.004,239,0.004,292,0.334,392,2.936,505,7.9,522,1.832,526,0.784,527,2.785,530,1.816,533,3.251,534,1.048,535,3.406,536,2.188,537,0.971,1182,4.221,1426,6.563,1427,6.518,2170,6.806,4326,7.31,4327,6.87,4328,7.307,4329,7.307,4330,6.563,4331,7.307]],["title/classes/UpdateUserDto.html",[60,0.174,604,4.206]],["body/classes/UpdateUserDto.html",[3,0.03,4,0.03,5,0.03,10,0.144,11,0.825,14,0.419,15,0.005,16,0.049,59,0.033,60,0.197,76,1.312,207,1.858,238,0.003,239,0.003,292,0.437,295,0.854,296,0.91,453,4.044,460,1.228,516,2.415,522,0.975,526,1.027,527,2.192,530,2.118,533,2.53,534,0.558,535,3.386,536,1.164,537,1.272,604,4.781,607,4.943,618,8.896,676,3.055,681,6.71,682,6.305,683,5.689,684,6.71,685,5.689,686,4.626,687,5.689,688,5.689,689,5.689,703,5.714,761,3.623,763,4.65,768,3.764,864,3.322,949,3.907,988,2.882,1109,4.137,1117,4.196,1119,4.048,1407,3.493,1409,5.166,1470,2.31,1565,2.192,1724,4.071,1754,4.263,1936,2.458,2303,4.493,2665,5.908,4201,5.166,4202,3.493,4204,4.493,4208,5.166,4209,5.166,4222,5.166,4223,3.493,4232,8.064,4233,3.493,4237,3.232,4323,2.882,4327,7.556,4332,3.888,4333,5.166,4334,3.888,4335,3.888,4336,5.751,4337,3.888,4338,3.888,4339,3.888,4340,3.888,4341,3.888,4342,3.888,4343,3.888,4344,3.888,4345,3.888,4346,3.888,4347,3.888,4348,3.888,4349,3.888,4350,3.888,4351,3.888,4352,3.888,4353,7.564,4354,5.751,4355,5.751,4356,5.751,4357,5.751,4358,3.888,4359,3.888,4360,3.888,4361,3.888,4362,8.072,4363,3.888,4364,3.888,4365,3.888]],["title/classes/UpdateUserEmailPreferencesDto.html",[60,0.174,605,4.206]],["body/classes/UpdateUserEmailPreferencesDto.html",[3,0.048,4,0.048,5,0.048,10,0.232,11,1.148,14,0.41,15,0.005,16,0.068,59,0.053,60,0.274,197,4.28,207,1.903,238,0.004,239,0.004,292,0.402,460,2.784,522,1.574,526,0.945,527,3.359,530,2.025,533,3.431,534,0.9,536,1.88,537,1.171,594,5.061,605,6.653,607,6.176,676,3.053,761,4.975,766,6.531,768,6.074,1427,5.932,1754,5.932,4327,7.25,4366,6.277,4367,8.813,4368,8.813,4369,8.813,4370,6.277,4371,9.281,4372,6.277,4373,8.004,4374,6.277]],["title/classes/UpdateUserProfileInterestsDto.html",[60,0.174,612,4.206]],["body/classes/UpdateUserProfileInterestsDto.html",[3,0.055,4,0.055,5,0.055,10,0.269,11,1.258,14,0.379,15,0.005,16,0.075,59,0.062,60,0.301,76,1.218,207,1.627,238,0.004,239,0.004,292,0.332,443,3.508,522,1.824,526,0.781,527,2.774,530,1.812,533,3.243,534,1.044,536,2.179,537,0.967,612,7.292,614,7.417,676,2.783,972,4.933,974,4.782,2326,5.394,4327,6.853,4375,7.278,4376,6.049,4377,7.278,4378,5.685]],["title/controllers/UserCollaborationController.html",[539,1.179,4379,4.206]],["body/controllers/UserCollaborationController.html",[3,0.031,4,0.031,5,0.031,10,0.15,13,0.995,14,0.357,15,0.005,16,0.083,19,0.533,25,1.356,26,1.436,28,1.987,59,0.035,60,0.139,62,1.098,65,1.546,68,1.915,71,1.115,72,1.949,76,1.023,77,2.839,102,2.113,119,2.152,122,2.206,197,2.173,207,1.886,238,0.003,239,0.003,288,1.198,292,0.353,294,1.503,295,0.817,296,0.695,298,1.558,311,3.012,392,2.866,413,5.469,414,3.174,516,1.565,526,0.829,534,0.583,537,1.092,539,0.947,541,1.126,543,1.502,544,3.012,556,3.134,558,3.177,559,2.761,561,5.033,565,3.528,571,2.227,575,6.421,591,3.033,594,2.569,622,2.876,623,2.967,624,1.836,625,3.558,626,3.103,627,3.234,628,2.855,629,2.9,630,1.502,631,2.876,632,3.848,650,1.739,656,1.416,658,3.234,659,2.636,670,1.559,673,2.488,783,4.395,784,2.285,789,3.668,790,1.908,791,1.947,802,2.265,1002,1.376,1003,1.098,1228,2.456,1229,1.871,1230,1.908,1231,1.871,1232,1.908,1373,3.174,1424,7.556,1427,6.873,2170,2.761,2441,2.876,2442,4.036,2487,3.65,2516,1.908,2554,3.65,2571,4.036,2792,3.638,2795,3.012,2825,2.173,2905,4.205,2909,4.971,2912,3.174,3206,3.012,3826,3.888,3833,4.036,3988,2.569,4326,7.136,4379,4.938,4380,4.747,4381,4.063,4382,4.063,4383,7.383,4384,7.383,4385,7.726,4386,6.308,4387,4.063,4388,5.941,4389,7.022,4390,3.65,4391,5.336,4392,5.336,4393,4.063,4394,4.063,4395,3.65,4396,7.022,4397,4.063,4398,4.063,4399,4.063,4400,4.063,4401,4.063,4402,3.65,4403,4.063,4404,4.063,4405,4.063,4406,2.569,4407,5.205,4408,3.65,4409,5.941,4410,4.063,4411,2.569,4412,4.063,4413,4.063,4414,4.063,4415,4.063,4416,4.063,4417,4.063,4418,7.022,4419,4.063,4420,5.941,4421,4.063,4422,4.063,4423,4.063,4424,3.65,4425,4.063,4426,4.063]],["title/injectables/UserCollaborationService.html",[17,0.883,4407,3.75]],["body/injectables/UserCollaborationService.html",[3,0.038,4,0.038,5,0.038,10,0.185,13,0.843,14,0.369,15,0.005,16,0.08,17,1.199,18,3.225,19,0.654,20,2.57,21,4.202,22,1.12,23,1.961,24,1.435,25,1.664,26,1.762,28,2.437,59,0.042,60,0.171,62,1.855,64,1.512,65,1.787,67,3.561,68,1.973,69,3.163,71,1.723,72,2.085,76,1.211,77,2.712,82,3.443,83,2.992,102,1.364,119,2.359,122,1.281,207,0.924,234,2.732,238,0.003,239,0.003,247,5.156,288,1.385,292,0.43,294,1.786,295,0.971,296,0.826,298,1.852,413,4.862,414,3.893,565,3.187,670,1.972,673,5.623,787,2.449,802,1.9,810,1.574,1002,1.687,1003,1.346,1004,3.151,1009,3.151,1011,4.012,1012,2.49,1613,2.879,2213,4.477,2570,4.343,2588,4.343,4380,5.537,4383,6.17,4384,7.059,4386,6.17,4395,4.477,4402,6.17,4407,5.091,4424,7.979,4427,4.984,4428,6.869,4429,4.984,4430,4.984,4431,6.869,4432,6.869,4433,4.984,4434,4.984,4435,4.984,4436,4.984,4437,6.869,4438,4.984,4439,4.984,4440,4.984,4441,4.984,4442,4.984,4443,4.984,4444,4.984,4445,4.984,4446,4.984,4447,4.984,4448,4.984,4449,4.984]],["title/controllers/UserController.html",[539,1.179,4450,4.206]],["body/controllers/UserController.html",[3,0.024,4,0.024,5,0.024,8,2.36,10,0.117,14,0.384,15,0.005,16,0.085,19,0.416,25,1.058,26,1.121,28,2.409,57,2.477,59,0.027,60,0.109,62,0.856,65,2.032,68,1.408,71,1.581,72,2.042,76,1.208,77,3.061,85,2.782,119,2.585,122,1.553,196,3.402,197,3.643,202,3.314,207,1.811,238,0.002,239,0.002,288,0.993,292,0.385,294,1.639,295,0.891,296,0.758,298,1.699,333,2.269,334,1.695,335,2.226,386,1.783,388,2.77,389,1.941,390,1.884,394,2.77,396,1.884,410,4.738,415,3.487,416,2.477,438,3.347,439,2.635,453,5.152,526,0.904,534,0.455,537,1.083,539,0.739,541,0.878,543,1.172,556,3.379,560,2.635,627,3.754,628,3.518,629,3.249,630,1.172,632,3.311,656,1.105,659,3.163,676,1.456,789,2.573,1002,1.073,1003,0.856,1220,2.477,1228,3.229,1229,1.46,1230,1.489,1231,1.46,1232,1.489,1233,3.954,1234,2.35,1239,2.477,1285,5.322,1787,4.095,2207,5.022,2235,2.005,2442,5.306,2445,4.671,2488,4.392,2516,1.489,2549,6.133,2550,5.322,2682,5.663,2687,3.651,2781,5.05,2794,2.477,2801,2.848,2811,2.848,2826,4.105,2828,2.477,2833,2.635,2851,2.848,3308,2.848,3346,4.478,3519,2.848,3574,3.848,3587,3.397,3588,2.075,3610,2.244,3615,2.848,3626,2.154,3628,2.244,4308,5.663,4406,2.005,4411,2.005,4450,4.095,4451,3.17,4452,7.379,4453,7.379,4454,7.379,4455,7.379,4456,7.379,4457,4.927,4458,4.927,4459,6.813,4460,3.17,4461,3.17,4462,6.492,4463,3.17,4464,3.17,4465,3.17,4466,4.425,4467,3.17,4468,3.17,4469,3.17,4470,3.17,4471,3.17,4472,2.848,4473,3.17,4474,3.17,4475,3.17,4476,3.17,4477,3.17,4478,3.17,4479,3.17,4480,3.17,4481,3.17,4482,3.17,4483,3.17,4484,3.17,4485,3.17,4486,4.927,4487,3.17,4488,3.17,4489,3.17,4490,4.927,4491,4.927,4492,3.17,4493,3.17,4494,3.17,4495,3.17,4496,2.848,4497,3.17,4498,3.17,4499,4.927,4500,4.425,4501,3.17,4502,3.17,4503,4.478,4504,2.848,4505,3.17,4506,2.635,4507,3.17,4508,3.17,4509,4.927,4510,3.17,4511,3.17,4512,3.17,4513,3.17,4514,3.17,4515,3.17,4516,4.425,4517,3.17,4518,3.17,4519,3.17,4520,3.17,4521,3.17,4522,3.17,4523,3.17,4524,3.17,4525,3.17]],["title/controllers/UserEndorsementController.html",[539,1.179,4526,4.206]],["body/controllers/UserEndorsementController.html",[3,0.043,4,0.043,5,0.043,10,0.209,13,1.022,14,0.359,15,0.005,16,0.084,19,0.742,59,0.048,60,0.194,71,1.404,72,1.945,119,2.603,207,1.654,238,0.003,239,0.003,288,1.509,292,0.342,294,1.455,295,0.791,296,0.673,298,1.509,418,6.071,419,4.702,516,1.49,526,0.802,534,0.811,539,1.318,541,1.567,543,2.091,556,3.153,558,4.77,565,3.328,624,2.556,625,3.86,628,3.408,629,3.146,630,2.091,650,2.42,656,1.971,658,3.445,659,2.808,787,2.331,790,2.656,798,2.029,1002,1.915,1003,1.528,1224,5.152,1228,3.465,1229,2.605,1230,2.656,1231,2.605,1232,2.656,1706,4.896,1786,6.967,2488,5.015,2494,6.72,2505,6.218,2517,5.695,2525,5.081,2531,6.72,2825,3.025,4380,4.842,4526,6.218,4527,5.657,4528,5.657,4529,8.92,4530,8.92,4531,5.657,4532,5.657,4533,5.657,4534,5.657,4535,5.657,4536,5.657,4537,5.081,4538,5.657,4539,5.657,4540,5.657,4541,5.657,4542,5.657,4543,5.657,4544,5.657]],["title/injectables/UserFollowService.html",[17,0.883,4545,3.438]],["body/injectables/UserFollowService.html",[3,0.032,4,0.032,5,0.032,10,0.158,13,1.111,14,0.351,15,0.005,16,0.074,17,1.073,18,1.998,19,0.558,20,2.395,22,0.956,23,1.674,24,1.225,28,2.081,59,0.036,60,0.146,62,1.659,64,1.291,65,1.876,67,3.32,68,2.219,69,2.829,71,1.688,72,2.037,77,2.948,82,3.872,83,3.646,85,2.829,102,2.16,121,1.769,122,2.366,207,1.552,213,4.02,234,3.951,238,0.003,239,0.003,288,1.239,292,0.411,294,1.697,295,0.923,296,0.785,298,1.759,398,2.891,399,3.154,565,3.602,632,4.929,787,1.326,802,3.009,810,1.344,1012,3.601,1161,2.606,1799,1.622,2375,4.349,2415,3.537,3813,2.458,3988,2.69,3995,2.891,3998,4.553,4380,5.318,4406,2.69,4545,4.173,4546,4.255,4547,6.143,4548,6.143,4549,6.143,4550,6.143,4551,6.143,4552,4.255,4553,6.11,4554,4.255,4555,6.143,4556,6.143,4557,8.426,4558,4.255,4559,4.255,4560,6.143,4561,4.255,4562,6.143,4563,4.255,4564,6.143,4565,8.554,4566,4.255,4567,6.143,4568,4.255,4569,3.324,4570,4.255,4571,4.255,4572,6.143,4573,4.255,4574,7.209,4575,7.895,4576,4.255,4577,7.209,4578,9.207,4579,4.553,4580,6.143,4581,6.143,4582,6.143,4583,4.255,4584,4.255,4585,6.143,4586,4.255,4587,4.255,4588,4.255]],["title/controllers/UserFollowingController.html",[539,1.179,4589,4.206]],["body/controllers/UserFollowingController.html",[3,0.049,4,0.049,5,0.049,8,3.912,10,0.24,14,0.261,15,0.005,16,0.084,19,0.85,28,3.169,59,0.055,60,0.222,65,1.686,68,1.51,71,1.216,72,1.825,76,1.114,77,2.615,85,4.118,122,1.665,207,1.741,238,0.004,239,0.004,288,1.647,292,0.296,294,1.261,295,0.685,296,0.583,298,1.307,335,3.69,398,4.402,399,4.803,453,4.783,516,2.152,526,0.695,534,0.929,537,0.861,539,1.51,541,1.795,543,2.395,556,2.887,627,3.761,629,3.065,630,2.395,632,4.901,656,2.257,659,2.432,798,2.325,903,5.001,2235,4.097,2445,4.17,2516,3.043,2550,5.062,4380,4.717,4406,4.097,4411,4.097,4506,5.386,4545,6.076,4579,6.053,4589,6.789,4590,6.48,4591,9.39,4592,6.48,4593,6.48,4594,5.821,4595,6.48,4596,5.062,4597,6.48,4598,6.48,4599,6.48]],["title/controllers/UserFollowsController.html",[539,1.179,4600,4.206]],["body/controllers/UserFollowsController.html",[3,0.031,4,0.031,5,0.031,10,0.15,13,1.054,14,0.356,15,0.005,16,0.077,19,0.531,28,1.98,59,0.034,60,0.139,65,1.054,68,2.116,71,1.54,72,1.97,76,1.154,77,2.908,85,3.949,98,2.295,122,2.203,207,1.91,238,0.003,239,0.003,288,1.195,292,0.352,294,1.5,295,0.816,296,0.694,298,1.729,398,4.761,399,3.001,453,5.036,516,1.561,526,0.827,534,0.581,537,1.207,539,0.943,541,1.122,543,1.497,556,3.21,558,3.169,565,3.596,571,2.219,591,3.026,624,1.83,625,3.78,626,3.095,627,3.78,628,2.409,629,3.081,630,1.497,632,3.841,650,1.733,656,1.411,658,3.552,659,2.895,675,2.219,694,2.219,695,4.026,787,1.262,790,1.902,798,1.453,852,3.248,853,2.48,903,3.629,2375,5.46,2416,5.24,2445,4.191,2516,1.902,2549,5.826,2550,5.475,2691,7.128,2693,3.001,2825,2.166,3780,3.638,3812,5.195,3813,4.455,3832,3.001,3833,5.24,3877,6.919,3881,5.323,4380,4.741,4406,2.561,4411,2.561,4500,3.638,4506,3.366,4516,6.928,4545,4.761,4579,4.392,4594,6.295,4596,3.163,4600,4.926,4601,4.05,4602,7.009,4603,8.208,4604,8.208,4605,7.009,4606,4.05,4607,4.05,4608,5.926,4609,4.05,4610,4.05,4611,4.05,4612,4.05,4613,4.05,4614,5.926,4615,4.05,4616,4.05,4617,5.926,4618,4.05,4619,4.05,4620,4.05,4621,5.926,4622,4.05,4623,4.05,4624,4.05,4625,4.05,4626,4.05,4627,4.05,4628,4.05,4629,5.926,4630,4.05,4631,4.05,4632,5.926,4633,4.05,4634,4.05,4635,4.05,4636,5.926,4637,4.05,4638,3.638,4639,4.05,4640,4.05]],["title/controllers/UserHighlightsController.html",[539,1.179,4641,4.206]],["body/controllers/UserHighlightsController.html",[3,0.02,4,0.02,5,0.02,10,0.095,13,1.098,14,0.402,15,0.005,16,0.072,19,0.338,25,0.86,26,0.91,28,2.042,59,0.022,60,0.088,68,1.412,71,1.339,72,2.009,76,0.888,77,2.99,85,2.791,102,1.951,119,1.519,122,2.011,202,1.698,207,1.818,238,0.002,239,0.002,288,0.842,292,0.369,294,1.573,295,0.958,296,0.728,298,1.631,349,1.259,392,2.7,394,3.746,396,1.53,404,2.557,405,5.141,406,1.685,516,0.678,526,0.867,534,0.369,537,1.217,539,0.6,541,0.713,543,0.952,556,3.3,558,4.898,559,4.117,561,5.476,565,3.653,568,4.734,571,3.651,591,2.69,594,2.641,597,2.001,622,1.823,623,2.086,624,1.164,625,3.724,626,2.752,627,3.604,628,3.182,629,3.119,630,0.952,650,1.102,656,0.897,658,3.604,659,3.036,670,2.054,686,1.259,783,4.898,784,2.348,789,4.224,790,1.209,791,1.234,798,0.924,802,0.982,843,1.53,975,2.069,1003,0.696,1228,2.178,1319,2.313,1440,6.491,1442,2.012,1749,3.905,1750,5.572,2239,2.14,2300,2.956,2309,4.917,2314,2.956,2512,4.492,2516,1.209,2781,3.905,2792,3.711,2794,3.262,2796,5.444,2797,4.492,2814,2.313,2815,2.313,2816,2.313,2817,2.313,2823,4.224,2824,4.018,2825,1.377,2826,3.579,2828,2.012,2835,2.313,2840,4.079,2847,2.313,2848,2.313,2850,2.313,2896,2.012,2904,2.14,2920,2.012,2925,2.14,3206,1.909,3826,3.966,3833,2.837,3877,3.262,3988,1.628,3995,1.749,4378,2.012,4380,4.8,4390,2.313,4411,1.628,4641,3.471,4642,2.575,4643,2.575,4644,6.662,4645,4.732,4646,6.662,4647,6.662,4648,6.662,4649,6.662,4650,6.662,4651,6.061,4652,6.662,4653,2.575,4654,7.03,4655,2.575,4656,2.575,4657,2.575,4658,2.575,4659,2.575,4660,7.326,4661,2.575,4662,4.176,4663,2.313,4664,2.575,4665,5.268,4666,2.575,4667,3.751,4668,2.575,4669,2.575,4670,2.575,4671,2.575,4672,2.575,4673,2.575,4674,2.575,4675,2.575,4676,2.575,4677,6.061,4678,4.176,4679,2.575,4680,2.575,4681,2.575,4682,2.575,4683,2.575,4684,2.575,4685,2.575,4686,2.575,4687,2.14,4688,2.575,4689,2.575,4690,4.176,4691,2.313,4692,2.012,4693,2.14,4694,2.313,4695,2.575,4696,2.575,4697,2.575,4698,2.575,4699,2.575,4700,2.14,4701,5.268,4702,2.575,4703,2.575,4704,2.575,4705,2.575,4706,2.575,4707,2.575,4708,2.575,4709,2.575,4710,2.575,4711,2.575,4712,2.575,4713,2.575,4714,4.176,4715,2.575,4716,2.575,4717,2.575,4718,2.575,4719,2.575,4720,2.575,4721,2.575,4722,2.575,4723,2.575]],["title/injectables/UserHighlightsService.html",[17,0.883,2826,3.438]],["body/injectables/UserHighlightsService.html",[3,0.019,4,0.019,5,0.019,10,0.188,13,1.112,14,0.368,15,0.005,16,0.076,17,0.698,18,2.384,19,0.32,20,2.229,21,2.715,22,0.548,23,0.96,24,0.703,25,0.815,26,0.863,28,1.955,59,0.021,60,0.084,62,1.08,64,1.213,65,1.81,67,2.469,68,2.255,69,1.841,71,1.656,72,2.083,76,1.017,77,2.782,78,1.573,82,3.754,83,2.821,85,2.338,90,1.658,91,1.478,93,1.413,99,1.41,100,0.945,101,1.658,102,2.009,118,2.088,119,2.386,121,1.462,122,2.193,124,2.871,143,0.85,146,1.809,147,1.809,148,1.495,149,1.809,156,1.495,196,1.063,207,1.201,213,3.323,224,2.83,234,3.217,238,0.002,239,0.002,247,4.025,288,0.806,292,0.418,294,1.76,295,0.957,296,0.814,298,1.825,394,2.248,396,1.45,404,2.448,405,4.169,406,1.597,565,3.599,632,4.025,670,1.303,673,3.109,686,1.194,728,3.123,756,1.094,787,2.389,791,1.169,802,1.936,810,0.771,843,1.45,884,0.721,887,2.783,1002,1.353,1003,1.08,1004,1.543,1009,3.211,1011,3.552,1012,2.536,1081,1.305,1125,2.716,1133,2.716,1135,3.988,1140,1.597,1141,1.658,1162,1.45,1179,1.728,1223,1.597,1440,4.586,1442,1.907,1613,2.933,1652,1.955,1749,1.809,1750,1.907,1799,1.524,1923,1.809,2239,2.029,2255,2.029,2276,3.123,2277,1.907,2294,2.193,2300,2.83,2302,2.029,2309,3.842,2415,2.029,2419,2.193,2424,2.193,2570,2.528,2588,2.528,2784,3.591,2803,2.193,2826,2.716,2909,1.728,2968,2.029,3035,2.83,3036,3.323,3045,3.123,3047,3.323,3067,2.193,3358,1.809,3541,2.029,3645,2.029,3656,3.591,3665,2.193,3774,2.193,3790,3.323,3813,1.41,3988,1.543,3995,1.658,4380,5.334,4406,1.543,4545,4.99,4553,4.99,4565,5.818,4569,1.907,4596,1.907,4654,7.512,4660,7.676,4692,1.907,4694,2.193,4724,2.441,4725,3.998,4726,3.998,4727,3.998,4728,3.998,4729,3.998,4730,3.998,4731,3.998,4732,3.998,4733,3.998,4734,3.998,4735,2.441,4736,5.078,4737,2.441,4738,3.591,4739,3.998,4740,2.441,4741,3.998,4742,2.441,4743,3.998,4744,5.818,4745,2.441,4746,2.441,4747,3.998,4748,2.441,4749,3.998,4750,2.441,4751,2.441,4752,2.441,4753,2.441,4754,3.998,4755,2.441,4756,3.998,4757,2.441,4758,2.441,4759,3.998,4760,2.441,4761,3.998,4762,2.441,4763,2.441,4764,2.441,4765,3.998,4766,2.441,4767,2.193,4768,2.441,4769,2.193,4770,3.591,4771,3.591,4772,2.441,4773,2.441,4774,2.193,4775,3.998,4776,2.193,4777,2.441,4778,2.441,4779,2.441,4780,2.441,4781,2.441,4782,2.441,4783,2.441,4784,2.441,4785,2.441,4786,2.441,4787,2.441,4788,2.441,4789,2.441,4790,3.998,4791,2.441,4792,2.441,4793,2.441,4794,2.441,4795,2.441,4796,2.441,4797,2.441,4798,2.441,4799,2.441,4800,2.441,4801,2.441,4802,3.998,4803,2.441,4804,2.441,4805,2.441,4806,2.193,4807,2.441,4808,2.441,4809,2.441,4810,2.441,4811,2.441,4812,2.441,4813,3.998,4814,2.441,4815,2.441,4816,2.441,4817,2.441,4818,5.078,4819,2.441,4820,2.441,4821,2.441,4822,3.998,4823,3.998,4824,2.441,4825,2.441,4826,2.441,4827,5.078,4828,2.441,4829,2.441,4830,3.998,4831,2.441,4832,2.441]],["title/controllers/UserInsightMemberController.html",[539,1.179,3027,4.206]],["body/controllers/UserInsightMemberController.html",[3,0.024,4,0.024,5,0.024,10,0.117,13,1.073,14,0.39,15,0.005,16,0.08,19,0.416,25,1.058,26,1.121,59,0.027,60,0.109,62,0.856,65,1.572,68,2.16,71,1.134,72,1.867,76,0.973,77,2.698,102,2.23,119,1.235,122,2.41,207,0.913,238,0.002,239,0.002,288,0.993,292,0.311,294,1.325,295,0.891,296,0.613,298,1.374,367,3.7,392,2.017,400,4.277,401,2.477,460,1.001,516,1.298,526,0.731,534,0.455,537,1.12,539,0.739,541,0.878,543,1.172,556,2.979,561,5.417,565,3.503,571,1.737,591,3.085,594,3.115,596,2.154,597,1.519,622,2.244,623,1.584,624,1.433,625,3.398,626,3.156,627,3.398,628,3,629,2.769,630,1.172,632,3.311,633,2.477,650,1.357,656,1.105,658,3.138,659,2.557,670,2.031,673,1.941,783,4.177,784,1.783,789,3.559,790,1.489,791,1.519,802,2.813,975,2.012,1003,0.856,1058,1.105,1228,2.037,1229,1.46,1230,1.489,1231,1.46,1232,1.489,1392,5.313,1400,2.35,1403,6.775,1405,7.037,1799,1.878,1832,3.651,1833,2.35,1834,2.848,1837,4.478,1845,2.848,2442,3.347,2445,1.619,2516,1.489,2571,3.347,2792,3.017,2795,3.651,2797,2.35,2823,4.149,2824,3.946,2825,1.695,2840,4.172,2891,4.823,2897,4.095,2900,4.72,2905,3.487,2909,5.223,2912,2.477,2914,2.35,2915,3.954,2916,2.154,2917,2.477,2919,2.635,2922,4.095,2929,4.277,2932,5.427,2934,4.425,2936,6.628,2943,2.848,2946,7.005,2955,2.848,2957,2.477,3027,4.095,3031,2.635,3178,2.477,3813,1.831,3826,3.224,3988,2.005,4320,7.005,4322,6.133,4323,5.469,4392,2.848,4462,4.095,4833,6.628,4834,3.17,4835,2.848,4836,5.427,4837,7.379,4838,3.17,4839,3.17,4840,4.927,4841,4.927,4842,4.927,4843,6.042,4844,3.17,4845,3.17,4846,2.848,4847,3.17,4848,4.927,4849,3.17,4850,3.17,4851,3.17,4852,7.811,4853,3.17,4854,3.17,4855,3.17,4856,3.17,4857,2.848,4858,3.17,4859,3.17,4860,3.17,4861,4.425,4862,4.927,4863,2.848,4864,3.17,4865,3.17,4866,4.927,4867,4.927,4868,6.12,4869,6.628,4870,3.17,4871,3.17,4872,7.016,4873,4.927,4874,3.17,4875,3.17,4876,3.17,4877,3.17,4878,4.927,4879,3.17,4880,3.17,4881,3.17,4882,3.17,4883,3.17,4884,4.927,4885,4.927,4886,4.927,4887,4.927,4888,3.17,4889,3.17,4890,3.17,4891,3.17,4892,3.17,4893,3.17]],["title/controllers/UserInsightsController.html",[539,1.179,3026,4.206]],["body/controllers/UserInsightsController.html",[3,0.028,4,0.028,5,0.028,10,0.138,13,0.972,14,0.371,15,0.005,16,0.082,19,0.488,25,1.242,26,1.315,59,0.032,60,0.128,62,1.005,65,1.735,68,2.111,71,1.251,72,1.849,76,0.83,77,2.662,102,2.275,119,1.395,122,2.215,202,3.009,207,1.643,238,0.002,239,0.002,288,1.122,292,0.304,294,1.297,295,0.879,296,0.6,298,1.344,367,4.532,392,1.858,516,1.466,526,0.715,534,0.534,537,1.105,539,0.867,541,1.031,543,1.375,556,2.939,558,3.957,559,3.781,561,5.426,565,3.502,591,2.841,594,3.519,597,3.194,622,2.633,623,2.78,624,1.681,625,3.408,626,3.482,627,3.408,628,3.009,629,2.778,630,1.375,650,1.592,656,1.296,658,3.07,659,2.503,670,1.759,675,2.039,694,2.039,695,2.527,756,2.168,783,3.957,784,2.092,788,3.408,789,3.482,790,1.747,791,1.782,802,2.542,975,1.328,1003,1.005,1058,2.76,1075,2.352,1211,3.519,1228,2.301,1229,1.713,1230,1.747,1231,1.713,1232,1.747,1389,6.922,1392,5.009,1396,2.527,1799,1.418,1813,3.341,1828,4.843,1946,3.092,2441,2.633,2442,3.781,2445,2.841,2516,1.747,2571,2.527,2792,4.083,2823,3.129,2824,2.976,2825,1.989,2840,2.278,2891,5.239,2897,5.542,2906,4.999,2907,3.341,2909,3.939,2911,6.922,2912,2.906,2913,4.626,2914,2.757,2915,4.363,2916,2.527,2917,2.906,2919,3.092,2922,4.626,2929,4.72,2988,4.125,3026,4.626,3029,2.906,3031,3.092,3206,2.757,3826,3.642,4100,2.906,4322,3.092,4323,2.757,4462,4.626,4645,6.647,4687,3.092,4700,3.092,4833,6.647,4835,3.341,4836,7.117,4846,3.341,4857,3.341,4861,4.999,4863,3.341,4868,3.341,4869,3.341,4872,4.999,4894,3.72,4895,7.923,4896,3.72,4897,3.72,4898,3.72,4899,3.72,4900,3.72,4901,3.72,4902,3.72,4903,5.565,4904,3.72,4905,3.72,4906,3.72,4907,3.72,4908,5.565,4909,3.72,4910,5.565,4911,3.72,4912,3.72,4913,3.72,4914,3.72,4915,3.72,4916,3.72,4917,3.72,4918,3.72,4919,3.72,4920,3.72,4921,3.72,4922,3.72,4923,3.72,4924,5.565,4925,3.72,4926,3.72,4927,3.72,4928,3.72,4929,3.72,4930,3.72,4931,3.72,4932,3.72,4933,3.72,4934,3.72,4935,3.72,4936,3.72,4937,3.72,4938,3.72,4939,3.72]],["title/controllers/UserListController.html",[539,1.179,4940,4.206]],["body/controllers/UserListController.html",[3,0.016,4,0.016,5,0.016,6,3.385,7,5.751,8,4.612,10,0.078,13,0.874,14,0.403,15,0.005,16,0.076,19,0.275,25,0.7,26,0.742,27,2.308,28,1.725,29,1.486,31,2.99,38,1.486,59,0.018,60,0.072,68,1.389,71,1.494,72,2.032,75,4.785,76,1.248,77,3.038,85,1.624,102,1.463,119,2.335,122,1.764,202,1.855,207,1.85,238,0.002,239,0.002,288,0.711,292,0.38,294,1.585,295,0.978,296,0.733,298,1.677,335,1.594,336,1.15,349,1.026,392,2.776,394,1.983,395,1.327,396,1.247,405,1.071,431,4.663,433,1.555,443,1.41,516,0.553,526,0.892,534,0.301,537,1.238,539,0.489,541,0.581,543,0.776,556,3.354,558,3.853,559,3.099,560,1.744,561,5.742,565,3.203,568,2.755,571,3.762,591,2.329,594,2.23,597,1.69,622,1.486,623,1.762,624,0.948,625,3.318,626,2.383,627,3.83,628,3.236,629,3.177,630,0.776,650,0.898,656,0.731,658,3.161,659,3.121,670,2.185,676,1.042,783,4.947,784,1.983,789,4.256,790,0.985,791,1.005,798,0.753,969,4.444,971,5.03,975,0.842,1002,0.71,1003,0.953,1209,6.164,1211,1.327,1228,2.464,1229,0.966,1230,0.985,1231,2.101,1232,0.985,1253,4.176,1808,2.497,2203,2.755,2309,3.499,2314,2.497,2441,1.486,2512,6.039,2516,0.985,2629,5.362,2654,1.885,2781,3.962,2792,3.954,2794,1.639,2797,5.087,2800,1.744,2824,4.14,2825,1.122,2833,1.744,2836,1.744,2840,4.203,2845,1.885,2896,1.639,2904,1.744,2920,1.639,2925,1.744,3004,6.773,3206,1.555,3644,1.744,3826,2.308,4411,1.327,4472,1.885,4667,1.885,4687,1.744,4692,1.639,4693,1.744,4700,1.744,4940,2.932,4941,2.099,4942,5.8,4943,5.346,4944,5.346,4945,4.562,4946,5.961,4947,5.346,4948,5.961,4949,6.457,4950,5.346,4951,5.961,4952,5.961,4953,5.961,4954,5.961,4955,5.961,4956,2.099,4957,5.346,4958,5.346,4959,2.099,4960,2.099,4961,2.099,4962,2.099,4963,5.8,4964,2.099,4965,3.168,4966,3.527,4967,4.802,4968,2.099,4969,2.099,4970,2.099,4971,2.099,4972,2.099,4973,2.099,4974,2.099,4975,2.099,4976,2.099,4977,2.099,4978,2.099,4979,2.099,4980,2.099,4981,2.099,4982,2.099,4983,4.098,4984,2.099,4985,2.099,4986,2.099,4987,2.099,4988,2.099,4989,2.099,4990,3.527,4991,2.099,4992,2.099,4993,3.527,4994,2.099,4995,2.099,4996,2.099,4997,2.099,4998,2.099,4999,2.099,5000,2.099,5001,2.099,5002,2.099,5003,2.099,5004,2.099,5005,2.099,5006,2.099,5007,3.527,5008,2.099,5009,2.099,5010,2.099,5011,3.527,5012,3.527,5013,1.885,5014,3.381,5015,1.885,5016,2.099,5017,1.885,5018,1.885,5019,2.099,5020,2.099,5021,2.099,5022,2.099,5023,3.527,5024,2.099,5025,2.099,5026,2.099,5027,2.099,5028,2.099,5029,2.099,5030,2.099,5031,2.099,5032,2.099,5033,3.527,5034,2.099,5035,2.099,5036,2.099,5037,2.099,5038,2.099,5039,2.099,5040,2.099,5041,2.099,5042,2.099,5043,2.099,5044,2.099,5045,2.099,5046,2.099,5047,2.099,5048,2.099,5049,2.099,5050,3.527,5051,2.099,5052,2.099,5053,2.099,5054,2.099,5055,2.099,5056,2.099,5057,2.099,5058,2.099,5059,2.099,5060,2.099,5061,2.099]],["title/modules/UserListModule.html",[240,1.268,282,3.75]],["body/modules/UserListModule.html",[3,0.044,4,0.044,5,0.044,6,2.291,7,3.892,8,4.294,15,0.005,16,0.089,19,0.752,24,1.649,27,4.937,28,4.125,29,4.055,30,4.937,31,2.495,32,4.475,42,5.34,43,4.475,44,5.893,47,5.34,48,4.475,59,0.049,60,0.196,61,7.256,64,1.738,196,2.495,207,1.662,238,0.003,239,0.003,240,1.891,241,5.856,242,2.118,243,2.921,248,2.921,249,2.184,250,2.15,253,3.067,254,3.172,282,7.676,283,5.683,287,3.119,302,2.638,335,3.409,336,3.139,360,3.892,388,4.242,389,3.508,390,3.404,394,4.242,395,3.622,396,3.404,431,5.125,433,4.246,541,2.09,2562,4.055,2563,4.055,4940,7.011,5014,7.597,5015,5.146,5062,5.146,5063,5.146,5064,5.729,5065,5.146,5066,5.729,5067,7.011,5068,5.729,5069,5.146,5070,5.729,5071,5.146]],["title/classes/UserListMostActiveContributorsDto.html",[35,3.75,60,0.174]],["body/classes/UserListMostActiveContributorsDto.html",[3,0.038,4,0.038,5,0.038,6,3.161,10,0.187,11,0.993,13,0.957,14,0.401,15,0.005,16,0.067,33,7.372,34,6.994,35,5.13,37,5.299,59,0.067,60,0.237,78,3.348,93,2.447,100,2.68,102,1.893,109,6.175,117,2.483,119,2.41,137,6.175,140,2.321,142,3.578,181,5.13,186,3.145,238,0.003,239,0.003,292,0.431,296,0.916,516,2.665,522,1.263,526,1.012,534,0.723,536,1.509,830,2.235,884,1.489,947,2.321,1002,1.706,1003,1.362,1054,2.377,1057,3.187,1058,2.411,1066,4.769,1087,4.998,1088,3.793,1089,3.615,1091,3.542,1093,4.227,1094,4.769,1098,2.573,1099,3.534,1100,2.518,1101,2.695,1102,2.911,1103,3.948,1104,2.573,1105,2.762,1106,2.834,1107,2.573,1108,2.834,1109,3.07,1110,2.632,1111,2.762,1112,2.762,1113,3.534,1114,2.834,1115,2.573,1116,2.834,1117,3.506,1118,2.995,1119,3.382,1120,4.915,1172,3.793,1174,4.702,1201,4.527,1204,4.527,2631,4.189,5072,7.1,5073,5.04,5074,7.905,5075,5.04,5076,5.04,5077,6.217,5078,5.04]],["title/injectables/UserListService.html",[17,0.883,5014,3.75]],["body/injectables/UserListService.html",[3,0.019,4,0.019,5,0.019,6,3.75,7,6.371,8,3.721,10,0.093,13,0.967,14,0.358,15,0.005,16,0.079,17,0.718,18,2.44,19,0.331,20,2.66,21,3.984,22,0.567,23,0.993,24,0.727,25,0.843,26,0.892,27,1.652,28,2.01,29,1.787,31,3.079,38,1.787,59,0.022,60,0.087,62,1.11,63,2.098,64,1.817,65,1.715,66,4.32,67,2.519,68,2.267,69,3.255,70,3.416,71,1.711,72,2.074,75,6.892,76,1.24,77,2.887,78,2.357,82,3.781,83,2.609,85,2.758,86,2.098,90,1.715,93,0.892,94,1.596,99,3.002,100,2.013,101,2.792,102,1.639,119,2.351,122,1.694,124,1.235,142,2.186,156,2.516,196,1.1,207,0.468,208,3.416,212,3.787,213,3.401,224,1.787,234,2.848,238,0.002,239,0.002,247,4.084,288,0.829,292,0.425,294,1.731,295,0.953,296,0.801,298,1.858,335,1.141,336,1.384,349,1.235,388,1.42,389,1.546,390,1.5,394,1.42,395,1.596,396,1.5,405,3.366,431,3.531,433,1.871,453,3.203,565,3.455,670,1.876,673,3.183,703,1.787,787,2.055,791,1.209,802,2.283,810,0.797,921,1.652,1002,1.391,1003,1.11,1004,1.596,1009,3.286,1011,3.609,1012,2.053,1081,1.35,1087,2.598,1129,4.669,1135,3.531,1140,1.652,1141,1.715,1149,2.268,1156,3.21,1163,2.268,1175,1.972,1179,2.909,1209,4.44,1211,1.596,1402,1.546,1613,3.46,1799,1.981,2203,3.21,2309,3.92,2314,1.787,2334,4.669,2445,1.289,2570,2.598,2588,2.598,2629,5.521,2781,1.871,2899,2.268,2900,1.972,2909,1.787,2968,2.098,3035,2.909,3036,3.416,3045,3.21,3047,3.416,3358,3.046,3400,3.046,3535,2.268,3549,2.268,3644,2.098,3790,4.979,4692,1.972,4693,2.098,4738,4.669,4767,2.268,4769,3.691,4770,2.268,4771,2.268,4774,2.268,4776,3.691,4963,5.381,4965,3.691,4983,3.691,5013,2.268,5014,3.046,5017,2.268,5079,2.525,5080,4.11,5081,4.11,5082,5.99,5083,5.99,5084,4.11,5085,4.11,5086,4.11,5087,4.11,5088,5.197,5089,4.11,5090,5.197,5091,4.11,5092,2.525,5093,2.525,5094,4.11,5095,4.11,5096,2.525,5097,4.11,5098,2.525,5099,2.525,5100,2.525,5101,2.525,5102,4.11,5103,2.525,5104,4.11,5105,2.525,5106,2.525,5107,2.525,5108,4.11,5109,2.525,5110,2.525,5111,2.525,5112,2.525,5113,2.525,5114,2.525,5115,2.525,5116,2.525,5117,4.11,5118,2.525,5119,2.525,5120,4.11,5121,2.525,5122,2.525,5123,2.525,5124,2.525,5125,4.11,5126,4.11,5127,4.11,5128,2.525,5129,2.525,5130,2.525,5131,2.525,5132,2.525,5133,2.525,5134,2.525,5135,2.525,5136,2.525,5137,2.525,5138,2.525,5139,2.525,5140,5.197,5141,4.11,5142,2.525,5143,2.525,5144,2.525,5145,2.525,5146,2.525,5147,2.525,5148,2.525,5149,2.525,5150,2.525,5151,2.525,5152,2.525,5153,2.525,5154,2.525,5155,5.197,5156,2.525,5157,2.525,5158,2.525,5159,2.525,5160,4.11,5161,2.525,5162,2.525,5163,2.525,5164,2.525,5165,2.525,5166,2.525,5167,2.525]],["title/controllers/UserListStatsController.html",[539,1.179,5067,4.206]],["body/controllers/UserListStatsController.html",[3,0.026,4,0.026,5,0.026,6,3.243,7,5.509,8,4.533,10,0.129,14,0.407,15,0.005,16,0.081,19,0.457,25,1.162,26,1.231,28,1.703,30,4.193,31,3.532,32,2.72,35,5.305,36,2.895,37,5.009,38,2.465,39,6.247,40,4.402,41,2.895,42,3.748,43,4.136,44,4.136,45,3.925,46,2.895,47,3.748,48,2.72,54,5.305,55,2.895,56,5.305,57,2.72,58,2.895,59,0.03,60,0.119,61,4.535,71,1.445,72,1.969,74,5.186,76,1.261,77,2.905,78,2.084,119,1.606,194,6.193,207,0.646,238,0.002,239,0.002,288,1.068,292,0.352,294,1.498,295,0.975,296,0.693,298,1.553,392,2.57,410,2.977,460,1.673,516,0.917,526,0.826,534,0.5,537,1.206,539,0.811,541,0.965,543,1.287,556,3.207,561,5.556,627,3.734,628,3.297,629,3.044,630,1.287,656,1.213,659,2.89,670,2.248,783,4.852,789,4.235,798,1.249,921,5.684,971,4.253,975,1.264,1228,3.352,1229,1.604,1230,1.635,1231,1.604,1232,1.635,1253,7.087,1437,5.451,1782,4.136,2516,1.635,2797,5.707,2824,4.336,2840,4.715,3574,4.136,3586,4.756,4411,2.202,4942,4.756,4967,3.128,5018,3.128,5067,4.402,5069,3.128,5168,3.483,5169,7.7,5170,8.686,5171,7.7,5172,7.7,5173,3.483,5174,6.407,5175,3.483,5176,6.407,5177,3.483,5178,3.483,5179,3.483,5180,3.483,5181,5.295,5182,7.158,5183,5.295,5184,5.295,5185,5.295,5186,5.295,5187,3.483,5188,6.407,5189,3.483,5190,3.483,5191,3.483,5192,3.483,5193,3.483,5194,3.483,5195,5.295,5196,3.483,5197,5.295,5198,3.483,5199,3.483,5200,3.483,5201,3.483,5202,3.483,5203,3.483,5204,3.483,5205,3.483,5206,3.483,5207,6.407,5208,6.407,5209,3.483,5210,3.483,5211,3.483,5212,3.483,5213,3.483]],["title/injectables/UserListStatsService.html",[17,0.883,61,3.582]],["body/injectables/UserListStatsService.html",[0,1.362,1,3.796,3,0.017,4,0.017,5,0.017,6,3.47,7,5.895,8,4.32,9,2.059,10,0.085,12,2.059,13,0.944,14,0.337,15,0.005,16,0.075,17,0.663,18,1.076,19,0.301,20,1.714,21,4.48,22,0.515,23,0.902,24,0.66,25,0.765,26,0.81,27,1.5,28,1.856,29,1.622,30,2.484,31,0.998,32,1.79,33,1.79,34,1.699,35,3.601,36,1.905,37,2.256,38,1.622,39,5.296,40,4.696,41,1.905,42,1.622,43,2.965,44,2.965,45,2.813,46,1.905,47,1.622,48,1.79,49,1.79,50,4.365,51,2.059,52,1.79,53,2.059,54,4.187,55,1.905,56,4.187,57,1.79,58,1.905,59,0.02,60,0.079,61,2.687,62,1.025,63,1.905,64,0.695,65,2.079,66,3.155,67,2.376,68,2.29,69,1.748,70,1.905,71,1.266,72,1.859,73,4.365,74,4.249,75,7.061,76,1.232,77,2.625,78,4.031,79,5.075,80,2.484,81,2.059,82,3.406,83,2.939,84,2.059,85,3.858,86,5.609,87,4.039,88,1.938,89,3.41,90,3.301,91,2.866,92,4.039,93,2.213,94,4.902,95,4.039,96,6.965,97,1.905,98,3.095,99,5.012,100,3.36,101,1.557,102,1.955,103,2.059,104,2.965,105,2.059,106,2.813,107,2.059,108,5.292,109,2.965,110,5.657,111,3.41,112,2.059,113,3.41,114,2.059,115,3.41,116,2.059,117,1.631,118,1.983,119,1.218,120,2.059,121,1.399,122,1.609,123,2.059,124,1.856,125,2.059,126,4.365,127,6.418,128,2.059,129,4.365,130,3.41,131,3.41,132,3.41,133,3.41,134,2.059,135,3.41,136,4.365,137,4.891,138,2.059,139,2.059,140,2.238,141,3.41,142,3.143,143,1.968,144,2.059,145,2.059,146,1.699,147,1.699,148,1.403,149,1.699,150,2.059,151,2.059,152,3.41,153,2.059,154,5.075,155,2.059,156,5.579,157,2.059,158,2.059,159,6.057,160,5.93,161,2.059,162,2.059,163,2.059,164,4.365,165,2.059,166,2.059,167,2.059,168,2.059,169,4.365,170,2.059,171,2.059,172,2.059,173,2.059,174,4.365,175,2.059,176,1.79,177,1.79,178,2.059,179,2.059,180,2.059,181,1.699,182,4.365,183,2.059,184,2.059,185,2.059,186,0.847,187,1.905,188,2.059,189,1.622,190,1.905,191,1.905,192,1.036,193,2.059,194,1.5,195,2.059,196,0.998,197,1.226,198,1.5,199,2.059,200,1.256,201,3.155,202,1.543,203,1.699,204,2.059,205,1.905,206,2.059,207,0.425,208,1.905,209,3.155,210,2.059,211,2.059,212,1.449,213,1.5,214,2.059,215,2.059,216,2.059,217,2.059,218,2.059,219,2.059,220,2.059,221,6.418,222,2.059,223,1.905,224,1.622,225,4.365,226,5.272,227,5.609,228,5.002,229,4.365,230,4.365,231,4.365,232,4.365,233,4.365,234,3.698,235,4.365,236,4.365,237,4.365,238,0.002,239,0.002,288,0.765,292,0.39,294,1.63,295,0.886,296,0.754,298,1.689,299,3.44,810,0.724,1091,2.121,5214,3.796,5215,3.796,5216,3.796,5217,3.796,5218,2.292,5219,2.292,5220,2.292,5221,2.292,5222,2.292,5223,2.292,5224,2.292,5225,2.292,5226,2.292,5227,2.292,5228,2.292,5229,2.292,5230,2.292,5231,2.292,5232,2.292,5233,2.292,5234,2.292,5235,2.292,5236,2.292,5237,2.292,5238,2.292,5239,2.292,5240,2.292,5241,2.292]],["title/modules/UserModule.html",[240,1.268,283,3.007]],["body/modules/UserModule.html",[3,0.031,4,0.031,5,0.031,15,0.005,16,0.09,19,0.538,24,1.181,28,4.348,59,0.035,60,0.141,64,1.244,196,1.786,207,1.812,238,0.003,239,0.003,240,1.499,241,5.274,242,1.516,243,2.316,248,2.316,249,1.563,250,1.539,253,2.431,254,2.515,274,5.851,275,5.118,281,6.097,283,6.282,287,2.472,302,1.888,331,2.786,333,2.754,334,2.193,335,2.702,349,2.005,367,3.662,368,3.683,386,2.306,387,3.408,394,3.362,396,2.436,398,4.063,399,3.039,404,3.662,405,2.094,406,2.683,409,4.671,410,2.306,411,4.233,412,3.203,413,4.233,414,3.203,415,4.233,416,3.203,418,3.914,419,3.408,431,4.063,432,3.039,433,3.039,437,3.683,438,2.786,439,3.408,471,3.203,541,1.657,632,5.303,2235,2.593,2517,6.574,2562,2.903,2563,2.903,2564,3.683,2826,6.574,2828,3.203,2857,3.683,3387,5.636,3401,2.903,3402,3.039,3587,5.441,3588,2.683,4269,6.383,4302,3.683,4379,5.867,4406,2.593,4407,6.383,4408,3.683,4450,6.449,4503,7.172,4504,3.683,4526,5.867,4537,3.683,4545,6.574,4553,5.851,4569,3.203,4589,5.867,4596,3.203,4600,5.867,4641,6.449,5071,3.683,5242,3.683,5243,4.1,5244,3.683,5245,3.683,5246,4.1,5247,5.867,5248,5.867,5249,4.1,5250,4.1,5251,4.1,5252,4.1,5253,4.1,5254,4.1,5255,4.1]],["title/controllers/UserNotificationController.html",[539,1.179,5247,4.206]],["body/controllers/UserNotificationController.html",[3,0.047,4,0.047,5,0.047,10,0.231,13,0.943,14,0.321,15,0.005,16,0.086,19,0.819,25,2.084,26,2.207,28,3.054,59,0.053,60,0.214,71,1.172,72,1.794,77,2.554,119,2.526,207,1.718,238,0.004,239,0.004,288,1.609,292,0.285,294,1.215,295,0.66,296,0.562,298,1.259,411,4.42,412,4.878,526,0.67,534,0.896,537,0.83,539,1.455,541,1.73,543,2.308,556,2.82,558,4.266,559,4.242,561,4.885,565,3.323,624,2.821,625,3.674,627,3.674,628,3.243,629,2.994,630,2.308,650,2.672,656,2.175,658,2.875,659,2.344,790,2.932,798,2.24,1002,2.114,1003,1.687,1228,3.298,2368,5.19,2441,4.42,2512,5.913,2825,3.339,4380,4.608,4411,3.948,4553,5.972,4569,4.878,4663,5.609,4691,5.609,4806,8.321,5247,6.631,5256,6.244,5257,6.244,5258,9.572,5259,6.244,5260,6.244,5261,6.244,5262,6.244,5263,6.244]],["title/injectables/UserNotificationService.html",[17,0.883,4553,3.438]],["body/injectables/UserNotificationService.html",[3,0.031,4,0.031,5,0.031,10,0.153,13,1.122,14,0.386,15,0.005,16,0.079,17,1.05,19,0.542,20,2.363,21,3.792,22,0.929,23,1.626,24,1.19,25,1.38,26,1.461,28,2.941,59,0.035,60,0.142,62,1.625,64,1.254,65,1.565,67,3.275,68,2.204,69,2.77,71,1.621,72,2.062,82,2.445,83,1.8,85,1.903,102,2.264,118,3.142,119,2.29,121,1.732,122,2.291,124,3.808,143,2.096,213,2.705,238,0.003,239,0.003,288,1.213,292,0.417,294,1.734,295,0.943,296,0.802,298,1.797,405,3.071,411,2.926,412,3.229,565,3.439,594,2.613,632,4.885,670,0.917,673,4.342,728,5.539,787,2.579,810,1.306,864,4.498,1002,2.036,1003,1.117,1008,2.808,1081,2.21,1160,2.808,1161,2.531,1162,2.456,1613,2.387,1706,2.705,1799,2.969,2304,3.436,2364,3.713,2365,6.995,2366,6.995,2367,3.713,2368,3.436,2375,2.926,2386,6.084,2389,3.713,3035,4.258,4380,5.379,4406,2.613,4553,4.086,4557,6.995,4660,7.179,4744,8.205,5264,4.133,5265,6.015,5266,6.015,5267,6.015,5268,6.015,5269,6.015,5270,4.133,5271,4.133,5272,6.015,5273,6.015,5274,4.133,5275,6.015,5276,4.133,5277,6.015,5278,4.133,5279,6.015,5280,4.133,5281,4.133,5282,4.133,5283,5.403,5284,4.133,5285,6.015,5286,4.133,5287,6.015,5288,4.133,5289,4.133,5290,4.133,5291,4.133,5292,3.713,5293,4.133,5294,4.133,5295,4.133,5296,4.133,5297,4.133,5298,4.133,5299,4.133,5300,4.133,5301,4.133,5302,4.133,5303,4.133,5304,4.133,5305,4.133,5306,7.091,5307,7.091,5308,4.133,5309,7.788,5310,4.133,5311,4.133,5312,4.133,5313,4.133,5314,4.133]],["title/classes/UserOnboardingDto.html",[60,0.174,592,4.206]],["body/classes/UserOnboardingDto.html",[3,0.052,4,0.052,5,0.052,10,0.252,11,1.207,14,0.402,15,0.005,16,0.072,59,0.058,60,0.289,76,1.276,207,1.56,238,0.004,239,0.004,292,0.384,443,3.365,522,1.704,526,0.903,527,3.208,530,1.973,533,3.379,534,0.975,535,3.259,536,2.035,537,1.118,592,6.995,614,7.276,676,2.956,703,6.949,972,4.731,974,4.671,1936,4.298,2326,5.038,2665,7.461,4376,5.65,4378,5.31,5315,9.14,5316,6.797,5317,6.797,5318,6.797,5319,6.797]],["title/injectables/UserOrganizationService.html",[17,0.883,4503,3.75]],["body/injectables/UserOrganizationService.html",[3,0.046,4,0.046,5,0.046,10,0.224,13,0.929,14,0.315,15,0.005,16,0.084,17,1.366,19,0.794,20,2.778,21,4.633,22,1.36,23,2.383,24,1.744,25,2.021,26,2.141,28,2.961,59,0.052,60,0.208,62,2.113,64,1.837,65,1.575,67,3.851,68,2.209,69,3.602,71,1.468,72,1.768,82,3.18,83,2.638,102,2.14,118,4.085,119,2.51,121,1.744,122,2.01,124,4.478,207,1.123,238,0.003,239,0.003,288,1.577,292,0.396,294,1.522,295,0.827,296,0.704,298,1.577,415,4.287,416,4.73,565,3.108,787,1.887,810,1.913,1002,2.648,1003,1.636,1008,4.114,1081,3.238,1160,4.114,1161,3.708,1162,3.598,1613,3.498,2396,5.439,3035,5.537,4380,5.289,4503,5.797,5283,7.026,5292,5.439,5320,6.056,5321,6.056,5322,6.056,5323,7.822,5324,6.056,5325,6.056,5326,6.056,5327,6.056,5328,6.056,5329,6.056,5330,6.056]],["title/controllers/UserRecommendationController.html",[539,1.179,5248,4.206]],["body/controllers/UserRecommendationController.html",[3,0.042,4,0.042,5,0.042,10,0.206,13,1.017,14,0.356,15,0.005,16,0.085,19,0.73,59,0.047,60,0.191,65,1.447,68,1.723,71,1.388,72,1.936,119,2.465,122,1.429,202,3.602,207,1.643,238,0.003,239,0.003,288,1.492,292,0.338,294,1.439,295,0.782,296,0.666,298,1.492,333,3.827,334,2.974,516,1.949,526,0.793,534,0.798,539,1.295,541,1.541,543,2.056,556,3.132,558,4.737,565,3.309,614,4.121,624,2.513,625,3.827,628,3.379,629,3.12,630,2.056,632,4.555,650,2.379,656,1.937,658,3.406,659,2.776,728,4.344,787,2.305,790,2.611,798,1.995,932,5.025,1002,1.883,1003,1.502,1228,3.058,1229,2.561,1230,2.611,1231,2.561,1232,2.611,2442,6.019,2825,2.974,3587,4.673,3588,3.639,3626,5.025,4380,4.801,4406,3.516,4411,3.516,4466,4.995,5248,6.148,5331,5.561,5332,5.561,5333,8.859,5334,8.859,5335,5.561,5336,5.561,5337,8.859,5338,5.561,5339,7.397,5340,5.561,5341,5.561,5342,5.561,5343,5.561,5344,5.561,5345,5.561,5346,5.561,5347,5.561,5348,5.561,5349,5.561,5350,5.561,5351,5.561,5352,5.561,5353,5.561]],["title/classes/UserRepoOptionsDto.html",[60,0.174,5354,3.582]],["body/classes/UserRepoOptionsDto.html",[3,0.046,4,0.046,5,0.046,6,2.426,10,0.225,11,1.123,13,1.017,14,0.407,15,0.005,16,0.052,59,0.052,60,0.208,78,3.605,93,2.768,100,3.032,117,2.466,119,2.511,140,2.793,142,3.853,186,3.387,238,0.003,239,0.003,292,0.433,296,0.918,516,2.688,522,1.521,526,1.017,756,1.659,830,2.69,884,1.793,947,2.793,1002,2.053,1003,1.639,1054,2.689,1057,3.606,1058,2.728,1066,5.073,1086,3.411,1088,4.291,1089,4.09,1091,3.56,1093,3.244,1094,3.244,1098,3.097,1099,3.998,1100,3.03,1101,3.244,1102,3.504,1103,4.331,1104,3.097,1105,3.324,1106,3.411,1107,3.097,1108,3.411,1109,3.473,1110,3.168,1111,3.324,1112,3.324,1113,3.998,1114,3.411,1115,3.097,1116,3.411,3955,4.738,5354,5.543]],["title/classes/UserRepoOptionsDto-1.html",[60,0.144,186,1.556,5354,2.979]],["body/classes/UserRepoOptionsDto-1.html",[3,0.052,4,0.052,5,0.052,6,3.377,10,0.253,11,1.211,13,0.906,14,0.385,15,0.005,16,0.078,59,0.072,60,0.314,202,3.433,207,1.268,234,3.746,238,0.004,239,0.004,292,0.312,339,5.339,340,4.839,443,3.664,516,2.414,522,1.714,526,0.733,527,2.606,530,1.893,533,3.387,534,0.98,536,2.047,537,1.122,595,7.019,756,1.87,761,4.045,768,5.526,887,3.746,973,7.158,974,4.68,975,2.016,1119,3.613,1598,3.656,2792,5.171,3941,6.596,3946,5.34,3955,6.596,4376,5.682,5354,5.978,5355,6.14,5356,6.836,5357,6.14]],["title/modules/UserReposModule.html",[240,1.268,284,3.582]],["body/modules/UserReposModule.html",[3,0.053,4,0.053,5,0.053,6,2.792,15,0.005,16,0.084,19,0.916,24,2.01,59,0.059,60,0.239,64,2.118,207,1.586,238,0.004,239,0.004,240,2.145,241,6.164,242,2.581,243,3.313,248,3.313,249,2.661,250,2.62,253,3.478,254,3.597,284,7.342,287,3.537,302,3.215,349,3.414,371,5.175,373,5.175,2562,4.942,2563,4.942,5358,6.271,5359,6.982,5360,6.271,5361,6.271,5362,8.227,5363,6.982,5364,6.982,5365,6.982]],["title/injectables/UserReposService.html",[17,0.883,5362,3.952]],["body/injectables/UserReposService.html",[3,0.04,4,0.04,5,0.04,6,3.732,10,0.195,13,1.001,14,0.348,15,0.005,16,0.083,17,1.244,18,3.346,19,0.69,20,2.628,21,4.322,22,1.182,23,2.07,24,1.515,25,1.756,26,1.86,59,0.045,60,0.18,62,1.925,64,1.596,65,1.854,67,3.643,68,2.109,69,3.282,71,1.626,72,2.008,76,1.006,77,2.774,82,3.286,83,2.291,102,1.439,119,1.786,122,1.352,192,2.377,207,0.975,234,2.883,238,0.003,239,0.003,247,5.23,288,1.437,292,0.413,294,1.685,295,0.916,296,0.779,298,1.747,349,2.572,371,6.917,373,5.282,565,3.424,652,4.725,670,1.794,756,2.37,787,1.639,802,2.005,810,1.662,1003,1.421,1004,3.326,1009,3.326,1010,4.109,1011,4.126,1012,2.628,1396,5.885,1398,3.574,1399,4.373,1402,3.221,1799,2.005,2570,4.506,2588,4.506,3018,4.373,3019,4.725,3035,5.045,3045,5.567,5354,6.132,5362,5.567,5366,5.261,5367,7.126,5368,5.261,5369,5.261,5370,7.126,5371,7.126,5372,5.261,5373,5.261,5374,5.261,5375,5.261,5376,5.261,5377,7.126,5378,5.261,5379,5.261,5380,5.261,5381,5.261]],["title/modules/VoteModule.html",[240,1.268,285,3.75]],["body/modules/VoteModule.html",[3,0.052,4,0.052,5,0.052,15,0.005,16,0.086,19,0.897,24,1.968,59,0.058,60,0.234,64,2.074,238,0.004,239,0.004,240,2.117,242,2.527,243,3.27,248,3.27,249,2.606,250,2.566,253,3.433,254,3.551,275,5.951,285,7.661,287,3.491,302,3.148,331,4.644,333,3.148,334,3.656,339,5.339,340,4.839,541,2.34,756,1.87,1051,4.839,3921,7.617,3957,7.785,3958,6.14,5382,6.14,5383,6.836,5384,6.14,5385,6.14,5386,6.836,5387,6.836]],["title/injectables/VoteService.html",[17,0.883,3957,3.75]],["body/injectables/VoteService.html",[3,0.037,4,0.037,5,0.037,10,0.182,13,1.126,14,0.356,15,0.005,16,0.072,17,1.188,18,2.309,19,0.645,20,2.555,22,1.105,23,1.934,24,1.416,59,0.042,60,0.169,62,1.838,64,1.492,65,2.191,67,3.541,68,2.059,69,3.133,71,1.793,72,2.042,77,2.696,80,6.135,82,2.766,83,2.141,102,2.134,122,2.271,192,2.221,234,3.729,238,0.003,239,0.003,288,1.372,292,0.418,294,1.72,295,0.935,296,0.795,298,1.783,339,3.109,340,3.48,443,1.966,460,2.149,565,3.705,756,1.861,787,2.12,802,2.974,810,1.553,887,4.276,1012,2.456,1799,1.874,2145,4.087,3813,3.93,3814,3.48,3927,6.111,3941,6.905,3943,6.111,3957,5.043,3988,3.109,3995,4.622,3998,3.644,5388,4.916,5389,6.804,5390,6.804,5391,6.804,5392,4.916,5393,4.916,5394,6.804,5395,4.916,5396,6.804,5397,4.916,5398,4.916,5399,6.804,5400,4.916,5401,6.804,5402,4.916,5403,4.916,5404,4.916,5405,9.7,5406,7.802,5407,7.802,5408,4.916,5409,4.916,5410,4.916,5411,4.916,5412,4.916,5413,4.916]],["title/classes/VotedRepoDto.html",[60,0.174,3946,3.952]],["body/classes/VotedRepoDto.htmltitle/miscellaneous/enumerations.html",[5417,2.754,5418,5.475]],["body/miscellaneous/enumerations.html",[6,2.044,10,0.189,15,0.005,31,3.044,33,5.459,34,5.179,37,5.629,102,1.912,181,5.179,202,2.841,238,0.003,239,0.003,295,0.739,392,2.658,410,3.929,421,2.583,666,3.641,667,4.104,892,2.226,971,4.153,1058,3.36,1063,4.573,1085,4.591,1086,5.563,1090,5.809,1091,4.047,1095,5.179,1103,3.491,1121,5.179,1122,5.809,1172,3.83,1174,4.748,1235,3.473,1254,6.858,1286,4.591,1287,6.277,1289,5.809,1613,4.036,1705,4.573,1762,4.249,1906,5.809,1914,5.809,1936,4.419,1999,5.179,2209,3.232,2386,5.459,2391,6.277,2416,4.748,2469,5.809,2631,6.619,2655,4.573,2672,4.419,2977,4.249,2983,5.809,2984,5.809,2985,5.809,2986,5.809,2987,5.809,3458,6.277,3464,6.277,3668,3.993,3683,6.277,3684,5.459,3685,6.277,3686,6.277,3687,5.809,3688,5.809,3689,5.809,3690,5.809,3691,5.809,5072,4.591,5077,6.277,5417,3.345,5418,4.591,5419,5.112,5420,5.112,5421,5.112,5422,6.988,5423,6.988,5424,5.112,5425,6.988,5426,6.988,5427,4.591,5428,6.277,5429,5.112,5430,4.591,5431,5.112,5432,4.591]],["title/miscellaneous/functions.html",[5417,2.754,5433,5.475]],["body/miscellaneous/functions.html",[10,0.304,15,0.004,238,0.004,239,0.004,5417,5.382,5433,7.386,5434,9.91,5435,8.223,5436,8.223]],["title/index.html",[10,0.156,5437,3.781,5438,3.498]],["body/index.html",[4,0.03,5,0.044,15,0.004,20,1.753,85,1.802,100,1.515,102,2.076,108,2.77,110,2.77,117,1.396,148,2.396,186,2.136,189,2.77,196,2.517,197,2.093,201,3.253,238,0.003,239,0.003,250,2.169,295,0.414,392,1.929,421,3.131,451,5.367,457,6.322,464,6.815,513,3.253,514,4.864,529,3.432,562,3.515,588,3.782,631,5.996,656,2.394,686,1.914,756,1.071,763,3.926,779,3.654,827,2.561,838,3.057,901,2.901,903,2.396,947,2.661,960,4.283,1075,2.474,1172,2.145,1188,3.926,1222,4.283,1388,3.057,1437,5.729,1452,2.26,1470,4.508,1663,3.253,1675,3.057,1706,3.782,1722,5.927,1727,3.515,1729,5.191,1754,2.901,1755,5.367,1820,2.77,1828,2.561,1923,2.901,1934,3.057,2221,7.609,2416,2.659,2634,2.77,2693,2.901,2792,3.539,2862,5.623,3877,3.057,4053,3.515,4093,3.253,4100,5.927,4204,6.617,4287,3.515,4330,3.515,4333,3.515,4378,3.057,4579,5.999,4638,6.172,5439,3.914,5440,7.587,5441,3.914,5442,5.191,5443,3.914,5444,3.914,5445,9.974,5446,6.871,5447,3.515,5448,3.914,5449,3.914,5450,7.609,5451,3.914,5452,3.914,5453,3.914,5454,3.914,5455,6.871,5456,5.779,5457,5.779,5458,6.871,5459,3.914,5460,3.914,5461,5.779,5462,4.804,5463,5.779,5464,5.779,5465,3.515,5466,3.515,5467,5.779,5468,3.914,5469,3.914,5470,3.914,5471,3.914,5472,3.914,5473,3.914,5474,3.914,5475,3.914,5476,3.914,5477,3.914,5478,3.914,5479,3.914,5480,9.686,5481,8.471,5482,3.914,5483,3.914,5484,3.914,5485,6.815,5486,3.914,5487,3.914,5488,3.914,5489,3.914,5490,3.914,5491,7.587,5492,5.779,5493,5.779,5494,5.779,5495,5.779,5496,5.779,5497,3.914,5498,3.914,5499,3.914,5500,3.914,5501,3.914,5502,3.914,5503,3.914,5504,3.914,5505,3.914,5506,3.914,5507,6.871,5508,8.471,5509,3.914,5510,3.914,5511,3.914,5512,3.515,5513,8.762,5514,5.779,5515,3.914,5516,5.779,5517,3.914,5518,3.914,5519,5.779,5520,6.871,5521,3.914,5522,3.914,5523,3.914,5524,3.914,5525,3.914,5526,3.515,5527,3.914,5528,3.515,5529,3.914,5530,3.914,5531,3.914,5532,3.914,5533,5.779,5534,3.914,5535,5.779,5536,3.914,5537,9.341,5538,3.914,5539,3.515,5540,3.515,5541,3.515,5542,3.914,5543,5.779,5544,3.914,5545,7.587,5546,3.914,5547,3.914,5548,5.779,5549,3.914,5550,3.914,5551,3.914,5552,3.914,5553,3.914,5554,3.914,5555,3.914,5556,3.914,5557,3.914,5558,3.914,5559,5.779,5560,3.914,5561,3.914,5562,5.191,5563,3.914,5564,3.914,5565,3.914,5566,3.914,5567,3.914,5568,3.914,5569,3.914,5570,3.914,5571,5.779,5572,3.914,5573,5.779,5574,3.914,5575,6.172,5576,3.914,5577,3.914,5578,3.515,5579,5.779,5580,3.914,5581,3.914,5582,3.914,5583,3.914,5584,3.914,5585,3.914,5586,3.914,5587,3.914,5588,3.914,5589,3.914,5590,5.191,5591,3.914,5592,3.914,5593,3.914,5594,3.914,5595,3.515,5596,3.914,5597,7.587,5598,3.914,5599,3.914,5600,3.914,5601,5.779,5602,3.914,5603,5.779,5604,5.779,5605,3.914,5606,5.779,5607,3.914,5608,3.515,5609,3.914,5610,3.914,5611,3.914,5612,3.914,5613,3.914,5614,3.914,5615,3.914,5616,3.914,5617,3.914,5618,3.515,5619,3.914,5620,3.253,5621,3.914,5622,3.914,5623,3.914,5624,3.914,5625,3.914,5626,3.515,5627,3.914,5628,3.914,5629,3.914,5630,3.914,5631,3.914,5632,3.914,5633,3.914,5634,5.779,5635,3.914,5636,3.914,5637,3.914,5638,3.914,5639,3.914,5640,2.901,5641,3.057]],["title/license.html",[5437,3.781,5438,3.498,5640,3.119]],["body/license.html",[15,0.004,238,0.004,239,0.004,250,2.585,421,2.546,829,6.187,903,4.218,1447,4.355,1470,4.093,1667,3.866,1674,5.105,1701,4.876,1934,5.381,2037,5.726,2242,5.726,2426,5.726,2862,6.288,2869,6.187,3193,6.187,4290,6.187,4579,5.105,5447,9.296,5539,7.621,5608,7.621,5620,5.726,5640,5.105,5641,5.381,5642,9.194,5643,6.888,5644,8.484,5645,6.888,5646,6.888,5647,6.888,5648,6.888,5649,6.888,5650,6.888,5651,6.888,5652,6.888,5653,6.888,5654,6.888,5655,6.888,5656,6.888,5657,6.888,5658,6.888,5659,8.484,5660,6.888,5661,6.888,5662,6.888,5663,6.888,5664,6.888,5665,6.888,5666,8.484,5667,8.484,5668,6.888,5669,6.888,5670,6.888,5671,6.888,5672,6.888,5673,6.888,5674,6.888,5675,6.888,5676,6.888,5677,6.888,5678,6.888,5679,6.888,5680,6.888,5681,6.888,5682,6.888,5683,6.888,5684,6.888,5685,6.888,5686,6.888,5687,6.888,5688,6.888,5689,6.888,5690,6.888,5691,6.888]],["title/modules.html",[242,2.565]],["body/modules.html",[15,0.003,238,0.003,239,0.003,241,3.739,242,2.257,256,4.77,259,4.323,260,4.526,261,4.526,262,4.526,263,4.323,264,4.149,265,4.526,266,4.526,267,4.526,268,4.526,269,4.526,270,4.526,271,4.526,272,3.997,273,4.323,274,4.149,275,3.629,276,4.526,277,4.526,278,4.323,279,4.526,280,4.526,281,4.323,282,4.526,283,3.629,284,4.323,285,4.526,744,4.323,3447,4.323,4269,4.526,5692,10.762,5693,10.762,5694,10.762,5695,10.771,5696,5.485,5697,5.485]],["title/overview.html",[5698,5.768]],["body/overview.html",[2,1.966,15,0.005,61,5.384,121,0.764,186,0.981,238,0.002,239,0.002,241,5.252,242,0.981,243,1.657,244,2.383,245,2.383,246,2.383,247,4.168,248,1.657,249,1.011,250,0.996,256,8.165,257,2.383,258,2.383,259,6.75,260,5.866,261,5.866,262,5.013,263,5.384,264,5.377,265,5.013,266,6.477,267,3.984,268,5.013,269,6.901,270,5.866,271,5.866,272,5.348,273,6.456,274,6.66,275,5.353,276,5.866,277,5.866,278,5.384,279,6.477,280,5.866,281,5.384,282,6.583,283,6.112,284,5.784,285,5.866,522,0.665,541,0.735,632,4.168,634,5.384,636,5.384,644,5.637,650,3.255,740,2.383,741,2.383,742,2.383,743,2.383,744,5.384,745,5.941,794,5.637,803,2.383,805,2.383,806,2.383,810,0.838,815,4.52,907,3.984,935,3.984,962,3.984,989,5.637,1021,5.637,1041,2.383,1043,2.383,1044,2.383,1045,5.637,1233,4.978,1294,2.383,1295,2.383,1296,2.383,1480,5.941,1491,3.984,1515,2.383,1516,2.383,1517,2.383,1942,2.205,2379,2.383,2447,3.984,2455,2.383,2456,2.383,2517,5.699,2557,2.383,2558,2.383,2559,2.383,2612,2.383,2826,5.167,2915,4.978,2929,3.805,2988,5.637,2993,5.167,3021,2.383,3023,2.383,3024,2.383,3082,5.637,3087,2.383,3089,2.383,3090,2.383,3101,2.383,3102,2.383,3103,2.383,3121,2.383,3122,2.383,3123,2.383,3246,2.383,3247,2.383,3248,2.383,3304,3.984,3305,5.637,3329,3.984,3346,5.637,3387,5.179,3443,2.383,3444,2.383,3445,2.383,3446,2.383,3447,5.384,3587,4.717,3631,2.383,3632,2.383,3633,2.383,3674,2.383,3676,2.383,3677,2.383,3834,5.637,3873,5.637,3911,5.637,3957,5.637,3971,2.383,3972,2.383,3974,2.383,4000,2.383,4001,2.383,4003,2.383,4026,2.383,4027,2.383,4028,2.383,4060,2.383,4061,2.383,4062,2.383,4063,5.637,4078,2.383,4080,2.383,4081,4.817,4165,2.383,4166,2.383,4168,2.383,4269,5.359,4270,2.383,4271,2.383,4272,2.383,4273,5.941,4297,2.383,4298,2.383,4299,2.383,4407,3.984,4503,5.637,4545,5.167,4553,3.652,5014,5.637,5062,2.383,5063,2.383,5065,2.383,5242,2.383,5244,2.383,5245,2.383,5358,2.383,5360,2.383,5361,2.383,5362,5.941,5382,2.383,5384,2.383,5385,2.383,5698,2.205,5699,2.653,5700,2.653,5701,2.653,5702,2.653]],["title/properties.html",[11,0.874,5703,4.209]],["body/properties.html",[11,1.085,15,0.005,20,2.296,238,0.004,239,0.004,311,5.609,421,3.32,537,1.006,631,5.357,758,6.656,985,4.785,1470,5.336,1694,6.29,1722,5.911,2571,5.141,4496,6.798,5465,6.798,5640,5.609,5641,5.911,5696,6.798,5704,7.568,5705,7.568,5706,7.568,5707,7.568,5708,7.568,5709,7.568,5710,6.798,5711,7.568,5712,7.568,5713,7.568,5714,7.568,5715,7.568,5716,7.568,5717,7.568,5718,7.568,5719,7.568,5720,7.568,5721,7.568]],["title/miscellaneous/typealiases.html",[5417,2.754,5722,6.095]],["body/miscellaneous/typealiases.html",[10,0.304,14,0.331,15,0.004,238,0.004,239,0.004,5417,5.382,5723,8.223,5724,9.427,5725,7.386,5726,7.386]],["title/miscellaneous/variables.html",[5417,2.754,5462,5.066]],["body/miscellaneous/variables.html",[3,0.02,8,1.247,10,0.096,11,0.373,13,0.654,14,0.169,15,0.005,68,1.943,71,0.996,72,0.531,74,2.309,76,0.94,93,0.92,102,2.065,117,2.311,122,1.364,143,1.468,148,1.594,197,3.582,207,1.131,238,0.002,239,0.002,249,0.992,320,3.784,321,3.784,322,3.784,323,3.784,324,3.784,325,3.784,326,3.784,327,3.784,328,3.784,329,3.784,392,2.783,421,0.962,443,1.685,449,5.233,451,5.233,453,2.838,455,5.478,457,4.146,460,1.331,462,1.768,468,3.784,508,2.757,509,3.502,511,1.929,514,4.742,529,2.104,537,0.705,544,1.929,565,1.511,571,1.427,588,1.703,596,5.338,597,1.247,628,1.058,677,2.338,686,1.273,733,2.033,787,1.313,827,1.703,830,1.154,837,4.551,838,2.033,852,3.671,873,1.929,875,2.164,879,1.723,884,2.119,887,3.929,903,3.735,947,1.199,952,2.104,972,1.464,988,1.929,1057,3.085,1063,1.703,1070,2.164,1073,3.502,1075,3.856,1091,3.59,1140,2.757,1188,2.862,1197,3.473,1229,1.94,1231,1.94,1256,1.176,1378,3.502,1388,2.033,1437,1.843,1448,2.033,1470,2.503,1485,2.338,1565,0.992,1706,1.703,1722,6.138,1832,1.929,1893,2.338,1981,3.502,2170,2.862,2209,1.646,2246,2.338,2383,2.338,2386,3.291,2416,1.768,2426,4.411,2445,1.329,2505,2.164,2620,3.784,2648,2.033,2665,2.033,2693,1.929,2725,3.784,2752,2.338,2792,2.58,2862,1.929,2870,3.784,2873,2.338,4082,3.502,4085,2.338,4086,3.784,4097,3.784,4099,3.784,4100,2.033,4101,2.338,4102,2.338,4103,2.338,4104,2.338,4148,2.338,4204,2.033,4237,2.164,4323,1.929,4391,3.784,5417,1.703,5427,2.338,5428,3.784,5430,2.338,5432,2.338,5438,2.164,5442,3.784,5450,2.338,5462,2.164,5466,2.338,5485,2.338,5512,4.767,5526,3.784,5528,2.338,5540,3.784,5541,2.338,5562,2.338,5575,3.784,5578,2.338,5590,4.767,5595,2.338,5618,2.338,5620,2.164,5626,2.338,5640,1.929,5641,2.033,5697,2.338,5698,2.164,5710,2.338,5725,3.784,5726,2.338,5727,2.603,5728,2.603,5729,4.213,5730,2.603,5731,4.213,5732,4.213,5733,4.213,5734,4.213,5735,2.603,5736,4.213,5737,4.213,5738,2.603,5739,4.213,5740,5.307,5741,2.603,5742,2.603,5743,2.603,5744,2.603,5745,2.603,5746,2.603,5747,4.213,5748,2.603,5749,2.603,5750,2.603,5751,2.603,5752,2.603,5753,2.603,5754,2.603,5755,4.213,5756,2.603,5757,2.603,5758,4.213,5759,2.603,5760,2.603,5761,2.603,5762,2.603,5763,2.603,5764,2.603,5765,2.603,5766,7.547,5767,2.603,5768,2.603,5769,2.603,5770,2.603,5771,2.603,5772,2.603,5773,2.603,5774,2.603,5775,2.603,5776,2.603,5777,2.603,5778,2.603,5779,2.603,5780,2.603,5781,6.099,5782,2.603,5783,2.603,5784,2.603,5785,2.603,5786,2.603,5787,2.603,5788,4.213,5789,5.307,5790,2.603,5791,2.603,5792,5.307,5793,2.603,5794,2.603,5795,4.213,5796,2.603,5797,4.213,5798,2.603,5799,4.213,5800,5.307,5801,2.603,5802,2.603,5803,4.213,5804,2.603,5805,2.603,5806,2.603,5807,2.603,5808,2.603,5809,2.603,5810,2.603,5811,2.603,5812,2.603,5813,2.603,5814,2.603,5815,2.603,5816,2.603,5817,2.603,5818,2.603,5819,2.603,5820,2.603,5821,2.603,5822,2.603,5823,2.603,5824,2.603,5825,2.603,5826,2.603,5827,2.603,5828,2.603,5829,2.603,5830,2.603,5831,2.603,5832,2.603,5833,2.603,5834,4.213,5835,2.603,5836,2.603,5837,2.603,5838,2.603,5839,2.603,5840,2.603,5841,2.603,5842,2.603,5843,4.213,5844,2.603,5845,2.603,5846,2.603,5847,2.603,5848,2.603,5849,2.603,5850,2.603,5851,2.603,5852,2.603,5853,2.603,5854,2.603,5855,2.603,5856,2.603,5857,2.603,5858,2.603,5859,2.603,5860,2.603,5861,2.603,5862,2.603,5863,2.603,5864,2.603,5865,2.603,5866,2.603,5867,2.603,5868,2.603,5869,2.603,5870,2.603,5871,2.603,5872,2.603,5873,2.603,5874,4.213,5875,4.213,5876,2.603,5877,2.603,5878,2.603,5879,2.603,5880,5.307,5881,2.603,5882,2.603,5883,2.603,5884,2.603,5885,2.603,5886,2.603,5887,4.213,5888,2.603,5889,2.603,5890,4.213,5891,2.603,5892,2.603,5893,2.603,5894,2.603,5895,2.603,5896,2.603,5897,2.603,5898,2.603,5899,4.213,5900,2.603,5901,2.603,5902,2.603,5903,2.603,5904,2.603,5905,2.603,5906,2.603,5907,2.603,5908,2.603,5909,2.603,5910,2.603,5911,2.603,5912,2.603,5913,2.603,5914,2.603,5915,2.603,5916,2.603,5917,2.603,5918,2.603,5919,2.603,5920,2.603,5921,2.603,5922,2.603,5923,2.603,5924,2.603,5925,2.603,5926,2.603,5927,2.603,5928,6.099,5929,2.603,5930,2.603,5931,4.213,5932,2.603,5933,2.603,5934,2.603,5935,2.603,5936,4.213,5937,6.699,5938,2.603,5939,4.213,5940,4.213,5941,4.213,5942,2.603,5943,2.603,5944,6.099,5945,2.603,5946,2.603,5947,2.603,5948,2.603,5949,2.603,5950,4.213,5951,2.603,5952,2.603,5953,5.307,5954,5.307,5955,4.213,5956,4.213,5957,2.603,5958,4.213,5959,2.603,5960,2.603,5961,4.213,5962,4.213,5963,4.213,5964,2.603,5965,2.603,5966,2.603,5967,2.603,5968,2.603,5969,2.603,5970,2.603,5971,2.603,5972,2.603,5973,2.603,5974,5.307,5975,2.603,5976,2.603,5977,2.603,5978,2.603,5979,2.603,5980,2.603,5981,2.603,5982,2.603,5983,2.603,5984,2.603,5985,2.603,5986,2.603,5987,2.603,5988,2.603,5989,2.603,5990,2.603,5991,2.603,5992,2.603,5993,2.603,5994,2.603,5995,2.603,5996,2.603,5997,6.099,5998,2.603,5999,2.603,6000,2.603,6001,2.603,6002,2.603,6003,2.603,6004,2.603,6005,2.603,6006,2.603,6007,2.603,6008,2.603,6009,2.603,6010,2.603,6011,2.603,6012,2.603,6013,2.603,6014,2.603,6015,2.603,6016,2.603,6017,2.603,6018,2.603,6019,2.603,6020,4.213,6021,4.213,6022,2.603,6023,2.603]]],"invertedIndex":[["",{"_index":15,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"modules/ApiServicesModule.html":{},"modules/AppModule.html":{},"classes/ApplyUserCouponDto.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"classes/BakeRepoDto.html":{},"controllers/BlogSummaryController.html":{},"modules/BlogSummaryModule.html":{},"injectables/BlogSummaryService.html":{},"interfaces/ChatResponse.html":{},"controllers/CodeExplanationController.html":{},"injectables/CodeExplanationService.html":{},"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"controllers/CodeTestSuggestionController.html":{},"injectables/CodeTestSuggestionService.html":{},"classes/CollaboratorsDto.html":{},"classes/CommitAuthorDto.html":{},"injectables/CommitAuthorsService.html":{},"classes/CommitsDto.html":{},"injectables/CommitsService.html":{},"modules/ContributionModule.html":{},"classes/ContributionPageMetaDto.html":{},"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"classes/ContributionsByProjectDto.html":{},"classes/ContributionsPageDto.html":{},"classes/ContributionsTimeframeDto.html":{},"classes/Contributor.html":{},"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"modules/ContributorModule.html":{},"classes/ContributorPullRequestsDto.html":{},"modules/CouponModule.html":{},"injectables/CouponService.html":{},"classes/CreateBlogSummaryDto.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateInsightDto.html":{},"classes/CreateInsightMemberDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/CreateLogDto.html":{},"classes/CreateUserCollaborationDto.html":{},"classes/CreateUserHighlightDto.html":{},"classes/CreateUserListDto.html":{},"injectables/CustomLogger.html":{},"modules/CustomerModule.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"entities/DbBakedRepo.html":{},"entities/DbCommitAuthors.html":{},"entities/DbCommits.html":{},"entities/DbContribution.html":{},"entities/DbContributionStatTimeframe.html":{},"entities/DbContributionsProjects.html":{},"entities/DbContributorCategoryTimeframe.html":{},"entities/DbCoupon.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"classes/DbFilteredUser.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbPullRequestGitHubEvents.html":{},"entities/DbPullRequestReview.html":{},"entities/DbRepoLoginContributions.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"classes/DbTimezone.html":{},"classes/DbTopUser.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightReactionResponse.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserListContributorStat.html":{},"entities/DbUserListContributorStat-1.html":{},"entities/DbUserNotification.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"controllers/EmojiController.html":{},"modules/EmojiModule.html":{},"injectables/EmojiService.html":{},"controllers/EndorsementController.html":{},"modules/EndorsementModule.html":{},"injectables/EndorsementService.html":{},"guards/EndorsementTokenGuard.html":{},"classes/FilterListContributorsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/FilteredUsersDto.html":{},"classes/FollowManyUsersDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"controllers/HighlightController.html":{},"modules/HighlightModule.html":{},"classes/HighlightOptionsDto.html":{},"injectables/HttpLoggerMiddleware.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"injectables/InsightRepoService.html":{},"modules/InsightsModule.html":{},"injectables/InsightsService.html":{},"controllers/IssueSummaryController.html":{},"modules/IssueSummaryModule.html":{},"injectables/IssueSummaryService.html":{},"modules/LogModule.html":{},"injectables/LogService.html":{},"modules/OpenAiModule.html":{},"injectables/OpenAiService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaParameters.html":{},"classes/PageOptionsDto.html":{},"injectables/PagerService.html":{},"interfaces/PaginationInput.html":{},"controllers/PizzaOvenController.html":{},"modules/PizzaOvenModule.html":{},"injectables/PizzaOvenService.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestGithubEventsService.html":{},"injectables/PullRequestInsightsService.html":{},"modules/PullRequestModule.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestReviewService.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"modules/RepoFilterModule.html":{},"injectables/RepoFilterService.html":{},"classes/RepoInfo.html":{},"modules/RepoModule.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"modules/StarModule.html":{},"injectables/StarService.html":{},"modules/StargazeModule.html":{},"injectables/StargazeService.html":{},"modules/StripeModule.html":{},"injectables/StripeService.html":{},"modules/StripeSubscriptionModule.html":{},"injectables/StripeSubscriptionService.html":{},"modules/StripeWebHookModule.html":{},"controllers/StripeWebhookController.html":{},"modules/SubmitModule.html":{},"injectables/SubmitService.html":{},"classes/SupabaseAuthDto.html":{},"injectables/SupabaseGuard.html":{},"injectables/SupabaseStrategy.html":{},"modules/TierModule.html":{},"injectables/TierService.html":{},"modules/TimescaleModule.html":{},"classes/TopProjectsDto.html":{},"classes/TopUsersDto.html":{},"classes/UpdateEndorsementDto.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateInsightMemberDto.html":{},"classes/UpdateUserCollaborationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowingController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"modules/UserListModule.html":{},"classes/UserListMostActiveContributorsDto.html":{},"injectables/UserListService.html":{},"controllers/UserListStatsController.html":{},"injectables/UserListStatsService.html":{},"modules/UserModule.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"classes/UserOnboardingDto.html":{},"injectables/UserOrganizationService.html":{},"controllers/UserRecommendationController.html":{},"classes/UserRepoOptionsDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"modules/UserReposModule.html":{},"injectables/UserReposService.html":{},"modules/VoteModule.html":{},"injectables/VoteService.html":{},"classes/VotedRepoDto.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":93,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"classes/ContributorPullRequestsDto.html":{},"entities/DbContribution.html":{},"entities/DbContributionStatTimeframe.html":{},"entities/DbContributionsProjects.html":{},"entities/DbContributorCategoryTimeframe.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbPullRequestGitHubEvents.html":{},"entities/DbRepoLoginContributions.html":{},"entities/DbUserListContributorStat.html":{},"entities/DbUserListContributorStat-1.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"injectables/PullRequestGithubEventsService.html":{},"injectables/PullRequestInsightsService.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"injectables/RepoFilterService.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"classes/SupabaseAuthDto.html":{},"classes/TopUsersDto.html":{},"injectables/UserHighlightsService.html":{},"classes/UserListMostActiveContributorsDto.html":{},"injectables/UserListService.html":{},"injectables/UserListStatsService.html":{},"classes/UserRepoOptionsDto.html":{},"miscellaneous/variables.html":{}}}],["0)::integer",{"_index":1171,"title":{},"body":{"injectables/ContributionService.html":{}}}],["0.0.0.0",{"_index":5758,"title":{},"body":{"miscellaneous/variables.html":{}}}],["0.7",{"_index":5772,"title":{},"body":{"miscellaneous/variables.html":{}}}],["01",{"_index":1448,"title":{},"body":{"classes/CreateUserHighlightDto.html":{},"entities/DbCoupon.html":{},"entities/DbUserHighlight.html":{},"miscellaneous/variables.html":{}}}],["01t00:30:00z",{"_index":6018,"title":{},"body":{"miscellaneous/variables.html":{}}}],["04",{"_index":1849,"title":{},"body":{"entities/DbInsightMember.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserNotification.html":{}}}],["08",{"_index":1682,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbContributionStatTimeframe.html":{},"entities/DbContributorCategoryTimeframe.html":{},"entities/DbEmoji.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbPullRequestGitHubEvents.html":{},"entities/DbPullRequestReview.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{}}}],["0e8a16",{"_index":1961,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["1",{"_index":186,"title":{"entities/DbUserListContributorStat-1.html":{},"classes/UserRepoOptionsDto-1.html":{}},"body":{"interfaces/AllContributionsCount.html":{},"interfaces/ChatResponse.html":{},"classes/ContributionPageMetaDto.html":{},"classes/ContributionPageOptionsDto.html":{},"classes/ContributorPullRequestsDto.html":{},"entities/DbEmoji.html":{},"entities/DbPRInsight.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbSubscription.html":{},"classes/FilterListContributorsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/FilteredUsersDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"injectables/OpenAiService.html":{},"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"injectables/PullRequestInsightsService.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"injectables/StripeService.html":{},"classes/TopUsersDto.html":{},"classes/UserListMostActiveContributorsDto.html":{},"injectables/UserListStatsService.html":{},"classes/UserRepoOptionsDto.html":{},"index.html":{},"overview.html":{}}}],["1.59.0",{"_index":5704,"title":{},"body":{"properties.html":{}}}],["10",{"_index":884,"title":{},"body":{"interfaces/ChatResponse.html":{},"classes/ContributionPageMetaDto.html":{},"classes/ContributionPageOptionsDto.html":{},"classes/ContributorPullRequestsDto.html":{},"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbPullRequest.html":{},"entities/DbPullRequestGitHubEvents.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserNotification.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"classes/FilterListContributorsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/FilteredUsersDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"injectables/OpenAiService.html":{},"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"injectables/PullRequestGithubEventsService.html":{},"injectables/PullRequestInsightsService.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/StripeWebhookController.html":{},"classes/SupabaseAuthDto.html":{},"classes/TopUsersDto.html":{},"injectables/UserHighlightsService.html":{},"classes/UserListMostActiveContributorsDto.html":{},"classes/UserRepoOptionsDto.html":{},"miscellaneous/variables.html":{}}}],["100",{"_index":1063,"title":{},"body":{"classes/ContributionPageMetaDto.html":{},"entities/DbEmoji.html":{},"entities/DbUserNotification.html":{},"classes/InsightOptionsDto.html":{},"classes/PageMetaDto.html":{},"classes/RepoPageOptionsDto.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["100'})@column({type",{"_index":1760,"title":{},"body":{"entities/DbEmoji.html":{}}}],["1000",{"_index":1100,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/ContributorPullRequestsDto.html":{},"classes/FilterListContributorsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/FilteredUsersDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/RepoFilterService.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/TopUsersDto.html":{},"classes/UserListMostActiveContributorsDto.html":{},"classes/UserRepoOptionsDto.html":{}}}],["1000).toisostring",{"_index":5891,"title":{},"body":{"miscellaneous/variables.html":{}}}],["10000",{"_index":5803,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1024",{"_index":5766,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1045024650",{"_index":1951,"title":{},"body":{"entities/DbPullRequest.html":{},"entities/DbPullRequestGitHubEvents.html":{}}}],["11",{"_index":4044,"title":{},"body":{"injectables/StripeService.html":{}}}],["12237133",{"_index":1672,"title":{},"body":{"entities/DbContribution.html":{}}}],["12345",{"_index":1213,"title":{},"body":{"classes/Contributor.html":{},"classes/CreateUserListDto.html":{}}}],["12345678",{"_index":1601,"title":{},"body":{"entities/DbBakedRepo.html":{}}}],["123456789",{"_index":2069,"title":{},"body":{"entities/DbPullRequestReview.html":{}}}],["133",{"_index":2392,"title":{},"body":{"entities/DbUserNotification.html":{}}}],["133'})@column({type",{"_index":2378,"title":{},"body":{"entities/DbUserNotification.html":{}}}],["13:24:51.000000",{"_index":1472,"title":{},"body":{"classes/CreateUserHighlightDto.html":{},"entities/DbContribution.html":{},"entities/DbCoupon.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserNotification.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"classes/SupabaseAuthDto.html":{}}}],["13:24:51.000000'})@column({type",{"_index":1676,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbInsightMember.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserNotification.html":{}}}],["13:24:51.000000'})@createdatecolumn({type",{"_index":1666,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbCoupon.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserNotification.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{}}}],["13:24:51.000000'})@deletedatecolumn({type",{"_index":1736,"title":{},"body":{"entities/DbCoupon.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserList.html":{}}}],["13:24:51.000000'})@updatedatecolumn({type",{"_index":1821,"title":{},"body":{"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserList.html":{}}}],["13:24:51.000000})@isdatestring()@isoptional",{"_index":1450,"title":{},"body":{"classes/CreateUserHighlightDto.html":{}}}],["15",{"_index":1658,"title":{},"body":{"entities/DbContribution.html":{},"injectables/StripeService.html":{}}}],["19",{"_index":1449,"title":{},"body":{"classes/CreateUserHighlightDto.html":{},"entities/DbContribution.html":{},"entities/DbCoupon.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserNotification.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"classes/SupabaseAuthDto.html":{}}}],["196",{"_index":2098,"title":{},"body":{"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{}}}],["1})@column({type",{"_index":2190,"title":{},"body":{"entities/DbSubscription.html":{}}}],["2",{"_index":189,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"classes/FilterListContributorsDto.html":{},"controllers/PullRequestController.html":{},"classes/SupabaseAuthDto.html":{},"injectables/UserListStatsService.html":{},"index.html":{}}}],["2.build",{"_index":5506,"title":{},"body":{"index.html":{}}}],["20",{"_index":1782,"title":{},"body":{"entities/DbEndorsement.html":{},"entities/DbInsightMember.html":{},"entities/DbUserCollaboration.html":{},"controllers/UserListStatsController.html":{}}}],["200",{"_index":5765,"title":{},"body":{"miscellaneous/variables.html":{}}}],["200\\`](https://developer.mozilla.org/en",{"_index":5970,"title":{},"body":{"miscellaneous/variables.html":{}}}],["2016",{"_index":1665,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"classes/SupabaseAuthDto.html":{}}}],["201\\`](https://developer.mozilla.org/en",{"_index":5975,"title":{},"body":{"miscellaneous/variables.html":{}}}],["202",{"_index":3221,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["2022",{"_index":1681,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbPullRequestGitHubEvents.html":{},"entities/DbPullRequestReview.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserList.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"injectables/StripeService.html":{}}}],["2023",{"_index":1447,"title":{},"body":{"classes/CreateUserHighlightDto.html":{},"entities/DbContributionStatTimeframe.html":{},"entities/DbContributorCategoryTimeframe.html":{},"entities/DbCoupon.html":{},"entities/DbInsightMember.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserNotification.html":{},"license.html":{}}}],["204\\`](https://developer.mozilla.org/en",{"_index":5979,"title":{},"body":{"miscellaneous/variables.html":{}}}],["22:04:29.000000",{"_index":1693,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbPullRequestGitHubEvents.html":{},"entities/DbPullRequestReview.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{}}}],["22:04:29.000000'})@column({type",{"_index":1939,"title":{},"body":{"entities/DbPullRequest.html":{},"entities/DbPullRequestGitHubEvents.html":{},"entities/DbPullRequestReview.html":{}}}],["22:04:29.000000'})@createdatecolumn({type",{"_index":1944,"title":{},"body":{"entities/DbPullRequest.html":{},"entities/DbPullRequestGitHubEvents.html":{},"entities/DbPullRequestReview.html":{}}}],["22:04:29.000000'})@updatedatecolumn({type",{"_index":1684,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{}}}],["234343",{"_index":3673,"title":{},"body":{"classes/RepoInfo.html":{},"classes/TopProjectsDto.html":{}}}],["234343})@isnumber",{"_index":3671,"title":{},"body":{"classes/RepoInfo.html":{}}}],["234343})@type(undefined)@isnumber",{"_index":4306,"title":{},"body":{"classes/TopProjectsDto.html":{}}}],["237133",{"_index":1745,"title":{},"body":{"entities/DbCustomer.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserNotification.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"classes/SupabaseAuthDto.html":{}}}],["237133})@column('bigint",{"_index":2410,"title":{},"body":{"entities/DbUserRepo.html":{}}}],["237133})@primarycolumn('bigint",{"_index":1740,"title":{},"body":{"entities/DbCustomer.html":{},"entities/DbUserRepo.html":{}}}],["24",{"_index":5889,"title":{},"body":{"miscellaneous/variables.html":{}}}],["25",{"_index":1818,"title":{},"body":{"entities/DbInsight.html":{},"entities/DbUserNotification.html":{}}}],["250",{"_index":1355,"title":{},"body":{"classes/CreateBlogSummaryDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{}}}],["25060",{"_index":5526,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["25060:5432",{"_index":5521,"title":{},"body":{"index.html":{}}}],["250})@isnumber()@min(100)@max(500",{"_index":1342,"title":{},"body":{"classes/CreateBlogSummaryDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{}}}],["255",{"_index":1591,"title":{},"body":{"entities/DbBakedRepo.html":{},"entities/DbCommitAuthors.html":{},"entities/DbCommits.html":{},"entities/DbContribution.html":{},"entities/DbInsight.html":{},"entities/DbUserList.html":{}}}],["26t23:55:49.204z",{"_index":1713,"title":{},"body":{"entities/DbContributionStatTimeframe.html":{},"entities/DbContributorCategoryTimeframe.html":{}}}],["28",{"_index":1683,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbPullRequestGitHubEvents.html":{},"entities/DbPullRequestReview.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{}}}],["287",{"_index":1880,"title":{},"body":{"entities/DbPRInsight.html":{}}}],["3.5",{"_index":5904,"title":{},"body":{"miscellaneous/variables.html":{}}}],["3.run",{"_index":5518,"title":{},"body":{"index.html":{}}}],["30",{"_index":142,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"classes/ContributionPageOptionsDto.html":{},"classes/ContributionsByProjectDto.html":{},"classes/ContributionsTimeframeDto.html":{},"controllers/ContributorInsightsController.html":{},"classes/ContributorPullRequestsDto.html":{},"classes/FilterListContributorsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"controllers/PullRequestController.html":{},"injectables/PullRequestInsightsService.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"classes/TopProjectsDto.html":{},"classes/UserListMostActiveContributorsDto.html":{},"injectables/UserListService.html":{},"injectables/UserListStatsService.html":{},"classes/UserRepoOptionsDto.html":{}}}],["3000",{"_index":5769,"title":{},"body":{"miscellaneous/variables.html":{}}}],["3001",{"_index":5541,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["31333",{"_index":1776,"title":{},"body":{"entities/DbEndorsement.html":{},"entities/DbUserCollaboration.html":{}}}],["31st",{"_index":3419,"title":{},"body":{"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{}}}],["32",{"_index":2379,"title":{},"body":{"entities/DbUserNotification.html":{},"overview.html":{}}}],["35",{"_index":5699,"title":{},"body":{"overview.html":{}}}],["365",{"_index":5501,"title":{},"body":{"index.html":{}}}],["39",{"_index":5700,"title":{},"body":{"overview.html":{}}}],["4",{"_index":1942,"title":{},"body":{"entities/DbPullRequest.html":{},"entities/DbPullRequestGitHubEvents.html":{},"overview.html":{}}}],["400",{"_index":2881,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{}}}],["400\\`](https://developer.mozilla.org/en",{"_index":5986,"title":{},"body":{"miscellaneous/variables.html":{}}}],["401\\`](https://developer.mozilla.org/en",{"_index":5993,"title":{},"body":{"miscellaneous/variables.html":{}}}],["403\\`](https://developer.mozilla.org/en",{"_index":5998,"title":{},"body":{"miscellaneous/variables.html":{}}}],["404\\`](https://developer.mozilla.org/en",{"_index":6001,"title":{},"body":{"miscellaneous/variables.html":{}}}],["42211",{"_index":979,"title":{},"body":{"classes/CollaboratorsDto.html":{},"classes/CreateEndorsementDto.html":{},"entities/DbSubscription.html":{}}}],["42211})@column({type",{"_index":2197,"title":{},"body":{"entities/DbSubscription.html":{}}}],["42211})@isnumber",{"_index":1371,"title":{},"body":{"classes/CreateEndorsementDto.html":{}}}],["426820139",{"_index":5357,"title":{},"body":{"classes/UserRepoOptionsDto-1.html":{},"classes/VotedRepoDto.html":{}}}],["429",{"_index":5949,"title":{},"body":{"miscellaneous/variables.html":{}}}],["429\\`](https://developer.mozilla.org/en",{"_index":6004,"title":{},"body":{"miscellaneous/variables.html":{}}}],["43311",{"_index":2371,"title":{},"body":{"entities/DbUserNotification.html":{}}}],["4456742596",{"_index":1957,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["46",{"_index":5701,"title":{},"body":{"overview.html":{}}}],["498",{"_index":1746,"title":{},"body":{"entities/DbCustomer.html":{},"entities/DbUserNotification.html":{}}}],["498})@column({type",{"_index":1742,"title":{},"body":{"entities/DbCustomer.html":{}}}],["5",{"_index":1936,"title":{},"body":{"entities/DbPullRequest.html":{},"entities/DbPullRequestGitHubEvents.html":{},"classes/InsightOptionsDto.html":{},"injectables/RepoFilterService.html":{},"classes/RepoPageOptionsDto.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserOnboardingDto.html":{},"miscellaneous/enumerations.html":{}}}],["5'})@isstring",{"_index":5318,"title":{},"body":{"classes/UserOnboardingDto.html":{}}}],["5'})@isstring()@isoptional",{"_index":4350,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["50",{"_index":1098,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/ContributorPullRequestsDto.html":{},"entities/DbCustomer.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"controllers/StripeWebhookController.html":{},"classes/TopUsersDto.html":{},"classes/UserListMostActiveContributorsDto.html":{},"classes/UserRepoOptionsDto.html":{}}}],["500",{"_index":1780,"title":{},"body":{"entities/DbEndorsement.html":{},"entities/DbUserCollaboration.html":{},"injectables/HttpLoggerMiddleware.html":{}}}],["5000",{"_index":5943,"title":{},"body":{"miscellaneous/variables.html":{}}}],["5432",{"_index":5528,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["5736810",{"_index":1385,"title":{},"body":{"classes/CreateEndorsementDto.html":{}}}],["5736810})@isnumber",{"_index":1374,"title":{},"body":{"classes/CreateEndorsementDto.html":{}}}],["57568598",{"_index":1634,"title":{},"body":{"entities/DbCommits.html":{}}}],["5e7c6c7af42d38c57f363c564c58007da448c443",{"_index":1020,"title":{},"body":{"classes/CommitsDto.html":{},"entities/DbCommits.html":{}}}],["5e7c6c7af42d38c57f363c564c58007da448c443'})@column({type",{"_index":1642,"title":{},"body":{"entities/DbCommits.html":{}}}],["5e7c6c7af42d38c57f363c564c58007da448c443'})@isstring",{"_index":1018,"title":{},"body":{"classes/CommitsDto.html":{}}}],["60",{"_index":5890,"title":{},"body":{"miscellaneous/variables.html":{}}}],["60].map(async",{"_index":3317,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["612",{"_index":1974,"title":{},"body":{"entities/DbPullRequest.html":{},"entities/DbPullRequestGitHubEvents.html":{}}}],["63",{"_index":5702,"title":{},"body":{"overview.html":{}}}],["7",{"_index":140,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"classes/ContributionPageOptionsDto.html":{},"classes/ContributorPullRequestsDto.html":{},"classes/CreateBlogSummaryDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/FilterOptionsDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/UserListMostActiveContributorsDto.html":{},"injectables/UserListStatsService.html":{},"classes/UserRepoOptionsDto.html":{}}}],["71359796",{"_index":1598,"title":{},"body":{"entities/DbBakedRepo.html":{},"entities/DbCommitAuthors.html":{},"entities/DbCommits.html":{},"entities/DbContribution.html":{},"entities/DbPRInsight.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"classes/UserRepoOptionsDto-1.html":{},"classes/VotedRepoDto.html":{}}}],["78133",{"_index":1386,"title":{},"body":{"classes/CreateEndorsementDto.html":{},"entities/DbEndorsement.html":{}}}],["78133})@isnumber",{"_index":1376,"title":{},"body":{"classes/CreateEndorsementDto.html":{}}}],["797",{"_index":1401,"title":{},"body":{"classes/CreateInsightDto.html":{}}}],["7})@isnumber()@min(0)@max(10",{"_index":1344,"title":{},"body":{"classes/CreateBlogSummaryDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{}}}],["80",{"_index":5912,"title":{},"body":{"miscellaneous/variables.html":{}}}],["8080:3001",{"_index":5573,"title":{},"body":{"index.html":{}}}],["81233",{"_index":980,"title":{},"body":{"classes/CollaboratorsDto.html":{}}}],["82",{"_index":128,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["86400000).toisostring",{"_index":180,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["90",{"_index":1185,"title":{},"body":{"classes/ContributionsByProjectDto.html":{},"classes/ContributionsTimeframeDto.html":{},"classes/PageOptionsDto.html":{},"classes/TopProjectsDto.html":{}}}],["90'])@isint()@isoptional",{"_index":1113,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/ContributionsByProjectDto.html":{},"classes/ContributionsTimeframeDto.html":{},"classes/ContributorPullRequestsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/TopProjectsDto.html":{},"classes/UserListMostActiveContributorsDto.html":{},"classes/UserRepoOptionsDto.html":{}}}],["9876543",{"_index":1640,"title":{},"body":{"entities/DbCommits.html":{}}}],["_stripe",{"_index":4032,"title":{},"body":{"injectables/StripeService.html":{}}}],["_token",{"_index":2485,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["above",{"_index":5665,"title":{},"body":{"license.html":{}}}],["accept",{"_index":4330,"title":{},"body":{"classes/UpdateUserCollaborationDto.html":{},"index.html":{}}}],["accept'})@isstring()@isin(['accept",{"_index":4328,"title":{},"body":{"classes/UpdateUserCollaborationDto.html":{}}}],["acceptance",{"_index":2215,"title":{},"body":{"entities/DbUserCollaboration.html":{}}}],["accepted",{"_index":1879,"title":{},"body":{"entities/DbPRInsight.html":{},"injectables/PullRequestInsightsService.html":{}}}],["accepted_prs",{"_index":1875,"title":{},"body":{"entities/DbPRInsight.html":{}}}],["accepting",{"_index":4392,"title":{},"body":{"controllers/UserCollaborationController.html":{},"controllers/UserInsightMemberController.html":{}}}],["access",{"_index":1832,"title":{},"body":{"entities/DbInsightMember.html":{},"injectables/InsightsService.html":{},"classes/UpdateInsightMemberDto.html":{},"controllers/UserInsightMemberController.html":{},"miscellaneous/variables.html":{}}}],["accessors",{"_index":2633,"title":{},"body":{"classes/FilterListContributorsDto.html":{},"classes/FilteredUsersDto.html":{},"classes/PageOptionsDto.html":{},"injectables/StripeService.html":{},"classes/TopUsersDto.html":{}}}],["accessroles",{"_index":2947,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["account",{"_index":572,"title":{},"body":{"controllers/AuthController.html":{},"injectables/TierService.html":{}}}],["account'})@apibearerauth()@useguards(supabaseguard)@apiokresponse({type",{"_index":570,"title":{},"body":{"controllers/AuthController.html":{}}}],["action",{"_index":5686,"title":{},"body":{"license.html":{}}}],["active",{"_index":37,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"classes/ContributionsTimeframeDto.html":{},"entities/DbContributorCategoryTimeframe.html":{},"entities/DbSubscription.html":{},"classes/InsightOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"controllers/StripeWebhookController.html":{},"classes/UserListMostActiveContributorsDto.html":{},"controllers/UserListStatsController.html":{},"injectables/UserListStatsService.html":{},"miscellaneous/enumerations.html":{}}}],["active'})@column({type",{"_index":2192,"title":{},"body":{"entities/DbSubscription.html":{}}}],["active_pull_requests\".\"updated_at",{"_index":3759,"title":{},"body":{"injectables/RepoService.html":{}}}],["activecount",{"_index":164,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["activecountquerybuilder",{"_index":161,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["activecountquerybuilder.getcount",{"_index":165,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["activecountquerybuilder.innerjoin",{"_index":162,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["actual",{"_index":5476,"title":{},"body":{"index.html":{}}}],["add",{"_index":2792,"title":{},"body":{"controllers/HighlightController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"classes/UserRepoOptionsDto-1.html":{},"classes/VotedRepoDto.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["addafeaturedhighlight",{"_index":2791,"title":{},"body":{"controllers/HighlightController.html":{}}}],["addbearerauth",{"_index":5869,"title":{},"body":{"miscellaneous/variables.html":{}}}],["addcustomer",{"_index":1523,"title":{},"body":{"injectables/CustomerService.html":{},"injectables/StripeService.html":{}}}],["addcustomer(id",{"_index":4035,"title":{},"body":{"injectables/StripeService.html":{}}}],["addcustomer(userid",{"_index":1529,"title":{},"body":{"injectables/CustomerService.html":{}}}],["added",{"_index":1923,"title":{},"body":{"entities/DbPullRequest.html":{},"entities/DbPullRequestGitHubEvents.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"injectables/UserHighlightsService.html":{},"index.html":{}}}],["addfeatured",{"_index":4725,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["addfeatured(highlightid",{"_index":4739,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["addgroupby(\"author_login",{"_index":3539,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["addgroupby(\"emoji_id",{"_index":4819,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["addgroupby(\"users.id",{"_index":3540,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["addhighlightforuser",{"_index":4662,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["addhighlightreactionforuser",{"_index":4644,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["addhighlightreactionforuser(highlightid",{"_index":4653,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["addinsight",{"_index":3034,"title":{},"body":{"injectables/InsightsService.html":{}}}],["addinsight(insight",{"_index":3042,"title":{},"body":{"injectables/InsightsService.html":{}}}],["addinsightforuser",{"_index":4645,"title":{},"body":{"controllers/UserHighlightsController.html":{},"controllers/UserInsightsController.html":{}}}],["addinsightforuser(@body",{"_index":4907,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["addinsightforuser(createhighlightdto",{"_index":4661,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["addinsightforuser(createinsightdto",{"_index":4896,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["addinsightmember",{"_index":2932,"title":{},"body":{"injectables/InsightMemberService.html":{},"controllers/UserInsightMemberController.html":{}}}],["addinsightmember(createinsightmemberdto",{"_index":4838,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["addinsightmember(insightmember",{"_index":2941,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["addinsightrepo",{"_index":2990,"title":{},"body":{"injectables/InsightRepoService.html":{}}}],["addinsightrepo(insightid",{"_index":2996,"title":{},"body":{"injectables/InsightRepoService.html":{}}}],["additional",{"_index":6007,"title":{},"body":{"miscellaneous/variables.html":{}}}],["additions",{"_index":1901,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["addlistforuser",{"_index":4943,"title":{},"body":{"controllers/UserListController.html":{}}}],["addlistforuser(@body",{"_index":5022,"title":{},"body":{"controllers/UserListController.html":{}}}],["addlistforuser(createuserlistdto",{"_index":4956,"title":{},"body":{"controllers/UserListController.html":{}}}],["addmemberforinsight",{"_index":4840,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["addorderby(`\"${orderfield",{"_index":1155,"title":{},"body":{"injectables/ContributionService.html":{},"injectables/RepoService.html":{}}}],["addorderby(`\"contribution\".\"created_at",{"_index":1157,"title":{},"body":{"injectables/ContributionService.html":{}}}],["addorderby(`\"pull_requests\".\"updated_at",{"_index":3522,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["addorderby(`\"repo\".\"created_at",{"_index":3770,"title":{},"body":{"injectables/RepoService.html":{}}}],["addorderby(`\"repos\".\"${orderfield",{"_index":3777,"title":{},"body":{"injectables/RepoService.html":{}}}],["addorderby(`\"updated_at",{"_index":3542,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["address",{"_index":5940,"title":{},"body":{"miscellaneous/variables.html":{}}}],["adds",{"_index":3826,"title":{},"body":{"controllers/RepoStarController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{}}}],["addselect",{"_index":90,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/ContributionService.html":{},"injectables/EndorsementService.html":{},"injectables/RepoService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserListService.html":{},"injectables/UserListStatsService.html":{}}}],["addselect(\"array_agg(users.login",{"_index":4816,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["addselect(\"coalesce(sum(pull_requests.commits",{"_index":1170,"title":{},"body":{"injectables/ContributionService.html":{}}}],["addselect(\"count(emoji_id",{"_index":4815,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["addselect(\"count(pr.id",{"_index":193,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["addselect(\"count(pull_requests.id)::integer",{"_index":1173,"title":{},"body":{"injectables/ContributionService.html":{}}}],["addselect(\"insight_members.invitation_email",{"_index":2970,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["addselect(\"max(pull_requests.updated_at",{"_index":3536,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["addselect(\"r2votes.deleted_at",{"_index":5411,"title":{},"body":{"injectables/VoteService.html":{}}}],["addselect(\"repos.full_name",{"_index":3524,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["addselect(\"repos.id",{"_index":191,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/PullRequestService.html":{},"injectables/UserListStatsService.html":{}}}],["addselect(\"split_part(repos.full_name",{"_index":188,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["addselect(\"user_follows.deleted_at",{"_index":4580,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["addselect(\"user_orgs.user_id",{"_index":3791,"title":{},"body":{"injectables/RepoService.html":{}}}],["addselect(\"users.id",{"_index":3537,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["addselect(\"users.login",{"_index":3790,"title":{},"body":{"injectables/RepoService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserListService.html":{}}}],["addselect(\"users.name",{"_index":2968,"title":{},"body":{"injectables/InsightMemberService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserListService.html":{}}}],["addselect((qb",{"_index":3738,"title":{},"body":{"injectables/RepoService.html":{}}}],["addselect(`${interval}::integer",{"_index":3432,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["addselect(`row_number",{"_index":3372,"title":{},"body":{"injectables/PullRequestGithubEventsService.html":{}}}],["addserver(`https://${apidomain",{"_index":5855,"title":{},"body":{"miscellaneous/variables.html":{}}}],["addserver(`https://alpha.${apidomain",{"_index":5858,"title":{},"body":{"miscellaneous/variables.html":{}}}],["addserver(`https://beta.${apidomain",{"_index":5856,"title":{},"body":{"miscellaneous/variables.html":{}}}],["addusercollaboration",{"_index":4383,"title":{},"body":{"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{}}}],["addusercollaboration(createusercollaborationdto",{"_index":4387,"title":{},"body":{"controllers/UserCollaborationController.html":{}}}],["addusercollaboration(usercollaboration",{"_index":4432,"title":{},"body":{"injectables/UserCollaborationService.html":{}}}],["adduserfollowerbyuserid",{"_index":4547,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["adduserfollowerbyuserid(userid",{"_index":4556,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["adduserfollowernotification",{"_index":5265,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["adduserfollowernotification(userid",{"_index":5273,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["adduserhighlight",{"_index":4726,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["adduserhighlight(userid",{"_index":4741,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["adduserhighlightnotification",{"_index":5266,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["adduserhighlightnotification(highlightid",{"_index":5275,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["adduserhighlightreaction",{"_index":4727,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["adduserhighlightreaction(userid",{"_index":4743,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["adduserhighlightreactionnotification",{"_index":5267,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["adduserhighlightreactionnotification(userid",{"_index":5277,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["adduserlist",{"_index":5080,"title":{},"body":{"injectables/UserListService.html":{}}}],["adduserlist(userid",{"_index":5095,"title":{},"body":{"injectables/UserListService.html":{}}}],["adduserlistcontributor",{"_index":5081,"title":{},"body":{"injectables/UserListService.html":{}}}],["adduserlistcontributor(listid",{"_index":5097,"title":{},"body":{"injectables/UserListService.html":{}}}],["addusernotification",{"_index":5268,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["addusernotification(usernotification",{"_index":5279,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["adduserrepo",{"_index":5367,"title":{},"body":{"injectables/UserReposService.html":{}}}],["adduserrepo(userid",{"_index":5371,"title":{},"body":{"injectables/UserReposService.html":{}}}],["adjust",{"_index":5600,"title":{},"body":{"index.html":{}}}],["admin",{"_index":4323,"title":{},"body":{"classes/UpdateInsightMemberDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"miscellaneous/variables.html":{}}}],["admin).'})@isoptional",{"_index":4358,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["advised",{"_index":5586,"title":{},"body":{"index.html":{}}}],["ai.module",{"_index":423,"title":{},"body":{"modules/AppModule.html":{},"modules/BlogSummaryModule.html":{},"modules/IssueSummaryModule.html":{},"modules/PullRequestModule.html":{}}}],["ai.module.ts",{"_index":3124,"title":{},"body":{"modules/OpenAiModule.html":{}}}],["ai.service",{"_index":824,"title":{},"body":{"injectables/BlogSummaryService.html":{},"injectables/CodeExplanationService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"injectables/IssueSummaryService.html":{},"modules/OpenAiModule.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["ai.service.ts",{"_index":858,"title":{},"body":{"interfaces/ChatResponse.html":{},"injectables/OpenAiService.html":{}}}],["ai.service.ts:10",{"_index":3126,"title":{},"body":{"injectables/OpenAiService.html":{}}}],["ai.service.ts:13",{"_index":3127,"title":{},"body":{"injectables/OpenAiService.html":{}}}],["ai/open",{"_index":422,"title":{},"body":{"modules/AppModule.html":{},"modules/BlogSummaryModule.html":{},"injectables/BlogSummaryService.html":{},"interfaces/ChatResponse.html":{},"injectables/CodeExplanationService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"modules/IssueSummaryModule.html":{},"injectables/IssueSummaryService.html":{},"modules/OpenAiModule.html":{},"injectables/OpenAiService.html":{},"injectables/PullRequestDescriptionService.html":{},"modules/PullRequestModule.html":{}}}],["alias",{"_index":3720,"title":{},"body":{"injectables/RepoService.html":{}}}],["aliases",{"_index":5723,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["aliasname",{"_index":3723,"title":{},"body":{"injectables/RepoService.html":{}}}],["aliastable",{"_index":3725,"title":{},"body":{"injectables/RepoService.html":{}}}],["alias}count",{"_index":3724,"title":{},"body":{"injectables/RepoService.html":{}}}],["alias}countselect",{"_index":3726,"title":{},"body":{"injectables/RepoService.html":{}}}],["all_contributions",{"_index":12,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["all_prs",{"_index":1876,"title":{},"body":{"entities/DbPRInsight.html":{}}}],["allcontributionscount",{"_index":1,"title":{"interfaces/AllContributionsCount.html":{}},"body":{"interfaces/AllContributionsCount.html":{},"classes/ContributionPageMetaDto.html":{},"injectables/UserListStatsService.html":{}}}],["allcontributionsresult.all_contributions",{"_index":120,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["allerrs",{"_index":4632,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["allerrs.push(e",{"_index":4634,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["allof",{"_index":5782,"title":{},"body":{"miscellaneous/variables.html":{}}}],["allow_promotion_codes",{"_index":4050,"title":{},"body":{"injectables/StripeService.html":{}}}],["allowed",{"_index":5941,"title":{},"body":{"miscellaneous/variables.html":{}}}],["alpha",{"_index":5859,"title":{},"body":{"miscellaneous/variables.html":{}}}],["already",{"_index":3813,"title":{},"body":{"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/SubmitService.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"injectables/VoteService.html":{}}}],["alumni",{"_index":181,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"entities/DbContributorCategoryTimeframe.html":{},"classes/UserListMostActiveContributorsDto.html":{},"injectables/UserListStatsService.html":{},"miscellaneous/enumerations.html":{}}}],["alumnicount",{"_index":174,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["alumnicountquerybuilder",{"_index":171,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["alumnicountquerybuilder.getcount",{"_index":175,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["alumnicountquerybuilder.innerjoin",{"_index":172,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["america/los_angeles",{"_index":2205,"title":{},"body":{"classes/DbTimezone.html":{}}}],["analyze",{"_index":840,"title":{},"body":{"injectables/BlogSummaryService.html":{},"injectables/IssueSummaryService.html":{}}}],["and/or",{"_index":5657,"title":{},"body":{"license.html":{}}}],["ands",{"_index":2489,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["andwhere",{"_index":3785,"title":{},"body":{"injectables/RepoService.html":{}}}],["andwhere(\"insight_members.access",{"_index":2967,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["andwhere(\"insight_members.user_id",{"_index":2966,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["andwhere(\"is_public=true",{"_index":3075,"title":{},"body":{"injectables/InsightsService.html":{}}}],["andwhere(\"r2stargazes.user_id",{"_index":4020,"title":{},"body":{"injectables/StargazeService.html":{}}}],["andwhere(\"r2stars.user_id",{"_index":3992,"title":{},"body":{"injectables/StarService.html":{}}}],["andwhere(\"r2submits.user_id",{"_index":4185,"title":{},"body":{"injectables/SubmitService.html":{}}}],["andwhere(\"r2votes.user_id",{"_index":5413,"title":{},"body":{"injectables/VoteService.html":{}}}],["andwhere(\"user_follows.deleted_at",{"_index":4574,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["andwhere(\"user_follows.following_user_id",{"_index":4577,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["andwhere(\"user_highlight_reactions.emoji_id",{"_index":4823,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["andwhere(\"user_highlight_reactions.user_id",{"_index":4822,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["andwhere(\"user_list_contributors.list_id",{"_index":89,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["andwhere(\"user_notifications.type",{"_index":5293,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["andwhere(\"users.timezone",{"_index":5167,"title":{},"body":{"injectables/UserListService.html":{}}}],["andwhere(`\"current_month_prs\".\"author_login",{"_index":235,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["andwhere(`'${startdate}'::timestamp",{"_index":1179,"title":{},"body":{"injectables/ContributionService.html":{},"injectables/PullRequestGithubEventsService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserListService.html":{}}}],["andwhere(`(expired_at",{"_index":1315,"title":{},"body":{"injectables/CouponService.html":{}}}],["andwhere(`pull_requests.updated_at",{"_index":3551,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["any(\"repo\".\"topics",{"_index":3784,"title":{},"body":{"injectables/RepoService.html":{}}}],["any(\"repos\".\"topics",{"_index":3651,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["any(\"spam_pull_requests\".\"label_names",{"_index":3663,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["anything",{"_index":832,"title":{},"body":{"injectables/BlogSummaryService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"injectables/IssueSummaryService.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["anytime",{"_index":5879,"title":{},"body":{"miscellaneous/variables.html":{}}}],["api",{"_index":1722,"title":{},"body":{"entities/DbContributionsProjects.html":{},"index.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["api.certificate",{"_index":466,"title":{},"body":{"modules/AppModule.html":{}}}],["api.config.ts",{"_index":5733,"title":{},"body":{"miscellaneous/variables.html":{}}}],["api.connection",{"_index":448,"title":{},"body":{"modules/AppModule.html":{}}}],["api.database",{"_index":458,"title":{},"body":{"modules/AppModule.html":{}}}],["api.host",{"_index":450,"title":{},"body":{"modules/AppModule.html":{}}}],["api.maxqueryexecutiontime",{"_index":469,"title":{},"body":{"modules/AppModule.html":{}}}],["api.opensauced.pizza",{"_index":5442,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["api.opensauced.pizzaalternatively",{"_index":5574,"title":{},"body":{"index.html":{}}}],["api.password",{"_index":456,"title":{},"body":{"modules/AppModule.html":{}}}],["api.port",{"_index":452,"title":{},"body":{"modules/AppModule.html":{}}}],["api.username",{"_index":454,"title":{},"body":{"modules/AppModule.html":{}}}],["api_domain=your_api_domainreplace",{"_index":5471,"title":{},"body":{"index.html":{}}}],["apiacceptedresponse",{"_index":3211,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["apibadrequestresponse",{"_index":789,"title":{},"body":{"controllers/BlogSummaryController.html":{},"controllers/CodeExplanationController.html":{},"controllers/CodeRefactorSuggestionController.html":{},"controllers/CodeTestSuggestionController.html":{},"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"controllers/IssueSummaryController.html":{},"controllers/PizzaOvenController.html":{},"controllers/PullRequestDescriptionController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"controllers/UserListStatsController.html":{}}}],["apibearerauth",{"_index":625,"title":{},"body":{"controllers/AuthController.html":{},"controllers/BlogSummaryController.html":{},"controllers/CodeExplanationController.html":{},"controllers/CodeRefactorSuggestionController.html":{},"controllers/CodeTestSuggestionController.html":{},"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"controllers/IssueSummaryController.html":{},"controllers/PullRequestDescriptionController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserEndorsementController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"controllers/UserNotificationController.html":{},"controllers/UserRecommendationController.html":{}}}],["apibody",{"_index":626,"title":{},"body":{"controllers/AuthController.html":{},"controllers/BlogSummaryController.html":{},"controllers/CodeExplanationController.html":{},"controllers/CodeRefactorSuggestionController.html":{},"controllers/CodeTestSuggestionController.html":{},"controllers/EndorsementController.html":{},"controllers/InsightController.html":{},"controllers/IssueSummaryController.html":{},"controllers/PizzaOvenController.html":{},"controllers/PullRequestDescriptionController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{}}}],["apiconfig",{"_index":320,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["apiconflictresponse",{"_index":3833,"title":{},"body":{"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{}}}],["apiconnection",{"_index":64,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"modules/AppModule.html":{},"injectables/CommitAuthorsService.html":{},"injectables/CommitsService.html":{},"modules/ContributionModule.html":{},"injectables/ContributionService.html":{},"modules/ContributorModule.html":{},"modules/CouponModule.html":{},"injectables/CouponService.html":{},"modules/CustomerModule.html":{},"injectables/CustomerService.html":{},"modules/EmojiModule.html":{},"injectables/EmojiService.html":{},"modules/EndorsementModule.html":{},"injectables/EndorsementService.html":{},"modules/HighlightModule.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightRepoService.html":{},"modules/InsightsModule.html":{},"injectables/InsightsService.html":{},"modules/PizzaOvenModule.html":{},"injectables/PizzaOvenService.html":{},"injectables/PullRequestInsightsService.html":{},"modules/PullRequestModule.html":{},"injectables/PullRequestReviewService.html":{},"injectables/PullRequestService.html":{},"modules/RepoModule.html":{},"injectables/RepoService.html":{},"modules/StarModule.html":{},"injectables/StarService.html":{},"modules/StargazeModule.html":{},"injectables/StargazeService.html":{},"modules/StripeSubscriptionModule.html":{},"injectables/StripeSubscriptionService.html":{},"modules/SubmitModule.html":{},"injectables/SubmitService.html":{},"injectables/UserCollaborationService.html":{},"injectables/UserFollowService.html":{},"injectables/UserHighlightsService.html":{},"modules/UserListModule.html":{},"injectables/UserListService.html":{},"injectables/UserListStatsService.html":{},"modules/UserModule.html":{},"injectables/UserNotificationService.html":{},"injectables/UserOrganizationService.html":{},"modules/UserReposModule.html":{},"injectables/UserReposService.html":{},"modules/VoteModule.html":{},"injectables/VoteService.html":{}}}],["apidomain",{"_index":5843,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apidomain}](https://${apidomain",{"_index":5935,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apiextramodels(pagedto",{"_index":5780,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apihideproperty",{"_index":1610,"title":{},"body":{"entities/DbBakedRepo.html":{},"entities/DbCommitAuthors.html":{},"entities/DbCommits.html":{},"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbInsight.html":{},"entities/DbInsightRepo.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserNotification.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{}}}],["apihideproperty()@column({type",{"_index":1618,"title":{},"body":{"entities/DbCommitAuthors.html":{},"entities/DbPullRequest.html":{},"entities/DbSubscription.html":{}}}],["apihideproperty()@deletedatecolumn({type",{"_index":1670,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{}}}],["apihideproperty()@manytoone(undefined",{"_index":1630,"title":{},"body":{"entities/DbCommits.html":{},"entities/DbContribution.html":{},"entities/DbInsight.html":{},"entities/DbInsightRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserNotification.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserTopRepo.html":{}}}],["apihideproperty()@onetomany(undefined",{"_index":1593,"title":{},"body":{"entities/DbBakedRepo.html":{},"entities/DbCommitAuthors.html":{},"entities/DbEmoji.html":{},"entities/DbInsight.html":{},"entities/DbUserHighlight.html":{}}}],["apikey",{"_index":5899,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apimodelproperty",{"_index":1607,"title":{},"body":{"entities/DbBakedRepo.html":{},"entities/DbCommitAuthors.html":{},"entities/DbCommits.html":{},"entities/DbContribution.html":{},"entities/DbContributionStatTimeframe.html":{},"entities/DbContributionsProjects.html":{},"entities/DbContributorCategoryTimeframe.html":{},"entities/DbCoupon.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"classes/DbFilteredUser.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbPullRequestGitHubEvents.html":{},"entities/DbPullRequestReview.html":{},"entities/DbRepoLoginContributions.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"classes/DbTimezone.html":{},"classes/DbTopUser.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserListContributorStat.html":{},"entities/DbUserListContributorStat-1.html":{},"entities/DbUserNotification.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{}}}],["apimodelproperty({description",{"_index":1587,"title":{},"body":{"entities/DbBakedRepo.html":{},"entities/DbCommitAuthors.html":{},"entities/DbCommits.html":{},"entities/DbContribution.html":{},"entities/DbContributionStatTimeframe.html":{},"entities/DbContributionsProjects.html":{},"entities/DbContributorCategoryTimeframe.html":{},"entities/DbCoupon.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"classes/DbFilteredUser.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbPullRequestGitHubEvents.html":{},"entities/DbPullRequestReview.html":{},"entities/DbRepoLoginContributions.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"classes/DbTimezone.html":{},"classes/DbTopUser.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserListContributorStat.html":{},"entities/DbUserListContributorStat-1.html":{},"entities/DbUserNotification.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{}}}],["apimodelproperty({type",{"_index":2288,"title":{},"body":{"entities/DbUserHighlightReaction.html":{}}}],["apimodelpropertyoptional",{"_index":1692,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbCoupon.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbPullRequest.html":{},"entities/DbPullRequestGitHubEvents.html":{},"entities/DbPullRequestReview.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserNotification.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{}}}],["apimodelpropertyoptional({description",{"_index":1660,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbCoupon.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbPullRequest.html":{},"entities/DbPullRequestGitHubEvents.html":{},"entities/DbPullRequestReview.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserNotification.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{}}}],["apinotfoundresponse",{"_index":627,"title":{},"body":{"controllers/AuthController.html":{},"controllers/EmojiController.html":{},"controllers/EndorsementController.html":{},"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"controllers/PizzaOvenController.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserController.html":{},"controllers/UserFollowingController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"controllers/UserListStatsController.html":{},"controllers/UserNotificationController.html":{}}}],["apiokresponse",{"_index":628,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"controllers/EmojiController.html":{},"controllers/EndorsementController.html":{},"controllers/HealthController.html":{},"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"controllers/PizzaOvenController.html":{},"controllers/PullRequestController.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/StripeWebhookController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"controllers/UserListStatsController.html":{},"controllers/UserNotificationController.html":{},"controllers/UserRecommendationController.html":{},"miscellaneous/variables.html":{}}}],["apioperation",{"_index":629,"title":{},"body":{"controllers/AuthController.html":{},"controllers/BlogSummaryController.html":{},"controllers/CodeExplanationController.html":{},"controllers/CodeRefactorSuggestionController.html":{},"controllers/CodeTestSuggestionController.html":{},"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"controllers/EmojiController.html":{},"controllers/EndorsementController.html":{},"controllers/HealthController.html":{},"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"controllers/IssueSummaryController.html":{},"controllers/PizzaOvenController.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"controllers/UserFollowingController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"controllers/UserListStatsController.html":{},"controllers/UserNotificationController.html":{},"controllers/UserRecommendationController.html":{}}}],["apipaginatedresponse",{"_index":1229,"title":{},"body":{"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"controllers/EmojiController.html":{},"controllers/EndorsementController.html":{},"controllers/HighlightController.html":{},"controllers/PizzaOvenController.html":{},"controllers/PullRequestController.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"controllers/UserListStatsController.html":{},"controllers/UserRecommendationController.html":{},"miscellaneous/variables.html":{}}}],["apipaginatedresponse(dbbakedrepo",{"_index":3225,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["apipaginatedresponse(dbcommitauthors",{"_index":3234,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["apipaginatedresponse(dbcommits",{"_index":3241,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["apipaginatedresponse(dbcontribution",{"_index":3592,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["apipaginatedresponse(dbemoji",{"_index":2452,"title":{},"body":{"controllers/EmojiController.html":{}}}],["apipaginatedresponse(dbendorsement",{"_index":2531,"title":{},"body":{"controllers/EndorsementController.html":{},"controllers/UserEndorsementController.html":{}}}],["apipaginatedresponse(dbinsight",{"_index":4905,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["apipaginatedresponse(dbinsightmember",{"_index":4865,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["apipaginatedresponse(dbpullrequest",{"_index":3308,"title":{},"body":{"controllers/PullRequestController.html":{},"controllers/UserController.html":{}}}],["apipaginatedresponse(dbpullrequestcontributor",{"_index":1240,"title":{},"body":{"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{}}}],["apipaginatedresponse(dbpullrequestgithubevents",{"_index":4512,"title":{},"body":{"controllers/UserController.html":{}}}],["apipaginatedresponse(dbrepo",{"_index":3626,"title":{},"body":{"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserController.html":{},"controllers/UserRecommendationController.html":{}}}],["apipaginatedresponse(dbuser",{"_index":5041,"title":{},"body":{"controllers/UserListController.html":{}}}],["apipaginatedresponse(dbusercollaboration",{"_index":4412,"title":{},"body":{"controllers/UserCollaborationController.html":{}}}],["apipaginatedresponse(dbuserhighlight",{"_index":2833,"title":{},"body":{"controllers/HighlightController.html":{},"controllers/UserController.html":{},"controllers/UserListController.html":{}}}],["apipaginatedresponse(dbuserhighlightrepo",{"_index":2845,"title":{},"body":{"controllers/HighlightController.html":{},"controllers/UserListController.html":{}}}],["apipaginatedresponse(dbuserlistcontributor",{"_index":5046,"title":{},"body":{"controllers/UserListController.html":{}}}],["apipaginatedresponse(dbuserlistcontributorstat",{"_index":5205,"title":{},"body":{"controllers/UserListStatsController.html":{}}}],["apipaginatedresponse(dbuserorganization",{"_index":4520,"title":{},"body":{"controllers/UserController.html":{}}}],["apiparam",{"_index":2824,"title":{},"body":{"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"controllers/PizzaOvenController.html":{},"controllers/PullRequestController.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"controllers/UserListStatsController.html":{}}}],["apiproperty",{"_index":533,"title":{},"body":{"classes/ApplyUserCouponDto.html":{},"classes/BakeRepoDto.html":{},"classes/CollaboratorsDto.html":{},"classes/CommitAuthorDto.html":{},"classes/CommitsDto.html":{},"classes/ContributionPageMetaDto.html":{},"classes/ContributionsPageDto.html":{},"classes/Contributor.html":{},"classes/CreateBlogSummaryDto.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateInsightDto.html":{},"classes/CreateInsightMemberDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/CreateUserCollaborationDto.html":{},"classes/CreateUserHighlightDto.html":{},"classes/CreateUserListDto.html":{},"classes/FilteredUsersDto.html":{},"classes/FollowManyUsersDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"classes/RepoInfo.html":{},"classes/SupabaseAuthDto.html":{},"classes/TopProjectsDto.html":{},"classes/UpdateInsightMemberDto.html":{},"classes/UpdateUserCollaborationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"classes/UserOnboardingDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"classes/VotedRepoDto.html":{}}}],["apiproperty({description",{"_index":527,"title":{},"body":{"classes/ApplyUserCouponDto.html":{},"classes/BakeRepoDto.html":{},"classes/CollaboratorsDto.html":{},"classes/CommitAuthorDto.html":{},"classes/CommitsDto.html":{},"classes/ContributionPageMetaDto.html":{},"classes/CreateBlogSummaryDto.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateInsightDto.html":{},"classes/CreateInsightMemberDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/CreateUserCollaborationDto.html":{},"classes/CreateUserHighlightDto.html":{},"classes/CreateUserListDto.html":{},"classes/FilteredUsersDto.html":{},"classes/FollowManyUsersDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"classes/PageMetaDto.html":{},"classes/RepoInfo.html":{},"classes/SupabaseAuthDto.html":{},"classes/TopProjectsDto.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateInsightMemberDto.html":{},"classes/UpdateUserCollaborationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"classes/UserOnboardingDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"classes/VotedRepoDto.html":{}}}],["apiproperty({type",{"_index":1194,"title":{},"body":{"classes/ContributionsPageDto.html":{},"classes/PageDto.html":{}}}],["apipropertyoptional",{"_index":1117,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/ContributionsByProjectDto.html":{},"classes/ContributionsTimeframeDto.html":{},"classes/ContributorPullRequestsDto.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateUserHighlightDto.html":{},"classes/DbUserHighlightReactionResponse.html":{},"classes/FilterListContributorsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/FilteredUsersDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/SupabaseAuthDto.html":{},"classes/TopProjectsDto.html":{},"classes/TopUsersDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserListMostActiveContributorsDto.html":{}}}],["apipropertyoptional()@isstring()@isoptional",{"_index":2677,"title":{},"body":{"classes/FilterOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{}}}],["apipropertyoptional({description",{"_index":1109,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/ContributionsByProjectDto.html":{},"classes/ContributionsTimeframeDto.html":{},"classes/ContributorPullRequestsDto.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateUserHighlightDto.html":{},"classes/DbUserHighlightReactionResponse.html":{},"classes/FilterOptionsDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/SupabaseAuthDto.html":{},"classes/TopProjectsDto.html":{},"classes/TopUsersDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserListMostActiveContributorsDto.html":{},"classes/UserRepoOptionsDto.html":{}}}],["apipropertyoptional({enum",{"_index":1093,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/ContributionsTimeframeDto.html":{},"classes/ContributorPullRequestsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/UserListMostActiveContributorsDto.html":{},"classes/UserRepoOptionsDto.html":{}}}],["apipropertyoptional({isarray",{"_index":2640,"title":{},"body":{"classes/FilterListContributorsDto.html":{}}}],["apipropertyoptional({minimum",{"_index":1099,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/ContributorPullRequestsDto.html":{},"classes/FilterListContributorsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/FilteredUsersDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/TopUsersDto.html":{},"classes/UserListMostActiveContributorsDto.html":{},"classes/UserRepoOptionsDto.html":{}}}],["apipropertyoptional({type",{"_index":2635,"title":{},"body":{"classes/FilterListContributorsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{}}}],["apiquery",{"_index":3586,"title":{},"body":{"controllers/RepoContributionsController.html":{},"controllers/UserListStatsController.html":{}}}],["apiservicesmodule",{"_index":241,"title":{"modules/ApiServicesModule.html":{}},"body":{"modules/ApiServicesModule.html":{},"modules/EndorsementModule.html":{},"modules/InsightsModule.html":{},"modules/PizzaOvenModule.html":{},"modules/UserListModule.html":{},"modules/UserModule.html":{},"modules/UserReposModule.html":{},"modules.html":{},"overview.html":{}}}],["apitags",{"_index":630,"title":{},"body":{"controllers/AuthController.html":{},"controllers/BlogSummaryController.html":{},"controllers/CodeExplanationController.html":{},"controllers/CodeRefactorSuggestionController.html":{},"controllers/CodeTestSuggestionController.html":{},"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"controllers/EmojiController.html":{},"controllers/EndorsementController.html":{},"controllers/HealthController.html":{},"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"controllers/IssueSummaryController.html":{},"controllers/PizzaOvenController.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/StripeWebhookController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"controllers/UserFollowingController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"controllers/UserListStatsController.html":{},"controllers/UserNotificationController.html":{},"controllers/UserRecommendationController.html":{}}}],["apitags(\"authentication",{"_index":655,"title":{},"body":{"controllers/AuthController.html":{}}}],["apitags(\"blog",{"_index":797,"title":{},"body":{"controllers/BlogSummaryController.html":{}}}],["apitags(\"contributors",{"_index":1238,"title":{},"body":{"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{}}}],["apitags(\"emojis",{"_index":2451,"title":{},"body":{"controllers/EmojiController.html":{}}}],["apitags(\"endorsements",{"_index":2525,"title":{},"body":{"controllers/EndorsementController.html":{},"controllers/UserEndorsementController.html":{}}}],["apitags(\"health",{"_index":2748,"title":{},"body":{"controllers/HealthController.html":{}}}],["apitags(\"highlights",{"_index":2831,"title":{},"body":{"controllers/HighlightController.html":{}}}],["apitags(\"insights",{"_index":2919,"title":{},"body":{"controllers/InsightController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["apitags(\"issue",{"_index":3084,"title":{},"body":{"controllers/IssueSummaryController.html":{}}}],["apitags(\"pizza",{"_index":3217,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["apitags(\"pull",{"_index":910,"title":{},"body":{"controllers/CodeExplanationController.html":{},"controllers/CodeRefactorSuggestionController.html":{},"controllers/CodeTestSuggestionController.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{}}}],["apitags(\"repository",{"_index":3590,"title":{},"body":{"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{}}}],["apitags(\"stripe",{"_index":4105,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["apitags(\"user",{"_index":4411,"title":{},"body":{"controllers/UserCollaborationController.html":{},"controllers/UserController.html":{},"controllers/UserFollowingController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserListController.html":{},"controllers/UserListStatsController.html":{},"controllers/UserNotificationController.html":{},"controllers/UserRecommendationController.html":{}}}],["apitoken",{"_index":2622,"title":{},"body":{"guards/EndorsementTokenGuard.html":{}}}],["apiunauthorizedresponse",{"_index":2910,"title":{},"body":{"controllers/InsightController.html":{}}}],["apiunprocessableentityresponse",{"_index":4861,"title":{},"body":{"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["apiversion",{"_index":4043,"title":{},"body":{"injectables/StripeService.html":{}}}],["app",{"_index":5540,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["app.close",{"_index":5885,"title":{},"body":{"miscellaneous/variables.html":{}}}],["app.enablecors",{"_index":5848,"title":{},"body":{"miscellaneous/variables.html":{}}}],["app.enableversioning",{"_index":5849,"title":{},"body":{"miscellaneous/variables.html":{}}}],["app.flushlogs",{"_index":5847,"title":{},"body":{"miscellaneous/variables.html":{}}}],["app.uselogger(app.get(logger",{"_index":5846,"title":{},"body":{"miscellaneous/variables.html":{}}}],["application",{"_index":5536,"title":{},"body":{"index.html":{}}}],["application/json",{"_index":877,"title":{},"body":{"interfaces/ChatResponse.html":{},"injectables/OpenAiService.html":{}}}],["applies",{"_index":557,"title":{},"body":{"controllers/AuthController.html":{},"injectables/RepoFilterService.html":{}}}],["apply",{"_index":562,"title":{},"body":{"controllers/AuthController.html":{},"index.html":{}}}],["applyactivecontributorsfilter",{"_index":225,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["applyactivecontributorsfilter(querybuilder",{"_index":5220,"title":{},"body":{"injectables/UserListStatsService.html":{}}}],["applyalumnicontributorsfilter",{"_index":237,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["applyalumnicontributorsfilter(querybuilder",{"_index":5222,"title":{},"body":{"injectables/UserListStatsService.html":{}}}],["applycouponforuser",{"_index":545,"title":{},"body":{"controllers/AuthController.html":{}}}],["applycouponforuser(@userid",{"_index":732,"title":{},"body":{"controllers/AuthController.html":{}}}],["applycouponforuser(userid",{"_index":554,"title":{},"body":{"controllers/AuthController.html":{}}}],["applydecorators",{"_index":5779,"title":{},"body":{"miscellaneous/variables.html":{}}}],["applynewcontributorsfilter",{"_index":236,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["applynewcontributorsfilter(querybuilder",{"_index":5224,"title":{},"body":{"injectables/UserListStatsService.html":{}}}],["applypagination",{"_index":3156,"title":{},"body":{"injectables/PagerService.html":{},"interfaces/PaginationInput.html":{}}}],["applypagination(undefined",{"_index":3157,"title":{},"body":{"injectables/PagerService.html":{}}}],["applyquerybuilderfilters",{"_index":3637,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["applyquerybuilderfilters(qb",{"_index":3639,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["applyusercoupondto",{"_index":521,"title":{"classes/ApplyUserCouponDto.html":{}},"body":{"classes/ApplyUserCouponDto.html":{},"controllers/AuthController.html":{}}}],["applyusercoupondto.couponcode",{"_index":736,"title":{},"body":{"controllers/AuthController.html":{}}}],["appmodule",{"_index":256,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["approved",{"_index":2082,"title":{},"body":{"entities/DbPullRequestReview.html":{},"entities/DbRepoToUserSubmissions.html":{}}}],["approved'})@column('text",{"_index":2078,"title":{},"body":{"entities/DbPullRequestReview.html":{}}}],["apt",{"_index":3093,"title":{},"body":{"injectables/IssueSummaryService.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["arg",{"_index":1991,"title":{},"body":{"entities/DbPullRequest.html":{},"entities/DbPullRequestGitHubEvents.html":{}}}],["arising",{"_index":5690,"title":{},"body":{"license.html":{}}}],["array",{"_index":972,"title":{},"body":{"classes/CollaboratorsDto.html":{},"classes/ContributionsPageDto.html":{},"classes/Contributor.html":{},"classes/CreateInsightDto.html":{},"classes/CreateUserHighlightDto.html":{},"classes/CreateUserListDto.html":{},"entities/DbUserHighlight.html":{},"classes/FollowManyUsersDto.html":{},"classes/PageDto.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"classes/UserOnboardingDto.html":{},"miscellaneous/variables.html":{}}}],["array(value",{"_index":2662,"title":{},"body":{"classes/FilterListContributorsDto.html":{}}}],["array.isarray(createinsightdto.repos",{"_index":4909,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["array.isarray(value",{"_index":2661,"title":{},"body":{"classes/FilterListContributorsDto.html":{}}}],["asc",{"_index":2469,"title":{},"body":{"injectables/EmojiService.html":{},"injectables/InsightMemberService.html":{},"miscellaneous/enumerations.html":{}}}],["assets",{"_index":5610,"title":{},"body":{"index.html":{}}}],["assignee",{"_index":1925,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["assignee_avatar",{"_index":1902,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["assignee_login",{"_index":1903,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["associated",{"_index":1701,"title":{},"body":{"entities/DbContributionStatTimeframe.html":{},"entities/DbContributionsProjects.html":{},"entities/DbRepoLoginContributions.html":{},"entities/DbUserListContributorStat.html":{},"entities/DbUserListContributorStat-1.html":{},"license.html":{}}}],["async",{"_index":72,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"controllers/AuthController.html":{},"controllers/BlogSummaryController.html":{},"injectables/BlogSummaryService.html":{},"interfaces/ChatResponse.html":{},"controllers/CodeExplanationController.html":{},"injectables/CodeExplanationService.html":{},"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"controllers/CodeTestSuggestionController.html":{},"injectables/CodeTestSuggestionService.html":{},"injectables/CommitAuthorsService.html":{},"injectables/CommitsService.html":{},"injectables/ContributionService.html":{},"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"injectables/CouponService.html":{},"injectables/CustomLogger.html":{},"injectables/CustomerService.html":{},"controllers/EmojiController.html":{},"injectables/EmojiService.html":{},"controllers/EndorsementController.html":{},"injectables/EndorsementService.html":{},"controllers/HealthController.html":{},"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"controllers/IssueSummaryController.html":{},"injectables/IssueSummaryService.html":{},"injectables/LogService.html":{},"injectables/OpenAiService.html":{},"injectables/PagerService.html":{},"interfaces/PaginationInput.html":{},"controllers/PizzaOvenController.html":{},"injectables/PizzaOvenService.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestGithubEventsService.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestReviewService.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeService.html":{},"injectables/StripeSubscriptionService.html":{},"controllers/StripeWebhookController.html":{},"injectables/SubmitService.html":{},"injectables/SupabaseStrategy.html":{},"injectables/TierService.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowingController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"injectables/UserListService.html":{},"controllers/UserListStatsController.html":{},"injectables/UserListStatsService.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"injectables/UserOrganizationService.html":{},"controllers/UserRecommendationController.html":{},"injectables/UserReposService.html":{},"injectables/VoteService.html":{},"miscellaneous/variables.html":{}}}],["auth",{"_index":544,"title":{},"body":{"controllers/AuthController.html":{},"classes/SupabaseAuthDto.html":{},"injectables/SupabaseStrategy.html":{},"controllers/UserCollaborationController.html":{},"miscellaneous/variables.html":{}}}],["auth.controller",{"_index":750,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth/auth.module",{"_index":354,"title":{},"body":{"modules/AppModule.html":{},"modules/EndorsementModule.html":{}}}],["auth/supabase.guard",{"_index":790,"title":{},"body":{"controllers/BlogSummaryController.html":{},"controllers/CodeExplanationController.html":{},"controllers/CodeRefactorSuggestionController.html":{},"controllers/CodeTestSuggestionController.html":{},"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"controllers/IssueSummaryController.html":{},"controllers/PullRequestDescriptionController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserEndorsementController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"controllers/UserNotificationController.html":{},"controllers/UserRecommendationController.html":{}}}],["auth/supabase.user.decorator",{"_index":2825,"title":{},"body":{"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserEndorsementController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"controllers/UserNotificationController.html":{},"controllers/UserRecommendationController.html":{}}}],["authcontroller",{"_index":540,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["authenticate",{"_index":4244,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["authenticate(req",{"_index":4247,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["authenticated",{"_index":558,"title":{},"body":{"controllers/AuthController.html":{},"controllers/InsightController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"classes/SupabaseAuthDto.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserEndorsementController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"controllers/UserNotificationController.html":{},"controllers/UserRecommendationController.html":{}}}],["authentication",{"_index":5996,"title":{},"body":{"miscellaneous/variables.html":{}}}],["authguard",{"_index":4241,"title":{},"body":{"injectables/SupabaseGuard.html":{}}}],["authguard(\"supabase",{"_index":4242,"title":{},"body":{"injectables/SupabaseGuard.html":{}}}],["authmodule",{"_index":259,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/EndorsementModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":985,"title":{},"body":{"classes/CommitAuthorDto.html":{},"entities/DbCommitAuthors.html":{},"entities/DbCommits.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbPullRequestGitHubEvents.html":{},"controllers/PizzaOvenController.html":{},"injectables/PullRequestGithubEventsService.html":{},"properties.html":{}}}],["author.tolowercase",{"_index":3377,"title":{},"body":{"injectables/PullRequestGithubEventsService.html":{}}}],["author/:id",{"_index":3244,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["author/:id')@apioperation({operationid",{"_index":3203,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["author_avatar",{"_index":1904,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["author_email",{"_index":983,"title":{},"body":{"classes/CommitAuthorDto.html":{}}}],["author_login",{"_index":228,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"injectables/PullRequestService.html":{},"injectables/UserListStatsService.html":{}}}],["authorization",{"_index":874,"title":{},"body":{"interfaces/ChatResponse.html":{},"injectables/OpenAiService.html":{}}}],["authorized",{"_index":2899,"title":{},"body":{"controllers/InsightController.html":{},"injectables/UserListService.html":{}}}],["authors",{"_index":3193,"title":{},"body":{"controllers/PizzaOvenController.html":{},"license.html":{}}}],["authors.service",{"_index":3214,"title":{},"body":{"controllers/PizzaOvenController.html":{},"modules/PizzaOvenModule.html":{}}}],["authors.service.ts",{"_index":991,"title":{},"body":{"injectables/CommitAuthorsService.html":{}}}],["authors.service.ts:11",{"_index":995,"title":{},"body":{"injectables/CommitAuthorsService.html":{}}}],["authors.service.ts:18",{"_index":997,"title":{},"body":{"injectables/CommitAuthorsService.html":{}}}],["authors.service.ts:24",{"_index":999,"title":{},"body":{"injectables/CommitAuthorsService.html":{}}}],["authors.service.ts:35",{"_index":1001,"title":{},"body":{"injectables/CommitAuthorsService.html":{}}}],["authors/:id",{"_index":3229,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["authors/:id')@apioperation({operationid",{"_index":3181,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["authors/list",{"_index":3233,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["authors/list')@apioperation({operationid",{"_index":3192,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["authuser${relation",{"_index":3766,"title":{},"body":{"injectables/RepoService.html":{}}}],["authuser${relation}.user_id",{"_index":3767,"title":{},"body":{"injectables/RepoService.html":{}}}],["autoloadentities",{"_index":459,"title":{},"body":{"modules/AppModule.html":{}}}],["available",{"_index":5697,"title":{},"body":{"modules.html":{},"miscellaneous/variables.html":{}}}],["avatar",{"_index":1926,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["average",{"_index":2647,"title":{},"body":{"classes/FilterListContributorsDto.html":{}}}],["avg_merge_time",{"_index":5152,"title":{},"body":{"injectables/UserListService.html":{}}}],["await",{"_index":122,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"controllers/AuthController.html":{},"controllers/BlogSummaryController.html":{},"interfaces/ChatResponse.html":{},"controllers/CodeExplanationController.html":{},"injectables/CodeExplanationService.html":{},"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"controllers/CodeTestSuggestionController.html":{},"injectables/CommitAuthorsService.html":{},"injectables/CommitsService.html":{},"injectables/ContributionService.html":{},"injectables/CouponService.html":{},"injectables/EmojiService.html":{},"controllers/EndorsementController.html":{},"injectables/EndorsementService.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"controllers/IssueSummaryController.html":{},"injectables/LogService.html":{},"injectables/OpenAiService.html":{},"injectables/PagerService.html":{},"interfaces/PaginationInput.html":{},"controllers/PizzaOvenController.html":{},"injectables/PizzaOvenService.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestGithubEventsService.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeService.html":{},"controllers/StripeWebhookController.html":{},"injectables/SubmitService.html":{},"injectables/TierService.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowingController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"injectables/UserListService.html":{},"injectables/UserListStatsService.html":{},"injectables/UserNotificationService.html":{},"injectables/UserOrganizationService.html":{},"controllers/UserRecommendationController.html":{},"injectables/UserReposService.html":{},"injectables/VoteService.html":{},"miscellaneous/variables.html":{}}}],["aws:main",{"_index":2004,"title":{},"body":{"entities/DbPullRequest.html":{},"entities/DbPullRequestGitHubEvents.html":{}}}],["aws:main'})@column({type",{"_index":1988,"title":{},"body":{"entities/DbPullRequest.html":{},"entities/DbPullRequestGitHubEvents.html":{}}}],["back",{"_index":1894,"title":{},"body":{"entities/DbPRInsight.html":{},"controllers/RepoContributionsController.html":{}}}],["backend",{"_index":5708,"title":{},"body":{"properties.html":{}}}],["badrequestexception",{"_index":788,"title":{},"body":{"controllers/BlogSummaryController.html":{},"controllers/CodeExplanationController.html":{},"controllers/CodeRefactorSuggestionController.html":{},"controllers/CodeTestSuggestionController.html":{},"controllers/IssueSummaryController.html":{},"controllers/PizzaOvenController.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestService.html":{},"controllers/StripeWebhookController.html":{},"controllers/UserInsightsController.html":{}}}],["bake",{"_index":3007,"title":{},"body":{"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"controllers/PizzaOvenController.html":{}}}],["baked",{"_index":1596,"title":{},"body":{"entities/DbBakedRepo.html":{},"entities/DbCommits.html":{},"controllers/PizzaOvenController.html":{}}}],["baked_repo",{"_index":1625,"title":{},"body":{"entities/DbCommits.html":{}}}],["baked_repo.commits",{"_index":1649,"title":{},"body":{"entities/DbCommits.html":{}}}],["baked_repo.commits)@joincolumn({name",{"_index":1631,"title":{},"body":{"entities/DbCommits.html":{}}}],["baked_repo_id",{"_index":1626,"title":{},"body":{"entities/DbCommits.html":{}}}],["baked_repos",{"_index":1612,"title":{},"body":{"entities/DbBakedRepo.html":{}}}],["bakedreporepository",{"_index":3258,"title":{},"body":{"injectables/PizzaOvenService.html":{}}}],["bakeoptionsinfo",{"_index":3210,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["bakerepodto",{"_index":752,"title":{"classes/BakeRepoDto.html":{}},"body":{"classes/BakeRepoDto.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"controllers/PizzaOvenController.html":{},"injectables/PizzaOvenService.html":{}}}],["bakerepoinfo",{"_index":3009,"title":{},"body":{"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"injectables/PizzaOvenService.html":{}}}],["bakerepoinfo.url",{"_index":3015,"title":{},"body":{"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"injectables/PizzaOvenService.html":{}}}],["bakerepoinfo.wait",{"_index":3270,"title":{},"body":{"injectables/PizzaOvenService.html":{}}}],["baking",{"_index":765,"title":{},"body":{"classes/BakeRepoDto.html":{}}}],["base",{"_index":5934,"title":{},"body":{"miscellaneous/variables.html":{}}}],["based",{"_index":932,"title":{},"body":{"controllers/CodeRefactorSuggestionController.html":{},"controllers/ContributorInsightsController.html":{},"controllers/EndorsementController.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestGithubEventsService.html":{},"injectables/RepoFilterService.html":{},"controllers/UserRecommendationController.html":{}}}],["baseentity",{"_index":1603,"title":{},"body":{"entities/DbBakedRepo.html":{},"entities/DbCommitAuthors.html":{},"entities/DbCommits.html":{},"entities/DbContribution.html":{},"entities/DbCoupon.html":{},"entities/DbCustomer.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbPullRequestGitHubEvents.html":{},"entities/DbPullRequestReview.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserList.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{}}}],["basefilterquerybuilder",{"_index":3697,"title":{},"body":{"injectables/RepoService.html":{}}}],["basefilterquerybuilder(startdate",{"_index":3705,"title":{},"body":{"injectables/RepoService.html":{}}}],["baselistcontributorquerybuilder",{"_index":5082,"title":{},"body":{"injectables/UserListService.html":{}}}],["basequerybuilder",{"_index":67,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/CommitAuthorsService.html":{},"injectables/CommitsService.html":{},"injectables/CouponService.html":{},"injectables/CustomerService.html":{},"injectables/EmojiService.html":{},"injectables/EndorsementService.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightsService.html":{},"injectables/PizzaOvenService.html":{},"injectables/PullRequestGithubEventsService.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoService.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeSubscriptionService.html":{},"injectables/SubmitService.html":{},"injectables/UserCollaborationService.html":{},"injectables/UserFollowService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserListService.html":{},"injectables/UserListStatsService.html":{},"injectables/UserNotificationService.html":{},"injectables/UserOrganizationService.html":{},"injectables/UserReposService.html":{},"injectables/VoteService.html":{}}}],["baseuserquerybuilder",{"_index":5083,"title":{},"body":{"injectables/UserListService.html":{}}}],["bdougie",{"_index":1436,"title":{},"body":{"classes/CreateUserCollaborationDto.html":{},"classes/DbFilteredUser.html":{},"entities/DbPullRequest.html":{},"entities/DbPullRequestReview.html":{},"entities/DbRepoLoginContributions.html":{},"classes/DbTopUser.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserListContributorStat.html":{},"entities/DbUserListContributorStat-1.html":{},"entities/DbUserNotification.html":{},"classes/FilterListContributorsDto.html":{},"classes/FollowManyUsersDto.html":{},"classes/PullRequestPageOptionsDto.html":{}}}],["bdougie'})@column('text",{"_index":1972,"title":{},"body":{"entities/DbPullRequest.html":{},"entities/DbPullRequestReview.html":{}}}],["bdougie'})@column({type",{"_index":2089,"title":{},"body":{"entities/DbRepoLoginContributions.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserListContributorStat.html":{},"entities/DbUserListContributorStat-1.html":{}}}],["bdougie'})@isstring",{"_index":1433,"title":{},"body":{"classes/CreateUserCollaborationDto.html":{}}}],["bdougie'})@isstring()@isoptional",{"_index":2636,"title":{},"body":{"classes/FilterListContributorsDto.html":{},"classes/PullRequestPageOptionsDto.html":{}}}],["bearer",{"_index":875,"title":{},"body":{"interfaces/ChatResponse.html":{},"injectables/OpenAiService.html":{},"miscellaneous/variables.html":{}}}],["before",{"_index":5457,"title":{},"body":{"index.html":{}}}],["being",{"_index":5548,"title":{},"body":{"index.html":{}}}],["belongs",{"_index":5159,"title":{},"body":{"injectables/UserListService.html":{}}}],["below",{"_index":827,"title":{},"body":{"injectables/BlogSummaryService.html":{},"injectables/CodeExplanationService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"injectables/IssueSummaryService.html":{},"injectables/PullRequestDescriptionService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["beneficial",{"_index":5549,"title":{},"body":{"index.html":{}}}],["beta",{"_index":5857,"title":{},"body":{"miscellaneous/variables.html":{}}}],["beta.api.opensauced.pizza",{"_index":5443,"title":{},"body":{"index.html":{}}}],["between",{"_index":221,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["bigint",{"_index":1636,"title":{},"body":{"entities/DbCommits.html":{},"entities/DbContribution.html":{},"entities/DbContributionStatTimeframe.html":{},"entities/DbContributionsProjects.html":{},"entities/DbContributorCategoryTimeframe.html":{},"entities/DbInsight.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbPullRequestGitHubEvents.html":{},"entities/DbRepoLoginContributions.html":{},"entities/DbSubscription.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributorStat.html":{},"entities/DbUserListContributorStat-1.html":{},"entities/DbUserNotification.html":{}}}],["billing_address_collection",{"_index":4049,"title":{},"body":{"injectables/StripeService.html":{}}}],["binaries",{"_index":5448,"title":{},"body":{"index.html":{}}}],["bio",{"_index":681,"title":{},"body":{"controllers/AuthController.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{}}}],["bits",{"_index":5596,"title":{},"body":{"index.html":{}}}],["block",{"_index":1111,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/ContributorPullRequestsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/UserListMostActiveContributorsDto.html":{},"classes/UserRepoOptionsDto.html":{}}}],["blocks",{"_index":3412,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["blog",{"_index":792,"title":{},"body":{"controllers/BlogSummaryController.html":{},"modules/BlogSummaryModule.html":{},"injectables/BlogSummaryService.html":{},"classes/CreateBlogSummaryDto.html":{}}}],["blog'})@apibearerauth()@useguards(supabaseguard)@apibadrequestresponse({description",{"_index":782,"title":{},"body":{"controllers/BlogSummaryController.html":{}}}],["blog_post",{"_index":1462,"title":{},"body":{"classes/CreateUserHighlightDto.html":{}}}],["blogmarkdown",{"_index":1323,"title":{},"body":{"classes/CreateBlogSummaryDto.html":{}}}],["blogs",{"_index":773,"title":{},"body":{"controllers/BlogSummaryController.html":{}}}],["blogs/issue",{"_index":426,"title":{},"body":{"modules/AppModule.html":{}}}],["blogsummarycontroller",{"_index":770,"title":{"controllers/BlogSummaryController.html":{}},"body":{"controllers/BlogSummaryController.html":{},"modules/BlogSummaryModule.html":{}}}],["blogsummarymodule",{"_index":260,"title":{"modules/BlogSummaryModule.html":{}},"body":{"modules/AppModule.html":{},"modules/BlogSummaryModule.html":{},"modules.html":{},"overview.html":{}}}],["blogsummaryservice",{"_index":794,"title":{"injectables/BlogSummaryService.html":{}},"body":{"controllers/BlogSummaryController.html":{},"modules/BlogSummaryModule.html":{},"injectables/BlogSummaryService.html":{},"overview.html":{}}}],["blogtitle",{"_index":1324,"title":{},"body":{"classes/CreateBlogSummaryDto.html":{}}}],["body",{"_index":591,"title":{},"body":{"controllers/AuthController.html":{},"controllers/BlogSummaryController.html":{},"interfaces/ChatResponse.html":{},"controllers/CodeExplanationController.html":{},"controllers/CodeRefactorSuggestionController.html":{},"controllers/CodeTestSuggestionController.html":{},"controllers/EndorsementController.html":{},"controllers/IssueSummaryController.html":{},"injectables/OpenAiService.html":{},"controllers/PizzaOvenController.html":{},"controllers/PullRequestDescriptionController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{}}}],["body.interests",{"_index":705,"title":{},"body":{"controllers/AuthController.html":{}}}],["body.timezone",{"_index":704,"title":{},"body":{"controllers/AuthController.html":{}}}],["boolean",{"_index":761,"title":{},"body":{"classes/BakeRepoDto.html":{},"classes/ContributionPageMetaDto.html":{},"classes/Contributor.html":{},"classes/CreateInsightDto.html":{},"classes/CreateUserListDto.html":{},"entities/DbInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbPullRequestGitHubEvents.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbSubscription.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserList.html":{},"guards/EndorsementTokenGuard.html":{},"classes/PageMetaDto.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"classes/VotedRepoDto.html":{}}}],["bootstrap",{"_index":5434,"title":{},"body":{"miscellaneous/functions.html":{}}}],["boxes",{"_index":2729,"title":{},"body":{"classes/GeneratePullRequestDescriptionDto.html":{}}}],["branch",{"_index":1675,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbPullRequest.html":{},"entities/DbPullRequestGitHubEvents.html":{},"index.html":{}}}],["brandonroberts",{"_index":2696,"title":{},"body":{"classes/FollowManyUsersDto.html":{}}}],["break",{"_index":110,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoService.html":{},"injectables/UserListStatsService.html":{},"index.html":{}}}],["brian",{"_index":1791,"title":{},"body":{"classes/DbFilteredUser.html":{},"entities/DbInsightMember.html":{},"entities/DbUserHighlight.html":{}}}],["browse",{"_index":5695,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":5692,"title":{},"body":{"modules.html":{}}}],["bufferlogs",{"_index":5841,"title":{},"body":{"miscellaneous/variables.html":{}}}],["bug",{"_index":2724,"title":{},"body":{"classes/GeneratePullRequestDescriptionDto.html":{}}}],["bugs",{"_index":5717,"title":{},"body":{"properties.html":{}}}],["build",{"_index":5508,"title":{},"body":{"index.html":{}}}],["builder",{"_index":69,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/CommitAuthorsService.html":{},"injectables/CommitsService.html":{},"injectables/CouponService.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightsService.html":{},"injectables/PizzaOvenService.html":{},"injectables/PullRequestGithubEventsService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoService.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/SubmitService.html":{},"injectables/UserCollaborationService.html":{},"injectables/UserFollowService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserListService.html":{},"injectables/UserListStatsService.html":{},"injectables/UserNotificationService.html":{},"injectables/UserOrganizationService.html":{},"injectables/UserReposService.html":{},"injectables/VoteService.html":{}}}],["builder/selectquerybuilder",{"_index":3161,"title":{},"body":{"injectables/PagerService.html":{},"interfaces/PaginationInput.html":{}}}],["builds",{"_index":5571,"title":{},"body":{"index.html":{}}}],["bulkfollow",{"_index":4614,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["business",{"_index":5558,"title":{},"body":{"index.html":{}}}],["c",{"_index":5643,"title":{},"body":{"license.html":{}}}],["ca",{"_index":465,"title":{},"body":{"modules/AppModule.html":{},"classes/SupabaseAuthDto.html":{}}}],["call",{"_index":5966,"title":{},"body":{"miscellaneous/variables.html":{}}}],["canaccess",{"_index":4867,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["canactivate",{"_index":2616,"title":{},"body":{"guards/EndorsementTokenGuard.html":{}}}],["canactivate(host",{"_index":2619,"title":{},"body":{"guards/EndorsementTokenGuard.html":{}}}],["cancel",{"_index":2173,"title":{},"body":{"entities/DbSubscription.html":{}}}],["cancel_at",{"_index":2161,"title":{},"body":{"entities/DbSubscription.html":{},"controllers/StripeWebhookController.html":{}}}],["cancel_at_period_end",{"_index":2162,"title":{},"body":{"entities/DbSubscription.html":{},"controllers/StripeWebhookController.html":{}}}],["cancel_url",{"_index":4056,"title":{},"body":{"injectables/StripeService.html":{}}}],["canceled",{"_index":2177,"title":{},"body":{"entities/DbSubscription.html":{}}}],["canceled_at",{"_index":2163,"title":{},"body":{"entities/DbSubscription.html":{},"controllers/StripeWebhookController.html":{}}}],["canupdate",{"_index":4872,"title":{},"body":{"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["canusermanageinsight",{"_index":2933,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["canusermanageinsight(userid",{"_index":2945,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["card",{"_index":4048,"title":{},"body":{"injectables/StripeService.html":{}}}],["cascade",{"_index":1829,"title":{},"body":{"entities/DbInsight.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserList.html":{}}}],["cascade'})@joincolumn({name",{"_index":1825,"title":{},"body":{"entities/DbInsight.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserList.html":{}}}],["case",{"_index":108,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoService.html":{},"injectables/UserListStatsService.html":{},"index.html":{}}}],["catch",{"_index":694,"title":{},"body":{"controllers/AuthController.html":{},"injectables/BlogSummaryService.html":{},"injectables/CodeExplanationService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"injectables/IssueSummaryService.html":{},"injectables/PullRequestDescriptionService.html":{},"controllers/StripeWebhookController.html":{},"injectables/TierService.html":{},"controllers/UserFollowsController.html":{},"controllers/UserInsightsController.html":{}}}],["category",{"_index":5185,"title":{},"body":{"controllers/UserListStatsController.html":{}}}],["certificate",{"_index":5800,"title":{},"body":{"miscellaneous/variables.html":{}}}],["certificates",{"_index":5491,"title":{},"body":{"index.html":{}}}],["certificates:for",{"_index":5487,"title":{},"body":{"index.html":{}}}],["changed",{"_index":1935,"title":{},"body":{"entities/DbPullRequest.html":{},"entities/DbPullRequestGitHubEvents.html":{}}}],["changed_files",{"_index":1905,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["changes",{"_index":5592,"title":{},"body":{"index.html":{}}}],["channel",{"_index":5633,"title":{},"body":{"index.html":{}}}],["character",{"_index":1589,"title":{},"body":{"entities/DbBakedRepo.html":{},"entities/DbCommitAuthors.html":{},"entities/DbCommits.html":{},"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserList.html":{},"entities/DbUserNotification.html":{}}}],["characters",{"_index":831,"title":{},"body":{"injectables/BlogSummaryService.html":{},"injectables/CodeExplanationService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"injectables/IssueSummaryService.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["charge",{"_index":5647,"title":{},"body":{"license.html":{}}}],["chatresponse",{"_index":856,"title":{"interfaces/ChatResponse.html":{}},"body":{"interfaces/ChatResponse.html":{},"injectables/OpenAiService.html":{}}}],["check",{"_index":514,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"controllers/HealthController.html":{},"injectables/TierService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["check/insert",{"_index":674,"title":{},"body":{"controllers/AuthController.html":{}}}],["checkaddorg",{"_index":4277,"title":{},"body":{"injectables/TierService.html":{}}}],["checkaddorg(userid",{"_index":4279,"title":{},"body":{"injectables/TierService.html":{}}}],["checkauthsession",{"_index":577,"title":{},"body":{"controllers/AuthController.html":{}}}],["checkin",{"_index":5605,"title":{},"body":{"index.html":{}}}],["checkout",{"_index":585,"title":{},"body":{"controllers/AuthController.html":{}}}],["checkout.session.completed",{"_index":4101,"title":{},"body":{"controllers/StripeWebhookController.html":{},"miscellaneous/variables.html":{}}}],["checkoutsession",{"_index":4159,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["checkoutsession.customer",{"_index":4164,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["checkoutsession.mode",{"_index":4161,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["checkoutsession.subscription",{"_index":4162,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["checkowner",{"_index":2948,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["checks",{"_index":4617,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["chinese",{"_index":1338,"title":{},"body":{"classes/CreateBlogSummaryDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{}}}],["choices",{"_index":859,"title":{},"body":{"interfaces/ChatResponse.html":{},"injectables/OpenAiService.html":{}}}],["chore",{"_index":2722,"title":{},"body":{"classes/GeneratePullRequestDescriptionDto.html":{}}}],["churned",{"_index":1255,"title":{},"body":{"controllers/ContributorInsightsController.html":{}}}],["cito",{"_index":5538,"title":{},"body":{"index.html":{}}}],["claim",{"_index":5683,"title":{},"body":{"license.html":{}}}],["class",{"_index":60,"title":{"classes/ApplyUserCouponDto.html":{},"classes/BakeRepoDto.html":{},"classes/CollaboratorsDto.html":{},"classes/CommitAuthorDto.html":{},"classes/CommitsDto.html":{},"classes/ContributionPageMetaDto.html":{},"classes/ContributionPageOptionsDto.html":{},"classes/ContributionsByProjectDto.html":{},"classes/ContributionsPageDto.html":{},"classes/ContributionsTimeframeDto.html":{},"classes/Contributor.html":{},"classes/ContributorPullRequestsDto.html":{},"classes/CreateBlogSummaryDto.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateInsightDto.html":{},"classes/CreateInsightMemberDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/CreateLogDto.html":{},"classes/CreateUserCollaborationDto.html":{},"classes/CreateUserHighlightDto.html":{},"classes/CreateUserListDto.html":{},"classes/DatabaseLoggerMiddleware.html":{},"classes/DbFilteredUser.html":{},"classes/DbPullRequestContributor.html":{},"classes/DbTimezone.html":{},"classes/DbTopUser.html":{},"classes/DbUserHighlightReactionResponse.html":{},"classes/DbUserHighlightRepo.html":{},"classes/FilterListContributorsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/FilteredUsersDto.html":{},"classes/FollowManyUsersDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoInfo.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/SupabaseAuthDto.html":{},"classes/TopProjectsDto.html":{},"classes/TopUsersDto.html":{},"classes/UpdateEndorsementDto.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateInsightMemberDto.html":{},"classes/UpdateUserCollaborationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"classes/UserListMostActiveContributorsDto.html":{},"classes/UserOnboardingDto.html":{},"classes/UserRepoOptionsDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"classes/VotedRepoDto.html":{}},"body":{"interfaces/AllContributionsCount.html":{},"modules/ApiServicesModule.html":{},"modules/AppModule.html":{},"classes/ApplyUserCouponDto.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"classes/BakeRepoDto.html":{},"controllers/BlogSummaryController.html":{},"modules/BlogSummaryModule.html":{},"injectables/BlogSummaryService.html":{},"interfaces/ChatResponse.html":{},"controllers/CodeExplanationController.html":{},"injectables/CodeExplanationService.html":{},"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"controllers/CodeTestSuggestionController.html":{},"injectables/CodeTestSuggestionService.html":{},"classes/CollaboratorsDto.html":{},"classes/CommitAuthorDto.html":{},"injectables/CommitAuthorsService.html":{},"classes/CommitsDto.html":{},"injectables/CommitsService.html":{},"modules/ContributionModule.html":{},"classes/ContributionPageMetaDto.html":{},"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"classes/ContributionsByProjectDto.html":{},"classes/ContributionsPageDto.html":{},"classes/ContributionsTimeframeDto.html":{},"classes/Contributor.html":{},"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"modules/ContributorModule.html":{},"classes/ContributorPullRequestsDto.html":{},"modules/CouponModule.html":{},"injectables/CouponService.html":{},"classes/CreateBlogSummaryDto.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateInsightDto.html":{},"classes/CreateInsightMemberDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/CreateLogDto.html":{},"classes/CreateUserCollaborationDto.html":{},"classes/CreateUserHighlightDto.html":{},"classes/CreateUserListDto.html":{},"injectables/CustomLogger.html":{},"modules/CustomerModule.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"entities/DbBakedRepo.html":{},"entities/DbCommitAuthors.html":{},"entities/DbCommits.html":{},"entities/DbContribution.html":{},"entities/DbContributionStatTimeframe.html":{},"entities/DbContributionsProjects.html":{},"entities/DbContributorCategoryTimeframe.html":{},"entities/DbCoupon.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"classes/DbFilteredUser.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbPullRequestGitHubEvents.html":{},"entities/DbPullRequestReview.html":{},"entities/DbRepoLoginContributions.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"classes/DbTimezone.html":{},"classes/DbTopUser.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightReactionResponse.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserListContributorStat.html":{},"entities/DbUserListContributorStat-1.html":{},"entities/DbUserNotification.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"controllers/EmojiController.html":{},"modules/EmojiModule.html":{},"injectables/EmojiService.html":{},"controllers/EndorsementController.html":{},"modules/EndorsementModule.html":{},"injectables/EndorsementService.html":{},"guards/EndorsementTokenGuard.html":{},"classes/FilterListContributorsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/FilteredUsersDto.html":{},"classes/FollowManyUsersDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"controllers/HighlightController.html":{},"modules/HighlightModule.html":{},"classes/HighlightOptionsDto.html":{},"injectables/HttpLoggerMiddleware.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"injectables/InsightRepoService.html":{},"modules/InsightsModule.html":{},"injectables/InsightsService.html":{},"controllers/IssueSummaryController.html":{},"modules/IssueSummaryModule.html":{},"injectables/IssueSummaryService.html":{},"modules/LogModule.html":{},"injectables/LogService.html":{},"modules/OpenAiModule.html":{},"injectables/OpenAiService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{},"injectables/PagerService.html":{},"interfaces/PaginationInput.html":{},"controllers/PizzaOvenController.html":{},"modules/PizzaOvenModule.html":{},"injectables/PizzaOvenService.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestGithubEventsService.html":{},"injectables/PullRequestInsightsService.html":{},"modules/PullRequestModule.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestReviewService.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"modules/RepoFilterModule.html":{},"injectables/RepoFilterService.html":{},"classes/RepoInfo.html":{},"modules/RepoModule.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"modules/StarModule.html":{},"injectables/StarService.html":{},"modules/StargazeModule.html":{},"injectables/StargazeService.html":{},"modules/StripeModule.html":{},"injectables/StripeService.html":{},"modules/StripeSubscriptionModule.html":{},"injectables/StripeSubscriptionService.html":{},"modules/StripeWebHookModule.html":{},"controllers/StripeWebhookController.html":{},"modules/SubmitModule.html":{},"injectables/SubmitService.html":{},"classes/SupabaseAuthDto.html":{},"injectables/SupabaseGuard.html":{},"injectables/SupabaseStrategy.html":{},"modules/TierModule.html":{},"injectables/TierService.html":{},"modules/TimescaleModule.html":{},"classes/TopProjectsDto.html":{},"classes/TopUsersDto.html":{},"classes/UpdateEndorsementDto.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateInsightMemberDto.html":{},"classes/UpdateUserCollaborationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowingController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"modules/UserListModule.html":{},"classes/UserListMostActiveContributorsDto.html":{},"injectables/UserListService.html":{},"controllers/UserListStatsController.html":{},"injectables/UserListStatsService.html":{},"modules/UserModule.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"classes/UserOnboardingDto.html":{},"injectables/UserOrganizationService.html":{},"controllers/UserRecommendationController.html":{},"classes/UserRepoOptionsDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"modules/UserReposModule.html":{},"injectables/UserReposService.html":{},"modules/VoteModule.html":{},"injectables/VoteService.html":{},"classes/VotedRepoDto.html":{}}}],["classes",{"_index":522,"title":{},"body":{"classes/ApplyUserCouponDto.html":{},"classes/BakeRepoDto.html":{},"classes/CollaboratorsDto.html":{},"classes/CommitAuthorDto.html":{},"classes/CommitsDto.html":{},"classes/ContributionPageMetaDto.html":{},"classes/ContributionPageOptionsDto.html":{},"classes/ContributionsByProjectDto.html":{},"classes/ContributionsPageDto.html":{},"classes/ContributionsTimeframeDto.html":{},"classes/Contributor.html":{},"classes/ContributorPullRequestsDto.html":{},"classes/CreateBlogSummaryDto.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateInsightDto.html":{},"classes/CreateInsightMemberDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/CreateLogDto.html":{},"classes/CreateUserCollaborationDto.html":{},"classes/CreateUserHighlightDto.html":{},"classes/CreateUserListDto.html":{},"classes/DatabaseLoggerMiddleware.html":{},"classes/DbFilteredUser.html":{},"classes/DbPullRequestContributor.html":{},"classes/DbTimezone.html":{},"classes/DbTopUser.html":{},"classes/DbUserHighlightReactionResponse.html":{},"classes/DbUserHighlightRepo.html":{},"classes/FilterListContributorsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/FilteredUsersDto.html":{},"classes/FollowManyUsersDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoInfo.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/SupabaseAuthDto.html":{},"classes/TopProjectsDto.html":{},"classes/TopUsersDto.html":{},"classes/UpdateEndorsementDto.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateInsightMemberDto.html":{},"classes/UpdateUserCollaborationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"classes/UserListMostActiveContributorsDto.html":{},"classes/UserOnboardingDto.html":{},"classes/UserRepoOptionsDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"classes/VotedRepoDto.html":{},"overview.html":{}}}],["clc",{"_index":317,"title":{},"body":{"modules/AppModule.html":{},"classes/DatabaseLoggerMiddleware.html":{},"injectables/HttpLoggerMiddleware.html":{}}}],["clc.green(`{msg",{"_index":504,"title":{},"body":{"modules/AppModule.html":{}}}],["clc.magentabright(message",{"_index":2883,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{}}}],["clc.red(`+${string(time)}ms",{"_index":1579,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["clc.red(message",{"_index":2880,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{}}}],["clc.yellow(`+${string(date.now",{"_index":5786,"title":{},"body":{"miscellaneous/variables.html":{}}}],["clc.yellow(`[{context",{"_index":503,"title":{},"body":{"modules/AppModule.html":{}}}],["cli_split_kwargs",{"_index":2006,"title":{},"body":{"entities/DbPullRequest.html":{},"entities/DbPullRequestGitHubEvents.html":{}}}],["cli_split_kwargs'})@column('text",{"_index":1986,"title":{},"body":{"entities/DbPullRequest.html":{},"entities/DbPullRequestGitHubEvents.html":{}}}],["click",{"_index":5617,"title":{},"body":{"index.html":{}}}],["clickable",{"_index":5932,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cliduration",{"_index":2870,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{},"miscellaneous/variables.html":{}}}],["client",{"_index":5710,"title":{},"body":{"properties.html":{},"miscellaneous/variables.html":{}}}],["clone",{"_index":757,"title":{},"body":{"classes/BakeRepoDto.html":{},"entities/DbBakedRepo.html":{}}}],["clone_url",{"_index":1586,"title":{},"body":{"entities/DbBakedRepo.html":{}}}],["close",{"_index":1938,"title":{},"body":{"entities/DbPullRequest.html":{},"entities/DbPullRequestGitHubEvents.html":{}}}],["closed",{"_index":1999,"title":{},"body":{"entities/DbPullRequest.html":{},"entities/DbPullRequestGitHubEvents.html":{},"injectables/PullRequestGithubEventsService.html":{},"classes/PullRequestPageOptionsDto.html":{},"miscellaneous/enumerations.html":{}}}],["closed'})@column('text",{"_index":1984,"title":{},"body":{"entities/DbPullRequest.html":{},"entities/DbPullRequestGitHubEvents.html":{}}}],["closed_at",{"_index":1906,"title":{},"body":{"entities/DbPullRequest.html":{},"classes/PullRequestPageOptionsDto.html":{},"miscellaneous/enumerations.html":{}}}],["closed_pull_requests\".\"updated_at",{"_index":3754,"title":{},"body":{"injectables/RepoService.html":{}}}],["cluster_apiservicesmodule",{"_index":244,"title":{},"body":{"modules/ApiServicesModule.html":{},"overview.html":{}}}],["cluster_apiservicesmodule_exports",{"_index":245,"title":{},"body":{"modules/ApiServicesModule.html":{},"overview.html":{}}}],["cluster_apiservicesmodule_providers",{"_index":246,"title":{},"body":{"modules/ApiServicesModule.html":{},"overview.html":{}}}],["cluster_appmodule",{"_index":257,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":258,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":740,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":742,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":741,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_providers",{"_index":743,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_blogsummarymodule",{"_index":803,"title":{},"body":{"modules/BlogSummaryModule.html":{},"overview.html":{}}}],["cluster_blogsummarymodule_exports",{"_index":805,"title":{},"body":{"modules/BlogSummaryModule.html":{},"overview.html":{}}}],["cluster_blogsummarymodule_imports",{"_index":804,"title":{},"body":{"modules/BlogSummaryModule.html":{}}}],["cluster_blogsummarymodule_providers",{"_index":806,"title":{},"body":{"modules/BlogSummaryModule.html":{},"overview.html":{}}}],["cluster_contributionmodule",{"_index":1041,"title":{},"body":{"modules/ContributionModule.html":{},"overview.html":{}}}],["cluster_contributionmodule_exports",{"_index":1044,"title":{},"body":{"modules/ContributionModule.html":{},"overview.html":{}}}],["cluster_contributionmodule_imports",{"_index":1042,"title":{},"body":{"modules/ContributionModule.html":{}}}],["cluster_contributionmodule_providers",{"_index":1043,"title":{},"body":{"modules/ContributionModule.html":{},"overview.html":{}}}],["cluster_contributormodule",{"_index":1279,"title":{},"body":{"modules/ContributorModule.html":{}}}],["cluster_contributormodule_imports",{"_index":1280,"title":{},"body":{"modules/ContributorModule.html":{}}}],["cluster_couponmodule",{"_index":1294,"title":{},"body":{"modules/CouponModule.html":{},"overview.html":{}}}],["cluster_couponmodule_exports",{"_index":1295,"title":{},"body":{"modules/CouponModule.html":{},"overview.html":{}}}],["cluster_couponmodule_providers",{"_index":1296,"title":{},"body":{"modules/CouponModule.html":{},"overview.html":{}}}],["cluster_customermodule",{"_index":1515,"title":{},"body":{"modules/CustomerModule.html":{},"overview.html":{}}}],["cluster_customermodule_exports",{"_index":1516,"title":{},"body":{"modules/CustomerModule.html":{},"overview.html":{}}}],["cluster_customermodule_providers",{"_index":1517,"title":{},"body":{"modules/CustomerModule.html":{},"overview.html":{}}}],["cluster_emojimodule",{"_index":2455,"title":{},"body":{"modules/EmojiModule.html":{},"overview.html":{}}}],["cluster_emojimodule_providers",{"_index":2456,"title":{},"body":{"modules/EmojiModule.html":{},"overview.html":{}}}],["cluster_endorsementmodule",{"_index":2557,"title":{},"body":{"modules/EndorsementModule.html":{},"overview.html":{}}}],["cluster_endorsementmodule_exports",{"_index":2559,"title":{},"body":{"modules/EndorsementModule.html":{},"overview.html":{}}}],["cluster_endorsementmodule_imports",{"_index":2560,"title":{},"body":{"modules/EndorsementModule.html":{}}}],["cluster_endorsementmodule_providers",{"_index":2558,"title":{},"body":{"modules/EndorsementModule.html":{},"overview.html":{}}}],["cluster_highlightmodule",{"_index":2854,"title":{},"body":{"modules/HighlightModule.html":{}}}],["cluster_highlightmodule_imports",{"_index":2855,"title":{},"body":{"modules/HighlightModule.html":{}}}],["cluster_insightsmodule",{"_index":3021,"title":{},"body":{"modules/InsightsModule.html":{},"overview.html":{}}}],["cluster_insightsmodule_exports",{"_index":3023,"title":{},"body":{"modules/InsightsModule.html":{},"overview.html":{}}}],["cluster_insightsmodule_imports",{"_index":3022,"title":{},"body":{"modules/InsightsModule.html":{}}}],["cluster_insightsmodule_providers",{"_index":3024,"title":{},"body":{"modules/InsightsModule.html":{},"overview.html":{}}}],["cluster_issuesummarymodule",{"_index":3087,"title":{},"body":{"modules/IssueSummaryModule.html":{},"overview.html":{}}}],["cluster_issuesummarymodule_exports",{"_index":3089,"title":{},"body":{"modules/IssueSummaryModule.html":{},"overview.html":{}}}],["cluster_issuesummarymodule_imports",{"_index":3088,"title":{},"body":{"modules/IssueSummaryModule.html":{}}}],["cluster_issuesummarymodule_providers",{"_index":3090,"title":{},"body":{"modules/IssueSummaryModule.html":{},"overview.html":{}}}],["cluster_logmodule",{"_index":3101,"title":{},"body":{"modules/LogModule.html":{},"overview.html":{}}}],["cluster_logmodule_exports",{"_index":3102,"title":{},"body":{"modules/LogModule.html":{},"overview.html":{}}}],["cluster_logmodule_providers",{"_index":3103,"title":{},"body":{"modules/LogModule.html":{},"overview.html":{}}}],["cluster_openaimodule",{"_index":3121,"title":{},"body":{"modules/OpenAiModule.html":{},"overview.html":{}}}],["cluster_openaimodule_exports",{"_index":3122,"title":{},"body":{"modules/OpenAiModule.html":{},"overview.html":{}}}],["cluster_openaimodule_providers",{"_index":3123,"title":{},"body":{"modules/OpenAiModule.html":{},"overview.html":{}}}],["cluster_pizzaovenmodule",{"_index":3246,"title":{},"body":{"modules/PizzaOvenModule.html":{},"overview.html":{}}}],["cluster_pizzaovenmodule_exports",{"_index":3247,"title":{},"body":{"modules/PizzaOvenModule.html":{},"overview.html":{}}}],["cluster_pizzaovenmodule_imports",{"_index":3249,"title":{},"body":{"modules/PizzaOvenModule.html":{}}}],["cluster_pizzaovenmodule_providers",{"_index":3248,"title":{},"body":{"modules/PizzaOvenModule.html":{},"overview.html":{}}}],["cluster_pullrequestmodule",{"_index":3443,"title":{},"body":{"modules/PullRequestModule.html":{},"overview.html":{}}}],["cluster_pullrequestmodule_exports",{"_index":3445,"title":{},"body":{"modules/PullRequestModule.html":{},"overview.html":{}}}],["cluster_pullrequestmodule_imports",{"_index":3444,"title":{},"body":{"modules/PullRequestModule.html":{},"overview.html":{}}}],["cluster_pullrequestmodule_providers",{"_index":3446,"title":{},"body":{"modules/PullRequestModule.html":{},"overview.html":{}}}],["cluster_repofiltermodule",{"_index":3631,"title":{},"body":{"modules/RepoFilterModule.html":{},"overview.html":{}}}],["cluster_repofiltermodule_exports",{"_index":3632,"title":{},"body":{"modules/RepoFilterModule.html":{},"overview.html":{}}}],["cluster_repofiltermodule_providers",{"_index":3633,"title":{},"body":{"modules/RepoFilterModule.html":{},"overview.html":{}}}],["cluster_repomodule",{"_index":3674,"title":{},"body":{"modules/RepoModule.html":{},"overview.html":{}}}],["cluster_repomodule_exports",{"_index":3676,"title":{},"body":{"modules/RepoModule.html":{},"overview.html":{}}}],["cluster_repomodule_imports",{"_index":3675,"title":{},"body":{"modules/RepoModule.html":{}}}],["cluster_repomodule_providers",{"_index":3677,"title":{},"body":{"modules/RepoModule.html":{},"overview.html":{}}}],["cluster_stargazemodule",{"_index":4000,"title":{},"body":{"modules/StargazeModule.html":{},"overview.html":{}}}],["cluster_stargazemodule_exports",{"_index":4001,"title":{},"body":{"modules/StargazeModule.html":{},"overview.html":{}}}],["cluster_stargazemodule_imports",{"_index":4002,"title":{},"body":{"modules/StargazeModule.html":{}}}],["cluster_stargazemodule_providers",{"_index":4003,"title":{},"body":{"modules/StargazeModule.html":{},"overview.html":{}}}],["cluster_starmodule",{"_index":3971,"title":{},"body":{"modules/StarModule.html":{},"overview.html":{}}}],["cluster_starmodule_exports",{"_index":3972,"title":{},"body":{"modules/StarModule.html":{},"overview.html":{}}}],["cluster_starmodule_imports",{"_index":3973,"title":{},"body":{"modules/StarModule.html":{}}}],["cluster_starmodule_providers",{"_index":3974,"title":{},"body":{"modules/StarModule.html":{},"overview.html":{}}}],["cluster_stripemodule",{"_index":4026,"title":{},"body":{"modules/StripeModule.html":{},"overview.html":{}}}],["cluster_stripemodule_exports",{"_index":4028,"title":{},"body":{"modules/StripeModule.html":{},"overview.html":{}}}],["cluster_stripemodule_providers",{"_index":4027,"title":{},"body":{"modules/StripeModule.html":{},"overview.html":{}}}],["cluster_stripesubscriptionmodule",{"_index":4060,"title":{},"body":{"modules/StripeSubscriptionModule.html":{},"overview.html":{}}}],["cluster_stripesubscriptionmodule_exports",{"_index":4061,"title":{},"body":{"modules/StripeSubscriptionModule.html":{},"overview.html":{}}}],["cluster_stripesubscriptionmodule_providers",{"_index":4062,"title":{},"body":{"modules/StripeSubscriptionModule.html":{},"overview.html":{}}}],["cluster_stripewebhookmodule",{"_index":4078,"title":{},"body":{"modules/StripeWebHookModule.html":{},"overview.html":{}}}],["cluster_stripewebhookmodule_exports",{"_index":4080,"title":{},"body":{"modules/StripeWebHookModule.html":{},"overview.html":{}}}],["cluster_stripewebhookmodule_imports",{"_index":4079,"title":{},"body":{"modules/StripeWebHookModule.html":{}}}],["cluster_submitmodule",{"_index":4165,"title":{},"body":{"modules/SubmitModule.html":{},"overview.html":{}}}],["cluster_submitmodule_exports",{"_index":4166,"title":{},"body":{"modules/SubmitModule.html":{},"overview.html":{}}}],["cluster_submitmodule_imports",{"_index":4167,"title":{},"body":{"modules/SubmitModule.html":{}}}],["cluster_submitmodule_providers",{"_index":4168,"title":{},"body":{"modules/SubmitModule.html":{},"overview.html":{}}}],["cluster_tiermodule",{"_index":4270,"title":{},"body":{"modules/TierModule.html":{},"overview.html":{}}}],["cluster_tiermodule_exports",{"_index":4272,"title":{},"body":{"modules/TierModule.html":{},"overview.html":{}}}],["cluster_tiermodule_providers",{"_index":4271,"title":{},"body":{"modules/TierModule.html":{},"overview.html":{}}}],["cluster_timescalemodule",{"_index":4297,"title":{},"body":{"modules/TimescaleModule.html":{},"overview.html":{}}}],["cluster_timescalemodule_exports",{"_index":4298,"title":{},"body":{"modules/TimescaleModule.html":{},"overview.html":{}}}],["cluster_timescalemodule_providers",{"_index":4299,"title":{},"body":{"modules/TimescaleModule.html":{},"overview.html":{}}}],["cluster_userlistmodule",{"_index":5062,"title":{},"body":{"modules/UserListModule.html":{},"overview.html":{}}}],["cluster_userlistmodule_exports",{"_index":5063,"title":{},"body":{"modules/UserListModule.html":{},"overview.html":{}}}],["cluster_userlistmodule_imports",{"_index":5064,"title":{},"body":{"modules/UserListModule.html":{}}}],["cluster_userlistmodule_providers",{"_index":5065,"title":{},"body":{"modules/UserListModule.html":{},"overview.html":{}}}],["cluster_usermodule",{"_index":5242,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_exports",{"_index":5245,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_imports",{"_index":5243,"title":{},"body":{"modules/UserModule.html":{}}}],["cluster_usermodule_providers",{"_index":5244,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_userreposmodule",{"_index":5358,"title":{},"body":{"modules/UserReposModule.html":{},"overview.html":{}}}],["cluster_userreposmodule_exports",{"_index":5360,"title":{},"body":{"modules/UserReposModule.html":{},"overview.html":{}}}],["cluster_userreposmodule_imports",{"_index":5359,"title":{},"body":{"modules/UserReposModule.html":{}}}],["cluster_userreposmodule_providers",{"_index":5361,"title":{},"body":{"modules/UserReposModule.html":{},"overview.html":{}}}],["cluster_votemodule",{"_index":5382,"title":{},"body":{"modules/VoteModule.html":{},"overview.html":{}}}],["cluster_votemodule_exports",{"_index":5385,"title":{},"body":{"modules/VoteModule.html":{},"overview.html":{}}}],["cluster_votemodule_imports",{"_index":5383,"title":{},"body":{"modules/VoteModule.html":{}}}],["cluster_votemodule_providers",{"_index":5384,"title":{},"body":{"modules/VoteModule.html":{},"overview.html":{}}}],["cn=localhost\"please",{"_index":5504,"title":{},"body":{"index.html":{}}}],["coalesce(avg((pull_requests.merged_at::date",{"_index":5150,"title":{},"body":{"injectables/UserListService.html":{}}}],["coalesce(count(\"open_pull_requests\".\"id",{"_index":3749,"title":{},"body":{"injectables/RepoService.html":{}}}],["coalesce(sum(\"pull_requests\".\"commits",{"_index":92,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/ContributionService.html":{},"injectables/UserListStatsService.html":{}}}],["code",{"_index":529,"title":{},"body":{"classes/ApplyUserCouponDto.html":{},"controllers/CodeExplanationController.html":{},"injectables/CodeExplanationService.html":{},"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"controllers/CodeTestSuggestionController.html":{},"injectables/CodeTestSuggestionService.html":{},"injectables/CouponService.html":{},"entities/DbCoupon.html":{},"entities/DbInsight.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"injectables/PullRequestDescriptionService.html":{},"modules/PullRequestModule.html":{},"classes/SupabaseAuthDto.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["code'})@apibearerauth()@useguards(supabaseguard)@apibadrequestresponse({description",{"_index":904,"title":{},"body":{"controllers/CodeExplanationController.html":{},"controllers/CodeRefactorSuggestionController.html":{},"controllers/CodeTestSuggestionController.html":{}}}],["code'})@column({type",{"_index":1817,"title":{},"body":{"entities/DbInsight.html":{}}}],["codeblock",{"_index":950,"title":{},"body":{"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{}}}],["codeexplanationcontroller",{"_index":891,"title":{"controllers/CodeExplanationController.html":{}},"body":{"controllers/CodeExplanationController.html":{},"modules/PullRequestModule.html":{}}}],["codeexplanationservice",{"_index":907,"title":{"injectables/CodeExplanationService.html":{}},"body":{"controllers/CodeExplanationController.html":{},"injectables/CodeExplanationService.html":{},"modules/PullRequestModule.html":{},"overview.html":{}}}],["codename",{"_index":5753,"title":{},"body":{"miscellaneous/variables.html":{}}}],["coderefactorsuggestioncontroller",{"_index":925,"title":{"controllers/CodeRefactorSuggestionController.html":{}},"body":{"controllers/CodeRefactorSuggestionController.html":{},"modules/PullRequestModule.html":{}}}],["coderefactorsuggestionservice",{"_index":935,"title":{"injectables/CodeRefactorSuggestionService.html":{}},"body":{"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"modules/PullRequestModule.html":{},"overview.html":{}}}],["codes",{"_index":5962,"title":{},"body":{"miscellaneous/variables.html":{}}}],["codetestsuggestioncontroller",{"_index":954,"title":{"controllers/CodeTestSuggestionController.html":{}},"body":{"controllers/CodeTestSuggestionController.html":{},"modules/PullRequestModule.html":{}}}],["codetestsuggestionservice",{"_index":962,"title":{"injectables/CodeTestSuggestionService.html":{}},"body":{"controllers/CodeTestSuggestionController.html":{},"injectables/CodeTestSuggestionService.html":{},"modules/PullRequestModule.html":{},"overview.html":{}}}],["collaborate",{"_index":1429,"title":{},"body":{"classes/CreateUserCollaborationDto.html":{}}}],["collaborating",{"_index":2222,"title":{},"body":{"entities/DbUserCollaboration.html":{}}}],["collaboration",{"_index":1427,"title":{},"body":{"classes/CreateUserCollaborationDto.html":{},"entities/DbUserCollaboration.html":{},"classes/UpdateUserCollaborationDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"controllers/UserCollaborationController.html":{}}}],["collaboration'})@apibadrequestresponse({description",{"_index":4389,"title":{},"body":{"controllers/UserCollaborationController.html":{}}}],["collaboration'})@apibearerauth()@useguards(supabaseguard)@apiokresponse({type",{"_index":4404,"title":{},"body":{"controllers/UserCollaborationController.html":{}}}],["collaboration.controller",{"_index":5253,"title":{},"body":{"modules/UserModule.html":{}}}],["collaboration.controller.ts",{"_index":4381,"title":{},"body":{"controllers/UserCollaborationController.html":{}}}],["collaboration.controller.ts:110",{"_index":4405,"title":{},"body":{"controllers/UserCollaborationController.html":{}}}],["collaboration.controller.ts:137",{"_index":4401,"title":{},"body":{"controllers/UserCollaborationController.html":{}}}],["collaboration.controller.ts:55",{"_index":4398,"title":{},"body":{"controllers/UserCollaborationController.html":{}}}],["collaboration.controller.ts:74",{"_index":4394,"title":{},"body":{"controllers/UserCollaborationController.html":{}}}],["collaboration.dto",{"_index":4409,"title":{},"body":{"controllers/UserCollaborationController.html":{}}}],["collaboration.dto.ts",{"_index":1426,"title":{},"body":{"classes/CreateUserCollaborationDto.html":{},"classes/UpdateUserCollaborationDto.html":{}}}],["collaboration.dto.ts:11",{"_index":1434,"title":{},"body":{"classes/CreateUserCollaborationDto.html":{}}}],["collaboration.dto.ts:12",{"_index":4329,"title":{},"body":{"classes/UpdateUserCollaborationDto.html":{}}}],["collaboration.dto.ts:21",{"_index":1432,"title":{},"body":{"classes/CreateUserCollaborationDto.html":{}}}],["collaboration.entity",{"_index":414,"title":{},"body":{"modules/AppModule.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"modules/UserModule.html":{}}}],["collaboration.entity.ts",{"_index":2210,"title":{},"body":{"entities/DbUserCollaboration.html":{}}}],["collaboration.entity.ts:103",{"_index":2230,"title":{},"body":{"entities/DbUserCollaboration.html":{}}}],["collaboration.entity.ts:113",{"_index":2218,"title":{},"body":{"entities/DbUserCollaboration.html":{}}}],["collaboration.entity.ts:123",{"_index":2225,"title":{},"body":{"entities/DbUserCollaboration.html":{}}}],["collaboration.entity.ts:133",{"_index":2216,"title":{},"body":{"entities/DbUserCollaboration.html":{}}}],["collaboration.entity.ts:29",{"_index":2219,"title":{},"body":{"entities/DbUserCollaboration.html":{}}}],["collaboration.entity.ts:37",{"_index":2234,"title":{},"body":{"entities/DbUserCollaboration.html":{}}}],["collaboration.entity.ts:45",{"_index":2228,"title":{},"body":{"entities/DbUserCollaboration.html":{}}}],["collaboration.entity.ts:53",{"_index":2232,"title":{},"body":{"entities/DbUserCollaboration.html":{}}}],["collaboration.entity.ts:61",{"_index":2227,"title":{},"body":{"entities/DbUserCollaboration.html":{}}}],["collaboration.entity.ts:72",{"_index":2224,"title":{},"body":{"entities/DbUserCollaboration.html":{}}}],["collaboration.entity.ts:83",{"_index":2229,"title":{},"body":{"entities/DbUserCollaboration.html":{}}}],["collaboration.entity.ts:93",{"_index":2217,"title":{},"body":{"entities/DbUserCollaboration.html":{}}}],["collaboration.service",{"_index":4408,"title":{},"body":{"controllers/UserCollaborationController.html":{},"modules/UserModule.html":{}}}],["collaboration.service.ts",{"_index":4427,"title":{},"body":{"injectables/UserCollaborationService.html":{}}}],["collaboration.service.ts:12",{"_index":4430,"title":{},"body":{"injectables/UserCollaborationService.html":{}}}],["collaboration.service.ts:19",{"_index":4434,"title":{},"body":{"injectables/UserCollaborationService.html":{}}}],["collaboration.service.ts:25",{"_index":4436,"title":{},"body":{"injectables/UserCollaborationService.html":{}}}],["collaboration.service.ts:39",{"_index":4433,"title":{},"body":{"injectables/UserCollaborationService.html":{}}}],["collaboration.service.ts:43",{"_index":4439,"title":{},"body":{"injectables/UserCollaborationService.html":{}}}],["collaboration.service.ts:47",{"_index":4438,"title":{},"body":{"injectables/UserCollaborationService.html":{}}}],["collaboration.service.ts:51",{"_index":4435,"title":{},"body":{"injectables/UserCollaborationService.html":{}}}],["collaboration.user_id",{"_index":4419,"title":{},"body":{"controllers/UserCollaborationController.html":{}}}],["collaboration_emailed_at",{"_index":2211,"title":{},"body":{"entities/DbUserCollaboration.html":{}}}],["collaborations",{"_index":4396,"title":{},"body":{"controllers/UserCollaborationController.html":{}}}],["collaborator's",{"_index":2088,"title":{},"body":{"entities/DbRepoLoginContributions.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserListContributorStat.html":{},"entities/DbUserListContributorStat-1.html":{}}}],["collaboratorsdto",{"_index":969,"title":{"classes/CollaboratorsDto.html":{}},"body":{"classes/CollaboratorsDto.html":{},"controllers/UserListController.html":{}}}],["collection",{"_index":1071,"title":{},"body":{"classes/ContributionPageMetaDto.html":{},"classes/PageMetaDto.html":{}}}],["color",{"_index":1960,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["colorado",{"_index":2659,"title":{},"body":{"classes/FilterListContributorsDto.html":{}}}],["colorize",{"_index":497,"title":{},"body":{"modules/AppModule.html":{}}}],["colors.util",{"_index":319,"title":{},"body":{"modules/AppModule.html":{},"classes/DatabaseLoggerMiddleware.html":{},"injectables/HttpLoggerMiddleware.html":{}}}],["column",{"_index":1604,"title":{},"body":{"entities/DbBakedRepo.html":{},"entities/DbCommitAuthors.html":{},"entities/DbCommits.html":{},"entities/DbContribution.html":{},"entities/DbContributionStatTimeframe.html":{},"entities/DbContributionsProjects.html":{},"entities/DbContributorCategoryTimeframe.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbPullRequestGitHubEvents.html":{},"entities/DbPullRequestReview.html":{},"entities/DbRepoLoginContributions.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserListContributorStat.html":{},"entities/DbUserListContributorStat-1.html":{},"entities/DbUserNotification.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{}}}],["column(\"bigint",{"_index":2273,"title":{},"body":{"entities/DbUserHighlight.html":{},"entities/DbUserRepo.html":{}}}],["column(\"boolean",{"_index":2001,"title":{},"body":{"entities/DbPullRequest.html":{},"entities/DbPullRequestGitHubEvents.html":{}}}],["column(\"integer",{"_index":1998,"title":{},"body":{"entities/DbPullRequest.html":{},"entities/DbPullRequestGitHubEvents.html":{}}}],["column(\"text",{"_index":2000,"title":{},"body":{"entities/DbPullRequest.html":{},"entities/DbPullRequestGitHubEvents.html":{},"entities/DbPullRequestReview.html":{},"entities/DbUserHighlight.html":{}}}],["column({type",{"_index":1965,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["columns",{"_index":2296,"title":{},"body":{"entities/DbUserHighlightReaction.html":{}}}],["come",{"_index":1428,"title":{},"body":{"classes/CreateUserCollaborationDto.html":{}}}],["command",{"_index":5513,"title":{},"body":{"index.html":{}}}],["comment",{"_index":1378,"title":{},"body":{"classes/CreateEndorsementDto.html":{},"entities/DbEndorsement.html":{},"miscellaneous/variables.html":{}}}],["comments",{"_index":1415,"title":{},"body":{"classes/CreateIssueSummaryDto.html":{},"entities/DbContributionStatTimeframe.html":{},"entities/DbPullRequest.html":{},"entities/DbPullRequestGitHubEvents.html":{},"entities/DbRepoLoginContributions.html":{},"entities/DbUserListContributorStat.html":{},"entities/DbUserListContributorStat-1.html":{},"injectables/IssueSummaryService.html":{}}}],["commit",{"_index":984,"title":{},"body":{"classes/CommitAuthorDto.html":{},"classes/CommitsDto.html":{},"entities/DbCommitAuthors.html":{},"entities/DbCommits.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"controllers/PizzaOvenController.html":{},"modules/PizzaOvenModule.html":{}}}],["commit_author",{"_index":1627,"title":{},"body":{"entities/DbCommits.html":{}}}],["commit_author.commits",{"_index":1650,"title":{},"body":{"entities/DbCommits.html":{}}}],["commit_author.commits)@joincolumn({name",{"_index":1638,"title":{},"body":{"entities/DbCommits.html":{}}}],["commit_author_email",{"_index":1617,"title":{},"body":{"entities/DbCommitAuthors.html":{}}}],["commit_author_id",{"_index":1628,"title":{},"body":{"entities/DbCommits.html":{}}}],["commit_authors",{"_index":1623,"title":{},"body":{"entities/DbCommitAuthors.html":{}}}],["commit_authors.entity",{"_index":1648,"title":{},"body":{"entities/DbCommits.html":{}}}],["commit_date",{"_index":1629,"title":{},"body":{"entities/DbCommits.html":{}}}],["commit_hash",{"_index":1015,"title":{},"body":{"classes/CommitsDto.html":{},"entities/DbCommits.html":{}}}],["commitauthordto",{"_index":981,"title":{"classes/CommitAuthorDto.html":{}},"body":{"classes/CommitAuthorDto.html":{}}}],["commitauthorservice",{"_index":3218,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["commitauthorsrepository",{"_index":996,"title":{},"body":{"injectables/CommitAuthorsService.html":{}}}],["commitauthorsservice",{"_index":989,"title":{"injectables/CommitAuthorsService.html":{}},"body":{"injectables/CommitAuthorsService.html":{},"controllers/PizzaOvenController.html":{},"modules/PizzaOvenModule.html":{},"overview.html":{}}}],["commitmessages",{"_index":2712,"title":{},"body":{"classes/GeneratePullRequestDescriptionDto.html":{}}}],["commits",{"_index":1172,"title":{},"body":{"injectables/ContributionService.html":{},"entities/DbBakedRepo.html":{},"entities/DbCommitAuthors.html":{},"entities/DbCommits.html":{},"entities/DbContributionStatTimeframe.html":{},"entities/DbPullRequest.html":{},"entities/DbPullRequestGitHubEvents.html":{},"entities/DbRepoLoginContributions.html":{},"entities/DbUserListContributorStat.html":{},"entities/DbUserListContributorStat-1.html":{},"controllers/PizzaOvenController.html":{},"classes/UserListMostActiveContributorsDto.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["commits.baked_repo",{"_index":1594,"title":{},"body":{"entities/DbBakedRepo.html":{}}}],["commits.commit_author",{"_index":1620,"title":{},"body":{"entities/DbCommitAuthors.html":{}}}],["commits.entity",{"_index":1611,"title":{},"body":{"entities/DbBakedRepo.html":{},"entities/DbCommitAuthors.html":{}}}],["commits.service",{"_index":3215,"title":{},"body":{"controllers/PizzaOvenController.html":{},"modules/PizzaOvenModule.html":{}}}],["commitsdto",{"_index":1013,"title":{"classes/CommitsDto.html":{}},"body":{"classes/CommitsDto.html":{}}}],["commitsrepository",{"_index":1028,"title":{},"body":{"injectables/CommitsService.html":{}}}],["commitsservice",{"_index":1021,"title":{"injectables/CommitsService.html":{}},"body":{"injectables/CommitsService.html":{},"controllers/PizzaOvenController.html":{},"modules/PizzaOvenModule.html":{},"overview.html":{}}}],["committing",{"_index":5587,"title":{},"body":{"index.html":{}}}],["common",{"_index":5961,"title":{},"body":{"miscellaneous/variables.html":{}}}],["common/constants/order",{"_index":1142,"title":{},"body":{"injectables/ContributionService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoService.html":{}}}],["common/decorators/api",{"_index":1230,"title":{},"body":{"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"controllers/EmojiController.html":{},"controllers/EndorsementController.html":{},"controllers/HighlightController.html":{},"controllers/PizzaOvenController.html":{},"controllers/PullRequestController.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"controllers/UserListStatsController.html":{},"controllers/UserRecommendationController.html":{}}}],["common/dtos/filter",{"_index":3301,"title":{},"body":{"controllers/PullRequestController.html":{},"injectables/PullRequestInsightsService.html":{}}}],["common/dtos/page",{"_index":1002,"title":{},"body":{"injectables/CommitAuthorsService.html":{},"injectables/CommitsService.html":{},"classes/ContributionPageMetaDto.html":{},"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"classes/ContributionsPageDto.html":{},"classes/ContributorPullRequestsDto.html":{},"classes/DbUserHighlightReactionResponse.html":{},"controllers/EmojiController.html":{},"injectables/EmojiService.html":{},"controllers/EndorsementController.html":{},"injectables/EndorsementService.html":{},"controllers/HighlightController.html":{},"classes/HighlightOptionsDto.html":{},"injectables/InsightMemberService.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"injectables/InsightsService.html":{},"controllers/PizzaOvenController.html":{},"injectables/PizzaOvenService.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"controllers/PullRequestController.html":{},"injectables/PullRequestGithubEventsService.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{},"classes/RepoPageOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserListController.html":{},"classes/UserListMostActiveContributorsDto.html":{},"injectables/UserListService.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"injectables/UserOrganizationService.html":{},"controllers/UserRecommendationController.html":{},"classes/UserRepoOptionsDto.html":{}}}],["common/dtos/page.dto",{"_index":26,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/CommitAuthorsService.html":{},"injectables/CommitsService.html":{},"injectables/ContributionService.html":{},"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"injectables/EmojiService.html":{},"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightsService.html":{},"controllers/PizzaOvenController.html":{},"injectables/PizzaOvenService.html":{},"controllers/PullRequestController.html":{},"injectables/PullRequestGithubEventsService.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"injectables/UserListService.html":{},"controllers/UserListStatsController.html":{},"injectables/UserListStatsService.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"injectables/UserOrganizationService.html":{},"injectables/UserReposService.html":{}}}],["common/filters/repo",{"_index":3401,"title":{},"body":{"injectables/PullRequestInsightsService.html":{},"modules/PullRequestModule.html":{},"injectables/PullRequestService.html":{},"modules/RepoModule.html":{},"injectables/RepoService.html":{},"modules/UserModule.html":{}}}],["common/middleware/database",{"_index":365,"title":{},"body":{"modules/AppModule.html":{}}}],["common/middleware/http",{"_index":362,"title":{},"body":{"modules/AppModule.html":{}}}],["common/services/api",{"_index":2562,"title":{},"body":{"modules/EndorsementModule.html":{},"modules/InsightsModule.html":{},"modules/PizzaOvenModule.html":{},"modules/UserListModule.html":{},"modules/UserModule.html":{},"modules/UserReposModule.html":{}}}],["common/services/pager.service",{"_index":1004,"title":{},"body":{"injectables/CommitAuthorsService.html":{},"injectables/CommitsService.html":{},"injectables/EndorsementService.html":{},"injectables/InsightMemberService.html":{},"injectables/PizzaOvenService.html":{},"injectables/UserCollaborationService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserListService.html":{},"injectables/UserReposService.html":{}}}],["common/util/datetimes",{"_index":1141,"title":{},"body":{"injectables/ContributionService.html":{},"injectables/PullRequestGithubEventsService.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserListService.html":{}}}],["communication",{"_index":5489,"title":{},"body":{"index.html":{}}}],["community",{"_index":5626,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["company",{"_index":684,"title":{},"body":{"controllers/AuthController.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{}}}],["complete",{"_index":5607,"title":{},"body":{"index.html":{}}}],["completion",{"_index":846,"title":{},"body":{"injectables/BlogSummaryService.html":{},"injectables/CodeExplanationService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"injectables/IssueSummaryService.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["completionsurl",{"_index":5906,"title":{},"body":{"miscellaneous/variables.html":{}}}],["complexity",{"_index":5711,"title":{},"body":{"properties.html":{}}}],["component",{"_index":5565,"title":{},"body":{"index.html":{}}}],["computed",{"_index":1884,"title":{},"body":{"entities/DbPRInsight.html":{}}}],["condition",{"_index":5969,"title":{},"body":{"miscellaneous/variables.html":{}}}],["conditions",{"_index":5664,"title":{},"body":{"license.html":{}}}],["conduct",{"_index":5866,"title":{},"body":{"miscellaneous/variables.html":{}}}],["config",{"_index":330,"title":{},"body":{"modules/AppModule.html":{}}}],["config.get(\"api.logging",{"_index":493,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule",{"_index":303,"title":{},"body":{"modules/AppModule.html":{},"modules/LogModule.html":{}}}],["configmodule.forroot",{"_index":440,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":304,"title":{},"body":{"modules/AppModule.html":{},"interfaces/ChatResponse.html":{},"injectables/CustomLogger.html":{},"guards/EndorsementTokenGuard.html":{},"controllers/HealthController.html":{},"injectables/OpenAiService.html":{},"injectables/PizzaOvenService.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoService.html":{},"injectables/StripeService.html":{},"controllers/StripeWebhookController.html":{},"injectables/TierService.html":{}}}],["configservice.get(\"db",{"_index":447,"title":{},"body":{"modules/AppModule.html":{}}}],["configure",{"_index":289,"title":{},"body":{"modules/AppModule.html":{}}}],["configure(consumer",{"_index":290,"title":{},"body":{"modules/AppModule.html":{}}}],["confirmation",{"_index":4197,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["confirmed_at",{"_index":664,"title":{},"body":{"controllers/AuthController.html":{},"classes/SupabaseAuthDto.html":{}}}],["conflictexception",{"_index":3988,"title":{},"body":{"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/SubmitService.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserFollowService.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"injectables/VoteService.html":{}}}],["conflictexception(\"the",{"_index":4875,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["conflictexception(\"you",{"_index":3995,"title":{},"body":{"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/SubmitService.html":{},"injectables/UserFollowService.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"injectables/VoteService.html":{}}}],["conflictexception(`you",{"_index":4583,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["connection",{"_index":2426,"title":{},"body":{"entities/DbUserTopRepo.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["console.error(\"openai",{"_index":854,"title":{},"body":{"injectables/BlogSummaryService.html":{},"injectables/CodeExplanationService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"injectables/IssueSummaryService.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["console.error(`error",{"_index":3012,"title":{},"body":{"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{}}}],["consolelogger",{"_index":1483,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["consoleloggeroptions",{"_index":1490,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["const",{"_index":68,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"controllers/AuthController.html":{},"controllers/BlogSummaryController.html":{},"injectables/BlogSummaryService.html":{},"interfaces/ChatResponse.html":{},"controllers/CodeExplanationController.html":{},"injectables/CodeExplanationService.html":{},"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"controllers/CodeTestSuggestionController.html":{},"injectables/CodeTestSuggestionService.html":{},"injectables/CommitAuthorsService.html":{},"injectables/CommitsService.html":{},"injectables/ContributionService.html":{},"injectables/CouponService.html":{},"injectables/CustomerService.html":{},"injectables/EmojiService.html":{},"controllers/EndorsementController.html":{},"injectables/EndorsementService.html":{},"guards/EndorsementTokenGuard.html":{},"injectables/HttpLoggerMiddleware.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"controllers/IssueSummaryController.html":{},"injectables/IssueSummaryService.html":{},"injectables/LogService.html":{},"injectables/OpenAiService.html":{},"injectables/PagerService.html":{},"interfaces/PaginationInput.html":{},"controllers/PizzaOvenController.html":{},"injectables/PizzaOvenService.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestGithubEventsService.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"injectables/RepoFilterService.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeService.html":{},"controllers/StripeWebhookController.html":{},"injectables/SubmitService.html":{},"injectables/TierService.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowingController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"injectables/UserListService.html":{},"injectables/UserListStatsService.html":{},"injectables/UserNotificationService.html":{},"injectables/UserOrganizationService.html":{},"controllers/UserRecommendationController.html":{},"injectables/UserReposService.html":{},"injectables/VoteService.html":{},"miscellaneous/variables.html":{}}}],["constants/order",{"_index":3151,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["constructor",{"_index":62,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/BlogSummaryService.html":{},"injectables/CodeExplanationService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"injectables/CommitAuthorsService.html":{},"injectables/CommitsService.html":{},"classes/ContributionPageMetaDto.html":{},"injectables/ContributionService.html":{},"classes/ContributionsPageDto.html":{},"injectables/CouponService.html":{},"injectables/CustomLogger.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"injectables/EmojiService.html":{},"injectables/EndorsementService.html":{},"guards/EndorsementTokenGuard.html":{},"controllers/HealthController.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"injectables/IssueSummaryService.html":{},"injectables/LogService.html":{},"injectables/OpenAiService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"controllers/PizzaOvenController.html":{},"injectables/PizzaOvenService.html":{},"controllers/PullRequestController.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestGithubEventsService.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestReviewService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoService.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeService.html":{},"injectables/StripeSubscriptionService.html":{},"controllers/StripeWebhookController.html":{},"injectables/SubmitService.html":{},"injectables/SupabaseStrategy.html":{},"injectables/TierService.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"injectables/UserFollowService.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"injectables/UserListService.html":{},"injectables/UserListStatsService.html":{},"injectables/UserNotificationService.html":{},"injectables/UserOrganizationService.html":{},"injectables/UserReposService.html":{},"injectables/VoteService.html":{}}}],["constructor(bakedreporepository",{"_index":3255,"title":{},"body":{"injectables/PizzaOvenService.html":{}}}],["constructor(commitauthorsrepository",{"_index":994,"title":{},"body":{"injectables/CommitAuthorsService.html":{}}}],["constructor(commitsrepository",{"_index":1026,"title":{},"body":{"injectables/CommitsService.html":{}}}],["constructor(configservice",{"_index":2617,"title":{},"body":{"guards/EndorsementTokenGuard.html":{},"injectables/OpenAiService.html":{},"injectables/StripeService.html":{},"injectables/TierService.html":{}}}],["constructor(context",{"_index":1489,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["constructor(contributionrepository",{"_index":1128,"title":{},"body":{"injectables/ContributionService.html":{}}}],["constructor(couponrepository",{"_index":1304,"title":{},"body":{"injectables/CouponService.html":{}}}],["constructor(customerrepository",{"_index":1526,"title":{},"body":{"injectables/CustomerService.html":{}}}],["constructor(data",{"_index":1187,"title":{},"body":{"classes/ContributionsPageDto.html":{},"classes/PageDto.html":{}}}],["constructor(emojirepository",{"_index":2461,"title":{},"body":{"injectables/EmojiService.html":{}}}],["constructor(endorsementrepository",{"_index":2572,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["constructor(insightmemberrepository",{"_index":2937,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["constructor(insightreporepository",{"_index":2992,"title":{},"body":{"injectables/InsightRepoService.html":{}}}],["constructor(insightrepository",{"_index":3039,"title":{},"body":{"injectables/InsightsService.html":{}}}],["constructor(logsrepository",{"_index":3110,"title":{},"body":{"injectables/LogService.html":{}}}],["constructor(name",{"_index":1552,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["constructor(openaiservice",{"_index":814,"title":{},"body":{"injectables/BlogSummaryService.html":{},"injectables/CodeExplanationService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"injectables/IssueSummaryService.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["constructor(prinsightrepository",{"_index":3386,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["constructor(private",{"_index":798,"title":{},"body":{"controllers/BlogSummaryController.html":{},"injectables/BlogSummaryService.html":{},"interfaces/ChatResponse.html":{},"controllers/CodeExplanationController.html":{},"injectables/CodeExplanationService.html":{},"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"controllers/CodeTestSuggestionController.html":{},"injectables/CodeTestSuggestionService.html":{},"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"controllers/EmojiController.html":{},"controllers/EndorsementController.html":{},"guards/EndorsementTokenGuard.html":{},"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"controllers/IssueSummaryController.html":{},"injectables/IssueSummaryService.html":{},"injectables/OpenAiService.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StripeService.html":{},"injectables/TierService.html":{},"controllers/UserEndorsementController.html":{},"controllers/UserFollowingController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserListController.html":{},"controllers/UserListStatsController.html":{},"controllers/UserNotificationController.html":{},"controllers/UserRecommendationController.html":{}}}],["constructor(pullrequestgithubeventsrepository",{"_index":3349,"title":{},"body":{"injectables/PullRequestGithubEventsService.html":{}}}],["constructor(pullrequestrepository",{"_index":3491,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["constructor(pullrequestreviewrepository",{"_index":3472,"title":{},"body":{"injectables/PullRequestReviewService.html":{}}}],["constructor(reporepository",{"_index":3702,"title":{},"body":{"injectables/RepoService.html":{}}}],["constructor(repostargazerepository",{"_index":4009,"title":{},"body":{"injectables/StargazeService.html":{}}}],["constructor(repostarrepository",{"_index":3980,"title":{},"body":{"injectables/StarService.html":{}}}],["constructor(reposubmitrepository",{"_index":4174,"title":{},"body":{"injectables/SubmitService.html":{}}}],["constructor(repovoterepository",{"_index":5392,"title":{},"body":{"injectables/VoteService.html":{}}}],["constructor(subscriptionrepository",{"_index":4069,"title":{},"body":{"injectables/StripeSubscriptionService.html":{}}}],["constructor(undefined",{"_index":1060,"title":{},"body":{"classes/ContributionPageMetaDto.html":{},"classes/PageMetaDto.html":{}}}],["constructor(usercollaborationrepository",{"_index":4429,"title":{},"body":{"injectables/UserCollaborationService.html":{}}}],["constructor(userfollowrepository",{"_index":4552,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["constructor(userhighlightrepository",{"_index":4735,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["constructor(userlistcontributorrepository",{"_index":5218,"title":{},"body":{"injectables/UserListStatsService.html":{}}}],["constructor(userlistrepository",{"_index":5092,"title":{},"body":{"injectables/UserListService.html":{}}}],["constructor(usernotificationrepository",{"_index":5270,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["constructor(userorganizationrepository",{"_index":5321,"title":{},"body":{"injectables/UserOrganizationService.html":{}}}],["constructor(userreporepository",{"_index":5368,"title":{},"body":{"injectables/UserReposService.html":{}}}],["consumer",{"_index":297,"title":{},"body":{"modules/AppModule.html":{}}}],["consumer.apply(httploggermiddleware).forroutes(`v1",{"_index":519,"title":{},"body":{"modules/AppModule.html":{}}}],["consumer.apply(httploggermiddleware).forroutes(`v2",{"_index":520,"title":{},"body":{"modules/AppModule.html":{}}}],["contain",{"_index":4353,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["container",{"_index":5481,"title":{},"body":{"index.html":{}}}],["content",{"_index":842,"title":{},"body":{"injectables/BlogSummaryService.html":{},"interfaces/ChatResponse.html":{},"injectables/CodeExplanationService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"injectables/IssueSummaryService.html":{},"injectables/OpenAiService.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["context",{"_index":508,"title":{},"body":{"modules/AppModule.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateLogDto.html":{},"injectables/CustomLogger.html":{},"entities/DbContributionsProjects.html":{},"entities/DbEndorsement.html":{},"entities/DbLog.html":{},"miscellaneous/variables.html":{}}}],["context.switchtohttp().getrequest",{"_index":6021,"title":{},"body":{"miscellaneous/variables.html":{}}}],["contract",{"_index":5687,"title":{},"body":{"license.html":{}}}],["contribute",{"_index":1727,"title":{},"body":{"entities/DbContributorCategoryTimeframe.html":{},"index.html":{}}}],["contributed",{"_index":1657,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbContributorCategoryTimeframe.html":{}}}],["contributing",{"_index":1729,"title":{},"body":{"entities/DbContributorCategoryTimeframe.html":{},"index.html":{}}}],["contribution",{"_index":1663,"title":{},"body":{"entities/DbContribution.html":{},"controllers/RepoContributionsController.html":{},"index.html":{}}}],["contribution.entity",{"_index":1048,"title":{},"body":{"modules/ContributionModule.html":{},"injectables/ContributionService.html":{},"controllers/RepoContributionsController.html":{}}}],["contribution.service",{"_index":1049,"title":{},"body":{"modules/ContributionModule.html":{},"controllers/RepoContributionsController.html":{}}}],["contribution/contribution.entity",{"_index":338,"title":{},"body":{"modules/AppModule.html":{}}}],["contribution/contribution.module",{"_index":359,"title":{},"body":{"modules/AppModule.html":{}}}],["contributionmodule",{"_index":261,"title":{"modules/ContributionModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ContributionModule.html":{},"modules.html":{},"overview.html":{}}}],["contributionorderfieldsenum",{"_index":1090,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"miscellaneous/enumerations.html":{}}}],["contributionorderfieldsenum.count",{"_index":1092,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{}}}],["contributionpagemetadto",{"_index":49,"title":{"classes/ContributionPageMetaDto.html":{}},"body":{"interfaces/AllContributionsCount.html":{},"classes/ContributionPageMetaDto.html":{},"injectables/UserListStatsService.html":{}}}],["contributionpageoptionsdto",{"_index":1084,"title":{"classes/ContributionPageOptionsDto.html":{}},"body":{"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"controllers/RepoContributionsController.html":{}}}],["contributionrepository",{"_index":1132,"title":{},"body":{"injectables/ContributionService.html":{}}}],["contributions",{"_index":194,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"classes/ContributionPageMetaDto.html":{},"entities/DbContribution.html":{},"entities/DbContributionsProjects.html":{},"controllers/RepoContributionsController.html":{},"injectables/RepoService.html":{},"controllers/UserListStatsController.html":{},"injectables/UserListStatsService.html":{}}}],["contributions'})@apibadrequestresponse({description",{"_index":5188,"title":{},"body":{"controllers/UserListStatsController.html":{}}}],["contributions.controller",{"_index":1050,"title":{},"body":{"modules/ContributionModule.html":{}}}],["contributions.controller.ts",{"_index":3559,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["contributions.controller.ts:101",{"_index":3576,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["contributions.controller.ts:25",{"_index":3579,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["contributions.controller.ts:42",{"_index":3568,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["contributions.controller.ts:71",{"_index":3585,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["contributions.dto.ts",{"_index":2349,"title":{},"body":{"entities/DbUserListContributorStat.html":{}}}],["contributions.dto.ts:15",{"_index":2353,"title":{},"body":{"entities/DbUserListContributorStat.html":{}}}],["contributions.dto.ts:27",{"_index":2351,"title":{},"body":{"entities/DbUserListContributorStat.html":{}}}],["contributions.dto.ts:39",{"_index":2354,"title":{},"body":{"entities/DbUserListContributorStat.html":{}}}],["contributions.dto.ts:51",{"_index":2355,"title":{},"body":{"entities/DbUserListContributorStat.html":{}}}],["contributions.dto.ts:63",{"_index":2352,"title":{},"body":{"entities/DbUserListContributorStat.html":{}}}],["contributions.dto.ts:75",{"_index":2350,"title":{},"body":{"entities/DbUserListContributorStat.html":{}}}],["contributions.entity",{"_index":1147,"title":{},"body":{"injectables/ContributionService.html":{},"controllers/RepoContributionsController.html":{}}}],["contributions.entity.ts",{"_index":2084,"title":{},"body":{"entities/DbRepoLoginContributions.html":{}}}],["contributions.entity.ts:15",{"_index":2090,"title":{},"body":{"entities/DbRepoLoginContributions.html":{}}}],["contributions.entity.ts:27",{"_index":2086,"title":{},"body":{"entities/DbRepoLoginContributions.html":{}}}],["contributions.entity.ts:39",{"_index":2091,"title":{},"body":{"entities/DbRepoLoginContributions.html":{}}}],["contributions.entity.ts:51",{"_index":2092,"title":{},"body":{"entities/DbRepoLoginContributions.html":{}}}],["contributions.entity.ts:63",{"_index":2087,"title":{},"body":{"entities/DbRepoLoginContributions.html":{}}}],["contributions.entity.ts:75",{"_index":2085,"title":{},"body":{"entities/DbRepoLoginContributions.html":{}}}],["contributions.repo_id",{"_index":3737,"title":{},"body":{"injectables/RepoService.html":{}}}],["contributionsbyprojectdto",{"_index":54,"title":{"classes/ContributionsByProjectDto.html":{}},"body":{"interfaces/AllContributionsCount.html":{},"classes/ContributionsByProjectDto.html":{},"controllers/UserListStatsController.html":{},"injectables/UserListStatsService.html":{}}}],["contributionscount",{"_index":3687,"title":{},"body":{"classes/RepoPageOptionsDto.html":{},"injectables/RepoService.html":{},"miscellaneous/enumerations.html":{}}}],["contributionservice",{"_index":1045,"title":{"injectables/ContributionService.html":{}},"body":{"modules/ContributionModule.html":{},"injectables/ContributionService.html":{},"controllers/RepoContributionsController.html":{},"overview.html":{}}}],["contributionspagedto",{"_index":52,"title":{"classes/ContributionsPageDto.html":{}},"body":{"interfaces/AllContributionsCount.html":{},"classes/ContributionsPageDto.html":{},"injectables/UserListStatsService.html":{}}}],["contributionspagedto(entities",{"_index":125,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["contributionspagemetadto",{"_index":50,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["contributionstimeframedto",{"_index":39,"title":{"classes/ContributionsTimeframeDto.html":{}},"body":{"interfaces/AllContributionsCount.html":{},"classes/ContributionsTimeframeDto.html":{},"controllers/UserListStatsController.html":{},"injectables/UserListStatsService.html":{}}}],["contributor",{"_index":31,"title":{"classes/Contributor.html":{}},"body":{"interfaces/AllContributionsCount.html":{},"classes/CollaboratorsDto.html":{},"classes/ContributionPageOptionsDto.html":{},"classes/Contributor.html":{},"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"modules/ContributorModule.html":{},"classes/CreateUserListDto.html":{},"entities/DbContribution.html":{},"classes/DbUserHighlightReactionResponse.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserListContributorStat-1.html":{},"classes/FilterListContributorsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{},"controllers/UserListController.html":{},"modules/UserListModule.html":{},"injectables/UserListService.html":{},"controllers/UserListStatsController.html":{},"injectables/UserListStatsService.html":{},"miscellaneous/enumerations.html":{}}}],["contributor.controller",{"_index":1282,"title":{},"body":{"modules/ContributorModule.html":{}}}],["contributor.dto",{"_index":1236,"title":{},"body":{"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"injectables/PullRequestService.html":{}}}],["contributor.dto.ts",{"_index":2009,"title":{},"body":{"classes/DbPullRequestContributor.html":{}}}],["contributor.dto.ts:14",{"_index":2012,"title":{},"body":{"classes/DbPullRequestContributor.html":{}}}],["contributor.dto.ts:20",{"_index":2011,"title":{},"body":{"classes/DbPullRequestContributor.html":{}}}],["contributor.dto.ts:8",{"_index":2010,"title":{},"body":{"classes/DbPullRequestContributor.html":{}}}],["contributor.entity",{"_index":29,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"modules/AppModule.html":{},"controllers/UserListController.html":{},"modules/UserListModule.html":{},"injectables/UserListService.html":{},"injectables/UserListStatsService.html":{}}}],["contributor.entity.ts",{"_index":2333,"title":{},"body":{"entities/DbUserListContributor.html":{}}}],["contributor.entity.ts:27",{"_index":2338,"title":{},"body":{"entities/DbUserListContributor.html":{}}}],["contributor.entity.ts:35",{"_index":2342,"title":{},"body":{"entities/DbUserListContributor.html":{}}}],["contributor.entity.ts:42",{"_index":2340,"title":{},"body":{"entities/DbUserListContributor.html":{}}}],["contributor.entity.ts:49",{"_index":2346,"title":{},"body":{"entities/DbUserListContributor.html":{}}}],["contributor.entity.ts:59",{"_index":2336,"title":{},"body":{"entities/DbUserListContributor.html":{}}}],["contributor.entity.ts:66",{"_index":2337,"title":{},"body":{"entities/DbUserListContributor.html":{}}}],["contributor.entity.ts:74",{"_index":2344,"title":{},"body":{"entities/DbUserListContributor.html":{}}}],["contributor.entity.ts:85",{"_index":2341,"title":{},"body":{"entities/DbUserListContributor.html":{}}}],["contributor.id",{"_index":5028,"title":{},"body":{"controllers/UserListController.html":{}}}],["contributor.login",{"_index":5029,"title":{},"body":{"controllers/UserListController.html":{}}}],["contributor.tolowercase",{"_index":3528,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["contributor/')@apioperation({operationid",{"_index":5194,"title":{},"body":{"controllers/UserListStatsController.html":{}}}],["contributor/contributor.module",{"_index":420,"title":{},"body":{"modules/AppModule.html":{}}}],["contributorcontroller",{"_index":1215,"title":{"controllers/ContributorController.html":{}},"body":{"controllers/ContributorController.html":{},"modules/ContributorModule.html":{}}}],["contributorid",{"_index":5050,"title":{},"body":{"controllers/UserListController.html":{}}}],["contributorinsightscontroller",{"_index":1242,"title":{"controllers/ContributorInsightsController.html":{}},"body":{"controllers/ContributorInsightsController.html":{},"modules/ContributorModule.html":{}}}],["contributormodule",{"_index":262,"title":{"modules/ContributorModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ContributorModule.html":{},"modules.html":{},"overview.html":{}}}],["contributorpullrequestsdto",{"_index":1285,"title":{"classes/ContributorPullRequestsDto.html":{}},"body":{"classes/ContributorPullRequestsDto.html":{},"injectables/PullRequestService.html":{},"controllers/UserController.html":{}}}],["contributors",{"_index":971,"title":{},"body":{"classes/CollaboratorsDto.html":{},"classes/Contributor.html":{},"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"classes/CreateUserListDto.html":{},"entities/DbContributorCategoryTimeframe.html":{},"classes/InsightOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"controllers/UserListController.html":{},"controllers/UserListStatsController.html":{},"miscellaneous/enumerations.html":{}}}],["contributors')@apioperation({operationid",{"_index":5201,"title":{},"body":{"controllers/UserListStatsController.html":{}}}],["contributors'})@apibadrequestresponse({description",{"_index":4967,"title":{},"body":{"controllers/UserListController.html":{},"controllers/UserListStatsController.html":{}}}],["contributors'})@apibearerauth()@useguards(supabaseguard)@apipaginatedresponse(dbuser)@apiokresponse({type",{"_index":4972,"title":{},"body":{"controllers/UserListController.html":{}}}],["contributors.dto",{"_index":38,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"classes/ContributionsTimeframeDto.html":{},"controllers/UserListController.html":{},"injectables/UserListService.html":{},"controllers/UserListStatsController.html":{},"injectables/UserListStatsService.html":{}}}],["contributors.dto.ts",{"_index":2631,"title":{},"body":{"classes/FilterListContributorsDto.html":{},"classes/UserListMostActiveContributorsDto.html":{},"miscellaneous/enumerations.html":{}}}],["contributors.dto.ts:15",{"_index":2645,"title":{},"body":{"classes/FilterListContributorsDto.html":{}}}],["contributors.dto.ts:27",{"_index":5073,"title":{},"body":{"classes/UserListMostActiveContributorsDto.html":{}}}],["contributors.dto.ts:28",{"_index":2639,"title":{},"body":{"classes/FilterListContributorsDto.html":{}}}],["contributors.dto.ts:36",{"_index":5076,"title":{},"body":{"classes/UserListMostActiveContributorsDto.html":{}}}],["contributors.dto.ts:40",{"_index":2644,"title":{},"body":{"classes/FilterListContributorsDto.html":{}}}],["contributors.dto.ts:48",{"_index":2637,"title":{},"body":{"classes/FilterListContributorsDto.html":{}}}],["contributors.dto.ts:60",{"_index":2651,"title":{},"body":{"classes/FilterListContributorsDto.html":{}}}],["contributors.dto.ts:68",{"_index":2650,"title":{},"body":{"classes/FilterListContributorsDto.html":{}}}],["contributors.dto.ts:70",{"_index":2653,"title":{},"body":{"classes/FilterListContributorsDto.html":{}}}],["contributors/insights",{"_index":1245,"title":{},"body":{"controllers/ContributorInsightsController.html":{}}}],["contributortype",{"_index":137,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"classes/ContributionsTimeframeDto.html":{},"classes/UserListMostActiveContributorsDto.html":{},"injectables/UserListStatsService.html":{}}}],["controller",{"_index":539,"title":{"controllers/AuthController.html":{},"controllers/BlogSummaryController.html":{},"controllers/CodeExplanationController.html":{},"controllers/CodeRefactorSuggestionController.html":{},"controllers/CodeTestSuggestionController.html":{},"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"controllers/EmojiController.html":{},"controllers/EndorsementController.html":{},"controllers/HealthController.html":{},"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"controllers/IssueSummaryController.html":{},"controllers/PizzaOvenController.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/StripeWebhookController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"controllers/UserFollowingController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"controllers/UserListStatsController.html":{},"controllers/UserNotificationController.html":{},"controllers/UserRecommendationController.html":{}},"body":{"controllers/AuthController.html":{},"controllers/BlogSummaryController.html":{},"controllers/CodeExplanationController.html":{},"controllers/CodeRefactorSuggestionController.html":{},"controllers/CodeTestSuggestionController.html":{},"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"controllers/EmojiController.html":{},"controllers/EndorsementController.html":{},"controllers/HealthController.html":{},"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"controllers/IssueSummaryController.html":{},"controllers/PizzaOvenController.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/StripeWebhookController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"controllers/UserFollowingController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"controllers/UserListStatsController.html":{},"controllers/UserNotificationController.html":{},"controllers/UserRecommendationController.html":{}}}],["controller(\"auth",{"_index":654,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller(\"bake",{"_index":3216,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["controller(\"blogs",{"_index":796,"title":{},"body":{"controllers/BlogSummaryController.html":{}}}],["controller(\"contributors",{"_index":1237,"title":{},"body":{"controllers/ContributorController.html":{}}}],["controller(\"contributors/insights",{"_index":1270,"title":{},"body":{"controllers/ContributorInsightsController.html":{}}}],["controller(\"emojis",{"_index":2450,"title":{},"body":{"controllers/EmojiController.html":{}}}],["controller(\"endorsements",{"_index":2524,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["controller(\"health",{"_index":2747,"title":{},"body":{"controllers/HealthController.html":{}}}],["controller(\"highlights",{"_index":2830,"title":{},"body":{"controllers/HighlightController.html":{}}}],["controller(\"insights",{"_index":2918,"title":{},"body":{"controllers/InsightController.html":{}}}],["controller(\"issues",{"_index":3083,"title":{},"body":{"controllers/IssueSummaryController.html":{}}}],["controller(\"lists",{"_index":5018,"title":{},"body":{"controllers/UserListController.html":{},"controllers/UserListStatsController.html":{}}}],["controller(\"prs",{"_index":909,"title":{},"body":{"controllers/CodeExplanationController.html":{},"controllers/CodeRefactorSuggestionController.html":{},"controllers/CodeTestSuggestionController.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{}}}],["controller(\"repos",{"_index":3589,"title":{},"body":{"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{}}}],["controller(\"stripe",{"_index":4106,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["controller(\"user/collaborations",{"_index":4410,"title":{},"body":{"controllers/UserCollaborationController.html":{}}}],["controller(\"user/endorsements",{"_index":4538,"title":{},"body":{"controllers/UserEndorsementController.html":{}}}],["controller(\"user/highlights",{"_index":4695,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["controller(\"user/insights",{"_index":4863,"title":{},"body":{"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["controller(\"user/notifications",{"_index":5261,"title":{},"body":{"controllers/UserNotificationController.html":{}}}],["controller(\"user/recommendations",{"_index":5345,"title":{},"body":{"controllers/UserRecommendationController.html":{}}}],["controller(\"users",{"_index":4506,"title":{},"body":{"controllers/UserController.html":{},"controllers/UserFollowingController.html":{},"controllers/UserFollowsController.html":{}}}],["controllerkey",{"_index":5873,"title":{},"body":{"miscellaneous/variables.html":{}}}],["controllers",{"_index":541,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/BlogSummaryController.html":{},"modules/BlogSummaryModule.html":{},"controllers/CodeExplanationController.html":{},"controllers/CodeRefactorSuggestionController.html":{},"controllers/CodeTestSuggestionController.html":{},"modules/ContributionModule.html":{},"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"modules/ContributorModule.html":{},"controllers/EmojiController.html":{},"modules/EmojiModule.html":{},"controllers/EndorsementController.html":{},"modules/EndorsementModule.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"controllers/HighlightController.html":{},"modules/HighlightModule.html":{},"controllers/InsightController.html":{},"modules/InsightsModule.html":{},"controllers/IssueSummaryController.html":{},"modules/IssueSummaryModule.html":{},"controllers/PizzaOvenController.html":{},"modules/PizzaOvenModule.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"modules/PullRequestModule.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"modules/RepoModule.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"modules/StarModule.html":{},"modules/StargazeModule.html":{},"modules/StripeWebHookModule.html":{},"controllers/StripeWebhookController.html":{},"modules/SubmitModule.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"controllers/UserFollowingController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"modules/UserListModule.html":{},"controllers/UserListStatsController.html":{},"modules/UserModule.html":{},"controllers/UserNotificationController.html":{},"controllers/UserRecommendationController.html":{},"modules/VoteModule.html":{},"overview.html":{}}}],["conversation",{"_index":5628,"title":{},"body":{"index.html":{}}}],["cool",{"_index":1430,"title":{},"body":{"classes/CreateUserCollaborationDto.html":{},"entities/DbUserCollaboration.html":{}}}],["copies",{"_index":5659,"title":{},"body":{"license.html":{}}}],["copy",{"_index":5539,"title":{},"body":{"index.html":{},"license.html":{}}}],["copyright",{"_index":5642,"title":{},"body":{"license.html":{}}}],["corners",{"_index":2728,"title":{},"body":{"classes/GeneratePullRequestDescriptionDto.html":{}}}],["count",{"_index":1121,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"entities/DbContribution.html":{},"entities/DbPRInsight.html":{},"classes/SupabaseAuthDto.html":{},"miscellaneous/enumerations.html":{}}}],["count(id",{"_index":3067,"title":{},"body":{"injectables/InsightsService.html":{},"injectables/UserHighlightsService.html":{}}}],["countfilters.push([`'${startdate}'::timestamp",{"_index":3776,"title":{},"body":{"injectables/RepoService.html":{}}}],["counting",{"_index":5948,"title":{},"body":{"miscellaneous/variables.html":{}}}],["couple",{"_index":5598,"title":{},"body":{"index.html":{}}}],["coupon",{"_index":528,"title":{},"body":{"classes/ApplyUserCouponDto.html":{},"controllers/AuthController.html":{},"injectables/CouponService.html":{},"entities/DbCoupon.html":{},"classes/SupabaseAuthDto.html":{}}}],["coupon.dto",{"_index":643,"title":{},"body":{"controllers/AuthController.html":{}}}],["coupon.dto.ts",{"_index":524,"title":{},"body":{"classes/ApplyUserCouponDto.html":{}}}],["coupon.dto.ts:11",{"_index":532,"title":{},"body":{"classes/ApplyUserCouponDto.html":{}}}],["coupon.service",{"_index":1299,"title":{},"body":{"modules/CouponModule.html":{}}}],["coupon/coupon.module",{"_index":430,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["coupon/coupon.service",{"_index":645,"title":{},"body":{"controllers/AuthController.html":{}}}],["coupon/entities/coupon.entity",{"_index":435,"title":{},"body":{"modules/AppModule.html":{}}}],["coupon_code",{"_index":691,"title":{},"body":{"controllers/AuthController.html":{},"classes/SupabaseAuthDto.html":{}}}],["couponcode",{"_index":525,"title":{},"body":{"classes/ApplyUserCouponDto.html":{}}}],["couponmodule",{"_index":263,"title":{"modules/CouponModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CouponModule.html":{},"modules.html":{},"overview.html":{}}}],["couponrepository",{"_index":1306,"title":{},"body":{"injectables/CouponService.html":{}}}],["coupons",{"_index":1738,"title":{},"body":{"entities/DbCoupon.html":{}}}],["couponservice",{"_index":644,"title":{"injectables/CouponService.html":{}},"body":{"controllers/AuthController.html":{},"modules/CouponModule.html":{},"injectables/CouponService.html":{},"overview.html":{}}}],["coverage",{"_index":5552,"title":{},"body":{"index.html":{}}}],["cr.repo_id",{"_index":4932,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["create",{"_index":588,"title":{},"body":{"controllers/AuthController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"injectables/EndorsementService.html":{},"classes/UpdateEndorsementDto.html":{},"classes/UpdateInsightDto.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["create(createendorsementdto",{"_index":2576,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["createblogsummarydto",{"_index":776,"title":{"classes/CreateBlogSummaryDto.html":{}},"body":{"controllers/BlogSummaryController.html":{},"injectables/BlogSummaryService.html":{},"classes/CreateBlogSummaryDto.html":{}}}],["createcheckoutsession",{"_index":4033,"title":{},"body":{"injectables/StripeService.html":{}}}],["createcheckoutsession(customer",{"_index":4037,"title":{},"body":{"injectables/StripeService.html":{}}}],["created",{"_index":1706,"title":{},"body":{"entities/DbContributionStatTimeframe.html":{},"entities/DbRepoLoginContributions.html":{},"entities/DbUserListContributorStat.html":{},"entities/DbUserListContributorStat-1.html":{},"controllers/UserEndorsementController.html":{},"injectables/UserNotificationService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["created_at",{"_index":666,"title":{},"body":{"controllers/AuthController.html":{},"classes/ContributionPageOptionsDto.html":{},"entities/DbContribution.html":{},"entities/DbCoupon.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPullRequest.html":{},"entities/DbPullRequestReview.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"controllers/StripeWebhookController.html":{},"classes/SupabaseAuthDto.html":{},"miscellaneous/enumerations.html":{}}}],["createdatecolumn",{"_index":1690,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbCoupon.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPullRequest.html":{},"entities/DbPullRequestGitHubEvents.html":{},"entities/DbPullRequestReview.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserNotification.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{}}}],["createendorsement",{"_index":2472,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["createendorsement(_token",{"_index":2480,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["createendorsementdto",{"_index":1362,"title":{"classes/CreateEndorsementDto.html":{}},"body":{"classes/CreateEndorsementDto.html":{},"controllers/EndorsementController.html":{},"injectables/EndorsementService.html":{},"classes/UpdateEndorsementDto.html":{}}}],["createhighlightdto",{"_index":4665,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["createinsightdto",{"_index":1389,"title":{"classes/CreateInsightDto.html":{}},"body":{"classes/CreateInsightDto.html":{},"classes/UpdateInsightDto.html":{},"controllers/UserInsightsController.html":{}}}],["createinsightdto.is_public",{"_index":4912,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["createinsightdto.name",{"_index":4908,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["createinsightdto.repos.foreach(async",{"_index":4913,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["createinsightdto:14",{"_index":4318,"title":{},"body":{"classes/UpdateInsightDto.html":{}}}],["createinsightdto:22",{"_index":4317,"title":{},"body":{"classes/UpdateInsightDto.html":{}}}],["createinsightdto:32",{"_index":4319,"title":{},"body":{"classes/UpdateInsightDto.html":{}}}],["createinsightmemberdto",{"_index":1403,"title":{"classes/CreateInsightMemberDto.html":{}},"body":{"classes/CreateInsightMemberDto.html":{},"controllers/UserInsightMemberController.html":{}}}],["createinsightmemberdto.email",{"_index":4882,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["createinsightmemberdto})@apiparam({name",{"_index":4844,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["createissuesummarydto",{"_index":1410,"title":{"classes/CreateIssueSummaryDto.html":{}},"body":{"classes/CreateIssueSummaryDto.html":{},"controllers/IssueSummaryController.html":{},"injectables/IssueSummaryService.html":{}}}],["createlog",{"_index":3109,"title":{},"body":{"injectables/LogService.html":{}}}],["createlog(log",{"_index":3113,"title":{},"body":{"injectables/LogService.html":{}}}],["createlogdto",{"_index":1417,"title":{"classes/CreateLogDto.html":{}},"body":{"classes/CreateLogDto.html":{},"injectables/LogService.html":{}}}],["createparamdecorator((_data",{"_index":6020,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createquerybuilder",{"_index":184,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["createquerybuilder(\"pull_request_github_events",{"_index":3371,"title":{},"body":{"injectables/PullRequestGithubEventsService.html":{}}}],["createquerybuilder(\"pull_requests",{"_index":1168,"title":{},"body":{"injectables/ContributionService.html":{}}}],["createquerybuilder(\"repo",{"_index":3732,"title":{},"body":{"injectables/RepoService.html":{}}}],["createquerybuilder(\"repos",{"_index":3748,"title":{},"body":{"injectables/RepoService.html":{}}}],["createquerybuilder(\"user_highlight_reactions",{"_index":4825,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["creates",{"_index":584,"title":{},"body":{"controllers/AuthController.html":{},"controllers/EndorsementController.html":{}}}],["createusercollaborationdto",{"_index":1424,"title":{"classes/CreateUserCollaborationDto.html":{}},"body":{"classes/CreateUserCollaborationDto.html":{},"controllers/UserCollaborationController.html":{}}}],["createuserhighlightdto",{"_index":1440,"title":{"classes/CreateUserHighlightDto.html":{}},"body":{"classes/CreateUserHighlightDto.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{}}}],["createuserhighlightdto})@apiparam({name",{"_index":4688,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["createuserlistdto",{"_index":1209,"title":{"classes/CreateUserListDto.html":{}},"body":{"classes/Contributor.html":{},"classes/CreateUserListDto.html":{},"controllers/UserListController.html":{},"injectables/UserListService.html":{}}}],["createuserlistdto.contributors.map(async",{"_index":5026,"title":{},"body":{"controllers/UserListController.html":{}}}],["createuserlistdto})@apiparam({name",{"_index":5009,"title":{},"body":{"controllers/UserListController.html":{}}}],["creation",{"_index":1664,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbCoupon.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbPullRequest.html":{},"entities/DbPullRequestGitHubEvents.html":{},"entities/DbPullRequestReview.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserList.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"classes/SupabaseAuthDto.html":{}}}],["creator",{"_index":1370,"title":{},"body":{"classes/CreateEndorsementDto.html":{},"entities/DbEndorsement.html":{}}}],["creator_user_id",{"_index":1365,"title":{},"body":{"classes/CreateEndorsementDto.html":{},"entities/DbEndorsement.html":{}}}],["cte",{"_index":3363,"title":{},"body":{"injectables/PullRequestGithubEventsService.html":{}}}],["ctebuilder",{"_index":104,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/ContributionService.html":{},"injectables/PullRequestGithubEventsService.html":{},"injectables/UserListStatsService.html":{}}}],["ctebuilder.innerjoin(\"users",{"_index":105,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["ctx",{"_index":2624,"title":{},"body":{"guards/EndorsementTokenGuard.html":{}}}],["ctx.getrequest",{"_index":2626,"title":{},"body":{"guards/EndorsementTokenGuard.html":{}}}],["current",{"_index":1075,"title":{},"body":{"classes/ContributionPageMetaDto.html":{},"entities/DbContributorCategoryTimeframe.html":{},"entities/DbSubscription.html":{},"classes/PageMetaDto.html":{},"injectables/PullRequestGithubEventsService.html":{},"injectables/PullRequestService.html":{},"controllers/UserInsightsController.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["current_month",{"_index":3548,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["current_month_prs",{"_index":229,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["current_month_prs\".\"author_login",{"_index":230,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["current_period_end_at",{"_index":2164,"title":{},"body":{"entities/DbSubscription.html":{},"controllers/StripeWebhookController.html":{}}}],["current_period_start_at",{"_index":2165,"title":{},"body":{"entities/DbSubscription.html":{},"controllers/StripeWebhookController.html":{}}}],["currentdate",{"_index":144,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["currentmonthquery",{"_index":3544,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["currentrepoids",{"_index":4930,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["currentrepoids.find((id",{"_index":4935,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["currentrepos",{"_index":4918,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["currentrepos.filter",{"_index":4922,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["currentrepos.map((cr",{"_index":4931,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["custom",{"_index":3106,"title":{},"body":{"modules/LogModule.html":{}}}],["customer",{"_index":712,"title":{},"body":{"controllers/AuthController.html":{},"entities/DbCustomer.html":{},"injectables/StripeService.html":{}}}],["customer.entity",{"_index":1519,"title":{},"body":{"modules/CustomerModule.html":{},"injectables/CustomerService.html":{}}}],["customer.service",{"_index":1520,"title":{},"body":{"modules/CustomerModule.html":{}}}],["customer.stripe_customer_id",{"_index":715,"title":{},"body":{"controllers/AuthController.html":{}}}],["customer.subscription.created",{"_index":4102,"title":{},"body":{"controllers/StripeWebhookController.html":{},"miscellaneous/variables.html":{}}}],["customer.subscription.deleted",{"_index":4104,"title":{},"body":{"controllers/StripeWebhookController.html":{},"miscellaneous/variables.html":{}}}],["customer.subscription.updated",{"_index":4103,"title":{},"body":{"controllers/StripeWebhookController.html":{},"miscellaneous/variables.html":{}}}],["customer/customer.entity",{"_index":375,"title":{},"body":{"modules/AppModule.html":{}}}],["customer/customer.module",{"_index":376,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/StripeWebHookModule.html":{}}}],["customer/customer.service",{"_index":637,"title":{},"body":{"controllers/AuthController.html":{},"controllers/StripeWebhookController.html":{}}}],["customerdata",{"_index":4108,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["customerid",{"_index":714,"title":{},"body":{"controllers/AuthController.html":{},"controllers/StripeWebhookController.html":{}}}],["customermodule",{"_index":264,"title":{"modules/CustomerModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CustomerModule.html":{},"modules/StripeWebHookModule.html":{},"modules.html":{},"overview.html":{}}}],["customerrepository",{"_index":1528,"title":{},"body":{"injectables/CustomerService.html":{}}}],["customers",{"_index":1744,"title":{},"body":{"entities/DbCustomer.html":{}}}],["customerservice",{"_index":636,"title":{"injectables/CustomerService.html":{}},"body":{"controllers/AuthController.html":{},"modules/CustomerModule.html":{},"injectables/CustomerService.html":{},"controllers/StripeWebhookController.html":{},"overview.html":{}}}],["customlogger",{"_index":1480,"title":{"injectables/CustomLogger.html":{}},"body":{"injectables/CustomLogger.html":{},"modules/LogModule.html":{},"overview.html":{}}}],["customprops",{"_index":507,"title":{},"body":{"modules/AppModule.html":{}}}],["cypress",{"_index":5568,"title":{},"body":{"index.html":{}}}],["d",{"_index":5522,"title":{},"body":{"index.html":{}}}],["damages",{"_index":5684,"title":{},"body":{"license.html":{}}}],["data",{"_index":887,"title":{},"body":{"interfaces/ChatResponse.html":{},"classes/ContributionsPageDto.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"injectables/LogService.html":{},"injectables/OpenAiService.html":{},"classes/PageDto.html":{},"injectables/PizzaOvenService.html":{},"injectables/RepoFilterService.html":{},"injectables/UserHighlightsService.html":{},"classes/UserRepoOptionsDto-1.html":{},"injectables/VoteService.html":{},"classes/VotedRepoDto.html":{},"miscellaneous/variables.html":{}}}],["data).pipe(map((resp",{"_index":3274,"title":{},"body":{"injectables/PizzaOvenService.html":{}}}],["data.choices[0]?.message.content",{"_index":889,"title":{},"body":{"interfaces/ChatResponse.html":{},"injectables/OpenAiService.html":{}}}],["database",{"_index":457,"title":{},"body":{"modules/AppModule.html":{},"controllers/HealthController.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["databaseloggermiddleware",{"_index":364,"title":{"classes/DatabaseLoggerMiddleware.html":{}},"body":{"modules/AppModule.html":{},"classes/DatabaseLoggerMiddleware.html":{}}}],["databaseloggermiddleware(\"lg",{"_index":486,"title":{},"body":{"modules/AppModule.html":{}}}],["databaseloggermiddleware(\"os",{"_index":463,"title":{},"body":{"modules/AppModule.html":{}}}],["datasource",{"_index":313,"title":{},"body":{"modules/AppModule.html":{}}}],["date",{"_index":143,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"controllers/ContributorInsightsController.html":{},"classes/CreateUserHighlightDto.html":{},"entities/DbCommits.html":{},"entities/DbContribution.html":{},"entities/DbCoupon.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbPullRequestGitHubEvents.html":{},"entities/DbPullRequestReview.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserNotification.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserListStatsService.html":{},"injectables/UserNotificationService.html":{},"miscellaneous/variables.html":{}}}],["date'})@column({type",{"_index":1888,"title":{},"body":{"entities/DbPRInsight.html":{}}}],["date(\"1970",{"_index":6017,"title":{},"body":{"miscellaneous/variables.html":{}}}],["date().getfullyear",{"_index":5896,"title":{},"body":{"miscellaneous/variables.html":{}}}],["date().toisostring",{"_index":103,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["date(date.now",{"_index":5888,"title":{},"body":{"miscellaneous/variables.html":{}}}],["date(highlight.shipped_at",{"_index":4799,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["date(new",{"_index":178,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["date(startdate).gettime",{"_index":179,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["date(updatehighlightdto.shipped_at",{"_index":4708,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["date.now",{"_index":2874,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{}}}],["dates",{"_index":129,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["dates.map(async",{"_index":132,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["day",{"_index":1877,"title":{},"body":{"entities/DbPRInsight.html":{},"controllers/HighlightController.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoService.html":{}}}],["days",{"_index":100,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"classes/ContributionsByProjectDto.html":{},"classes/ContributionsTimeframeDto.html":{},"controllers/ContributorInsightsController.html":{},"classes/ContributorPullRequestsDto.html":{},"entities/DbPRInsight.html":{},"classes/FilterListContributorsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"injectables/PullRequestGithubEventsService.html":{},"injectables/PullRequestInsightsService.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"injectables/RepoFilterService.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"classes/TopProjectsDto.html":{},"injectables/UserHighlightsService.html":{},"classes/UserListMostActiveContributorsDto.html":{},"injectables/UserListService.html":{},"injectables/UserListStatsService.html":{},"classes/UserRepoOptionsDto.html":{},"index.html":{}}}],["days'})@isoptional",{"_index":2649,"title":{},"body":{"classes/FilterListContributorsDto.html":{}}}],["db",{"_index":2381,"title":{},"body":{"entities/DbUserNotification.html":{}}}],["dbapiconfig",{"_index":321,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["dbbakedrepo",{"_index":347,"title":{"entities/DbBakedRepo.html":{}},"body":{"modules/AppModule.html":{},"entities/DbBakedRepo.html":{},"entities/DbCommits.html":{},"controllers/PizzaOvenController.html":{},"modules/PizzaOvenModule.html":{},"injectables/PizzaOvenService.html":{}}}],["dbbakedrepo})@apinotfoundresponse({description",{"_index":3177,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["dbcommitauthors",{"_index":350,"title":{"entities/DbCommitAuthors.html":{}},"body":{"modules/AppModule.html":{},"injectables/CommitAuthorsService.html":{},"entities/DbCommitAuthors.html":{},"entities/DbCommits.html":{},"controllers/PizzaOvenController.html":{},"modules/PizzaOvenModule.html":{}}}],["dbcommitauthors})@apinotfoundresponse({description",{"_index":3182,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["dbcommits",{"_index":352,"title":{"entities/DbCommits.html":{}},"body":{"modules/AppModule.html":{},"injectables/CommitsService.html":{},"entities/DbBakedRepo.html":{},"entities/DbCommitAuthors.html":{},"entities/DbCommits.html":{},"controllers/PizzaOvenController.html":{},"modules/PizzaOvenModule.html":{}}}],["dbcommits})@apinotfoundresponse({description",{"_index":3185,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["dbcommits})@apiparam({name",{"_index":3199,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["dbcontribution",{"_index":337,"title":{"entities/DbContribution.html":{}},"body":{"modules/AppModule.html":{},"modules/ContributionModule.html":{},"injectables/ContributionService.html":{},"entities/DbContribution.html":{},"controllers/RepoContributionsController.html":{},"injectables/RepoService.html":{}}}],["dbcontributionsprojects",{"_index":45,"title":{"entities/DbContributionsProjects.html":{}},"body":{"interfaces/AllContributionsCount.html":{},"entities/DbContributionsProjects.html":{},"controllers/UserListStatsController.html":{},"injectables/UserListStatsService.html":{}}}],["dbcontributionsprojects})@apinotfoundresponse({description",{"_index":5177,"title":{},"body":{"controllers/UserListStatsController.html":{}}}],["dbcontributionstattimeframe",{"_index":42,"title":{"entities/DbContributionStatTimeframe.html":{}},"body":{"interfaces/AllContributionsCount.html":{},"entities/DbContributionStatTimeframe.html":{},"modules/UserListModule.html":{},"controllers/UserListStatsController.html":{},"injectables/UserListStatsService.html":{}}}],["dbcontributionstattimeframe})@apinotfoundresponse({description",{"_index":5190,"title":{},"body":{"controllers/UserListStatsController.html":{}}}],["dbcontribution})@apinotfoundresponse({description",{"_index":3567,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["dbcontributorcategorytimeframe",{"_index":47,"title":{"entities/DbContributorCategoryTimeframe.html":{}},"body":{"interfaces/AllContributionsCount.html":{},"entities/DbContributorCategoryTimeframe.html":{},"modules/UserListModule.html":{},"controllers/UserListStatsController.html":{},"injectables/UserListStatsService.html":{}}}],["dbcontributorcategorytimeframe})@apinotfoundresponse({description",{"_index":5187,"title":{},"body":{"controllers/UserListStatsController.html":{}}}],["dbcoupon",{"_index":434,"title":{"entities/DbCoupon.html":{}},"body":{"modules/AppModule.html":{},"modules/CouponModule.html":{},"injectables/CouponService.html":{},"entities/DbCoupon.html":{}}}],["dbcustomer",{"_index":374,"title":{"entities/DbCustomer.html":{}},"body":{"modules/AppModule.html":{},"modules/CustomerModule.html":{},"injectables/CustomerService.html":{},"entities/DbCustomer.html":{}}}],["dbemoji",{"_index":402,"title":{"entities/DbEmoji.html":{}},"body":{"modules/AppModule.html":{},"entities/DbEmoji.html":{},"entities/DbUserHighlightReaction.html":{},"controllers/EmojiController.html":{},"modules/EmojiModule.html":{},"injectables/EmojiService.html":{}}}],["dbemoji})@apinotfoundresponse({description",{"_index":2444,"title":{},"body":{"controllers/EmojiController.html":{}}}],["dbendorsement",{"_index":418,"title":{"entities/DbEndorsement.html":{}},"body":{"modules/AppModule.html":{},"entities/DbEndorsement.html":{},"controllers/EndorsementController.html":{},"modules/EndorsementModule.html":{},"injectables/EndorsementService.html":{},"controllers/UserEndorsementController.html":{},"modules/UserModule.html":{}}}],["dbendorsement})@apibody({type",{"_index":2483,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["dbendorsement})@apinotfoundresponse({description",{"_index":2514,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["dbfiltereduser",{"_index":1787,"title":{"classes/DbFilteredUser.html":{}},"body":{"classes/DbFilteredUser.html":{},"controllers/UserController.html":{}}}],["dbfiltereduser})@apibadrequestresponse({description",{"_index":4494,"title":{},"body":{"controllers/UserController.html":{}}}],["dbinsight",{"_index":367,"title":{"entities/DbInsight.html":{}},"body":{"modules/AppModule.html":{},"entities/DbInsight.html":{},"entities/DbInsightRepo.html":{},"controllers/InsightController.html":{},"modules/InsightsModule.html":{},"injectables/InsightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"modules/UserModule.html":{}}}],["dbinsightmember",{"_index":400,"title":{"entities/DbInsightMember.html":{}},"body":{"modules/AppModule.html":{},"entities/DbInsightMember.html":{},"injectables/InsightMemberService.html":{},"modules/InsightsModule.html":{},"controllers/UserInsightMemberController.html":{}}}],["dbinsightmember})@apinotfoundresponse({description",{"_index":4842,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["dbinsightrepo",{"_index":369,"title":{"entities/DbInsightRepo.html":{}},"body":{"modules/AppModule.html":{},"entities/DbInsight.html":{},"entities/DbInsightRepo.html":{},"injectables/InsightRepoService.html":{},"modules/InsightsModule.html":{}}}],["dbinsight})@apibadrequestresponse({description",{"_index":2893,"title":{},"body":{"controllers/InsightController.html":{}}}],["dbinsight})@apinotfoundresponse({description",{"_index":2897,"title":{},"body":{"controllers/InsightController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["dblog",{"_index":384,"title":{"entities/DbLog.html":{}},"body":{"modules/AppModule.html":{},"entities/DbLog.html":{},"modules/LogModule.html":{},"injectables/LogService.html":{}}}],["dbloggingconfig",{"_index":322,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["dbprinsight",{"_index":407,"title":{"entities/DbPRInsight.html":{}},"body":{"modules/AppModule.html":{},"entities/DbPRInsight.html":{},"controllers/PullRequestController.html":{},"injectables/PullRequestInsightsService.html":{},"modules/PullRequestModule.html":{}}}],["dbpullrequest",{"_index":388,"title":{"entities/DbPullRequest.html":{}},"body":{"modules/AppModule.html":{},"modules/ContributionModule.html":{},"injectables/ContributionService.html":{},"modules/ContributorModule.html":{},"entities/DbPullRequest.html":{},"entities/DbPullRequestReview.html":{},"controllers/PullRequestController.html":{},"modules/PullRequestModule.html":{},"injectables/PullRequestService.html":{},"controllers/UserController.html":{},"modules/UserListModule.html":{},"injectables/UserListService.html":{}}}],["dbpullrequestcontributor",{"_index":1226,"title":{"classes/DbPullRequestContributor.html":{}},"body":{"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"classes/DbPullRequestContributor.html":{},"injectables/PullRequestService.html":{}}}],["dbpullrequestgithubevents",{"_index":438,"title":{"entities/DbPullRequestGitHubEvents.html":{}},"body":{"modules/AppModule.html":{},"entities/DbPullRequestGitHubEvents.html":{},"injectables/PullRequestGithubEventsService.html":{},"modules/TimescaleModule.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{}}}],["dbpullrequestgithubevents})@apinotfoundresponse({description",{"_index":4477,"title":{},"body":{"controllers/UserController.html":{}}}],["dbpullrequestreview",{"_index":391,"title":{"entities/DbPullRequestReview.html":{}},"body":{"modules/AppModule.html":{},"entities/DbPullRequestReview.html":{},"controllers/PullRequestController.html":{},"modules/PullRequestModule.html":{},"injectables/PullRequestReviewService.html":{}}}],["dbpullrequest})@apinotfoundresponse({description",{"_index":4482,"title":{},"body":{"controllers/UserController.html":{}}}],["dbrepo",{"_index":333,"title":{},"body":{"modules/AppModule.html":{},"modules/ContributionModule.html":{},"entities/DbContribution.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserTopRepo.html":{},"controllers/RepoController.html":{},"modules/RepoModule.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"modules/StarModule.html":{},"modules/StargazeModule.html":{},"modules/SubmitModule.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"controllers/UserRecommendationController.html":{},"modules/VoteModule.html":{}}}],["dbrepologincontributions",{"_index":1145,"title":{"entities/DbRepoLoginContributions.html":{}},"body":{"injectables/ContributionService.html":{},"entities/DbRepoLoginContributions.html":{},"controllers/RepoContributionsController.html":{}}}],["dbrepologincontributions})@apinotfoundresponse({description",{"_index":3572,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["dbrepotouserstargazers",{"_index":345,"title":{"entities/DbRepoToUserStargazers.html":{}},"body":{"modules/AppModule.html":{},"entities/DbRepoToUserStargazers.html":{},"injectables/RepoService.html":{},"controllers/RepoStargazeController.html":{},"modules/StargazeModule.html":{},"injectables/StargazeService.html":{}}}],["dbrepotouserstargazers})@apinotfoundresponse({description",{"_index":3857,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["dbrepotouserstars",{"_index":341,"title":{"entities/DbRepoToUserStars.html":{}},"body":{"modules/AppModule.html":{},"entities/DbRepoToUserStars.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"modules/StarModule.html":{},"injectables/StarService.html":{}}}],["dbrepotouserstars})@apinotfoundresponse({description",{"_index":3811,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["dbrepotousersubmissions",{"_index":343,"title":{"entities/DbRepoToUserSubmissions.html":{}},"body":{"modules/AppModule.html":{},"entities/DbRepoToUserSubmissions.html":{},"injectables/RepoService.html":{},"controllers/RepoSubmitController.html":{},"modules/SubmitModule.html":{},"injectables/SubmitService.html":{}}}],["dbrepotousersubmissions})@apinotfoundresponse({description",{"_index":3895,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["dbrepotouservotes",{"_index":339,"title":{"entities/DbRepoToUserVotes.html":{}},"body":{"modules/AppModule.html":{},"entities/DbRepoToUserVotes.html":{},"injectables/RepoService.html":{},"controllers/RepoVoteController.html":{},"classes/UserRepoOptionsDto-1.html":{},"modules/VoteModule.html":{},"injectables/VoteService.html":{},"classes/VotedRepoDto.html":{}}}],["dbrepotouservotes})@apinotfoundresponse({description",{"_index":3933,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["dbrepo})@apinotfoundresponse({description",{"_index":3615,"title":{},"body":{"controllers/RepoController.html":{},"controllers/UserController.html":{}}}],["dbrepo})@useguards(supabaseguard",{"_index":5339,"title":{},"body":{"controllers/UserRecommendationController.html":{}}}],["dbsubscription",{"_index":382,"title":{"entities/DbSubscription.html":{}},"body":{"modules/AppModule.html":{},"entities/DbSubscription.html":{},"modules/StripeSubscriptionModule.html":{},"injectables/StripeSubscriptionService.html":{}}}],["dbtimescaleconfig",{"_index":329,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["dbtimezone",{"_index":2203,"title":{"classes/DbTimezone.html":{}},"body":{"classes/DbTimezone.html":{},"controllers/UserListController.html":{},"injectables/UserListService.html":{}}}],["dbtimezone})@apinotfoundresponse({description",{"_index":4982,"title":{},"body":{"controllers/UserListController.html":{}}}],["dbtopuser",{"_index":2207,"title":{"classes/DbTopUser.html":{}},"body":{"classes/DbTopUser.html":{},"controllers/UserController.html":{}}}],["dbuser",{"_index":335,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/ContributionModule.html":{},"injectables/ContributionService.html":{},"entities/DbInsight.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserNotification.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserTopRepo.html":{},"controllers/UserController.html":{},"controllers/UserFollowingController.html":{},"controllers/UserListController.html":{},"modules/UserListModule.html":{},"injectables/UserListService.html":{},"modules/UserModule.html":{}}}],["dbusercollaboration",{"_index":413,"title":{"entities/DbUserCollaboration.html":{}},"body":{"modules/AppModule.html":{},"entities/DbUserCollaboration.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"modules/UserModule.html":{}}}],["dbusercollaboration})@apinotfoundresponse({description",{"_index":4388,"title":{},"body":{"controllers/UserCollaborationController.html":{}}}],["dbuserhighlight",{"_index":394,"title":{"entities/DbUserHighlight.html":{}},"body":{"modules/AppModule.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"controllers/HighlightController.html":{},"modules/HighlightModule.html":{},"controllers/UserController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserListController.html":{},"modules/UserListModule.html":{},"injectables/UserListService.html":{},"modules/UserModule.html":{}}}],["dbuserhighlight.create(await",{"_index":4791,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["dbuserhighlightreaction",{"_index":404,"title":{"entities/DbUserHighlightReaction.html":{}},"body":{"modules/AppModule.html":{},"entities/DbEmoji.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightReactionResponse.html":{},"classes/HighlightOptionsDto.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"modules/UserModule.html":{}}}],["dbuserhighlightreactionresponse",{"_index":2300,"title":{"classes/DbUserHighlightReactionResponse.html":{}},"body":{"classes/DbUserHighlightReactionResponse.html":{},"controllers/HighlightController.html":{},"classes/HighlightOptionsDto.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{}}}],["dbuserhighlightreactionresponse})@apinotfoundresponse({description",{"_index":2816,"title":{},"body":{"controllers/HighlightController.html":{},"controllers/UserHighlightsController.html":{}}}],["dbuserhighlightreaction})@apinotfoundresponse({description",{"_index":4656,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["dbuserhighlightrepo",{"_index":2314,"title":{"classes/DbUserHighlightRepo.html":{}},"body":{"classes/DbUserHighlightRepo.html":{},"controllers/HighlightController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserListController.html":{},"injectables/UserListService.html":{}}}],["dbuserhighlightrepo})@apibadrequestresponse({description",{"_index":4679,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["dbuserhighlightrepo})@apinotfoundresponse({description",{"_index":4992,"title":{},"body":{"controllers/UserListController.html":{}}}],["dbuserhighlight})@apinotfoundresponse({description",{"_index":2794,"title":{},"body":{"controllers/HighlightController.html":{},"controllers/UserController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserListController.html":{}}}],["dbuserlist",{"_index":431,"title":{"entities/DbUserList.html":{}},"body":{"modules/AppModule.html":{},"entities/DbUserList.html":{},"controllers/UserListController.html":{},"modules/UserListModule.html":{},"injectables/UserListService.html":{},"modules/UserModule.html":{}}}],["dbuserlistcontributor",{"_index":27,"title":{"entities/DbUserListContributor.html":{}},"body":{"interfaces/AllContributionsCount.html":{},"modules/AppModule.html":{},"entities/DbUserListContributor.html":{},"controllers/UserListController.html":{},"modules/UserListModule.html":{},"injectables/UserListService.html":{},"injectables/UserListStatsService.html":{}}}],["dbuserlistcontributorstat",{"_index":30,"title":{"entities/DbUserListContributorStat.html":{},"entities/DbUserListContributorStat-1.html":{}},"body":{"interfaces/AllContributionsCount.html":{},"entities/DbUserListContributorStat.html":{},"entities/DbUserListContributorStat-1.html":{},"modules/UserListModule.html":{},"controllers/UserListStatsController.html":{},"injectables/UserListStatsService.html":{}}}],["dbuserlistcontributorstat})@apinotfoundresponse({description",{"_index":5197,"title":{},"body":{"controllers/UserListStatsController.html":{}}}],["dbuserlistcontributor})@apinotfoundresponse({description",{"_index":5002,"title":{},"body":{"controllers/UserListController.html":{}}}],["dbuserlist})@apinotfoundresponse({description",{"_index":4957,"title":{},"body":{"controllers/UserListController.html":{}}}],["dbusernotification",{"_index":411,"title":{"entities/DbUserNotification.html":{}},"body":{"modules/AppModule.html":{},"entities/DbUserNotification.html":{},"modules/UserModule.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{}}}],["dbuserorganization",{"_index":415,"title":{"entities/DbUserOrganization.html":{}},"body":{"modules/AppModule.html":{},"entities/DbUserOrganization.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserOrganizationService.html":{}}}],["dbuserorganization})@apinotfoundresponse({description",{"_index":4468,"title":{},"body":{"controllers/UserController.html":{}}}],["dbuserrepo",{"_index":373,"title":{"entities/DbUserRepo.html":{}},"body":{"modules/AppModule.html":{},"entities/DbUserRepo.html":{},"modules/UserReposModule.html":{},"injectables/UserReposService.html":{}}}],["dbusertoprepo",{"_index":409,"title":{"entities/DbUserTopRepo.html":{}},"body":{"modules/AppModule.html":{},"entities/DbUserTopRepo.html":{},"modules/UserModule.html":{}}}],["dbusertouserfollows",{"_index":398,"title":{"entities/DbUserToUserFollows.html":{}},"body":{"modules/AppModule.html":{},"entities/DbUserToUserFollows.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowingController.html":{},"controllers/UserFollowsController.html":{},"modules/UserModule.html":{}}}],["dbusertouserfollows})@apinotfoundresponse({description",{"_index":4623,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["dbuser})@apinotfoundresponse({description",{"_index":560,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserController.html":{},"controllers/UserListController.html":{}}}],["dd",{"_index":3435,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["deal",{"_index":5649,"title":{},"body":{"license.html":{}}}],["dealings",{"_index":5691,"title":{},"body":{"license.html":{}}}],["debug",{"_index":1485,"title":{},"body":{"injectables/CustomLogger.html":{},"miscellaneous/variables.html":{}}}],["debug(message",{"_index":1493,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["decodeuricomponent(options.repo.tolowercase",{"_index":3649,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["decodeuricomponent(pageoptionsdto.repo",{"_index":4782,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["decorators",{"_index":526,"title":{},"body":{"classes/ApplyUserCouponDto.html":{},"controllers/AuthController.html":{},"classes/BakeRepoDto.html":{},"controllers/BlogSummaryController.html":{},"controllers/CodeExplanationController.html":{},"controllers/CodeRefactorSuggestionController.html":{},"controllers/CodeTestSuggestionController.html":{},"classes/CollaboratorsDto.html":{},"classes/CommitAuthorDto.html":{},"classes/CommitsDto.html":{},"classes/ContributionPageMetaDto.html":{},"classes/ContributionPageOptionsDto.html":{},"classes/ContributionsByProjectDto.html":{},"classes/ContributionsPageDto.html":{},"classes/ContributionsTimeframeDto.html":{},"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"classes/ContributorPullRequestsDto.html":{},"classes/CreateBlogSummaryDto.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateInsightDto.html":{},"classes/CreateInsightMemberDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/CreateLogDto.html":{},"classes/CreateUserCollaborationDto.html":{},"classes/CreateUserHighlightDto.html":{},"classes/CreateUserListDto.html":{},"entities/DbBakedRepo.html":{},"entities/DbCommitAuthors.html":{},"entities/DbCommits.html":{},"entities/DbContribution.html":{},"entities/DbContributionStatTimeframe.html":{},"entities/DbContributionsProjects.html":{},"entities/DbContributorCategoryTimeframe.html":{},"entities/DbCoupon.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"classes/DbFilteredUser.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbPullRequestGitHubEvents.html":{},"entities/DbPullRequestReview.html":{},"entities/DbRepoLoginContributions.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"classes/DbTimezone.html":{},"classes/DbTopUser.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightReactionResponse.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserListContributorStat.html":{},"entities/DbUserListContributorStat-1.html":{},"entities/DbUserNotification.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"controllers/EmojiController.html":{},"controllers/EndorsementController.html":{},"classes/FilterListContributorsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/FilteredUsersDto.html":{},"classes/FollowManyUsersDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"controllers/HealthController.html":{},"controllers/HighlightController.html":{},"classes/HighlightOptionsDto.html":{},"controllers/InsightController.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"controllers/IssueSummaryController.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{},"controllers/PizzaOvenController.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"classes/PullRequestPageOptionsDto.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"classes/RepoInfo.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/StripeWebhookController.html":{},"classes/SupabaseAuthDto.html":{},"classes/TopProjectsDto.html":{},"classes/TopUsersDto.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateInsightMemberDto.html":{},"classes/UpdateUserCollaborationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"controllers/UserFollowingController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"classes/UserListMostActiveContributorsDto.html":{},"controllers/UserListStatsController.html":{},"controllers/UserNotificationController.html":{},"classes/UserOnboardingDto.html":{},"controllers/UserRecommendationController.html":{},"classes/UserRepoOptionsDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"classes/VotedRepoDto.html":{}}}],["default",{"_index":117,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"classes/ContributionPageOptionsDto.html":{},"classes/ContributionsByProjectDto.html":{},"classes/ContributionsTimeframeDto.html":{},"classes/ContributorPullRequestsDto.html":{},"classes/CreateBlogSummaryDto.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/CreateUserHighlightDto.html":{},"injectables/CustomLogger.html":{},"classes/DatabaseLoggerMiddleware.html":{},"entities/DbContribution.html":{},"entities/DbCoupon.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbPullRequestGitHubEvents.html":{},"entities/DbPullRequestReview.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserNotification.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"classes/FilterListContributorsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/FilteredUsersDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"classes/HighlightOptionsDto.html":{},"injectables/HttpLoggerMiddleware.html":{},"injectables/InsightMemberService.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"injectables/PullRequestInsightsService.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"injectables/RepoFilterService.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"injectables/TierService.html":{},"classes/TopProjectsDto.html":{},"classes/TopUsersDto.html":{},"classes/UserListMostActiveContributorsDto.html":{},"injectables/UserListStatsService.html":{},"classes/UserRepoOptionsDto.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["default_payment_method",{"_index":4113,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["defaultdb",{"_index":5799,"title":{},"body":{"miscellaneous/variables.html":{}}}],["defaultversion",{"_index":5851,"title":{},"body":{"miscellaneous/variables.html":{}}}],["defined",{"_index":292,"title":{},"body":{"modules/AppModule.html":{},"classes/ApplyUserCouponDto.html":{},"controllers/AuthController.html":{},"classes/BakeRepoDto.html":{},"controllers/BlogSummaryController.html":{},"injectables/BlogSummaryService.html":{},"controllers/CodeExplanationController.html":{},"injectables/CodeExplanationService.html":{},"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"controllers/CodeTestSuggestionController.html":{},"injectables/CodeTestSuggestionService.html":{},"classes/CollaboratorsDto.html":{},"classes/CommitAuthorDto.html":{},"injectables/CommitAuthorsService.html":{},"classes/CommitsDto.html":{},"injectables/CommitsService.html":{},"classes/ContributionPageMetaDto.html":{},"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"classes/ContributionsByProjectDto.html":{},"classes/ContributionsPageDto.html":{},"classes/ContributionsTimeframeDto.html":{},"classes/Contributor.html":{},"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"classes/ContributorPullRequestsDto.html":{},"injectables/CouponService.html":{},"classes/CreateBlogSummaryDto.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateInsightDto.html":{},"classes/CreateInsightMemberDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/CreateLogDto.html":{},"classes/CreateUserCollaborationDto.html":{},"classes/CreateUserHighlightDto.html":{},"classes/CreateUserListDto.html":{},"injectables/CustomLogger.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"entities/DbBakedRepo.html":{},"entities/DbCommitAuthors.html":{},"entities/DbCommits.html":{},"entities/DbContribution.html":{},"entities/DbContributionStatTimeframe.html":{},"entities/DbContributionsProjects.html":{},"entities/DbContributorCategoryTimeframe.html":{},"entities/DbCoupon.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"classes/DbFilteredUser.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbPullRequestGitHubEvents.html":{},"entities/DbPullRequestReview.html":{},"entities/DbRepoLoginContributions.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"classes/DbTimezone.html":{},"classes/DbTopUser.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightReactionResponse.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserListContributorStat.html":{},"entities/DbUserListContributorStat-1.html":{},"entities/DbUserNotification.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"controllers/EmojiController.html":{},"injectables/EmojiService.html":{},"controllers/EndorsementController.html":{},"injectables/EndorsementService.html":{},"guards/EndorsementTokenGuard.html":{},"classes/FilterListContributorsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/FilteredUsersDto.html":{},"classes/FollowManyUsersDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"controllers/HealthController.html":{},"controllers/HighlightController.html":{},"classes/HighlightOptionsDto.html":{},"injectables/HttpLoggerMiddleware.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"controllers/IssueSummaryController.html":{},"injectables/IssueSummaryService.html":{},"injectables/LogService.html":{},"injectables/OpenAiService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{},"injectables/PagerService.html":{},"controllers/PizzaOvenController.html":{},"injectables/PizzaOvenService.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestGithubEventsService.html":{},"injectables/PullRequestInsightsService.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestReviewService.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"injectables/RepoFilterService.html":{},"classes/RepoInfo.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeService.html":{},"injectables/StripeSubscriptionService.html":{},"controllers/StripeWebhookController.html":{},"injectables/SubmitService.html":{},"classes/SupabaseAuthDto.html":{},"injectables/SupabaseStrategy.html":{},"injectables/TierService.html":{},"classes/TopProjectsDto.html":{},"classes/TopUsersDto.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateInsightMemberDto.html":{},"classes/UpdateUserCollaborationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowingController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"classes/UserListMostActiveContributorsDto.html":{},"injectables/UserListService.html":{},"controllers/UserListStatsController.html":{},"injectables/UserListStatsService.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"classes/UserOnboardingDto.html":{},"injectables/UserOrganizationService.html":{},"controllers/UserRecommendationController.html":{},"classes/UserRepoOptionsDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"injectables/UserReposService.html":{},"injectables/VoteService.html":{},"classes/VotedRepoDto.html":{}}}],["delete",{"_index":571,"title":{},"body":{"controllers/AuthController.html":{},"controllers/EndorsementController.html":{},"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserListController.html":{},"miscellaneous/variables.html":{}}}],["delete(\"/:id",{"_index":2925,"title":{},"body":{"controllers/InsightController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserListController.html":{}}}],["delete(\"/:id/contributors/:userlistcontributorid",{"_index":5053,"title":{},"body":{"controllers/UserListController.html":{}}}],["delete(\"/:id/featured",{"_index":2842,"title":{},"body":{"controllers/HighlightController.html":{}}}],["delete(\"/:id/reactions/:emojiid",{"_index":4718,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["delete(\"/:id/star",{"_index":3842,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["delete(\"/:id/stargaze",{"_index":3880,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["delete(\"/:id/submit",{"_index":3918,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["delete(\"/:id/vote",{"_index":3967,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["delete(\"/:owner/:repo/star",{"_index":3845,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["delete(\"/:owner/:repo/stargaze",{"_index":3883,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["delete(\"/:owner/:repo/submit",{"_index":3920,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["delete(\"/:owner/:repo/vote",{"_index":3970,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["delete(\"/:username/follow",{"_index":4639,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["delete(\"/profile",{"_index":737,"title":{},"body":{"controllers/AuthController.html":{}}}],["delete(\":id",{"_index":2554,"title":{},"body":{"controllers/EndorsementController.html":{},"controllers/UserCollaborationController.html":{}}}],["delete(\":id/members/:memberid",{"_index":4892,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["delete('/:id')@apioperation({operationid",{"_index":2904,"title":{},"body":{"controllers/InsightController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserListController.html":{}}}],["delete('/:id/contributors/:userlistcontributorid')@apioperation({operationid",{"_index":4964,"title":{},"body":{"controllers/UserListController.html":{}}}],["delete('/:id/featured')@apioperation({operationid",{"_index":2820,"title":{},"body":{"controllers/HighlightController.html":{}}}],["delete('/:id/reactions/:emojiid')@apioperation({operationid",{"_index":4670,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["delete('/:id/star')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":3808,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["delete('/:id/stargaze')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":3855,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["delete('/:id/submit')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":3893,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["delete('/:id/vote')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":3931,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["delete('/:owner/:repo/star')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":3818,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["delete('/:owner/:repo/stargaze')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":3861,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["delete('/:owner/:repo/submit')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":3899,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["delete('/:owner/:repo/vote')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":3937,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["delete('/:username/follow')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":4620,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["delete('/profile')@apioperation({operationid",{"_index":567,"title":{},"body":{"controllers/AuthController.html":{}}}],["delete(':id')@apioperation({operationid",{"_index":2487,"title":{},"body":{"controllers/EndorsementController.html":{},"controllers/UserCollaborationController.html":{}}}],["delete(':id/members/:memberid')@apioperation({operationid",{"_index":4853,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["delete\\`](https://developer.mozilla.org/en",{"_index":5983,"title":{},"body":{"miscellaneous/variables.html":{}}}],["deletecoupon",{"_index":1302,"title":{},"body":{"injectables/CouponService.html":{}}}],["deletecoupon(code",{"_index":1308,"title":{},"body":{"injectables/CouponService.html":{}}}],["deleted",{"_index":1946,"title":{},"body":{"entities/DbPullRequest.html":{},"entities/DbPullRequestGitHubEvents.html":{},"controllers/UserInsightsController.html":{}}}],["deleted_at",{"_index":1652,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"injectables/InsightsService.html":{},"injectables/UserHighlightsService.html":{}}}],["deletedatecolumn",{"_index":1689,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbCoupon.html":{},"entities/DbEmoji.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{}}}],["deleteendoresementbyid",{"_index":2473,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["deleteendoresementbyid(@param(\"id",{"_index":2555,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["deleteendoresementbyid(id",{"_index":2486,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["deletehighlightforuser",{"_index":4646,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["deletehighlightforuser(userid",{"_index":4666,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["deletehighlightreactionforuser",{"_index":4647,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["deletehighlightreactionforuser(userid",{"_index":4669,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["deletelistforuser",{"_index":4944,"title":{},"body":{"controllers/UserListController.html":{}}}],["deletelistforuser(@userid",{"_index":5038,"title":{},"body":{"controllers/UserListController.html":{}}}],["deletelistforuser(userid",{"_index":4960,"title":{},"body":{"controllers/UserListController.html":{}}}],["deletes",{"_index":568,"title":{},"body":{"controllers/AuthController.html":{},"controllers/EndorsementController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserListController.html":{}}}],["deleteuseraccount",{"_index":546,"title":{},"body":{"controllers/AuthController.html":{}}}],["deleteuseraccount(@userid",{"_index":738,"title":{},"body":{"controllers/AuthController.html":{}}}],["deleteuseraccount(userid",{"_index":566,"title":{},"body":{"controllers/AuthController.html":{}}}],["deleteuserhighlight",{"_index":4728,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["deleteuserhighlight(highlightid",{"_index":4747,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["deleteuserhighlightreaction",{"_index":4729,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["deleteuserhighlightreaction(id",{"_index":4749,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["deleteuserlist",{"_index":5084,"title":{},"body":{"injectables/UserListService.html":{}}}],["deleteuserlist(listid",{"_index":5102,"title":{},"body":{"injectables/UserListService.html":{}}}],["deleteuserlistcontributor",{"_index":4965,"title":{},"body":{"controllers/UserListController.html":{},"injectables/UserListService.html":{}}}],["deleteuserlistcontributor(id",{"_index":5104,"title":{},"body":{"injectables/UserListService.html":{}}}],["deleteuserlistcontributors",{"_index":4945,"title":{},"body":{"controllers/UserListController.html":{}}}],["deleteuserlistcontributors(id",{"_index":4962,"title":{},"body":{"controllers/UserListController.html":{}}}],["deletion",{"_index":1801,"title":{},"body":{"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserList.html":{}}}],["deletions",{"_index":1907,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["denominator",{"_index":127,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["denver",{"_index":2658,"title":{},"body":{"classes/FilterListContributorsDto.html":{}}}],["dependencies",{"_index":243,"title":{},"body":{"modules/ApiServicesModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/BlogSummaryModule.html":{},"modules/ContributionModule.html":{},"modules/ContributorModule.html":{},"modules/CouponModule.html":{},"modules/CustomerModule.html":{},"modules/EmojiModule.html":{},"modules/EndorsementModule.html":{},"modules/HighlightModule.html":{},"modules/InsightsModule.html":{},"modules/IssueSummaryModule.html":{},"modules/LogModule.html":{},"modules/OpenAiModule.html":{},"modules/PizzaOvenModule.html":{},"modules/PullRequestModule.html":{},"modules/RepoFilterModule.html":{},"modules/RepoModule.html":{},"modules/StarModule.html":{},"modules/StargazeModule.html":{},"modules/StripeModule.html":{},"modules/StripeSubscriptionModule.html":{},"modules/StripeWebHookModule.html":{},"modules/SubmitModule.html":{},"modules/TierModule.html":{},"modules/TimescaleModule.html":{},"modules/UserListModule.html":{},"modules/UserModule.html":{},"modules/UserReposModule.html":{},"modules/VoteModule.html":{},"overview.html":{}}}],["deployment",{"_index":5606,"title":{},"body":{"index.html":{}}}],["desc",{"_index":1613,"title":{},"body":{"entities/DbBakedRepo.html":{},"entities/DbCommitAuthors.html":{},"entities/DbCommits.html":{},"injectables/EndorsementService.html":{},"injectables/InsightsService.html":{},"injectables/RepoFilterService.html":{},"injectables/UserCollaborationService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserListService.html":{},"injectables/UserNotificationService.html":{},"injectables/UserOrganizationService.html":{},"miscellaneous/enumerations.html":{}}}],["description",{"_index":537,"title":{},"body":{"classes/ApplyUserCouponDto.html":{},"controllers/AuthController.html":{},"classes/BakeRepoDto.html":{},"controllers/BlogSummaryController.html":{},"controllers/CodeExplanationController.html":{},"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"controllers/CodeTestSuggestionController.html":{},"injectables/CodeTestSuggestionService.html":{},"classes/CollaboratorsDto.html":{},"classes/CommitAuthorDto.html":{},"classes/CommitsDto.html":{},"classes/ContributionPageMetaDto.html":{},"classes/ContributionsByProjectDto.html":{},"classes/ContributionsTimeframeDto.html":{},"classes/Contributor.html":{},"classes/CreateBlogSummaryDto.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateInsightDto.html":{},"classes/CreateInsightMemberDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/CreateUserCollaborationDto.html":{},"classes/CreateUserHighlightDto.html":{},"classes/CreateUserListDto.html":{},"entities/DbBakedRepo.html":{},"entities/DbCommitAuthors.html":{},"entities/DbCommits.html":{},"entities/DbContribution.html":{},"entities/DbContributionStatTimeframe.html":{},"entities/DbContributionsProjects.html":{},"entities/DbContributorCategoryTimeframe.html":{},"entities/DbCoupon.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"classes/DbFilteredUser.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbPullRequestGitHubEvents.html":{},"entities/DbPullRequestReview.html":{},"entities/DbRepoLoginContributions.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"classes/DbTimezone.html":{},"classes/DbTopUser.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightReactionResponse.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserListContributorStat.html":{},"entities/DbUserListContributorStat-1.html":{},"entities/DbUserNotification.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"controllers/EmojiController.html":{},"controllers/EndorsementController.html":{},"classes/FilterListContributorsDto.html":{},"classes/FilteredUsersDto.html":{},"classes/FollowManyUsersDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"controllers/HighlightController.html":{},"classes/HighlightOptionsDto.html":{},"controllers/InsightController.html":{},"controllers/IssueSummaryController.html":{},"injectables/IssueSummaryService.html":{},"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{},"controllers/PizzaOvenController.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"classes/RepoInfo.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"classes/SupabaseAuthDto.html":{},"injectables/TierService.html":{},"classes/TopProjectsDto.html":{},"classes/TopUsersDto.html":{},"classes/UpdateInsightMemberDto.html":{},"classes/UpdateUserCollaborationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserController.html":{},"controllers/UserFollowingController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"controllers/UserListStatsController.html":{},"controllers/UserNotificationController.html":{},"classes/UserOnboardingDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"classes/VotedRepoDto.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["description.controller",{"_index":3451,"title":{},"body":{"modules/PullRequestModule.html":{}}}],["description.controller.ts",{"_index":3323,"title":{},"body":{"controllers/PullRequestDescriptionController.html":{}}}],["description.controller.ts:22",{"_index":3327,"title":{},"body":{"controllers/PullRequestDescriptionController.html":{}}}],["description.dto",{"_index":3328,"title":{},"body":{"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["description.dto.ts",{"_index":2711,"title":{},"body":{"classes/GeneratePullRequestDescriptionDto.html":{}}}],["description.dto.ts:13",{"_index":2716,"title":{},"body":{"classes/GeneratePullRequestDescriptionDto.html":{}}}],["description.dto.ts:23",{"_index":2720,"title":{},"body":{"classes/GeneratePullRequestDescriptionDto.html":{}}}],["description.dto.ts:32",{"_index":2721,"title":{},"body":{"classes/GeneratePullRequestDescriptionDto.html":{}}}],["description.dto.ts:42",{"_index":2719,"title":{},"body":{"classes/GeneratePullRequestDescriptionDto.html":{}}}],["description.dto.ts:50",{"_index":2718,"title":{},"body":{"classes/GeneratePullRequestDescriptionDto.html":{}}}],["description.dto.ts:59",{"_index":2715,"title":{},"body":{"classes/GeneratePullRequestDescriptionDto.html":{}}}],["description.service",{"_index":3330,"title":{},"body":{"controllers/PullRequestDescriptionController.html":{},"modules/PullRequestModule.html":{}}}],["description.service.ts",{"_index":3333,"title":{},"body":{"injectables/PullRequestDescriptionService.html":{}}}],["description.service.ts:10",{"_index":3336,"title":{},"body":{"injectables/PullRequestDescriptionService.html":{}}}],["description.service.ts:19",{"_index":3335,"title":{},"body":{"injectables/PullRequestDescriptionService.html":{}}}],["description.service.ts:7",{"_index":3334,"title":{},"body":{"injectables/PullRequestDescriptionService.html":{}}}],["descriptionlength",{"_index":2699,"title":{},"body":{"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{}}}],["designed",{"_index":5709,"title":{},"body":{"properties.html":{}}}],["detailed",{"_index":5933,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dev",{"_index":5484,"title":{},"body":{"index.html":{}}}],["dev/apply",{"_index":5530,"title":{},"body":{"index.html":{}}}],["developers",{"_index":2332,"title":{},"body":{"entities/DbUserList.html":{}}}],["developers'})@column({type",{"_index":2327,"title":{},"body":{"entities/DbUserList.html":{}}}],["development",{"_index":5450,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["diagram",{"_index":5619,"title":{},"body":{"index.html":{}}}],["diff",{"_index":2713,"title":{},"body":{"classes/GeneratePullRequestDescriptionDto.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["diff/commit",{"_index":3338,"title":{},"body":{"injectables/PullRequestDescriptionService.html":{}}}],["diivi",{"_index":2313,"title":{},"body":{"classes/DbUserHighlightReactionResponse.html":{},"classes/HighlightOptionsDto.html":{}}}],["direction.constant",{"_index":1143,"title":{},"body":{"injectables/ContributionService.html":{},"classes/PageOptionsDto.html":{},"injectables/PullRequestService.html":{},"injectables/RepoService.html":{}}}],["direction.constant.ts",{"_index":5422,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["directly",{"_index":3340,"title":{},"body":{"injectables/PullRequestDescriptionService.html":{}}}],["directory",{"_index":5485,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["disable",{"_index":147,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"interfaces/ChatResponse.html":{},"injectables/OpenAiService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserListStatsService.html":{}}}],["discord",{"_index":4201,"title":{},"body":{"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{}}}],["discord.find",{"_index":5629,"title":{},"body":{"index.html":{}}}],["discord_url",{"_index":689,"title":{},"body":{"controllers/AuthController.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{}}}],["disk",{"_index":2750,"title":{},"body":{"controllers/HealthController.html":{}}}],["disk_percentage",{"_index":5770,"title":{},"body":{"miscellaneous/variables.html":{}}}],["disk_size",{"_index":5773,"title":{},"body":{"miscellaneous/variables.html":{}}}],["diskhealthindicator",{"_index":2746,"title":{},"body":{"controllers/HealthController.html":{}}}],["display",{"_index":1754,"title":{},"body":{"entities/DbEmoji.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"index.html":{}}}],["display_email",{"_index":4367,"title":{},"body":{"classes/UpdateUserEmailPreferencesDto.html":{}}}],["display_local_time",{"_index":685,"title":{},"body":{"controllers/AuthController.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{}}}],["display_order",{"_index":1748,"title":{},"body":{"entities/DbEmoji.html":{}}}],["distinct",{"_index":227,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/PullRequestService.html":{},"injectables/UserListStatsService.html":{}}}],["distribute",{"_index":5655,"title":{},"body":{"license.html":{}}}],["dit",{"_index":5576,"title":{},"body":{"index.html":{}}}],["doadmin",{"_index":5795,"title":{},"body":{"miscellaneous/variables.html":{}}}],["doc",{"_index":1388,"title":{},"body":{"classes/CreateEndorsementDto.html":{},"entities/DbEndorsement.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["doc'})@column({type",{"_index":1784,"title":{},"body":{"entities/DbEndorsement.html":{}}}],["doc'})@isstring",{"_index":1383,"title":{},"body":{"classes/CreateEndorsementDto.html":{}}}],["docker",{"_index":5480,"title":{},"body":{"index.html":{}}}],["docker>=20.10.12",{"_index":5454,"title":{},"body":{"index.html":{}}}],["dockerfile",{"_index":5514,"title":{},"body":{"index.html":{}}}],["dockerfile.local",{"_index":5511,"title":{},"body":{"index.html":{}}}],["docs",{"_index":5829,"title":{},"body":{"miscellaneous/variables.html":{}}}],["document",{"_index":5595,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["documentation",{"_index":5620,"title":{},"body":{"index.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["documentbuilder",{"_index":5854,"title":{},"body":{"miscellaneous/variables.html":{}}}],["domain",{"_index":5760,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dot",{"_index":5705,"title":{},"body":{"properties.html":{}}}],["douglas",{"_index":1792,"title":{},"body":{"classes/DbFilteredUser.html":{},"entities/DbInsightMember.html":{},"entities/DbUserHighlight.html":{}}}],["douglas'})@column({type",{"_index":1851,"title":{},"body":{"entities/DbInsightMember.html":{},"entities/DbUserHighlight.html":{}}}],["downstarbyrepoid",{"_index":3978,"title":{},"body":{"injectables/StarService.html":{}}}],["downstarbyrepoid(repoid",{"_index":3984,"title":{},"body":{"injectables/StarService.html":{}}}],["downstargazebyrepoid",{"_index":4007,"title":{},"body":{"injectables/StargazeService.html":{}}}],["downstargazebyrepoid(repoid",{"_index":4013,"title":{},"body":{"injectables/StargazeService.html":{}}}],["downstargazeonebyid",{"_index":3849,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["downstargazeonebyid(id",{"_index":3854,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["downstargazeonebyownerandrepo",{"_index":3850,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["downstargazeonebyownerandrepo(owner",{"_index":3860,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["downstaronebyid",{"_index":3802,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["downstaronebyid(@param(\"id",{"_index":3843,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["downstaronebyid(id",{"_index":3807,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["downstaronebyownerandrepo",{"_index":3803,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["downstaronebyownerandrepo(owner",{"_index":3817,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["downsubmitbyrepoid",{"_index":4172,"title":{},"body":{"injectables/SubmitService.html":{}}}],["downsubmitbyrepoid(repoid",{"_index":4178,"title":{},"body":{"injectables/SubmitService.html":{}}}],["downsubmitonebyid",{"_index":3887,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["downsubmitonebyid(id",{"_index":3892,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["downsubmitonebyownerandrepo",{"_index":3888,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["downsubmitonebyownerandrepo(owner",{"_index":3898,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["downvotebyrepoid",{"_index":5389,"title":{},"body":{"injectables/VoteService.html":{}}}],["downvotebyrepoid(repoid",{"_index":5396,"title":{},"body":{"injectables/VoteService.html":{}}}],["downvoteonebyid",{"_index":3924,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["downvoteonebyid(@param(\"id",{"_index":3968,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["downvoteonebyid(id",{"_index":3930,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["downvoteonebyownerandrepo",{"_index":3925,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["downvoteonebyownerandrepo(owner",{"_index":3936,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["draft",{"_index":1908,"title":{},"body":{"entities/DbPullRequest.html":{},"entities/DbPullRequestGitHubEvents.html":{}}}],["draft_pull_requests\".\"updated_at",{"_index":3756,"title":{},"body":{"injectables/RepoService.html":{}}}],["dry",{"_index":5602,"title":{},"body":{"index.html":{}}}],["dto/create",{"_index":2519,"title":{},"body":{"controllers/EndorsementController.html":{},"injectables/EndorsementService.html":{}}}],["dtos/baked",{"_index":3212,"title":{},"body":{"controllers/PizzaOvenController.html":{},"injectables/PizzaOvenService.html":{}}}],["dtos/collaborators.dto",{"_index":5016,"title":{},"body":{"controllers/UserListController.html":{}}}],["dtos/contribution",{"_index":1144,"title":{},"body":{"injectables/ContributionService.html":{},"controllers/RepoContributionsController.html":{}}}],["dtos/contributions",{"_index":40,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"controllers/UserListStatsController.html":{},"injectables/UserListStatsService.html":{}}}],["dtos/contributor",{"_index":4505,"title":{},"body":{"controllers/UserController.html":{}}}],["dtos/create",{"_index":791,"title":{},"body":{"controllers/BlogSummaryController.html":{},"injectables/BlogSummaryService.html":{},"controllers/CodeExplanationController.html":{},"injectables/CodeExplanationService.html":{},"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"controllers/CodeTestSuggestionController.html":{},"injectables/CodeTestSuggestionService.html":{},"controllers/IssueSummaryController.html":{},"injectables/IssueSummaryService.html":{},"injectables/LogService.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"injectables/UserListService.html":{}}}],["dtos/filter",{"_index":3644,"title":{},"body":{"injectables/RepoFilterService.html":{},"controllers/UserListController.html":{},"injectables/UserListService.html":{}}}],["dtos/filtered",{"_index":4502,"title":{},"body":{"controllers/UserController.html":{}}}],["dtos/follow",{"_index":4625,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["dtos/highlight",{"_index":2829,"title":{},"body":{"controllers/HighlightController.html":{}}}],["dtos/insight",{"_index":2917,"title":{},"body":{"controllers/InsightController.html":{},"injectables/InsightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["dtos/most",{"_index":36,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"controllers/UserListStatsController.html":{},"injectables/UserListStatsService.html":{}}}],["dtos/page",{"_index":3163,"title":{},"body":{"injectables/PagerService.html":{},"interfaces/PaginationInput.html":{}}}],["dtos/page.dto",{"_index":3164,"title":{},"body":{"injectables/PagerService.html":{},"interfaces/PaginationInput.html":{}}}],["dtos/pull",{"_index":3303,"title":{},"body":{"controllers/PullRequestController.html":{},"injectables/PullRequestService.html":{}}}],["dtos/repo",{"_index":3622,"title":{},"body":{"controllers/RepoController.html":{},"injectables/RepoService.html":{}}}],["dtos/supabase",{"_index":647,"title":{},"body":{"controllers/AuthController.html":{}}}],["dtos/top",{"_index":57,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"controllers/UserController.html":{},"controllers/UserListStatsController.html":{},"injectables/UserListStatsService.html":{}}}],["dtos/update",{"_index":2912,"title":{},"body":{"controllers/InsightController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["dtos/user",{"_index":652,"title":{},"body":{"controllers/AuthController.html":{},"injectables/UserReposService.html":{}}}],["due",{"_index":5989,"title":{},"body":{"miscellaneous/variables.html":{}}}],["duration",{"_index":2872,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{}}}],["duration.ts",{"_index":5731,"title":{},"body":{"miscellaneous/variables.html":{}}}],["during",{"_index":5583,"title":{},"body":{"index.html":{}}}],["dutch",{"_index":1336,"title":{},"body":{"classes/CreateBlogSummaryDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{}}}],["e",{"_index":695,"title":{},"body":{"controllers/AuthController.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"controllers/StripeWebhookController.html":{},"injectables/TierService.html":{},"controllers/UserFollowsController.html":{},"controllers/UserInsightsController.html":{}}}],["e.message",{"_index":3016,"title":{},"body":{"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{}}}],["each",{"_index":1197,"title":{},"body":{"classes/ContributionsPageDto.html":{},"classes/CreateUserHighlightDto.html":{},"classes/DbUserHighlightReactionResponse.html":{},"classes/FilterListContributorsDto.html":{},"classes/FollowManyUsersDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/PageDto.html":{},"miscellaneous/variables.html":{}}}],["edit",{"_index":4322,"title":{},"body":{"classes/UpdateInsightMemberDto.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["email",{"_index":607,"title":{},"body":{"controllers/AuthController.html":{},"classes/CommitAuthorDto.html":{},"classes/CreateInsightMemberDto.html":{},"entities/DbInsightMember.html":{},"entities/DbUserCollaboration.html":{},"injectables/StripeService.html":{},"classes/SupabaseAuthDto.html":{},"injectables/TierService.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{}}}],["emoji",{"_index":1753,"title":{},"body":{"entities/DbEmoji.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightReactionResponse.html":{},"classes/HighlightOptionsDto.html":{}}}],["emoji.controller",{"_index":2458,"title":{},"body":{"modules/EmojiModule.html":{}}}],["emoji.service",{"_index":2448,"title":{},"body":{"controllers/EmojiController.html":{},"modules/EmojiModule.html":{}}}],["emoji/emoji.module",{"_index":379,"title":{},"body":{"modules/AppModule.html":{}}}],["emoji/entities/emoji.entity",{"_index":403,"title":{},"body":{"modules/AppModule.html":{},"entities/DbUserHighlightReaction.html":{}}}],["emoji_id",{"_index":2276,"title":{},"body":{"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightReactionResponse.html":{},"classes/HighlightOptionsDto.html":{},"injectables/UserHighlightsService.html":{}}}],["emojicontroller",{"_index":2437,"title":{"controllers/EmojiController.html":{}},"body":{"controllers/EmojiController.html":{},"modules/EmojiModule.html":{}}}],["emojiid",{"_index":4654,"title":{},"body":{"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{}}}],["emojimodule",{"_index":265,"title":{"modules/EmojiModule.html":{}},"body":{"modules/AppModule.html":{},"modules/EmojiModule.html":{},"modules.html":{},"overview.html":{}}}],["emojirepository",{"_index":2463,"title":{},"body":{"injectables/EmojiService.html":{}}}],["emojis",{"_index":1769,"title":{},"body":{"entities/DbEmoji.html":{},"controllers/EmojiController.html":{}}}],["emojiservice",{"_index":2447,"title":{"injectables/EmojiService.html":{}},"body":{"controllers/EmojiController.html":{},"modules/EmojiModule.html":{},"injectables/EmojiService.html":{},"overview.html":{}}}],["encounter",{"_index":5547,"title":{},"body":{"index.html":{}}}],["encourage",{"_index":5621,"title":{},"body":{"index.html":{}}}],["end",{"_index":948,"title":{},"body":{"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"entities/DbContributionStatTimeframe.html":{},"entities/DbContributorCategoryTimeframe.html":{},"entities/DbSubscription.html":{}}}],["end_range",{"_index":3512,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["ended_at",{"_index":2166,"title":{},"body":{"entities/DbSubscription.html":{},"controllers/StripeWebhookController.html":{}}}],["endorsement",{"_index":1369,"title":{},"body":{"classes/CreateEndorsementDto.html":{},"entities/DbEndorsement.html":{},"controllers/EndorsementController.html":{},"modules/EndorsementModule.html":{}}}],["endorsement.controller",{"_index":2564,"title":{},"body":{"modules/EndorsementModule.html":{},"modules/UserModule.html":{}}}],["endorsement.controller.ts",{"_index":4527,"title":{},"body":{"controllers/UserEndorsementController.html":{}}}],["endorsement.controller.ts:25",{"_index":4533,"title":{},"body":{"controllers/UserEndorsementController.html":{}}}],["endorsement.controller.ts:38",{"_index":4536,"title":{},"body":{"controllers/UserEndorsementController.html":{}}}],["endorsement.dto",{"_index":2520,"title":{},"body":{"controllers/EndorsementController.html":{},"injectables/EndorsementService.html":{},"classes/UpdateEndorsementDto.html":{}}}],["endorsement.dto.ts",{"_index":1364,"title":{},"body":{"classes/CreateEndorsementDto.html":{},"classes/UpdateEndorsementDto.html":{}}}],["endorsement.dto.ts:11",{"_index":1372,"title":{},"body":{"classes/CreateEndorsementDto.html":{}}}],["endorsement.dto.ts:19",{"_index":1375,"title":{},"body":{"classes/CreateEndorsementDto.html":{}}}],["endorsement.dto.ts:27",{"_index":1377,"title":{},"body":{"classes/CreateEndorsementDto.html":{}}}],["endorsement.dto.ts:35",{"_index":1380,"title":{},"body":{"classes/CreateEndorsementDto.html":{}}}],["endorsement.dto.ts:42",{"_index":1382,"title":{},"body":{"classes/CreateEndorsementDto.html":{}}}],["endorsement.dto.ts:49",{"_index":1384,"title":{},"body":{"classes/CreateEndorsementDto.html":{}}}],["endorsement.service",{"_index":2518,"title":{},"body":{"controllers/EndorsementController.html":{},"modules/EndorsementModule.html":{}}}],["endorsement/endorsement.module",{"_index":417,"title":{},"body":{"modules/AppModule.html":{}}}],["endorsement/endorsement.service",{"_index":4537,"title":{},"body":{"controllers/UserEndorsementController.html":{},"modules/UserModule.html":{}}}],["endorsement/entities/endorsement.entity",{"_index":419,"title":{},"body":{"modules/AppModule.html":{},"controllers/UserEndorsementController.html":{},"modules/UserModule.html":{}}}],["endorsementcontroller",{"_index":2470,"title":{"controllers/EndorsementController.html":{}},"body":{"controllers/EndorsementController.html":{},"modules/EndorsementModule.html":{}}}],["endorsementmodule",{"_index":266,"title":{"modules/EndorsementModule.html":{}},"body":{"modules/AppModule.html":{},"modules/EndorsementModule.html":{},"modules.html":{},"overview.html":{}}}],["endorsementrepository",{"_index":2574,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["endorsements",{"_index":1786,"title":{},"body":{"entities/DbEndorsement.html":{},"controllers/EndorsementController.html":{},"injectables/EndorsementService.html":{},"controllers/UserEndorsementController.html":{}}}],["endorsements.recipient_user_id=users.id",{"_index":2600,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["endorsements.repo_id=repos.id",{"_index":2599,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["endorsements.repo_id=users.id",{"_index":2608,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["endorsementservice",{"_index":2517,"title":{"injectables/EndorsementService.html":{}},"body":{"controllers/EndorsementController.html":{},"modules/EndorsementModule.html":{},"injectables/EndorsementService.html":{},"controllers/UserEndorsementController.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["endorsementservicetoken",{"_index":5775,"title":{},"body":{"miscellaneous/variables.html":{}}}],["endorsementtokenguard",{"_index":2522,"title":{"guards/EndorsementTokenGuard.html":{}},"body":{"controllers/EndorsementController.html":{},"modules/EndorsementModule.html":{},"guards/EndorsementTokenGuard.html":{}}}],["endpointconfig",{"_index":323,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["endpoints",{"_index":2752,"title":{},"body":{"controllers/HealthController.html":{},"miscellaneous/variables.html":{}}}],["endpoints'})@healthcheck()@apiokresponse",{"_index":2736,"title":{},"body":{"controllers/HealthController.html":{}}}],["english",{"_index":1329,"title":{},"body":{"classes/CreateBlogSummaryDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{}}}],["english'})@isstring()@isin(['english",{"_index":1330,"title":{},"body":{"classes/CreateBlogSummaryDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{}}}],["ensures",{"_index":3410,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["entire",{"_index":836,"title":{},"body":{"injectables/BlogSummaryService.html":{},"injectables/IssueSummaryService.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["entities",{"_index":121,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"modules/AppModule.html":{},"injectables/ContributionService.html":{},"entities/DbBakedRepo.html":{},"entities/DbCommitAuthors.html":{},"entities/DbCommits.html":{},"entities/DbContribution.html":{},"entities/DbContributionStatTimeframe.html":{},"entities/DbContributionsProjects.html":{},"entities/DbContributorCategoryTimeframe.html":{},"entities/DbCoupon.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbPullRequestGitHubEvents.html":{},"entities/DbPullRequestReview.html":{},"entities/DbRepoLoginContributions.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserListContributorStat.html":{},"entities/DbUserListContributorStat-1.html":{},"entities/DbUserNotification.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"injectables/EmojiService.html":{},"injectables/InsightsService.html":{},"injectables/PagerService.html":{},"interfaces/PaginationInput.html":{},"injectables/PullRequestGithubEventsService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoService.html":{},"injectables/UserFollowService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserListStatsService.html":{},"injectables/UserNotificationService.html":{},"injectables/UserOrganizationService.html":{},"overview.html":{}}}],["entities.length",{"_index":3552,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["entities/baked",{"_index":3213,"title":{},"body":{"controllers/PizzaOvenController.html":{},"modules/PizzaOvenModule.html":{},"injectables/PizzaOvenService.html":{}}}],["entities/commit_authors.entity",{"_index":1005,"title":{},"body":{"injectables/CommitAuthorsService.html":{},"controllers/PizzaOvenController.html":{},"modules/PizzaOvenModule.html":{}}}],["entities/commits.entity",{"_index":1036,"title":{},"body":{"injectables/CommitsService.html":{},"controllers/PizzaOvenController.html":{},"modules/PizzaOvenModule.html":{}}}],["entities/contributions",{"_index":43,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"modules/UserListModule.html":{},"controllers/UserListStatsController.html":{},"injectables/UserListStatsService.html":{}}}],["entities/contributors",{"_index":48,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"modules/UserListModule.html":{},"controllers/UserListStatsController.html":{},"injectables/UserListStatsService.html":{}}}],["entities/coupon.entity",{"_index":1298,"title":{},"body":{"modules/CouponModule.html":{},"injectables/CouponService.html":{}}}],["entities/emoji.entity",{"_index":2449,"title":{},"body":{"controllers/EmojiController.html":{},"modules/EmojiModule.html":{},"injectables/EmojiService.html":{}}}],["entities/endorsement.entity",{"_index":2521,"title":{},"body":{"controllers/EndorsementController.html":{},"modules/EndorsementModule.html":{},"injectables/EndorsementService.html":{}}}],["entities/filtered",{"_index":4501,"title":{},"body":{"controllers/UserController.html":{}}}],["entities/insight",{"_index":2957,"title":{},"body":{"injectables/InsightMemberService.html":{},"injectables/InsightRepoService.html":{},"modules/InsightsModule.html":{},"controllers/UserInsightMemberController.html":{}}}],["entities/insight.entity",{"_index":2914,"title":{},"body":{"controllers/InsightController.html":{},"modules/InsightsModule.html":{},"injectables/InsightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["entities/pull",{"_index":3302,"title":{},"body":{"controllers/PullRequestController.html":{},"injectables/PullRequestInsightsService.html":{},"modules/PullRequestModule.html":{},"injectables/PullRequestReviewService.html":{},"injectables/PullRequestService.html":{}}}],["entities/pull_request_github_event",{"_index":3355,"title":{},"body":{"injectables/PullRequestGithubEventsService.html":{},"modules/TimescaleModule.html":{}}}],["entities/repo",{"_index":1146,"title":{},"body":{"injectables/ContributionService.html":{},"controllers/RepoContributionsController.html":{}}}],["entities/repo.entity",{"_index":3621,"title":{},"body":{"controllers/RepoController.html":{},"modules/RepoModule.html":{},"injectables/RepoService.html":{}}}],["entities/timezones.entity",{"_index":5017,"title":{},"body":{"controllers/UserListController.html":{},"injectables/UserListService.html":{}}}],["entities/top",{"_index":4498,"title":{},"body":{"controllers/UserController.html":{}}}],["entities/user",{"_index":28,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"controllers/HighlightController.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowingController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserListController.html":{},"modules/UserListModule.html":{},"injectables/UserListService.html":{},"controllers/UserListStatsController.html":{},"injectables/UserListStatsService.html":{},"modules/UserModule.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"injectables/UserOrganizationService.html":{}}}],["entity",{"_index":1317,"title":{"entities/DbBakedRepo.html":{},"entities/DbCommitAuthors.html":{},"entities/DbCommits.html":{},"entities/DbContribution.html":{},"entities/DbContributionStatTimeframe.html":{},"entities/DbContributionsProjects.html":{},"entities/DbContributorCategoryTimeframe.html":{},"entities/DbCoupon.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbPullRequestGitHubEvents.html":{},"entities/DbPullRequestReview.html":{},"entities/DbRepoLoginContributions.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserListContributorStat.html":{},"entities/DbUserListContributorStat-1.html":{},"entities/DbUserNotification.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{}},"body":{"injectables/CouponService.html":{},"entities/DbBakedRepo.html":{},"entities/DbCommitAuthors.html":{},"entities/DbCommits.html":{},"entities/DbContribution.html":{},"entities/DbContributionStatTimeframe.html":{},"entities/DbContributionsProjects.html":{},"entities/DbContributorCategoryTimeframe.html":{},"entities/DbCoupon.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbPullRequestGitHubEvents.html":{},"entities/DbPullRequestReview.html":{},"entities/DbRepoLoginContributions.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserListContributorStat.html":{},"entities/DbUserListContributorStat-1.html":{},"entities/DbUserNotification.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"injectables/PagerService.html":{},"injectables/RepoService.html":{}}}],["entity(\"pull_request_reviews",{"_index":2081,"title":{},"body":{"entities/DbPullRequestReview.html":{}}}],["entityqb.getrawmany",{"_index":123,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["enum",{"_index":1120,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/ContributionsTimeframeDto.html":{},"classes/ContributorPullRequestsDto.html":{},"entities/DbUserNotification.html":{},"classes/FilterOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/UserListMostActiveContributorsDto.html":{}}}],["enumerations",{"_index":5418,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["enumname",{"_index":1094,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/ContributionsTimeframeDto.html":{},"classes/ContributorPullRequestsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/UserListMostActiveContributorsDto.html":{},"classes/UserRepoOptionsDto.html":{}}}],["env",{"_index":5463,"title":{},"body":{"index.html":{}}}],["environment",{"_index":5461,"title":{},"body":{"index.html":{}}}],["environments",{"_index":5441,"title":{},"body":{"index.html":{}}}],["epoch",{"_index":5958,"title":{},"body":{"miscellaneous/variables.html":{}}}],["equal",{"_index":1993,"title":{},"body":{"entities/DbPullRequest.html":{},"entities/DbPullRequestGitHubEvents.html":{},"classes/FilterListContributorsDto.html":{}}}],["error",{"_index":852,"title":{},"body":{"injectables/BlogSummaryService.html":{},"injectables/CodeExplanationService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"injectables/CustomLogger.html":{},"classes/DatabaseLoggerMiddleware.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"injectables/IssueSummaryService.html":{},"injectables/PullRequestDescriptionService.html":{},"controllers/StripeWebhookController.html":{},"injectables/TierService.html":{},"controllers/UserFollowsController.html":{},"miscellaneous/variables.html":{}}}],["error(message",{"_index":1495,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["error(response.statustext",{"_index":890,"title":{},"body":{"interfaces/ChatResponse.html":{},"injectables/OpenAiService.html":{}}}],["error).tostring",{"_index":4140,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["error.message",{"_index":855,"title":{},"body":{"injectables/BlogSummaryService.html":{},"injectables/CodeExplanationService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"injectables/IssueSummaryService.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["errors",{"_index":4638,"title":{},"body":{"controllers/UserFollowsController.html":{},"index.html":{}}}],["escape",{"_index":4779,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["eslint",{"_index":146,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"interfaces/ChatResponse.html":{},"injectables/OpenAiService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserListStatsService.html":{}}}],["essentially",{"_index":3366,"title":{},"body":{"injectables/PullRequestGithubEventsService.html":{}}}],["event",{"_index":2037,"title":{},"body":{"entities/DbPullRequestGitHubEvents.html":{},"controllers/StripeWebhookController.html":{},"license.html":{}}}],["event.data.object",{"_index":4154,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["event.type",{"_index":4158,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["event_id",{"_index":2014,"title":{},"body":{"entities/DbPullRequestGitHubEvents.html":{}}}],["event_time",{"_index":3374,"title":{},"body":{"injectables/PullRequestGithubEventsService.html":{}}}],["events",{"_index":3359,"title":{},"body":{"injectables/PullRequestGithubEventsService.html":{}}}],["evolution",{"_index":5182,"title":{},"body":{"controllers/UserListStatsController.html":{}}}],["example",{"_index":530,"title":{},"body":{"classes/ApplyUserCouponDto.html":{},"classes/BakeRepoDto.html":{},"classes/CollaboratorsDto.html":{},"classes/CommitAuthorDto.html":{},"classes/CommitsDto.html":{},"classes/ContributionPageMetaDto.html":{},"classes/Contributor.html":{},"classes/CreateBlogSummaryDto.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateInsightDto.html":{},"classes/CreateInsightMemberDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/CreateUserCollaborationDto.html":{},"classes/CreateUserHighlightDto.html":{},"classes/CreateUserListDto.html":{},"entities/DbBakedRepo.html":{},"entities/DbCommitAuthors.html":{},"entities/DbCommits.html":{},"entities/DbContribution.html":{},"entities/DbContributionStatTimeframe.html":{},"entities/DbContributionsProjects.html":{},"entities/DbContributorCategoryTimeframe.html":{},"entities/DbCoupon.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"classes/DbFilteredUser.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbPullRequestGitHubEvents.html":{},"entities/DbPullRequestReview.html":{},"entities/DbRepoLoginContributions.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"classes/DbTimezone.html":{},"classes/DbTopUser.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightReactionResponse.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserListContributorStat.html":{},"entities/DbUserListContributorStat-1.html":{},"entities/DbUserNotification.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"classes/FilterListContributorsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/FollowManyUsersDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/PageMetaDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoInfo.html":{},"classes/SupabaseAuthDto.html":{},"classes/TopProjectsDto.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateInsightMemberDto.html":{},"classes/UpdateUserCollaborationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"classes/UserOnboardingDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"classes/VotedRepoDto.html":{}}}],["exclude",{"_index":510,"title":{},"body":{"modules/AppModule.html":{},"injectables/BlogSummaryService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"injectables/IssueSummaryService.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["executioncontext",{"_index":2620,"title":{},"body":{"guards/EndorsementTokenGuard.html":{},"miscellaneous/variables.html":{}}}],["exist",{"_index":1319,"title":{},"body":{"injectables/CouponService.html":{},"controllers/UserHighlightsController.html":{}}}],["exist'})@apibadrequestresponse({description",{"_index":4657,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["existing",{"_index":3809,"title":{},"body":{"controllers/RepoStarController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{}}}],["existingcontributor",{"_index":5140,"title":{},"body":{"injectables/UserListService.html":{}}}],["existinguser",{"_index":4876,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["existinguser?.email",{"_index":4881,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["existinguser?.id",{"_index":4880,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["expand",{"_index":4112,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["expect",{"_index":5964,"title":{},"body":{"miscellaneous/variables.html":{}}}],["expiration",{"_index":1735,"title":{},"body":{"entities/DbCoupon.html":{}}}],["expired_at",{"_index":1316,"title":{},"body":{"injectables/CouponService.html":{},"entities/DbCoupon.html":{}}}],["explanation",{"_index":902,"title":{},"body":{"controllers/CodeExplanationController.html":{},"injectables/CodeExplanationService.html":{}}}],["explanation.controller",{"_index":3454,"title":{},"body":{"modules/PullRequestModule.html":{}}}],["explanation.controller.ts",{"_index":894,"title":{},"body":{"controllers/CodeExplanationController.html":{}}}],["explanation.controller.ts:22",{"_index":905,"title":{},"body":{"controllers/CodeExplanationController.html":{}}}],["explanation.dto",{"_index":906,"title":{},"body":{"controllers/CodeExplanationController.html":{},"injectables/CodeExplanationService.html":{}}}],["explanation.dto.ts",{"_index":2698,"title":{},"body":{"classes/GenerateCodeExplanationDto.html":{}}}],["explanation.dto.ts:13",{"_index":2701,"title":{},"body":{"classes/GenerateCodeExplanationDto.html":{}}}],["explanation.dto.ts:23",{"_index":2703,"title":{},"body":{"classes/GenerateCodeExplanationDto.html":{}}}],["explanation.dto.ts:33",{"_index":2702,"title":{},"body":{"classes/GenerateCodeExplanationDto.html":{}}}],["explanation.dto.ts:40",{"_index":2700,"title":{},"body":{"classes/GenerateCodeExplanationDto.html":{}}}],["explanation.service",{"_index":908,"title":{},"body":{"controllers/CodeExplanationController.html":{},"modules/PullRequestModule.html":{}}}],["explanation.service.ts",{"_index":915,"title":{},"body":{"injectables/CodeExplanationService.html":{}}}],["explanation.service.ts:10",{"_index":920,"title":{},"body":{"injectables/CodeExplanationService.html":{}}}],["explanation.service.ts:17",{"_index":919,"title":{},"body":{"injectables/CodeExplanationService.html":{}}}],["explanation.service.ts:7",{"_index":917,"title":{},"body":{"injectables/CodeExplanationService.html":{}}}],["explore",{"_index":5831,"title":{},"body":{"miscellaneous/variables.html":{}}}],["export",{"_index":59,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"modules/ApiServicesModule.html":{},"modules/AppModule.html":{},"classes/ApplyUserCouponDto.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"classes/BakeRepoDto.html":{},"controllers/BlogSummaryController.html":{},"modules/BlogSummaryModule.html":{},"injectables/BlogSummaryService.html":{},"interfaces/ChatResponse.html":{},"controllers/CodeExplanationController.html":{},"injectables/CodeExplanationService.html":{},"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"controllers/CodeTestSuggestionController.html":{},"injectables/CodeTestSuggestionService.html":{},"classes/CollaboratorsDto.html":{},"classes/CommitAuthorDto.html":{},"injectables/CommitAuthorsService.html":{},"classes/CommitsDto.html":{},"injectables/CommitsService.html":{},"modules/ContributionModule.html":{},"classes/ContributionPageMetaDto.html":{},"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"classes/ContributionsByProjectDto.html":{},"classes/ContributionsPageDto.html":{},"classes/ContributionsTimeframeDto.html":{},"classes/Contributor.html":{},"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"modules/ContributorModule.html":{},"classes/ContributorPullRequestsDto.html":{},"modules/CouponModule.html":{},"injectables/CouponService.html":{},"classes/CreateBlogSummaryDto.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateInsightDto.html":{},"classes/CreateInsightMemberDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/CreateLogDto.html":{},"classes/CreateUserCollaborationDto.html":{},"classes/CreateUserHighlightDto.html":{},"classes/CreateUserListDto.html":{},"injectables/CustomLogger.html":{},"modules/CustomerModule.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"entities/DbBakedRepo.html":{},"entities/DbCommitAuthors.html":{},"entities/DbCommits.html":{},"entities/DbContribution.html":{},"entities/DbContributionStatTimeframe.html":{},"entities/DbContributionsProjects.html":{},"entities/DbContributorCategoryTimeframe.html":{},"entities/DbCoupon.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"classes/DbFilteredUser.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbPullRequestGitHubEvents.html":{},"entities/DbPullRequestReview.html":{},"entities/DbRepoLoginContributions.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"classes/DbTimezone.html":{},"classes/DbTopUser.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightReactionResponse.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserListContributorStat.html":{},"entities/DbUserListContributorStat-1.html":{},"entities/DbUserNotification.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"controllers/EmojiController.html":{},"modules/EmojiModule.html":{},"injectables/EmojiService.html":{},"controllers/EndorsementController.html":{},"modules/EndorsementModule.html":{},"injectables/EndorsementService.html":{},"guards/EndorsementTokenGuard.html":{},"classes/FilterListContributorsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/FilteredUsersDto.html":{},"classes/FollowManyUsersDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"controllers/HighlightController.html":{},"modules/HighlightModule.html":{},"classes/HighlightOptionsDto.html":{},"injectables/HttpLoggerMiddleware.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"injectables/InsightRepoService.html":{},"modules/InsightsModule.html":{},"injectables/InsightsService.html":{},"controllers/IssueSummaryController.html":{},"modules/IssueSummaryModule.html":{},"injectables/IssueSummaryService.html":{},"modules/LogModule.html":{},"injectables/LogService.html":{},"modules/OpenAiModule.html":{},"injectables/OpenAiService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaParameters.html":{},"classes/PageOptionsDto.html":{},"injectables/PagerService.html":{},"interfaces/PaginationInput.html":{},"controllers/PizzaOvenController.html":{},"modules/PizzaOvenModule.html":{},"injectables/PizzaOvenService.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestGithubEventsService.html":{},"injectables/PullRequestInsightsService.html":{},"modules/PullRequestModule.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestReviewService.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"modules/RepoFilterModule.html":{},"injectables/RepoFilterService.html":{},"classes/RepoInfo.html":{},"modules/RepoModule.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"modules/StarModule.html":{},"injectables/StarService.html":{},"modules/StargazeModule.html":{},"injectables/StargazeService.html":{},"modules/StripeModule.html":{},"injectables/StripeService.html":{},"modules/StripeSubscriptionModule.html":{},"injectables/StripeSubscriptionService.html":{},"modules/StripeWebHookModule.html":{},"controllers/StripeWebhookController.html":{},"modules/SubmitModule.html":{},"injectables/SubmitService.html":{},"classes/SupabaseAuthDto.html":{},"injectables/SupabaseGuard.html":{},"injectables/SupabaseStrategy.html":{},"modules/TierModule.html":{},"injectables/TierService.html":{},"modules/TimescaleModule.html":{},"classes/TopProjectsDto.html":{},"classes/TopUsersDto.html":{},"classes/UpdateEndorsementDto.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateInsightMemberDto.html":{},"classes/UpdateUserCollaborationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowingController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"modules/UserListModule.html":{},"classes/UserListMostActiveContributorsDto.html":{},"injectables/UserListService.html":{},"controllers/UserListStatsController.html":{},"injectables/UserListStatsService.html":{},"modules/UserModule.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"classes/UserOnboardingDto.html":{},"injectables/UserOrganizationService.html":{},"controllers/UserRecommendationController.html":{},"classes/UserRepoOptionsDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"modules/UserReposModule.html":{},"injectables/UserReposService.html":{},"modules/VoteModule.html":{},"injectables/VoteService.html":{},"classes/VotedRepoDto.html":{}}}],["exports",{"_index":254,"title":{},"body":{"modules/ApiServicesModule.html":{},"modules/AuthModule.html":{},"modules/BlogSummaryModule.html":{},"modules/ContributionModule.html":{},"modules/CouponModule.html":{},"modules/CustomerModule.html":{},"modules/EndorsementModule.html":{},"modules/InsightsModule.html":{},"modules/IssueSummaryModule.html":{},"modules/LogModule.html":{},"modules/OpenAiModule.html":{},"modules/PizzaOvenModule.html":{},"modules/PullRequestModule.html":{},"modules/RepoFilterModule.html":{},"modules/RepoModule.html":{},"modules/StarModule.html":{},"modules/StargazeModule.html":{},"modules/StripeModule.html":{},"modules/StripeSubscriptionModule.html":{},"modules/StripeWebHookModule.html":{},"modules/SubmitModule.html":{},"modules/TierModule.html":{},"modules/TimescaleModule.html":{},"modules/UserListModule.html":{},"modules/UserModule.html":{},"modules/UserReposModule.html":{},"modules/VoteModule.html":{}}}],["express",{"_index":2869,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{},"license.html":{}}}],["extends",{"_index":1054,"title":{},"body":{"classes/ContributionPageMetaDto.html":{},"classes/ContributionPageOptionsDto.html":{},"classes/ContributorPullRequestsDto.html":{},"injectables/CustomLogger.html":{},"entities/DbBakedRepo.html":{},"entities/DbCommitAuthors.html":{},"entities/DbCommits.html":{},"entities/DbContribution.html":{},"entities/DbCoupon.html":{},"entities/DbCustomer.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbPullRequestGitHubEvents.html":{},"entities/DbPullRequestReview.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"classes/DbUserHighlightReactionResponse.html":{},"entities/DbUserList.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/SupabaseGuard.html":{},"injectables/SupabaseStrategy.html":{},"classes/UpdateEndorsementDto.html":{},"classes/UpdateInsightDto.html":{},"classes/UserListMostActiveContributorsDto.html":{},"classes/UserRepoOptionsDto.html":{}}}],["extractjwt",{"_index":4253,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":4266,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["extractor",{"_index":4265,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["f",{"_index":5510,"title":{},"body":{"index.html":{}}}],["facilitate",{"_index":5482,"title":{},"body":{"index.html":{}}}],["false",{"_index":460,"title":{},"body":{"modules/AppModule.html":{},"classes/BakeRepoDto.html":{},"classes/ContributionPageMetaDto.html":{},"classes/Contributor.html":{},"classes/CreateInsightDto.html":{},"classes/CreateUserListDto.html":{},"entities/DbCommitAuthors.html":{},"entities/DbContribution.html":{},"entities/DbContributionStatTimeframe.html":{},"entities/DbContributionsProjects.html":{},"entities/DbContributorCategoryTimeframe.html":{},"entities/DbEmoji.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbPullRequestGitHubEvents.html":{},"entities/DbRepoLoginContributions.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserListContributorStat.html":{},"entities/DbUserListContributorStat-1.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"guards/EndorsementTokenGuard.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"classes/PageMetaDto.html":{},"controllers/RepoContributionsController.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserListStatsController.html":{},"injectables/VoteService.html":{},"miscellaneous/variables.html":{}}}],["false})@apiquery({name",{"_index":3575,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["false})@column('boolean",{"_index":1948,"title":{},"body":{"entities/DbPullRequest.html":{},"entities/DbPullRequestGitHubEvents.html":{}}}],["false})@column({default",{"_index":1806,"title":{},"body":{"entities/DbInsight.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbUserList.html":{}}}],["false})@column({type",{"_index":2243,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["false})@isboolean",{"_index":766,"title":{},"body":{"classes/BakeRepoDto.html":{},"classes/CreateInsightDto.html":{},"classes/CreateUserListDto.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{}}}],["false})@isboolean()@isoptional",{"_index":4340,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["fastifyadapter",{"_index":5840,"title":{},"body":{"miscellaneous/variables.html":{}}}],["favorite",{"_index":1805,"title":{},"body":{"entities/DbInsight.html":{}}}],["featured",{"_index":1808,"title":{},"body":{"entities/DbInsight.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserList.html":{},"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"controllers/UserListController.html":{}}}],["featurehighlight",{"_index":2782,"title":{},"body":{"controllers/HighlightController.html":{}}}],["featurehighlight(id",{"_index":2789,"title":{},"body":{"controllers/HighlightController.html":{}}}],["features",{"_index":4283,"title":{},"body":{"injectables/TierService.html":{}}}],["fetch",{"_index":861,"title":{},"body":{"interfaces/ChatResponse.html":{},"injectables/OpenAiService.html":{}}}],["fetched",{"_index":3005,"title":{},"body":{"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{}}}],["fetcher",{"_index":868,"title":{},"body":{"interfaces/ChatResponse.html":{},"injectables/OpenAiService.html":{}}}],["fetcher(this.configservice.get(\"openai.completionsurl",{"_index":872,"title":{},"body":{"interfaces/ChatResponse.html":{},"injectables/OpenAiService.html":{}}}],["fetches",{"_index":4677,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["file",{"_index":5,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"modules/ApiServicesModule.html":{},"modules/AppModule.html":{},"classes/ApplyUserCouponDto.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"classes/BakeRepoDto.html":{},"controllers/BlogSummaryController.html":{},"modules/BlogSummaryModule.html":{},"injectables/BlogSummaryService.html":{},"interfaces/ChatResponse.html":{},"controllers/CodeExplanationController.html":{},"injectables/CodeExplanationService.html":{},"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"controllers/CodeTestSuggestionController.html":{},"injectables/CodeTestSuggestionService.html":{},"classes/CollaboratorsDto.html":{},"classes/CommitAuthorDto.html":{},"injectables/CommitAuthorsService.html":{},"classes/CommitsDto.html":{},"injectables/CommitsService.html":{},"modules/ContributionModule.html":{},"classes/ContributionPageMetaDto.html":{},"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"classes/ContributionsByProjectDto.html":{},"classes/ContributionsPageDto.html":{},"classes/ContributionsTimeframeDto.html":{},"classes/Contributor.html":{},"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"modules/ContributorModule.html":{},"classes/ContributorPullRequestsDto.html":{},"modules/CouponModule.html":{},"injectables/CouponService.html":{},"classes/CreateBlogSummaryDto.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateInsightDto.html":{},"classes/CreateInsightMemberDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/CreateLogDto.html":{},"classes/CreateUserCollaborationDto.html":{},"classes/CreateUserHighlightDto.html":{},"classes/CreateUserListDto.html":{},"injectables/CustomLogger.html":{},"modules/CustomerModule.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"entities/DbBakedRepo.html":{},"entities/DbCommitAuthors.html":{},"entities/DbCommits.html":{},"entities/DbContribution.html":{},"entities/DbContributionStatTimeframe.html":{},"entities/DbContributionsProjects.html":{},"entities/DbContributorCategoryTimeframe.html":{},"entities/DbCoupon.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"classes/DbFilteredUser.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbPullRequestGitHubEvents.html":{},"entities/DbPullRequestReview.html":{},"entities/DbRepoLoginContributions.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"classes/DbTimezone.html":{},"classes/DbTopUser.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightReactionResponse.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserListContributorStat.html":{},"entities/DbUserListContributorStat-1.html":{},"entities/DbUserNotification.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"controllers/EmojiController.html":{},"modules/EmojiModule.html":{},"injectables/EmojiService.html":{},"controllers/EndorsementController.html":{},"modules/EndorsementModule.html":{},"injectables/EndorsementService.html":{},"guards/EndorsementTokenGuard.html":{},"classes/FilterListContributorsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/FilteredUsersDto.html":{},"classes/FollowManyUsersDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"controllers/HighlightController.html":{},"modules/HighlightModule.html":{},"classes/HighlightOptionsDto.html":{},"injectables/HttpLoggerMiddleware.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"injectables/InsightRepoService.html":{},"modules/InsightsModule.html":{},"injectables/InsightsService.html":{},"controllers/IssueSummaryController.html":{},"modules/IssueSummaryModule.html":{},"injectables/IssueSummaryService.html":{},"modules/LogModule.html":{},"injectables/LogService.html":{},"modules/OpenAiModule.html":{},"injectables/OpenAiService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaParameters.html":{},"classes/PageOptionsDto.html":{},"injectables/PagerService.html":{},"interfaces/PaginationInput.html":{},"controllers/PizzaOvenController.html":{},"modules/PizzaOvenModule.html":{},"injectables/PizzaOvenService.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestGithubEventsService.html":{},"injectables/PullRequestInsightsService.html":{},"modules/PullRequestModule.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestReviewService.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"modules/RepoFilterModule.html":{},"injectables/RepoFilterService.html":{},"classes/RepoInfo.html":{},"modules/RepoModule.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"modules/StarModule.html":{},"injectables/StarService.html":{},"modules/StargazeModule.html":{},"injectables/StargazeService.html":{},"modules/StripeModule.html":{},"injectables/StripeService.html":{},"modules/StripeSubscriptionModule.html":{},"injectables/StripeSubscriptionService.html":{},"modules/StripeWebHookModule.html":{},"controllers/StripeWebhookController.html":{},"modules/SubmitModule.html":{},"injectables/SubmitService.html":{},"classes/SupabaseAuthDto.html":{},"injectables/SupabaseGuard.html":{},"injectables/SupabaseStrategy.html":{},"modules/TierModule.html":{},"injectables/TierService.html":{},"modules/TimescaleModule.html":{},"classes/TopProjectsDto.html":{},"classes/TopUsersDto.html":{},"classes/UpdateEndorsementDto.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateInsightMemberDto.html":{},"classes/UpdateUserCollaborationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowingController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"modules/UserListModule.html":{},"classes/UserListMostActiveContributorsDto.html":{},"injectables/UserListService.html":{},"controllers/UserListStatsController.html":{},"injectables/UserListStatsService.html":{},"modules/UserModule.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"classes/UserOnboardingDto.html":{},"injectables/UserOrganizationService.html":{},"controllers/UserRecommendationController.html":{},"classes/UserRepoOptionsDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"modules/UserReposModule.html":{},"injectables/UserReposService.html":{},"modules/VoteModule.html":{},"injectables/VoteService.html":{},"classes/VotedRepoDto.html":{},"index.html":{}}}],["files",{"_index":1934,"title":{},"body":{"entities/DbPullRequest.html":{},"entities/DbPullRequestGitHubEvents.html":{},"index.html":{},"license.html":{}}}],["filter",{"_index":2310,"title":{},"body":{"classes/DbUserHighlightReactionResponse.html":{},"classes/FilterOptionsDto.html":{},"classes/FilteredUsersDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/TopUsersDto.html":{}}}],["filter((notification",{"_index":5295,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["filter.module",{"_index":3449,"title":{},"body":{"modules/PullRequestModule.html":{},"modules/RepoModule.html":{}}}],["filter.module.ts",{"_index":3635,"title":{},"body":{"modules/RepoFilterModule.html":{}}}],["filter.service",{"_index":3402,"title":{},"body":{"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"modules/RepoFilterModule.html":{},"injectables/RepoService.html":{},"modules/UserModule.html":{}}}],["filter.service.ts",{"_index":3636,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["filter.service.ts:15",{"_index":3642,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["filter.service.ts:86",{"_index":3640,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["filter/insightfilterfieldsenum",{"_index":3643,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["filtered",{"_index":206,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["filtered_users",{"_index":217,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["filtered_users\".\"user_login",{"_index":219,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["filteredusersdto",{"_index":2682,"title":{"classes/FilteredUsersDto.html":{}},"body":{"classes/FilteredUsersDto.html":{},"controllers/UserController.html":{}}}],["filterlistcontributorsdto",{"_index":2629,"title":{"classes/FilterListContributorsDto.html":{}},"body":{"classes/FilterListContributorsDto.html":{},"controllers/UserListController.html":{},"injectables/UserListService.html":{}}}],["filteroptionsdto",{"_index":2668,"title":{"classes/FilterOptionsDto.html":{}},"body":{"classes/FilterOptionsDto.html":{},"controllers/PullRequestController.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/RepoFilterService.html":{}}}],["filters",{"_index":1223,"title":{},"body":{"controllers/ContributorController.html":{},"controllers/PullRequestController.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"controllers/RepoController.html":{},"injectables/RepoFilterService.html":{},"injectables/RepoService.html":{},"injectables/UserHighlightsService.html":{}}}],["filters.foreach(([sql",{"_index":3665,"title":{},"body":{"injectables/RepoFilterService.html":{},"injectables/UserHighlightsService.html":{}}}],["filters.push",{"_index":3656,"title":{},"body":{"injectables/RepoFilterService.html":{},"injectables/UserHighlightsService.html":{}}}],["filters.push([\"repos.stars",{"_index":3654,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["filters.push([`'${startdate}'::timestamp",{"_index":3430,"title":{},"body":{"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoService.html":{}}}],["filters.push([`:topic",{"_index":3650,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["filters.push([`lower(repos.full_name)=:repo",{"_index":3648,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["filters.push([`repos.id",{"_index":3646,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["filters.push([this.hacktoberfestprcountfilterbuilderend(interval",{"_index":3429,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["filters.push([this.hacktoberfestprcountfilterbuilderstart",{"_index":3428,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["filters.push([this.hacktoberfestprfilterbuilderend(range",{"_index":3533,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["filters.push([this.hacktoberfestprfilterbuilderstart",{"_index":3532,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["filterservice",{"_index":3492,"title":{},"body":{"injectables/PullRequestService.html":{},"injectables/RepoService.html":{}}}],["find",{"_index":2795,"title":{},"body":{"controllers/HighlightController.html":{},"controllers/PullRequestController.html":{},"controllers/RepoContributionsController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserInsightMemberController.html":{}}}],["findall",{"_index":1125,"title":{},"body":{"injectables/ContributionService.html":{},"injectables/EmojiService.html":{},"injectables/EndorsementService.html":{},"injectables/PullRequestService.html":{},"controllers/RepoController.html":{},"injectables/RepoService.html":{},"injectables/UserHighlightsService.html":{}}}],["findall(@query",{"_index":3627,"title":{},"body":{"controllers/RepoController.html":{}}}],["findall(pageoptionsdto",{"_index":1133,"title":{},"body":{"injectables/ContributionService.html":{},"injectables/EmojiService.html":{},"injectables/EndorsementService.html":{},"injectables/PullRequestService.html":{},"controllers/RepoController.html":{},"injectables/RepoService.html":{},"injectables/UserHighlightsService.html":{}}}],["findallbakedrepos",{"_index":3254,"title":{},"body":{"injectables/PizzaOvenService.html":{}}}],["findallbakedrepos(pageoptionsdto",{"_index":3260,"title":{},"body":{"injectables/PizzaOvenService.html":{}}}],["findallbycontributor",{"_index":3481,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["findallbycontributor(contributor",{"_index":3496,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["findallbycreatoruserid",{"_index":2567,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["findallbycreatoruserid(userid",{"_index":2579,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["findallbyownerandrepo",{"_index":3560,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["findallbyownerandrepo(owner",{"_index":3563,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["findallbyownerrepoandcontributorlogin",{"_index":3561,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["findallbyownerrepoandcontributorlogin(owner",{"_index":3569,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["findallbyprauthor",{"_index":3348,"title":{},"body":{"injectables/PullRequestGithubEventsService.html":{}}}],["findallbyprauthor(author",{"_index":3353,"title":{},"body":{"injectables/PullRequestGithubEventsService.html":{}}}],["findallbyrecipientuserid",{"_index":2568,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["findallbyrecipientuserid(userid",{"_index":2581,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["findallbyrepoid",{"_index":1126,"title":{},"body":{"injectables/ContributionService.html":{},"controllers/RepoContributionsController.html":{}}}],["findallbyrepoid(id",{"_index":3577,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["findallbyrepoid(repoid",{"_index":1136,"title":{},"body":{"injectables/ContributionService.html":{}}}],["findallbyrepoowneroruser",{"_index":2569,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["findallbyrepoowneroruser(repoowneroruser",{"_index":2583,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["findallbyrepoownerorusername",{"_index":2474,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["findallbyrepoownerorusername(repoowneroruser",{"_index":2492,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["findallbyuserid",{"_index":3035,"title":{},"body":{"injectables/InsightsService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserListService.html":{},"injectables/UserNotificationService.html":{},"injectables/UserOrganizationService.html":{},"injectables/UserReposService.html":{}}}],["findallbyuserid(pageoptionsdto",{"_index":3045,"title":{},"body":{"injectables/InsightsService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserListService.html":{},"injectables/UserReposService.html":{}}}],["findallbyuserid(userid",{"_index":5283,"title":{},"body":{"injectables/UserNotificationService.html":{},"injectables/UserOrganizationService.html":{}}}],["findallbyuserlogin",{"_index":1127,"title":{},"body":{"injectables/ContributionService.html":{}}}],["findallbyuserlogin(repoid",{"_index":1138,"title":{},"body":{"injectables/ContributionService.html":{}}}],["findallchurncontributors",{"_index":3482,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["findallchurncontributors(pageoptionsdto",{"_index":3498,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["findallchurnpullrequestcontributors",{"_index":1246,"title":{},"body":{"controllers/ContributorInsightsController.html":{}}}],["findallchurnpullrequestcontributors(pageoptionsdto",{"_index":1250,"title":{},"body":{"controllers/ContributorInsightsController.html":{}}}],["findallcommitauthors",{"_index":992,"title":{},"body":{"injectables/CommitAuthorsService.html":{}}}],["findallcommitauthors(pageoptionsdto",{"_index":998,"title":{},"body":{"injectables/CommitAuthorsService.html":{}}}],["findallcommitsbybakedrepoid",{"_index":1023,"title":{},"body":{"injectables/CommitsService.html":{}}}],["findallcommitsbybakedrepoid(pageoptionsdto",{"_index":1030,"title":{},"body":{"injectables/CommitsService.html":{}}}],["findallcommitsbycommitauthorid",{"_index":1024,"title":{},"body":{"injectables/CommitsService.html":{}}}],["findallcommitsbycommitauthorid(pageoptionsdto",{"_index":1032,"title":{},"body":{"injectables/CommitsService.html":{}}}],["findallcontributorsbyrepoid",{"_index":3582,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["findallcontributorswithfilters",{"_index":3483,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["findallcontributorswithfilters(pageoptionsdto",{"_index":3500,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["findallemojis",{"_index":2439,"title":{},"body":{"controllers/EmojiController.html":{}}}],["findallemojis(@query",{"_index":2453,"title":{},"body":{"controllers/EmojiController.html":{}}}],["findallemojis(pageoptionsdto",{"_index":2440,"title":{},"body":{"controllers/EmojiController.html":{}}}],["findallendorsements",{"_index":2475,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["findallendorsements(@query",{"_index":2532,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["findallendorsements(pageoptionsdto",{"_index":2497,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["findallendorsementsbyrepo",{"_index":2476,"title":{},"body":{"controllers/EndorsementController.html":{},"injectables/EndorsementService.html":{}}}],["findallendorsementsbyrepo(owner",{"_index":2499,"title":{},"body":{"controllers/EndorsementController.html":{},"injectables/EndorsementService.html":{}}}],["findallendorsementsbyrepobyuser",{"_index":2542,"title":{},"body":{"controllers/EndorsementController.html":{},"injectables/EndorsementService.html":{}}}],["findallendorsementsbyrepobyuser(owner",{"_index":2586,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["findallfeatured",{"_index":3036,"title":{},"body":{"injectables/InsightsService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserListService.html":{}}}],["findallfeatured(pageoptionsdto",{"_index":3047,"title":{},"body":{"injectables/InsightsService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserListService.html":{}}}],["findallfeaturedhighlights",{"_index":2783,"title":{},"body":{"controllers/HighlightController.html":{}}}],["findallfeaturedhighlights(@query",{"_index":2837,"title":{},"body":{"controllers/HighlightController.html":{}}}],["findallfeaturedhighlights(pageoptionsdto",{"_index":2799,"title":{},"body":{"controllers/HighlightController.html":{}}}],["findallfollowers",{"_index":4548,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["findallfollowers(userid",{"_index":4560,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["findallfollowinglist",{"_index":4549,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["findallfollowinglist(userid",{"_index":4562,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["findallhighlightreactions",{"_index":4730,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["findallhighlightreactions(highlightid",{"_index":4754,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["findallhighlightrepos",{"_index":2784,"title":{},"body":{"controllers/HighlightController.html":{},"injectables/UserHighlightsService.html":{}}}],["findallhighlightrepos(@query",{"_index":2846,"title":{},"body":{"controllers/HighlightController.html":{}}}],["findallhighlightrepos(pageoptionsdto",{"_index":2803,"title":{},"body":{"controllers/HighlightController.html":{},"injectables/UserHighlightsService.html":{}}}],["findallhighlights",{"_index":2785,"title":{},"body":{"controllers/HighlightController.html":{}}}],["findallhighlights(@query",{"_index":2834,"title":{},"body":{"controllers/HighlightController.html":{}}}],["findallhighlights(pageoptionsdto",{"_index":2807,"title":{},"body":{"controllers/HighlightController.html":{}}}],["findallhighlightsbyusername",{"_index":4452,"title":{},"body":{"controllers/UserController.html":{}}}],["findallhighlightsbyusername(username",{"_index":4460,"title":{},"body":{"controllers/UserController.html":{}}}],["findallinsightmembers",{"_index":2934,"title":{},"body":{"injectables/InsightMemberService.html":{},"controllers/UserInsightMemberController.html":{}}}],["findallinsightmembers(pageoptionsdto",{"_index":2950,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["findallinsightsbyuserid",{"_index":4836,"title":{},"body":{"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["findallinsightsbyuserid(pageoptionsdto",{"_index":4846,"title":{},"body":{"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["findalllistcontributorstats",{"_index":5214,"title":{},"body":{"injectables/UserListStatsService.html":{}}}],["findalllistcontributorstats(pageoptionsdto",{"_index":5227,"title":{},"body":{"injectables/UserListStatsService.html":{}}}],["findallorgsbyusername",{"_index":4453,"title":{},"body":{"controllers/UserController.html":{}}}],["findallorgsbyusername(username",{"_index":4464,"title":{},"body":{"controllers/UserController.html":{}}}],["findallrecentcontributors",{"_index":3484,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["findallrecentcontributors(pageoptionsdto",{"_index":3502,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["findallrecentpullrequestcontributors",{"_index":1247,"title":{},"body":{"controllers/ContributorInsightsController.html":{}}}],["findallrecentpullrequestcontributors(pageoptionsdto",{"_index":1259,"title":{},"body":{"controllers/ContributorInsightsController.html":{}}}],["findallrepeatcontributors",{"_index":3485,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["findallrepeatcontributors(pageoptionsdto",{"_index":3504,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["findallrepeatpullrequestcontributors",{"_index":1248,"title":{},"body":{"controllers/ContributorInsightsController.html":{}}}],["findallrepeatpullrequestcontributors(pageoptionsdto",{"_index":1262,"title":{},"body":{"controllers/ContributorInsightsController.html":{}}}],["findallreposwithfilters",{"_index":3607,"title":{},"body":{"controllers/RepoController.html":{}}}],["findallreposwithfilters(@query",{"_index":3629,"title":{},"body":{"controllers/RepoController.html":{}}}],["findallreposwithfilters(pageoptionsdto",{"_index":3612,"title":{},"body":{"controllers/RepoController.html":{}}}],["findallreviewsbyprid",{"_index":3471,"title":{},"body":{"injectables/PullRequestReviewService.html":{}}}],["findallreviewsbyprid(prid",{"_index":3475,"title":{},"body":{"injectables/PullRequestReviewService.html":{}}}],["findalltopreposbyusername",{"_index":4454,"title":{},"body":{"controllers/UserController.html":{}}}],["findalltopreposbyusername(username",{"_index":4470,"title":{},"body":{"controllers/UserController.html":{}}}],["findallusercollaborations",{"_index":4384,"title":{},"body":{"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{}}}],["findallusercollaborations(pageoptionsdto",{"_index":4395,"title":{},"body":{"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{}}}],["findallusercontributionsbyrepoid",{"_index":3562,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["findallusercontributionsbyrepoid(owner",{"_index":3580,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["findallusercreatedendorsements",{"_index":4529,"title":{},"body":{"controllers/UserEndorsementController.html":{}}}],["findallusercreatedendorsements(@userid",{"_index":4540,"title":{},"body":{"controllers/UserEndorsementController.html":{}}}],["findallusercreatedendorsements(userid",{"_index":4531,"title":{},"body":{"controllers/UserEndorsementController.html":{}}}],["findallusercreatedendorsementsbyusername",{"_index":2477,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["findallusercreatedendorsementsbyusername(username",{"_index":2503,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["findalluserreceivedendorsements",{"_index":4530,"title":{},"body":{"controllers/UserEndorsementController.html":{}}}],["findalluserreceivedendorsements(@userid",{"_index":4543,"title":{},"body":{"controllers/UserEndorsementController.html":{}}}],["findalluserreceivedendorsements(userid",{"_index":4534,"title":{},"body":{"controllers/UserEndorsementController.html":{}}}],["findalluserreceivedendorsementsbyusername",{"_index":2478,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["findalluserreceivedendorsementsbyusername(username",{"_index":2507,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["findalluserstargazed",{"_index":3851,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["findalluserstargazed(pageoptionsdto",{"_index":3863,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["findalluserstarred",{"_index":3804,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["findalluserstarred(pageoptionsdto",{"_index":3820,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["findallusersubmitted",{"_index":3889,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["findallusersubmitted(pageoptionsdto",{"_index":3901,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["findalluservoted",{"_index":3926,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["findalluservoted(pageoptionsdto",{"_index":3939,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["findallwithfilters",{"_index":3486,"title":{},"body":{"injectables/PullRequestService.html":{},"injectables/RepoService.html":{}}}],["findallwithfilters(pageoptionsdto",{"_index":3506,"title":{},"body":{"injectables/PullRequestService.html":{},"injectables/RepoService.html":{}}}],["findbakedrepobyid",{"_index":3169,"title":{},"body":{"controllers/PizzaOvenController.html":{},"injectables/PizzaOvenService.html":{}}}],["findbakedrepobyid(@param(\"id",{"_index":3223,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["findbakedrepobyid(id",{"_index":3175,"title":{},"body":{"controllers/PizzaOvenController.html":{},"injectables/PizzaOvenService.html":{}}}],["findbycustomerid",{"_index":1524,"title":{},"body":{"injectables/CustomerService.html":{}}}],["findbycustomerid(id",{"_index":1533,"title":{},"body":{"injectables/CustomerService.html":{}}}],["findbyid",{"_index":1525,"title":{},"body":{"injectables/CustomerService.html":{}}}],["findbyid(id",{"_index":1535,"title":{},"body":{"injectables/CustomerService.html":{}}}],["findcommitauthorbyid",{"_index":993,"title":{},"body":{"injectables/CommitAuthorsService.html":{},"controllers/PizzaOvenController.html":{}}}],["findcommitauthorbyid(@param(\"id",{"_index":3230,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["findcommitauthorbyid(id",{"_index":1000,"title":{},"body":{"injectables/CommitAuthorsService.html":{},"controllers/PizzaOvenController.html":{}}}],["findcommitbyid",{"_index":1025,"title":{},"body":{"injectables/CommitsService.html":{},"controllers/PizzaOvenController.html":{}}}],["findcommitbyid(@param(\"id",{"_index":3238,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["findcommitbyid(id",{"_index":1034,"title":{},"body":{"injectables/CommitsService.html":{},"controllers/PizzaOvenController.html":{}}}],["findcontributionsbyproject",{"_index":182,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["findcontributionsbyproject(listid",{"_index":5229,"title":{},"body":{"injectables/UserListStatsService.html":{}}}],["findcontributionsintimeframe",{"_index":136,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["findcontributionsintimeframe(options",{"_index":5231,"title":{},"body":{"injectables/UserListStatsService.html":{}}}],["findcontributionsintimeframehelper",{"_index":5215,"title":{},"body":{"injectables/UserListStatsService.html":{}}}],["findcontributionsintimeframehelper(startdate",{"_index":5233,"title":{},"body":{"injectables/UserListStatsService.html":{}}}],["findcontributorcategoriesbytimeframe",{"_index":126,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["findcontributorcategoriesbytimeframe(options",{"_index":5235,"title":{},"body":{"injectables/UserListStatsService.html":{}}}],["findcontributorcategoriesintimeframehelper",{"_index":5216,"title":{},"body":{"injectables/UserListStatsService.html":{}}}],["findcontributorcategoriesintimeframehelper(startdate",{"_index":5237,"title":{},"body":{"injectables/UserListStatsService.html":{}}}],["findcontributorpullrequestgithubevents",{"_index":4455,"title":{},"body":{"controllers/UserController.html":{}}}],["findcontributorpullrequestgithubevents(username",{"_index":4474,"title":{},"body":{"controllers/UserController.html":{}}}],["findcontributorpullrequests",{"_index":4456,"title":{},"body":{"controllers/UserController.html":{}}}],["findcontributorpullrequests(username",{"_index":4479,"title":{},"body":{"controllers/UserController.html":{}}}],["findcontributorsbyfilter",{"_index":5085,"title":{},"body":{"injectables/UserListService.html":{}}}],["findcontributorsbyfilter(pageoptionsdto",{"_index":5108,"title":{},"body":{"injectables/UserListService.html":{}}}],["findcontributorsbylistid",{"_index":5086,"title":{},"body":{"injectables/UserListService.html":{}}}],["findcontributorsbylistid(pageoptionsdto",{"_index":5110,"title":{},"body":{"injectables/UserListService.html":{}}}],["findcoupon",{"_index":1303,"title":{},"body":{"injectables/CouponService.html":{}}}],["findcoupon(code",{"_index":1310,"title":{},"body":{"injectables/CouponService.html":{}}}],["findendorsementbyid",{"_index":2479,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["findendorsementbyid(@param(\"id",{"_index":2546,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["findendorsementbyid(id",{"_index":2510,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["findfeaturedinsights",{"_index":2887,"title":{},"body":{"controllers/InsightController.html":{}}}],["findfeaturedinsights(@query",{"_index":2923,"title":{},"body":{"controllers/InsightController.html":{}}}],["findfeaturedinsights(pageoptionsdto",{"_index":2890,"title":{},"body":{"controllers/InsightController.html":{}}}],["findinsightpagebyid",{"_index":2888,"title":{},"body":{"controllers/InsightController.html":{}}}],["findinsightpagebyid(@param(\"id",{"_index":2921,"title":{},"body":{"controllers/InsightController.html":{}}}],["findinsightpagebyid(id",{"_index":2895,"title":{},"body":{"controllers/InsightController.html":{}}}],["findlistcontributorshighlightedrepos",{"_index":5087,"title":{},"body":{"injectables/UserListService.html":{}}}],["findlistcontributorshighlightedrepos(pageoptionsdto",{"_index":5112,"title":{},"body":{"injectables/UserListService.html":{}}}],["findlistcontributorshighlights",{"_index":5088,"title":{},"body":{"injectables/UserListService.html":{}}}],["findlistcontributorshighlights(pageoptionsdto",{"_index":5114,"title":{},"body":{"injectables/UserListService.html":{}}}],["findlistcontributorstatsbyproject",{"_index":73,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["findlistcontributorstatsbyproject(options",{"_index":5239,"title":{},"body":{"injectables/UserListStatsService.html":{}}}],["findnewcontributorsintimerange",{"_index":3487,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["findnewcontributorsintimerange(pageoptionsdto",{"_index":3508,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["findonebyid",{"_index":2570,"title":{},"body":{"injectables/EndorsementService.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightsService.html":{},"controllers/RepoController.html":{},"injectables/RepoService.html":{},"injectables/UserCollaborationService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserListService.html":{},"injectables/UserReposService.html":{}}}],["findonebyid(@param(\"id",{"_index":3623,"title":{},"body":{"controllers/RepoController.html":{}}}],["findonebyid(id",{"_index":2588,"title":{},"body":{"injectables/EndorsementService.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightsService.html":{},"controllers/RepoController.html":{},"injectables/RepoService.html":{},"injectables/UserCollaborationService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserListService.html":{},"injectables/UserReposService.html":{}}}],["findonebyownerandrepo",{"_index":3608,"title":{},"body":{"controllers/RepoController.html":{},"injectables/RepoService.html":{}}}],["findonebyownerandrepo(@param(\"owner",{"_index":3625,"title":{},"body":{"controllers/RepoController.html":{}}}],["findonebyownerandrepo(owner",{"_index":3617,"title":{},"body":{"controllers/RepoController.html":{},"injectables/RepoService.html":{}}}],["findonebyrepoid",{"_index":3927,"title":{},"body":{"controllers/RepoVoteController.html":{},"injectables/VoteService.html":{}}}],["findonebyrepoid(@param(\"repoid",{"_index":3961,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["findonebyrepoid(repoid",{"_index":3943,"title":{},"body":{"controllers/RepoVoteController.html":{},"injectables/VoteService.html":{}}}],["findoneuserbyid",{"_index":4457,"title":{},"body":{"controllers/UserController.html":{}}}],["findoneuserbyid(@param(\"username",{"_index":4508,"title":{},"body":{"controllers/UserController.html":{}}}],["findoneuserbyid(username",{"_index":4484,"title":{},"body":{"controllers/UserController.html":{}}}],["findoneuserbyuserame",{"_index":4486,"title":{},"body":{"controllers/UserController.html":{}}}],["findoneuserhighlightreaction",{"_index":4731,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["findoneuserhighlightreaction(highlightid",{"_index":4759,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["findorgsrecommendations",{"_index":3698,"title":{},"body":{"injectables/RepoService.html":{}}}],["findorgsrecommendations(userid",{"_index":3713,"title":{},"body":{"injectables/RepoService.html":{}}}],["findpubliconebyid",{"_index":5089,"title":{},"body":{"injectables/UserListService.html":{}}}],["findpubliconebyid(id",{"_index":5117,"title":{},"body":{"injectables/UserListService.html":{}}}],["findrecommendations",{"_index":3699,"title":{},"body":{"injectables/RepoService.html":{}}}],["findrecommendations(interests",{"_index":3715,"title":{},"body":{"injectables/RepoService.html":{}}}],["finds",{"_index":2488,"title":{},"body":{"controllers/EndorsementController.html":{},"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"controllers/PizzaOvenController.html":{},"controllers/PullRequestController.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{}}}],["findtop",{"_index":4732,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["findtop(pageoptionsdto",{"_index":4761,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["findtophighlights",{"_index":2786,"title":{},"body":{"controllers/HighlightController.html":{}}}],["findtophighlights(@query",{"_index":2852,"title":{},"body":{"controllers/HighlightController.html":{}}}],["findtophighlights(pageoptionsdto",{"_index":2810,"title":{},"body":{"controllers/HighlightController.html":{}}}],["finduserfollowerbyid",{"_index":4550,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["finduserfollowerbyid(userid",{"_index":4564,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["finduserorgsreporecommendations",{"_index":5333,"title":{},"body":{"controllers/UserRecommendationController.html":{}}}],["finduserorgsreporecommendations(@userid",{"_index":5352,"title":{},"body":{"controllers/UserRecommendationController.html":{}}}],["finduserorgsreporecommendations(userid",{"_index":5335,"title":{},"body":{"controllers/UserRecommendationController.html":{}}}],["finduserreporecommendations",{"_index":5334,"title":{},"body":{"controllers/UserRecommendationController.html":{}}}],["finduserreporecommendations(@userid",{"_index":5348,"title":{},"body":{"controllers/UserRecommendationController.html":{}}}],["finduserreporecommendations(userid",{"_index":5341,"title":{},"body":{"controllers/UserRecommendationController.html":{}}}],["finish",{"_index":764,"title":{},"body":{"classes/BakeRepoDto.html":{}}}],["first",{"_index":198,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/BlogSummaryService.html":{},"classes/CreateUserHighlightDto.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserTopRepo.html":{},"injectables/UserListStatsService.html":{}}}],["fitness",{"_index":5677,"title":{},"body":{"license.html":{}}}],["fix",{"_index":5584,"title":{},"body":{"index.html":{}}}],["fix(cli",{"_index":1990,"title":{},"body":{"entities/DbPullRequest.html":{},"entities/DbPullRequestGitHubEvents.html":{}}}],["fixed",{"_index":2723,"title":{},"body":{"classes/GeneratePullRequestDescriptionDto.html":{}}}],["flag",{"_index":1064,"title":{},"body":{"classes/ContributionPageMetaDto.html":{},"entities/DbInsight.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbUserList.html":{},"classes/PageMetaDto.html":{},"classes/SupabaseAuthDto.html":{}}}],["folder",{"_index":5561,"title":{},"body":{"index.html":{}}}],["follow",{"_index":2416,"title":{},"body":{"entities/DbUserToUserFollows.html":{},"classes/FollowManyUsersDto.html":{},"controllers/RepoStargazeController.html":{},"controllers/UserFollowsController.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["follow.controller",{"_index":5251,"title":{},"body":{"modules/UserModule.html":{}}}],["follow.controller.ts",{"_index":4601,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["follow.controller.ts:108",{"_index":4624,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["follow.controller.ts:32",{"_index":4618,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["follow.controller.ts:50",{"_index":4609,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["follow.controller.ts:69",{"_index":4613,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["follow.service",{"_index":4596,"title":{},"body":{"controllers/UserFollowingController.html":{},"controllers/UserFollowsController.html":{},"injectables/UserHighlightsService.html":{},"modules/UserModule.html":{}}}],["follow.service.ts",{"_index":4546,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["follow.service.ts:10",{"_index":4554,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["follow.service.ts:18",{"_index":4559,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["follow.service.ts:24",{"_index":4561,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["follow.service.ts:37",{"_index":4563,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["follow.service.ts:47",{"_index":4566,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["follow.service.ts:63",{"_index":4558,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["follow.service.ts:92",{"_index":4568,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["followed",{"_index":2375,"title":{},"body":{"entities/DbUserNotification.html":{},"controllers/RepoStargazeController.html":{},"injectables/StargazeService.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"injectables/UserNotificationService.html":{}}}],["followeduserid",{"_index":4557,"title":{},"body":{"injectables/UserFollowService.html":{},"injectables/UserNotificationService.html":{}}}],["follower",{"_index":2419,"title":{},"body":{"entities/DbUserToUserFollows.html":{},"injectables/UserHighlightsService.html":{}}}],["follower.user_id",{"_index":4809,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["followers",{"_index":4804,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["followers.map(async",{"_index":4807,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["followeruserid",{"_index":4565,"title":{},"body":{"injectables/UserFollowService.html":{},"injectables/UserHighlightsService.html":{}}}],["followexists",{"_index":4578,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["followexists.deleted_at",{"_index":4582,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["following",{"_index":4579,"title":{},"body":{"injectables/UserFollowService.html":{},"controllers/UserFollowingController.html":{},"controllers/UserFollowsController.html":{},"index.html":{},"license.html":{}}}],["following.controller",{"_index":5255,"title":{},"body":{"modules/UserModule.html":{}}}],["following.controller.ts",{"_index":4590,"title":{},"body":{"controllers/UserFollowingController.html":{}}}],["following.controller.ts:19",{"_index":4595,"title":{},"body":{"controllers/UserFollowingController.html":{}}}],["following_user_id",{"_index":2415,"title":{},"body":{"entities/DbUserToUserFollows.html":{},"injectables/UserFollowService.html":{},"injectables/UserHighlightsService.html":{}}}],["followings",{"_index":4310,"title":{},"body":{"classes/TopUsersDto.html":{}}}],["followmanyusersdto",{"_index":2691,"title":{"classes/FollowManyUsersDto.html":{}},"body":{"classes/FollowManyUsersDto.html":{},"controllers/UserFollowsController.html":{}}}],["follows",{"_index":3877,"title":{},"body":{"controllers/RepoStargazeController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"index.html":{}}}],["follows'})@apibearerauth()@useguards(supabaseguard)@apiokresponse({type",{"_index":4678,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["follows'})@apiokresponse({description",{"_index":3868,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["follows.entity",{"_index":399,"title":{},"body":{"modules/AppModule.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowingController.html":{},"controllers/UserFollowsController.html":{},"modules/UserModule.html":{}}}],["follows.entity.ts",{"_index":2414,"title":{},"body":{"entities/DbUserToUserFollows.html":{}}}],["follows.entity.ts:16",{"_index":2421,"title":{},"body":{"entities/DbUserToUserFollows.html":{}}}],["follows.entity.ts:24",{"_index":2423,"title":{},"body":{"entities/DbUserToUserFollows.html":{}}}],["follows.entity.ts:32",{"_index":2420,"title":{},"body":{"entities/DbUserToUserFollows.html":{}}}],["follows.entity.ts:42",{"_index":2417,"title":{},"body":{"entities/DbUserToUserFollows.html":{}}}],["follows.entity.ts:52",{"_index":2422,"title":{},"body":{"entities/DbUserToUserFollows.html":{}}}],["follows.entity.ts:59",{"_index":2418,"title":{},"body":{"entities/DbUserToUserFollows.html":{}}}],["followuser",{"_index":5306,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["followuser.login",{"_index":5309,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["followuserbyid",{"_index":4608,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["followuserbyusername",{"_index":4602,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["followuserbyusername(username",{"_index":4606,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["followusersbyusernames",{"_index":4603,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["followusersbyusernames(bulkfollow",{"_index":4610,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["follweruserid",{"_index":4756,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["forbidunknownvalues",{"_index":5043,"title":{},"body":{"controllers/UserListController.html":{}}}],["formal",{"_index":1350,"title":{},"body":{"classes/CreateBlogSummaryDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{}}}],["formal'})@isstring()@isin(['exciting",{"_index":1346,"title":{},"body":{"classes/CreateBlogSummaryDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{}}}],["format",{"_index":1887,"title":{},"body":{"entities/DbPRInsight.html":{}}}],["formatit",{"_index":5585,"title":{},"body":{"index.html":{}}}],["found",{"_index":2445,"title":{},"body":{"controllers/EmojiController.html":{},"controllers/EndorsementController.html":{},"controllers/InsightController.html":{},"controllers/PizzaOvenController.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserController.html":{},"controllers/UserFollowingController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"injectables/UserListService.html":{},"miscellaneous/variables.html":{}}}],["found'})@apiconflictresponse({description",{"_index":3812,"title":{},"body":{"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserFollowsController.html":{}}}],["found'})@apiparam({name",{"_index":3178,"title":{},"body":{"controllers/PizzaOvenController.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/UserInsightMemberController.html":{}}}],["found'})@apiquery({name",{"_index":3573,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["found'})@apiunauthorizedresponse({description",{"_index":2898,"title":{},"body":{"controllers/InsightController.html":{}}}],["frame",{"_index":1712,"title":{},"body":{"entities/DbContributionStatTimeframe.html":{},"entities/DbContributorCategoryTimeframe.html":{}}}],["frameduration",{"_index":145,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["framepromises",{"_index":131,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["framestartdate",{"_index":133,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["francisco",{"_index":4226,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["free",{"_index":4290,"title":{},"body":{"injectables/TierService.html":{},"license.html":{}}}],["freeplan",{"_index":6011,"title":{},"body":{"miscellaneous/variables.html":{}}}],["french",{"_index":1332,"title":{},"body":{"classes/CreateBlogSummaryDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{}}}],["fresh",{"_index":3008,"title":{},"body":{"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{}}}],["from(\"pull_requests",{"_index":199,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["from(\"user_list_contributors",{"_index":211,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["from(\"user_organizations",{"_index":3792,"title":{},"body":{"injectables/RepoService.html":{}}}],["from(`(${currentmonthquery.getquery",{"_index":3547,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["from(`(${prevmonthquery.getquery",{"_index":3555,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["from(dbendorsement",{"_index":2607,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["from(dbpullrequest",{"_index":3535,"title":{},"body":{"injectables/PullRequestService.html":{},"injectables/UserListService.html":{}}}],["from(entity",{"_index":3728,"title":{},"body":{"injectables/RepoService.html":{}}}],["from_user",{"_index":2364,"title":{},"body":{"entities/DbUserNotification.html":{},"injectables/UserNotificationService.html":{}}}],["from_user_id",{"_index":2365,"title":{},"body":{"entities/DbUserNotification.html":{},"injectables/UserNotificationService.html":{}}}],["full",{"_index":1452,"title":{},"body":{"classes/CreateUserHighlightDto.html":{},"entities/DbInsightRepo.html":{},"entities/DbPullRequest.html":{},"entities/DbPullRequestGitHubEvents.html":{},"entities/DbUserHighlight.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserRepo.html":{},"injectables/PullRequestGithubEventsService.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"classes/RepoInfo.html":{},"index.html":{}}}],["full_name",{"_index":1402,"title":{},"body":{"classes/CreateInsightDto.html":{},"classes/DbFilteredUser.html":{},"entities/DbInsightRepo.html":{},"entities/DbPullRequest.html":{},"entities/DbUserHighlight.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserRepo.html":{},"injectables/InsightRepoService.html":{},"injectables/UserListService.html":{},"injectables/UserReposService.html":{}}}],["fullname",{"_index":1790,"title":{},"body":{"classes/DbFilteredUser.html":{},"classes/RepoInfo.html":{}}}],["functions",{"_index":5433,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["furnished",{"_index":5662,"title":{},"body":{"license.html":{}}}],["generally",{"_index":5985,"title":{},"body":{"miscellaneous/variables.html":{}}}],["generate",{"_index":779,"title":{},"body":{"controllers/BlogSummaryController.html":{},"injectables/BlogSummaryService.html":{},"injectables/CodeExplanationService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"controllers/IssueSummaryController.html":{},"injectables/IssueSummaryService.html":{},"injectables/PullRequestDescriptionService.html":{},"index.html":{}}}],["generate:swagger",{"_index":5594,"title":{},"body":{"index.html":{}}}],["generateblogsummary",{"_index":778,"title":{},"body":{"controllers/BlogSummaryController.html":{},"injectables/BlogSummaryService.html":{}}}],["generateblogsummary(options",{"_index":817,"title":{},"body":{"injectables/BlogSummaryService.html":{}}}],["generatecodeexplanation",{"_index":900,"title":{},"body":{"controllers/CodeExplanationController.html":{}}}],["generatecodeexplanationdto",{"_index":898,"title":{"classes/GenerateCodeExplanationDto.html":{}},"body":{"controllers/CodeExplanationController.html":{},"injectables/CodeExplanationService.html":{},"classes/GenerateCodeExplanationDto.html":{}}}],["generatecoderefactor",{"_index":931,"title":{},"body":{"controllers/CodeRefactorSuggestionController.html":{}}}],["generatecoderefactorsuggestiondto",{"_index":929,"title":{"classes/GenerateCodeRefactorSuggestionDto.html":{}},"body":{"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{}}}],["generatecodetest",{"_index":959,"title":{},"body":{"controllers/CodeTestSuggestionController.html":{}}}],["generatecodetestsuggestiondto",{"_index":957,"title":{"classes/GenerateCodeTestSuggestionDto.html":{}},"body":{"controllers/CodeTestSuggestionController.html":{},"injectables/CodeTestSuggestionService.html":{},"classes/GenerateCodeTestSuggestionDto.html":{}}}],["generatecompletion",{"_index":3125,"title":{},"body":{"injectables/OpenAiService.html":{}}}],["generatecompletion(systemmessage",{"_index":865,"title":{},"body":{"interfaces/ChatResponse.html":{},"injectables/OpenAiService.html":{}}}],["generated",{"_index":5516,"title":{},"body":{"index.html":{}}}],["generatedescription",{"_index":940,"title":{},"body":{"injectables/CodeRefactorSuggestionService.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["generatedescription(options",{"_index":942,"title":{},"body":{"injectables/CodeRefactorSuggestionService.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["generateexplanation",{"_index":916,"title":{},"body":{"injectables/CodeExplanationService.html":{}}}],["generateexplanation(options",{"_index":918,"title":{},"body":{"injectables/CodeExplanationService.html":{}}}],["generateissuesummary",{"_index":3078,"title":{},"body":{"controllers/IssueSummaryController.html":{},"injectables/IssueSummaryService.html":{}}}],["generateissuesummary(@body",{"_index":3085,"title":{},"body":{"controllers/IssueSummaryController.html":{}}}],["generateissuesummary(generateissuesummarydto",{"_index":3079,"title":{},"body":{"controllers/IssueSummaryController.html":{}}}],["generateissuesummary(options",{"_index":3091,"title":{},"body":{"injectables/IssueSummaryService.html":{}}}],["generateissuesummarydto",{"_index":3081,"title":{},"body":{"controllers/IssueSummaryController.html":{}}}],["generateprdescription",{"_index":896,"title":{},"body":{"controllers/CodeExplanationController.html":{},"controllers/CodeRefactorSuggestionController.html":{},"controllers/CodeTestSuggestionController.html":{},"controllers/PullRequestDescriptionController.html":{}}}],["generateprdescription(@body",{"_index":912,"title":{},"body":{"controllers/CodeExplanationController.html":{},"controllers/CodeRefactorSuggestionController.html":{},"controllers/CodeTestSuggestionController.html":{},"controllers/PullRequestDescriptionController.html":{}}}],["generateprdescription(generatecodeexplanationdto",{"_index":897,"title":{},"body":{"controllers/CodeExplanationController.html":{}}}],["generateprdescription(generatecoderefactorsuggestiondto",{"_index":928,"title":{},"body":{"controllers/CodeRefactorSuggestionController.html":{}}}],["generateprdescription(generatecodetestsuggestiondto",{"_index":956,"title":{},"body":{"controllers/CodeTestSuggestionController.html":{}}}],["generateprdescription(generatepullrequestdescriptiondto",{"_index":3324,"title":{},"body":{"controllers/PullRequestDescriptionController.html":{}}}],["generateprompt",{"_index":813,"title":{},"body":{"injectables/BlogSummaryService.html":{},"injectables/CodeExplanationService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"injectables/IssueSummaryService.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["generateprompt(language",{"_index":819,"title":{},"body":{"injectables/BlogSummaryService.html":{},"injectables/CodeExplanationService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/IssueSummaryService.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["generateprompt(maxlength",{"_index":966,"title":{},"body":{"injectables/CodeTestSuggestionService.html":{}}}],["generatepullrequestdescriptiondto",{"_index":2710,"title":{"classes/GeneratePullRequestDescriptionDto.html":{}},"body":{"classes/GeneratePullRequestDescriptionDto.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["generates",{"_index":901,"title":{},"body":{"controllers/CodeExplanationController.html":{},"controllers/CodeRefactorSuggestionController.html":{},"controllers/CodeTestSuggestionController.html":{},"controllers/PullRequestDescriptionController.html":{},"index.html":{}}}],["generateswaggerjson",{"_index":5737,"title":{},"body":{"miscellaneous/variables.html":{}}}],["generatetestsuggestion",{"_index":965,"title":{},"body":{"injectables/CodeTestSuggestionService.html":{}}}],["generatetestsuggestion(options",{"_index":967,"title":{},"body":{"injectables/CodeTestSuggestionService.html":{}}}],["genereateblogsummary",{"_index":774,"title":{},"body":{"controllers/BlogSummaryController.html":{}}}],["genereateblogsummary(@body",{"_index":800,"title":{},"body":{"controllers/BlogSummaryController.html":{}}}],["genereateblogsummary(genereateblogsummarydto",{"_index":775,"title":{},"body":{"controllers/BlogSummaryController.html":{}}}],["genereateblogsummarydto",{"_index":786,"title":{},"body":{"controllers/BlogSummaryController.html":{}}}],["german",{"_index":1333,"title":{},"body":{"classes/CreateBlogSummaryDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{}}}],["germany",{"_index":2660,"title":{},"body":{"classes/FilterListContributorsDto.html":{}}}],["get(\"/:id",{"_index":2920,"title":{},"body":{"controllers/InsightController.html":{},"controllers/RepoController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserListController.html":{}}}],["get(\"/:id/contributions",{"_index":3591,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["get(\"/:id/contributors",{"_index":5045,"title":{},"body":{"controllers/UserListController.html":{}}}],["get(\"/:id/contributors/highlights",{"_index":5056,"title":{},"body":{"controllers/UserListController.html":{}}}],["get(\"/:id/contributors/highlights/tagged",{"_index":5058,"title":{},"body":{"controllers/UserListController.html":{}}}],["get(\"/:id/reactions",{"_index":2848,"title":{},"body":{"controllers/HighlightController.html":{},"controllers/UserHighlightsController.html":{}}}],["get(\"/:id/reviews",{"_index":3319,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["get(\"/:owner/:repo",{"_index":3624,"title":{},"body":{"controllers/RepoController.html":{}}}],["get(\"/:owner/:repo/:login/contributions",{"_index":3602,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["get(\"/:owner/:repo/contributions",{"_index":3596,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["get(\"/:owner/:repo/contributions/contributors",{"_index":3598,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["get(\"/:repoid/vote",{"_index":3960,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["get(\"/:username",{"_index":4507,"title":{},"body":{"controllers/UserController.html":{}}}],["get(\"/:username/follow",{"_index":4626,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["get(\"/:username/following",{"_index":4597,"title":{},"body":{"controllers/UserFollowingController.html":{}}}],["get(\"/:username/highlights",{"_index":4514,"title":{},"body":{"controllers/UserController.html":{}}}],["get(\"/:username/organizations",{"_index":4519,"title":{},"body":{"controllers/UserController.html":{}}}],["get(\"/:username/prs",{"_index":4509,"title":{},"body":{"controllers/UserController.html":{}}}],["get(\"/:username/top",{"_index":4517,"title":{},"body":{"controllers/UserController.html":{}}}],["get(\"/churn",{"_index":1275,"title":{},"body":{"controllers/ContributorInsightsController.html":{}}}],["get(\"/commit",{"_index":3232,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["get(\"/commits/list/commit",{"_index":3243,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["get(\"/commits/list/repo/:id",{"_index":3240,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["get(\"/contributors",{"_index":5040,"title":{},"body":{"controllers/UserListController.html":{}}}],["get(\"/created",{"_index":4539,"title":{},"body":{"controllers/UserEndorsementController.html":{}}}],["get(\"/featured",{"_index":2836,"title":{},"body":{"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"controllers/UserListController.html":{}}}],["get(\"/following",{"_index":4722,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["get(\"/following/repos",{"_index":4723,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["get(\"/insights",{"_index":3313,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["get(\"/list",{"_index":2832,"title":{},"body":{"controllers/HighlightController.html":{},"controllers/PullRequestController.html":{},"controllers/RepoController.html":{}}}],["get(\"/listuserstargazed",{"_index":3875,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["get(\"/listuserstarred",{"_index":3837,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["get(\"/listusersubmitted",{"_index":3914,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["get(\"/listuservoted",{"_index":3959,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["get(\"/new",{"_index":1271,"title":{},"body":{"controllers/ContributorInsightsController.html":{}}}],["get(\"/orgs",{"_index":5351,"title":{},"body":{"controllers/UserRecommendationController.html":{}}}],["get(\"/received",{"_index":4542,"title":{},"body":{"controllers/UserEndorsementController.html":{}}}],["get(\"/recent",{"_index":1273,"title":{},"body":{"controllers/ContributorInsightsController.html":{}}}],["get(\"/repeat",{"_index":1277,"title":{},"body":{"controllers/ContributorInsightsController.html":{}}}],["get(\"/repos",{"_index":5347,"title":{},"body":{"controllers/UserRecommendationController.html":{}}}],["get(\"/repos/:owner/:repo",{"_index":2537,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["get(\"/repos/:owner/:repo/byuser",{"_index":2541,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["get(\"/repos/:repoowneroruser",{"_index":2534,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["get(\"/repos/list",{"_index":2844,"title":{},"body":{"controllers/HighlightController.html":{},"controllers/PizzaOvenController.html":{}}}],["get(\"/search",{"_index":1239,"title":{},"body":{"controllers/ContributorController.html":{},"controllers/PullRequestController.html":{},"controllers/RepoController.html":{},"controllers/UserController.html":{}}}],["get(\"/service",{"_index":2751,"title":{},"body":{"controllers/HealthController.html":{}}}],["get(\"/session",{"_index":657,"title":{},"body":{"controllers/AuthController.html":{}}}],["get(\"/timezones",{"_index":5060,"title":{},"body":{"controllers/UserListController.html":{}}}],["get(\"/top",{"_index":2851,"title":{},"body":{"controllers/HighlightController.html":{},"controllers/UserController.html":{}}}],["get(\"/user/:username/created",{"_index":2548,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["get(\"/user/:username/received",{"_index":2552,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["get(\"/web",{"_index":2764,"title":{},"body":{"controllers/HealthController.html":{}}}],["get(\":id",{"_index":2545,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["get(\":id/members",{"_index":4864,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["get(\":id/stats/contributions",{"_index":5207,"title":{},"body":{"controllers/UserListStatsController.html":{}}}],["get(\":id/stats/most",{"_index":5204,"title":{},"body":{"controllers/UserListStatsController.html":{}}}],["get(\":id/stats/top",{"_index":5211,"title":{},"body":{"controllers/UserListStatsController.html":{}}}],["get(\"commit",{"_index":3228,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["get(\"commits/:id",{"_index":3237,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["get(\"repos/:id",{"_index":3222,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["get('/')@apioperation({operationid",{"_index":2441,"title":{},"body":{"controllers/EmojiController.html":{},"controllers/EndorsementController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"controllers/UserNotificationController.html":{}}}],["get('/:id')@apioperation({operationid",{"_index":2896,"title":{},"body":{"controllers/InsightController.html":{},"controllers/RepoController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserListController.html":{}}}],["get('/:id/contributions')@apioperation({operationid",{"_index":3578,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["get('/:id/contributors')@apioperation({operationid",{"_index":5000,"title":{},"body":{"controllers/UserListController.html":{}}}],["get('/:id/contributors/highlights')@apioperation({operationid",{"_index":4996,"title":{},"body":{"controllers/UserListController.html":{}}}],["get('/:id/contributors/highlights/tagged",{"_index":4989,"title":{},"body":{"controllers/UserListController.html":{}}}],["get('/:id/reactions')@apioperation({operationid",{"_index":2814,"title":{},"body":{"controllers/HighlightController.html":{},"controllers/UserHighlightsController.html":{}}}],["get('/:id/reviews')@apioperation({operationid",{"_index":3291,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["get('/:owner/:repo')@apioperation({operationid",{"_index":3618,"title":{},"body":{"controllers/RepoController.html":{}}}],["get('/:owner/:repo/:login/contributions')@apioperation({operationid",{"_index":3570,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["get('/:owner/:repo/contributions')@apioperation({operationid",{"_index":3564,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["get('/:owner/:repo/contributions/contributors')@apioperation({operationid",{"_index":3581,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["get('/:repoid/vote')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":3944,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["get('/:username')@apioperation({operationid",{"_index":4485,"title":{},"body":{"controllers/UserController.html":{}}}],["get('/:username/follow')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":4616,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["get('/:username/following')@apioperation({operationid",{"_index":4593,"title":{},"body":{"controllers/UserFollowingController.html":{}}}],["get('/:username/highlights')@apioperation({operationid",{"_index":4461,"title":{},"body":{"controllers/UserController.html":{}}}],["get('/:username/organizations')@apioperation({operationid",{"_index":4465,"title":{},"body":{"controllers/UserController.html":{}}}],["get('/:username/prs')@apioperation({operationid",{"_index":4480,"title":{},"body":{"controllers/UserController.html":{}}}],["get('/:username/top",{"_index":4471,"title":{},"body":{"controllers/UserController.html":{}}}],["get('/churn')@apioperation({operationid",{"_index":1252,"title":{},"body":{"controllers/ContributorInsightsController.html":{}}}],["get('/commit",{"_index":3191,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["get('/commits/list/commit",{"_index":3202,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["get('/commits/list/repo/:id')@apioperation({operationid",{"_index":3197,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["get('/contributors')@apioperation({operationid",{"_index":4971,"title":{},"body":{"controllers/UserListController.html":{}}}],["get('/created')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":4532,"title":{},"body":{"controllers/UserEndorsementController.html":{}}}],["get('/featured')@apioperation({operationid",{"_index":2800,"title":{},"body":{"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"controllers/UserListController.html":{}}}],["get('/following')@apioperation({operationid",{"_index":4682,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["get('/following/repos')@apioperation({operationid",{"_index":4676,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["get('/insights')@apioperation({operationid",{"_index":3287,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["get('/list')@apioperation({operationid",{"_index":2808,"title":{},"body":{"controllers/HighlightController.html":{},"controllers/PullRequestController.html":{},"controllers/RepoController.html":{}}}],["get('/listuserstargazed')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":3864,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["get('/listuserstarred')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":3821,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["get('/listusersubmitted')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":3902,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["get('/listuservoted')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":3940,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["get('/new')@apioperation({operationid",{"_index":1267,"title":{},"body":{"controllers/ContributorInsightsController.html":{}}}],["get('/orgs')@apioperation({operationid",{"_index":5336,"title":{},"body":{"controllers/UserRecommendationController.html":{}}}],["get('/received')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":4535,"title":{},"body":{"controllers/UserEndorsementController.html":{}}}],["get('/recent')@apioperation({operationid",{"_index":1260,"title":{},"body":{"controllers/ContributorInsightsController.html":{}}}],["get('/repeat')@apioperation({operationid",{"_index":1263,"title":{},"body":{"controllers/ContributorInsightsController.html":{}}}],["get('/repos')@apioperation({operationid",{"_index":5342,"title":{},"body":{"controllers/UserRecommendationController.html":{}}}],["get('/repos/:owner/:repo')@apioperation({operationid",{"_index":2500,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["get('/repos/:repoowneroruser')@apioperation({operationid",{"_index":2493,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["get('/repos/list')@apioperation({operationid",{"_index":2804,"title":{},"body":{"controllers/HighlightController.html":{},"controllers/PizzaOvenController.html":{}}}],["get('/search')@apioperation({operationid",{"_index":1220,"title":{},"body":{"controllers/ContributorController.html":{},"controllers/PullRequestController.html":{},"controllers/RepoController.html":{},"controllers/UserController.html":{}}}],["get('/service')@apioperation({operationid",{"_index":2734,"title":{},"body":{"controllers/HealthController.html":{}}}],["get('/session')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":576,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('/timezones')@apioperation({operationid",{"_index":4980,"title":{},"body":{"controllers/UserListController.html":{}}}],["get('/top')@apioperation({operationid",{"_index":2811,"title":{},"body":{"controllers/HighlightController.html":{},"controllers/UserController.html":{}}}],["get('/user/:username/created')@apioperation({operationid",{"_index":2504,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["get('/user/:username/received')@apioperation({operationid",{"_index":2508,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["get('/web')@apioperation({operationid",{"_index":2738,"title":{},"body":{"controllers/HealthController.html":{}}}],["get(':id')@apioperation({operationid",{"_index":2511,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["get(':id/members')@apioperation({operationid",{"_index":4847,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["get(':id/stats/contributions",{"_index":5174,"title":{},"body":{"controllers/UserListStatsController.html":{}}}],["get(':id/stats/most",{"_index":5200,"title":{},"body":{"controllers/UserListStatsController.html":{}}}],["get(':id/stats/top",{"_index":5193,"title":{},"body":{"controllers/UserListStatsController.html":{}}}],["get('commit",{"_index":3180,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["get('commits/:id')@apioperation({operationid",{"_index":3184,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["get('repos/:id')@apioperation({operationid",{"_index":3176,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["get\\`](https://developer.mozilla.org/en",{"_index":5972,"title":{},"body":{"miscellaneous/variables.html":{}}}],["getallhighlightreactions",{"_index":2787,"title":{},"body":{"controllers/HighlightController.html":{}}}],["getallhighlightreactions(@param(\"id",{"_index":2849,"title":{},"body":{"controllers/HighlightController.html":{}}}],["getallhighlightreactions(id",{"_index":2813,"title":{},"body":{"controllers/HighlightController.html":{}}}],["getallhighlightuserreactions",{"_index":4648,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["getallhighlightuserreactions(id",{"_index":4673,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["getalltimezones",{"_index":5090,"title":{},"body":{"injectables/UserListService.html":{}}}],["getcontributionsbyproject",{"_index":5169,"title":{},"body":{"controllers/UserListStatsController.html":{}}}],["getcontributionsbyproject(id",{"_index":5173,"title":{},"body":{"controllers/UserListStatsController.html":{}}}],["getcontributionsbytimeframe",{"_index":5170,"title":{},"body":{"controllers/UserListStatsController.html":{}}}],["getcontributionsbytimeframe(id",{"_index":5181,"title":{},"body":{"controllers/UserListStatsController.html":{}}}],["getcontributorcontributionsbyproject",{"_index":5171,"title":{},"body":{"controllers/UserListStatsController.html":{}}}],["getcontributorcontributionsbyproject(id",{"_index":5192,"title":{},"body":{"controllers/UserListStatsController.html":{}}}],["getcontributorrangequerybuilder",{"_index":3488,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["getcontributorrangequerybuilder(start_date",{"_index":3510,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["getcontributors",{"_index":4946,"title":{},"body":{"controllers/UserListController.html":{}}}],["getcontributors(pageoptionsdto",{"_index":4970,"title":{},"body":{"controllers/UserListController.html":{}}}],["getcontributorsbytimeframe",{"_index":5184,"title":{},"body":{"controllers/UserListStatsController.html":{}}}],["getdateframes",{"_index":5217,"title":{},"body":{"injectables/UserListStatsService.html":{}}}],["getdateframes(range",{"_index":141,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["getdomain",{"_index":5740,"title":{},"body":{"miscellaneous/variables.html":{}}}],["getdomain(\"admin",{"_index":5833,"title":{},"body":{"miscellaneous/variables.html":{}}}],["getdomain(\"app",{"_index":5826,"title":{},"body":{"miscellaneous/variables.html":{}}}],["getdomain(\"docs",{"_index":5830,"title":{},"body":{"miscellaneous/variables.html":{}}}],["getdomain(\"explore",{"_index":5832,"title":{},"body":{"miscellaneous/variables.html":{}}}],["getdomain(\"hot",{"_index":5828,"title":{},"body":{"miscellaneous/variables.html":{}}}],["getfeaturedlists",{"_index":4947,"title":{},"body":{"controllers/UserListController.html":{}}}],["getfeaturedlists(@query",{"_index":5020,"title":{},"body":{"controllers/UserListController.html":{}}}],["getfeaturedlists(pageoptionsdto",{"_index":4974,"title":{},"body":{"controllers/UserListController.html":{}}}],["getfollowinghighlightrepos",{"_index":4649,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["getfollowinghighlightrepos(pageoptionsdto",{"_index":4675,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["getfollowinghighlights",{"_index":4650,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["getfollowinghighlights(pageoptionsdto",{"_index":4681,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["getfollowinglistbyusername",{"_index":4591,"title":{},"body":{"controllers/UserFollowingController.html":{}}}],["getfollowinglistbyusername(@param(\"username",{"_index":4598,"title":{},"body":{"controllers/UserFollowingController.html":{}}}],["getfollowinglistbyusername(username",{"_index":4592,"title":{},"body":{"controllers/UserFollowingController.html":{}}}],["getfollowstatusbyusername",{"_index":4604,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["getfollowstatusbyusername(username",{"_index":4615,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["getinsight",{"_index":3381,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["getinsight(interval",{"_index":3391,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["getlistsforuser",{"_index":4948,"title":{},"body":{"controllers/UserListController.html":{}}}],["getlistsforuser(userid",{"_index":4977,"title":{},"body":{"controllers/UserListController.html":{}}}],["getmany",{"_index":4576,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["getmostactivecontributors",{"_index":5172,"title":{},"body":{"controllers/UserListStatsController.html":{}}}],["getmostactivecontributors(id",{"_index":5199,"title":{},"body":{"controllers/UserListStatsController.html":{}}}],["getprevdateisostring",{"_index":1140,"title":{},"body":{"injectables/ContributionService.html":{},"injectables/PullRequestGithubEventsService.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserListService.html":{},"miscellaneous/variables.html":{}}}],["getprevdateisostring(options.prev_days_start_date",{"_index":3422,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["getprevdateisostring(pageoptionsdto.prev_days_start_date",{"_index":3358,"title":{},"body":{"injectables/PullRequestGithubEventsService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserListService.html":{}}}],["getprevdateisostring(prev_days_start_date",{"_index":1164,"title":{},"body":{"injectables/ContributionService.html":{}}}],["getpullrequestinsights",{"_index":3282,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["getpullrequestinsights(@query",{"_index":3315,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["getpullrequestinsights(pageoptionsdto",{"_index":3286,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["getpullrequestreviews",{"_index":3283,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["getpullrequestreviews(@param(\"id",{"_index":3320,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["getpullrequestreviews(id",{"_index":3290,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["getrepofilters",{"_index":3638,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["getrepofilters(options",{"_index":3641,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["gets",{"_index":1253,"title":{},"body":{"controllers/ContributorInsightsController.html":{},"injectables/PullRequestGithubEventsService.html":{},"controllers/UserListController.html":{},"controllers/UserListStatsController.html":{}}}],["getschemapath(model",{"_index":5784,"title":{},"body":{"miscellaneous/variables.html":{}}}],["getschemapath(pagedto",{"_index":5783,"title":{},"body":{"miscellaneous/variables.html":{}}}],["getsession",{"_index":547,"title":{},"body":{"controllers/AuthController.html":{}}}],["getsession(@user",{"_index":661,"title":{},"body":{"controllers/AuthController.html":{}}}],["getsession(user",{"_index":574,"title":{},"body":{"controllers/AuthController.html":{}}}],["getskip",{"_index":2652,"title":{},"body":{"classes/FilterListContributorsDto.html":{},"classes/FilteredUsersDto.html":{},"classes/PageOptionsDto.html":{},"classes/TopUsersDto.html":{}}}],["getstripe",{"_index":4039,"title":{},"body":{"injectables/StripeService.html":{}}}],["gettimezones",{"_index":4949,"title":{},"body":{"controllers/UserListController.html":{}}}],["getting",{"_index":5437,"title":{"index.html":{},"license.html":{}},"body":{}}],["gettop10highlights",{"_index":4490,"title":{},"body":{"controllers/UserController.html":{}}}],["gettopusers",{"_index":4458,"title":{},"body":{"controllers/UserController.html":{}}}],["gettopusers(@query",{"_index":4522,"title":{},"body":{"controllers/UserController.html":{}}}],["gettopusers(pageoptionsdto",{"_index":4489,"title":{},"body":{"controllers/UserController.html":{}}}],["getuserhighlight",{"_index":4651,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["getuserhighlight(@param(\"id",{"_index":4698,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["getuserhighlight(id",{"_index":4684,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["getuserlist",{"_index":4950,"title":{},"body":{"controllers/UserListController.html":{}}}],["getuserlist(@param(\"id",{"_index":5031,"title":{},"body":{"controllers/UserListController.html":{}}}],["getuserlist(id",{"_index":4985,"title":{},"body":{"controllers/UserListController.html":{}}}],["getuserlistcontributorhighlightedrepos",{"_index":4951,"title":{},"body":{"controllers/UserListController.html":{}}}],["getuserlistcontributorhighlightedrepos(pageoptionsdto",{"_index":4988,"title":{},"body":{"controllers/UserListController.html":{}}}],["getuserlistcontributorhighlights",{"_index":4952,"title":{},"body":{"controllers/UserListController.html":{}}}],["getuserlistcontributorhighlights(pageoptionsdto",{"_index":4995,"title":{},"body":{"controllers/UserListController.html":{}}}],["getuserlistcontributors",{"_index":4953,"title":{},"body":{"controllers/UserListController.html":{}}}],["getuserlistcontributors(pageoptionsdto",{"_index":4999,"title":{},"body":{"controllers/UserListController.html":{}}}],["getusernotifications",{"_index":5258,"title":{},"body":{"controllers/UserNotificationController.html":{}}}],["getusernotifications(userid",{"_index":5259,"title":{},"body":{"controllers/UserNotificationController.html":{}}}],["getusersbyfilter",{"_index":4459,"title":{},"body":{"controllers/UserController.html":{}}}],["getusersbyfilter(@query",{"_index":4524,"title":{},"body":{"controllers/UserController.html":{}}}],["getusersbyfilter(pageoptionsdto",{"_index":4493,"title":{},"body":{"controllers/UserController.html":{}}}],["getvotequery",{"_index":5390,"title":{},"body":{"injectables/VoteService.html":{}}}],["getvotequery(repoid",{"_index":5399,"title":{},"body":{"injectables/VoteService.html":{}}}],["ghcr.io/open",{"_index":5577,"title":{},"body":{"index.html":{}}}],["git+https://github.com/open",{"_index":5719,"title":{},"body":{"properties.html":{}}}],["github",{"_index":949,"title":{},"body":{"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"entities/DbContribution.html":{},"injectables/IssueSummaryService.html":{},"injectables/PullRequestDescriptionService.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{}}}],["github.com/open",{"_index":1465,"title":{},"body":{"classes/CreateUserHighlightDto.html":{},"entities/DbUserHighlight.html":{}}}],["github_sponsors_url",{"_index":687,"title":{},"body":{"controllers/AuthController.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{}}}],["given",{"_index":921,"title":{},"body":{"injectables/CodeExplanationService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"controllers/ContributorInsightsController.html":{},"injectables/PullRequestDescriptionService.html":{},"controllers/RepoContributionsController.html":{},"injectables/UserListService.html":{},"controllers/UserListStatsController.html":{}}}],["gives",{"_index":3367,"title":{},"body":{"injectables/PullRequestGithubEventsService.html":{}}}],["go",{"_index":3006,"title":{},"body":{"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"controllers/RepoContributionsController.html":{}}}],["goes",{"_index":1893,"title":{},"body":{"entities/DbPRInsight.html":{},"miscellaneous/variables.html":{}}}],["gpt",{"_index":5903,"title":{},"body":{"miscellaneous/variables.html":{}}}],["grab",{"_index":195,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["granted",{"_index":5646,"title":{},"body":{"license.html":{}}}],["graph",{"_index":5696,"title":{},"body":{"modules.html":{},"properties.html":{}}}],["groupby(\"repos.full_name",{"_index":222,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["groupby(\"users.login",{"_index":2609,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["grouped",{"_index":2543,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["guard",{"_index":2612,"title":{"guards/EndorsementTokenGuard.html":{}},"body":{"overview.html":{}}}],["guarded",{"_index":3836,"title":{},"body":{"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{}}}],["guards",{"_index":2613,"title":{},"body":{"guards/EndorsementTokenGuard.html":{}}}],["guide",{"_index":5623,"title":{},"body":{"index.html":{}}}],["guidelines",{"_index":5624,"title":{},"body":{"index.html":{}}}],["hacktoberfest",{"_index":3420,"title":{},"body":{"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoService.html":{}}}],["hacktoberfestconfig",{"_index":327,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["hacktoberfestfilterquerybuilder",{"_index":3700,"title":{},"body":{"injectables/RepoService.html":{}}}],["hacktoberfestfilterquerybuilder(range",{"_index":3717,"title":{},"body":{"injectables/RepoService.html":{}}}],["hacktoberfestprcountfilterbuilderend",{"_index":3382,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["hacktoberfestprcountfilterbuilderend(interval",{"_index":3393,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["hacktoberfestprcountfilterbuilderstart",{"_index":3383,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["hacktoberfestprdatecharbuilder",{"_index":3384,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["hacktoberfestprdatecharbuilder(interval",{"_index":3396,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["hacktoberfestprfilterbuilderend",{"_index":3489,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["hacktoberfestprfilterbuilderend(range",{"_index":3515,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["hacktoberfestprfilterbuilderstart",{"_index":3490,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["hacktoberfestyear",{"_index":3405,"title":{},"body":{"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{}}}],["handled",{"_index":5974,"title":{},"body":{"miscellaneous/variables.html":{}}}],["handlestripewebhook",{"_index":4087,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["handlestripewebhook(@req",{"_index":4143,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["handlestripewebhook(req",{"_index":4089,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["hash",{"_index":1016,"title":{},"body":{"classes/CommitsDto.html":{},"entities/DbCommits.html":{}}}],["hasnextpage",{"_index":1055,"title":{},"body":{"classes/ContributionPageMetaDto.html":{},"classes/PageMetaDto.html":{}}}],["haspreviouspage",{"_index":1056,"title":{},"body":{"classes/ContributionPageMetaDto.html":{},"classes/PageMetaDto.html":{}}}],["header",{"_index":5952,"title":{},"body":{"miscellaneous/variables.html":{}}}],["headers",{"_index":873,"title":{},"body":{"interfaces/ChatResponse.html":{},"controllers/EndorsementController.html":{},"guards/EndorsementTokenGuard.html":{},"injectables/OpenAiService.html":{},"miscellaneous/variables.html":{}}}],["headers(\"x",{"_index":2528,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["health",{"_index":2732,"title":{},"body":{"controllers/HealthController.html":{}}}],["health.controller",{"_index":2778,"title":{},"body":{"modules/HealthModule.html":{}}}],["health/health.module",{"_index":332,"title":{},"body":{"modules/AppModule.html":{}}}],["healthcheck",{"_index":2744,"title":{},"body":{"controllers/HealthController.html":{}}}],["healthcheckservice",{"_index":2741,"title":{},"body":{"controllers/HealthController.html":{}}}],["healthcontroller",{"_index":2730,"title":{"controllers/HealthController.html":{}},"body":{"controllers/HealthController.html":{},"modules/HealthModule.html":{}}}],["healthmodule",{"_index":267,"title":{"modules/HealthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/HealthModule.html":{},"modules.html":{},"overview.html":{}}}],["healthstatusservice",{"_index":2735,"title":{},"body":{"controllers/HealthController.html":{}}}],["healthstatusweb",{"_index":2739,"title":{},"body":{"controllers/HealthController.html":{}}}],["hello@opensauced.pizza",{"_index":988,"title":{},"body":{"classes/CommitAuthorDto.html":{},"classes/CreateInsightMemberDto.html":{},"entities/DbInsightMember.html":{},"classes/UpdateUserDto.html":{},"miscellaneous/variables.html":{}}}],["hello@opensauced.pizza'})@column({type",{"_index":1846,"title":{},"body":{"entities/DbInsightMember.html":{}}}],["hello@opensauced.pizza'})@isemail",{"_index":1407,"title":{},"body":{"classes/CreateInsightMemberDto.html":{},"classes/UpdateUserDto.html":{}}}],["hello@opensauced.pizza'})@isstring",{"_index":986,"title":{},"body":{"classes/CommitAuthorDto.html":{}}}],["hereby",{"_index":5645,"title":{},"body":{"license.html":{}}}],["hey",{"_index":2220,"title":{},"body":{"entities/DbUserCollaboration.html":{}}}],["highlight",{"_index":405,"title":{},"body":{"modules/AppModule.html":{},"classes/CreateUserHighlightDto.html":{},"entities/DbCoupon.html":{},"entities/DbEmoji.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightReactionResponse.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserNotification.html":{},"controllers/HighlightController.html":{},"classes/HighlightOptionsDto.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserListController.html":{},"injectables/UserListService.html":{},"modules/UserModule.html":{},"injectables/UserNotificationService.html":{}}}],["highlight'})@apibadrequestresponse({description",{"_index":2796,"title":{},"body":{"controllers/HighlightController.html":{},"controllers/UserHighlightsController.html":{}}}],["highlight'})@apiokresponse({type",{"_index":2815,"title":{},"body":{"controllers/HighlightController.html":{},"controllers/UserHighlightsController.html":{}}}],["highlight.controller",{"_index":2857,"title":{},"body":{"modules/HighlightModule.html":{},"modules/UserModule.html":{}}}],["highlight.controller.ts",{"_index":4642,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["highlight.controller.ts:114",{"_index":4668,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["highlight.controller.ts:134",{"_index":4674,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["highlight.controller.ts:153",{"_index":4659,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["highlight.controller.ts:177",{"_index":4672,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["highlight.controller.ts:199",{"_index":4683,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["highlight.controller.ts:215",{"_index":4680,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["highlight.controller.ts:53",{"_index":4664,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["highlight.controller.ts:69",{"_index":4685,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["highlight.controller.ts:85",{"_index":4689,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["highlight.created_at",{"_index":4709,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["highlight.dto",{"_index":4694,"title":{},"body":{"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{}}}],["highlight.dto.ts",{"_index":1441,"title":{},"body":{"classes/CreateUserHighlightDto.html":{}}}],["highlight.dto.ts:11",{"_index":1467,"title":{},"body":{"classes/CreateUserHighlightDto.html":{}}}],["highlight.dto.ts:20",{"_index":1459,"title":{},"body":{"classes/CreateUserHighlightDto.html":{}}}],["highlight.dto.ts:30",{"_index":1445,"title":{},"body":{"classes/CreateUserHighlightDto.html":{}}}],["highlight.dto.ts:39",{"_index":1451,"title":{},"body":{"classes/CreateUserHighlightDto.html":{}}}],["highlight.dto.ts:48",{"_index":1464,"title":{},"body":{"classes/CreateUserHighlightDto.html":{}}}],["highlight.dto.ts:58",{"_index":1457,"title":{},"body":{"classes/CreateUserHighlightDto.html":{}}}],["highlight.entity",{"_index":396,"title":{},"body":{"modules/AppModule.html":{},"entities/DbUserHighlightReaction.html":{},"controllers/HighlightController.html":{},"modules/HighlightModule.html":{},"controllers/UserController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserListController.html":{},"modules/UserListModule.html":{},"injectables/UserListService.html":{},"modules/UserModule.html":{}}}],["highlight.entity.ts",{"_index":2237,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["highlight.entity.ts:109",{"_index":2265,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["highlight.entity.ts:116",{"_index":2241,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["highlight.entity.ts:123",{"_index":2257,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["highlight.entity.ts:134",{"_index":2245,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["highlight.entity.ts:145",{"_index":2252,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["highlight.entity.ts:156",{"_index":2251,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["highlight.entity.ts:169",{"_index":2260,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["highlight.entity.ts:177",{"_index":2269,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["highlight.entity.ts:185",{"_index":2256,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["highlight.entity.ts:30",{"_index":2250,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["highlight.entity.ts:38",{"_index":2271,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["highlight.entity.ts:45",{"_index":2267,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["highlight.entity.ts:52",{"_index":2262,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["highlight.entity.ts:62",{"_index":2248,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["highlight.entity.ts:69",{"_index":2264,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["highlight.entity.ts:79",{"_index":2253,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["highlight.entity.ts:89",{"_index":2244,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["highlight.entity.ts:99",{"_index":2240,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["highlight.highlight",{"_index":4796,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["highlight.shipped_at",{"_index":4798,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["highlight.taggedrepos",{"_index":4801,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["highlight.title",{"_index":4797,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["highlight.type",{"_index":4800,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["highlight.url",{"_index":4795,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["highlight.user_id",{"_index":4717,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["highlight/dtos/highlight",{"_index":4692,"title":{},"body":{"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserListController.html":{},"injectables/UserListService.html":{}}}],["highlight/entities/user",{"_index":4693,"title":{},"body":{"controllers/UserHighlightsController.html":{},"controllers/UserListController.html":{},"injectables/UserListService.html":{}}}],["highlight/highlight.module",{"_index":397,"title":{},"body":{"modules/AppModule.html":{}}}],["highlight_created",{"_index":5432,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["highlight_id",{"_index":2255,"title":{},"body":{"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"injectables/UserHighlightsService.html":{}}}],["highlight_id=user_highlights.id",{"_index":4787,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["highlight_reaction",{"_index":5430,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["highlightcontroller",{"_index":2779,"title":{"controllers/HighlightController.html":{}},"body":{"controllers/HighlightController.html":{},"modules/HighlightModule.html":{}}}],["highlightcreated",{"_index":5431,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["highlighted",{"_index":4990,"title":{},"body":{"controllers/UserListController.html":{}}}],["highlightid",{"_index":4660,"title":{},"body":{"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserNotificationService.html":{}}}],["highlightmodule",{"_index":268,"title":{"modules/HighlightModule.html":{}},"body":{"modules/AppModule.html":{},"modules/HighlightModule.html":{},"modules.html":{},"overview.html":{}}}],["highlightoptionsdto",{"_index":2309,"title":{"classes/HighlightOptionsDto.html":{}},"body":{"classes/DbUserHighlightReactionResponse.html":{},"controllers/HighlightController.html":{},"classes/HighlightOptionsDto.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserListController.html":{},"injectables/UserListService.html":{}}}],["highlightreaction",{"_index":1762,"title":{},"body":{"entities/DbEmoji.html":{},"entities/DbUserHighlight.html":{},"miscellaneous/enumerations.html":{}}}],["highlightreaction.emoji",{"_index":1763,"title":{},"body":{"entities/DbEmoji.html":{}}}],["highlightreaction.highlight",{"_index":2274,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["highlightreaction.highlight)@joincolumn({name",{"_index":2254,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["highlights",{"_index":2781,"title":{},"body":{"controllers/HighlightController.html":{},"controllers/UserController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserListController.html":{},"injectables/UserListService.html":{}}}],["highlights'})@apibadrequestresponse({description",{"_index":4993,"title":{},"body":{"controllers/UserListController.html":{}}}],["highlights.service",{"_index":2828,"title":{},"body":{"controllers/HighlightController.html":{},"controllers/UserController.html":{},"controllers/UserHighlightsController.html":{},"modules/UserModule.html":{}}}],["highlights.service.ts",{"_index":4724,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["highlights.service.ts:102",{"_index":4753,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["highlights.service.ts:113",{"_index":4762,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["highlights.service.ts:138",{"_index":4740,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["highlights.service.ts:157",{"_index":4764,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["highlights.service.ts:177",{"_index":4757,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["highlights.service.ts:19",{"_index":4737,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["highlights.service.ts:217",{"_index":4752,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["highlights.service.ts:228",{"_index":4742,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["highlights.service.ts:252",{"_index":4766,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["highlights.service.ts:256",{"_index":4748,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["highlights.service.ts:260",{"_index":4755,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["highlights.service.ts:282",{"_index":4760,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["highlights.service.ts:299",{"_index":4745,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["highlights.service.ts:31",{"_index":4746,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["highlights.service.ts:331",{"_index":4750,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["highlights.service.ts:37",{"_index":4758,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["highlights.service.ts:58",{"_index":4751,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["highlightuserid",{"_index":4744,"title":{},"body":{"injectables/UserHighlightsService.html":{},"injectables/UserNotificationService.html":{}}}],["holders",{"_index":5681,"title":{},"body":{"license.html":{}}}],["homepage",{"_index":5715,"title":{},"body":{"properties.html":{}}}],["host",{"_index":449,"title":{},"body":{"modules/AppModule.html":{},"guards/EndorsementTokenGuard.html":{},"injectables/PizzaOvenService.html":{},"miscellaneous/variables.html":{}}}],["host.switchtohttp",{"_index":2625,"title":{},"body":{"guards/EndorsementTokenGuard.html":{}}}],["hot",{"_index":5827,"title":{},"body":{"miscellaneous/variables.html":{}}}],["hour",{"_index":5944,"title":{},"body":{"miscellaneous/variables.html":{}}}],["http",{"_index":509,"title":{},"body":{"modules/AppModule.html":{},"controllers/HealthController.html":{},"miscellaneous/variables.html":{}}}],["http(s)?:\\/\\/)?([\\w]+\\.)?github\\.com",{"_index":4781,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["httpcode",{"_index":620,"title":{},"body":{"controllers/AuthController.html":{}}}],["httpcode(httpstatus.ok",{"_index":660,"title":{},"body":{"controllers/AuthController.html":{}}}],["httphealthindicator",{"_index":2742,"title":{},"body":{"controllers/HealthController.html":{}}}],["httploggermiddleware",{"_index":361,"title":{"injectables/HttpLoggerMiddleware.html":{}},"body":{"modules/AppModule.html":{},"injectables/HttpLoggerMiddleware.html":{}}}],["httpmodule",{"_index":306,"title":{},"body":{"modules/AppModule.html":{},"modules/PizzaOvenModule.html":{}}}],["https://api.github.com/repos/denoland/fresh/labels/showcase",{"_index":1958,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["https://avatars.githubusercontent.com/u/25160953?v=4",{"_index":2008,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["https://avatars.githubusercontent.com/u/25160953?v=4'})@column('text",{"_index":1930,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["https://discord.gg/opensauced",{"_index":4202,"title":{},"body":{"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{}}}],["https://discord.gg/opensauced'})@isurl()@isoptional",{"_index":4338,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["https://github.com/${repo.fullname",{"_index":3010,"title":{},"body":{"injectables/InsightRepoService.html":{}}}],["https://github.com/${url.full_name",{"_index":3061,"title":{},"body":{"injectables/InsightsService.html":{}}}],["https://github.com/open",{"_index":758,"title":{},"body":{"classes/BakeRepoDto.html":{},"classes/CreateEndorsementDto.html":{},"entities/DbBakedRepo.html":{},"entities/DbContribution.html":{},"properties.html":{}}}],["https://github.com/sponsors/open",{"_index":4209,"title":{},"body":{"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{}}}],["https://github.githubassets.com/images/icons/emoji/unicode/1f4af.png?v8",{"_index":1771,"title":{},"body":{"entities/DbEmoji.html":{}}}],["https://github.githubassets.com/images/icons/emoji/unicode/1f4af.png?v8'})@column({type",{"_index":1766,"title":{},"body":{"entities/DbEmoji.html":{}}}],["https://opensauced.pizza",{"_index":4237,"title":{},"body":{"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{},"miscellaneous/variables.html":{}}}],["https://opensauced.pizza'})@isurl()@isoptional",{"_index":4360,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["https://opensource.org/licenses/mit",{"_index":5868,"title":{},"body":{"miscellaneous/variables.html":{}}}],["https://www.linkedin.com/in/brianldouglas",{"_index":4223,"title":{},"body":{"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{}}}],["https://www.linkedin.com/in/brianldouglas'})@isurl()@isoptional",{"_index":4345,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["httpservice",{"_index":3256,"title":{},"body":{"injectables/PizzaOvenService.html":{}}}],["httpstatus",{"_index":621,"title":{},"body":{"controllers/AuthController.html":{}}}],["human",{"_index":1885,"title":{},"body":{"entities/DbPRInsight.html":{}}}],["humorous",{"_index":1349,"title":{},"body":{"classes/CreateBlogSummaryDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{}}}],["id",{"_index":670,"title":{},"body":{"controllers/AuthController.html":{},"injectables/CommitAuthorsService.html":{},"injectables/CommitsService.html":{},"classes/Contributor.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateInsightDto.html":{},"classes/CreateUserListDto.html":{},"injectables/CustomerService.html":{},"entities/DbBakedRepo.html":{},"entities/DbCommitAuthors.html":{},"entities/DbCommits.html":{},"entities/DbContribution.html":{},"entities/DbContributionsProjects.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbPullRequestReview.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserNotification.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"controllers/EndorsementController.html":{},"injectables/EndorsementService.html":{},"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"controllers/PizzaOvenController.html":{},"injectables/PizzaOvenService.html":{},"controllers/PullRequestController.html":{},"injectables/PullRequestReviewService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"classes/RepoInfo.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StripeService.html":{},"controllers/StripeWebhookController.html":{},"classes/SupabaseAuthDto.html":{},"classes/TopProjectsDto.html":{},"classes/TopUsersDto.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"injectables/UserListService.html":{},"controllers/UserListStatsController.html":{},"injectables/UserNotificationService.html":{},"injectables/UserReposService.html":{}}}],["id'})@apinotfoundresponse({description",{"_index":2490,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["id'})@apiokresponse({type",{"_index":2513,"title":{},"body":{"controllers/EndorsementController.html":{},"controllers/InsightController.html":{},"controllers/PizzaOvenController.html":{},"controllers/PullRequestController.html":{},"controllers/RepoController.html":{}}}],["identifier",{"_index":1597,"title":{},"body":{"entities/DbBakedRepo.html":{},"entities/DbCommitAuthors.html":{},"entities/DbCommits.html":{},"entities/DbContribution.html":{},"entities/DbCoupon.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbPullRequestGitHubEvents.html":{},"entities/DbPullRequestReview.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserNotification.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"classes/SupabaseAuthDto.html":{}}}],["ids",{"_index":973,"title":{},"body":{"classes/CollaboratorsDto.html":{},"controllers/ContributorInsightsController.html":{},"classes/UserRepoOptionsDto-1.html":{},"classes/VotedRepoDto.html":{}}}],["ids'})@apipaginatedresponse(dbpullrequestcontributor)@apiokresponse({type",{"_index":1257,"title":{},"body":{"controllers/ContributorInsightsController.html":{}}}],["ignore",{"_index":505,"title":{},"body":{"modules/AppModule.html":{},"classes/UpdateUserCollaborationDto.html":{}}}],["image",{"_index":5507,"title":{},"body":{"index.html":{}}}],["implements",{"_index":1544,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{},"guards/EndorsementTokenGuard.html":{},"injectables/HttpLoggerMiddleware.html":{}}}],["implied",{"_index":5673,"title":{},"body":{"license.html":{}}}],["import",{"_index":16,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"modules/ApiServicesModule.html":{},"modules/AppModule.html":{},"classes/ApplyUserCouponDto.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"classes/BakeRepoDto.html":{},"controllers/BlogSummaryController.html":{},"modules/BlogSummaryModule.html":{},"injectables/BlogSummaryService.html":{},"interfaces/ChatResponse.html":{},"controllers/CodeExplanationController.html":{},"injectables/CodeExplanationService.html":{},"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"controllers/CodeTestSuggestionController.html":{},"injectables/CodeTestSuggestionService.html":{},"classes/CollaboratorsDto.html":{},"classes/CommitAuthorDto.html":{},"injectables/CommitAuthorsService.html":{},"classes/CommitsDto.html":{},"injectables/CommitsService.html":{},"modules/ContributionModule.html":{},"classes/ContributionPageMetaDto.html":{},"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"classes/ContributionsByProjectDto.html":{},"classes/ContributionsPageDto.html":{},"classes/ContributionsTimeframeDto.html":{},"classes/Contributor.html":{},"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"modules/ContributorModule.html":{},"classes/ContributorPullRequestsDto.html":{},"modules/CouponModule.html":{},"injectables/CouponService.html":{},"classes/CreateBlogSummaryDto.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateInsightDto.html":{},"classes/CreateInsightMemberDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/CreateLogDto.html":{},"classes/CreateUserCollaborationDto.html":{},"classes/CreateUserHighlightDto.html":{},"classes/CreateUserListDto.html":{},"injectables/CustomLogger.html":{},"modules/CustomerModule.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"entities/DbBakedRepo.html":{},"entities/DbCommitAuthors.html":{},"entities/DbCommits.html":{},"entities/DbContribution.html":{},"entities/DbContributionStatTimeframe.html":{},"entities/DbContributionsProjects.html":{},"entities/DbContributorCategoryTimeframe.html":{},"entities/DbCoupon.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"classes/DbFilteredUser.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbPullRequestGitHubEvents.html":{},"entities/DbPullRequestReview.html":{},"entities/DbRepoLoginContributions.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"classes/DbTimezone.html":{},"classes/DbTopUser.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightReactionResponse.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserListContributorStat.html":{},"entities/DbUserListContributorStat-1.html":{},"entities/DbUserNotification.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"controllers/EmojiController.html":{},"modules/EmojiModule.html":{},"injectables/EmojiService.html":{},"controllers/EndorsementController.html":{},"modules/EndorsementModule.html":{},"injectables/EndorsementService.html":{},"guards/EndorsementTokenGuard.html":{},"classes/FilterListContributorsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/FilteredUsersDto.html":{},"classes/FollowManyUsersDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"controllers/HighlightController.html":{},"modules/HighlightModule.html":{},"classes/HighlightOptionsDto.html":{},"injectables/HttpLoggerMiddleware.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"injectables/InsightRepoService.html":{},"modules/InsightsModule.html":{},"injectables/InsightsService.html":{},"controllers/IssueSummaryController.html":{},"modules/IssueSummaryModule.html":{},"injectables/IssueSummaryService.html":{},"modules/LogModule.html":{},"injectables/LogService.html":{},"modules/OpenAiModule.html":{},"injectables/OpenAiService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaParameters.html":{},"classes/PageOptionsDto.html":{},"injectables/PagerService.html":{},"interfaces/PaginationInput.html":{},"controllers/PizzaOvenController.html":{},"modules/PizzaOvenModule.html":{},"injectables/PizzaOvenService.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestGithubEventsService.html":{},"injectables/PullRequestInsightsService.html":{},"modules/PullRequestModule.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestReviewService.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"modules/RepoFilterModule.html":{},"injectables/RepoFilterService.html":{},"classes/RepoInfo.html":{},"modules/RepoModule.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"modules/StarModule.html":{},"injectables/StarService.html":{},"modules/StargazeModule.html":{},"injectables/StargazeService.html":{},"modules/StripeModule.html":{},"injectables/StripeService.html":{},"modules/StripeSubscriptionModule.html":{},"injectables/StripeSubscriptionService.html":{},"modules/StripeWebHookModule.html":{},"controllers/StripeWebhookController.html":{},"modules/SubmitModule.html":{},"injectables/SubmitService.html":{},"classes/SupabaseAuthDto.html":{},"injectables/SupabaseGuard.html":{},"injectables/SupabaseStrategy.html":{},"modules/TierModule.html":{},"injectables/TierService.html":{},"modules/TimescaleModule.html":{},"classes/TopProjectsDto.html":{},"classes/TopUsersDto.html":{},"classes/UpdateEndorsementDto.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateInsightMemberDto.html":{},"classes/UpdateUserCollaborationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowingController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"modules/UserListModule.html":{},"classes/UserListMostActiveContributorsDto.html":{},"injectables/UserListService.html":{},"controllers/UserListStatsController.html":{},"injectables/UserListStatsService.html":{},"modules/UserModule.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"classes/UserOnboardingDto.html":{},"injectables/UserOrganizationService.html":{},"controllers/UserRecommendationController.html":{},"classes/UserRepoOptionsDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"modules/UserReposModule.html":{},"injectables/UserReposService.html":{},"modules/VoteModule.html":{},"injectables/VoteService.html":{},"classes/VotedRepoDto.html":{}}}],["imports",{"_index":287,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/BlogSummaryModule.html":{},"modules/ContributionModule.html":{},"modules/ContributorModule.html":{},"modules/CouponModule.html":{},"modules/CustomerModule.html":{},"modules/EmojiModule.html":{},"modules/EndorsementModule.html":{},"modules/HealthModule.html":{},"modules/HighlightModule.html":{},"modules/InsightsModule.html":{},"modules/IssueSummaryModule.html":{},"modules/LogModule.html":{},"modules/PizzaOvenModule.html":{},"modules/PullRequestModule.html":{},"modules/RepoModule.html":{},"modules/StarModule.html":{},"modules/StargazeModule.html":{},"modules/StripeModule.html":{},"modules/StripeSubscriptionModule.html":{},"modules/StripeWebHookModule.html":{},"modules/SubmitModule.html":{},"modules/TimescaleModule.html":{},"modules/UserListModule.html":{},"modules/UserModule.html":{},"modules/UserReposModule.html":{},"modules/VoteModule.html":{}}}],["include",{"_index":3096,"title":{},"body":{"injectables/IssueSummaryService.html":{}}}],["included",{"_index":5668,"title":{},"body":{"license.html":{}}}],["including",{"_index":5608,"title":{},"body":{"index.html":{},"license.html":{}}}],["inclusive",{"_index":3411,"title":{},"body":{"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{}}}],["index",{"_index":10,"title":{"index.html":{}},"body":{"interfaces/AllContributionsCount.html":{},"classes/ApplyUserCouponDto.html":{},"controllers/AuthController.html":{},"classes/BakeRepoDto.html":{},"controllers/BlogSummaryController.html":{},"injectables/BlogSummaryService.html":{},"interfaces/ChatResponse.html":{},"controllers/CodeExplanationController.html":{},"injectables/CodeExplanationService.html":{},"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"controllers/CodeTestSuggestionController.html":{},"injectables/CodeTestSuggestionService.html":{},"classes/CollaboratorsDto.html":{},"classes/CommitAuthorDto.html":{},"injectables/CommitAuthorsService.html":{},"classes/CommitsDto.html":{},"injectables/CommitsService.html":{},"classes/ContributionPageMetaDto.html":{},"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"classes/ContributionsByProjectDto.html":{},"classes/ContributionsPageDto.html":{},"classes/ContributionsTimeframeDto.html":{},"classes/Contributor.html":{},"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"classes/ContributorPullRequestsDto.html":{},"injectables/CouponService.html":{},"classes/CreateBlogSummaryDto.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateInsightDto.html":{},"classes/CreateInsightMemberDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/CreateLogDto.html":{},"classes/CreateUserCollaborationDto.html":{},"classes/CreateUserHighlightDto.html":{},"classes/CreateUserListDto.html":{},"injectables/CustomLogger.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"entities/DbBakedRepo.html":{},"entities/DbCommitAuthors.html":{},"entities/DbCommits.html":{},"entities/DbContribution.html":{},"entities/DbContributionStatTimeframe.html":{},"entities/DbContributionsProjects.html":{},"entities/DbContributorCategoryTimeframe.html":{},"entities/DbCoupon.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"classes/DbFilteredUser.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbPullRequestGitHubEvents.html":{},"entities/DbPullRequestReview.html":{},"entities/DbRepoLoginContributions.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"classes/DbTimezone.html":{},"classes/DbTopUser.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightReactionResponse.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserListContributorStat.html":{},"entities/DbUserListContributorStat-1.html":{},"entities/DbUserNotification.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"controllers/EmojiController.html":{},"injectables/EmojiService.html":{},"controllers/EndorsementController.html":{},"injectables/EndorsementService.html":{},"guards/EndorsementTokenGuard.html":{},"classes/FilterListContributorsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/FilteredUsersDto.html":{},"classes/FollowManyUsersDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"controllers/HealthController.html":{},"controllers/HighlightController.html":{},"classes/HighlightOptionsDto.html":{},"injectables/HttpLoggerMiddleware.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"controllers/IssueSummaryController.html":{},"injectables/IssueSummaryService.html":{},"injectables/LogService.html":{},"injectables/OpenAiService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaParameters.html":{},"classes/PageOptionsDto.html":{},"injectables/PagerService.html":{},"interfaces/PaginationInput.html":{},"controllers/PizzaOvenController.html":{},"injectables/PizzaOvenService.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestGithubEventsService.html":{},"injectables/PullRequestInsightsService.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestReviewService.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"injectables/RepoFilterService.html":{},"classes/RepoInfo.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeService.html":{},"injectables/StripeSubscriptionService.html":{},"controllers/StripeWebhookController.html":{},"injectables/SubmitService.html":{},"classes/SupabaseAuthDto.html":{},"injectables/SupabaseStrategy.html":{},"injectables/TierService.html":{},"classes/TopProjectsDto.html":{},"classes/TopUsersDto.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateInsightMemberDto.html":{},"classes/UpdateUserCollaborationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowingController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"classes/UserListMostActiveContributorsDto.html":{},"injectables/UserListService.html":{},"controllers/UserListStatsController.html":{},"injectables/UserListStatsService.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"classes/UserOnboardingDto.html":{},"injectables/UserOrganizationService.html":{},"controllers/UserRecommendationController.html":{},"classes/UserRepoOptionsDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"injectables/UserReposService.html":{},"injectables/VoteService.html":{},"classes/VotedRepoDto.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["indicated",{"_index":4216,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["indicating",{"_index":1065,"title":{},"body":{"classes/ContributionPageMetaDto.html":{},"entities/DbInsight.html":{},"entities/DbUserList.html":{},"classes/PageMetaDto.html":{}}}],["individual",{"_index":3004,"title":{},"body":{"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"controllers/UserListController.html":{}}}],["info",{"_index":3,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"modules/ApiServicesModule.html":{},"modules/AppModule.html":{},"classes/ApplyUserCouponDto.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"classes/BakeRepoDto.html":{},"controllers/BlogSummaryController.html":{},"modules/BlogSummaryModule.html":{},"injectables/BlogSummaryService.html":{},"interfaces/ChatResponse.html":{},"controllers/CodeExplanationController.html":{},"injectables/CodeExplanationService.html":{},"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"controllers/CodeTestSuggestionController.html":{},"injectables/CodeTestSuggestionService.html":{},"classes/CollaboratorsDto.html":{},"classes/CommitAuthorDto.html":{},"injectables/CommitAuthorsService.html":{},"classes/CommitsDto.html":{},"injectables/CommitsService.html":{},"modules/ContributionModule.html":{},"classes/ContributionPageMetaDto.html":{},"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"classes/ContributionsByProjectDto.html":{},"classes/ContributionsPageDto.html":{},"classes/ContributionsTimeframeDto.html":{},"classes/Contributor.html":{},"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"modules/ContributorModule.html":{},"classes/ContributorPullRequestsDto.html":{},"modules/CouponModule.html":{},"injectables/CouponService.html":{},"classes/CreateBlogSummaryDto.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateInsightDto.html":{},"classes/CreateInsightMemberDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/CreateLogDto.html":{},"classes/CreateUserCollaborationDto.html":{},"classes/CreateUserHighlightDto.html":{},"classes/CreateUserListDto.html":{},"injectables/CustomLogger.html":{},"modules/CustomerModule.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"entities/DbBakedRepo.html":{},"entities/DbCommitAuthors.html":{},"entities/DbCommits.html":{},"entities/DbContribution.html":{},"entities/DbContributionStatTimeframe.html":{},"entities/DbContributionsProjects.html":{},"entities/DbContributorCategoryTimeframe.html":{},"entities/DbCoupon.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"classes/DbFilteredUser.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbPullRequestGitHubEvents.html":{},"entities/DbPullRequestReview.html":{},"entities/DbRepoLoginContributions.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"classes/DbTimezone.html":{},"classes/DbTopUser.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightReactionResponse.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserListContributorStat.html":{},"entities/DbUserListContributorStat-1.html":{},"entities/DbUserNotification.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"controllers/EmojiController.html":{},"modules/EmojiModule.html":{},"injectables/EmojiService.html":{},"controllers/EndorsementController.html":{},"modules/EndorsementModule.html":{},"injectables/EndorsementService.html":{},"guards/EndorsementTokenGuard.html":{},"classes/FilterListContributorsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/FilteredUsersDto.html":{},"classes/FollowManyUsersDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"controllers/HighlightController.html":{},"modules/HighlightModule.html":{},"classes/HighlightOptionsDto.html":{},"injectables/HttpLoggerMiddleware.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"injectables/InsightRepoService.html":{},"modules/InsightsModule.html":{},"injectables/InsightsService.html":{},"controllers/IssueSummaryController.html":{},"modules/IssueSummaryModule.html":{},"injectables/IssueSummaryService.html":{},"modules/LogModule.html":{},"injectables/LogService.html":{},"modules/OpenAiModule.html":{},"injectables/OpenAiService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaParameters.html":{},"classes/PageOptionsDto.html":{},"injectables/PagerService.html":{},"interfaces/PaginationInput.html":{},"controllers/PizzaOvenController.html":{},"modules/PizzaOvenModule.html":{},"injectables/PizzaOvenService.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestGithubEventsService.html":{},"injectables/PullRequestInsightsService.html":{},"modules/PullRequestModule.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestReviewService.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"modules/RepoFilterModule.html":{},"injectables/RepoFilterService.html":{},"classes/RepoInfo.html":{},"modules/RepoModule.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"modules/StarModule.html":{},"injectables/StarService.html":{},"modules/StargazeModule.html":{},"injectables/StargazeService.html":{},"modules/StripeModule.html":{},"injectables/StripeService.html":{},"modules/StripeSubscriptionModule.html":{},"injectables/StripeSubscriptionService.html":{},"modules/StripeWebHookModule.html":{},"controllers/StripeWebhookController.html":{},"modules/SubmitModule.html":{},"injectables/SubmitService.html":{},"classes/SupabaseAuthDto.html":{},"injectables/SupabaseGuard.html":{},"injectables/SupabaseStrategy.html":{},"modules/TierModule.html":{},"injectables/TierService.html":{},"modules/TimescaleModule.html":{},"classes/TopProjectsDto.html":{},"classes/TopUsersDto.html":{},"classes/UpdateEndorsementDto.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateInsightMemberDto.html":{},"classes/UpdateUserCollaborationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowingController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"modules/UserListModule.html":{},"classes/UserListMostActiveContributorsDto.html":{},"injectables/UserListService.html":{},"controllers/UserListStatsController.html":{},"injectables/UserListStatsService.html":{},"modules/UserModule.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"classes/UserOnboardingDto.html":{},"injectables/UserOrganizationService.html":{},"controllers/UserRecommendationController.html":{},"classes/UserRepoOptionsDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"modules/UserReposModule.html":{},"injectables/UserReposService.html":{},"modules/VoteModule.html":{},"injectables/VoteService.html":{},"classes/VotedRepoDto.html":{},"miscellaneous/variables.html":{}}}],["info.dto",{"_index":1399,"title":{},"body":{"classes/CreateInsightDto.html":{},"injectables/InsightRepoService.html":{},"injectables/UserReposService.html":{}}}],["info.dto.ts",{"_index":3669,"title":{},"body":{"classes/RepoInfo.html":{}}}],["info.dto.ts:11",{"_index":3672,"title":{},"body":{"classes/RepoInfo.html":{}}}],["info.dto.ts:19",{"_index":3670,"title":{},"body":{"classes/RepoInfo.html":{}}}],["information",{"_index":596,"title":{},"body":{"controllers/AuthController.html":{},"classes/CreateInsightDto.html":{},"controllers/PullRequestDescriptionController.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateInsightDto.html":{},"controllers/UserInsightMemberController.html":{},"miscellaneous/variables.html":{}}}],["information'})@apibearerauth()@useguards(supabaseguard)@apibadrequestresponse({description",{"_index":3326,"title":{},"body":{"controllers/PullRequestDescriptionController.html":{}}}],["information'})@apibearerauth()@useguards(supabaseguard)@apiokresponse({type",{"_index":4856,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["information'})@apiokresponse({type",{"_index":579,"title":{},"body":{"controllers/AuthController.html":{}}}],["informative",{"_index":1348,"title":{},"body":{"classes/CreateBlogSummaryDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{}}}],["ingesting",{"_index":5613,"title":{},"body":{"index.html":{}}}],["inherited",{"_index":1066,"title":{},"body":{"classes/ContributionPageMetaDto.html":{},"classes/ContributionPageOptionsDto.html":{},"classes/ContributorPullRequestsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/UpdateInsightDto.html":{},"classes/UserListMostActiveContributorsDto.html":{},"classes/UserRepoOptionsDto.html":{}}}],["initial",{"_index":5947,"title":{},"body":{"miscellaneous/variables.html":{}}}],["inject",{"_index":470,"title":{},"body":{"modules/AppModule.html":{}}}],["injectable",{"_index":17,"title":{"injectables/BlogSummaryService.html":{},"injectables/CodeExplanationService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"injectables/CommitAuthorsService.html":{},"injectables/CommitsService.html":{},"injectables/ContributionService.html":{},"injectables/CouponService.html":{},"injectables/CustomLogger.html":{},"injectables/CustomerService.html":{},"injectables/EmojiService.html":{},"injectables/EndorsementService.html":{},"injectables/HttpLoggerMiddleware.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"injectables/IssueSummaryService.html":{},"injectables/LogService.html":{},"injectables/OpenAiService.html":{},"injectables/PagerService.html":{},"injectables/PizzaOvenService.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestGithubEventsService.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestReviewService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoFilterService.html":{},"injectables/RepoService.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeService.html":{},"injectables/StripeSubscriptionService.html":{},"injectables/SubmitService.html":{},"injectables/SupabaseGuard.html":{},"injectables/SupabaseStrategy.html":{},"injectables/TierService.html":{},"injectables/UserCollaborationService.html":{},"injectables/UserFollowService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserListService.html":{},"injectables/UserListStatsService.html":{},"injectables/UserNotificationService.html":{},"injectables/UserOrganizationService.html":{},"injectables/UserReposService.html":{},"injectables/VoteService.html":{}},"body":{"interfaces/AllContributionsCount.html":{},"injectables/BlogSummaryService.html":{},"interfaces/ChatResponse.html":{},"injectables/CodeExplanationService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"injectables/CommitAuthorsService.html":{},"injectables/CommitsService.html":{},"injectables/ContributionService.html":{},"injectables/CouponService.html":{},"injectables/CustomLogger.html":{},"injectables/CustomerService.html":{},"injectables/EmojiService.html":{},"injectables/EndorsementService.html":{},"guards/EndorsementTokenGuard.html":{},"injectables/HttpLoggerMiddleware.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"injectables/IssueSummaryService.html":{},"injectables/LogService.html":{},"injectables/OpenAiService.html":{},"injectables/PagerService.html":{},"interfaces/PaginationInput.html":{},"injectables/PizzaOvenService.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestGithubEventsService.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestReviewService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoFilterService.html":{},"injectables/RepoService.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeService.html":{},"injectables/StripeSubscriptionService.html":{},"injectables/SubmitService.html":{},"injectables/SupabaseGuard.html":{},"injectables/SupabaseStrategy.html":{},"injectables/TierService.html":{},"injectables/UserCollaborationService.html":{},"injectables/UserFollowService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserListService.html":{},"injectables/UserListStatsService.html":{},"injectables/UserNotificationService.html":{},"injectables/UserOrganizationService.html":{},"injectables/UserReposService.html":{},"injectables/VoteService.html":{}}}],["injectables",{"_index":810,"title":{},"body":{"injectables/BlogSummaryService.html":{},"injectables/CodeExplanationService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"injectables/CommitAuthorsService.html":{},"injectables/CommitsService.html":{},"injectables/ContributionService.html":{},"injectables/CouponService.html":{},"injectables/CustomLogger.html":{},"injectables/CustomerService.html":{},"injectables/EmojiService.html":{},"injectables/EndorsementService.html":{},"injectables/HttpLoggerMiddleware.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"injectables/IssueSummaryService.html":{},"injectables/LogService.html":{},"injectables/OpenAiService.html":{},"injectables/PagerService.html":{},"injectables/PizzaOvenService.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestGithubEventsService.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestReviewService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoFilterService.html":{},"injectables/RepoService.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeService.html":{},"injectables/StripeSubscriptionService.html":{},"injectables/SubmitService.html":{},"injectables/SupabaseGuard.html":{},"injectables/SupabaseStrategy.html":{},"injectables/TierService.html":{},"injectables/UserCollaborationService.html":{},"injectables/UserFollowService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserListService.html":{},"injectables/UserListStatsService.html":{},"injectables/UserNotificationService.html":{},"injectables/UserOrganizationService.html":{},"injectables/UserReposService.html":{},"injectables/VoteService.html":{},"overview.html":{}}}],["injectdatasource",{"_index":301,"title":{},"body":{"modules/AppModule.html":{}}}],["injectdatasource(\"apiconnection",{"_index":515,"title":{},"body":{"modules/AppModule.html":{}}}],["injectdatasource(\"logconnection",{"_index":518,"title":{},"body":{"modules/AppModule.html":{}}}],["injectdatasource(\"timescaleconnection",{"_index":517,"title":{},"body":{"modules/AppModule.html":{}}}],["injectrepository",{"_index":23,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/CommitAuthorsService.html":{},"injectables/CommitsService.html":{},"injectables/ContributionService.html":{},"injectables/CouponService.html":{},"injectables/CustomerService.html":{},"injectables/EmojiService.html":{},"injectables/EndorsementService.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"injectables/LogService.html":{},"injectables/PizzaOvenService.html":{},"injectables/PullRequestGithubEventsService.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestReviewService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoService.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeSubscriptionService.html":{},"injectables/SubmitService.html":{},"injectables/UserCollaborationService.html":{},"injectables/UserFollowService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserListService.html":{},"injectables/UserListStatsService.html":{},"injectables/UserNotificationService.html":{},"injectables/UserOrganizationService.html":{},"injectables/UserReposService.html":{},"injectables/VoteService.html":{}}}],["injectrepository(dbbakedrepo",{"_index":3268,"title":{},"body":{"injectables/PizzaOvenService.html":{}}}],["injectrepository(dbcommitauthors",{"_index":1006,"title":{},"body":{"injectables/CommitAuthorsService.html":{}}}],["injectrepository(dbcommits",{"_index":1037,"title":{},"body":{"injectables/CommitsService.html":{}}}],["injectrepository(dbcontribution",{"_index":1148,"title":{},"body":{"injectables/ContributionService.html":{}}}],["injectrepository(dbcoupon",{"_index":1312,"title":{},"body":{"injectables/CouponService.html":{}}}],["injectrepository(dbcustomer",{"_index":1537,"title":{},"body":{"injectables/CustomerService.html":{}}}],["injectrepository(dbemoji",{"_index":2466,"title":{},"body":{"injectables/EmojiService.html":{}}}],["injectrepository(dbendorsement",{"_index":2592,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["injectrepository(dbinsight",{"_index":3054,"title":{},"body":{"injectables/InsightsService.html":{}}}],["injectrepository(dbinsightmember",{"_index":2958,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["injectrepository(dbinsightrepo",{"_index":3003,"title":{},"body":{"injectables/InsightRepoService.html":{}}}],["injectrepository(dblog",{"_index":3116,"title":{},"body":{"injectables/LogService.html":{}}}],["injectrepository(dbprinsight",{"_index":3403,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["injectrepository(dbpullrequest",{"_index":1150,"title":{},"body":{"injectables/ContributionService.html":{},"injectables/PullRequestService.html":{}}}],["injectrepository(dbpullrequestgithubevents",{"_index":3356,"title":{},"body":{"injectables/PullRequestGithubEventsService.html":{}}}],["injectrepository(dbpullrequestreview",{"_index":3478,"title":{},"body":{"injectables/PullRequestReviewService.html":{}}}],["injectrepository(dbrepo",{"_index":3722,"title":{},"body":{"injectables/RepoService.html":{}}}],["injectrepository(dbrepotouserstargazers",{"_index":4017,"title":{},"body":{"injectables/StargazeService.html":{}}}],["injectrepository(dbrepotouserstars",{"_index":3989,"title":{},"body":{"injectables/StarService.html":{}}}],["injectrepository(dbrepotousersubmissions",{"_index":4182,"title":{},"body":{"injectables/SubmitService.html":{}}}],["injectrepository(dbrepotouservotes",{"_index":5403,"title":{},"body":{"injectables/VoteService.html":{}}}],["injectrepository(dbsubscription",{"_index":4075,"title":{},"body":{"injectables/StripeSubscriptionService.html":{}}}],["injectrepository(dbuser",{"_index":1149,"title":{},"body":{"injectables/ContributionService.html":{},"injectables/UserListService.html":{}}}],["injectrepository(dbusercollaboration",{"_index":4440,"title":{},"body":{"injectables/UserCollaborationService.html":{}}}],["injectrepository(dbuserhighlight",{"_index":4767,"title":{},"body":{"injectables/UserHighlightsService.html":{},"injectables/UserListService.html":{}}}],["injectrepository(dbuserhighlightreaction",{"_index":4768,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["injectrepository(dbuserlist",{"_index":5122,"title":{},"body":{"injectables/UserListService.html":{}}}],["injectrepository(dbuserlistcontributor",{"_index":63,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListService.html":{},"injectables/UserListStatsService.html":{}}}],["injectrepository(dbusernotification",{"_index":5288,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["injectrepository(dbuserorganization",{"_index":5326,"title":{},"body":{"injectables/UserOrganizationService.html":{}}}],["injectrepository(dbuserrepo",{"_index":5376,"title":{},"body":{"injectables/UserReposService.html":{}}}],["injectrepository(dbusertouserfollows",{"_index":4570,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["inner",{"_index":3362,"title":{},"body":{"injectables/PullRequestGithubEventsService.html":{}}}],["innerjoin",{"_index":208,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListService.html":{},"injectables/UserListStatsService.html":{}}}],["innerjoin(\"insights",{"_index":2972,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["innerjoin(\"repos",{"_index":203,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/EndorsementService.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"injectables/UserListStatsService.html":{}}}],["innerjoin(\"users",{"_index":213,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/PullRequestService.html":{},"injectables/RepoService.html":{},"injectables/UserFollowService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserListService.html":{},"injectables/UserListStatsService.html":{},"injectables/UserNotificationService.html":{}}}],["innerjoinandselect(\"user_collaborations.request_user",{"_index":4447,"title":{},"body":{"injectables/UserCollaborationService.html":{}}}],["innerjoinandselect(\"user_collaborations.user",{"_index":4446,"title":{},"body":{"injectables/UserCollaborationService.html":{}}}],["innerjoinandselect(\"user_notifications.from_user",{"_index":5291,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["innerjoinandselect(\"user_organizations.organization_user",{"_index":5329,"title":{},"body":{"injectables/UserOrganizationService.html":{}}}],["innerjoinandselect(\"user_organizations.user",{"_index":5328,"title":{},"body":{"injectables/UserOrganizationService.html":{}}}],["innerjoinandselect(`insights.user",{"_index":3057,"title":{},"body":{"injectables/InsightsService.html":{}}}],["insert",{"_index":1702,"title":{},"body":{"entities/DbContributionStatTimeframe.html":{},"entities/DbContributionsProjects.html":{},"entities/DbContributorCategoryTimeframe.html":{},"entities/DbInsightMember.html":{},"entities/DbPullRequest.html":{},"entities/DbPullRequestGitHubEvents.html":{},"entities/DbRepoLoginContributions.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserListContributorStat.html":{},"entities/DbUserListContributorStat-1.html":{}}}],["inserting/updating",{"_index":4139,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["insight",{"_index":1392,"title":{},"body":{"classes/CreateInsightDto.html":{},"classes/CreateInsightMemberDto.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbUserList.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightRepoService.html":{},"modules/InsightsModule.html":{},"injectables/InsightsService.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateInsightMemberDto.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["insight'})@apibadrequestresponse({description",{"_index":2906,"title":{},"body":{"controllers/InsightController.html":{},"controllers/UserInsightsController.html":{}}}],["insight'})@apibearerauth()@useguards(supabaseguard)@apiokresponse({type",{"_index":4841,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["insight'})@apiparam({name",{"_index":2901,"title":{},"body":{"controllers/InsightController.html":{}}}],["insight.controller",{"_index":3028,"title":{},"body":{"modules/InsightsModule.html":{}}}],["insight.controller.ts",{"_index":4894,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["insight.controller.ts:108",{"_index":4902,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["insight.controller.ts:59",{"_index":4899,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["insight.controller.ts:77",{"_index":4897,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["insight.dto",{"_index":2913,"title":{},"body":{"controllers/InsightController.html":{},"classes/UpdateInsightDto.html":{},"controllers/UserInsightsController.html":{}}}],["insight.dto.ts",{"_index":1391,"title":{},"body":{"classes/CreateInsightDto.html":{},"classes/UpdateInsightDto.html":{}}}],["insight.dto.ts:14",{"_index":1395,"title":{},"body":{"classes/CreateInsightDto.html":{}}}],["insight.dto.ts:22",{"_index":1393,"title":{},"body":{"classes/CreateInsightDto.html":{}}}],["insight.dto.ts:32",{"_index":1397,"title":{},"body":{"classes/CreateInsightDto.html":{}}}],["insight.entity",{"_index":408,"title":{},"body":{"modules/AppModule.html":{},"entities/DbInsightRepo.html":{},"controllers/PullRequestController.html":{},"injectables/PullRequestInsightsService.html":{},"modules/PullRequestModule.html":{}}}],["insight.entity.ts",{"_index":1874,"title":{},"body":{"entities/DbPRInsight.html":{}}}],["insight.entity.ts:15",{"_index":1891,"title":{},"body":{"entities/DbPRInsight.html":{}}}],["insight.entity.ts:28",{"_index":1897,"title":{},"body":{"entities/DbPRInsight.html":{}}}],["insight.entity.ts:41",{"_index":1889,"title":{},"body":{"entities/DbPRInsight.html":{}}}],["insight.entity.ts:53",{"_index":1882,"title":{},"body":{"entities/DbPRInsight.html":{}}}],["insight.entity.ts:65",{"_index":1881,"title":{},"body":{"entities/DbPRInsight.html":{}}}],["insight.entity.ts:77",{"_index":1899,"title":{},"body":{"entities/DbPRInsight.html":{}}}],["insight.id",{"_index":4869,"title":{},"body":{"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["insight.repos",{"_index":1864,"title":{},"body":{"entities/DbInsightRepo.html":{}}}],["insight.repos)@joincolumn({name",{"_index":1860,"title":{},"body":{"entities/DbInsightRepo.html":{}}}],["insight.repos.filter((insightrepo",{"_index":4919,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["insight/dtos/insight",{"_index":2680,"title":{},"body":{"classes/FilterOptionsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{},"injectables/RepoFilterService.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{}}}],["insight/entities/insight",{"_index":370,"title":{},"body":{"modules/AppModule.html":{}}}],["insight/entities/insight.entity",{"_index":368,"title":{},"body":{"modules/AppModule.html":{},"modules/UserModule.html":{}}}],["insight/insights.module",{"_index":366,"title":{},"body":{"modules/AppModule.html":{}}}],["insight_id",{"_index":1833,"title":{},"body":{"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"controllers/UserInsightMemberController.html":{}}}],["insight_members",{"_index":1855,"title":{},"body":{"entities/DbInsightMember.html":{},"injectables/InsightsService.html":{}}}],["insight_members.insight_id=insights.id",{"_index":2973,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["insight_members.user_id=users.id",{"_index":2974,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["insight_members_invitation_email",{"_index":2971,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["insight_members_name",{"_index":2969,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["insight_repos",{"_index":1863,"title":{},"body":{"entities/DbInsightRepo.html":{},"injectables/InsightsService.html":{}}}],["insightcontroller",{"_index":2885,"title":{"controllers/InsightController.html":{}},"body":{"controllers/InsightController.html":{},"modules/InsightsModule.html":{}}}],["insightfilterfieldsenum",{"_index":2672,"title":{},"body":{"classes/FilterOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{},"injectables/RepoFilterService.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"miscellaneous/enumerations.html":{}}}],["insightfilterfieldsenum'})@isenum(insightfilterfieldsenum)@isoptional",{"_index":2673,"title":{},"body":{"classes/FilterOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{}}}],["insightfilterfieldsenum.mostspammed",{"_index":3660,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["insightfilterfieldsenum.recent",{"_index":3653,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["insightfilterfieldsenum.top100",{"_index":3655,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["insightid",{"_index":2946,"title":{},"body":{"injectables/InsightMemberService.html":{},"injectables/InsightRepoService.html":{},"controllers/UserInsightMemberController.html":{}}}],["insightmember",{"_index":2943,"title":{},"body":{"injectables/InsightMemberService.html":{},"controllers/UserInsightMemberController.html":{}}}],["insightmember.access",{"_index":4886,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["insightmemberrepository",{"_index":2940,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["insightmemberservice",{"_index":2929,"title":{"injectables/InsightMemberService.html":{}},"body":{"injectables/InsightMemberService.html":{},"modules/InsightsModule.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"overview.html":{}}}],["insightoptionsdto",{"_index":2976,"title":{"classes/InsightOptionsDto.html":{}},"body":{"classes/InsightOptionsDto.html":{}}}],["insightpageoptionsdto",{"_index":2891,"title":{"classes/InsightPageOptionsDto.html":{}},"body":{"controllers/InsightController.html":{},"classes/InsightPageOptionsDto.html":{},"injectables/InsightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["insightrepo",{"_index":1813,"title":{},"body":{"entities/DbInsight.html":{},"controllers/UserInsightsController.html":{}}}],["insightrepo.deleted_at",{"_index":4920,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["insightrepo.insight",{"_index":1814,"title":{},"body":{"entities/DbInsight.html":{}}}],["insightreporepository",{"_index":2995,"title":{},"body":{"injectables/InsightRepoService.html":{}}}],["insightreposervice",{"_index":2988,"title":{"injectables/InsightRepoService.html":{}},"body":{"injectables/InsightRepoService.html":{},"modules/InsightsModule.html":{},"controllers/UserInsightsController.html":{},"overview.html":{}}}],["insightrepository",{"_index":3041,"title":{},"body":{"injectables/InsightsService.html":{}}}],["insights",{"_index":1828,"title":{},"body":{"entities/DbInsight.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightsService.html":{},"controllers/PullRequestController.html":{},"classes/SupabaseAuthDto.html":{},"controllers/UserInsightsController.html":{},"index.html":{}}}],["insights'})@apiokresponse({type",{"_index":2892,"title":{},"body":{"controllers/InsightController.html":{}}}],["insights.controller",{"_index":1283,"title":{},"body":{"modules/ContributorModule.html":{}}}],["insights.controller.ts",{"_index":1244,"title":{},"body":{"controllers/ContributorInsightsController.html":{}}}],["insights.controller.ts:22",{"_index":1268,"title":{},"body":{"controllers/ContributorInsightsController.html":{}}}],["insights.controller.ts:35",{"_index":1261,"title":{},"body":{"controllers/ContributorInsightsController.html":{}}}],["insights.controller.ts:48",{"_index":1258,"title":{},"body":{"controllers/ContributorInsightsController.html":{}}}],["insights.controller.ts:61",{"_index":1265,"title":{},"body":{"controllers/ContributorInsightsController.html":{}}}],["insights.deleted_at",{"_index":3070,"title":{},"body":{"injectables/InsightsService.html":{}}}],["insights.dto",{"_index":1269,"title":{},"body":{"controllers/ContributorInsightsController.html":{},"injectables/PullRequestService.html":{}}}],["insights.dto.ts",{"_index":3276,"title":{},"body":{"classes/PullRequestContributorInsightsDto.html":{}}}],["insights.dto.ts:11",{"_index":3278,"title":{},"body":{"classes/PullRequestContributorInsightsDto.html":{}}}],["insights.id",{"_index":3071,"title":{},"body":{"injectables/InsightsService.html":{}}}],["insights.id=insight_repos.insight_id",{"_index":3059,"title":{},"body":{"injectables/InsightsService.html":{}}}],["insights.service",{"_index":2916,"title":{},"body":{"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"modules/InsightsModule.html":{},"controllers/PullRequestController.html":{},"modules/PullRequestModule.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["insights.service.ts",{"_index":3380,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["insights.service.ts:12",{"_index":3388,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["insights.service.ts:20",{"_index":3390,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["insights.service.ts:24",{"_index":3395,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["insights.service.ts:36",{"_index":3394,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["insights.service.ts:49",{"_index":3397,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["insights.service.ts:63",{"_index":3399,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["insights.service.ts:97",{"_index":3392,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["insights_count",{"_index":692,"title":{},"body":{"controllers/AuthController.html":{},"classes/SupabaseAuthDto.html":{}}}],["insights_role",{"_index":680,"title":{},"body":{"controllers/AuthController.html":{},"classes/SupabaseAuthDto.html":{}}}],["insightservice",{"_index":2938,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["insightsmodule",{"_index":269,"title":{"modules/InsightsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/InsightsModule.html":{},"modules.html":{},"overview.html":{}}}],["insightsreposervice",{"_index":4904,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["insightsservice",{"_index":2915,"title":{"injectables/InsightsService.html":{}},"body":{"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"modules/InsightsModule.html":{},"injectables/InsightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"overview.html":{}}}],["install",{"_index":5535,"title":{},"body":{"index.html":{}}}],["installation",{"_index":5534,"title":{},"body":{"index.html":{}}}],["installed",{"_index":5449,"title":{},"body":{"index.html":{}}}],["instance",{"_index":5456,"title":{},"body":{"index.html":{}}}],["instanceof",{"_index":853,"title":{},"body":{"injectables/BlogSummaryService.html":{},"injectables/CodeExplanationService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"injectables/IssueSummaryService.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/TierService.html":{},"controllers/UserFollowsController.html":{}}}],["instructions",{"_index":945,"title":{},"body":{"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{}}}],["integer",{"_index":975,"title":{},"body":{"classes/CollaboratorsDto.html":{},"classes/ContributionPageMetaDto.html":{},"classes/ContributionsByProjectDto.html":{},"classes/ContributionsTimeframeDto.html":{},"classes/CreateBlogSummaryDto.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateIssueSummaryDto.html":{},"entities/DbBakedRepo.html":{},"entities/DbCommitAuthors.html":{},"entities/DbCommits.html":{},"entities/DbContribution.html":{},"entities/DbContributionStatTimeframe.html":{},"entities/DbContributionsProjects.html":{},"entities/DbContributorCategoryTimeframe.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbPullRequestGitHubEvents.html":{},"entities/DbPullRequestReview.html":{},"entities/DbRepoLoginContributions.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserListContributorStat.html":{},"entities/DbUserListContributorStat-1.html":{},"entities/DbUserNotification.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"classes/FilterListContributorsDto.html":{},"classes/FilteredUsersDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{},"controllers/PizzaOvenController.html":{},"classes/PullRequestContributorInsightsDto.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"classes/RepoInfo.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"classes/SupabaseAuthDto.html":{},"classes/TopProjectsDto.html":{},"classes/TopUsersDto.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"controllers/UserListStatsController.html":{},"classes/UserRepoOptionsDto-1.html":{},"classes/VotedRepoDto.html":{}}}],["integer'})@column",{"_index":1843,"title":{},"body":{"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{}}}],["integer'})@column('bigint",{"_index":2270,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["integer'})@column('integer",{"_index":1975,"title":{},"body":{"entities/DbPullRequest.html":{},"entities/DbPullRequestGitHubEvents.html":{}}}],["integer'})@column({type",{"_index":1635,"title":{},"body":{"entities/DbCommits.html":{},"entities/DbContribution.html":{},"entities/DbContributionStatTimeframe.html":{},"entities/DbContributionsProjects.html":{},"entities/DbContributorCategoryTimeframe.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbPullRequestGitHubEvents.html":{},"entities/DbRepoLoginContributions.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributorStat.html":{},"entities/DbUserListContributorStat-1.html":{},"entities/DbUserNotification.html":{}}}],["integer'})@isoptional()@type(undefined",{"_index":4311,"title":{},"body":{"classes/TopUsersDto.html":{}}}],["integer'})@primarycolumn('bigint",{"_index":1599,"title":{},"body":{"entities/DbBakedRepo.html":{},"entities/DbCommitAuthors.html":{},"entities/DbCommits.html":{},"entities/DbContribution.html":{},"entities/DbUserNotification.html":{}}}],["integer'})@primarycolumn('integer",{"_index":1952,"title":{},"body":{"entities/DbPullRequest.html":{},"entities/DbPullRequestGitHubEvents.html":{},"entities/DbPullRequestReview.html":{}}}],["integer'})@primarycolumn()@primarygeneratedcolumn",{"_index":1803,"title":{},"body":{"entities/DbInsight.html":{},"entities/DbInsightRepo.html":{}}}],["integer'})@primarycolumn({type",{"_index":1890,"title":{},"body":{"entities/DbPRInsight.html":{}}}],["integer'})@primarygeneratedcolumn",{"_index":2099,"title":{},"body":{"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{}}}],["integer'})@primarygeneratedcolumn({type",{"_index":2249,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["integer'})@type(undefined)@isin(['0",{"_index":1112,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/ContributorPullRequestsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/UserListMostActiveContributorsDto.html":{},"classes/UserRepoOptionsDto.html":{}}}],["integer'})@type(undefined)@isin(['7",{"_index":1115,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/ContributionsByProjectDto.html":{},"classes/ContributionsTimeframeDto.html":{},"classes/ContributorPullRequestsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/TopProjectsDto.html":{},"classes/UserListMostActiveContributorsDto.html":{},"classes/UserRepoOptionsDto.html":{}}}],["integer'})@type(undefined)@isint()@min(1)@isoptional",{"_index":1107,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/ContributorPullRequestsDto.html":{},"classes/FilterListContributorsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/FilteredUsersDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/TopUsersDto.html":{},"classes/UserListMostActiveContributorsDto.html":{},"classes/UserRepoOptionsDto.html":{}}}],["integer'})@type(undefined)@isint()@min(1)@max(100)@isoptional",{"_index":2638,"title":{},"body":{"classes/FilterListContributorsDto.html":{},"classes/FilteredUsersDto.html":{}}}],["integer'})@type(undefined)@isint()@min(1)@max(10000)@isoptional",{"_index":1101,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/ContributorPullRequestsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/TopUsersDto.html":{},"classes/UserListMostActiveContributorsDto.html":{},"classes/UserRepoOptionsDto.html":{}}}],["integrates",{"_index":5612,"title":{},"body":{"index.html":{}}}],["integration",{"_index":5611,"title":{},"body":{"index.html":{}}}],["integrations",{"_index":5713,"title":{},"body":{"properties.html":{}}}],["interest",{"_index":3782,"title":{},"body":{"injectables/RepoService.html":{}}}],["interests",{"_index":614,"title":{},"body":{"controllers/AuthController.html":{},"injectables/RepoService.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"classes/UserOnboardingDto.html":{},"controllers/UserRecommendationController.html":{}}}],["interests.dto",{"_index":641,"title":{},"body":{"controllers/AuthController.html":{}}}],["interests.dto.ts",{"_index":4375,"title":{},"body":{"classes/UpdateUserProfileInterestsDto.html":{}}}],["interests.dto.ts:12",{"_index":4377,"title":{},"body":{"classes/UpdateUserProfileInterestsDto.html":{}}}],["interests.map(async",{"_index":3781,"title":{},"body":{"injectables/RepoService.html":{}}}],["interface",{"_index":0,"title":{"interfaces/AllContributionsCount.html":{},"interfaces/ChatResponse.html":{},"interfaces/PageMetaParameters.html":{},"interfaces/PaginationInput.html":{}},"body":{"interfaces/AllContributionsCount.html":{},"interfaces/ChatResponse.html":{},"injectables/OpenAiService.html":{},"interfaces/PageMetaParameters.html":{},"injectables/PagerService.html":{},"interfaces/PaginationInput.html":{},"injectables/UserListStatsService.html":{}}}],["interfaces",{"_index":2,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"interfaces/ChatResponse.html":{},"interfaces/PageMetaParameters.html":{},"interfaces/PaginationInput.html":{},"overview.html":{}}}],["internal",{"_index":1967,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["interval",{"_index":99,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/ContributionService.html":{},"entities/DbPRInsight.html":{},"controllers/PullRequestController.html":{},"injectables/PullRequestGithubEventsService.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoFilterService.html":{},"injectables/RepoService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserListService.html":{},"injectables/UserListStatsService.html":{}}}],["invalid",{"_index":783,"title":{},"body":{"controllers/BlogSummaryController.html":{},"controllers/CodeExplanationController.html":{},"controllers/CodeRefactorSuggestionController.html":{},"controllers/CodeTestSuggestionController.html":{},"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"controllers/IssueSummaryController.html":{},"controllers/PizzaOvenController.html":{},"controllers/PullRequestDescriptionController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"controllers/UserListStatsController.html":{}}}],["invitation",{"_index":1845,"title":{},"body":{"entities/DbInsightMember.html":{},"controllers/UserInsightMemberController.html":{}}}],["invitation_email",{"_index":1834,"title":{},"body":{"entities/DbInsightMember.html":{},"controllers/UserInsightMemberController.html":{}}}],["invitation_emailed_at",{"_index":1835,"title":{},"body":{"entities/DbInsightMember.html":{}}}],["invite",{"_index":1406,"title":{},"body":{"classes/CreateInsightMemberDto.html":{},"entities/DbUserNotification.html":{}}}],["ip",{"_index":5939,"title":{},"body":{"miscellaneous/variables.html":{}}}],["is_accepted",{"_index":2127,"title":{},"body":{"entities/DbRepoToUserSubmissions.html":{}}}],["is_favorite",{"_index":1796,"title":{},"body":{"entities/DbInsight.html":{}}}],["is_featured",{"_index":1797,"title":{},"body":{"entities/DbInsight.html":{},"entities/DbUserList.html":{}}}],["is_featured=true",{"_index":3069,"title":{},"body":{"injectables/InsightsService.html":{}}}],["is_onboarded",{"_index":678,"title":{},"body":{"controllers/AuthController.html":{},"classes/SupabaseAuthDto.html":{}}}],["is_public",{"_index":1211,"title":{},"body":{"classes/Contributor.html":{},"classes/CreateInsightDto.html":{},"classes/CreateUserListDto.html":{},"entities/DbInsight.html":{},"entities/DbUserList.html":{},"classes/UpdateInsightDto.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"injectables/UserListService.html":{}}}],["is_waitlisted",{"_index":679,"title":{},"body":{"controllers/AuthController.html":{},"classes/SupabaseAuthDto.html":{}}}],["isarray",{"_index":974,"title":{},"body":{"classes/CollaboratorsDto.html":{},"classes/ContributionsPageDto.html":{},"classes/Contributor.html":{},"classes/CreateInsightDto.html":{},"classes/CreateUserHighlightDto.html":{},"classes/CreateUserListDto.html":{},"entities/DbUserHighlight.html":{},"classes/DbUserHighlightReactionResponse.html":{},"classes/FilterListContributorsDto.html":{},"classes/FollowManyUsersDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/PageDto.html":{},"controllers/RepoContributionsController.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"classes/UserOnboardingDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"classes/VotedRepoDto.html":{}}}],["isarray()@apiproperty({isarray",{"_index":1190,"title":{},"body":{"classes/ContributionsPageDto.html":{},"classes/PageDto.html":{}}}],["isboolean",{"_index":768,"title":{},"body":{"classes/BakeRepoDto.html":{},"classes/Contributor.html":{},"classes/CreateInsightDto.html":{},"classes/CreateUserListDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"classes/VotedRepoDto.html":{}}}],["iscreatinglogs",{"_index":3120,"title":{},"body":{"injectables/LogService.html":{}}}],["isdatestring",{"_index":1468,"title":{},"body":{"classes/CreateUserHighlightDto.html":{}}}],["isemail",{"_index":1409,"title":{},"body":{"classes/CreateInsightMemberDto.html":{},"classes/UpdateUserDto.html":{}}}],["isenum",{"_index":1118,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/ContributionsTimeframeDto.html":{},"classes/ContributorPullRequestsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/UserListMostActiveContributorsDto.html":{}}}],["isenum(contributionorderfieldsenum",{"_index":1123,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{}}}],["isenum(insightfilterfieldsenum",{"_index":2681,"title":{},"body":{"classes/FilterOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{}}}],["isenum(orderdirectionenum",{"_index":3153,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["isenum(pullrequestorderfieldsenum",{"_index":3468,"title":{},"body":{"classes/PullRequestPageOptionsDto.html":{}}}],["isenum(pullrequeststatusenum",{"_index":3469,"title":{},"body":{"classes/PullRequestPageOptionsDto.html":{}}}],["isenum(rangetypeenum",{"_index":1293,"title":{},"body":{"classes/ContributorPullRequestsDto.html":{}}}],["isenum(repoorderfieldsenum",{"_index":3692,"title":{},"body":{"classes/RepoPageOptionsDto.html":{}}}],["isenum(userlistcontributorstatsorderenum",{"_index":5078,"title":{},"body":{"classes/UserListMostActiveContributorsDto.html":{}}}],["isenum(userlistcontributorstatstypeenum",{"_index":1204,"title":{},"body":{"classes/ContributionsTimeframeDto.html":{},"classes/UserListMostActiveContributorsDto.html":{}}}],["isglobal",{"_index":442,"title":{},"body":{"modules/AppModule.html":{}}}],["isin",{"_index":1182,"title":{},"body":{"classes/ContributionsByProjectDto.html":{},"classes/ContributionsTimeframeDto.html":{},"classes/CreateBlogSummaryDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/CreateUserHighlightDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"classes/PageOptionsDto.html":{},"classes/TopProjectsDto.html":{},"classes/UpdateInsightMemberDto.html":{},"classes/UpdateUserCollaborationDto.html":{}}}],["isin([\"accept",{"_index":4331,"title":{},"body":{"classes/UpdateUserCollaborationDto.html":{}}}],["isin([\"english",{"_index":1361,"title":{},"body":{"classes/CreateBlogSummaryDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{}}}],["isin([\"exciting",{"_index":1360,"title":{},"body":{"classes/CreateBlogSummaryDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{}}}],["isin([\"pull_request",{"_index":1473,"title":{},"body":{"classes/CreateUserHighlightDto.html":{}}}],["isin([\"view",{"_index":4325,"title":{},"body":{"classes/UpdateInsightMemberDto.html":{}}}],["isin([0",{"_index":3154,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["isin([7",{"_index":1184,"title":{},"body":{"classes/ContributionsByProjectDto.html":{},"classes/ContributionsTimeframeDto.html":{},"classes/PageOptionsDto.html":{},"classes/TopProjectsDto.html":{}}}],["isint",{"_index":1183,"title":{},"body":{"classes/ContributionsByProjectDto.html":{},"classes/ContributionsTimeframeDto.html":{},"classes/FilterListContributorsDto.html":{},"classes/FilteredUsersDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/TopProjectsDto.html":{},"classes/TopUsersDto.html":{}}}],["ismember",{"_index":4873,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["isnumber",{"_index":1352,"title":{},"body":{"classes/CreateBlogSummaryDto.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"classes/RepoInfo.html":{},"classes/TopProjectsDto.html":{}}}],["iso",{"_index":1711,"title":{},"body":{"entities/DbContributionStatTimeframe.html":{},"entities/DbContributorCategoryTimeframe.html":{}}}],["isoptional",{"_index":1119,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/ContributionsByProjectDto.html":{},"classes/ContributionsTimeframeDto.html":{},"classes/ContributorPullRequestsDto.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateLogDto.html":{},"classes/CreateUserHighlightDto.html":{},"classes/DbUserHighlightReactionResponse.html":{},"classes/FilterListContributorsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/FilteredUsersDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/TopProjectsDto.html":{},"classes/TopUsersDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserListMostActiveContributorsDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"classes/VotedRepoDto.html":{}}}],["isoptional()@isstring",{"_index":1420,"title":{},"body":{"classes/CreateLogDto.html":{}}}],["isstring",{"_index":535,"title":{},"body":{"classes/ApplyUserCouponDto.html":{},"classes/BakeRepoDto.html":{},"classes/CommitAuthorDto.html":{},"classes/CommitsDto.html":{},"classes/Contributor.html":{},"classes/CreateBlogSummaryDto.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateInsightDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/CreateLogDto.html":{},"classes/CreateUserCollaborationDto.html":{},"classes/CreateUserHighlightDto.html":{},"classes/CreateUserListDto.html":{},"classes/DbUserHighlightReactionResponse.html":{},"classes/FilterListContributorsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/FollowManyUsersDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoInfo.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/UpdateInsightMemberDto.html":{},"classes/UpdateUserCollaborationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserOnboardingDto.html":{}}}],["isstring()@isoptional",{"_index":1379,"title":{},"body":{"classes/CreateEndorsementDto.html":{},"classes/FilterOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{}}}],["issue",{"_index":808,"title":{},"body":{"modules/BlogSummaryModule.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/CreateUserHighlightDto.html":{},"controllers/IssueSummaryController.html":{},"modules/IssueSummaryModule.html":{},"injectables/IssueSummaryService.html":{}}}],["issue'})@apibearerauth()@useguards(supabaseguard)@apibadrequestresponse({description",{"_index":3080,"title":{},"body":{"controllers/IssueSummaryController.html":{}}}],["issuecomments",{"_index":1412,"title":{},"body":{"classes/CreateIssueSummaryDto.html":{}}}],["issuedescription",{"_index":1413,"title":{},"body":{"classes/CreateIssueSummaryDto.html":{}}}],["issues",{"_index":1705,"title":{},"body":{"entities/DbContributionStatTimeframe.html":{},"entities/DbRepoLoginContributions.html":{},"entities/DbUserListContributorStat.html":{},"entities/DbUserListContributorStat-1.html":{},"controllers/IssueSummaryController.html":{},"injectables/IssueSummaryService.html":{},"classes/RepoPageOptionsDto.html":{},"miscellaneous/enumerations.html":{}}}],["issues/issue",{"_index":424,"title":{},"body":{"modules/AppModule.html":{}}}],["issues_created",{"_index":1699,"title":{},"body":{"entities/DbContributionStatTimeframe.html":{},"entities/DbRepoLoginContributions.html":{},"entities/DbUserListContributorStat.html":{},"entities/DbUserListContributorStat-1.html":{}}}],["issuesummarycontroller",{"_index":3076,"title":{"controllers/IssueSummaryController.html":{}},"body":{"controllers/IssueSummaryController.html":{},"modules/IssueSummaryModule.html":{}}}],["issuesummarymodule",{"_index":270,"title":{"modules/IssueSummaryModule.html":{}},"body":{"modules/AppModule.html":{},"modules/IssueSummaryModule.html":{},"modules.html":{},"overview.html":{}}}],["issuesummaryservice",{"_index":3082,"title":{"injectables/IssueSummaryService.html":{}},"body":{"controllers/IssueSummaryController.html":{},"modules/IssueSummaryModule.html":{},"injectables/IssueSummaryService.html":{},"overview.html":{}}}],["issuetitle",{"_index":1414,"title":{},"body":{"classes/CreateIssueSummaryDto.html":{}}}],["isurl",{"_index":4362,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["isvalid",{"_index":2628,"title":{},"body":{"guards/EndorsementTokenGuard.html":{}}}],["it'})@apiokresponse({type",{"_index":3945,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["it'})@apiparam({name",{"_index":3947,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["italian",{"_index":1334,"title":{},"body":{"classes/CreateBlogSummaryDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{}}}],["item",{"_index":1011,"title":{},"body":{"injectables/CommitAuthorsService.html":{},"injectables/CommitsService.html":{},"injectables/EndorsementService.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightsService.html":{},"injectables/PizzaOvenService.html":{},"injectables/PullRequestInsightsService.html":{},"controllers/RepoContributionsController.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/UserCollaborationService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserListService.html":{},"injectables/UserReposService.html":{}}}],["item.id",{"_index":3595,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["item.is_public",{"_index":5129,"title":{},"body":{"injectables/UserListService.html":{}}}],["item.repos.foreach(async",{"_index":3060,"title":{},"body":{"injectables/InsightsService.html":{}}}],["item.user_id",{"_index":5130,"title":{},"body":{"injectables/UserListService.html":{}}}],["itemcount",{"_index":118,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"classes/ContributionPageMetaDto.html":{},"injectables/ContributionService.html":{},"injectables/EmojiService.html":{},"injectables/InsightsService.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaParameters.html":{},"injectables/PagerService.html":{},"interfaces/PaginationInput.html":{},"injectables/PullRequestGithubEventsService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserListStatsService.html":{},"injectables/UserNotificationService.html":{},"injectables/UserOrganizationService.html":{}}}],["items",{"_index":1070,"title":{},"body":{"classes/ContributionPageMetaDto.html":{},"classes/PageMetaDto.html":{},"miscellaneous/variables.html":{}}}],["javascript",{"_index":2326,"title":{},"body":{"entities/DbUserList.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"classes/UserOnboardingDto.html":{}}}],["javascript'})@isstring()@isoptional",{"_index":3279,"title":{},"body":{"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{}}}],["javscript",{"_index":2980,"title":{},"body":{"classes/InsightOptionsDto.html":{}}}],["javscript'})@isstring()@isoptional",{"_index":2981,"title":{},"body":{"classes/InsightOptionsDto.html":{}}}],["join",{"_index":201,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{},"index.html":{}}}],["join(\"\\n",{"_index":841,"title":{},"body":{"injectables/BlogSummaryService.html":{},"injectables/CodeExplanationService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"injectables/IssueSummaryService.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["joincolumn",{"_index":1646,"title":{},"body":{"entities/DbCommits.html":{},"entities/DbContribution.html":{},"entities/DbInsight.html":{},"entities/DbInsightRepo.html":{},"entities/DbPullRequestReview.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserNotification.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserTopRepo.html":{}}}],["jpmcb",{"_index":2695,"title":{},"body":{"classes/FollowManyUsersDto.html":{}}}],["js/dist/module/lib/types",{"_index":863,"title":{},"body":{"interfaces/ChatResponse.html":{},"injectables/OpenAiService.html":{}}}],["json.stringify",{"_index":878,"title":{},"body":{"interfaces/ChatResponse.html":{},"injectables/OpenAiService.html":{}}}],["json.stringify(parameters",{"_index":1583,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["json.stringify(subscription.metadata",{"_index":4118,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["jwt",{"_index":4255,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["key",{"_index":5466,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["keyout",{"_index":5500,"title":{},"body":{"index.html":{}}}],["keywords",{"_index":5714,"title":{},"body":{"properties.html":{}}}],["kind",{"_index":5672,"title":{},"body":{"license.html":{}}}],["korean",{"_index":1339,"title":{},"body":{"classes/CreateBlogSummaryDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{}}}],["la_kwdofcv7488aaaabcar",{"_index":1963,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["label",{"_index":1954,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["label_names",{"_index":1909,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["labels",{"_index":1910,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["landing",{"_index":5825,"title":{},"body":{"miscellaneous/variables.html":{}}}],["language",{"_index":823,"title":{},"body":{"injectables/BlogSummaryService.html":{},"injectables/CodeExplanationService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"classes/CreateBlogSummaryDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"injectables/IssueSummaryService.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["last",{"_index":1256,"title":{},"body":{"controllers/ContributorInsightsController.html":{},"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbPullRequestGitHubEvents.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserList.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"classes/FilterListContributorsDto.html":{},"controllers/PullRequestController.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"classes/SupabaseAuthDto.html":{},"miscellaneous/variables.html":{}}}],["last_merged_at",{"_index":1122,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"entities/DbContribution.html":{},"miscellaneous/enumerations.html":{}}}],["last_sign_in_at",{"_index":665,"title":{},"body":{"controllers/AuthController.html":{},"classes/SupabaseAuthDto.html":{}}}],["last_updated_at",{"_index":1911,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["lastvaluefrom",{"_index":3265,"title":{},"body":{"injectables/PizzaOvenService.html":{}}}],["lastvaluefrom(this.httpservice.post(`${host}:${port}/bake",{"_index":3273,"title":{},"body":{"injectables/PizzaOvenService.html":{}}}],["latest",{"_index":4115,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["leave",{"_index":696,"title":{},"body":{"controllers/AuthController.html":{}}}],["leftjoin",{"_index":226,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/PullRequestService.html":{},"injectables/RepoService.html":{},"injectables/UserListStatsService.html":{}}}],["leftjoin(\"users",{"_index":1175,"title":{},"body":{"injectables/ContributionService.html":{},"injectables/EndorsementService.html":{},"injectables/InsightMemberService.html":{},"injectables/UserListService.html":{}}}],["leftjoinandmapmany(\"repo.contributions",{"_index":3736,"title":{},"body":{"injectables/RepoService.html":{}}}],["leftjoinandselect(\"repo.user",{"_index":3734,"title":{},"body":{"injectables/RepoService.html":{}}}],["leftjoinandselect(`insights.repos",{"_index":3058,"title":{},"body":{"injectables/InsightsService.html":{}}}],["leftjoinandselect(dbrepotouserstars",{"_index":3735,"title":{},"body":{"injectables/RepoService.html":{}}}],["length",{"_index":1341,"title":{},"body":{"classes/CreateBlogSummaryDto.html":{},"classes/CreateIssueSummaryDto.html":{},"entities/DbBakedRepo.html":{},"entities/DbCommitAuthors.html":{},"entities/DbCommits.html":{},"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserList.html":{},"entities/DbUserNotification.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{}}}],["less",{"_index":2646,"title":{},"body":{"classes/FilterListContributorsDto.html":{}}}],["letters",{"_index":4354,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["level",{"_index":492,"title":{},"body":{"modules/AppModule.html":{},"classes/CreateLogDto.html":{},"injectables/CustomLogger.html":{},"classes/DatabaseLoggerMiddleware.html":{},"entities/DbLog.html":{}}}],["levelfirst",{"_index":498,"title":{},"body":{"modules/AppModule.html":{}}}],["leverage",{"_index":5566,"title":{},"body":{"index.html":{}}}],["liability",{"_index":5685,"title":{},"body":{"license.html":{}}}],["liable",{"_index":5682,"title":{},"body":{"license.html":{}}}],["lib",{"_index":5560,"title":{},"body":{"index.html":{}}}],["license",{"_index":5640,"title":{"license.html":{}},"body":{"index.html":{},"license.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["limit",{"_index":1057,"title":{},"body":{"classes/ContributionPageMetaDto.html":{},"classes/ContributionPageOptionsDto.html":{},"classes/ContributorPullRequestsDto.html":{},"classes/FilterListContributorsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/FilteredUsersDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{},"injectables/RepoFilterService.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/TopUsersDto.html":{},"classes/UserListMostActiveContributorsDto.html":{},"classes/UserRepoOptionsDto.html":{},"miscellaneous/variables.html":{}}}],["limit(pageoptionsdto.limit",{"_index":1159,"title":{},"body":{"injectables/ContributionService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoService.html":{}}}],["limitation",{"_index":5651,"title":{},"body":{"license.html":{}}}],["limited",{"_index":5674,"title":{},"body":{"license.html":{}}}],["limiting",{"_index":5938,"title":{},"body":{"miscellaneous/variables.html":{}}}],["limiting](#ratelimiting",{"_index":6006,"title":{},"body":{"miscellaneous/variables.html":{}}}],["line",{"_index":149,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"interfaces/ChatResponse.html":{},"injectables/OpenAiService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserListStatsService.html":{}}}],["line_items",{"_index":4051,"title":{},"body":{"injectables/StripeService.html":{}}}],["lines",{"_index":1922,"title":{},"body":{"entities/DbPullRequest.html":{},"entities/DbPullRequestGitHubEvents.html":{}}}],["linkedin",{"_index":4222,"title":{},"body":{"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{}}}],["linkedin_url",{"_index":688,"title":{},"body":{"controllers/AuthController.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{}}}],["links",{"_index":6008,"title":{},"body":{"miscellaneous/variables.html":{}}}],["linting",{"_index":5579,"title":{},"body":{"index.html":{}}}],["lintthis",{"_index":5582,"title":{},"body":{"index.html":{}}}],["list",{"_index":8,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"modules/AppModule.html":{},"classes/Contributor.html":{},"classes/CreateUserListDto.html":{},"entities/DbRepoLoginContributions.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserListContributorStat.html":{},"entities/DbUserListContributorStat-1.html":{},"classes/FilteredUsersDto.html":{},"controllers/HighlightController.html":{},"classes/TopUsersDto.html":{},"controllers/UserController.html":{},"controllers/UserFollowingController.html":{},"controllers/UserListController.html":{},"modules/UserListModule.html":{},"injectables/UserListService.html":{},"controllers/UserListStatsController.html":{},"injectables/UserListStatsService.html":{},"miscellaneous/variables.html":{}}}],["list'})@apibadrequestresponse({description",{"_index":4958,"title":{},"body":{"controllers/UserListController.html":{}}}],["list'})@apibearerauth()@useguards(supabaseguard)@apinotfoundresponse({description",{"_index":4966,"title":{},"body":{"controllers/UserListController.html":{}}}],["list'})@apiokresponse({type",{"_index":4986,"title":{},"body":{"controllers/UserListController.html":{}}}],["list'})@apipaginatedresponse(dbuserhighlight)@apiokresponse({type",{"_index":4997,"title":{},"body":{"controllers/UserListController.html":{}}}],["list'})@apipaginatedresponse(dbuserhighlightrepo)@apiokresponse({type",{"_index":4991,"title":{},"body":{"controllers/UserListController.html":{}}}],["list'})@apipaginatedresponse(dbuserlistcontributor)@apiokresponse({type",{"_index":5001,"title":{},"body":{"controllers/UserListController.html":{}}}],["list'})@apipaginatedresponse(dbuserlistcontributorstat)@apiokresponse({type",{"_index":5202,"title":{},"body":{"controllers/UserListStatsController.html":{}}}],["list'})@isstring",{"_index":1478,"title":{},"body":{"classes/CreateUserListDto.html":{}}}],["list'})@useguards(supabaseguard)@apibearerauth()@apiokresponse({type",{"_index":2793,"title":{},"body":{"controllers/HighlightController.html":{}}}],["list.controller",{"_index":5068,"title":{},"body":{"modules/UserListModule.html":{}}}],["list.controller.ts",{"_index":4941,"title":{},"body":{"controllers/UserListController.html":{}}}],["list.controller.ts:111",{"_index":5010,"title":{},"body":{"controllers/UserListController.html":{}}}],["list.controller.ts:136",{"_index":4961,"title":{},"body":{"controllers/UserListController.html":{}}}],["list.controller.ts:153",{"_index":4973,"title":{},"body":{"controllers/UserListController.html":{}}}],["list.controller.ts:169",{"_index":5003,"title":{},"body":{"controllers/UserListController.html":{}}}],["list.controller.ts:186",{"_index":5006,"title":{},"body":{"controllers/UserListController.html":{}}}],["list.controller.ts:208",{"_index":4969,"title":{},"body":{"controllers/UserListController.html":{}}}],["list.controller.ts:225",{"_index":4998,"title":{},"body":{"controllers/UserListController.html":{}}}],["list.controller.ts:242",{"_index":4994,"title":{},"body":{"controllers/UserListController.html":{}}}],["list.controller.ts:256",{"_index":4984,"title":{},"body":{"controllers/UserListController.html":{}}}],["list.controller.ts:46",{"_index":4979,"title":{},"body":{"controllers/UserListController.html":{}}}],["list.controller.ts:59",{"_index":4976,"title":{},"body":{"controllers/UserListController.html":{}}}],["list.controller.ts:74",{"_index":4959,"title":{},"body":{"controllers/UserListController.html":{}}}],["list.controller.ts:95",{"_index":4987,"title":{},"body":{"controllers/UserListController.html":{}}}],["list.dto",{"_index":5013,"title":{},"body":{"controllers/UserListController.html":{},"injectables/UserListService.html":{}}}],["list.dto.ts",{"_index":1206,"title":{},"body":{"classes/Contributor.html":{},"classes/CreateUserListDto.html":{}}}],["list.dto.ts:17",{"_index":1479,"title":{},"body":{"classes/CreateUserListDto.html":{}}}],["list.dto.ts:25",{"_index":1477,"title":{},"body":{"classes/CreateUserListDto.html":{}}}],["list.dto.ts:34",{"_index":1476,"title":{},"body":{"classes/CreateUserListDto.html":{}}}],["list.dto.ts:6",{"_index":1207,"title":{},"body":{"classes/Contributor.html":{}}}],["list.dto.ts:7",{"_index":1208,"title":{},"body":{"classes/Contributor.html":{}}}],["list.entity",{"_index":433,"title":{},"body":{"modules/AppModule.html":{},"controllers/UserListController.html":{},"modules/UserListModule.html":{},"injectables/UserListService.html":{},"modules/UserModule.html":{}}}],["list.entity.ts",{"_index":2317,"title":{},"body":{"entities/DbUserList.html":{}}}],["list.entity.ts:103",{"_index":2325,"title":{},"body":{"entities/DbUserList.html":{}}}],["list.entity.ts:30",{"_index":2321,"title":{},"body":{"entities/DbUserList.html":{}}}],["list.entity.ts:41",{"_index":2330,"title":{},"body":{"entities/DbUserList.html":{}}}],["list.entity.ts:51",{"_index":2328,"title":{},"body":{"entities/DbUserList.html":{}}}],["list.entity.ts:58",{"_index":2323,"title":{},"body":{"entities/DbUserList.html":{}}}],["list.entity.ts:65",{"_index":2322,"title":{},"body":{"entities/DbUserList.html":{}}}],["list.entity.ts:75",{"_index":2319,"title":{},"body":{"entities/DbUserList.html":{}}}],["list.entity.ts:85",{"_index":2329,"title":{},"body":{"entities/DbUserList.html":{}}}],["list.entity.ts:95",{"_index":2320,"title":{},"body":{"entities/DbUserList.html":{}}}],["list.is_public",{"_index":5138,"title":{},"body":{"injectables/UserListService.html":{}}}],["list.module",{"_index":429,"title":{},"body":{"modules/AppModule.html":{}}}],["list.module.ts",{"_index":5066,"title":{},"body":{"modules/UserListModule.html":{}}}],["list.name",{"_index":5137,"title":{},"body":{"injectables/UserListService.html":{}}}],["list.service",{"_index":5015,"title":{},"body":{"controllers/UserListController.html":{},"modules/UserListModule.html":{}}}],["list.service.ts",{"_index":5079,"title":{},"body":{"injectables/UserListService.html":{}}}],["list.service.ts:106",{"_index":5107,"title":{},"body":{"injectables/UserListService.html":{}}}],["list.service.ts:117",{"_index":5096,"title":{},"body":{"injectables/UserListService.html":{}}}],["list.service.ts:127",{"_index":5098,"title":{},"body":{"injectables/UserListService.html":{}}}],["list.service.ts:148",{"_index":5105,"title":{},"body":{"injectables/UserListService.html":{}}}],["list.service.ts:163",{"_index":5121,"title":{},"body":{"injectables/UserListService.html":{}}}],["list.service.ts:167",{"_index":5103,"title":{},"body":{"injectables/UserListService.html":{}}}],["list.service.ts:171",{"_index":5109,"title":{},"body":{"injectables/UserListService.html":{}}}],["list.service.ts:219",{"_index":5111,"title":{},"body":{"injectables/UserListService.html":{}}}],["list.service.ts:22",{"_index":5093,"title":{},"body":{"injectables/UserListService.html":{}}}],["list.service.ts:242",{"_index":5115,"title":{},"body":{"injectables/UserListService.html":{}}}],["list.service.ts:290",{"_index":5113,"title":{},"body":{"injectables/UserListService.html":{}}}],["list.service.ts:319",{"_index":5119,"title":{},"body":{"injectables/UserListService.html":{}}}],["list.service.ts:35",{"_index":5100,"title":{},"body":{"injectables/UserListService.html":{}}}],["list.service.ts:41",{"_index":5099,"title":{},"body":{"injectables/UserListService.html":{}}}],["list.service.ts:47",{"_index":5101,"title":{},"body":{"injectables/UserListService.html":{}}}],["list.service.ts:53",{"_index":5116,"title":{},"body":{"injectables/UserListService.html":{}}}],["list.service.ts:74",{"_index":5118,"title":{},"body":{"injectables/UserListService.html":{}}}],["list.service.ts:95",{"_index":5106,"title":{},"body":{"injectables/UserListService.html":{}}}],["list_id",{"_index":2334,"title":{},"body":{"entities/DbUserListContributor.html":{},"injectables/UserListService.html":{}}}],["list_user",{"_index":2318,"title":{},"body":{"entities/DbUserList.html":{}}}],["listallbakedrepos",{"_index":3170,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["listallbakedrepos(@query",{"_index":3226,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["listallbakedrepos(pageoptionsdto",{"_index":3187,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["listallcommitauthors",{"_index":3171,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["listallcommitauthors(@query",{"_index":3235,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["listallcommitauthors(pageoptionsdto",{"_index":3190,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["listallcommitsbybakedrepoid",{"_index":3172,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["listallcommitsbybakedrepoid(pageoptionsdto",{"_index":3196,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["listallcommitsbycommitauthorid",{"_index":3173,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["listallcommitsbycommitauthorid(pageoptionsdto",{"_index":3201,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["listallpullrequests",{"_index":3284,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["listallpullrequests(@query",{"_index":3309,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["listallpullrequests(pageoptionsdto",{"_index":3295,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["listcontributors",{"_index":5025,"title":{},"body":{"controllers/UserListController.html":{}}}],["listid",{"_index":75,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"classes/PullRequestPageOptionsDto.html":{},"controllers/UserListController.html":{},"injectables/UserListService.html":{},"injectables/UserListStatsService.html":{}}}],["listing",{"_index":2442,"title":{},"body":{"controllers/EmojiController.html":{},"controllers/RepoContributionsController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserRecommendationController.html":{}}}],["lists",{"_index":4942,"title":{},"body":{"controllers/UserListController.html":{},"controllers/UserListStatsController.html":{}}}],["lists'})@apibadrequestresponse({description",{"_index":4978,"title":{},"body":{"controllers/UserListController.html":{}}}],["lists'})@apiokresponse({type",{"_index":4975,"title":{},"body":{"controllers/UserListController.html":{}}}],["lists/dtos/collaborators.dto.ts",{"_index":970,"title":{},"body":{"classes/CollaboratorsDto.html":{}}}],["lists/dtos/collaborators.dto.ts:14",{"_index":977,"title":{},"body":{"classes/CollaboratorsDto.html":{}}}],["lists/dtos/contributions",{"_index":1052,"title":{},"body":{"classes/ContributionPageMetaDto.html":{},"classes/ContributionsByProjectDto.html":{},"classes/ContributionsPageDto.html":{},"classes/ContributionsTimeframeDto.html":{}}}],["lists/dtos/create",{"_index":1205,"title":{},"body":{"classes/Contributor.html":{},"classes/CreateUserListDto.html":{}}}],["lists/dtos/filter",{"_index":2630,"title":{},"body":{"classes/FilterListContributorsDto.html":{}}}],["lists/dtos/most",{"_index":5072,"title":{},"body":{"classes/UserListMostActiveContributorsDto.html":{},"miscellaneous/enumerations.html":{}}}],["lists/dtos/top",{"_index":4303,"title":{},"body":{"classes/TopProjectsDto.html":{}}}],["lists/entities/contributions",{"_index":1697,"title":{},"body":{"entities/DbContributionStatTimeframe.html":{},"entities/DbContributionsProjects.html":{}}}],["lists/entities/contributors",{"_index":1726,"title":{},"body":{"entities/DbContributorCategoryTimeframe.html":{}}}],["lists/entities/timezones.entity.ts",{"_index":2204,"title":{},"body":{"classes/DbTimezone.html":{}}}],["lists/entities/timezones.entity.ts:8",{"_index":2206,"title":{},"body":{"classes/DbTimezone.html":{}}}],["lists/entities/user",{"_index":432,"title":{},"body":{"modules/AppModule.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserListContributorStat-1.html":{},"modules/UserModule.html":{}}}],["lists/user",{"_index":7,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"modules/AppModule.html":{},"controllers/UserListController.html":{},"modules/UserListModule.html":{},"injectables/UserListService.html":{},"controllers/UserListStatsController.html":{},"injectables/UserListStatsService.html":{}}}],["literal",{"_index":860,"title":{},"body":{"interfaces/ChatResponse.html":{},"classes/CreateUserListDto.html":{},"injectables/TierService.html":{}}}],["live",{"_index":5439,"title":{},"body":{"index.html":{}}}],["load",{"_index":441,"title":{},"body":{"modules/AppModule.html":{}}}],["loadrelationcountandmap(\"repo.contributionscount",{"_index":3743,"title":{},"body":{"injectables/RepoService.html":{}}}],["loadrelationcountandmap(\"repo.stargazerscount",{"_index":3746,"title":{},"body":{"injectables/RepoService.html":{}}}],["loadrelationcountandmap(\"repo.starscount",{"_index":3747,"title":{},"body":{"injectables/RepoService.html":{}}}],["loadrelationcountandmap(\"repo.submissionscount",{"_index":3745,"title":{},"body":{"injectables/RepoService.html":{}}}],["loadrelationcountandmap(\"repo.votescount",{"_index":3744,"title":{},"body":{"injectables/RepoService.html":{}}}],["local",{"_index":4204,"title":{},"body":{"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["localhost",{"_index":5792,"title":{},"body":{"miscellaneous/variables.html":{}}}],["locally",{"_index":5479,"title":{},"body":{"index.html":{}}}],["location",{"_index":682,"title":{},"body":{"controllers/AuthController.html":{},"classes/FilterListContributorsDto.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{}}}],["log",{"_index":1486,"title":{},"body":{"injectables/CustomLogger.html":{},"classes/DatabaseLoggerMiddleware.html":{},"injectables/LogService.html":{}}}],["log(level",{"_index":1554,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["log(message",{"_index":1498,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["log.dto",{"_index":3115,"title":{},"body":{"injectables/LogService.html":{}}}],["log.dto.ts",{"_index":1419,"title":{},"body":{"classes/CreateLogDto.html":{}}}],["log.dto.ts:10",{"_index":1423,"title":{},"body":{"classes/CreateLogDto.html":{}}}],["log.dto.ts:14",{"_index":1422,"title":{},"body":{"classes/CreateLogDto.html":{}}}],["log.dto.ts:6",{"_index":1421,"title":{},"body":{"classes/CreateLogDto.html":{}}}],["log.entity",{"_index":3105,"title":{},"body":{"modules/LogModule.html":{},"injectables/LogService.html":{}}}],["log.service",{"_index":1506,"title":{},"body":{"injectables/CustomLogger.html":{},"modules/LogModule.html":{}}}],["log/log.entity",{"_index":385,"title":{},"body":{"modules/AppModule.html":{}}}],["log/log.module",{"_index":436,"title":{},"body":{"modules/AppModule.html":{}}}],["logconnection",{"_index":479,"title":{},"body":{"modules/AppModule.html":{},"modules/LogModule.html":{},"injectables/LogService.html":{}}}],["logger",{"_index":462,"title":{},"body":{"modules/AppModule.html":{},"classes/DatabaseLoggerMiddleware.html":{},"injectables/HttpLoggerMiddleware.html":{},"modules/LogModule.html":{},"controllers/StripeWebhookController.html":{},"injectables/TierService.html":{},"miscellaneous/variables.html":{}}}],["logger(`http",{"_index":2866,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{}}}],["logger(`stripewebhook",{"_index":4107,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["logger(tierservice.name",{"_index":4282,"title":{},"body":{"injectables/TierService.html":{}}}],["logger.middleware",{"_index":363,"title":{},"body":{"modules/AppModule.html":{}}}],["logger.middleware.ts",{"_index":1543,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{},"injectables/HttpLoggerMiddleware.html":{}}}],["logger.middleware.ts:11",{"_index":2865,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{}}}],["logger.middleware.ts:12",{"_index":1560,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["logger.middleware.ts:20",{"_index":1562,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["logger.middleware.ts:28",{"_index":1564,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["logger.middleware.ts:38",{"_index":1558,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["logger.middleware.ts:42",{"_index":1567,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["logger.middleware.ts:46",{"_index":1556,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["logger.middleware.ts:6",{"_index":1553,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["logger.middleware.ts:61",{"_index":1569,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["logger.middleware.ts:9",{"_index":2867,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{}}}],["logger.service",{"_index":1505,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["logger.ts",{"_index":1482,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["logger.ts:19",{"_index":1499,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["logger.ts:29",{"_index":1497,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["logger.ts:39",{"_index":1503,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["logger.ts:49",{"_index":1494,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["logger.ts:59",{"_index":1501,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["logger.ts:8",{"_index":1492,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["loggermodule",{"_index":310,"title":{},"body":{"modules/AppModule.html":{}}}],["loggermodule.forrootasync",{"_index":489,"title":{},"body":{"modules/AppModule.html":{}}}],["logging",{"_index":5755,"title":{},"body":{"miscellaneous/variables.html":{}}}],["logging.certificate",{"_index":487,"title":{},"body":{"modules/AppModule.html":{}}}],["logging.config.ts",{"_index":5734,"title":{},"body":{"miscellaneous/variables.html":{}}}],["logging.connection",{"_index":480,"title":{},"body":{"modules/AppModule.html":{}}}],["logging.database",{"_index":485,"title":{},"body":{"modules/AppModule.html":{}}}],["logging.host",{"_index":481,"title":{},"body":{"modules/AppModule.html":{}}}],["logging.maxqueryexecutiontime",{"_index":488,"title":{},"body":{"modules/AppModule.html":{}}}],["logging.password",{"_index":484,"title":{},"body":{"modules/AppModule.html":{}}}],["logging.port",{"_index":482,"title":{},"body":{"modules/AppModule.html":{}}}],["logging.username",{"_index":483,"title":{},"body":{"modules/AppModule.html":{}}}],["logic",{"_index":5559,"title":{},"body":{"index.html":{}}}],["login",{"_index":88,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/ContributionService.html":{},"classes/Contributor.html":{},"classes/CreateUserListDto.html":{},"entities/DbContributionStatTimeframe.html":{},"classes/DbFilteredUser.html":{},"entities/DbRepoLoginContributions.html":{},"classes/DbTopUser.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserListContributorStat.html":{},"entities/DbUserListContributorStat-1.html":{},"controllers/RepoContributionsController.html":{},"injectables/RepoService.html":{},"classes/SupabaseAuthDto.html":{},"injectables/TierService.html":{},"injectables/UserListStatsService.html":{}}}],["login'})@apiokresponse({type",{"_index":3583,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["loglevels",{"_index":1508,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["logmigration",{"_index":1546,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["logmigration(message",{"_index":1557,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["logmodule",{"_index":271,"title":{"modules/LogModule.html":{}},"body":{"modules/AppModule.html":{},"modules/LogModule.html":{},"modules.html":{},"overview.html":{}}}],["logquery",{"_index":1547,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["logquery(query",{"_index":1559,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["logqueryerror",{"_index":1548,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["logqueryerror(error",{"_index":1561,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["logqueryslow",{"_index":1549,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["logqueryslow(time",{"_index":1563,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["logs",{"_index":1872,"title":{},"body":{"entities/DbLog.html":{}}}],["logschemabuild",{"_index":1550,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["logschemabuild(message",{"_index":1566,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["logservice",{"_index":1491,"title":{"injectables/LogService.html":{}},"body":{"injectables/CustomLogger.html":{},"modules/LogModule.html":{},"injectables/LogService.html":{},"overview.html":{}}}],["logsrepository",{"_index":3112,"title":{},"body":{"injectables/LogService.html":{}}}],["logsservice",{"_index":1484,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["lookuporg",{"_index":4284,"title":{},"body":{"injectables/TierService.html":{}}}],["lookuporg(`org:${userid",{"_index":4289,"title":{},"body":{"injectables/TierService.html":{}}}],["loops",{"_index":151,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["loops/no",{"_index":150,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["loose",{"_index":5853,"title":{},"body":{"miscellaneous/variables.html":{}}}],["lower(\"open_pull_requests\".\"state",{"_index":3751,"title":{},"body":{"injectables/RepoService.html":{}}}],["machine",{"_index":5527,"title":{},"body":{"index.html":{}}}],["machines",{"_index":5451,"title":{},"body":{"index.html":{}}}],["made",{"_index":2246,"title":{},"body":{"entities/DbUserHighlight.html":{},"miscellaneous/variables.html":{}}}],["main",{"_index":2005,"title":{},"body":{"entities/DbPullRequest.html":{},"entities/DbPullRequestGitHubEvents.html":{}}}],["main'})@column('text",{"_index":1979,"title":{},"body":{"entities/DbPullRequest.html":{},"entities/DbPullRequestGitHubEvents.html":{}}}],["make",{"_index":4333,"title":{},"body":{"classes/UpdateUserDto.html":{},"index.html":{}}}],["maker",{"_index":4364,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["maker'})@isstring",{"_index":4348,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["making",{"_index":5591,"title":{},"body":{"index.html":{}}}],["managesubscriptionstatuschange",{"_index":4088,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["managesubscriptionstatuschange(subscriptionid",{"_index":4094,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["many",{"_index":2693,"title":{},"body":{"classes/FollowManyUsersDto.html":{},"injectables/PullRequestGithubEventsService.html":{},"controllers/UserFollowsController.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["manytoone",{"_index":1647,"title":{},"body":{"entities/DbCommits.html":{},"entities/DbContribution.html":{},"entities/DbInsight.html":{},"entities/DbInsightRepo.html":{},"entities/DbPullRequestReview.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserNotification.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserTopRepo.html":{}}}],["manytoone(undefined)@joincolumn({name",{"_index":2073,"title":{},"body":{"entities/DbPullRequestReview.html":{}}}],["map",{"_index":3266,"title":{},"body":{"injectables/PizzaOvenService.html":{}}}],["map((notification",{"_index":5297,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["mapping",{"_index":5525,"title":{},"body":{"index.html":{}}}],["markdown",{"_index":780,"title":{},"body":{"controllers/BlogSummaryController.html":{},"classes/CreateBlogSummaryDto.html":{}}}],["markdowndescription",{"_index":5844,"title":{},"body":{"miscellaneous/variables.html":{}}}],["marknotificationsasread",{"_index":5269,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["marknotificationsasread(notificationids",{"_index":5285,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["matches",{"_index":4363,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["matches(/^(?!.*?admin)(?!.*?twitter)\\w{0,15}$/i",{"_index":4365,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["matching",{"_index":239,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"modules/ApiServicesModule.html":{},"modules/AppModule.html":{},"classes/ApplyUserCouponDto.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"classes/BakeRepoDto.html":{},"controllers/BlogSummaryController.html":{},"modules/BlogSummaryModule.html":{},"injectables/BlogSummaryService.html":{},"interfaces/ChatResponse.html":{},"controllers/CodeExplanationController.html":{},"injectables/CodeExplanationService.html":{},"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"controllers/CodeTestSuggestionController.html":{},"injectables/CodeTestSuggestionService.html":{},"classes/CollaboratorsDto.html":{},"classes/CommitAuthorDto.html":{},"injectables/CommitAuthorsService.html":{},"classes/CommitsDto.html":{},"injectables/CommitsService.html":{},"modules/ContributionModule.html":{},"classes/ContributionPageMetaDto.html":{},"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"classes/ContributionsByProjectDto.html":{},"classes/ContributionsPageDto.html":{},"classes/ContributionsTimeframeDto.html":{},"classes/Contributor.html":{},"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"modules/ContributorModule.html":{},"classes/ContributorPullRequestsDto.html":{},"modules/CouponModule.html":{},"injectables/CouponService.html":{},"classes/CreateBlogSummaryDto.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateInsightDto.html":{},"classes/CreateInsightMemberDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/CreateLogDto.html":{},"classes/CreateUserCollaborationDto.html":{},"classes/CreateUserHighlightDto.html":{},"classes/CreateUserListDto.html":{},"injectables/CustomLogger.html":{},"modules/CustomerModule.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"entities/DbBakedRepo.html":{},"entities/DbCommitAuthors.html":{},"entities/DbCommits.html":{},"entities/DbContribution.html":{},"entities/DbContributionStatTimeframe.html":{},"entities/DbContributionsProjects.html":{},"entities/DbContributorCategoryTimeframe.html":{},"entities/DbCoupon.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"classes/DbFilteredUser.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbPullRequestGitHubEvents.html":{},"entities/DbPullRequestReview.html":{},"entities/DbRepoLoginContributions.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"classes/DbTimezone.html":{},"classes/DbTopUser.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightReactionResponse.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserListContributorStat.html":{},"entities/DbUserListContributorStat-1.html":{},"entities/DbUserNotification.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"controllers/EmojiController.html":{},"modules/EmojiModule.html":{},"injectables/EmojiService.html":{},"controllers/EndorsementController.html":{},"modules/EndorsementModule.html":{},"injectables/EndorsementService.html":{},"guards/EndorsementTokenGuard.html":{},"classes/FilterListContributorsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/FilteredUsersDto.html":{},"classes/FollowManyUsersDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"controllers/HighlightController.html":{},"modules/HighlightModule.html":{},"classes/HighlightOptionsDto.html":{},"injectables/HttpLoggerMiddleware.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"injectables/InsightRepoService.html":{},"modules/InsightsModule.html":{},"injectables/InsightsService.html":{},"controllers/IssueSummaryController.html":{},"modules/IssueSummaryModule.html":{},"injectables/IssueSummaryService.html":{},"modules/LogModule.html":{},"injectables/LogService.html":{},"modules/OpenAiModule.html":{},"injectables/OpenAiService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaParameters.html":{},"classes/PageOptionsDto.html":{},"injectables/PagerService.html":{},"interfaces/PaginationInput.html":{},"controllers/PizzaOvenController.html":{},"modules/PizzaOvenModule.html":{},"injectables/PizzaOvenService.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestGithubEventsService.html":{},"injectables/PullRequestInsightsService.html":{},"modules/PullRequestModule.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestReviewService.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"modules/RepoFilterModule.html":{},"injectables/RepoFilterService.html":{},"classes/RepoInfo.html":{},"modules/RepoModule.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"modules/StarModule.html":{},"injectables/StarService.html":{},"modules/StargazeModule.html":{},"injectables/StargazeService.html":{},"modules/StripeModule.html":{},"injectables/StripeService.html":{},"modules/StripeSubscriptionModule.html":{},"injectables/StripeSubscriptionService.html":{},"modules/StripeWebHookModule.html":{},"controllers/StripeWebhookController.html":{},"modules/SubmitModule.html":{},"injectables/SubmitService.html":{},"classes/SupabaseAuthDto.html":{},"injectables/SupabaseGuard.html":{},"injectables/SupabaseStrategy.html":{},"modules/TierModule.html":{},"injectables/TierService.html":{},"modules/TimescaleModule.html":{},"classes/TopProjectsDto.html":{},"classes/TopUsersDto.html":{},"classes/UpdateEndorsementDto.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateInsightMemberDto.html":{},"classes/UpdateUserCollaborationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowingController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"modules/UserListModule.html":{},"classes/UserListMostActiveContributorsDto.html":{},"injectables/UserListService.html":{},"controllers/UserListStatsController.html":{},"injectables/UserListStatsService.html":{},"modules/UserModule.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"classes/UserOnboardingDto.html":{},"injectables/UserOrganizationService.html":{},"controllers/UserRecommendationController.html":{},"classes/UserRepoOptionsDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"modules/UserReposModule.html":{},"injectables/UserReposService.html":{},"modules/VoteModule.html":{},"injectables/VoteService.html":{},"classes/VotedRepoDto.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["math.ceil(this.itemcount",{"_index":3143,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["max",{"_index":1353,"title":{},"body":{"classes/CreateBlogSummaryDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/FilterListContributorsDto.html":{},"classes/FilteredUsersDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/TopUsersDto.html":{}}}],["max(10",{"_index":1359,"title":{},"body":{"classes/CreateBlogSummaryDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{}}}],["max(100",{"_index":2657,"title":{},"body":{"classes/FilterListContributorsDto.html":{},"classes/FilteredUsersDto.html":{}}}],["max(10000",{"_index":3152,"title":{},"body":{"classes/PageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/TopUsersDto.html":{}}}],["max(500",{"_index":1357,"title":{},"body":{"classes/CreateBlogSummaryDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{}}}],["maximum",{"_index":830,"title":{},"body":{"injectables/BlogSummaryService.html":{},"injectables/CodeExplanationService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"classes/ContributionPageOptionsDto.html":{},"classes/ContributorPullRequestsDto.html":{},"classes/FilterListContributorsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/FilteredUsersDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"injectables/IssueSummaryService.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"injectables/PullRequestDescriptionService.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/TopUsersDto.html":{},"classes/UserListMostActiveContributorsDto.html":{},"classes/UserRepoOptionsDto.html":{},"miscellaneous/variables.html":{}}}],["maxlength",{"_index":820,"title":{},"body":{"injectables/BlogSummaryService.html":{},"injectables/CodeExplanationService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"classes/CreateUserCollaborationDto.html":{},"classes/CreateUserHighlightDto.html":{},"injectables/IssueSummaryService.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["maxlength(500",{"_index":1439,"title":{},"body":{"classes/CreateUserCollaborationDto.html":{},"classes/CreateUserHighlightDto.html":{}}}],["maxqueryexecutiontime",{"_index":468,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["means",{"_index":1895,"title":{},"body":{"entities/DbPRInsight.html":{}}}],["measured",{"_index":5945,"title":{},"body":{"miscellaneous/variables.html":{}}}],["member",{"_index":1405,"title":{},"body":{"classes/CreateInsightMemberDto.html":{},"entities/DbInsightMember.html":{},"classes/UpdateInsightMemberDto.html":{},"controllers/UserInsightMemberController.html":{}}}],["member'})@apibadrequestresponse({description",{"_index":4843,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["member'})@apibody({type",{"_index":4858,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["member.controller",{"_index":3030,"title":{},"body":{"modules/InsightsModule.html":{}}}],["member.controller.ts",{"_index":4834,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["member.controller.ts:140",{"_index":4860,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["member.controller.ts:178",{"_index":4854,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["member.controller.ts:61",{"_index":4850,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["member.controller.ts:92",{"_index":4845,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["member.dto",{"_index":4862,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["member.dto.ts",{"_index":1404,"title":{},"body":{"classes/CreateInsightMemberDto.html":{},"classes/UpdateInsightMemberDto.html":{}}}],["member.dto.ts:11",{"_index":1408,"title":{},"body":{"classes/CreateInsightMemberDto.html":{}}}],["member.dto.ts:12",{"_index":4324,"title":{},"body":{"classes/UpdateInsightMemberDto.html":{}}}],["member.entity",{"_index":401,"title":{},"body":{"modules/AppModule.html":{},"injectables/InsightMemberService.html":{},"modules/InsightsModule.html":{},"controllers/UserInsightMemberController.html":{}}}],["member.entity.ts",{"_index":1831,"title":{},"body":{"entities/DbInsightMember.html":{}}}],["member.entity.ts:100",{"_index":1850,"title":{},"body":{"entities/DbInsightMember.html":{}}}],["member.entity.ts:110",{"_index":1847,"title":{},"body":{"entities/DbInsightMember.html":{}}}],["member.entity.ts:25",{"_index":1842,"title":{},"body":{"entities/DbInsightMember.html":{}}}],["member.entity.ts:33",{"_index":1844,"title":{},"body":{"entities/DbInsightMember.html":{}}}],["member.entity.ts:41",{"_index":1854,"title":{},"body":{"entities/DbInsightMember.html":{}}}],["member.entity.ts:52",{"_index":1852,"title":{},"body":{"entities/DbInsightMember.html":{}}}],["member.entity.ts:63",{"_index":1838,"title":{},"body":{"entities/DbInsightMember.html":{}}}],["member.entity.ts:73",{"_index":1839,"title":{},"body":{"entities/DbInsightMember.html":{}}}],["member.entity.ts:83",{"_index":1853,"title":{},"body":{"entities/DbInsightMember.html":{}}}],["member.entity.ts:90",{"_index":1840,"title":{},"body":{"entities/DbInsightMember.html":{}}}],["member.service",{"_index":3031,"title":{},"body":{"modules/InsightsModule.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["member.service.ts",{"_index":2931,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["member.service.ts:13",{"_index":2939,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["member.service.ts:21",{"_index":2944,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["member.service.ts:27",{"_index":2952,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["member.service.ts:41",{"_index":2942,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["member.service.ts:45",{"_index":2956,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["member.service.ts:49",{"_index":2954,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["member.service.ts:53",{"_index":2949,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["member.service.ts:81",{"_index":2951,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["memberid",{"_index":4852,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["members",{"_index":4848,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["memory",{"_index":2749,"title":{},"body":{"controllers/HealthController.html":{}}}],["memory_heap",{"_index":5763,"title":{},"body":{"miscellaneous/variables.html":{}}}],["memory_rss",{"_index":5767,"title":{},"body":{"miscellaneous/variables.html":{}}}],["memoryhealthindicator",{"_index":2745,"title":{},"body":{"controllers/HealthController.html":{}}}],["mentioned",{"_index":826,"title":{},"body":{"injectables/BlogSummaryService.html":{},"injectables/CodeExplanationService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"injectables/IssueSummaryService.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["merchantability",{"_index":5676,"title":{},"body":{"license.html":{}}}],["merge",{"_index":1674,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbPullRequest.html":{},"entities/DbPullRequestGitHubEvents.html":{},"classes/FilterListContributorsDto.html":{},"license.html":{}}}],["mergeable",{"_index":1912,"title":{},"body":{"entities/DbPullRequest.html":{},"entities/DbPullRequestGitHubEvents.html":{}}}],["merged",{"_index":1913,"title":{},"body":{"entities/DbPullRequest.html":{},"entities/DbPullRequestGitHubEvents.html":{}}}],["merged_at",{"_index":1914,"title":{},"body":{"entities/DbPullRequest.html":{},"classes/PullRequestPageOptionsDto.html":{},"miscellaneous/enumerations.html":{}}}],["merged_by_login",{"_index":1915,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["merged_pull_requests\".\"updated_at",{"_index":3755,"title":{},"body":{"injectables/RepoService.html":{}}}],["message",{"_index":864,"title":{},"body":{"interfaces/ChatResponse.html":{},"classes/CreateLogDto.html":{},"classes/CreateUserCollaborationDto.html":{},"injectables/CustomLogger.html":{},"classes/DatabaseLoggerMiddleware.html":{},"entities/DbLog.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserNotification.html":{},"injectables/HttpLoggerMiddleware.html":{},"injectables/OpenAiService.html":{},"classes/UpdateUserDto.html":{},"injectables/UserNotificationService.html":{}}}],["messageformat",{"_index":502,"title":{},"body":{"modules/AppModule.html":{}}}],["messages",{"_index":881,"title":{},"body":{"interfaces/ChatResponse.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"injectables/OpenAiService.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["meta",{"_index":1079,"title":{},"body":{"classes/ContributionPageMetaDto.html":{},"classes/ContributionsPageDto.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaParameters.html":{}}}],["meta.dto",{"_index":1081,"title":{},"body":{"classes/ContributionPageMetaDto.html":{},"injectables/ContributionService.html":{},"classes/ContributionsPageDto.html":{},"injectables/EmojiService.html":{},"injectables/InsightsService.html":{},"classes/PageDto.html":{},"injectables/PagerService.html":{},"interfaces/PaginationInput.html":{},"injectables/PullRequestGithubEventsService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserListService.html":{},"injectables/UserNotificationService.html":{},"injectables/UserOrganizationService.html":{}}}],["meta.dto.ts",{"_index":3132,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["meta.dto.ts:10",{"_index":3137,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["meta.dto.ts:17",{"_index":3136,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["meta.dto.ts:24",{"_index":3135,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["meta.dto.ts:31",{"_index":3138,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["meta.dto.ts:37",{"_index":3134,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["meta.dto.ts:43",{"_index":3133,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["meta_id",{"_index":2366,"title":{},"body":{"entities/DbUserNotification.html":{},"injectables/UserNotificationService.html":{}}}],["metadata",{"_index":2167,"title":{},"body":{"entities/DbSubscription.html":{},"injectables/StripeService.html":{},"controllers/StripeWebhookController.html":{},"injectables/TierService.html":{}}}],["method",{"_index":511,"title":{},"body":{"modules/AppModule.html":{},"interfaces/ChatResponse.html":{},"injectables/HttpLoggerMiddleware.html":{},"injectables/OpenAiService.html":{},"miscellaneous/variables.html":{}}}],["methodkey",{"_index":5874,"title":{},"body":{"miscellaneous/variables.html":{}}}],["methods",{"_index":288,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"controllers/BlogSummaryController.html":{},"injectables/BlogSummaryService.html":{},"controllers/CodeExplanationController.html":{},"injectables/CodeExplanationService.html":{},"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"controllers/CodeTestSuggestionController.html":{},"injectables/CodeTestSuggestionService.html":{},"injectables/CommitAuthorsService.html":{},"injectables/CommitsService.html":{},"injectables/ContributionService.html":{},"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"injectables/CouponService.html":{},"injectables/CustomLogger.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"controllers/EmojiController.html":{},"injectables/EmojiService.html":{},"controllers/EndorsementController.html":{},"injectables/EndorsementService.html":{},"guards/EndorsementTokenGuard.html":{},"controllers/HealthController.html":{},"controllers/HighlightController.html":{},"injectables/HttpLoggerMiddleware.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"controllers/IssueSummaryController.html":{},"injectables/IssueSummaryService.html":{},"injectables/LogService.html":{},"injectables/OpenAiService.html":{},"injectables/PagerService.html":{},"controllers/PizzaOvenController.html":{},"injectables/PizzaOvenService.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestGithubEventsService.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestReviewService.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"injectables/RepoFilterService.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeService.html":{},"injectables/StripeSubscriptionService.html":{},"controllers/StripeWebhookController.html":{},"injectables/SubmitService.html":{},"injectables/SupabaseStrategy.html":{},"injectables/TierService.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowingController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"injectables/UserListService.html":{},"controllers/UserListStatsController.html":{},"injectables/UserListStatsService.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"injectables/UserOrganizationService.html":{},"controllers/UserRecommendationController.html":{},"injectables/UserReposService.html":{},"injectables/VoteService.html":{}}}],["microservice",{"_index":3207,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["middlewareconsumer",{"_index":291,"title":{},"body":{"modules/AppModule.html":{}}}],["migrations",{"_index":5533,"title":{},"body":{"index.html":{}}}],["migrations.sh",{"_index":5531,"title":{},"body":{"index.html":{}}}],["milestone",{"_index":1463,"title":{},"body":{"classes/CreateUserHighlightDto.html":{}}}],["min",{"_index":1354,"title":{},"body":{"classes/CreateBlogSummaryDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/FilterListContributorsDto.html":{},"classes/FilteredUsersDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/TopUsersDto.html":{}}}],["min(0",{"_index":1358,"title":{},"body":{"classes/CreateBlogSummaryDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{}}}],["min(1",{"_index":2656,"title":{},"body":{"classes/FilterListContributorsDto.html":{},"classes/FilteredUsersDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/TopUsersDto.html":{}}}],["min(100",{"_index":1356,"title":{},"body":{"classes/CreateBlogSummaryDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{}}}],["minimum",{"_index":2655,"title":{},"body":{"classes/FilterListContributorsDto.html":{},"classes/FilteredUsersDto.html":{},"classes/InsightOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/TopUsersDto.html":{},"miscellaneous/enumerations.html":{}}}],["minimumcontributors",{"_index":2984,"title":{},"body":{"classes/InsightOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"miscellaneous/enumerations.html":{}}}],["minlength",{"_index":1435,"title":{},"body":{"classes/CreateUserCollaborationDto.html":{},"classes/CreateUserHighlightDto.html":{},"classes/FilteredUsersDto.html":{}}}],["minlength(20",{"_index":1438,"title":{},"body":{"classes/CreateUserCollaborationDto.html":{}}}],["minlength(3",{"_index":1471,"title":{},"body":{"classes/CreateUserHighlightDto.html":{},"classes/FilteredUsersDto.html":{}}}],["minus",{"_index":3417,"title":{},"body":{"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{}}}],["miscellaneous",{"_index":5417,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["missing",{"_index":5601,"title":{},"body":{"index.html":{}}}],["mit",{"_index":5641,"title":{},"body":{"index.html":{},"license.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["mm",{"_index":3434,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["mocking",{"_index":5570,"title":{},"body":{"index.html":{}}}],["mode",{"_index":4053,"title":{},"body":{"injectables/StripeService.html":{},"index.html":{}}}],["model",{"_index":879,"title":{},"body":{"interfaces/ChatResponse.html":{},"entities/DbBakedRepo.html":{},"entities/DbCommitAuthors.html":{},"entities/DbCommits.html":{},"entities/DbContribution.html":{},"entities/DbContributionStatTimeframe.html":{},"entities/DbContributionsProjects.html":{},"entities/DbContributorCategoryTimeframe.html":{},"entities/DbCoupon.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"classes/DbFilteredUser.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbPullRequestGitHubEvents.html":{},"entities/DbPullRequestReview.html":{},"entities/DbRepoLoginContributions.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"classes/DbTimezone.html":{},"classes/DbTopUser.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserListContributorStat.html":{},"entities/DbUserListContributorStat-1.html":{},"entities/DbUserNotification.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"injectables/OpenAiService.html":{},"miscellaneous/variables.html":{}}}],["modelname",{"_index":5901,"title":{},"body":{"miscellaneous/variables.html":{}}}],["modify",{"_index":5653,"title":{},"body":{"license.html":{}}}],["module",{"_index":240,"title":{"modules/ApiServicesModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/BlogSummaryModule.html":{},"modules/ContributionModule.html":{},"modules/ContributorModule.html":{},"modules/CouponModule.html":{},"modules/CustomerModule.html":{},"modules/EmojiModule.html":{},"modules/EndorsementModule.html":{},"modules/HealthModule.html":{},"modules/HighlightModule.html":{},"modules/InsightsModule.html":{},"modules/IssueSummaryModule.html":{},"modules/LogModule.html":{},"modules/OpenAiModule.html":{},"modules/PizzaOvenModule.html":{},"modules/PullRequestModule.html":{},"modules/RepoFilterModule.html":{},"modules/RepoModule.html":{},"modules/StarModule.html":{},"modules/StargazeModule.html":{},"modules/StripeModule.html":{},"modules/StripeSubscriptionModule.html":{},"modules/StripeWebHookModule.html":{},"modules/SubmitModule.html":{},"modules/TierModule.html":{},"modules/TimescaleModule.html":{},"modules/UserListModule.html":{},"modules/UserModule.html":{},"modules/UserReposModule.html":{},"modules/VoteModule.html":{}},"body":{"modules/ApiServicesModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/BlogSummaryModule.html":{},"modules/ContributionModule.html":{},"modules/ContributorModule.html":{},"modules/CouponModule.html":{},"modules/CustomerModule.html":{},"modules/EmojiModule.html":{},"modules/EndorsementModule.html":{},"modules/HealthModule.html":{},"modules/HighlightModule.html":{},"modules/InsightsModule.html":{},"modules/IssueSummaryModule.html":{},"modules/LogModule.html":{},"modules/OpenAiModule.html":{},"modules/PizzaOvenModule.html":{},"modules/PullRequestModule.html":{},"modules/RepoFilterModule.html":{},"modules/RepoModule.html":{},"modules/StarModule.html":{},"modules/StargazeModule.html":{},"modules/StripeModule.html":{},"modules/StripeSubscriptionModule.html":{},"modules/StripeWebHookModule.html":{},"modules/SubmitModule.html":{},"modules/TierModule.html":{},"modules/TimescaleModule.html":{},"modules/UserListModule.html":{},"modules/UserModule.html":{},"modules/UserReposModule.html":{},"modules/VoteModule.html":{}}}],["modules",{"_index":242,"title":{"modules.html":{}},"body":{"modules/ApiServicesModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/BlogSummaryModule.html":{},"modules/ContributionModule.html":{},"modules/ContributorModule.html":{},"modules/CouponModule.html":{},"modules/CustomerModule.html":{},"modules/EmojiModule.html":{},"modules/EndorsementModule.html":{},"modules/HealthModule.html":{},"modules/HighlightModule.html":{},"modules/InsightsModule.html":{},"modules/IssueSummaryModule.html":{},"modules/LogModule.html":{},"modules/OpenAiModule.html":{},"modules/PizzaOvenModule.html":{},"modules/PullRequestModule.html":{},"modules/RepoFilterModule.html":{},"modules/RepoModule.html":{},"modules/StarModule.html":{},"modules/StargazeModule.html":{},"modules/StripeModule.html":{},"modules/StripeSubscriptionModule.html":{},"modules/StripeWebHookModule.html":{},"modules/SubmitModule.html":{},"modules/TierModule.html":{},"modules/TimescaleModule.html":{},"modules/UserListModule.html":{},"modules/UserModule.html":{},"modules/UserReposModule.html":{},"modules/VoteModule.html":{},"modules.html":{},"overview.html":{}}}],["month",{"_index":3421,"title":{},"body":{"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{}}}],["months",{"_index":3314,"title":{},"body":{"controllers/PullRequestController.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoService.html":{}}}],["months'})@apiokresponse({type",{"_index":3288,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["more",{"_index":5997,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mostactive",{"_index":2985,"title":{},"body":{"classes/InsightOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"miscellaneous/enumerations.html":{}}}],["mostspammed",{"_index":2986,"title":{},"body":{"classes/InsightOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"miscellaneous/enumerations.html":{}}}],["mote",{"_index":5992,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mountain",{"_index":2663,"title":{},"body":{"classes/FilterListContributorsDto.html":{}}}],["move",{"_index":5557,"title":{},"body":{"index.html":{}}}],["mrpizza",{"_index":4228,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["my_postgres_container",{"_index":5519,"title":{},"body":{"index.html":{}}}],["my_postgres_image",{"_index":5509,"title":{},"body":{"index.html":{}}}],["my_postgres_image:latestthis",{"_index":5523,"title":{},"body":{"index.html":{}}}],["n",{"_index":885,"title":{},"body":{"interfaces/ChatResponse.html":{},"injectables/OpenAiService.html":{}}}],["name",{"_index":295,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"controllers/BlogSummaryController.html":{},"injectables/BlogSummaryService.html":{},"controllers/CodeExplanationController.html":{},"injectables/CodeExplanationService.html":{},"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"controllers/CodeTestSuggestionController.html":{},"injectables/CodeTestSuggestionService.html":{},"injectables/CommitAuthorsService.html":{},"injectables/CommitsService.html":{},"classes/ContributionPageMetaDto.html":{},"injectables/ContributionService.html":{},"classes/ContributionsPageDto.html":{},"classes/Contributor.html":{},"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"injectables/CouponService.html":{},"classes/CreateInsightDto.html":{},"classes/CreateUserListDto.html":{},"injectables/CustomLogger.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"entities/DbBakedRepo.html":{},"entities/DbCommitAuthors.html":{},"entities/DbCommits.html":{},"entities/DbContribution.html":{},"entities/DbContributionStatTimeframe.html":{},"entities/DbContributionsProjects.html":{},"entities/DbContributorCategoryTimeframe.html":{},"entities/DbCoupon.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbPullRequestGitHubEvents.html":{},"entities/DbPullRequestReview.html":{},"entities/DbRepoLoginContributions.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserListContributorStat.html":{},"entities/DbUserListContributorStat-1.html":{},"entities/DbUserNotification.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"controllers/EmojiController.html":{},"injectables/EmojiService.html":{},"controllers/EndorsementController.html":{},"injectables/EndorsementService.html":{},"guards/EndorsementTokenGuard.html":{},"controllers/HighlightController.html":{},"injectables/HttpLoggerMiddleware.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"controllers/IssueSummaryController.html":{},"injectables/IssueSummaryService.html":{},"injectables/LogService.html":{},"injectables/OpenAiService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"injectables/PagerService.html":{},"controllers/PizzaOvenController.html":{},"injectables/PizzaOvenService.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestGithubEventsService.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestReviewService.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"injectables/RepoFilterService.html":{},"classes/RepoInfo.html":{},"classes/RepoPageOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeService.html":{},"injectables/StripeSubscriptionService.html":{},"controllers/StripeWebhookController.html":{},"injectables/SubmitService.html":{},"classes/SupabaseAuthDto.html":{},"injectables/SupabaseStrategy.html":{},"injectables/TierService.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowingController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"injectables/UserListService.html":{},"controllers/UserListStatsController.html":{},"injectables/UserListStatsService.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"injectables/UserOrganizationService.html":{},"controllers/UserRecommendationController.html":{},"injectables/UserReposService.html":{},"injectables/VoteService.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["named",{"_index":5524,"title":{},"body":{"index.html":{}}}],["names",{"_index":1453,"title":{},"body":{"classes/CreateUserHighlightDto.html":{},"entities/DbPullRequest.html":{},"entities/DbUserHighlight.html":{}}}],["navigating",{"_index":5483,"title":{},"body":{"index.html":{}}}],["ncommit",{"_index":3344,"title":{},"body":{"injectables/PullRequestDescriptionService.html":{}}}],["need",{"_index":5446,"title":{},"body":{"index.html":{}}}],["needs",{"_index":5564,"title":{},"body":{"index.html":{}}}],["nestfactory.create(appmodule",{"_index":5839,"title":{},"body":{"miscellaneous/variables.html":{}}}],["nestjs",{"_index":311,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/SupabaseStrategy.html":{},"controllers/UserCollaborationController.html":{},"properties.html":{}}}],["nestjs/axios",{"_index":307,"title":{},"body":{"modules/AppModule.html":{},"modules/PizzaOvenModule.html":{},"injectables/PizzaOvenService.html":{}}}],["nestjs/common",{"_index":19,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"modules/ApiServicesModule.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/BlogSummaryController.html":{},"modules/BlogSummaryModule.html":{},"injectables/BlogSummaryService.html":{},"interfaces/ChatResponse.html":{},"controllers/CodeExplanationController.html":{},"injectables/CodeExplanationService.html":{},"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"controllers/CodeTestSuggestionController.html":{},"injectables/CodeTestSuggestionService.html":{},"injectables/CommitAuthorsService.html":{},"injectables/CommitsService.html":{},"modules/ContributionModule.html":{},"injectables/ContributionService.html":{},"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"modules/ContributorModule.html":{},"modules/CouponModule.html":{},"injectables/CouponService.html":{},"injectables/CustomLogger.html":{},"modules/CustomerModule.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"controllers/EmojiController.html":{},"modules/EmojiModule.html":{},"injectables/EmojiService.html":{},"controllers/EndorsementController.html":{},"modules/EndorsementModule.html":{},"injectables/EndorsementService.html":{},"guards/EndorsementTokenGuard.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"controllers/HighlightController.html":{},"modules/HighlightModule.html":{},"injectables/HttpLoggerMiddleware.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightRepoService.html":{},"modules/InsightsModule.html":{},"injectables/InsightsService.html":{},"controllers/IssueSummaryController.html":{},"modules/IssueSummaryModule.html":{},"injectables/IssueSummaryService.html":{},"modules/LogModule.html":{},"injectables/LogService.html":{},"modules/OpenAiModule.html":{},"injectables/OpenAiService.html":{},"injectables/PagerService.html":{},"interfaces/PaginationInput.html":{},"controllers/PizzaOvenController.html":{},"modules/PizzaOvenModule.html":{},"injectables/PizzaOvenService.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestGithubEventsService.html":{},"injectables/PullRequestInsightsService.html":{},"modules/PullRequestModule.html":{},"injectables/PullRequestReviewService.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"modules/RepoFilterModule.html":{},"injectables/RepoFilterService.html":{},"modules/RepoModule.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"modules/StarModule.html":{},"injectables/StarService.html":{},"modules/StargazeModule.html":{},"injectables/StargazeService.html":{},"modules/StripeModule.html":{},"injectables/StripeService.html":{},"modules/StripeSubscriptionModule.html":{},"injectables/StripeSubscriptionService.html":{},"modules/StripeWebHookModule.html":{},"controllers/StripeWebhookController.html":{},"modules/SubmitModule.html":{},"injectables/SubmitService.html":{},"injectables/SupabaseGuard.html":{},"injectables/SupabaseStrategy.html":{},"modules/TierModule.html":{},"injectables/TierService.html":{},"modules/TimescaleModule.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowingController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"modules/UserListModule.html":{},"injectables/UserListService.html":{},"controllers/UserListStatsController.html":{},"injectables/UserListStatsService.html":{},"modules/UserModule.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"injectables/UserOrganizationService.html":{},"controllers/UserRecommendationController.html":{},"modules/UserReposModule.html":{},"injectables/UserReposService.html":{},"modules/VoteModule.html":{},"injectables/VoteService.html":{}}}],["nestjs/common/services/console",{"_index":1504,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["nestjs/common/utils/cli",{"_index":318,"title":{},"body":{"modules/AppModule.html":{},"classes/DatabaseLoggerMiddleware.html":{},"injectables/HttpLoggerMiddleware.html":{}}}],["nestjs/config",{"_index":305,"title":{},"body":{"modules/AppModule.html":{},"interfaces/ChatResponse.html":{},"injectables/CustomLogger.html":{},"guards/EndorsementTokenGuard.html":{},"controllers/HealthController.html":{},"modules/LogModule.html":{},"injectables/OpenAiService.html":{},"injectables/PizzaOvenService.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoService.html":{},"injectables/StripeService.html":{},"controllers/StripeWebhookController.html":{},"injectables/TierService.html":{}}}],["nestjs/passport",{"_index":748,"title":{},"body":{"modules/AuthModule.html":{},"injectables/SupabaseGuard.html":{},"injectables/SupabaseStrategy.html":{}}}],["nestjs/swagger",{"_index":534,"title":{},"body":{"classes/ApplyUserCouponDto.html":{},"controllers/AuthController.html":{},"classes/BakeRepoDto.html":{},"controllers/BlogSummaryController.html":{},"controllers/CodeExplanationController.html":{},"controllers/CodeRefactorSuggestionController.html":{},"controllers/CodeTestSuggestionController.html":{},"classes/CollaboratorsDto.html":{},"classes/CommitAuthorDto.html":{},"classes/CommitsDto.html":{},"classes/ContributionPageMetaDto.html":{},"classes/ContributionPageOptionsDto.html":{},"classes/ContributionsByProjectDto.html":{},"classes/ContributionsPageDto.html":{},"classes/ContributionsTimeframeDto.html":{},"classes/Contributor.html":{},"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"classes/ContributorPullRequestsDto.html":{},"classes/CreateBlogSummaryDto.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateInsightDto.html":{},"classes/CreateInsightMemberDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/CreateUserCollaborationDto.html":{},"classes/CreateUserHighlightDto.html":{},"classes/CreateUserListDto.html":{},"entities/DbBakedRepo.html":{},"entities/DbCommitAuthors.html":{},"entities/DbCommits.html":{},"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbInsight.html":{},"entities/DbInsightRepo.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightReactionResponse.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserNotification.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"controllers/EmojiController.html":{},"controllers/EndorsementController.html":{},"classes/FilterListContributorsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/FilteredUsersDto.html":{},"classes/FollowManyUsersDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"controllers/HealthController.html":{},"controllers/HighlightController.html":{},"classes/HighlightOptionsDto.html":{},"controllers/InsightController.html":{},"classes/InsightOptionsDto.html":{},"controllers/IssueSummaryController.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{},"controllers/PizzaOvenController.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"classes/PullRequestPageOptionsDto.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"classes/RepoInfo.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/StripeWebhookController.html":{},"classes/SupabaseAuthDto.html":{},"classes/TopProjectsDto.html":{},"classes/TopUsersDto.html":{},"classes/UpdateEndorsementDto.html":{},"classes/UpdateInsightMemberDto.html":{},"classes/UpdateUserCollaborationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"controllers/UserFollowingController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"classes/UserListMostActiveContributorsDto.html":{},"controllers/UserListStatsController.html":{},"controllers/UserNotificationController.html":{},"classes/UserOnboardingDto.html":{},"controllers/UserRecommendationController.html":{},"classes/UserRepoOptionsDto-1.html":{},"classes/VotedRepoDto.html":{}}}],["nestjs/swagger/dist/decorators/api",{"_index":1608,"title":{},"body":{"entities/DbBakedRepo.html":{},"entities/DbCommitAuthors.html":{},"entities/DbCommits.html":{},"entities/DbContribution.html":{},"entities/DbContributionStatTimeframe.html":{},"entities/DbContributionsProjects.html":{},"entities/DbContributorCategoryTimeframe.html":{},"entities/DbCoupon.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"classes/DbFilteredUser.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbPullRequestGitHubEvents.html":{},"entities/DbPullRequestReview.html":{},"entities/DbRepoLoginContributions.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"classes/DbTimezone.html":{},"classes/DbTopUser.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserListContributorStat.html":{},"entities/DbUserListContributorStat-1.html":{},"entities/DbUserNotification.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{}}}],["nestjs/terminus",{"_index":309,"title":{},"body":{"modules/AppModule.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{}}}],["nestjs/typeorm",{"_index":24,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"modules/AppModule.html":{},"injectables/CommitAuthorsService.html":{},"injectables/CommitsService.html":{},"modules/ContributionModule.html":{},"injectables/ContributionService.html":{},"modules/ContributorModule.html":{},"modules/CouponModule.html":{},"injectables/CouponService.html":{},"modules/CustomerModule.html":{},"injectables/CustomerService.html":{},"modules/EmojiModule.html":{},"injectables/EmojiService.html":{},"modules/EndorsementModule.html":{},"injectables/EndorsementService.html":{},"modules/HighlightModule.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightRepoService.html":{},"modules/InsightsModule.html":{},"injectables/InsightsService.html":{},"modules/LogModule.html":{},"injectables/LogService.html":{},"modules/PizzaOvenModule.html":{},"injectables/PizzaOvenService.html":{},"injectables/PullRequestGithubEventsService.html":{},"injectables/PullRequestInsightsService.html":{},"modules/PullRequestModule.html":{},"injectables/PullRequestReviewService.html":{},"injectables/PullRequestService.html":{},"modules/RepoModule.html":{},"injectables/RepoService.html":{},"modules/StarModule.html":{},"injectables/StarService.html":{},"modules/StargazeModule.html":{},"injectables/StargazeService.html":{},"modules/StripeSubscriptionModule.html":{},"injectables/StripeSubscriptionService.html":{},"modules/SubmitModule.html":{},"injectables/SubmitService.html":{},"modules/TimescaleModule.html":{},"injectables/UserCollaborationService.html":{},"injectables/UserFollowService.html":{},"injectables/UserHighlightsService.html":{},"modules/UserListModule.html":{},"injectables/UserListService.html":{},"injectables/UserListStatsService.html":{},"modules/UserModule.html":{},"injectables/UserNotificationService.html":{},"injectables/UserOrganizationService.html":{},"modules/UserReposModule.html":{},"injectables/UserReposService.html":{},"modules/VoteModule.html":{},"injectables/VoteService.html":{}}}],["nestjs/typeorm/dist/interfaces/typeorm",{"_index":315,"title":{},"body":{"modules/AppModule.html":{}}}],["nestlogger",{"_index":1570,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["nestlogger(name",{"_index":1573,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["nestmiddleware",{"_index":2868,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{}}}],["never",{"_index":4248,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["new",{"_index":102,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"controllers/BlogSummaryController.html":{},"interfaces/ChatResponse.html":{},"controllers/CodeExplanationController.html":{},"controllers/CodeRefactorSuggestionController.html":{},"controllers/CodeTestSuggestionController.html":{},"injectables/CommitAuthorsService.html":{},"injectables/CommitsService.html":{},"injectables/ContributionService.html":{},"controllers/ContributorInsightsController.html":{},"injectables/CouponService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"entities/DbContributorCategoryTimeframe.html":{},"injectables/EmojiService.html":{},"controllers/EndorsementController.html":{},"injectables/EndorsementService.html":{},"injectables/HttpLoggerMiddleware.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightsService.html":{},"controllers/IssueSummaryController.html":{},"injectables/OpenAiService.html":{},"injectables/PagerService.html":{},"interfaces/PaginationInput.html":{},"controllers/PizzaOvenController.html":{},"injectables/PizzaOvenService.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestGithubEventsService.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoService.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeService.html":{},"controllers/StripeWebhookController.html":{},"injectables/SubmitService.html":{},"injectables/TierService.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"injectables/UserFollowService.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"classes/UserListMostActiveContributorsDto.html":{},"injectables/UserListService.html":{},"injectables/UserListStatsService.html":{},"injectables/UserNotificationService.html":{},"injectables/UserOrganizationService.html":{},"injectables/UserReposService.html":{},"injectables/VoteService.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["newcount",{"_index":169,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["newcountquerybuilder",{"_index":166,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["newcountquerybuilder.getcount",{"_index":170,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["newcountquerybuilder.innerjoin",{"_index":167,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["newcustomer",{"_index":718,"title":{},"body":{"controllers/AuthController.html":{}}}],["newcustomer.stripe_customer_id",{"_index":721,"title":{},"body":{"controllers/AuthController.html":{}}}],["newer",{"_index":3521,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["newhighlight",{"_index":4802,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["newinsight",{"_index":4910,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["newinsightmember",{"_index":4878,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["newkey",{"_index":5498,"title":{},"body":{"index.html":{}}}],["newlist",{"_index":5023,"title":{},"body":{"controllers/UserListController.html":{}}}],["newlog",{"_index":3117,"title":{},"body":{"injectables/LogService.html":{}}}],["newpullrequestcontributors",{"_index":1249,"title":{},"body":{"controllers/ContributorInsightsController.html":{}}}],["newpullrequestcontributors(pageoptionsdto",{"_index":1266,"title":{},"body":{"controllers/ContributorInsightsController.html":{}}}],["newuserhighlight",{"_index":4793,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["newuserlist",{"_index":5135,"title":{},"body":{"injectables/UserListService.html":{}}}],["newuserlistcontributor",{"_index":5142,"title":{},"body":{"injectables/UserListService.html":{}}}],["newuserrepo",{"_index":5378,"title":{},"body":{"injectables/UserReposService.html":{}}}],["next",{"_index":148,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"interfaces/ChatResponse.html":{},"classes/ContributionPageMetaDto.html":{},"injectables/HttpLoggerMiddleware.html":{},"injectables/OpenAiService.html":{},"classes/PageMetaDto.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserListStatsService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["nextfunction",{"_index":2864,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{}}}],["node>=16.7.0",{"_index":5452,"title":{},"body":{"index.html":{}}}],["node_id",{"_index":1962,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["nodes",{"_index":5502,"title":{},"body":{"index.html":{}}}],["non",{"_index":951,"title":{},"body":{"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{}}}],["noninfringement",{"_index":5680,"title":{},"body":{"license.html":{}}}],["note",{"_index":5505,"title":{},"body":{"index.html":{}}}],["notfoundexception",{"_index":18,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/CommitAuthorsService.html":{},"injectables/CommitsService.html":{},"injectables/ContributionService.html":{},"injectables/CouponService.html":{},"injectables/EndorsementService.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightsService.html":{},"injectables/PizzaOvenService.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/RepoService.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/SubmitService.html":{},"injectables/UserCollaborationService.html":{},"injectables/UserFollowService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserListService.html":{},"injectables/UserListStatsService.html":{},"injectables/UserReposService.html":{},"injectables/VoteService.html":{}}}],["notfoundexception(\"the",{"_index":1318,"title":{},"body":{"injectables/CouponService.html":{}}}],["notfoundexception(\"user",{"_index":5146,"title":{},"body":{"injectables/UserListService.html":{}}}],["notfoundexception(\"you",{"_index":3998,"title":{},"body":{"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/SubmitService.html":{},"injectables/UserFollowService.html":{},"injectables/VoteService.html":{}}}],["notice",{"_index":5666,"title":{},"body":{"license.html":{}}}],["notifcation.service",{"_index":4569,"title":{},"body":{"injectables/UserFollowService.html":{},"injectables/UserHighlightsService.html":{},"modules/UserModule.html":{},"controllers/UserNotificationController.html":{}}}],["notifcation.service.ts",{"_index":5264,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["notifcation.service.ts:13",{"_index":5271,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["notifcation.service.ts:20",{"_index":5282,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["notifcation.service.ts:26",{"_index":5284,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["notifcation.service.ts:52",{"_index":5280,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["notifcation.service.ts:63",{"_index":5274,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["notifcation.service.ts:75",{"_index":5278,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["notifcation.service.ts:87",{"_index":5276,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["notifcation.service.ts:99",{"_index":5286,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["notification",{"_index":2373,"title":{},"body":{"entities/DbUserNotification.html":{},"classes/SupabaseAuthDto.html":{}}}],["notification.constants",{"_index":2389,"title":{},"body":{"entities/DbUserNotification.html":{},"injectables/UserNotificationService.html":{}}}],["notification.constants.ts",{"_index":5428,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["notification.controller",{"_index":5252,"title":{},"body":{"modules/UserModule.html":{}}}],["notification.controller.ts",{"_index":5256,"title":{},"body":{"controllers/UserNotificationController.html":{}}}],["notification.controller.ts:25",{"_index":5260,"title":{},"body":{"controllers/UserNotificationController.html":{}}}],["notification.entity",{"_index":412,"title":{},"body":{"modules/AppModule.html":{},"modules/UserModule.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{}}}],["notification.entity.ts",{"_index":2363,"title":{},"body":{"entities/DbUserNotification.html":{}}}],["notification.entity.ts:18",{"_index":2374,"title":{},"body":{"entities/DbUserNotification.html":{}}}],["notification.entity.ts:26",{"_index":2388,"title":{},"body":{"entities/DbUserNotification.html":{}}}],["notification.entity.ts:34",{"_index":2372,"title":{},"body":{"entities/DbUserNotification.html":{}}}],["notification.entity.ts:45",{"_index":2387,"title":{},"body":{"entities/DbUserNotification.html":{}}}],["notification.entity.ts:55",{"_index":2377,"title":{},"body":{"entities/DbUserNotification.html":{}}}],["notification.entity.ts:65",{"_index":2382,"title":{},"body":{"entities/DbUserNotification.html":{}}}],["notification.entity.ts:74",{"_index":2384,"title":{},"body":{"entities/DbUserNotification.html":{}}}],["notification.entity.ts:84",{"_index":2380,"title":{},"body":{"entities/DbUserNotification.html":{}}}],["notification.entity.ts:92",{"_index":2370,"title":{},"body":{"entities/DbUserNotification.html":{}}}],["notification.id",{"_index":5298,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["notification.read_at",{"_index":5296,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["notification_count",{"_index":690,"title":{},"body":{"controllers/AuthController.html":{},"classes/SupabaseAuthDto.html":{}}}],["notificationids",{"_index":5287,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["notificationids.map(async",{"_index":5312,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["notifications",{"_index":4806,"title":{},"body":{"injectables/UserHighlightsService.html":{},"controllers/UserNotificationController.html":{}}}],["notified_at",{"_index":2367,"title":{},"body":{"entities/DbUserNotification.html":{},"injectables/UserNotificationService.html":{}}}],["now",{"_index":98,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/CouponService.html":{},"entities/DbContribution.html":{},"entities/DbCoupon.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbPullRequestGitHubEvents.html":{},"entities/DbPullRequestReview.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserNotification.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"injectables/RepoFilterService.html":{},"injectables/RepoService.html":{},"controllers/UserFollowsController.html":{},"injectables/UserListStatsService.html":{}}}],["npm",{"_index":5537,"title":{},"body":{"index.html":{}}}],["npm>=8.0.0",{"_index":5453,"title":{},"body":{"index.html":{}}}],["null",{"_index":234,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/CouponService.html":{},"entities/DbPullRequest.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightsService.html":{},"injectables/UserCollaborationService.html":{},"injectables/UserFollowService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserListService.html":{},"injectables/UserListStatsService.html":{},"classes/UserRepoOptionsDto-1.html":{},"injectables/UserReposService.html":{},"injectables/VoteService.html":{},"classes/VotedRepoDto.html":{}}}],["number",{"_index":13,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"controllers/AuthController.html":{},"injectables/BlogSummaryService.html":{},"interfaces/ChatResponse.html":{},"injectables/CodeExplanationService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"classes/CollaboratorsDto.html":{},"injectables/CommitAuthorsService.html":{},"injectables/CommitsService.html":{},"classes/ContributionPageMetaDto.html":{},"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"classes/ContributionsByProjectDto.html":{},"classes/ContributionsTimeframeDto.html":{},"classes/Contributor.html":{},"classes/ContributorPullRequestsDto.html":{},"classes/CreateBlogSummaryDto.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/CreateUserListDto.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"entities/DbBakedRepo.html":{},"entities/DbCommitAuthors.html":{},"entities/DbCommits.html":{},"entities/DbContribution.html":{},"entities/DbContributionStatTimeframe.html":{},"entities/DbContributionsProjects.html":{},"entities/DbContributorCategoryTimeframe.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbPullRequestGitHubEvents.html":{},"entities/DbPullRequestReview.html":{},"entities/DbRepoLoginContributions.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserListContributorStat.html":{},"entities/DbUserListContributorStat-1.html":{},"entities/DbUserNotification.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"injectables/EndorsementService.html":{},"classes/FilterListContributorsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/FilteredUsersDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"controllers/HighlightController.html":{},"classes/HighlightOptionsDto.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"injectables/IssueSummaryService.html":{},"injectables/OpenAiService.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaParameters.html":{},"classes/PageOptionsDto.html":{},"controllers/PizzaOvenController.html":{},"injectables/PizzaOvenService.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"controllers/PullRequestController.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestInsightsService.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestReviewService.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"injectables/RepoFilterService.html":{},"classes/RepoInfo.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeService.html":{},"injectables/SubmitService.html":{},"classes/SupabaseAuthDto.html":{},"injectables/TierService.html":{},"classes/TopProjectsDto.html":{},"classes/TopUsersDto.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserEndorsementController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"classes/UserListMostActiveContributorsDto.html":{},"injectables/UserListService.html":{},"injectables/UserListStatsService.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"injectables/UserOrganizationService.html":{},"controllers/UserRecommendationController.html":{},"classes/UserRepoOptionsDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"injectables/UserReposService.html":{},"injectables/VoteService.html":{},"classes/VotedRepoDto.html":{},"miscellaneous/variables.html":{}}}],["number(highlight.user_id",{"_index":4715,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["number(insight.user.id",{"_index":2927,"title":{},"body":{"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{}}}],["number(parsefloat(process.env.disk_percengate",{"_index":5771,"title":{},"body":{"miscellaneous/variables.html":{}}}],["number(parseint(process.env.disk_size",{"_index":5774,"title":{},"body":{"miscellaneous/variables.html":{}}}],["number(parseint(process.env.memory_heap",{"_index":5764,"title":{},"body":{"miscellaneous/variables.html":{}}}],["number(parseint(process.env.memory_rss",{"_index":5768,"title":{},"body":{"miscellaneous/variables.html":{}}}],["number(parseint(process.env.typeorm_max_query_execution_time_api",{"_index":5802,"title":{},"body":{"miscellaneous/variables.html":{}}}],["number(parseint(process.env.typeorm_max_query_execution_time_logging",{"_index":5811,"title":{},"body":{"miscellaneous/variables.html":{}}}],["numbers",{"_index":4355,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["numerical",{"_index":1892,"title":{},"body":{"entities/DbPRInsight.html":{}}}],["oas3",{"_index":5707,"title":{},"body":{"properties.html":{}}}],["object",{"_index":3645,"title":{},"body":{"injectables/RepoFilterService.html":{},"controllers/StripeWebhookController.html":{},"injectables/UserHighlightsService.html":{}}}],["objectliteral",{"_index":3162,"title":{},"body":{"injectables/PagerService.html":{},"interfaces/PaginationInput.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/RepoFilterService.html":{},"injectables/RepoService.html":{}}}],["objects",{"_index":1212,"title":{},"body":{"classes/Contributor.html":{},"classes/CreateInsightDto.html":{},"classes/CreateUserListDto.html":{},"classes/UpdateInsightDto.html":{}}}],["obtain",{"_index":5486,"title":{},"body":{"index.html":{}}}],["obtaining",{"_index":5648,"title":{},"body":{"license.html":{}}}],["oct",{"_index":3418,"title":{},"body":{"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{}}}],["octo",{"_index":5637,"title":{},"body":{"index.html":{}}}],["october",{"_index":3409,"title":{},"body":{"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{}}}],["offset(pageoptionsdto.skip",{"_index":1158,"title":{},"body":{"injectables/ContributionService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoService.html":{}}}],["omittype",{"_index":4691,"title":{},"body":{"controllers/UserHighlightsController.html":{},"controllers/UserNotificationController.html":{}}}],["omittype(dbuserhighlight",{"_index":4696,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["omittype(dbusernotification",{"_index":5262,"title":{},"body":{"controllers/UserNotificationController.html":{}}}],["onboarded",{"_index":4217,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["onboarding",{"_index":595,"title":{},"body":{"controllers/AuthController.html":{},"classes/UserRepoOptionsDto-1.html":{},"classes/VotedRepoDto.html":{}}}],["onboarding.dto",{"_index":653,"title":{},"body":{"controllers/AuthController.html":{}}}],["onboarding.dto.ts",{"_index":5316,"title":{},"body":{"classes/UserOnboardingDto.html":{}}}],["onboarding.dto.ts:12",{"_index":5317,"title":{},"body":{"classes/UserOnboardingDto.html":{}}}],["onboarding.dto.ts:20",{"_index":5319,"title":{},"body":{"classes/UserOnboardingDto.html":{}}}],["once",{"_index":5464,"title":{},"body":{"index.html":{}}}],["ondelete",{"_index":1824,"title":{},"body":{"entities/DbInsight.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserList.html":{}}}],["onetomany",{"_index":1605,"title":{},"body":{"entities/DbBakedRepo.html":{},"entities/DbCommitAuthors.html":{},"entities/DbEmoji.html":{},"entities/DbInsight.html":{},"entities/DbUserHighlight.html":{}}}],["open",{"_index":421,"title":{},"body":{"modules/AppModule.html":{},"modules/BlogSummaryModule.html":{},"injectables/BlogSummaryService.html":{},"injectables/CodeExplanationService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"classes/CreateInsightDto.html":{},"classes/CreateUserHighlightDto.html":{},"entities/DbContributionsProjects.html":{},"entities/DbInsight.html":{},"entities/DbInsightRepo.html":{},"entities/DbPullRequest.html":{},"entities/DbPullRequestGitHubEvents.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbUserHighlight.html":{},"classes/DbUserHighlightReactionResponse.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserRepo.html":{},"classes/FilterOptionsDto.html":{},"controllers/HealthController.html":{},"classes/HighlightOptionsDto.html":{},"modules/IssueSummaryModule.html":{},"injectables/IssueSummaryService.html":{},"modules/OpenAiModule.html":{},"classes/PullRequestContributorOptionsDto.html":{},"injectables/PullRequestDescriptionService.html":{},"modules/PullRequestModule.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoInfo.html":{},"injectables/RepoService.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"license.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["open_pull_requests",{"_index":3750,"title":{},"body":{"injectables/RepoService.html":{}}}],["open_pull_requests\".\"repo_id",{"_index":3752,"title":{},"body":{"injectables/RepoService.html":{}}}],["open_pull_requests\".\"updated_at",{"_index":3753,"title":{},"body":{"injectables/RepoService.html":{}}}],["openaiconfig",{"_index":325,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["openaimodule",{"_index":272,"title":{"modules/OpenAiModule.html":{}},"body":{"modules/AppModule.html":{},"modules/BlogSummaryModule.html":{},"modules/IssueSummaryModule.html":{},"modules/OpenAiModule.html":{},"modules/PullRequestModule.html":{},"modules.html":{},"overview.html":{}}}],["openaiservice",{"_index":815,"title":{"injectables/OpenAiService.html":{}},"body":{"injectables/BlogSummaryService.html":{},"interfaces/ChatResponse.html":{},"injectables/CodeExplanationService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"injectables/IssueSummaryService.html":{},"modules/OpenAiModule.html":{},"injectables/OpenAiService.html":{},"injectables/PullRequestDescriptionService.html":{},"overview.html":{}}}],["openapi",{"_index":5589,"title":{},"body":{"index.html":{}}}],["opened",{"_index":3360,"title":{},"body":{"injectables/PullRequestGithubEventsService.html":{}}}],["opened/closed",{"_index":3369,"title":{},"body":{"injectables/PullRequestGithubEventsService.html":{}}}],["opening",{"_index":5588,"title":{},"body":{"index.html":{}}}],["opensauced",{"_index":1724,"title":{},"body":{"entities/DbContributionsProjects.html":{},"controllers/EndorsementController.html":{},"guards/EndorsementTokenGuard.html":{},"classes/SupabaseAuthDto.html":{},"injectables/TierService.html":{},"classes/UpdateUserDto.html":{}}}],["opensauced'})@isstring()@isoptional",{"_index":4336,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["opensauced.pizza\"}`).tostring",{"_index":5837,"title":{},"body":{"miscellaneous/variables.html":{}}}],["openssl",{"_index":5496,"title":{},"body":{"index.html":{}}}],["operationid",{"_index":659,"title":{},"body":{"controllers/AuthController.html":{},"controllers/BlogSummaryController.html":{},"controllers/CodeExplanationController.html":{},"controllers/CodeRefactorSuggestionController.html":{},"controllers/CodeTestSuggestionController.html":{},"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"controllers/EmojiController.html":{},"controllers/EndorsementController.html":{},"controllers/HealthController.html":{},"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"controllers/IssueSummaryController.html":{},"controllers/PizzaOvenController.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"controllers/UserFollowingController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"controllers/UserListStatsController.html":{},"controllers/UserNotificationController.html":{},"controllers/UserRecommendationController.html":{}}}],["operationidfactory",{"_index":5872,"title":{},"body":{"miscellaneous/variables.html":{}}}],["option",{"_index":762,"title":{},"body":{"classes/BakeRepoDto.html":{}}}],["optional",{"_index":296,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"controllers/BlogSummaryController.html":{},"injectables/BlogSummaryService.html":{},"controllers/CodeExplanationController.html":{},"injectables/CodeExplanationService.html":{},"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"controllers/CodeTestSuggestionController.html":{},"injectables/CodeTestSuggestionService.html":{},"injectables/CommitAuthorsService.html":{},"injectables/CommitsService.html":{},"classes/ContributionPageMetaDto.html":{},"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"classes/ContributionsByProjectDto.html":{},"classes/ContributionsPageDto.html":{},"classes/ContributionsTimeframeDto.html":{},"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"classes/ContributorPullRequestsDto.html":{},"injectables/CouponService.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateLogDto.html":{},"classes/CreateUserHighlightDto.html":{},"injectables/CustomLogger.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"entities/DbContribution.html":{},"entities/DbCoupon.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"classes/DbFilteredUser.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbPullRequestGitHubEvents.html":{},"entities/DbPullRequestReview.html":{},"entities/DbRepoLoginContributions.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"classes/DbTopUser.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightReactionResponse.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserListContributorStat.html":{},"entities/DbUserListContributorStat-1.html":{},"entities/DbUserNotification.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"controllers/EmojiController.html":{},"injectables/EmojiService.html":{},"controllers/EndorsementController.html":{},"injectables/EndorsementService.html":{},"guards/EndorsementTokenGuard.html":{},"classes/FilterListContributorsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/FilteredUsersDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"controllers/HighlightController.html":{},"classes/HighlightOptionsDto.html":{},"injectables/HttpLoggerMiddleware.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"controllers/IssueSummaryController.html":{},"injectables/IssueSummaryService.html":{},"injectables/LogService.html":{},"injectables/OpenAiService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{},"injectables/PagerService.html":{},"controllers/PizzaOvenController.html":{},"injectables/PizzaOvenService.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestGithubEventsService.html":{},"injectables/PullRequestInsightsService.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestReviewService.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"injectables/RepoFilterService.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeService.html":{},"injectables/StripeSubscriptionService.html":{},"controllers/StripeWebhookController.html":{},"injectables/SubmitService.html":{},"classes/SupabaseAuthDto.html":{},"injectables/SupabaseStrategy.html":{},"injectables/TierService.html":{},"classes/TopProjectsDto.html":{},"classes/TopUsersDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowingController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"classes/UserListMostActiveContributorsDto.html":{},"injectables/UserListService.html":{},"controllers/UserListStatsController.html":{},"injectables/UserListStatsService.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"injectables/UserOrganizationService.html":{},"controllers/UserRecommendationController.html":{},"classes/UserRepoOptionsDto.html":{},"injectables/UserReposService.html":{},"injectables/VoteService.html":{}}}],["options",{"_index":74,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"modules/AppModule.html":{},"injectables/BlogSummaryService.html":{},"injectables/CodeExplanationService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"injectables/CustomLogger.html":{},"injectables/IssueSummaryService.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/RepoFilterService.html":{},"controllers/UserListStatsController.html":{},"injectables/UserListStatsService.html":{},"miscellaneous/variables.html":{}}}],["options.blogmarkdown",{"_index":845,"title":{},"body":{"injectables/BlogSummaryService.html":{}}}],["options.blogtitle}\\n\\nblog",{"_index":844,"title":{},"body":{"injectables/BlogSummaryService.html":{}}}],["options.build",{"_index":5871,"title":{},"body":{"miscellaneous/variables.html":{}}}],["options.code}\\n",{"_index":923,"title":{},"body":{"injectables/CodeExplanationService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{}}}],["options.commitmessages",{"_index":3343,"title":{},"body":{"injectables/PullRequestDescriptionService.html":{}}}],["options.commitmessages.join",{"_index":3345,"title":{},"body":{"injectables/PullRequestDescriptionService.html":{}}}],["options.contributortype",{"_index":138,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["options.descriptionlength",{"_index":924,"title":{},"body":{"injectables/CodeExplanationService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["options.diff",{"_index":3341,"title":{},"body":{"injectables/PullRequestDescriptionService.html":{}}}],["options.diff}\\n",{"_index":3342,"title":{},"body":{"injectables/PullRequestDescriptionService.html":{}}}],["options.dto",{"_index":1003,"title":{},"body":{"injectables/CommitAuthorsService.html":{},"injectables/CommitsService.html":{},"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"controllers/ContributorController.html":{},"classes/ContributorPullRequestsDto.html":{},"classes/DbUserHighlightReactionResponse.html":{},"controllers/EmojiController.html":{},"injectables/EmojiService.html":{},"controllers/EndorsementController.html":{},"injectables/EndorsementService.html":{},"classes/FilterOptionsDto.html":{},"controllers/HighlightController.html":{},"classes/HighlightOptionsDto.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"injectables/InsightsService.html":{},"interfaces/PageMetaParameters.html":{},"injectables/PagerService.html":{},"interfaces/PaginationInput.html":{},"controllers/PizzaOvenController.html":{},"injectables/PizzaOvenService.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"controllers/PullRequestController.html":{},"injectables/PullRequestGithubEventsService.html":{},"injectables/PullRequestInsightsService.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"injectables/RepoFilterService.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"classes/UserListMostActiveContributorsDto.html":{},"injectables/UserListService.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"injectables/UserOrganizationService.html":{},"controllers/UserRecommendationController.html":{},"classes/UserRepoOptionsDto.html":{},"injectables/UserReposService.html":{}}}],["options.dto.ts",{"_index":1086,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/DbUserHighlightReactionResponse.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/UserRepoOptionsDto.html":{},"miscellaneous/enumerations.html":{}}}],["options.dto.ts:13",{"_index":2860,"title":{},"body":{"classes/HighlightOptionsDto.html":{}}}],["options.dto.ts:14",{"_index":2674,"title":{},"body":{"classes/FilterOptionsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{}}}],["options.dto.ts:17",{"_index":3147,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["options.dto.ts:19",{"_index":3693,"title":{},"body":{"classes/RepoSearchOptionsDto.html":{}}}],["options.dto.ts:21",{"_index":1097,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{}}}],["options.dto.ts:22",{"_index":2679,"title":{},"body":{"classes/FilterOptionsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{}}}],["options.dto.ts:26",{"_index":2978,"title":{},"body":{"classes/InsightOptionsDto.html":{}}}],["options.dto.ts:27",{"_index":3461,"title":{},"body":{"classes/PullRequestPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{}}}],["options.dto.ts:30",{"_index":2676,"title":{},"body":{"classes/FilterOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{}}}],["options.dto.ts:32",{"_index":3694,"title":{},"body":{"classes/RepoSearchOptionsDto.html":{}}}],["options.dto.ts:33",{"_index":2307,"title":{},"body":{"classes/DbUserHighlightReactionResponse.html":{}}}],["options.dto.ts:34",{"_index":2982,"title":{},"body":{"classes/InsightOptionsDto.html":{}}}],["options.dto.ts:35",{"_index":2678,"title":{},"body":{"classes/FilterOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{}}}],["options.dto.ts:37",{"_index":3682,"title":{},"body":{"classes/RepoPageOptionsDto.html":{}}}],["options.dto.ts:39",{"_index":2979,"title":{},"body":{"classes/InsightOptionsDto.html":{}}}],["options.dto.ts:43",{"_index":3467,"title":{},"body":{"classes/PullRequestPageOptionsDto.html":{}}}],["options.dto.ts:46",{"_index":3149,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["options.dto.ts:51",{"_index":3462,"title":{},"body":{"classes/PullRequestPageOptionsDto.html":{}}}],["options.dto.ts:56",{"_index":3463,"title":{},"body":{"classes/PullRequestPageOptionsDto.html":{}}}],["options.dto.ts:57",{"_index":3148,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["options.dto.ts:59",{"_index":3150,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["options.dto.ts:64",{"_index":3466,"title":{},"body":{"classes/PullRequestPageOptionsDto.html":{}}}],["options.dto.ts:72",{"_index":3455,"title":{},"body":{"classes/PullRequestPageOptionsDto.html":{}}}],["options.dto.ts:80",{"_index":3457,"title":{},"body":{"classes/PullRequestPageOptionsDto.html":{}}}],["options.filter",{"_index":3652,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["options.interface",{"_index":316,"title":{},"body":{"modules/AppModule.html":{}}}],["options.issuecomments",{"_index":3100,"title":{},"body":{"injectables/IssueSummaryService.html":{}}}],["options.issuedescription}\\nissue",{"_index":3099,"title":{},"body":{"injectables/IssueSummaryService.html":{}}}],["options.issuetitle}\\nissue",{"_index":3098,"title":{},"body":{"injectables/IssueSummaryService.html":{}}}],["options.range",{"_index":79,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["options.repo",{"_index":3647,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["options.repo_id",{"_index":81,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["options.repoids",{"_index":3440,"title":{},"body":{"injectables/PullRequestInsightsService.html":{},"injectables/RepoFilterService.html":{}}}],["options.repoids.split",{"_index":3441,"title":{},"body":{"injectables/PullRequestInsightsService.html":{},"injectables/RepoFilterService.html":{}}}],["options.summarylength",{"_index":849,"title":{},"body":{"injectables/BlogSummaryService.html":{},"injectables/IssueSummaryService.html":{}}}],["options.temperature",{"_index":851,"title":{},"body":{"injectables/BlogSummaryService.html":{},"injectables/CodeExplanationService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"injectables/IssueSummaryService.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["options.tone",{"_index":850,"title":{},"body":{"injectables/BlogSummaryService.html":{},"injectables/IssueSummaryService.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["options.topic",{"_index":3427,"title":{},"body":{"injectables/PullRequestInsightsService.html":{},"injectables/RepoFilterService.html":{}}}],["order",{"_index":1755,"title":{},"body":{"entities/DbEmoji.html":{},"injectables/PullRequestGithubEventsService.html":{},"injectables/RepoFilterService.html":{},"index.html":{}}}],["orderby",{"_index":1087,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"entities/DbBakedRepo.html":{},"entities/DbCommitAuthors.html":{},"entities/DbCommits.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/UserListMostActiveContributorsDto.html":{},"injectables/UserListService.html":{}}}],["orderby(\"endorsements.created_at",{"_index":2597,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["orderby(\"insights.updated_at",{"_index":3072,"title":{},"body":{"injectables/InsightsService.html":{}}}],["orderby(\"user_collaborations.updated_at",{"_index":4449,"title":{},"body":{"injectables/UserCollaborationService.html":{}}}],["orderby(\"user_highlights.updated_at",{"_index":4775,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["orderby(\"user_lists.updated_at",{"_index":5133,"title":{},"body":{"injectables/UserListService.html":{}}}],["orderby(\"user_notifications.notified_at",{"_index":5294,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["orderby(\"user_organizations.created_at",{"_index":5330,"title":{},"body":{"injectables/UserOrganizationService.html":{}}}],["orderby(\"users.name",{"_index":2975,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["orderby(`\"repo\".\"is_fork",{"_index":3768,"title":{},"body":{"injectables/RepoService.html":{}}}],["orderdirection",{"_index":1088,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/ContributorPullRequestsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/UserListMostActiveContributorsDto.html":{},"classes/UserRepoOptionsDto.html":{}}}],["orderdirectionenum",{"_index":1103,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"classes/ContributorPullRequestsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"classes/UserListMostActiveContributorsDto.html":{},"classes/UserRepoOptionsDto.html":{},"miscellaneous/enumerations.html":{}}}],["orderdirectionenum.asc",{"_index":3769,"title":{},"body":{"injectables/RepoService.html":{}}}],["orderdirectionenum.desc",{"_index":1104,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"classes/ContributorPullRequestsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"classes/UserListMostActiveContributorsDto.html":{},"classes/UserRepoOptionsDto.html":{}}}],["orderfield",{"_index":1152,"title":{},"body":{"injectables/ContributionService.html":{},"injectables/RepoService.html":{}}}],["org",{"_index":1720,"title":{},"body":{"entities/DbContributionsProjects.html":{},"controllers/EndorsementController.html":{}}}],["org/repo",{"_index":1718,"title":{},"body":{"entities/DbContributionsProjects.html":{}}}],["org_id",{"_index":187,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"entities/DbContributionsProjects.html":{},"injectables/UserListStatsService.html":{}}}],["organization",{"_index":2399,"title":{},"body":{"entities/DbUserOrganization.html":{}}}],["organization.entity",{"_index":416,"title":{},"body":{"modules/AppModule.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserOrganizationService.html":{}}}],["organization.entity.ts",{"_index":2394,"title":{},"body":{"entities/DbUserOrganization.html":{}}}],["organization.entity.ts:26",{"_index":2400,"title":{},"body":{"entities/DbUserOrganization.html":{}}}],["organization.entity.ts:34",{"_index":2405,"title":{},"body":{"entities/DbUserOrganization.html":{}}}],["organization.entity.ts:42",{"_index":2401,"title":{},"body":{"entities/DbUserOrganization.html":{}}}],["organization.entity.ts:52",{"_index":2397,"title":{},"body":{"entities/DbUserOrganization.html":{}}}],["organization.entity.ts:59",{"_index":2398,"title":{},"body":{"entities/DbUserOrganization.html":{}}}],["organization.entity.ts:67",{"_index":2404,"title":{},"body":{"entities/DbUserOrganization.html":{}}}],["organization.entity.ts:75",{"_index":2403,"title":{},"body":{"entities/DbUserOrganization.html":{}}}],["organization.service",{"_index":4504,"title":{},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{}}}],["organization.service.ts",{"_index":5320,"title":{},"body":{"injectables/UserOrganizationService.html":{}}}],["organization.service.ts:11",{"_index":5322,"title":{},"body":{"injectables/UserOrganizationService.html":{}}}],["organization.service.ts:17",{"_index":5324,"title":{},"body":{"injectables/UserOrganizationService.html":{}}}],["organization.service.ts:23",{"_index":5325,"title":{},"body":{"injectables/UserOrganizationService.html":{}}}],["organization_id",{"_index":2395,"title":{},"body":{"entities/DbUserOrganization.html":{}}}],["organization_user",{"_index":2396,"title":{},"body":{"entities/DbUserOrganization.html":{},"injectables/UserOrganizationService.html":{}}}],["orgs",{"_index":4466,"title":{},"body":{"controllers/UserController.html":{},"controllers/UserRecommendationController.html":{}}}],["orgs'})@apibearerauth()@apipaginatedresponse(dbrepo)@apiokresponse({type",{"_index":5338,"title":{},"body":{"controllers/UserRecommendationController.html":{}}}],["origin",{"_index":1686,"title":{},"body":{"entities/DbContribution.html":{}}}],["originalurl",{"_index":2876,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{}}}],["orwhere",{"_index":3066,"title":{},"body":{"injectables/InsightsService.html":{}}}],["orwhere(\"lower(users.login",{"_index":2604,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["os.${string(config.get(\"api.codename\")).tolowercase",{"_index":491,"title":{},"body":{"modules/AppModule.html":{}}}],["otherwise",{"_index":5689,"title":{},"body":{"license.html":{}}}],["out",{"_index":250,"title":{},"body":{"modules/ApiServicesModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/BlogSummaryModule.html":{},"modules/ContributionModule.html":{},"modules/ContributorModule.html":{},"modules/CouponModule.html":{},"modules/CustomerModule.html":{},"modules/EmojiModule.html":{},"modules/EndorsementModule.html":{},"modules/HighlightModule.html":{},"modules/InsightsModule.html":{},"modules/IssueSummaryModule.html":{},"modules/LogModule.html":{},"modules/OpenAiModule.html":{},"modules/PizzaOvenModule.html":{},"modules/PullRequestModule.html":{},"modules/RepoFilterModule.html":{},"modules/RepoModule.html":{},"modules/StarModule.html":{},"modules/StargazeModule.html":{},"modules/StripeModule.html":{},"modules/StripeSubscriptionModule.html":{},"modules/StripeWebHookModule.html":{},"modules/SubmitModule.html":{},"modules/TierModule.html":{},"modules/TimescaleModule.html":{},"modules/UserListModule.html":{},"modules/UserModule.html":{},"modules/UserReposModule.html":{},"modules/VoteModule.html":{},"index.html":{},"license.html":{},"overview.html":{}}}],["outside",{"_index":953,"title":{},"body":{"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{}}}],["oven",{"_index":3014,"title":{},"body":{"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"controllers/PizzaOvenController.html":{}}}],["oven.controller",{"_index":3251,"title":{},"body":{"modules/PizzaOvenModule.html":{}}}],["oven.controller.ts",{"_index":3168,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["oven.controller.ts:103",{"_index":3186,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["oven.controller.ts:115",{"_index":3200,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["oven.controller.ts:130",{"_index":3204,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["oven.controller.ts:41",{"_index":3209,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["oven.controller.ts:57",{"_index":3179,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["oven.controller.ts:68",{"_index":3189,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["oven.controller.ts:80",{"_index":3183,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["oven.controller.ts:91",{"_index":3195,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["oven.module",{"_index":428,"title":{},"body":{"modules/AppModule.html":{},"modules/InsightsModule.html":{}}}],["oven.module.ts",{"_index":3250,"title":{},"body":{"modules/PizzaOvenModule.html":{}}}],["oven.service",{"_index":3000,"title":{},"body":{"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"controllers/PizzaOvenController.html":{},"modules/PizzaOvenModule.html":{}}}],["oven.service.ts",{"_index":3253,"title":{},"body":{"injectables/PizzaOvenService.html":{}}}],["oven.service.ts:15",{"_index":3257,"title":{},"body":{"injectables/PizzaOvenService.html":{}}}],["oven.service.ts:24",{"_index":3259,"title":{},"body":{"injectables/PizzaOvenService.html":{}}}],["oven.service.ts:30",{"_index":3264,"title":{},"body":{"injectables/PizzaOvenService.html":{}}}],["oven.service.ts:42",{"_index":3262,"title":{},"body":{"injectables/PizzaOvenService.html":{}}}],["oven.service.ts:56",{"_index":3261,"title":{},"body":{"injectables/PizzaOvenService.html":{}}}],["over",{"_index":2648,"title":{},"body":{"classes/FilterListContributorsDto.html":{},"controllers/PullRequestController.html":{},"injectables/PullRequestGithubEventsService.html":{},"miscellaneous/variables.html":{}}}],["overview",{"_index":5698,"title":{"overview.html":{}},"body":{"overview.html":{},"miscellaneous/variables.html":{}}}],["overviews",{"_index":5631,"title":{},"body":{"index.html":{}}}],["owner",{"_index":2501,"title":{},"body":{"controllers/EndorsementController.html":{},"injectables/EndorsementService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{}}}],["owneroruser",{"_index":2602,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["owner}/${repo",{"_index":3762,"title":{},"body":{"injectables/RepoService.html":{}}}],["owner}/${repo}`.tolowercase",{"_index":2605,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["p",{"_index":5520,"title":{},"body":{"index.html":{}}}],["package",{"_index":5703,"title":{"properties.html":{}},"body":{}}],["package.json",{"_index":5603,"title":{},"body":{"index.html":{}}}],["page",{"_index":1058,"title":{},"body":{"classes/ContributionPageMetaDto.html":{},"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"classes/ContributorPullRequestsDto.html":{},"classes/CreateInsightDto.html":{},"entities/DbInsight.html":{},"classes/FilterListContributorsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/FilteredUsersDto.html":{},"classes/HighlightOptionsDto.html":{},"controllers/InsightController.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"injectables/InsightsService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaParameters.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"controllers/PullRequestController.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"classes/TopUsersDto.html":{},"classes/UpdateInsightDto.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"classes/UserListMostActiveContributorsDto.html":{},"classes/UserRepoOptionsDto.html":{},"miscellaneous/enumerations.html":{}}}],["page.dto",{"_index":53,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["page.dto.ts",{"_index":1186,"title":{},"body":{"classes/ContributionsPageDto.html":{}}}],["page.dto.ts:11",{"_index":1193,"title":{},"body":{"classes/ContributionsPageDto.html":{}}}],["page.dto.ts:16",{"_index":1189,"title":{},"body":{"classes/ContributionsPageDto.html":{}}}],["pagecount",{"_index":1059,"title":{},"body":{"classes/ContributionPageMetaDto.html":{},"classes/PageMetaDto.html":{}}}],["pagedto",{"_index":25,"title":{"classes/PageDto.html":{}},"body":{"interfaces/AllContributionsCount.html":{},"injectables/CommitAuthorsService.html":{},"injectables/CommitsService.html":{},"injectables/ContributionService.html":{},"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"injectables/EmojiService.html":{},"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightsService.html":{},"classes/PageDto.html":{},"injectables/PagerService.html":{},"interfaces/PaginationInput.html":{},"controllers/PizzaOvenController.html":{},"injectables/PizzaOvenService.html":{},"controllers/PullRequestController.html":{},"injectables/PullRequestGithubEventsService.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"injectables/UserListService.html":{},"controllers/UserListStatsController.html":{},"injectables/UserListStatsService.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"injectables/UserOrganizationService.html":{},"injectables/UserReposService.html":{}}}],["pagedto(entities",{"_index":1162,"title":{},"body":{"injectables/ContributionService.html":{},"injectables/EmojiService.html":{},"injectables/InsightsService.html":{},"injectables/PagerService.html":{},"interfaces/PaginationInput.html":{},"injectables/PullRequestGithubEventsService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserNotificationService.html":{},"injectables/UserOrganizationService.html":{}}}],["pagees",{"_index":4213,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["pagemeta.dto",{"_index":51,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["pagemeta.dto.ts",{"_index":1053,"title":{},"body":{"classes/ContributionPageMetaDto.html":{}}}],["pagemeta.dto.ts:11",{"_index":1062,"title":{},"body":{"classes/ContributionPageMetaDto.html":{}}}],["pagemetadto",{"_index":124,"title":{"classes/PageMetaDto.html":{}},"body":{"interfaces/AllContributionsCount.html":{},"classes/ContributionPageMetaDto.html":{},"injectables/ContributionService.html":{},"classes/ContributionsPageDto.html":{},"injectables/EmojiService.html":{},"injectables/InsightsService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"injectables/PagerService.html":{},"interfaces/PaginationInput.html":{},"injectables/PullRequestGithubEventsService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserListService.html":{},"injectables/UserListStatsService.html":{},"injectables/UserNotificationService.html":{},"injectables/UserOrganizationService.html":{}}}],["pagemetadto:10",{"_index":1076,"title":{},"body":{"classes/ContributionPageMetaDto.html":{}}}],["pagemetadto:17",{"_index":1074,"title":{},"body":{"classes/ContributionPageMetaDto.html":{}}}],["pagemetadto:24",{"_index":1072,"title":{},"body":{"classes/ContributionPageMetaDto.html":{}}}],["pagemetadto:31",{"_index":1078,"title":{},"body":{"classes/ContributionPageMetaDto.html":{}}}],["pagemetadto:37",{"_index":1069,"title":{},"body":{"classes/ContributionPageMetaDto.html":{}}}],["pagemetadto:43",{"_index":1067,"title":{},"body":{"classes/ContributionPageMetaDto.html":{}}}],["pagemetadto})@validatenested()@type(undefined",{"_index":1195,"title":{},"body":{"classes/ContributionsPageDto.html":{},"classes/PageDto.html":{}}}],["pagemetaparameters",{"_index":1061,"title":{"interfaces/PageMetaParameters.html":{}},"body":{"classes/ContributionPageMetaDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaParameters.html":{}}}],["pageoptionsdto",{"_index":119,"title":{"classes/PageOptionsDto.html":{}},"body":{"interfaces/AllContributionsCount.html":{},"injectables/CommitAuthorsService.html":{},"injectables/CommitsService.html":{},"classes/ContributionPageMetaDto.html":{},"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"classes/ContributorPullRequestsDto.html":{},"classes/DbUserHighlightReactionResponse.html":{},"controllers/EmojiController.html":{},"injectables/EmojiService.html":{},"controllers/EndorsementController.html":{},"injectables/EndorsementService.html":{},"classes/FilterOptionsDto.html":{},"controllers/HighlightController.html":{},"classes/HighlightOptionsDto.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"injectables/InsightsService.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaParameters.html":{},"classes/PageOptionsDto.html":{},"injectables/PagerService.html":{},"interfaces/PaginationInput.html":{},"controllers/PizzaOvenController.html":{},"injectables/PizzaOvenService.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"controllers/PullRequestController.html":{},"injectables/PullRequestGithubEventsService.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"classes/UserListMostActiveContributorsDto.html":{},"injectables/UserListService.html":{},"controllers/UserListStatsController.html":{},"injectables/UserListStatsService.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"injectables/UserOrganizationService.html":{},"controllers/UserRecommendationController.html":{},"classes/UserRepoOptionsDto.html":{},"injectables/UserReposService.html":{}}}],["pageoptionsdto.contributor",{"_index":5156,"title":{},"body":{"injectables/UserListService.html":{}}}],["pageoptionsdto.contributor.tolowercase",{"_index":5158,"title":{},"body":{"injectables/UserListService.html":{}}}],["pageoptionsdto.contributortype",{"_index":107,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["pageoptionsdto.limit",{"_index":3140,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["pageoptionsdto.orderby",{"_index":1153,"title":{},"body":{"injectables/ContributionService.html":{},"injectables/RepoService.html":{}}}],["pageoptionsdto.orderdirection",{"_index":1156,"title":{},"body":{"injectables/ContributionService.html":{},"injectables/PullRequestGithubEventsService.html":{},"injectables/RepoService.html":{},"injectables/UserListService.html":{}}}],["pageoptionsdto.page",{"_index":3139,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["pageoptionsdto.range",{"_index":101,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/PullRequestGithubEventsService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserListService.html":{},"injectables/UserListStatsService.html":{}}}],["pageoptionsdto.rangetype",{"_index":3529,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["pageoptionsdto.repo",{"_index":3774,"title":{},"body":{"injectables/RepoService.html":{},"injectables/UserHighlightsService.html":{}}}],["pageoptionsdto.repoids",{"_index":3773,"title":{},"body":{"injectables/RepoService.html":{}}}],["pageoptionsdto.repoids?.split",{"_index":3543,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["pageoptionsdto.topic",{"_index":3531,"title":{},"body":{"injectables/PullRequestService.html":{},"injectables/RepoService.html":{}}}],["pageoptionsdto:17",{"_index":1108,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/ContributorPullRequestsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/UserListMostActiveContributorsDto.html":{},"classes/UserRepoOptionsDto.html":{}}}],["pageoptionsdto:24",{"_index":3277,"title":{},"body":{"classes/PullRequestContributorInsightsDto.html":{}}}],["pageoptionsdto:30",{"_index":1102,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/ContributorPullRequestsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/UserListMostActiveContributorsDto.html":{},"classes/UserRepoOptionsDto.html":{}}}],["pageoptionsdto:35",{"_index":1106,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/ContributorPullRequestsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/UserListMostActiveContributorsDto.html":{},"classes/UserRepoOptionsDto.html":{}}}],["pageoptionsdto:46",{"_index":1116,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/ContributorPullRequestsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/UserListMostActiveContributorsDto.html":{},"classes/UserRepoOptionsDto.html":{}}}],["pageoptionsdto:57",{"_index":1114,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/ContributorPullRequestsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/UserListMostActiveContributorsDto.html":{},"classes/UserRepoOptionsDto.html":{}}}],["pager.service",{"_index":255,"title":{},"body":{"modules/ApiServicesModule.html":{}}}],["pagerservice",{"_index":247,"title":{"injectables/PagerService.html":{}},"body":{"modules/ApiServicesModule.html":{},"injectables/CommitAuthorsService.html":{},"injectables/CommitsService.html":{},"injectables/EndorsementService.html":{},"injectables/InsightMemberService.html":{},"injectables/PagerService.html":{},"interfaces/PaginationInput.html":{},"injectables/PizzaOvenService.html":{},"injectables/UserCollaborationService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserListService.html":{},"injectables/UserReposService.html":{},"overview.html":{}}}],["pages",{"_index":1077,"title":{},"body":{"classes/ContributionPageMetaDto.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"classes/PageMetaDto.html":{}}}],["paginate",{"_index":4462,"title":{},"body":{"controllers/UserController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["paginated",{"_index":1231,"title":{},"body":{"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"controllers/EmojiController.html":{},"controllers/EndorsementController.html":{},"controllers/HighlightController.html":{},"controllers/PizzaOvenController.html":{},"controllers/PullRequestController.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"controllers/UserListStatsController.html":{},"controllers/UserRecommendationController.html":{},"miscellaneous/variables.html":{}}}],["paginates",{"_index":1224,"title":{},"body":{"controllers/ContributorController.html":{},"controllers/EmojiController.html":{},"controllers/EndorsementController.html":{},"controllers/HighlightController.html":{},"controllers/PizzaOvenController.html":{},"controllers/PullRequestController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserEndorsementController.html":{}}}],["paginating",{"_index":3565,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["pagination",{"_index":5960,"title":{},"body":{"miscellaneous/variables.html":{}}}],["paginationinput",{"_index":3158,"title":{"interfaces/PaginationInput.html":{}},"body":{"injectables/PagerService.html":{},"interfaces/PaginationInput.html":{}}}],["pair",{"_index":5490,"title":{},"body":{"index.html":{}}}],["param",{"_index":2516,"title":{},"body":{"controllers/EndorsementController.html":{},"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"controllers/PizzaOvenController.html":{},"controllers/PullRequestController.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"injectables/RepoFilterService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserController.html":{},"controllers/UserFollowingController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"controllers/UserListStatsController.html":{}}}],["param(\"emojiid",{"_index":4714,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["param(\"id",{"_index":2840,"title":{},"body":{"controllers/HighlightController.html":{},"controllers/PizzaOvenController.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"controllers/UserListStatsController.html":{}}}],["param(\"login",{"_index":3603,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["param(\"memberid",{"_index":4884,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["param(\"owner",{"_index":2538,"title":{},"body":{"controllers/EndorsementController.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{}}}],["param(\"repo",{"_index":2539,"title":{},"body":{"controllers/EndorsementController.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{}}}],["param(\"repoowneroruser",{"_index":2535,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["param(\"userlistcontributorid",{"_index":5054,"title":{},"body":{"controllers/UserListController.html":{}}}],["param(\"username",{"_index":2549,"title":{},"body":{"controllers/EndorsementController.html":{},"controllers/UserController.html":{},"controllers/UserFollowsController.html":{}}}],["parameters",{"_index":294,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"controllers/BlogSummaryController.html":{},"injectables/BlogSummaryService.html":{},"controllers/CodeExplanationController.html":{},"injectables/CodeExplanationService.html":{},"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"controllers/CodeTestSuggestionController.html":{},"injectables/CodeTestSuggestionService.html":{},"injectables/CommitAuthorsService.html":{},"injectables/CommitsService.html":{},"classes/ContributionPageMetaDto.html":{},"injectables/ContributionService.html":{},"classes/ContributionsPageDto.html":{},"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"injectables/CouponService.html":{},"injectables/CustomLogger.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"controllers/EmojiController.html":{},"injectables/EmojiService.html":{},"controllers/EndorsementController.html":{},"injectables/EndorsementService.html":{},"guards/EndorsementTokenGuard.html":{},"controllers/HighlightController.html":{},"injectables/HttpLoggerMiddleware.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"controllers/IssueSummaryController.html":{},"injectables/IssueSummaryService.html":{},"injectables/LogService.html":{},"injectables/OpenAiService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"injectables/PagerService.html":{},"controllers/PizzaOvenController.html":{},"injectables/PizzaOvenService.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestGithubEventsService.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestReviewService.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"injectables/RepoFilterService.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeService.html":{},"injectables/StripeSubscriptionService.html":{},"controllers/StripeWebhookController.html":{},"injectables/SubmitService.html":{},"injectables/SupabaseStrategy.html":{},"injectables/TierService.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowingController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"injectables/UserListService.html":{},"controllers/UserListStatsController.html":{},"injectables/UserListStatsService.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"injectables/UserOrganizationService.html":{},"controllers/UserRecommendationController.html":{},"injectables/UserReposService.html":{},"injectables/VoteService.html":{}}}],["parameters.dto",{"_index":1080,"title":{},"body":{"classes/ContributionPageMetaDto.html":{},"classes/PageMetaDto.html":{}}}],["parameters.dto.ts",{"_index":3146,"title":{},"body":{"interfaces/PageMetaParameters.html":{}}}],["parseint(`${countqueryresult?.count",{"_index":3541,"title":{},"body":{"injectables/PullRequestService.html":{},"injectables/RepoService.html":{},"injectables/UserHighlightsService.html":{}}}],["parseint(`${ctecounterresult?.count",{"_index":3379,"title":{},"body":{"injectables/PullRequestGithubEventsService.html":{}}}],["parseint(`${uuid",{"_index":4110,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["parseint(request.user?.user_metadata.sub",{"_index":6023,"title":{},"body":{"miscellaneous/variables.html":{}}}],["parseint8",{"_index":446,"title":{},"body":{"modules/AppModule.html":{}}}],["parseintpipe",{"_index":2823,"title":{},"body":{"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"controllers/PizzaOvenController.html":{},"controllers/PullRequestController.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["partial",{"_index":673,"title":{},"body":{"controllers/AuthController.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightsService.html":{},"injectables/StripeSubscriptionService.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"injectables/UserListService.html":{},"injectables/UserNotificationService.html":{}}}],["partialtype",{"_index":4314,"title":{},"body":{"classes/UpdateEndorsementDto.html":{}}}],["partialtype(createendorsementdto",{"_index":4315,"title":{},"body":{"classes/UpdateEndorsementDto.html":{}}}],["particular",{"_index":5678,"title":{},"body":{"license.html":{}}}],["partition",{"_index":3373,"title":{},"body":{"injectables/PullRequestGithubEventsService.html":{}}}],["passed",{"_index":3339,"title":{},"body":{"injectables/PullRequestDescriptionService.html":{}}}],["passport",{"_index":4254,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["passportmodule",{"_index":747,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportstrategy",{"_index":4252,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["passportstrategy(supabaseauthstrategy",{"_index":4257,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["password",{"_index":455,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["past",{"_index":1110,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/ContributorPullRequestsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"injectables/IssueSummaryService.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"injectables/PullRequestInsightsService.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/UserListMostActiveContributorsDto.html":{},"classes/UserRepoOptionsDto.html":{}}}],["patch",{"_index":622,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{}}}],["patch(\"/:id",{"_index":4700,"title":{},"body":{"controllers/UserHighlightsController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{}}}],["patch(\"/profile",{"_index":723,"title":{},"body":{"controllers/AuthController.html":{}}}],["patch(\"/profile/coupon",{"_index":731,"title":{},"body":{"controllers/AuthController.html":{}}}],["patch(\"/profile/email",{"_index":729,"title":{},"body":{"controllers/AuthController.html":{}}}],["patch(\"/profile/interests",{"_index":726,"title":{},"body":{"controllers/AuthController.html":{}}}],["patch(\":id/members/:memberid",{"_index":4883,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["patch('/:id')@apioperation({operationid",{"_index":4687,"title":{},"body":{"controllers/UserHighlightsController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{}}}],["patch('/profile')@apioperation({operationid",{"_index":617,"title":{},"body":{"controllers/AuthController.html":{}}}],["patch('/profile/coupon')@apioperation({operationid",{"_index":555,"title":{},"body":{"controllers/AuthController.html":{}}}],["patch('/profile/email')@apioperation({operationid",{"_index":606,"title":{},"body":{"controllers/AuthController.html":{}}}],["patch('/profile/interests')@apioperation({operationid",{"_index":613,"title":{},"body":{"controllers/AuthController.html":{}}}],["patch(':id')@apioperation({operationid",{"_index":4403,"title":{},"body":{"controllers/UserCollaborationController.html":{}}}],["patch(':id/members/:memberid')@apioperation({operationid",{"_index":4855,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["patch\\`](https://developer.mozilla.org/en",{"_index":5981,"title":{},"body":{"miscellaneous/variables.html":{}}}],["path",{"_index":513,"title":{},"body":{"modules/AppModule.html":{},"controllers/HealthController.html":{},"index.html":{}}}],["payment_method_types",{"_index":4047,"title":{},"body":{"injectables/StripeService.html":{}}}],["pending",{"_index":1837,"title":{},"body":{"entities/DbInsightMember.html":{},"entities/DbUserCollaboration.html":{},"injectables/InsightsService.html":{},"classes/UpdateInsightMemberDto.html":{},"controllers/UserInsightMemberController.html":{}}}],["pending'})@column({type",{"_index":1836,"title":{},"body":{"entities/DbInsightMember.html":{},"entities/DbUserCollaboration.html":{}}}],["per",{"_index":1073,"title":{},"body":{"classes/ContributionPageMetaDto.html":{},"classes/PageMetaDto.html":{},"miscellaneous/variables.html":{}}}],["perceived",{"_index":5991,"title":{},"body":{"miscellaneous/variables.html":{}}}],["perform",{"_index":5942,"title":{},"body":{"miscellaneous/variables.html":{}}}],["period",{"_index":2180,"title":{},"body":{"entities/DbSubscription.html":{}}}],["permission",{"_index":5644,"title":{},"body":{"license.html":{}}}],["permit",{"_index":5660,"title":{},"body":{"license.html":{}}}],["person",{"_index":829,"title":{},"body":{"injectables/BlogSummaryService.html":{},"license.html":{}}}],["persons",{"_index":5661,"title":{},"body":{"license.html":{}}}],["persuasive",{"_index":1347,"title":{},"body":{"classes/CreateBlogSummaryDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{}}}],["phone",{"_index":4295,"title":{},"body":{"injectables/TierService.html":{}}}],["picktype",{"_index":2308,"title":{},"body":{"classes/DbUserHighlightReactionResponse.html":{},"classes/HighlightOptionsDto.html":{}}}],["picktype(dbuserhighlightreaction",{"_index":2312,"title":{},"body":{"classes/DbUserHighlightReactionResponse.html":{},"classes/HighlightOptionsDto.html":{}}}],["picture",{"_index":3368,"title":{},"body":{"injectables/PullRequestGithubEventsService.html":{}}}],["pid,hostname,context",{"_index":506,"title":{},"body":{"modules/AppModule.html":{}}}],["pinned",{"_index":2238,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["pino",{"_index":312,"title":{},"body":{"modules/AppModule.html":{}}}],["pinohttp",{"_index":490,"title":{},"body":{"modules/AppModule.html":{}}}],["pizza",{"_index":763,"title":{},"body":{"classes/BakeRepoDto.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"controllers/PizzaOvenController.html":{},"modules/PizzaOvenModule.html":{},"classes/UpdateUserDto.html":{},"index.html":{}}}],["pizza'})@isstring()@isoptional",{"_index":4334,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["pizza/dtos/baked",{"_index":3001,"title":{},"body":{"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{}}}],["pizza/entities/baked",{"_index":348,"title":{},"body":{"modules/AppModule.html":{}}}],["pizza/entities/commit_authors.entity",{"_index":351,"title":{},"body":{"modules/AppModule.html":{}}}],["pizza/entities/commits.entity",{"_index":353,"title":{},"body":{"modules/AppModule.html":{}}}],["pizza/pizza",{"_index":427,"title":{},"body":{"modules/AppModule.html":{},"injectables/InsightRepoService.html":{},"modules/InsightsModule.html":{},"injectables/InsightsService.html":{}}}],["pizza_oven_api=80",{"_index":5615,"title":{},"body":{"index.html":{}}}],["pizza_oven_host=\"http://example.com",{"_index":5614,"title":{},"body":{"index.html":{}}}],["pizzaconfig",{"_index":326,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["pizzaovencontroller",{"_index":3166,"title":{"controllers/PizzaOvenController.html":{}},"body":{"controllers/PizzaOvenController.html":{},"modules/PizzaOvenModule.html":{}}}],["pizzaovenmodule",{"_index":273,"title":{"modules/PizzaOvenModule.html":{}},"body":{"modules/AppModule.html":{},"modules/InsightsModule.html":{},"modules/PizzaOvenModule.html":{},"modules.html":{},"overview.html":{}}}],["pizzaovenservice",{"_index":2993,"title":{"injectables/PizzaOvenService.html":{}},"body":{"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"controllers/PizzaOvenController.html":{},"modules/PizzaOvenModule.html":{},"injectables/PizzaOvenService.html":{},"overview.html":{}}}],["plan",{"_index":4291,"title":{},"body":{"injectables/TierService.html":{}}}],["plan:free@1",{"_index":6013,"title":{},"body":{"miscellaneous/variables.html":{}}}],["platform",{"_index":5927,"title":{},"body":{"miscellaneous/variables.html":{}}}],["please",{"_index":5622,"title":{},"body":{"index.html":{}}}],["port",{"_index":451,"title":{},"body":{"modules/AppModule.html":{},"injectables/PizzaOvenService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["portions",{"_index":5670,"title":{},"body":{"license.html":{}}}],["portuguese",{"_index":1335,"title":{},"body":{"classes/CreateBlogSummaryDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{}}}],["post",{"_index":623,"title":{},"body":{"controllers/AuthController.html":{},"controllers/BlogSummaryController.html":{},"interfaces/ChatResponse.html":{},"controllers/CodeExplanationController.html":{},"controllers/CodeRefactorSuggestionController.html":{},"controllers/CodeTestSuggestionController.html":{},"controllers/EndorsementController.html":{},"controllers/HighlightController.html":{},"controllers/IssueSummaryController.html":{},"injectables/OpenAiService.html":{},"controllers/PizzaOvenController.html":{},"controllers/PullRequestDescriptionController.html":{},"controllers/StripeWebhookController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{}}}],["post(\"/:id/contributors",{"_index":5048,"title":{},"body":{"controllers/UserListController.html":{}}}],["post(\"/:id/featured",{"_index":2839,"title":{},"body":{"controllers/HighlightController.html":{}}}],["post(\"/:id/reactions/:emojiid",{"_index":4713,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["post(\"/checkout/session",{"_index":710,"title":{},"body":{"controllers/AuthController.html":{}}}],["post(\"/description/generate",{"_index":3331,"title":{},"body":{"controllers/PullRequestDescriptionController.html":{}}}],["post(\"/explanation/generate",{"_index":911,"title":{},"body":{"controllers/CodeExplanationController.html":{}}}],["post(\"/onboarding",{"_index":700,"title":{},"body":{"controllers/AuthController.html":{}}}],["post(\"/suggestion/generate",{"_index":937,"title":{},"body":{"controllers/CodeRefactorSuggestionController.html":{}}}],["post(\"/summary/generate",{"_index":799,"title":{},"body":{"controllers/BlogSummaryController.html":{},"controllers/IssueSummaryController.html":{}}}],["post(\"/test/generate",{"_index":963,"title":{},"body":{"controllers/CodeTestSuggestionController.html":{}}}],["post(\"/waitlist",{"_index":707,"title":{},"body":{"controllers/AuthController.html":{}}}],["post(\"/webhooks",{"_index":4142,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["post(\":id/members",{"_index":4871,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["post('/')@apioperation({operationid",{"_index":3206,"title":{},"body":{"controllers/PizzaOvenController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{}}}],["post('/')@useguards(endorsementtokenguard)@apioperation({operationid",{"_index":2481,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["post('/:id/contributors')@apioperation({operationid",{"_index":5005,"title":{},"body":{"controllers/UserListController.html":{}}}],["post('/:id/featured')@apioperation({operationid",{"_index":2790,"title":{},"body":{"controllers/HighlightController.html":{}}}],["post('/:id/reactions/:emojiid')@apioperation({operationid",{"_index":4655,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["post('/checkout/session')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":583,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('/description/generate')@apioperation({operationid",{"_index":3325,"title":{},"body":{"controllers/PullRequestDescriptionController.html":{}}}],["post('/explanation/generate')@apioperation({operationid",{"_index":899,"title":{},"body":{"controllers/CodeExplanationController.html":{}}}],["post('/onboarding')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":593,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('/suggestion/generate')@apioperation({operationid",{"_index":930,"title":{},"body":{"controllers/CodeRefactorSuggestionController.html":{}}}],["post('/summary/generate')@apioperation({operationid",{"_index":777,"title":{},"body":{"controllers/BlogSummaryController.html":{},"controllers/IssueSummaryController.html":{}}}],["post('/test/generate')@apioperation({operationid",{"_index":958,"title":{},"body":{"controllers/CodeTestSuggestionController.html":{}}}],["post('/waitlist')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":600,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('/webhooks')@apiokresponse",{"_index":4091,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["post(':id/members')@apioperation({operationid",{"_index":4839,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["post\\`](https://developer.mozilla.org/en",{"_index":5977,"title":{},"body":{"miscellaneous/variables.html":{}}}],["postcreatecheckoutsession",{"_index":548,"title":{},"body":{"controllers/AuthController.html":{}}}],["postcreatecheckoutsession(@user",{"_index":711,"title":{},"body":{"controllers/AuthController.html":{}}}],["postcreatecheckoutsession(user",{"_index":582,"title":{},"body":{"controllers/AuthController.html":{}}}],["postgres",{"_index":5512,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["postgresql",{"_index":5458,"title":{},"body":{"index.html":{}}}],["posting",{"_index":3013,"title":{},"body":{"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{}}}],["postonboarding",{"_index":549,"title":{},"body":{"controllers/AuthController.html":{}}}],["postonboarding(@userid",{"_index":701,"title":{},"body":{"controllers/AuthController.html":{}}}],["postonboarding(userid",{"_index":590,"title":{},"body":{"controllers/AuthController.html":{}}}],["posttopizzaovenservice",{"_index":3174,"title":{},"body":{"controllers/PizzaOvenController.html":{},"injectables/PizzaOvenService.html":{}}}],["posttopizzaovenservice'})@apiacceptedresponse()@apibadrequestresponse({description",{"_index":3208,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["posttopizzaovenservice(@body",{"_index":3219,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["posttopizzaovenservice(bakeoptionsinfo",{"_index":3205,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["posttopizzaovenservice(bakerepoinfo",{"_index":3263,"title":{},"body":{"injectables/PizzaOvenService.html":{}}}],["postuserlistcontributors",{"_index":4954,"title":{},"body":{"controllers/UserListController.html":{}}}],["postuserlistcontributors(updatecollaboratorsdto",{"_index":5004,"title":{},"body":{"controllers/UserListController.html":{}}}],["postwaitlist",{"_index":550,"title":{},"body":{"controllers/AuthController.html":{}}}],["postwaitlist(@userid",{"_index":708,"title":{},"body":{"controllers/AuthController.html":{}}}],["postwaitlist(userid",{"_index":599,"title":{},"body":{"controllers/AuthController.html":{}}}],["powered",{"_index":5706,"title":{},"body":{"properties.html":{}}}],["pr",{"_index":200,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"classes/CreateUserHighlightDto.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbPullRequestGitHubEvents.html":{},"entities/DbPullRequestReview.html":{},"entities/DbUserHighlight.html":{},"classes/FilterListContributorsDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestGithubEventsService.html":{},"injectables/UserListStatsService.html":{}}}],["pr!'})@column('text",{"_index":2261,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["pr!})@isoptional()@isstring",{"_index":1458,"title":{},"body":{"classes/CreateUserHighlightDto.html":{}}}],["pr\".\"repo_id\"=\"repos\".\"id",{"_index":3425,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["pr\".\"updated_at",{"_index":3416,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["pr.\"author_login",{"_index":218,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["pr.\"repo_id",{"_index":204,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["pr_additions",{"_index":2015,"title":{},"body":{"entities/DbPullRequestGitHubEvents.html":{}}}],["pr_author_login",{"_index":2016,"title":{},"body":{"entities/DbPullRequestGitHubEvents.html":{}}}],["pr_base_label",{"_index":2017,"title":{},"body":{"entities/DbPullRequestGitHubEvents.html":{}}}],["pr_base_ref",{"_index":2018,"title":{},"body":{"entities/DbPullRequestGitHubEvents.html":{}}}],["pr_changed_files",{"_index":2019,"title":{},"body":{"entities/DbPullRequestGitHubEvents.html":{}}}],["pr_closed_at",{"_index":2020,"title":{},"body":{"entities/DbPullRequestGitHubEvents.html":{}}}],["pr_comments",{"_index":2021,"title":{},"body":{"entities/DbPullRequestGitHubEvents.html":{}}}],["pr_commits",{"_index":2022,"title":{},"body":{"entities/DbPullRequestGitHubEvents.html":{}}}],["pr_created_at",{"_index":2023,"title":{},"body":{"entities/DbPullRequestGitHubEvents.html":{}}}],["pr_deletions",{"_index":2024,"title":{},"body":{"entities/DbPullRequestGitHubEvents.html":{}}}],["pr_head_label",{"_index":2025,"title":{},"body":{"entities/DbPullRequestGitHubEvents.html":{}}}],["pr_head_ref",{"_index":2026,"title":{},"body":{"entities/DbPullRequestGitHubEvents.html":{}}}],["pr_is_draft",{"_index":2027,"title":{},"body":{"entities/DbPullRequestGitHubEvents.html":{}}}],["pr_is_merged",{"_index":2028,"title":{},"body":{"entities/DbPullRequestGitHubEvents.html":{}}}],["pr_is_rebaseable",{"_index":2029,"title":{},"body":{"entities/DbPullRequestGitHubEvents.html":{}}}],["pr_mergeable_state",{"_index":2030,"title":{},"body":{"entities/DbPullRequestGitHubEvents.html":{}}}],["pr_merged_at",{"_index":2031,"title":{},"body":{"entities/DbPullRequestGitHubEvents.html":{}}}],["pr_number",{"_index":2032,"title":{},"body":{"entities/DbPullRequestGitHubEvents.html":{},"injectables/PullRequestGithubEventsService.html":{}}}],["pr_state",{"_index":2033,"title":{},"body":{"entities/DbPullRequestGitHubEvents.html":{}}}],["pr_title",{"_index":2034,"title":{},"body":{"entities/DbPullRequestGitHubEvents.html":{}}}],["pr_updated_at",{"_index":2035,"title":{},"body":{"entities/DbPullRequestGitHubEvents.html":{}}}],["pr_velocity",{"_index":2632,"title":{},"body":{"classes/FilterListContributorsDto.html":{}}}],["preferences",{"_index":608,"title":{},"body":{"controllers/AuthController.html":{}}}],["prefix",{"_index":543,"title":{},"body":{"controllers/AuthController.html":{},"controllers/BlogSummaryController.html":{},"controllers/CodeExplanationController.html":{},"controllers/CodeRefactorSuggestionController.html":{},"controllers/CodeTestSuggestionController.html":{},"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"controllers/EmojiController.html":{},"controllers/EndorsementController.html":{},"controllers/HealthController.html":{},"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"controllers/IssueSummaryController.html":{},"controllers/PizzaOvenController.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/StripeWebhookController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"controllers/UserFollowingController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"controllers/UserListStatsController.html":{},"controllers/UserNotificationController.html":{},"controllers/UserRecommendationController.html":{}}}],["prefs.dto",{"_index":640,"title":{},"body":{"controllers/AuthController.html":{}}}],["prefs.dto.ts",{"_index":4366,"title":{},"body":{"classes/UpdateUserEmailPreferencesDto.html":{}}}],["prefs.dto.ts:11",{"_index":4370,"title":{},"body":{"classes/UpdateUserEmailPreferencesDto.html":{}}}],["prefs.dto.ts:19",{"_index":4372,"title":{},"body":{"classes/UpdateUserEmailPreferencesDto.html":{}}}],["prefs.dto.ts:27",{"_index":4374,"title":{},"body":{"classes/UpdateUserEmailPreferencesDto.html":{}}}],["prerequisites",{"_index":5444,"title":{},"body":{"index.html":{}}}],["present",{"_index":3337,"title":{},"body":{"injectables/PullRequestDescriptionService.html":{}}}],["pretty",{"_index":496,"title":{},"body":{"modules/AppModule.html":{}}}],["prev_days_start_date",{"_index":1089,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"classes/ContributorPullRequestsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"controllers/RepoContributionsController.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/UserListMostActiveContributorsDto.html":{},"classes/UserRepoOptionsDto.html":{}}}],["prev_start_date",{"_index":5887,"title":{},"body":{"miscellaneous/variables.html":{}}}],["preview",{"_index":5572,"title":{},"body":{"index.html":{}}}],["previous",{"_index":1068,"title":{},"body":{"classes/ContributionPageMetaDto.html":{},"entities/DbContributorCategoryTimeframe.html":{},"classes/PageMetaDto.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{}}}],["previous_month",{"_index":3556,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["previous_month_prs",{"_index":231,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["previous_month_prs\".\"author_login",{"_index":232,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["previously",{"_index":5515,"title":{},"body":{"index.html":{}}}],["prevmonthquery",{"_index":3553,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["price",{"_index":2187,"title":{},"body":{"entities/DbSubscription.html":{},"injectables/StripeService.html":{}}}],["price_12345",{"_index":2202,"title":{},"body":{"entities/DbSubscription.html":{}}}],["price_12345'})@column({type",{"_index":2188,"title":{},"body":{"entities/DbSubscription.html":{}}}],["price_id",{"_index":2168,"title":{},"body":{"entities/DbSubscription.html":{},"controllers/StripeWebhookController.html":{}}}],["prid",{"_index":3477,"title":{},"body":{"injectables/PullRequestReviewService.html":{}}}],["primarycolumn",{"_index":1606,"title":{},"body":{"entities/DbBakedRepo.html":{},"entities/DbCommitAuthors.html":{},"entities/DbCommits.html":{},"entities/DbContribution.html":{},"entities/DbCoupon.html":{},"entities/DbCustomer.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbPullRequestGitHubEvents.html":{},"entities/DbPullRequestReview.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{}}}],["primarycolumn(\"bigint",{"_index":1614,"title":{},"body":{"entities/DbBakedRepo.html":{},"entities/DbCommitAuthors.html":{},"entities/DbCommits.html":{},"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{}}}],["primarycolumn(\"integer",{"_index":1997,"title":{},"body":{"entities/DbPullRequest.html":{},"entities/DbPullRequestGitHubEvents.html":{},"entities/DbPullRequestReview.html":{}}}],["primarycolumn(\"text",{"_index":2201,"title":{},"body":{"entities/DbSubscription.html":{}}}],["primarygeneratedcolumn",{"_index":1768,"title":{},"body":{"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{}}}],["primarygeneratedcolumn(\"uuid",{"_index":1873,"title":{},"body":{"entities/DbLog.html":{}}}],["primarygeneratedcolumn('uuid",{"_index":1868,"title":{},"body":{"entities/DbLog.html":{}}}],["prinsightrepository",{"_index":3389,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["private",{"_index":65,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/BlogSummaryService.html":{},"injectables/CodeExplanationService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"injectables/CommitAuthorsService.html":{},"injectables/CommitsService.html":{},"injectables/ContributionService.html":{},"injectables/CouponService.html":{},"injectables/CustomLogger.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"injectables/EmojiService.html":{},"controllers/EndorsementController.html":{},"injectables/EndorsementService.html":{},"controllers/HealthController.html":{},"injectables/HttpLoggerMiddleware.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"injectables/IssueSummaryService.html":{},"injectables/LogService.html":{},"controllers/PizzaOvenController.html":{},"injectables/PizzaOvenService.html":{},"controllers/PullRequestController.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestGithubEventsService.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestReviewService.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeService.html":{},"injectables/StripeSubscriptionService.html":{},"controllers/StripeWebhookController.html":{},"injectables/SubmitService.html":{},"injectables/TierService.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowingController.html":{},"controllers/UserFollowsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"injectables/UserListService.html":{},"injectables/UserListStatsService.html":{},"injectables/UserNotificationService.html":{},"injectables/UserOrganizationService.html":{},"controllers/UserRecommendationController.html":{},"injectables/UserReposService.html":{},"injectables/VoteService.html":{}}}],["proceed",{"_index":5625,"title":{},"body":{"index.html":{}}}],["process",{"_index":5988,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.ci",{"_index":5762,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.domain",{"_index":5836,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.node_env",{"_index":5756,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.stripe_webhook_secret",{"_index":5918,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.supabase_api_key",{"_index":4261,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["process.env.supabase_jwt_secret",{"_index":4264,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["process.env.supabase_url",{"_index":4259,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["product",{"_index":4373,"title":{},"body":{"classes/UpdateUserEmailPreferencesDto.html":{}}}],["production",{"_index":5575,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["profile",{"_index":618,"title":{},"body":{"controllers/AuthController.html":{},"classes/UpdateUserDto.html":{}}}],["profile'})@apibearerauth()@useguards(supabaseguard)@apiokresponse({type",{"_index":609,"title":{},"body":{"controllers/AuthController.html":{}}}],["profile'})@apibody({type",{"_index":563,"title":{},"body":{"controllers/AuthController.html":{}}}],["project",{"_index":1437,"title":{},"body":{"classes/CreateUserCollaborationDto.html":{},"entities/DbContributionsProjects.html":{},"entities/DbUserCollaboration.html":{},"controllers/UserListStatsController.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["project')@apioperation({operationid",{"_index":5175,"title":{},"body":{"controllers/UserListStatsController.html":{}}}],["project's",{"_index":5467,"title":{},"body":{"index.html":{}}}],["project'})@apibadrequestresponse({description",{"_index":5178,"title":{},"body":{"controllers/UserListStatsController.html":{}}}],["project'})@apiokresponse({type",{"_index":5196,"title":{},"body":{"controllers/UserListStatsController.html":{}}}],["project'})@isstring()@minlength(20)@maxlength(500",{"_index":1431,"title":{},"body":{"classes/CreateUserCollaborationDto.html":{}}}],["project.dto",{"_index":55,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"controllers/UserListStatsController.html":{},"injectables/UserListStatsService.html":{}}}],["project.dto.ts",{"_index":1180,"title":{},"body":{"classes/ContributionsByProjectDto.html":{}}}],["project.dto.ts:15",{"_index":1181,"title":{},"body":{"classes/ContributionsByProjectDto.html":{}}}],["project?'})@column({type",{"_index":2223,"title":{},"body":{"entities/DbUserCollaboration.html":{}}}],["project_id",{"_index":190,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"entities/DbContributionsProjects.html":{},"injectables/UserListStatsService.html":{}}}],["projects.dto",{"_index":58,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"controllers/UserListStatsController.html":{},"injectables/UserListStatsService.html":{}}}],["projects.dto.ts",{"_index":4304,"title":{},"body":{"classes/TopProjectsDto.html":{}}}],["projects.dto.ts:15",{"_index":4305,"title":{},"body":{"classes/TopProjectsDto.html":{}}}],["projects.dto.ts:24",{"_index":4307,"title":{},"body":{"classes/TopProjectsDto.html":{}}}],["projects.entity",{"_index":46,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"controllers/UserListStatsController.html":{},"injectables/UserListStatsService.html":{}}}],["projects.entity.ts",{"_index":1717,"title":{},"body":{"entities/DbContributionsProjects.html":{}}}],["projects.entity.ts:16",{"_index":1721,"title":{},"body":{"entities/DbContributionsProjects.html":{}}}],["projects.entity.ts:28",{"_index":1723,"title":{},"body":{"entities/DbContributionsProjects.html":{}}}],["projects.entity.ts:40",{"_index":1725,"title":{},"body":{"entities/DbContributionsProjects.html":{}}}],["projects.entity.ts:52",{"_index":1719,"title":{},"body":{"entities/DbContributionsProjects.html":{}}}],["promise",{"_index":77,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"controllers/AuthController.html":{},"injectables/CommitAuthorsService.html":{},"injectables/CommitsService.html":{},"injectables/ContributionService.html":{},"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightsService.html":{},"controllers/PizzaOvenController.html":{},"injectables/PizzaOvenService.html":{},"controllers/PullRequestController.html":{},"injectables/PullRequestGithubEventsService.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestReviewService.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/SubmitService.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowingController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"injectables/UserListService.html":{},"controllers/UserListStatsController.html":{},"injectables/UserListStatsService.html":{},"controllers/UserNotificationController.html":{},"injectables/UserReposService.html":{},"injectables/VoteService.html":{}}}],["promise.all",{"_index":3316,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["promise.all([querybuilder.getcount",{"_index":3165,"title":{},"body":{"injectables/PagerService.html":{},"interfaces/PaginationInput.html":{}}}],["promise.all(contributors",{"_index":5052,"title":{},"body":{"controllers/UserListController.html":{}}}],["promise.all(framepromises",{"_index":135,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["promise.all(notifications",{"_index":4810,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["promise.all(promises",{"_index":4635,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["promise.all(repostoremoverequests",{"_index":4929,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["promise.all(repotoaddrequests",{"_index":4939,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["promise.all(updates",{"_index":5314,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["promise.allsettled(listcontributors",{"_index":5030,"title":{},"body":{"controllers/UserListController.html":{}}}],["promises",{"_index":3780,"title":{},"body":{"injectables/RepoService.html":{},"controllers/UserFollowsController.html":{}}}],["properties",{"_index":11,"title":{"properties.html":{}},"body":{"interfaces/AllContributionsCount.html":{},"classes/ApplyUserCouponDto.html":{},"classes/BakeRepoDto.html":{},"interfaces/ChatResponse.html":{},"classes/CollaboratorsDto.html":{},"classes/CommitAuthorDto.html":{},"classes/CommitsDto.html":{},"classes/ContributionPageMetaDto.html":{},"classes/ContributionPageOptionsDto.html":{},"classes/ContributionsByProjectDto.html":{},"classes/ContributionsPageDto.html":{},"classes/ContributionsTimeframeDto.html":{},"classes/Contributor.html":{},"classes/ContributorPullRequestsDto.html":{},"classes/CreateBlogSummaryDto.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateInsightDto.html":{},"classes/CreateInsightMemberDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/CreateLogDto.html":{},"classes/CreateUserCollaborationDto.html":{},"classes/CreateUserHighlightDto.html":{},"classes/CreateUserListDto.html":{},"injectables/CustomLogger.html":{},"classes/DatabaseLoggerMiddleware.html":{},"entities/DbBakedRepo.html":{},"entities/DbCommitAuthors.html":{},"entities/DbCommits.html":{},"entities/DbContribution.html":{},"entities/DbContributionStatTimeframe.html":{},"entities/DbContributionsProjects.html":{},"entities/DbContributorCategoryTimeframe.html":{},"entities/DbCoupon.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"classes/DbFilteredUser.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbPullRequestGitHubEvents.html":{},"entities/DbPullRequestReview.html":{},"entities/DbRepoLoginContributions.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"classes/DbTimezone.html":{},"classes/DbTopUser.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightReactionResponse.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserListContributorStat.html":{},"entities/DbUserListContributorStat-1.html":{},"entities/DbUserNotification.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"classes/FilterListContributorsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/FilteredUsersDto.html":{},"classes/FollowManyUsersDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"classes/HighlightOptionsDto.html":{},"injectables/HttpLoggerMiddleware.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaParameters.html":{},"classes/PageOptionsDto.html":{},"interfaces/PaginationInput.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoInfo.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/StripeService.html":{},"classes/SupabaseAuthDto.html":{},"injectables/TierService.html":{},"classes/TopProjectsDto.html":{},"classes/TopUsersDto.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateInsightMemberDto.html":{},"classes/UpdateUserCollaborationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"classes/UserListMostActiveContributorsDto.html":{},"classes/UserOnboardingDto.html":{},"classes/UserRepoOptionsDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"classes/VotedRepoDto.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["property.decorator",{"_index":1609,"title":{},"body":{"entities/DbBakedRepo.html":{},"entities/DbCommitAuthors.html":{},"entities/DbCommits.html":{},"entities/DbContribution.html":{},"entities/DbContributionStatTimeframe.html":{},"entities/DbContributionsProjects.html":{},"entities/DbContributorCategoryTimeframe.html":{},"entities/DbCoupon.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"classes/DbFilteredUser.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbPullRequestGitHubEvents.html":{},"entities/DbPullRequestReview.html":{},"entities/DbRepoLoginContributions.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"classes/DbTimezone.html":{},"classes/DbTopUser.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserListContributorStat.html":{},"entities/DbUserListContributorStat-1.html":{},"entities/DbUserNotification.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{}}}],["provide",{"_index":5465,"title":{},"body":{"index.html":{},"properties.html":{}}}],["provided",{"_index":903,"title":{},"body":{"controllers/CodeExplanationController.html":{},"controllers/CodeRefactorSuggestionController.html":{},"controllers/CodeTestSuggestionController.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/RepoFilterService.html":{},"controllers/UserFollowingController.html":{},"controllers/UserFollowsController.html":{},"index.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["providers",{"_index":253,"title":{},"body":{"modules/ApiServicesModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/BlogSummaryModule.html":{},"modules/ContributionModule.html":{},"modules/CouponModule.html":{},"modules/CustomerModule.html":{},"modules/EmojiModule.html":{},"modules/EndorsementModule.html":{},"modules/InsightsModule.html":{},"modules/IssueSummaryModule.html":{},"modules/LogModule.html":{},"modules/OpenAiModule.html":{},"modules/PizzaOvenModule.html":{},"modules/PullRequestModule.html":{},"modules/RepoFilterModule.html":{},"modules/RepoModule.html":{},"modules/StarModule.html":{},"modules/StargazeModule.html":{},"modules/StripeModule.html":{},"modules/StripeSubscriptionModule.html":{},"modules/StripeWebHookModule.html":{},"modules/SubmitModule.html":{},"modules/TierModule.html":{},"modules/TimescaleModule.html":{},"modules/UserListModule.html":{},"modules/UserModule.html":{},"modules/UserReposModule.html":{},"modules/VoteModule.html":{}}}],["provides",{"_index":5928,"title":{},"body":{"miscellaneous/variables.html":{}}}],["prquery",{"_index":3423,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["prs",{"_index":895,"title":{},"body":{"controllers/CodeExplanationController.html":{},"controllers/CodeRefactorSuggestionController.html":{},"controllers/CodeTestSuggestionController.html":{},"entities/DbContributionStatTimeframe.html":{},"entities/DbRepoLoginContributions.html":{},"entities/DbUserListContributorStat.html":{},"entities/DbUserListContributorStat-1.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestGithubEventsService.html":{}}}],["prs.dto",{"_index":3519,"title":{},"body":{"injectables/PullRequestService.html":{},"controllers/UserController.html":{}}}],["prs.dto.ts",{"_index":1287,"title":{},"body":{"classes/ContributorPullRequestsDto.html":{},"miscellaneous/enumerations.html":{}}}],["prs.dto.ts:15",{"_index":1292,"title":{},"body":{"classes/ContributorPullRequestsDto.html":{}}}],["prs_created",{"_index":1174,"title":{},"body":{"injectables/ContributionService.html":{},"entities/DbContributionStatTimeframe.html":{},"entities/DbRepoLoginContributions.html":{},"entities/DbUserListContributorStat.html":{},"entities/DbUserListContributorStat-1.html":{},"classes/UserListMostActiveContributorsDto.html":{},"miscellaneous/enumerations.html":{}}}],["prs_reviewed",{"_index":1700,"title":{},"body":{"entities/DbContributionStatTimeframe.html":{},"entities/DbRepoLoginContributions.html":{},"entities/DbUserListContributorStat.html":{},"entities/DbUserListContributorStat-1.html":{}}}],["public",{"_index":676,"title":{},"body":{"controllers/AuthController.html":{},"classes/CommitAuthorDto.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateUserHighlightDto.html":{},"entities/DbBakedRepo.html":{},"entities/DbCommitAuthors.html":{},"entities/DbCommits.html":{},"entities/DbContribution.html":{},"entities/DbCoupon.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"classes/DbFilteredUser.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbPullRequestGitHubEvents.html":{},"entities/DbPullRequestReview.html":{},"entities/DbRepoLoginContributions.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"classes/DbTimezone.html":{},"classes/DbTopUser.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserListContributorStat.html":{},"entities/DbUserListContributorStat-1.html":{},"entities/DbUserNotification.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"classes/FollowManyUsersDto.html":{},"injectables/SupabaseStrategy.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"controllers/UserController.html":{},"controllers/UserListController.html":{},"classes/UserOnboardingDto.html":{}}}],["publish",{"_index":5654,"title":{},"body":{"license.html":{}}}],["published",{"_index":2071,"title":{},"body":{"entities/DbPullRequestReview.html":{}}}],["published_at",{"_index":2064,"title":{},"body":{"entities/DbPullRequestReview.html":{}}}],["pull",{"_index":196,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"modules/AppModule.html":{},"modules/ContributionModule.html":{},"injectables/ContributionService.html":{},"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"modules/ContributorModule.html":{},"entities/DbContribution.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbPullRequestGitHubEvents.html":{},"entities/DbPullRequestReview.html":{},"entities/DbUserHighlight.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"modules/PullRequestModule.html":{},"controllers/UserController.html":{},"injectables/UserHighlightsService.html":{},"modules/UserListModule.html":{},"injectables/UserListService.html":{},"injectables/UserListStatsService.html":{},"modules/UserModule.html":{},"index.html":{}}}],["pull_request",{"_index":1460,"title":{},"body":{"classes/CreateUserHighlightDto.html":{},"entities/DbUserHighlight.html":{}}}],["pull_request'})@column('text",{"_index":2263,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["pull_request'})@isstring()@isin(['pull_request",{"_index":1461,"title":{},"body":{"classes/CreateUserHighlightDto.html":{}}}],["pull_request_github_events",{"_index":2062,"title":{},"body":{"entities/DbPullRequestGitHubEvents.html":{}}}],["pull_request_github_events\".\"event_time",{"_index":3378,"title":{},"body":{"injectables/PullRequestGithubEventsService.html":{}}}],["pull_request_github_events.service",{"_index":4301,"title":{},"body":{"modules/TimescaleModule.html":{}}}],["pull_request_id",{"_index":2074,"title":{},"body":{"entities/DbPullRequestReview.html":{}}}],["pull_requests",{"_index":94,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/ContributionService.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"injectables/PullRequestService.html":{},"injectables/RepoFilterService.html":{},"injectables/RepoService.html":{},"injectables/UserListService.html":{},"injectables/UserListStatsService.html":{}}}],["pull_requests\".\"author_login",{"_index":95,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/ContributionService.html":{},"injectables/UserListStatsService.html":{}}}],["pull_requests\".\"author_login\"=\"users\".\"login",{"_index":3538,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["pull_requests\".\"repo_id",{"_index":97,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/ContributionService.html":{},"injectables/UserListStatsService.html":{}}}],["pull_requests\".\"repo_id\"=\"repos\".\"id",{"_index":3523,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["pull_requests\".\"updated_at",{"_index":159,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/ContributionService.html":{},"injectables/PullRequestService.html":{},"injectables/UserListStatsService.html":{}}}],["pull_requests.author_login",{"_index":1176,"title":{},"body":{"injectables/ContributionService.html":{}}}],["pull_requests.created_at::date",{"_index":5151,"title":{},"body":{"injectables/UserListService.html":{}}}],["pull_requests_full_name",{"_index":3525,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["pull_requests_repo_id",{"_index":3526,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["pull_requests_velocity\".\"created_at",{"_index":3757,"title":{},"body":{"injectables/RepoService.html":{}}}],["pull_requests_velocity\".\"updated_at",{"_index":3758,"title":{},"body":{"injectables/RepoService.html":{}}}],["pullrequest",{"_index":2065,"title":{},"body":{"entities/DbPullRequestReview.html":{},"injectables/PullRequestReviewService.html":{}}}],["pullrequestcontributorinsightsdto",{"_index":1251,"title":{"classes/PullRequestContributorInsightsDto.html":{}},"body":{"controllers/ContributorInsightsController.html":{},"classes/PullRequestContributorInsightsDto.html":{},"injectables/PullRequestService.html":{}}}],["pullrequestcontributoroptionsdto",{"_index":1219,"title":{"classes/PullRequestContributorOptionsDto.html":{}},"body":{"controllers/ContributorController.html":{},"classes/PullRequestContributorOptionsDto.html":{},"injectables/PullRequestService.html":{}}}],["pullrequestcontroller",{"_index":3280,"title":{"controllers/PullRequestController.html":{}},"body":{"controllers/PullRequestController.html":{},"modules/PullRequestModule.html":{}}}],["pullrequestdescriptioncontroller",{"_index":3322,"title":{"controllers/PullRequestDescriptionController.html":{}},"body":{"controllers/PullRequestDescriptionController.html":{},"modules/PullRequestModule.html":{}}}],["pullrequestdescriptionservice",{"_index":3329,"title":{"injectables/PullRequestDescriptionService.html":{}},"body":{"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"modules/PullRequestModule.html":{},"overview.html":{}}}],["pullrequestgithubeventsrepository",{"_index":3351,"title":{},"body":{"injectables/PullRequestGithubEventsService.html":{}}}],["pullrequestgithubeventsservice",{"_index":3346,"title":{"injectables/PullRequestGithubEventsService.html":{}},"body":{"injectables/PullRequestGithubEventsService.html":{},"modules/TimescaleModule.html":{},"controllers/UserController.html":{},"overview.html":{}}}],["pullrequestinsightsservice",{"_index":3304,"title":{"injectables/PullRequestInsightsService.html":{}},"body":{"controllers/PullRequestController.html":{},"injectables/PullRequestInsightsService.html":{},"modules/PullRequestModule.html":{},"overview.html":{}}}],["pullrequestmodule",{"_index":274,"title":{"modules/PullRequestModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ContributorModule.html":{},"modules/PullRequestModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["pullrequestorderfieldsenum",{"_index":3458,"title":{},"body":{"classes/PullRequestPageOptionsDto.html":{},"miscellaneous/enumerations.html":{}}}],["pullrequestorderfieldsenum.updated_at",{"_index":3459,"title":{},"body":{"classes/PullRequestPageOptionsDto.html":{}}}],["pullrequestpageoptionsdto",{"_index":3299,"title":{"classes/PullRequestPageOptionsDto.html":{}},"body":{"controllers/PullRequestController.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{}}}],["pullrequestrepository",{"_index":1130,"title":{},"body":{"injectables/ContributionService.html":{},"injectables/PullRequestService.html":{}}}],["pullrequestreviewrepository",{"_index":3474,"title":{},"body":{"injectables/PullRequestReviewService.html":{}}}],["pullrequestreviewservice",{"_index":3305,"title":{"injectables/PullRequestReviewService.html":{}},"body":{"controllers/PullRequestController.html":{},"modules/PullRequestModule.html":{},"injectables/PullRequestReviewService.html":{},"overview.html":{}}}],["pullrequestservice",{"_index":1233,"title":{"injectables/PullRequestService.html":{}},"body":{"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"controllers/PullRequestController.html":{},"modules/PullRequestModule.html":{},"injectables/PullRequestService.html":{},"controllers/UserController.html":{},"overview.html":{}}}],["pullrequestsinsightservice",{"_index":3307,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["pullrequeststatusenum",{"_index":3464,"title":{},"body":{"classes/PullRequestPageOptionsDto.html":{},"miscellaneous/enumerations.html":{}}}],["pullrequeststatusenum'})@isenum(pullrequeststatusenum)@isoptional",{"_index":3465,"title":{},"body":{"classes/PullRequestPageOptionsDto.html":{}}}],["purpose",{"_index":5679,"title":{},"body":{"license.html":{}}}],["put",{"_index":3832,"title":{},"body":{"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserFollowsController.html":{}}}],["put(\"/:id/star",{"_index":3838,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["put(\"/:id/stargaze",{"_index":3876,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["put(\"/:id/submit",{"_index":3915,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["put(\"/:id/vote",{"_index":3963,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["put(\"/:owner/:repo/star",{"_index":3841,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["put(\"/:owner/:repo/stargaze",{"_index":3879,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["put(\"/:owner/:repo/submit",{"_index":3917,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["put(\"/:owner/:repo/vote",{"_index":3966,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["put(\"/:username/follow",{"_index":4628,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["put(\"/:username/follows",{"_index":4630,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["put('/:id/star')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":3825,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["put('/:id/stargaze')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":3867,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["put('/:id/submit')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":3906,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["put('/:id/vote')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":3950,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["put('/:owner/:repo/star')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":3830,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["put('/:owner/:repo/stargaze')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":3871,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["put('/:owner/:repo/submit')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":3909,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["put('/:owner/:repo/vote')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":3953,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["put('/:username/follow')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":4607,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["put('/:username/follows')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":4611,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["qb",{"_index":3400,"title":{},"body":{"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoFilterService.html":{},"injectables/RepoService.html":{},"injectables/UserListService.html":{}}}],["qb.andwhere(sql",{"_index":3667,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["qb.where(sql",{"_index":3666,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["quality",{"_index":5581,"title":{},"body":{"index.html":{}}}],["quantity",{"_index":2169,"title":{},"body":{"entities/DbSubscription.html":{},"injectables/StripeService.html":{},"controllers/StripeWebhookController.html":{}}}],["query",{"_index":1228,"title":{},"body":{"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"classes/DatabaseLoggerMiddleware.html":{},"controllers/EmojiController.html":{},"controllers/EndorsementController.html":{},"classes/FilteredUsersDto.html":{},"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"controllers/PizzaOvenController.html":{},"controllers/PullRequestController.html":{},"injectables/PullRequestGithubEventsService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"injectables/RepoFilterService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"controllers/UserListStatsController.html":{},"controllers/UserNotificationController.html":{},"controllers/UserRecommendationController.html":{}}}],["query(\"prev_days_start_date",{"_index":3600,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["query(\"range",{"_index":3599,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["query(new",{"_index":5042,"title":{},"body":{"controllers/UserListController.html":{}}}],["querybuilder",{"_index":82,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/CommitAuthorsService.html":{},"injectables/CommitsService.html":{},"injectables/ContributionService.html":{},"injectables/CouponService.html":{},"injectables/CustomerService.html":{},"injectables/EmojiService.html":{},"injectables/EndorsementService.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightsService.html":{},"injectables/PagerService.html":{},"interfaces/PaginationInput.html":{},"injectables/PizzaOvenService.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoFilterService.html":{},"injectables/RepoService.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/SubmitService.html":{},"injectables/UserCollaborationService.html":{},"injectables/UserFollowService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserListService.html":{},"injectables/UserListStatsService.html":{},"injectables/UserNotificationService.html":{},"injectables/UserOrganizationService.html":{},"injectables/UserReposService.html":{},"injectables/VoteService.html":{}}}],["querybuilder.addgroupby(\"emoji_id",{"_index":4821,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["querybuilder.andwhere(\"lower(users.login",{"_index":5157,"title":{},"body":{"injectables/UserListService.html":{}}}],["querybuilder.andwhere(\"user_highlight_reactions.user_id",{"_index":4820,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["querybuilder.andwhere(\"user_highlights.user_id",{"_index":4773,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["querybuilder.andwhere(\"user_lists.user_id",{"_index":5128,"title":{},"body":{"injectables/UserListService.html":{}}}],["querybuilder.andwhere(sql",{"_index":4784,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["querybuilder.getcount",{"_index":1160,"title":{},"body":{"injectables/ContributionService.html":{},"injectables/EmojiService.html":{},"injectables/InsightsService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoService.html":{},"injectables/UserNotificationService.html":{},"injectables/UserOrganizationService.html":{}}}],["querybuilder.getmany",{"_index":1161,"title":{},"body":{"injectables/ContributionService.html":{},"injectables/EmojiService.html":{},"injectables/InsightsService.html":{},"injectables/PagerService.html":{},"interfaces/PaginationInput.html":{},"injectables/PullRequestService.html":{},"injectables/RepoService.html":{},"injectables/UserFollowService.html":{},"injectables/UserNotificationService.html":{},"injectables/UserOrganizationService.html":{}}}],["querybuilder.getone",{"_index":1012,"title":{},"body":{"injectables/CommitAuthorsService.html":{},"injectables/CommitsService.html":{},"injectables/CouponService.html":{},"injectables/CustomerService.html":{},"injectables/EndorsementService.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightsService.html":{},"injectables/PizzaOvenService.html":{},"injectables/RepoService.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/SubmitService.html":{},"injectables/UserCollaborationService.html":{},"injectables/UserFollowService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserListService.html":{},"injectables/UserReposService.html":{},"injectables/VoteService.html":{}}}],["querybuilder.getoneorfail",{"_index":4588,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["querybuilder.getrawmany",{"_index":224,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/PullRequestGithubEventsService.html":{},"injectables/PullRequestService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserListService.html":{},"injectables/UserListStatsService.html":{}}}],["querybuilder.getrawone",{"_index":3442,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["querybuilder.innerjoin",{"_index":3764,"title":{},"body":{"injectables/RepoService.html":{}}}],["querybuilder.innerjoin(\"users",{"_index":84,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["querybuilder.leftjoin",{"_index":5149,"title":{},"body":{"injectables/UserListService.html":{}}}],["querybuilder.limit(1",{"_index":3436,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["querybuilder.offset(pageoptionsdto.skip).limit(pageoptionsdto.limit",{"_index":1008,"title":{},"body":{"injectables/CommitAuthorsService.html":{},"injectables/CommitsService.html":{},"injectables/PagerService.html":{},"interfaces/PaginationInput.html":{},"injectables/PizzaOvenService.html":{},"injectables/UserNotificationService.html":{},"injectables/UserOrganizationService.html":{}}}],["querybuilder.orderby(\"emoji.display_order",{"_index":2468,"title":{},"body":{"injectables/EmojiService.html":{}}}],["querybuilder.orderby(\"endorsements.created_at",{"_index":2595,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["querybuilder.select(\"distinct",{"_index":5161,"title":{},"body":{"injectables/UserListService.html":{}}}],["querybuilder.setparameters",{"_index":3439,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["querybuilder.skip(pageoptionsdto.skip).take(pageoptionsdto.limit",{"_index":3073,"title":{},"body":{"injectables/InsightsService.html":{}}}],["querybuilder.where(\"baked_repo_id",{"_index":1039,"title":{},"body":{"injectables/CommitsService.html":{}}}],["querybuilder.where(\"code",{"_index":1314,"title":{},"body":{"injectables/CouponService.html":{}}}],["querybuilder.where(\"commit_author_id",{"_index":1040,"title":{},"body":{"injectables/CommitsService.html":{}}}],["querybuilder.where(\"contribution.repo_id",{"_index":1154,"title":{},"body":{"injectables/ContributionService.html":{}}}],["querybuilder.where(\"customer.id=:id",{"_index":1539,"title":{},"body":{"injectables/CustomerService.html":{}}}],["querybuilder.where(\"customer.stripe_customer_id=:id",{"_index":1540,"title":{},"body":{"injectables/CustomerService.html":{}}}],["querybuilder.where(\"endorsements.creator_user_id",{"_index":2596,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["querybuilder.where(\"endorsements.id",{"_index":2610,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["querybuilder.where(\"id",{"_index":1010,"title":{},"body":{"injectables/CommitAuthorsService.html":{},"injectables/CommitsService.html":{},"injectables/PizzaOvenService.html":{},"injectables/UserReposService.html":{}}}],["querybuilder.where(\"insight_members.id",{"_index":2960,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["querybuilder.where(\"is_featured=true\").andwhere(\"is_public=true\").orderby(\"user_lists.updated_at",{"_index":5134,"title":{},"body":{"injectables/UserListService.html":{}}}],["querybuilder.where(\"r2stars.repo_id",{"_index":3991,"title":{},"body":{"injectables/StarService.html":{}}}],["querybuilder.where(\"r2submits.repo_id",{"_index":4184,"title":{},"body":{"injectables/SubmitService.html":{}}}],["querybuilder.where(\"repo.full_name",{"_index":3761,"title":{},"body":{"injectables/RepoService.html":{}}}],["querybuilder.where(\"repo.id",{"_index":3760,"title":{},"body":{"injectables/RepoService.html":{}}}],["querybuilder.where(\"user_collaborations.id",{"_index":4442,"title":{},"body":{"injectables/UserCollaborationService.html":{}}}],["querybuilder.where(\"user_highlights.user_id",{"_index":4792,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["querybuilder.where(\"user_lists.user_id",{"_index":5132,"title":{},"body":{"injectables/UserListService.html":{}}}],["querybuilder.where(\"user_repos.user_id",{"_index":5381,"title":{},"body":{"injectables/UserReposService.html":{}}}],["querybuilder.where(`user_highlights.featured",{"_index":4785,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["querybuilder.where(sql",{"_index":4783,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["queryrunner",{"_index":1555,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["queryrunner?.data.iscreatinglogs",{"_index":1574,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["questions",{"_index":5627,"title":{},"body":{"index.html":{}}}],["range",{"_index":78,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"classes/ContributionsByProjectDto.html":{},"classes/ContributionsTimeframeDto.html":{},"controllers/ContributorInsightsController.html":{},"classes/ContributorPullRequestsDto.html":{},"classes/FilterOptionsDto.html":{},"controllers/HighlightController.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"injectables/PullRequestGithubEventsService.html":{},"injectables/PullRequestInsightsService.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"injectables/RepoFilterService.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"classes/TopProjectsDto.html":{},"injectables/UserHighlightsService.html":{},"classes/UserListMostActiveContributorsDto.html":{},"injectables/UserListService.html":{},"controllers/UserListStatsController.html":{},"injectables/UserListStatsService.html":{},"classes/UserRepoOptionsDto.html":{}}}],["rangetype",{"_index":1288,"title":{},"body":{"classes/ContributorPullRequestsDto.html":{}}}],["rangetypeenum",{"_index":1289,"title":{},"body":{"classes/ContributorPullRequestsDto.html":{},"injectables/PullRequestService.html":{},"miscellaneous/enumerations.html":{}}}],["rangetypeenum.recent",{"_index":1290,"title":{},"body":{"classes/ContributorPullRequestsDto.html":{},"injectables/PullRequestService.html":{}}}],["rate",{"_index":5937,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ratelimit",{"_index":5954,"title":{},"body":{"miscellaneous/variables.html":{}}}],["rawbody",{"_index":5842,"title":{},"body":{"miscellaneous/variables.html":{}}}],["rawbodyrequest",{"_index":4090,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["react",{"_index":4378,"title":{},"body":{"classes/UpdateUserProfileInterestsDto.html":{},"controllers/UserHighlightsController.html":{},"classes/UserOnboardingDto.html":{},"index.html":{}}}],["reacted",{"_index":2304,"title":{},"body":{"classes/DbUserHighlightReactionResponse.html":{},"classes/HighlightOptionsDto.html":{},"injectables/UserNotificationService.html":{}}}],["reaction",{"_index":1750,"title":{},"body":{"entities/DbEmoji.html":{},"entities/DbUserHighlightReaction.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{}}}],["reaction'})@apibadrequestresponse({description",{"_index":4671,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["reaction'})@apiparam({name",{"_index":4658,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["reaction.emoji",{"_index":2299,"title":{},"body":{"entities/DbUserHighlightReaction.html":{}}}],["reaction.emoji)@joincolumn({name",{"_index":2280,"title":{},"body":{"entities/DbUserHighlightReaction.html":{}}}],["reaction.entity",{"_index":406,"title":{},"body":{"modules/AppModule.html":{},"entities/DbEmoji.html":{},"entities/DbUserHighlight.html":{},"classes/DbUserHighlightReactionResponse.html":{},"classes/HighlightOptionsDto.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"modules/UserModule.html":{}}}],["reaction.entity.ts",{"_index":2275,"title":{},"body":{"entities/DbUserHighlightReaction.html":{}}}],["reaction.entity.ts:102",{"_index":2285,"title":{},"body":{"entities/DbUserHighlightReaction.html":{}}}],["reaction.entity.ts:110",{"_index":2292,"title":{},"body":{"entities/DbUserHighlightReaction.html":{}}}],["reaction.entity.ts:118",{"_index":2281,"title":{},"body":{"entities/DbUserHighlightReaction.html":{}}}],["reaction.entity.ts:27",{"_index":2287,"title":{},"body":{"entities/DbUserHighlightReaction.html":{}}}],["reaction.entity.ts:38",{"_index":2286,"title":{},"body":{"entities/DbUserHighlightReaction.html":{}}}],["reaction.entity.ts:49",{"_index":2293,"title":{},"body":{"entities/DbUserHighlightReaction.html":{}}}],["reaction.entity.ts:59",{"_index":2283,"title":{},"body":{"entities/DbUserHighlightReaction.html":{}}}],["reaction.entity.ts:70",{"_index":2278,"title":{},"body":{"entities/DbUserHighlightReaction.html":{}}}],["reaction.entity.ts:81",{"_index":2290,"title":{},"body":{"entities/DbUserHighlightReaction.html":{}}}],["reaction.entity.ts:85",{"_index":2279,"title":{},"body":{"entities/DbUserHighlightReaction.html":{}}}],["reaction.entity.ts:94",{"_index":2289,"title":{},"body":{"entities/DbUserHighlightReaction.html":{}}}],["reaction.highlight",{"_index":2297,"title":{},"body":{"entities/DbUserHighlightReaction.html":{}}}],["reaction.highlight)@joincolumn({name",{"_index":2284,"title":{},"body":{"entities/DbUserHighlightReaction.html":{}}}],["reaction.user",{"_index":2298,"title":{},"body":{"entities/DbUserHighlightReaction.html":{}}}],["reaction.user)@joincolumn({name",{"_index":2291,"title":{},"body":{"entities/DbUserHighlightReaction.html":{}}}],["reaction_count",{"_index":2277,"title":{},"body":{"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightReactionResponse.html":{},"classes/HighlightOptionsDto.html":{},"injectables/UserHighlightsService.html":{}}}],["reaction_users",{"_index":2302,"title":{},"body":{"classes/DbUserHighlightReactionResponse.html":{},"classes/HighlightOptionsDto.html":{},"injectables/UserHighlightsService.html":{}}}],["reactionexists",{"_index":4827,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["reactionexists.deleted_at",{"_index":4828,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["reactions",{"_index":1749,"title":{},"body":{"entities/DbEmoji.html":{},"entities/DbUserHighlight.html":{},"controllers/HighlightController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{}}}],["reactions'})@apibadrequestresponse({description",{"_index":2817,"title":{},"body":{"controllers/HighlightController.html":{},"controllers/UserHighlightsController.html":{}}}],["read",{"_index":2383,"title":{},"body":{"entities/DbUserNotification.html":{},"miscellaneous/variables.html":{}}}],["read_at",{"_index":2368,"title":{},"body":{"entities/DbUserNotification.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{}}}],["readable",{"_index":1886,"title":{},"body":{"entities/DbPRInsight.html":{}}}],["readonly",{"_index":516,"title":{},"body":{"modules/AppModule.html":{},"controllers/BlogSummaryController.html":{},"classes/ContributionPageMetaDto.html":{},"classes/ContributionPageOptionsDto.html":{},"classes/ContributionsByProjectDto.html":{},"classes/ContributionsPageDto.html":{},"classes/ContributionsTimeframeDto.html":{},"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"classes/ContributorPullRequestsDto.html":{},"classes/CreateLogDto.html":{},"injectables/CustomLogger.html":{},"classes/DatabaseLoggerMiddleware.html":{},"classes/DbUserHighlightReactionResponse.html":{},"controllers/EndorsementController.html":{},"classes/FilterListContributorsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/FilteredUsersDto.html":{},"controllers/HealthController.html":{},"controllers/HighlightController.html":{},"classes/HighlightOptionsDto.html":{},"controllers/InsightController.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"controllers/IssueSummaryController.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{},"controllers/PizzaOvenController.html":{},"injectables/PizzaOvenService.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"controllers/PullRequestController.html":{},"classes/PullRequestPageOptionsDto.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"classes/SupabaseAuthDto.html":{},"classes/TopProjectsDto.html":{},"classes/TopUsersDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserEndorsementController.html":{},"controllers/UserFollowingController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"classes/UserListMostActiveContributorsDto.html":{},"controllers/UserListStatsController.html":{},"controllers/UserRecommendationController.html":{},"classes/UserRepoOptionsDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"classes/VotedRepoDto.html":{}}}],["rebaseable",{"_index":1916,"title":{},"body":{"entities/DbPullRequest.html":{},"entities/DbPullRequestGitHubEvents.html":{}}}],["receipient",{"_index":2233,"title":{},"body":{"entities/DbUserCollaboration.html":{}}}],["receive",{"_index":5968,"title":{},"body":{"miscellaneous/variables.html":{}}}],["receive_collaboration",{"_index":4368,"title":{},"body":{"classes/UpdateUserEmailPreferencesDto.html":{}}}],["receive_product_updates",{"_index":4369,"title":{},"body":{"classes/UpdateUserEmailPreferencesDto.html":{}}}],["received",{"_index":2505,"title":{},"body":{"controllers/EndorsementController.html":{},"controllers/UserEndorsementController.html":{},"miscellaneous/variables.html":{}}}],["recent",{"_index":1254,"title":{},"body":{"controllers/ContributorInsightsController.html":{},"classes/ContributorPullRequestsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"miscellaneous/enumerations.html":{}}}],["recieve",{"_index":4371,"title":{},"body":{"classes/UpdateUserEmailPreferencesDto.html":{}}}],["recipient",{"_index":1373,"title":{},"body":{"classes/CreateEndorsementDto.html":{},"classes/CreateUserCollaborationDto.html":{},"entities/DbEndorsement.html":{},"controllers/UserCollaborationController.html":{}}}],["recipient_user_id",{"_index":1366,"title":{},"body":{"classes/CreateEndorsementDto.html":{},"entities/DbEndorsement.html":{}}}],["recommendation.controller",{"_index":5254,"title":{},"body":{"modules/UserModule.html":{}}}],["recommendation.controller.ts",{"_index":5331,"title":{},"body":{"controllers/UserRecommendationController.html":{}}}],["recommendation.controller.ts:27",{"_index":5344,"title":{},"body":{"controllers/UserRecommendationController.html":{}}}],["recommendation.controller.ts:43",{"_index":5340,"title":{},"body":{"controllers/UserRecommendationController.html":{}}}],["recommendations",{"_index":5346,"title":{},"body":{"controllers/UserRecommendationController.html":{}}}],["recommended",{"_index":5337,"title":{},"body":{"controllers/UserRecommendationController.html":{}}}],["record",{"_index":2527,"title":{},"body":{"controllers/EndorsementController.html":{},"guards/EndorsementTokenGuard.html":{},"injectables/RepoService.html":{}}}],["record'})@apiokresponse({type",{"_index":2482,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["record)[\"stripe",{"_index":4146,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["ref",{"_index":1981,"title":{},"body":{"entities/DbPullRequest.html":{},"entities/DbPullRequestGitHubEvents.html":{},"miscellaneous/variables.html":{}}}],["refactor",{"_index":926,"title":{},"body":{"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"modules/PullRequestModule.html":{}}}],["referencedcolumnname",{"_index":1632,"title":{},"body":{"entities/DbCommits.html":{},"entities/DbContribution.html":{},"entities/DbInsight.html":{},"entities/DbInsightRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserNotification.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserTopRepo.html":{}}}],["refusing",{"_index":6000,"title":{},"body":{"miscellaneous/variables.html":{}}}],["regexp_replace(regexp_replace(user_highlights.url",{"_index":4780,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["register",{"_index":4293,"title":{},"body":{"injectables/TierService.html":{}}}],["registeras(\"api",{"_index":5752,"title":{},"body":{"miscellaneous/variables.html":{}}}],["registeras(\"db",{"_index":5789,"title":{},"body":{"miscellaneous/variables.html":{}}}],["registeras(\"endpoint",{"_index":5824,"title":{},"body":{"miscellaneous/variables.html":{}}}],["registeras(\"hacktoberfest",{"_index":5893,"title":{},"body":{"miscellaneous/variables.html":{}}}],["registeras(\"openai",{"_index":5898,"title":{},"body":{"miscellaneous/variables.html":{}}}],["registeras(\"pizza",{"_index":5909,"title":{},"body":{"miscellaneous/variables.html":{}}}],["registeras(\"stripe",{"_index":5914,"title":{},"body":{"miscellaneous/variables.html":{}}}],["registeras(\"tier",{"_index":6010,"title":{},"body":{"miscellaneous/variables.html":{}}}],["registered",{"_index":4288,"title":{},"body":{"injectables/TierService.html":{}}}],["registration",{"_index":4196,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["rejectunauthorized",{"_index":467,"title":{},"body":{"modules/AppModule.html":{}}}],["release",{"_index":5440,"title":{},"body":{"index.html":{}}}],["relevantevents",{"_index":4099,"title":{},"body":{"controllers/StripeWebhookController.html":{},"miscellaneous/variables.html":{}}}],["relevantevents.has(event.type",{"_index":4151,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["remaining",{"_index":5955,"title":{},"body":{"miscellaneous/variables.html":{}}}],["remove",{"_index":2571,"title":{},"body":{"injectables/EndorsementService.html":{},"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"properties.html":{}}}],["remove(id",{"_index":2590,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["removeafeaturedhighlight",{"_index":2821,"title":{},"body":{"controllers/HighlightController.html":{}}}],["removed",{"_index":3814,"title":{},"body":{"controllers/RepoStarController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StarService.html":{},"injectables/SubmitService.html":{},"injectables/VoteService.html":{}}}],["removefeatured",{"_index":4733,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["removefeatured(highlightid",{"_index":4763,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["removeinsight",{"_index":3037,"title":{},"body":{"injectables/InsightsService.html":{}}}],["removeinsight(id",{"_index":3050,"title":{},"body":{"injectables/InsightsService.html":{}}}],["removeinsightforuser",{"_index":2889,"title":{},"body":{"controllers/InsightController.html":{}}}],["removeinsightforuser(@param(\"id",{"_index":2926,"title":{},"body":{"controllers/InsightController.html":{}}}],["removeinsightforuser(id",{"_index":2903,"title":{},"body":{"controllers/InsightController.html":{}}}],["removeinsightmember",{"_index":2935,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["removeinsightmember(id",{"_index":2953,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["removeinsightmemberbyid",{"_index":4837,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["removeinsightmemberbyid(id",{"_index":4851,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["removeinsightrepo",{"_index":2991,"title":{},"body":{"injectables/InsightRepoService.html":{}}}],["removeinsightrepo(id",{"_index":2998,"title":{},"body":{"injectables/InsightRepoService.html":{}}}],["removes",{"_index":2905,"title":{},"body":{"controllers/InsightController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserInsightMemberController.html":{}}}],["removeusercollaboration",{"_index":4428,"title":{},"body":{"injectables/UserCollaborationService.html":{}}}],["removeusercollaboration(id",{"_index":4437,"title":{},"body":{"injectables/UserCollaborationService.html":{}}}],["removeusercollaborationbyid",{"_index":4385,"title":{},"body":{"controllers/UserCollaborationController.html":{}}}],["removeusercollaborationbyid(@param(\"id",{"_index":4423,"title":{},"body":{"controllers/UserCollaborationController.html":{}}}],["removeusercollaborationbyid(id",{"_index":4399,"title":{},"body":{"controllers/UserCollaborationController.html":{}}}],["removeuserfollowerbyid",{"_index":4551,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["removeuserfollowerbyid(userid",{"_index":4567,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["repeat",{"_index":1264,"title":{},"body":{"controllers/ContributorInsightsController.html":{}}}],["repo",{"_index":756,"title":{},"body":{"classes/BakeRepoDto.html":{},"modules/ContributionModule.html":{},"controllers/ContributorInsightsController.html":{},"entities/DbCommits.html":{},"entities/DbContribution.html":{},"entities/DbContributionsProjects.html":{},"entities/DbInsightRepo.html":{},"entities/DbPullRequest.html":{},"entities/DbPullRequestGitHubEvents.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserHighlight.html":{},"classes/DbUserHighlightReactionResponse.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserRepo.html":{},"entities/DbUserTopRepo.html":{},"controllers/EndorsementController.html":{},"injectables/EndorsementService.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"controllers/PizzaOvenController.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"modules/RepoFilterModule.html":{},"injectables/RepoFilterService.html":{},"classes/RepoInfo.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"modules/StarModule.html":{},"injectables/StarService.html":{},"modules/StargazeModule.html":{},"injectables/StargazeService.html":{},"modules/SubmitModule.html":{},"injectables/SubmitService.html":{},"classes/TopProjectsDto.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightsController.html":{},"classes/UserRepoOptionsDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"injectables/UserReposService.html":{},"modules/VoteModule.html":{},"injectables/VoteService.html":{},"classes/VotedRepoDto.html":{},"index.html":{}}}],["repo'})@apiokresponse({type",{"_index":3619,"title":{},"body":{"controllers/RepoController.html":{}}}],["repo'})@apiparam({name",{"_index":3827,"title":{},"body":{"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{}}}],["repo.contributions",{"_index":1696,"title":{},"body":{"entities/DbContribution.html":{},"injectables/RepoService.html":{}}}],["repo.contributions)@joincolumn({name",{"_index":1678,"title":{},"body":{"entities/DbContribution.html":{}}}],["repo.controller",{"_index":3679,"title":{},"body":{"modules/RepoModule.html":{}}}],["repo.dto",{"_index":3002,"title":{},"body":{"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"controllers/PizzaOvenController.html":{},"injectables/PizzaOvenService.html":{}}}],["repo.dto.ts",{"_index":754,"title":{},"body":{"classes/BakeRepoDto.html":{}}}],["repo.dto.ts:11",{"_index":760,"title":{},"body":{"classes/BakeRepoDto.html":{}}}],["repo.dto.ts:19",{"_index":767,"title":{},"body":{"classes/BakeRepoDto.html":{}}}],["repo.entity",{"_index":349,"title":{},"body":{"modules/AppModule.html":{},"entities/DbCommits.html":{},"entities/DbInsight.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"controllers/HighlightController.html":{},"injectables/InsightRepoService.html":{},"modules/InsightsModule.html":{},"controllers/PizzaOvenController.html":{},"modules/PizzaOvenModule.html":{},"injectables/PizzaOvenService.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserListController.html":{},"injectables/UserListService.html":{},"modules/UserModule.html":{},"modules/UserReposModule.html":{},"injectables/UserReposService.html":{}}}],["repo.entity.ts",{"_index":1585,"title":{},"body":{"entities/DbBakedRepo.html":{},"entities/DbInsightRepo.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserRepo.html":{},"entities/DbUserTopRepo.html":{}}}],["repo.entity.ts:15",{"_index":2409,"title":{},"body":{"entities/DbUserRepo.html":{}}}],["repo.entity.ts:20",{"_index":1600,"title":{},"body":{"entities/DbBakedRepo.html":{}}}],["repo.entity.ts:22",{"_index":2412,"title":{},"body":{"entities/DbUserRepo.html":{}}}],["repo.entity.ts:27",{"_index":2427,"title":{},"body":{"entities/DbUserTopRepo.html":{}}}],["repo.entity.ts:29",{"_index":2411,"title":{},"body":{"entities/DbUserRepo.html":{}}}],["repo.entity.ts:30",{"_index":1592,"title":{},"body":{"entities/DbBakedRepo.html":{},"entities/DbInsightRepo.html":{}}}],["repo.entity.ts:35",{"_index":2433,"title":{},"body":{"entities/DbUserTopRepo.html":{}}}],["repo.entity.ts:36",{"_index":2408,"title":{},"body":{"entities/DbUserRepo.html":{}}}],["repo.entity.ts:38",{"_index":1602,"title":{},"body":{"entities/DbBakedRepo.html":{},"entities/DbInsightRepo.html":{}}}],["repo.entity.ts:42",{"_index":1595,"title":{},"body":{"entities/DbBakedRepo.html":{}}}],["repo.entity.ts:43",{"_index":2430,"title":{},"body":{"entities/DbUserTopRepo.html":{}}}],["repo.entity.ts:46",{"_index":1862,"title":{},"body":{"entities/DbInsightRepo.html":{},"entities/DbUserRepo.html":{}}}],["repo.entity.ts:53",{"_index":1859,"title":{},"body":{"entities/DbInsightRepo.html":{},"entities/DbUserTopRepo.html":{}}}],["repo.entity.ts:63",{"_index":1856,"title":{},"body":{"entities/DbInsightRepo.html":{},"entities/DbUserTopRepo.html":{}}}],["repo.entity.ts:70",{"_index":2425,"title":{},"body":{"entities/DbUserTopRepo.html":{}}}],["repo.entity.ts:73",{"_index":1857,"title":{},"body":{"entities/DbInsightRepo.html":{}}}],["repo.entity.ts:78",{"_index":2432,"title":{},"body":{"entities/DbUserTopRepo.html":{}}}],["repo.entity.ts:8",{"_index":2316,"title":{},"body":{"classes/DbUserHighlightRepo.html":{}}}],["repo.entity.ts:81",{"_index":1861,"title":{},"body":{"entities/DbInsightRepo.html":{}}}],["repo.entity.ts:86",{"_index":2429,"title":{},"body":{"entities/DbUserTopRepo.html":{}}}],["repo.fullname",{"_index":3019,"title":{},"body":{"injectables/InsightRepoService.html":{},"injectables/UserReposService.html":{}}}],["repo.id",{"_index":3018,"title":{},"body":{"injectables/InsightRepoService.html":{},"injectables/RepoService.html":{},"injectables/UserReposService.html":{}}}],["repo.repo_id",{"_index":4925,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["repo.repotouser${relation",{"_index":3765,"title":{},"body":{"injectables/RepoService.html":{}}}],["repo.repotouserstargazers",{"_index":2110,"title":{},"body":{"entities/DbRepoToUserStargazers.html":{},"injectables/RepoService.html":{}}}],["repo.repotouserstargazers)@joincolumn({name",{"_index":2101,"title":{},"body":{"entities/DbRepoToUserStargazers.html":{}}}],["repo.repotouserstars",{"_index":2125,"title":{},"body":{"entities/DbRepoToUserStars.html":{},"injectables/RepoService.html":{}}}],["repo.repotouserstars)@joincolumn({name",{"_index":2116,"title":{},"body":{"entities/DbRepoToUserStars.html":{}}}],["repo.repotousersubmissions",{"_index":2143,"title":{},"body":{"entities/DbRepoToUserSubmissions.html":{},"injectables/RepoService.html":{}}}],["repo.repotousersubmissions)@joincolumn({name",{"_index":2134,"title":{},"body":{"entities/DbRepoToUserSubmissions.html":{}}}],["repo.repotousertoprepos",{"_index":2436,"title":{},"body":{"entities/DbUserTopRepo.html":{}}}],["repo.repotousertoprepos)@joincolumn({name",{"_index":2428,"title":{},"body":{"entities/DbUserTopRepo.html":{}}}],["repo.repotouservotes",{"_index":2158,"title":{},"body":{"entities/DbRepoToUserVotes.html":{},"injectables/RepoService.html":{}}}],["repo.repotouservotes)@joincolumn({name",{"_index":2149,"title":{},"body":{"entities/DbRepoToUserVotes.html":{}}}],["repo.service",{"_index":3029,"title":{},"body":{"modules/InsightsModule.html":{},"controllers/RepoController.html":{},"modules/RepoModule.html":{},"controllers/UserInsightsController.html":{}}}],["repo.service.ts",{"_index":2989,"title":{},"body":{"injectables/InsightRepoService.html":{}}}],["repo.service.ts:11",{"_index":2994,"title":{},"body":{"injectables/InsightRepoService.html":{}}}],["repo.service.ts:18",{"_index":2997,"title":{},"body":{"injectables/InsightRepoService.html":{}}}],["repo.service.ts:36",{"_index":2999,"title":{},"body":{"injectables/InsightRepoService.html":{}}}],["repo/dtos/repo",{"_index":1398,"title":{},"body":{"classes/CreateInsightDto.html":{},"injectables/InsightRepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/UserReposService.html":{}}}],["repo/dtos/user",{"_index":3955,"title":{},"body":{"controllers/RepoVoteController.html":{},"classes/UserRepoOptionsDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"classes/VotedRepoDto.html":{}}}],["repo/entities/repo.entity",{"_index":334,"title":{},"body":{"modules/AppModule.html":{},"modules/ContributionModule.html":{},"entities/DbContribution.html":{},"entities/DbUserTopRepo.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"modules/StarModule.html":{},"modules/StargazeModule.html":{},"modules/SubmitModule.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"controllers/UserRecommendationController.html":{},"modules/VoteModule.html":{}}}],["repo/entities/repo.to.user.stargazers.entity",{"_index":346,"title":{},"body":{"modules/AppModule.html":{},"controllers/RepoStargazeController.html":{},"modules/StargazeModule.html":{},"injectables/StargazeService.html":{}}}],["repo/entities/repo.to.user.stars.entity",{"_index":342,"title":{},"body":{"modules/AppModule.html":{},"controllers/RepoStarController.html":{},"modules/StarModule.html":{},"injectables/StarService.html":{}}}],["repo/entities/repo.to.user.submissions.entity",{"_index":344,"title":{},"body":{"modules/AppModule.html":{},"controllers/RepoSubmitController.html":{},"modules/SubmitModule.html":{},"injectables/SubmitService.html":{}}}],["repo/entities/repo.to.user.votes.entity",{"_index":340,"title":{},"body":{"modules/AppModule.html":{},"controllers/RepoVoteController.html":{},"classes/UserRepoOptionsDto-1.html":{},"modules/VoteModule.html":{},"injectables/VoteService.html":{},"classes/VotedRepoDto.html":{}}}],["repo/repo.module",{"_index":331,"title":{},"body":{"modules/AppModule.html":{},"modules/ContributionModule.html":{},"modules/StarModule.html":{},"modules/StargazeModule.html":{},"modules/SubmitModule.html":{},"modules/UserModule.html":{},"modules/VoteModule.html":{}}}],["repo/repo.service",{"_index":3588,"title":{},"body":{"controllers/RepoContributionsController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"controllers/UserRecommendationController.html":{}}}],["repo/user",{"_index":371,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"entities/DbUserRepo.html":{},"modules/UserReposModule.html":{},"injectables/UserReposService.html":{}}}],["repo_id",{"_index":192,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"classes/CreateEndorsementDto.html":{},"entities/DbBakedRepo.html":{},"entities/DbContribution.html":{},"entities/DbContributionsProjects.html":{},"entities/DbEndorsement.html":{},"entities/DbInsightRepo.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserRepo.html":{},"entities/DbUserTopRepo.html":{},"injectables/InsightRepoService.html":{},"injectables/RepoService.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/SubmitService.html":{},"classes/TopProjectsDto.html":{},"injectables/UserListStatsService.html":{},"injectables/UserReposService.html":{},"injectables/VoteService.html":{}}}],["repo_name",{"_index":2036,"title":{},"body":{"entities/DbPullRequestGitHubEvents.html":{},"injectables/PullRequestGithubEventsService.html":{}}}],["repo_user_contributions",{"_index":2093,"title":{},"body":{"entities/DbRepoLoginContributions.html":{}}}],["repocontributionscontroller",{"_index":1047,"title":{"controllers/RepoContributionsController.html":{}},"body":{"modules/ContributionModule.html":{},"controllers/RepoContributionsController.html":{}}}],["repocontroller",{"_index":3605,"title":{"controllers/RepoController.html":{}},"body":{"controllers/RepoController.html":{},"modules/RepoModule.html":{}}}],["repofilterfieldsenum",{"_index":3683,"title":{},"body":{"classes/RepoPageOptionsDto.html":{},"miscellaneous/enumerations.html":{}}}],["repofiltermodule",{"_index":3447,"title":{"modules/RepoFilterModule.html":{}},"body":{"modules/PullRequestModule.html":{},"modules/RepoFilterModule.html":{},"modules/RepoModule.html":{},"modules.html":{},"overview.html":{}}}],["repofilterservice",{"_index":3387,"title":{"injectables/RepoFilterService.html":{}},"body":{"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"modules/RepoFilterModule.html":{},"injectables/RepoFilterService.html":{},"injectables/RepoService.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["repoid",{"_index":80,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/ContributionService.html":{},"controllers/RepoVoteController.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/SubmitService.html":{},"injectables/UserListStatsService.html":{},"injectables/VoteService.html":{}}}],["repoids",{"_index":2670,"title":{},"body":{"classes/FilterOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"injectables/PullRequestInsightsService.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{},"injectables/RepoFilterService.html":{},"classes/RepoSearchOptionsDto.html":{}}}],["repoinfo",{"_index":1396,"title":{"classes/RepoInfo.html":{}},"body":{"classes/CreateInsightDto.html":{},"injectables/InsightRepoService.html":{},"classes/RepoInfo.html":{},"classes/UpdateInsightDto.html":{},"controllers/UserInsightsController.html":{},"injectables/UserReposService.html":{}}}],["repoinfo.id",{"_index":4924,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["repomodule",{"_index":275,"title":{"modules/RepoModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ContributionModule.html":{},"modules/RepoModule.html":{},"modules/StarModule.html":{},"modules/StargazeModule.html":{},"modules/SubmitModule.html":{},"modules/UserModule.html":{},"modules/VoteModule.html":{},"modules.html":{},"overview.html":{}}}],["repoorderfieldsenum",{"_index":1095,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"miscellaneous/enumerations.html":{}}}],["repoorderfieldsenum.stars",{"_index":3680,"title":{},"body":{"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{}}}],["repoowneroruser",{"_index":2496,"title":{},"body":{"controllers/EndorsementController.html":{},"injectables/EndorsementService.html":{}}}],["repoowneroruser.tolowercase",{"_index":2603,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["repopageoptionsdto",{"_index":3609,"title":{"classes/RepoPageOptionsDto.html":{}},"body":{"controllers/RepoController.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{}}}],["repopageoptionsdto:37",{"_index":3695,"title":{},"body":{"classes/RepoSearchOptionsDto.html":{}}}],["reporepository",{"_index":3704,"title":{},"body":{"injectables/RepoService.html":{}}}],["report",{"_index":5553,"title":{},"body":{"index.html":{}}}],["repos",{"_index":202,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"classes/CreateInsightDto.html":{},"entities/DbInsight.html":{},"injectables/EndorsementService.html":{},"controllers/HighlightController.html":{},"classes/InsightOptionsDto.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"controllers/PizzaOvenController.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"injectables/RepoFilterService.html":{},"classes/RepoPageOptionsDto.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"classes/UpdateInsightDto.html":{},"controllers/UserController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"injectables/UserListStatsService.html":{},"controllers/UserRecommendationController.html":{},"classes/UserRepoOptionsDto-1.html":{},"classes/VotedRepoDto.html":{},"miscellaneous/enumerations.html":{}}}],["repos\".\"id",{"_index":205,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/RepoService.html":{},"injectables/UserListStatsService.html":{}}}],["repos\".\"updated_at",{"_index":3775,"title":{},"body":{"injectables/RepoService.html":{}}}],["repos')@apioperation({operationid",{"_index":4472,"title":{},"body":{"controllers/UserController.html":{},"controllers/UserListController.html":{}}}],["repos'})@apibody({type",{"_index":4901,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["repos.dto",{"_index":3956,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["repos.dto.ts",{"_index":5355,"title":{},"body":{"classes/UserRepoOptionsDto-1.html":{},"classes/VotedRepoDto.html":{}}}],["repos.dto.ts:13",{"_index":5356,"title":{},"body":{"classes/UserRepoOptionsDto-1.html":{}}}],["repos.dto.ts:23",{"_index":5416,"title":{},"body":{"classes/VotedRepoDto.html":{}}}],["repos.dto.ts:26",{"_index":5414,"title":{},"body":{"classes/VotedRepoDto.html":{}}}],["repos.full_name",{"_index":3796,"title":{},"body":{"injectables/RepoService.html":{}}}],["repos.id",{"_index":223,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/RepoFilterService.html":{},"injectables/UserListStatsService.html":{}}}],["repos.module",{"_index":372,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["repos.module.ts",{"_index":5363,"title":{},"body":{"modules/UserReposModule.html":{}}}],["repos.service",{"_index":5364,"title":{},"body":{"modules/UserReposModule.html":{}}}],["repos.service.ts",{"_index":5366,"title":{},"body":{"injectables/UserReposService.html":{}}}],["repos.service.ts:13",{"_index":5369,"title":{},"body":{"injectables/UserReposService.html":{}}}],["repos.service.ts:20",{"_index":5373,"title":{},"body":{"injectables/UserReposService.html":{}}}],["repos.service.ts:26",{"_index":5375,"title":{},"body":{"injectables/UserReposService.html":{}}}],["repos.service.ts:40",{"_index":5372,"title":{},"body":{"injectables/UserReposService.html":{}}}],["repos.service.ts:50",{"_index":5374,"title":{},"body":{"injectables/UserReposService.html":{}}}],["reposearchoptionsdto",{"_index":3613,"title":{"classes/RepoSearchOptionsDto.html":{}},"body":{"controllers/RepoController.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{}}}],["reposervice",{"_index":3587,"title":{"injectables/RepoService.html":{}},"body":{"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"modules/RepoModule.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"controllers/UserRecommendationController.html":{},"overview.html":{}}}],["repositories",{"_index":1455,"title":{},"body":{"classes/CreateUserHighlightDto.html":{},"entities/DbUserHighlight.html":{}}}],["repository",{"_index":20,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/CommitAuthorsService.html":{},"injectables/CommitsService.html":{},"injectables/ContributionService.html":{},"injectables/CouponService.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateInsightDto.html":{},"injectables/CustomerService.html":{},"entities/DbBakedRepo.html":{},"entities/DbContribution.html":{},"entities/DbEndorsement.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbPullRequestGitHubEvents.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserTopRepo.html":{},"injectables/EmojiService.html":{},"injectables/EndorsementService.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"injectables/LogService.html":{},"controllers/PizzaOvenController.html":{},"injectables/PizzaOvenService.html":{},"injectables/PullRequestGithubEventsService.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestReviewService.html":{},"injectables/PullRequestService.html":{},"controllers/RepoController.html":{},"injectables/RepoService.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeSubscriptionService.html":{},"injectables/SubmitService.html":{},"classes/UpdateInsightDto.html":{},"injectables/UserCollaborationService.html":{},"injectables/UserFollowService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserListService.html":{},"injectables/UserListStatsService.html":{},"injectables/UserNotificationService.html":{},"injectables/UserOrganizationService.html":{},"injectables/UserReposService.html":{},"injectables/VoteService.html":{},"index.html":{},"properties.html":{}}}],["repostarcontroller",{"_index":3799,"title":{"controllers/RepoStarController.html":{}},"body":{"controllers/RepoStarController.html":{},"modules/StarModule.html":{}}}],["repostargazecontroller",{"_index":3846,"title":{"controllers/RepoStargazeController.html":{}},"body":{"controllers/RepoStargazeController.html":{},"modules/StargazeModule.html":{}}}],["repostargazerepository",{"_index":4011,"title":{},"body":{"injectables/StargazeService.html":{}}}],["repostarrepository",{"_index":3982,"title":{},"body":{"injectables/StarService.html":{}}}],["repostoadd",{"_index":4933,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["repostoadd.map(async",{"_index":4937,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["repostoremove",{"_index":4921,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["repostoremove.map(async",{"_index":4927,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["repostoremoverequests",{"_index":4926,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["reposubmitcontroller",{"_index":3884,"title":{"controllers/RepoSubmitController.html":{}},"body":{"controllers/RepoSubmitController.html":{},"modules/SubmitModule.html":{}}}],["reposubmitrepository",{"_index":4176,"title":{},"body":{"injectables/SubmitService.html":{}}}],["repotoaddrequests",{"_index":4936,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["repovotecontroller",{"_index":3921,"title":{"controllers/RepoVoteController.html":{}},"body":{"controllers/RepoVoteController.html":{},"modules/VoteModule.html":{}}}],["repovoterepository",{"_index":5394,"title":{},"body":{"injectables/VoteService.html":{}}}],["representation",{"_index":5636,"title":{},"body":{"index.html":{}}}],["representing",{"_index":1662,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbCoupon.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbPullRequestGitHubEvents.html":{},"entities/DbPullRequestReview.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserNotification.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"classes/SupabaseAuthDto.html":{}}}],["req",{"_index":4093,"title":{},"body":{"controllers/StripeWebhookController.html":{},"injectables/SupabaseStrategy.html":{},"index.html":{}}}],["req.headers",{"_index":4145,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["request",{"_index":392,"title":{},"body":{"modules/AppModule.html":{},"controllers/BlogSummaryController.html":{},"controllers/CodeExplanationController.html":{},"controllers/CodeRefactorSuggestionController.html":{},"controllers/CodeTestSuggestionController.html":{},"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"classes/CreateUserCollaborationDto.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbPullRequestGitHubEvents.html":{},"entities/DbPullRequestReview.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"guards/EndorsementTokenGuard.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"controllers/HighlightController.html":{},"injectables/HttpLoggerMiddleware.html":{},"controllers/InsightController.html":{},"controllers/IssueSummaryController.html":{},"controllers/PizzaOvenController.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestInsightsService.html":{},"modules/PullRequestModule.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestReviewService.html":{},"injectables/PullRequestService.html":{},"classes/UpdateUserCollaborationDto.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"controllers/UserListStatsController.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["request'})@apibearerauth()@useguards(supabaseguard)@apinotfoundresponse({description",{"_index":4400,"title":{},"body":{"controllers/UserCollaborationController.html":{}}}],["request'})@apibody({type",{"_index":784,"title":{},"body":{"controllers/BlogSummaryController.html":{},"controllers/CodeExplanationController.html":{},"controllers/CodeRefactorSuggestionController.html":{},"controllers/CodeTestSuggestionController.html":{},"controllers/InsightController.html":{},"controllers/IssueSummaryController.html":{},"controllers/PizzaOvenController.html":{},"controllers/PullRequestDescriptionController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{}}}],["request'})@apiconflictresponse({description",{"_index":4390,"title":{},"body":{"controllers/UserCollaborationController.html":{},"controllers/UserHighlightsController.html":{}}}],["request'})@apiparam({name",{"_index":2797,"title":{},"body":{"controllers/HighlightController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserListController.html":{},"controllers/UserListStatsController.html":{}}}],["request'})@apiunprocessableentityresponse({description",{"_index":4857,"title":{},"body":{"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["request.controller",{"_index":3450,"title":{},"body":{"modules/PullRequestModule.html":{}}}],["request.controller.ts",{"_index":3281,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["request.controller.ts:32",{"_index":3297,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["request.controller.ts:43",{"_index":3300,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["request.controller.ts:53",{"_index":3289,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["request.controller.ts:66",{"_index":3294,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["request.entity",{"_index":390,"title":{},"body":{"modules/AppModule.html":{},"modules/ContributionModule.html":{},"injectables/ContributionService.html":{},"modules/ContributorModule.html":{},"entities/DbPullRequestReview.html":{},"controllers/PullRequestController.html":{},"modules/PullRequestModule.html":{},"injectables/PullRequestService.html":{},"controllers/UserController.html":{},"modules/UserListModule.html":{},"injectables/UserListService.html":{}}}],["request.entity.ts",{"_index":1900,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:100",{"_index":1980,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:107",{"_index":1987,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:127",{"_index":1966,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:137",{"_index":1956,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:144",{"_index":1933,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:151",{"_index":1931,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:16",{"_index":1953,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:161",{"_index":1929,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:171",{"_index":1928,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:181",{"_index":1945,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:191",{"_index":1940,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:201",{"_index":1971,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:208",{"_index":1973,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:218",{"_index":1996,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:228",{"_index":1968,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:23",{"_index":1978,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:236",{"_index":1941,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:244",{"_index":1924,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:252",{"_index":1947,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:260",{"_index":1937,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:271",{"_index":1950,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:279",{"_index":1943,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:31",{"_index":1976,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:38",{"_index":1985,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:45",{"_index":1949,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:52",{"_index":1970,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:59",{"_index":1969,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:66",{"_index":1977,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:73",{"_index":1995,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:83",{"_index":1983,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:93",{"_index":1989,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.headers[\"x",{"_index":2627,"title":{},"body":{"guards/EndorsementTokenGuard.html":{}}}],["request.module",{"_index":387,"title":{},"body":{"modules/AppModule.html":{},"modules/ContributorModule.html":{},"modules/UserModule.html":{}}}],["request.module.ts",{"_index":3448,"title":{},"body":{"modules/PullRequestModule.html":{}}}],["request.service",{"_index":1234,"title":{},"body":{"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"controllers/PullRequestController.html":{},"modules/PullRequestModule.html":{},"controllers/UserController.html":{}}}],["request.service.ts",{"_index":3480,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["request.service.ts:109",{"_index":3507,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["request.service.ts:174",{"_index":3501,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["request.service.ts:21",{"_index":3493,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["request.service.ts:228",{"_index":3509,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["request.service.ts:266",{"_index":3503,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["request.service.ts:285",{"_index":3499,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["request.service.ts:29",{"_index":3494,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["request.service.ts:323",{"_index":3505,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["request.service.ts:35",{"_index":3517,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["request.service.ts:361",{"_index":3513,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["request.service.ts:47",{"_index":3516,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["request.service.ts:60",{"_index":3495,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["request.service.ts:76",{"_index":3497,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["request.user",{"_index":6022,"title":{},"body":{"miscellaneous/variables.html":{}}}],["request_emailed_at",{"_index":2212,"title":{},"body":{"entities/DbUserCollaboration.html":{}}}],["request_user",{"_index":2213,"title":{},"body":{"entities/DbUserCollaboration.html":{},"injectables/UserCollaborationService.html":{}}}],["request_user_id",{"_index":2214,"title":{},"body":{"entities/DbUserCollaboration.html":{}}}],["requested",{"_index":4391,"title":{},"body":{"controllers/UserCollaborationController.html":{},"miscellaneous/variables.html":{}}}],["requester",{"_index":4415,"title":{},"body":{"controllers/UserCollaborationController.html":{}}}],["requester.role",{"_index":4417,"title":{},"body":{"controllers/UserCollaborationController.html":{}}}],["requestmethod",{"_index":300,"title":{},"body":{"modules/AppModule.html":{}}}],["requestmethod.all",{"_index":512,"title":{},"body":{"modules/AppModule.html":{}}}],["requests",{"_index":197,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"controllers/CodeExplanationController.html":{},"controllers/CodeRefactorSuggestionController.html":{},"controllers/CodeTestSuggestionController.html":{},"controllers/ContributorController.html":{},"entities/DbContribution.html":{},"entities/DbPRInsight.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserController.html":{},"injectables/UserListStatsService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["requests'})@apibody({type",{"_index":4393,"title":{},"body":{"controllers/UserCollaborationController.html":{}}}],["requests/code",{"_index":893,"title":{},"body":{"controllers/CodeExplanationController.html":{},"injectables/CodeExplanationService.html":{},"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"controllers/CodeTestSuggestionController.html":{},"injectables/CodeTestSuggestionService.html":{}}}],["requests/dtos/create",{"_index":2697,"title":{},"body":{"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{}}}],["requests/dtos/pull",{"_index":1235,"title":{},"body":{"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"classes/DbPullRequestContributor.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"miscellaneous/enumerations.html":{}}}],["requests/entities/pull",{"_index":389,"title":{},"body":{"modules/AppModule.html":{},"modules/ContributionModule.html":{},"injectables/ContributionService.html":{},"modules/ContributorModule.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbPullRequestReview.html":{},"controllers/UserController.html":{},"modules/UserListModule.html":{},"injectables/UserListService.html":{}}}],["requests/pull",{"_index":386,"title":{},"body":{"modules/AppModule.html":{},"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"modules/ContributorModule.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestInsightsService.html":{},"modules/PullRequestModule.html":{},"injectables/PullRequestReviewService.html":{},"injectables/PullRequestService.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{}}}],["require(\"node",{"_index":871,"title":{},"body":{"interfaces/ChatResponse.html":{},"injectables/OpenAiService.html":{}}}],["required",{"_index":3574,"title":{},"body":{"controllers/RepoContributionsController.html":{},"injectables/StripeService.html":{},"controllers/UserController.html":{},"controllers/UserListStatsController.html":{}}}],["requires",{"_index":5995,"title":{},"body":{"miscellaneous/variables.html":{}}}],["reserved",{"_index":4357,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["reset",{"_index":249,"title":{},"body":{"modules/ApiServicesModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/BlogSummaryModule.html":{},"modules/ContributionModule.html":{},"modules/ContributorModule.html":{},"modules/CouponModule.html":{},"modules/CustomerModule.html":{},"modules/EmojiModule.html":{},"modules/EndorsementModule.html":{},"modules/HighlightModule.html":{},"modules/InsightsModule.html":{},"modules/IssueSummaryModule.html":{},"modules/LogModule.html":{},"modules/OpenAiModule.html":{},"modules/PizzaOvenModule.html":{},"modules/PullRequestModule.html":{},"modules/RepoFilterModule.html":{},"modules/RepoModule.html":{},"modules/StarModule.html":{},"modules/StargazeModule.html":{},"modules/StripeModule.html":{},"modules/StripeSubscriptionModule.html":{},"modules/StripeWebHookModule.html":{},"modules/SubmitModule.html":{},"modules/TierModule.html":{},"modules/TimescaleModule.html":{},"modules/UserListModule.html":{},"modules/UserModule.html":{},"modules/UserReposModule.html":{},"modules/VoteModule.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["resets",{"_index":5957,"title":{},"body":{"miscellaneous/variables.html":{}}}],["resource",{"_index":6003,"title":{},"body":{"miscellaneous/variables.html":{}}}],["resources",{"_index":5930,"title":{},"body":{"miscellaneous/variables.html":{}}}],["resp.status",{"_index":3275,"title":{},"body":{"injectables/PizzaOvenService.html":{}}}],["respond",{"_index":5965,"title":{},"body":{"miscellaneous/variables.html":{}}}],["response",{"_index":837,"title":{},"body":{"injectables/BlogSummaryService.html":{},"interfaces/ChatResponse.html":{},"injectables/HttpLoggerMiddleware.html":{},"injectables/IssueSummaryService.html":{},"injectables/OpenAiService.html":{},"injectables/PullRequestDescriptionService.html":{},"miscellaneous/variables.html":{}}}],["response.decorator",{"_index":1232,"title":{},"body":{"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"controllers/EmojiController.html":{},"controllers/EndorsementController.html":{},"controllers/HighlightController.html":{},"controllers/PizzaOvenController.html":{},"controllers/PullRequestController.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"controllers/UserListStatsController.html":{},"controllers/UserRecommendationController.html":{}}}],["response.decorator.ts",{"_index":5729,"title":{},"body":{"miscellaneous/variables.html":{}}}],["response.dto",{"_index":648,"title":{},"body":{"controllers/AuthController.html":{}}}],["response.dto.ts",{"_index":4193,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["response.dto.ts:105",{"_index":4227,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["response.dto.ts:111",{"_index":4205,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["response.dto.ts:117",{"_index":4224,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["response.dto.ts:123",{"_index":4210,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["response.dto.ts:129",{"_index":4203,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["response.dto.ts:136",{"_index":4230,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["response.dto.ts:14",{"_index":4239,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["response.dto.ts:143",{"_index":4214,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["response.dto.ts:149",{"_index":4199,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["response.dto.ts:20",{"_index":4231,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["response.dto.ts:26",{"_index":4207,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["response.dto.ts:32",{"_index":4198,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["response.dto.ts:38",{"_index":4221,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["response.dto.ts:44",{"_index":4200,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["response.dto.ts:50",{"_index":4235,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["response.dto.ts:56",{"_index":4218,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["response.dto.ts:62",{"_index":4220,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["response.dto.ts:69",{"_index":4215,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["response.dto.ts:75",{"_index":4194,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["response.dto.ts:8",{"_index":4211,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["response.dto.ts:81",{"_index":4229,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["response.dto.ts:87",{"_index":4238,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["response.dto.ts:93",{"_index":4234,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["response.dto.ts:99",{"_index":4195,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["response.json",{"_index":888,"title":{},"body":{"interfaces/ChatResponse.html":{},"injectables/OpenAiService.html":{}}}],["response.ok",{"_index":886,"title":{},"body":{"interfaces/ChatResponse.html":{},"injectables/OpenAiService.html":{}}}],["response.on(\"finish",{"_index":2875,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{}}}],["rest",{"_index":5926,"title":{},"body":{"miscellaneous/variables.html":{}}}],["restriction",{"_index":5650,"title":{},"body":{"license.html":{}}}],["results",{"_index":238,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"modules/ApiServicesModule.html":{},"modules/AppModule.html":{},"classes/ApplyUserCouponDto.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"classes/BakeRepoDto.html":{},"controllers/BlogSummaryController.html":{},"modules/BlogSummaryModule.html":{},"injectables/BlogSummaryService.html":{},"interfaces/ChatResponse.html":{},"controllers/CodeExplanationController.html":{},"injectables/CodeExplanationService.html":{},"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"controllers/CodeTestSuggestionController.html":{},"injectables/CodeTestSuggestionService.html":{},"classes/CollaboratorsDto.html":{},"classes/CommitAuthorDto.html":{},"injectables/CommitAuthorsService.html":{},"classes/CommitsDto.html":{},"injectables/CommitsService.html":{},"modules/ContributionModule.html":{},"classes/ContributionPageMetaDto.html":{},"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"classes/ContributionsByProjectDto.html":{},"classes/ContributionsPageDto.html":{},"classes/ContributionsTimeframeDto.html":{},"classes/Contributor.html":{},"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"modules/ContributorModule.html":{},"classes/ContributorPullRequestsDto.html":{},"modules/CouponModule.html":{},"injectables/CouponService.html":{},"classes/CreateBlogSummaryDto.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateInsightDto.html":{},"classes/CreateInsightMemberDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/CreateLogDto.html":{},"classes/CreateUserCollaborationDto.html":{},"classes/CreateUserHighlightDto.html":{},"classes/CreateUserListDto.html":{},"injectables/CustomLogger.html":{},"modules/CustomerModule.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"entities/DbBakedRepo.html":{},"entities/DbCommitAuthors.html":{},"entities/DbCommits.html":{},"entities/DbContribution.html":{},"entities/DbContributionStatTimeframe.html":{},"entities/DbContributionsProjects.html":{},"entities/DbContributorCategoryTimeframe.html":{},"entities/DbCoupon.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"classes/DbFilteredUser.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbPullRequestGitHubEvents.html":{},"entities/DbPullRequestReview.html":{},"entities/DbRepoLoginContributions.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"classes/DbTimezone.html":{},"classes/DbTopUser.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightReactionResponse.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserListContributorStat.html":{},"entities/DbUserListContributorStat-1.html":{},"entities/DbUserNotification.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"controllers/EmojiController.html":{},"modules/EmojiModule.html":{},"injectables/EmojiService.html":{},"controllers/EndorsementController.html":{},"modules/EndorsementModule.html":{},"injectables/EndorsementService.html":{},"guards/EndorsementTokenGuard.html":{},"classes/FilterListContributorsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/FilteredUsersDto.html":{},"classes/FollowManyUsersDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"controllers/HighlightController.html":{},"modules/HighlightModule.html":{},"classes/HighlightOptionsDto.html":{},"injectables/HttpLoggerMiddleware.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"injectables/InsightRepoService.html":{},"modules/InsightsModule.html":{},"injectables/InsightsService.html":{},"controllers/IssueSummaryController.html":{},"modules/IssueSummaryModule.html":{},"injectables/IssueSummaryService.html":{},"modules/LogModule.html":{},"injectables/LogService.html":{},"modules/OpenAiModule.html":{},"injectables/OpenAiService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaParameters.html":{},"classes/PageOptionsDto.html":{},"injectables/PagerService.html":{},"interfaces/PaginationInput.html":{},"controllers/PizzaOvenController.html":{},"modules/PizzaOvenModule.html":{},"injectables/PizzaOvenService.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestGithubEventsService.html":{},"injectables/PullRequestInsightsService.html":{},"modules/PullRequestModule.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestReviewService.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"modules/RepoFilterModule.html":{},"injectables/RepoFilterService.html":{},"classes/RepoInfo.html":{},"modules/RepoModule.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"modules/StarModule.html":{},"injectables/StarService.html":{},"modules/StargazeModule.html":{},"injectables/StargazeService.html":{},"modules/StripeModule.html":{},"injectables/StripeService.html":{},"modules/StripeSubscriptionModule.html":{},"injectables/StripeSubscriptionService.html":{},"modules/StripeWebHookModule.html":{},"controllers/StripeWebhookController.html":{},"modules/SubmitModule.html":{},"injectables/SubmitService.html":{},"classes/SupabaseAuthDto.html":{},"injectables/SupabaseGuard.html":{},"injectables/SupabaseStrategy.html":{},"modules/TierModule.html":{},"injectables/TierService.html":{},"modules/TimescaleModule.html":{},"classes/TopProjectsDto.html":{},"classes/TopUsersDto.html":{},"classes/UpdateEndorsementDto.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateInsightMemberDto.html":{},"classes/UpdateUserCollaborationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowingController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"modules/UserListModule.html":{},"classes/UserListMostActiveContributorsDto.html":{},"injectables/UserListService.html":{},"controllers/UserListStatsController.html":{},"injectables/UserListStatsService.html":{},"modules/UserModule.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"classes/UserOnboardingDto.html":{},"injectables/UserOrganizationService.html":{},"controllers/UserRecommendationController.html":{},"classes/UserRepoOptionsDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"modules/UserReposModule.html":{},"injectables/UserReposService.html":{},"modules/VoteModule.html":{},"injectables/VoteService.html":{},"classes/VotedRepoDto.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["results.filter(boolean",{"_index":4637,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["results[index",{"_index":3787,"title":{},"body":{"injectables/RepoService.html":{}}}],["retrieves",{"_index":2512,"title":{},"body":{"controllers/EndorsementController.html":{},"controllers/HighlightController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserListController.html":{},"controllers/UserNotificationController.html":{}}}],["return",{"_index":71,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"controllers/AuthController.html":{},"controllers/BlogSummaryController.html":{},"injectables/BlogSummaryService.html":{},"interfaces/ChatResponse.html":{},"controllers/CodeExplanationController.html":{},"injectables/CodeExplanationService.html":{},"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"controllers/CodeTestSuggestionController.html":{},"injectables/CodeTestSuggestionService.html":{},"injectables/CommitAuthorsService.html":{},"injectables/CommitsService.html":{},"injectables/ContributionService.html":{},"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"injectables/CouponService.html":{},"injectables/CustomLogger.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"controllers/EmojiController.html":{},"injectables/EmojiService.html":{},"controllers/EndorsementController.html":{},"injectables/EndorsementService.html":{},"guards/EndorsementTokenGuard.html":{},"classes/FilterListContributorsDto.html":{},"classes/FilteredUsersDto.html":{},"controllers/HealthController.html":{},"controllers/HighlightController.html":{},"injectables/HttpLoggerMiddleware.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"controllers/IssueSummaryController.html":{},"injectables/IssueSummaryService.html":{},"injectables/LogService.html":{},"injectables/OpenAiService.html":{},"classes/PageOptionsDto.html":{},"injectables/PagerService.html":{},"interfaces/PaginationInput.html":{},"controllers/PizzaOvenController.html":{},"injectables/PizzaOvenService.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestGithubEventsService.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestReviewService.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"injectables/RepoFilterService.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeService.html":{},"injectables/StripeSubscriptionService.html":{},"controllers/StripeWebhookController.html":{},"injectables/SubmitService.html":{},"injectables/SupabaseStrategy.html":{},"classes/TopUsersDto.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowingController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"injectables/UserListService.html":{},"controllers/UserListStatsController.html":{},"injectables/UserListStatsService.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"injectables/UserOrganizationService.html":{},"controllers/UserRecommendationController.html":{},"injectables/UserReposService.html":{},"injectables/VoteService.html":{},"miscellaneous/variables.html":{}}}],["returned",{"_index":5950,"title":{},"body":{"miscellaneous/variables.html":{}}}],["returns",{"_index":298,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"controllers/BlogSummaryController.html":{},"injectables/BlogSummaryService.html":{},"controllers/CodeExplanationController.html":{},"injectables/CodeExplanationService.html":{},"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"controllers/CodeTestSuggestionController.html":{},"injectables/CodeTestSuggestionService.html":{},"injectables/CommitAuthorsService.html":{},"injectables/CommitsService.html":{},"injectables/ContributionService.html":{},"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"injectables/CouponService.html":{},"injectables/CustomLogger.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"controllers/EmojiController.html":{},"injectables/EmojiService.html":{},"controllers/EndorsementController.html":{},"injectables/EndorsementService.html":{},"guards/EndorsementTokenGuard.html":{},"controllers/HealthController.html":{},"controllers/HighlightController.html":{},"injectables/HttpLoggerMiddleware.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"controllers/IssueSummaryController.html":{},"injectables/IssueSummaryService.html":{},"injectables/LogService.html":{},"injectables/OpenAiService.html":{},"injectables/PagerService.html":{},"controllers/PizzaOvenController.html":{},"injectables/PizzaOvenService.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestGithubEventsService.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestReviewService.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"injectables/RepoFilterService.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeService.html":{},"injectables/StripeSubscriptionService.html":{},"controllers/StripeWebhookController.html":{},"injectables/SubmitService.html":{},"injectables/SupabaseStrategy.html":{},"injectables/TierService.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowingController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"injectables/UserListService.html":{},"controllers/UserListStatsController.html":{},"injectables/UserListStatsService.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"injectables/UserOrganizationService.html":{},"controllers/UserRecommendationController.html":{},"injectables/UserReposService.html":{},"injectables/VoteService.html":{}}}],["review",{"_index":2067,"title":{},"body":{"entities/DbPullRequestReview.html":{}}}],["review.entity",{"_index":393,"title":{},"body":{"modules/AppModule.html":{},"controllers/PullRequestController.html":{},"modules/PullRequestModule.html":{},"injectables/PullRequestReviewService.html":{}}}],["review.entity.ts",{"_index":2063,"title":{},"body":{"entities/DbPullRequestReview.html":{}}}],["review.entity.ts:16",{"_index":2070,"title":{},"body":{"entities/DbPullRequestReview.html":{}}}],["review.entity.ts:20",{"_index":2075,"title":{},"body":{"entities/DbPullRequestReview.html":{}}}],["review.entity.ts:27",{"_index":2077,"title":{},"body":{"entities/DbPullRequestReview.html":{}}}],["review.entity.ts:37",{"_index":2068,"title":{},"body":{"entities/DbPullRequestReview.html":{}}}],["review.entity.ts:47",{"_index":2072,"title":{},"body":{"entities/DbPullRequestReview.html":{}}}],["review.entity.ts:57",{"_index":2080,"title":{},"body":{"entities/DbPullRequestReview.html":{}}}],["review.entity.ts:64",{"_index":2079,"title":{},"body":{"entities/DbPullRequestReview.html":{}}}],["review.service",{"_index":3306,"title":{},"body":{"controllers/PullRequestController.html":{},"modules/PullRequestModule.html":{}}}],["review.service.ts",{"_index":3470,"title":{},"body":{"injectables/PullRequestReviewService.html":{}}}],["review.service.ts:13",{"_index":3476,"title":{},"body":{"injectables/PullRequestReviewService.html":{}}}],["review.service.ts:7",{"_index":3473,"title":{},"body":{"injectables/PullRequestReviewService.html":{}}}],["reviewed",{"_index":1709,"title":{},"body":{"entities/DbContributionStatTimeframe.html":{},"entities/DbRepoLoginContributions.html":{},"entities/DbUserListContributorStat.html":{},"entities/DbUserListContributorStat-1.html":{}}}],["reviewer",{"_index":2076,"title":{},"body":{"entities/DbPullRequestReview.html":{}}}],["reviewer_login",{"_index":2066,"title":{},"body":{"entities/DbPullRequestReview.html":{}}}],["reviews",{"_index":3292,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["rights",{"_index":5652,"title":{},"body":{"license.html":{}}}],["ritadee",{"_index":2311,"title":{},"body":{"classes/DbUserHighlightReactionResponse.html":{},"classes/HighlightOptionsDto.html":{}}}],["ritadee'})@isstring()@isoptional",{"_index":2859,"title":{},"body":{"classes/HighlightOptionsDto.html":{}}}],["role",{"_index":662,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/ChatResponse.html":{},"injectables/OpenAiService.html":{},"classes/SupabaseAuthDto.html":{}}}],["root",{"_index":5878,"title":{},"body":{"miscellaneous/variables.html":{}}}],["rounded",{"_index":2727,"title":{},"body":{"classes/GeneratePullRequestDescriptionDto.html":{}}}],["route",{"_index":5931,"title":{},"body":{"miscellaneous/variables.html":{}}}],["row_num",{"_index":3375,"title":{},"body":{"injectables/PullRequestGithubEventsService.html":{}}}],["rows",{"_index":3365,"title":{},"body":{"injectables/PullRequestGithubEventsService.html":{}}}],["rsa:4096",{"_index":5499,"title":{},"body":{"index.html":{}}}],["rule",{"_index":5556,"title":{},"body":{"index.html":{}}}],["run",{"_index":5445,"title":{},"body":{"index.html":{}}}],["running",{"_index":5543,"title":{},"body":{"index.html":{}}}],["russian",{"_index":1337,"title":{},"body":{"classes/CreateBlogSummaryDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{}}}],["rxjs",{"_index":3267,"title":{},"body":{"injectables/PizzaOvenService.html":{}}}],["same",{"_index":5517,"title":{},"body":{"index.html":{}}}],["san",{"_index":4225,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["sauced",{"_index":1470,"title":{},"body":{"classes/CreateUserHighlightDto.html":{},"entities/DbContributionsProjects.html":{},"entities/DbInsight.html":{},"entities/DbRepoToUserSubmissions.html":{},"controllers/HealthController.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{},"index.html":{},"license.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["sauced!})@isstring()@minlength(3)@maxlength(500",{"_index":1444,"title":{},"body":{"classes/CreateUserHighlightDto.html":{}}}],["sauced'})@isurl()@isoptional",{"_index":4343,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["sauced/ai",{"_index":1474,"title":{},"body":{"classes/CreateUserHighlightDto.html":{},"entities/DbUserHighlight.html":{}}}],["sauced/api.opensauced.pizza",{"_index":5578,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["sauced/api.opensauced.pizza#readme",{"_index":5716,"title":{},"body":{"properties.html":{}}}],["sauced/api.opensauced.pizza.git",{"_index":5720,"title":{},"body":{"properties.html":{}}}],["sauced/api.opensauced.pizza/issues",{"_index":5718,"title":{},"body":{"properties.html":{}}}],["sauced/code",{"_index":5865,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sauced/hot/pull/320",{"_index":1695,"title":{},"body":{"entities/DbContribution.html":{}}}],["sauced/hot/pull/320'})@column({type",{"_index":1687,"title":{},"body":{"entities/DbContribution.html":{}}}],["sauced/insights",{"_index":769,"title":{},"body":{"classes/BakeRepoDto.html":{},"classes/CreateInsightDto.html":{},"classes/CreateUserHighlightDto.html":{},"entities/DbInsightRepo.html":{},"entities/DbPullRequest.html":{},"entities/DbPullRequestGitHubEvents.html":{},"entities/DbUserHighlight.html":{},"classes/DbUserHighlightReactionResponse.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserRepo.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoInfo.html":{}}}],["sauced/insights'})@column({type",{"_index":1858,"title":{},"body":{"entities/DbInsightRepo.html":{},"entities/DbPullRequest.html":{},"entities/DbPullRequestGitHubEvents.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserRepo.html":{}}}],["sauced/insights'})@isstring",{"_index":759,"title":{},"body":{"classes/BakeRepoDto.html":{},"classes/RepoInfo.html":{}}}],["sauced/insights'})@isstring()@isoptional",{"_index":2675,"title":{},"body":{"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{}}}],["sauced/insights.git",{"_index":1615,"title":{},"body":{"entities/DbBakedRepo.html":{}}}],["sauced/insights.git'})@column({type",{"_index":1588,"title":{},"body":{"entities/DbBakedRepo.html":{}}}],["sauced/insights/pull/1",{"_index":1469,"title":{},"body":{"classes/CreateUserHighlightDto.html":{},"entities/DbUserHighlight.html":{}}}],["sauced/insights/pull/1'})@column('text",{"_index":2266,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["sauced/insights/pull/1'})@isstring",{"_index":1466,"title":{},"body":{"classes/CreateUserHighlightDto.html":{}}}],["sauced/insights/pull/1})@column('text",{"_index":2247,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["sauced/insights/pulls",{"_index":1387,"title":{},"body":{"classes/CreateEndorsementDto.html":{}}}],["sauced/insights/pulls'})@isstring",{"_index":1381,"title":{},"body":{"classes/CreateEndorsementDto.html":{}}}],["saucedopen",{"_index":4233,"title":{},"body":{"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{}}}],["saucedopen'})@isstring()@matches(/^(?!.*?admin)(?!.*?twitter)\\w{0,15}$/i",{"_index":4352,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["sauceduser",{"_index":1214,"title":{},"body":{"classes/Contributor.html":{},"classes/CreateUserListDto.html":{},"entities/DbUserListContributor.html":{}}}],["sauceduser'})@column({type",{"_index":2345,"title":{},"body":{"entities/DbUserListContributor.html":{}}}],["saucy",{"_index":538,"title":{},"body":{"classes/ApplyUserCouponDto.html":{},"entities/DbCoupon.html":{},"classes/SupabaseAuthDto.html":{}}}],["saucy'})@isstring",{"_index":531,"title":{},"body":{"classes/ApplyUserCouponDto.html":{}}}],["saving",{"_index":5946,"title":{},"body":{"miscellaneous/variables.html":{}}}],["schema",{"_index":5618,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["script",{"_index":5532,"title":{},"body":{"index.html":{}}}],["scripts",{"_index":5599,"title":{},"body":{"index.html":{}}}],["search",{"_index":2687,"title":{},"body":{"classes/FilteredUsersDto.html":{},"controllers/RepoController.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/UserController.html":{}}}],["searchallpullrequestcontributors",{"_index":1217,"title":{},"body":{"controllers/ContributorController.html":{}}}],["searchallpullrequestcontributors(pageoptionsdto",{"_index":1218,"title":{},"body":{"controllers/ContributorController.html":{}}}],["searchallpullrequests",{"_index":3285,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["searchallpullrequests(@query",{"_index":3311,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["searchallpullrequests(pageoptionsdto",{"_index":3298,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["searches",{"_index":1221,"title":{},"body":{"controllers/ContributorController.html":{},"controllers/PullRequestController.html":{}}}],["seconds](https://en.wikipedia.org/wiki/unix_time",{"_index":5959,"title":{},"body":{"miscellaneous/variables.html":{}}}],["secretkey",{"_index":5915,"title":{},"body":{"miscellaneous/variables.html":{}}}],["secs",{"_index":6015,"title":{},"body":{"miscellaneous/variables.html":{}}}],["secure",{"_index":5488,"title":{},"body":{"index.html":{}}}],["see",{"_index":4287,"title":{},"body":{"injectables/TierService.html":{},"index.html":{}}}],["select",{"_index":91,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/ContributionService.html":{},"entities/DbCommitAuthors.html":{},"entities/DbContribution.html":{},"entities/DbContributionStatTimeframe.html":{},"entities/DbContributionsProjects.html":{},"entities/DbContributorCategoryTimeframe.html":{},"entities/DbEmoji.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbPullRequestGitHubEvents.html":{},"entities/DbRepoLoginContributions.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserListContributorStat.html":{},"entities/DbUserListContributorStat-1.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"injectables/InsightsService.html":{},"injectables/PullRequestGithubEventsService.html":{},"injectables/RepoFilterService.html":{},"injectables/RepoService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserListStatsService.html":{}}}],["select(\"author_login",{"_index":3549,"title":{},"body":{"injectables/PullRequestService.html":{},"injectables/UserListService.html":{}}}],["select(\"count(distinct",{"_index":3727,"title":{},"body":{"injectables/RepoService.html":{}}}],["select(\"current_month.author_login",{"_index":3546,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["select(\"distinct",{"_index":5164,"title":{},"body":{"injectables/UserListService.html":{}}}],["select(\"emoji_id",{"_index":4814,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["select(\"login",{"_index":1165,"title":{},"body":{"injectables/ContributionService.html":{}}}],["select(\"previous_month.author_login",{"_index":3554,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["select(\"pull_requests.author_login",{"_index":1169,"title":{},"body":{"injectables/ContributionService.html":{},"injectables/PullRequestService.html":{}}}],["select(\"split_part(repos.full_name",{"_index":185,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["select(\"users.id",{"_index":3789,"title":{},"body":{"injectables/RepoService.html":{}}}],["select(\"users.login",{"_index":87,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/EndorsementService.html":{},"injectables/UserListStatsService.html":{}}}],["select(['repo.id",{"_index":3733,"title":{},"body":{"injectables/RepoService.html":{}}}],["select(`coalesce(count(\"pr\".\"id",{"_index":3424,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["select(`to_char('${startdate}'::timestamp",{"_index":3433,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["select(this.hacktoberfestprdatecharbuilder(interval",{"_index":3431,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["selected",{"_index":1883,"title":{},"body":{"entities/DbPRInsight.html":{}}}],["selectquerybuilder",{"_index":21,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightsService.html":{},"injectables/PagerService.html":{},"interfaces/PaginationInput.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/RepoFilterService.html":{},"injectables/RepoService.html":{},"injectables/UserCollaborationService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserListService.html":{},"injectables/UserListStatsService.html":{},"injectables/UserNotificationService.html":{},"injectables/UserOrganizationService.html":{},"injectables/UserReposService.html":{}}}],["self",{"_index":5494,"title":{},"body":{"index.html":{}}}],["sell",{"_index":5658,"title":{},"body":{"license.html":{}}}],["sent",{"_index":1848,"title":{},"body":{"entities/DbInsightMember.html":{},"entities/DbUserCollaboration.html":{}}}],["server",{"_index":5880,"title":{},"body":{"miscellaneous/variables.html":{}}}],["server.crt",{"_index":5492,"title":{},"body":{"index.html":{}}}],["server.key",{"_index":5493,"title":{},"body":{"index.html":{}}}],["service",{"_index":656,"title":{},"body":{"controllers/AuthController.html":{},"classes/BakeRepoDto.html":{},"controllers/BlogSummaryController.html":{},"controllers/CodeExplanationController.html":{},"controllers/CodeRefactorSuggestionController.html":{},"controllers/CodeTestSuggestionController.html":{},"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"controllers/EmojiController.html":{},"controllers/EndorsementController.html":{},"controllers/HealthController.html":{},"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"controllers/IssueSummaryController.html":{},"controllers/PizzaOvenController.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/StripeWebhookController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"controllers/UserFollowingController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"controllers/UserListStatsController.html":{},"controllers/UserNotificationController.html":{},"controllers/UserRecommendationController.html":{},"index.html":{}}}],["services.module",{"_index":2563,"title":{},"body":{"modules/EndorsementModule.html":{},"modules/InsightsModule.html":{},"modules/PizzaOvenModule.html":{},"modules/UserListModule.html":{},"modules/UserModule.html":{},"modules/UserReposModule.html":{}}}],["services.module.ts",{"_index":252,"title":{},"body":{"modules/ApiServicesModule.html":{}}}],["services/user.service",{"_index":4406,"title":{},"body":{"controllers/UserCollaborationController.html":{},"controllers/UserController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowingController.html":{},"controllers/UserFollowsController.html":{},"injectables/UserHighlightsService.html":{},"modules/UserModule.html":{},"injectables/UserNotificationService.html":{},"controllers/UserRecommendationController.html":{}}}],["session",{"_index":578,"title":{},"body":{"controllers/AuthController.html":{},"injectables/StripeService.html":{}}}],["session.id",{"_index":4059,"title":{},"body":{"injectables/StripeService.html":{}}}],["session_email",{"_index":663,"title":{},"body":{"controllers/AuthController.html":{}}}],["sessionid",{"_index":4058,"title":{},"body":{"injectables/StripeService.html":{}}}],["set",{"_index":4100,"title":{},"body":{"controllers/StripeWebhookController.html":{},"controllers/UserInsightsController.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["setcontact(\"open",{"_index":5863,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setdescription(markdowndescription",{"_index":5861,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setlicense(`the",{"_index":5867,"title":{},"body":{"miscellaneous/variables.html":{}}}],["settermsofservice(\"https://github.com/open",{"_index":5864,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setting",{"_index":5455,"title":{},"body":{"index.html":{}}}],["settings",{"_index":5478,"title":{},"body":{"index.html":{}}}],["settitle(`@open",{"_index":5860,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setversion(`1",{"_index":5862,"title":{},"body":{"miscellaneous/variables.html":{}}}],["shall",{"_index":5667,"title":{},"body":{"license.html":{}}}],["shipped",{"_index":1446,"title":{},"body":{"classes/CreateUserHighlightDto.html":{},"entities/DbUserHighlight.html":{}}}],["shipped_at",{"_index":1442,"title":{},"body":{"classes/CreateUserHighlightDto.html":{},"entities/DbUserHighlight.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{}}}],["short",{"_index":1816,"title":{},"body":{"entities/DbInsight.html":{}}}],["short_code",{"_index":1798,"title":{},"body":{"entities/DbInsight.html":{}}}],["show",{"_index":5951,"title":{},"body":{"miscellaneous/variables.html":{}}}],["showcase",{"_index":1959,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["showcase})@column({type",{"_index":1955,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["shows",{"_index":5963,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sig",{"_index":4144,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["sign",{"_index":2002,"title":{},"body":{"entities/DbPullRequest.html":{},"entities/DbPullRequestGitHubEvents.html":{},"classes/SupabaseAuthDto.html":{}}}],["sign'})@column('text",{"_index":1994,"title":{},"body":{"entities/DbPullRequest.html":{},"entities/DbPullRequestGitHubEvents.html":{}}}],["signature",{"_index":4147,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["signed",{"_index":5495,"title":{},"body":{"index.html":{}}}],["similar",{"_index":3364,"title":{},"body":{"injectables/PullRequestGithubEventsService.html":{}}}],["singleline",{"_index":501,"title":{},"body":{"modules/AppModule.html":{}}}],["skip",{"_index":2634,"title":{},"body":{"classes/FilterListContributorsDto.html":{},"classes/FilteredUsersDto.html":{},"classes/PageOptionsDto.html":{},"injectables/PullRequestService.html":{},"classes/TopUsersDto.html":{},"index.html":{}}}],["snippet",{"_index":922,"title":{},"body":{"injectables/CodeExplanationService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{}}}],["software",{"_index":5447,"title":{},"body":{"index.html":{},"license.html":{}}}],["solution",{"_index":3097,"title":{},"body":{"injectables/IssueSummaryService.html":{}}}],["something",{"_index":5990,"title":{},"body":{"miscellaneous/variables.html":{}}}],["source",{"_index":4,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"modules/ApiServicesModule.html":{},"modules/AppModule.html":{},"classes/ApplyUserCouponDto.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"classes/BakeRepoDto.html":{},"controllers/BlogSummaryController.html":{},"modules/BlogSummaryModule.html":{},"injectables/BlogSummaryService.html":{},"interfaces/ChatResponse.html":{},"controllers/CodeExplanationController.html":{},"injectables/CodeExplanationService.html":{},"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"controllers/CodeTestSuggestionController.html":{},"injectables/CodeTestSuggestionService.html":{},"classes/CollaboratorsDto.html":{},"classes/CommitAuthorDto.html":{},"injectables/CommitAuthorsService.html":{},"classes/CommitsDto.html":{},"injectables/CommitsService.html":{},"modules/ContributionModule.html":{},"classes/ContributionPageMetaDto.html":{},"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"classes/ContributionsByProjectDto.html":{},"classes/ContributionsPageDto.html":{},"classes/ContributionsTimeframeDto.html":{},"classes/Contributor.html":{},"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"modules/ContributorModule.html":{},"classes/ContributorPullRequestsDto.html":{},"modules/CouponModule.html":{},"injectables/CouponService.html":{},"classes/CreateBlogSummaryDto.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateInsightDto.html":{},"classes/CreateInsightMemberDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/CreateLogDto.html":{},"classes/CreateUserCollaborationDto.html":{},"classes/CreateUserHighlightDto.html":{},"classes/CreateUserListDto.html":{},"injectables/CustomLogger.html":{},"modules/CustomerModule.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"entities/DbBakedRepo.html":{},"entities/DbCommitAuthors.html":{},"entities/DbCommits.html":{},"entities/DbContribution.html":{},"entities/DbContributionStatTimeframe.html":{},"entities/DbContributionsProjects.html":{},"entities/DbContributorCategoryTimeframe.html":{},"entities/DbCoupon.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"classes/DbFilteredUser.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbPullRequestGitHubEvents.html":{},"entities/DbPullRequestReview.html":{},"entities/DbRepoLoginContributions.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"classes/DbTimezone.html":{},"classes/DbTopUser.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightReactionResponse.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserListContributorStat.html":{},"entities/DbUserListContributorStat-1.html":{},"entities/DbUserNotification.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"controllers/EmojiController.html":{},"modules/EmojiModule.html":{},"injectables/EmojiService.html":{},"controllers/EndorsementController.html":{},"modules/EndorsementModule.html":{},"injectables/EndorsementService.html":{},"guards/EndorsementTokenGuard.html":{},"classes/FilterListContributorsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/FilteredUsersDto.html":{},"classes/FollowManyUsersDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"controllers/HighlightController.html":{},"modules/HighlightModule.html":{},"classes/HighlightOptionsDto.html":{},"injectables/HttpLoggerMiddleware.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"injectables/InsightRepoService.html":{},"modules/InsightsModule.html":{},"injectables/InsightsService.html":{},"controllers/IssueSummaryController.html":{},"modules/IssueSummaryModule.html":{},"injectables/IssueSummaryService.html":{},"modules/LogModule.html":{},"injectables/LogService.html":{},"modules/OpenAiModule.html":{},"injectables/OpenAiService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaParameters.html":{},"classes/PageOptionsDto.html":{},"injectables/PagerService.html":{},"interfaces/PaginationInput.html":{},"controllers/PizzaOvenController.html":{},"modules/PizzaOvenModule.html":{},"injectables/PizzaOvenService.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestGithubEventsService.html":{},"injectables/PullRequestInsightsService.html":{},"modules/PullRequestModule.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestReviewService.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"modules/RepoFilterModule.html":{},"injectables/RepoFilterService.html":{},"classes/RepoInfo.html":{},"modules/RepoModule.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"modules/StarModule.html":{},"injectables/StarService.html":{},"modules/StargazeModule.html":{},"injectables/StargazeService.html":{},"modules/StripeModule.html":{},"injectables/StripeService.html":{},"modules/StripeSubscriptionModule.html":{},"injectables/StripeSubscriptionService.html":{},"modules/StripeWebHookModule.html":{},"controllers/StripeWebhookController.html":{},"modules/SubmitModule.html":{},"injectables/SubmitService.html":{},"classes/SupabaseAuthDto.html":{},"injectables/SupabaseGuard.html":{},"injectables/SupabaseStrategy.html":{},"modules/TierModule.html":{},"injectables/TierService.html":{},"modules/TimescaleModule.html":{},"classes/TopProjectsDto.html":{},"classes/TopUsersDto.html":{},"classes/UpdateEndorsementDto.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateInsightMemberDto.html":{},"classes/UpdateUserCollaborationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowingController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"modules/UserListModule.html":{},"classes/UserListMostActiveContributorsDto.html":{},"injectables/UserListService.html":{},"controllers/UserListStatsController.html":{},"injectables/UserListStatsService.html":{},"modules/UserModule.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"classes/UserOnboardingDto.html":{},"injectables/UserOrganizationService.html":{},"controllers/UserRecommendationController.html":{},"classes/UserRepoOptionsDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"modules/UserReposModule.html":{},"injectables/UserReposService.html":{},"modules/VoteModule.html":{},"injectables/VoteService.html":{},"classes/VotedRepoDto.html":{},"index.html":{}}}],["source_branch",{"_index":1917,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["source_comment_url",{"_index":1367,"title":{},"body":{"classes/CreateEndorsementDto.html":{},"entities/DbEndorsement.html":{}}}],["source_context_url",{"_index":1368,"title":{},"body":{"classes/CreateEndorsementDto.html":{},"entities/DbEndorsement.html":{}}}],["source_label",{"_index":1918,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["spam",{"_index":1898,"title":{},"body":{"entities/DbPRInsight.html":{},"injectables/RepoFilterService.html":{}}}],["spam\"].foreach((type",{"_index":3437,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["spam_prs",{"_index":1878,"title":{},"body":{"entities/DbPRInsight.html":{}}}],["spam_pull_requests",{"_index":3662,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["spam_pull_requests\".\"updated_at",{"_index":3664,"title":{},"body":{"injectables/RepoFilterService.html":{},"injectables/RepoService.html":{}}}],["spam_pull_requests.repo_id",{"_index":3661,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["spammed",{"_index":2987,"title":{},"body":{"classes/InsightOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"miscellaneous/enumerations.html":{}}}],["spanish",{"_index":1331,"title":{},"body":{"classes/CreateBlogSummaryDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{}}}],["specific",{"_index":1017,"title":{},"body":{"classes/CommitsDto.html":{}}}],["specifications",{"_index":825,"title":{},"body":{"injectables/BlogSummaryService.html":{},"injectables/CodeExplanationService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"injectables/IssueSummaryService.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["sponsors",{"_index":4208,"title":{},"body":{"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{}}}],["sql",{"_index":1571,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["src/.../api",{"_index":5728,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../api.config.ts",{"_index":5727,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../cli",{"_index":5730,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../contribution",{"_index":5419,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../contributor",{"_index":5424,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../datetimes.ts",{"_index":5741,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../db",{"_index":5732,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../endpoint.config.ts",{"_index":5736,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../generate",{"_index":5738,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../hacktoberfest.config.ts",{"_index":5742,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../insight",{"_index":5420,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../main.ts",{"_index":5435,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../most",{"_index":5426,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../openai.config.ts",{"_index":5743,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../order",{"_index":5421,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../pizza.config.ts",{"_index":5744,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../pull",{"_index":5423,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../repo",{"_index":5425,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../stripe",{"_index":5745,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../stripe.config.ts",{"_index":5746,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../supabase.user.decorator.ts",{"_index":5725,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../swagger.ts",{"_index":5748,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../tier.config.ts",{"_index":5749,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../timescale.config.ts",{"_index":5735,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../user",{"_index":5427,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["src/.../utils.ts",{"_index":5750,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app.module.ts",{"_index":286,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.module.ts:272",{"_index":293,"title":{},"body":{"modules/AppModule.html":{}}}],["src/auth/auth.controller.ts",{"_index":542,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:118",{"_index":598,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:136",{"_index":602,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:149",{"_index":589,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:180",{"_index":619,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:194",{"_index":615,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:213",{"_index":610,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:232",{"_index":564,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:250",{"_index":573,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:37",{"_index":581,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.module.ts",{"_index":746,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/dtos/supabase",{"_index":4192,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["src/auth/dtos/user",{"_index":5315,"title":{},"body":{"classes/UserOnboardingDto.html":{}}}],["src/auth/supabase.guard.ts",{"_index":4240,"title":{},"body":{"injectables/SupabaseGuard.html":{}}}],["src/auth/supabase.strategy.ts",{"_index":4243,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["src/auth/supabase.strategy.ts:18",{"_index":4251,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["src/auth/supabase.strategy.ts:22",{"_index":4249,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["src/auth/supabase.strategy.ts:7",{"_index":4246,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["src/auth/supabase.user.decorator.ts",{"_index":5726,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/blogs/blog",{"_index":811,"title":{},"body":{"injectables/BlogSummaryService.html":{}}}],["src/blogs/dtos/create",{"_index":1321,"title":{},"body":{"classes/CreateBlogSummaryDto.html":{}}}],["src/blogs/issue",{"_index":771,"title":{},"body":{"controllers/BlogSummaryController.html":{},"modules/BlogSummaryModule.html":{}}}],["src/common/constants/order",{"_index":5429,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/common/decorators/api",{"_index":5777,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/common/dtos/filter",{"_index":2669,"title":{},"body":{"classes/FilterOptionsDto.html":{}}}],["src/common/dtos/page",{"_index":3131,"title":{},"body":{"classes/PageMetaDto.html":{},"interfaces/PageMetaParameters.html":{},"classes/PageOptionsDto.html":{}}}],["src/common/dtos/page.dto.ts",{"_index":3128,"title":{},"body":{"classes/PageDto.html":{}}}],["src/common/dtos/page.dto.ts:11",{"_index":3130,"title":{},"body":{"classes/PageDto.html":{}}}],["src/common/dtos/page.dto.ts:16",{"_index":3129,"title":{},"body":{"classes/PageDto.html":{}}}],["src/common/filters/repo",{"_index":3634,"title":{},"body":{"modules/RepoFilterModule.html":{},"injectables/RepoFilterService.html":{}}}],["src/common/middleware/database",{"_index":1542,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["src/common/middleware/http",{"_index":2861,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{}}}],["src/common/services/api",{"_index":251,"title":{},"body":{"modules/ApiServicesModule.html":{}}}],["src/common/services/pager.service.ts",{"_index":3155,"title":{},"body":{"injectables/PagerService.html":{},"interfaces/PaginationInput.html":{}}}],["src/common/services/pager.service.ts:16",{"_index":3159,"title":{},"body":{"injectables/PagerService.html":{}}}],["src/common/util/cli",{"_index":5785,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/common/util/datetimes.ts",{"_index":5886,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/common/util/swagger.ts",{"_index":5925,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/config/api.config.ts",{"_index":5751,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/config/db",{"_index":5788,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/config/endpoint.config.ts",{"_index":5823,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/config/hacktoberfest.config.ts",{"_index":5892,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/config/openai.config.ts",{"_index":5897,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/config/pizza.config.ts",{"_index":5908,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/config/stripe.config.ts",{"_index":5913,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/config/tier.config.ts",{"_index":6009,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/config/timescale.config.ts",{"_index":5812,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/contribution/contribution.entity.ts",{"_index":1651,"title":{},"body":{"entities/DbContribution.html":{}}}],["src/contribution/contribution.entity.ts:104",{"_index":1688,"title":{},"body":{"entities/DbContribution.html":{}}}],["src/contribution/contribution.entity.ts:112",{"_index":1679,"title":{},"body":{"entities/DbContribution.html":{}}}],["src/contribution/contribution.entity.ts:28",{"_index":1673,"title":{},"body":{"entities/DbContribution.html":{}}}],["src/contribution/contribution.entity.ts:39",{"_index":1680,"title":{},"body":{"entities/DbContribution.html":{}}}],["src/contribution/contribution.entity.ts:50",{"_index":1659,"title":{},"body":{"entities/DbContribution.html":{}}}],["src/contribution/contribution.entity.ts:57",{"_index":1677,"title":{},"body":{"entities/DbContribution.html":{}}}],["src/contribution/contribution.entity.ts:67",{"_index":1669,"title":{},"body":{"entities/DbContribution.html":{}}}],["src/contribution/contribution.entity.ts:77",{"_index":1685,"title":{},"body":{"entities/DbContribution.html":{}}}],["src/contribution/contribution.entity.ts:84",{"_index":1671,"title":{},"body":{"entities/DbContribution.html":{}}}],["src/contribution/contribution.entity.ts:94",{"_index":1655,"title":{},"body":{"entities/DbContribution.html":{}}}],["src/contribution/contribution.module.ts",{"_index":1046,"title":{},"body":{"modules/ContributionModule.html":{}}}],["src/contribution/contribution.service.ts",{"_index":1124,"title":{},"body":{"injectables/ContributionService.html":{}}}],["src/contribution/contribution.service.ts:15",{"_index":1131,"title":{},"body":{"injectables/ContributionService.html":{}}}],["src/contribution/contribution.service.ts:25",{"_index":1134,"title":{},"body":{"injectables/ContributionService.html":{}}}],["src/contribution/contribution.service.ts:47",{"_index":1139,"title":{},"body":{"injectables/ContributionService.html":{}}}],["src/contribution/contribution.service.ts:91",{"_index":1137,"title":{},"body":{"injectables/ContributionService.html":{}}}],["src/contribution/dtos/contribution",{"_index":1085,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"miscellaneous/enumerations.html":{}}}],["src/contribution/dtos/repo",{"_index":2348,"title":{},"body":{"entities/DbUserListContributorStat.html":{}}}],["src/contribution/entities/repo",{"_index":2083,"title":{},"body":{"entities/DbRepoLoginContributions.html":{}}}],["src/contribution/repo",{"_index":3558,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["src/contributor/contributor",{"_index":1243,"title":{},"body":{"controllers/ContributorInsightsController.html":{}}}],["src/contributor/contributor.controller.ts",{"_index":1216,"title":{},"body":{"controllers/ContributorController.html":{}}}],["src/contributor/contributor.controller.ts:22",{"_index":1227,"title":{},"body":{"controllers/ContributorController.html":{}}}],["src/contributor/contributor.module.ts",{"_index":1281,"title":{},"body":{"modules/ContributorModule.html":{}}}],["src/coupon/coupon.module.ts",{"_index":1297,"title":{},"body":{"modules/CouponModule.html":{}}}],["src/coupon/coupon.service.ts",{"_index":1301,"title":{},"body":{"injectables/CouponService.html":{}}}],["src/coupon/coupon.service.ts:14",{"_index":1307,"title":{},"body":{"injectables/CouponService.html":{}}}],["src/coupon/coupon.service.ts:20",{"_index":1311,"title":{},"body":{"injectables/CouponService.html":{}}}],["src/coupon/coupon.service.ts:34",{"_index":1309,"title":{},"body":{"injectables/CouponService.html":{}}}],["src/coupon/coupon.service.ts:8",{"_index":1305,"title":{},"body":{"injectables/CouponService.html":{}}}],["src/coupon/entities/coupon.entity.ts",{"_index":1731,"title":{},"body":{"entities/DbCoupon.html":{}}}],["src/coupon/entities/coupon.entity.ts:16",{"_index":1733,"title":{},"body":{"entities/DbCoupon.html":{}}}],["src/coupon/entities/coupon.entity.ts:26",{"_index":1734,"title":{},"body":{"entities/DbCoupon.html":{}}}],["src/coupon/entities/coupon.entity.ts:33",{"_index":1737,"title":{},"body":{"entities/DbCoupon.html":{}}}],["src/customer/customer.entity.ts",{"_index":1739,"title":{},"body":{"entities/DbCustomer.html":{}}}],["src/customer/customer.entity.ts:12",{"_index":1741,"title":{},"body":{"entities/DbCustomer.html":{}}}],["src/customer/customer.entity.ts:22",{"_index":1743,"title":{},"body":{"entities/DbCustomer.html":{}}}],["src/customer/customer.module.ts",{"_index":1518,"title":{},"body":{"modules/CustomerModule.html":{}}}],["src/customer/customer.service.ts",{"_index":1522,"title":{},"body":{"injectables/CustomerService.html":{}}}],["src/customer/customer.service.ts:14",{"_index":1532,"title":{},"body":{"injectables/CustomerService.html":{}}}],["src/customer/customer.service.ts:18",{"_index":1536,"title":{},"body":{"injectables/CustomerService.html":{}}}],["src/customer/customer.service.ts:26",{"_index":1534,"title":{},"body":{"injectables/CustomerService.html":{}}}],["src/customer/customer.service.ts:34",{"_index":1531,"title":{},"body":{"injectables/CustomerService.html":{}}}],["src/customer/customer.service.ts:8",{"_index":1527,"title":{},"body":{"injectables/CustomerService.html":{}}}],["src/emoji/emoji.controller.ts",{"_index":2438,"title":{},"body":{"controllers/EmojiController.html":{}}}],["src/emoji/emoji.controller.ts:23",{"_index":2446,"title":{},"body":{"controllers/EmojiController.html":{}}}],["src/emoji/emoji.module.ts",{"_index":2457,"title":{},"body":{"modules/EmojiModule.html":{}}}],["src/emoji/emoji.service.ts",{"_index":2460,"title":{},"body":{"injectables/EmojiService.html":{}}}],["src/emoji/emoji.service.ts:11",{"_index":2462,"title":{},"body":{"injectables/EmojiService.html":{}}}],["src/emoji/emoji.service.ts:17",{"_index":2464,"title":{},"body":{"injectables/EmojiService.html":{}}}],["src/emoji/emoji.service.ts:21",{"_index":2465,"title":{},"body":{"injectables/EmojiService.html":{}}}],["src/emoji/entities/emoji.entity.ts",{"_index":1747,"title":{},"body":{"entities/DbEmoji.html":{}}}],["src/emoji/entities/emoji.entity.ts:25",{"_index":1759,"title":{},"body":{"entities/DbEmoji.html":{}}}],["src/emoji/entities/emoji.entity.ts:32",{"_index":1761,"title":{},"body":{"entities/DbEmoji.html":{}}}],["src/emoji/entities/emoji.entity.ts:39",{"_index":1767,"title":{},"body":{"entities/DbEmoji.html":{}}}],["src/emoji/entities/emoji.entity.ts:47",{"_index":1756,"title":{},"body":{"entities/DbEmoji.html":{}}}],["src/emoji/entities/emoji.entity.ts:57",{"_index":1751,"title":{},"body":{"entities/DbEmoji.html":{}}}],["src/emoji/entities/emoji.entity.ts:67",{"_index":1765,"title":{},"body":{"entities/DbEmoji.html":{}}}],["src/emoji/entities/emoji.entity.ts:74",{"_index":1752,"title":{},"body":{"entities/DbEmoji.html":{}}}],["src/emoji/entities/emoji.entity.ts:78",{"_index":1764,"title":{},"body":{"entities/DbEmoji.html":{}}}],["src/endorsement/dto/create",{"_index":1363,"title":{},"body":{"classes/CreateEndorsementDto.html":{}}}],["src/endorsement/dto/update",{"_index":4313,"title":{},"body":{"classes/UpdateEndorsementDto.html":{}}}],["src/endorsement/endorsement",{"_index":2614,"title":{},"body":{"guards/EndorsementTokenGuard.html":{}}}],["src/endorsement/endorsement.controller.ts",{"_index":2471,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["src/endorsement/endorsement.controller.ts:107",{"_index":2506,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["src/endorsement/endorsement.controller.ts:123",{"_index":2509,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["src/endorsement/endorsement.controller.ts:138",{"_index":2491,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["src/endorsement/endorsement.controller.ts:26",{"_index":2484,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["src/endorsement/endorsement.controller.ts:40",{"_index":2498,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["src/endorsement/endorsement.controller.ts:51",{"_index":2495,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["src/endorsement/endorsement.controller.ts:65",{"_index":2502,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["src/endorsement/endorsement.controller.ts:96",{"_index":2515,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["src/endorsement/endorsement.module.ts",{"_index":2561,"title":{},"body":{"modules/EndorsementModule.html":{}}}],["src/endorsement/endorsement.service.ts",{"_index":2566,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["src/endorsement/endorsement.service.ts:11",{"_index":2573,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["src/endorsement/endorsement.service.ts:110",{"_index":2589,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["src/endorsement/endorsement.service.ts:124",{"_index":2591,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["src/endorsement/endorsement.service.ts:18",{"_index":2575,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["src/endorsement/endorsement.service.ts:22",{"_index":2577,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["src/endorsement/endorsement.service.ts:26",{"_index":2578,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["src/endorsement/endorsement.service.ts:37",{"_index":2580,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["src/endorsement/endorsement.service.ts:48",{"_index":2582,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["src/endorsement/endorsement.service.ts:61",{"_index":2584,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["src/endorsement/endorsement.service.ts:77",{"_index":2585,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["src/endorsement/endorsement.service.ts:91",{"_index":2587,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["src/endorsement/entities/endorsement.entity.ts",{"_index":1772,"title":{},"body":{"entities/DbEndorsement.html":{}}}],["src/endorsement/entities/endorsement.entity.ts:14",{"_index":1775,"title":{},"body":{"entities/DbEndorsement.html":{}}}],["src/endorsement/entities/endorsement.entity.ts:22",{"_index":1774,"title":{},"body":{"entities/DbEndorsement.html":{}}}],["src/endorsement/entities/endorsement.entity.ts:30",{"_index":1777,"title":{},"body":{"entities/DbEndorsement.html":{}}}],["src/endorsement/entities/endorsement.entity.ts:38",{"_index":1778,"title":{},"body":{"entities/DbEndorsement.html":{}}}],["src/endorsement/entities/endorsement.entity.ts:45",{"_index":1781,"title":{},"body":{"entities/DbEndorsement.html":{}}}],["src/endorsement/entities/endorsement.entity.ts:52",{"_index":1783,"title":{},"body":{"entities/DbEndorsement.html":{}}}],["src/endorsement/entities/endorsement.entity.ts:62",{"_index":1785,"title":{},"body":{"entities/DbEndorsement.html":{}}}],["src/endorsement/entities/endorsement.entity.ts:72",{"_index":1773,"title":{},"body":{"entities/DbEndorsement.html":{}}}],["src/generate",{"_index":5838,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/health/health.controller.ts",{"_index":2731,"title":{},"body":{"controllers/HealthController.html":{}}}],["src/health/health.controller.ts:32",{"_index":2737,"title":{},"body":{"controllers/HealthController.html":{}}}],["src/health/health.controller.ts:57",{"_index":2740,"title":{},"body":{"controllers/HealthController.html":{}}}],["src/health/health.module.ts",{"_index":2777,"title":{},"body":{"modules/HealthModule.html":{}}}],["src/highlight/dtos/highlight",{"_index":2301,"title":{},"body":{"classes/DbUserHighlightReactionResponse.html":{},"classes/HighlightOptionsDto.html":{}}}],["src/highlight/entities/user",{"_index":2315,"title":{},"body":{"classes/DbUserHighlightRepo.html":{}}}],["src/highlight/highlight.controller.ts",{"_index":2780,"title":{},"body":{"controllers/HighlightController.html":{}}}],["src/highlight/highlight.controller.ts:106",{"_index":2818,"title":{},"body":{"controllers/HighlightController.html":{}}}],["src/highlight/highlight.controller.ts:117",{"_index":2812,"title":{},"body":{"controllers/HighlightController.html":{}}}],["src/highlight/highlight.controller.ts:35",{"_index":2809,"title":{},"body":{"controllers/HighlightController.html":{}}}],["src/highlight/highlight.controller.ts:46",{"_index":2802,"title":{},"body":{"controllers/HighlightController.html":{}}}],["src/highlight/highlight.controller.ts:61",{"_index":2798,"title":{},"body":{"controllers/HighlightController.html":{}}}],["src/highlight/highlight.controller.ts:79",{"_index":2822,"title":{},"body":{"controllers/HighlightController.html":{}}}],["src/highlight/highlight.controller.ts:93",{"_index":2806,"title":{},"body":{"controllers/HighlightController.html":{}}}],["src/highlight/highlight.module.ts",{"_index":2856,"title":{},"body":{"modules/HighlightModule.html":{}}}],["src/insight/dtos/create",{"_index":1390,"title":{},"body":{"classes/CreateInsightDto.html":{},"classes/CreateInsightMemberDto.html":{}}}],["src/insight/dtos/insight",{"_index":2977,"title":{},"body":{"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"miscellaneous/enumerations.html":{}}}],["src/insight/dtos/update",{"_index":4316,"title":{},"body":{"classes/UpdateInsightDto.html":{},"classes/UpdateInsightMemberDto.html":{}}}],["src/insight/entities/insight",{"_index":1830,"title":{},"body":{"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{}}}],["src/insight/entities/insight.entity.ts",{"_index":1795,"title":{},"body":{"entities/DbInsight.html":{}}}],["src/insight/entities/insight.entity.ts:105",{"_index":1822,"title":{},"body":{"entities/DbInsight.html":{}}}],["src/insight/entities/insight.entity.ts:115",{"_index":1802,"title":{},"body":{"entities/DbInsight.html":{}}}],["src/insight/entities/insight.entity.ts:123",{"_index":1826,"title":{},"body":{"entities/DbInsight.html":{}}}],["src/insight/entities/insight.entity.ts:127",{"_index":1815,"title":{},"body":{"entities/DbInsight.html":{}}}],["src/insight/entities/insight.entity.ts:33",{"_index":1804,"title":{},"body":{"entities/DbInsight.html":{}}}],["src/insight/entities/insight.entity.ts:44",{"_index":1827,"title":{},"body":{"entities/DbInsight.html":{}}}],["src/insight/entities/insight.entity.ts:54",{"_index":1812,"title":{},"body":{"entities/DbInsight.html":{}}}],["src/insight/entities/insight.entity.ts:61",{"_index":1810,"title":{},"body":{"entities/DbInsight.html":{}}}],["src/insight/entities/insight.entity.ts:68",{"_index":1807,"title":{},"body":{"entities/DbInsight.html":{}}}],["src/insight/entities/insight.entity.ts:75",{"_index":1809,"title":{},"body":{"entities/DbInsight.html":{}}}],["src/insight/entities/insight.entity.ts:85",{"_index":1819,"title":{},"body":{"entities/DbInsight.html":{}}}],["src/insight/entities/insight.entity.ts:95",{"_index":1800,"title":{},"body":{"entities/DbInsight.html":{}}}],["src/insight/insight",{"_index":2930,"title":{},"body":{"injectables/InsightMemberService.html":{},"injectables/InsightRepoService.html":{}}}],["src/insight/insight.controller.ts",{"_index":2886,"title":{},"body":{"controllers/InsightController.html":{}}}],["src/insight/insight.controller.ts:36",{"_index":2902,"title":{},"body":{"controllers/InsightController.html":{}}}],["src/insight/insight.controller.ts:47",{"_index":2894,"title":{},"body":{"controllers/InsightController.html":{}}}],["src/insight/insight.controller.ts:63",{"_index":2908,"title":{},"body":{"controllers/InsightController.html":{}}}],["src/insight/insights.module.ts",{"_index":3025,"title":{},"body":{"modules/InsightsModule.html":{}}}],["src/insight/insights.service.ts",{"_index":3033,"title":{},"body":{"injectables/InsightsService.html":{}}}],["src/insight/insights.service.ts:111",{"_index":3048,"title":{},"body":{"injectables/InsightsService.html":{}}}],["src/insight/insights.service.ts:14",{"_index":3040,"title":{},"body":{"injectables/InsightsService.html":{}}}],["src/insight/insights.service.ts:21",{"_index":3044,"title":{},"body":{"injectables/InsightsService.html":{}}}],["src/insight/insights.service.ts:27",{"_index":3049,"title":{},"body":{"injectables/InsightsService.html":{}}}],["src/insight/insights.service.ts:60",{"_index":3043,"title":{},"body":{"injectables/InsightsService.html":{}}}],["src/insight/insights.service.ts:64",{"_index":3053,"title":{},"body":{"injectables/InsightsService.html":{}}}],["src/insight/insights.service.ts:68",{"_index":3051,"title":{},"body":{"injectables/InsightsService.html":{}}}],["src/insight/insights.service.ts:72",{"_index":3046,"title":{},"body":{"injectables/InsightsService.html":{}}}],["src/insight/user",{"_index":4833,"title":{},"body":{"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["src/issues/dtos/create",{"_index":1411,"title":{},"body":{"classes/CreateIssueSummaryDto.html":{}}}],["src/issues/issue",{"_index":3077,"title":{},"body":{"controllers/IssueSummaryController.html":{},"modules/IssueSummaryModule.html":{},"injectables/IssueSummaryService.html":{}}}],["src/log/custom",{"_index":1481,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["src/log/dtos/create",{"_index":1418,"title":{},"body":{"classes/CreateLogDto.html":{}}}],["src/log/log.entity.ts",{"_index":1865,"title":{},"body":{"entities/DbLog.html":{}}}],["src/log/log.entity.ts:12",{"_index":1871,"title":{},"body":{"entities/DbLog.html":{}}}],["src/log/log.entity.ts:15",{"_index":1870,"title":{},"body":{"entities/DbLog.html":{}}}],["src/log/log.entity.ts:18",{"_index":1867,"title":{},"body":{"entities/DbLog.html":{}}}],["src/log/log.entity.ts:6",{"_index":1869,"title":{},"body":{"entities/DbLog.html":{}}}],["src/log/log.entity.ts:9",{"_index":1866,"title":{},"body":{"entities/DbLog.html":{}}}],["src/log/log.module.ts",{"_index":3104,"title":{},"body":{"modules/LogModule.html":{}}}],["src/log/log.service.ts",{"_index":3108,"title":{},"body":{"injectables/LogService.html":{}}}],["src/log/log.service.ts:14",{"_index":3114,"title":{},"body":{"injectables/LogService.html":{}}}],["src/log/log.service.ts:8",{"_index":3111,"title":{},"body":{"injectables/LogService.html":{}}}],["src/main.ts",{"_index":5436,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/open",{"_index":857,"title":{},"body":{"interfaces/ChatResponse.html":{},"modules/OpenAiModule.html":{},"injectables/OpenAiService.html":{}}}],["src/pizza/commit",{"_index":990,"title":{},"body":{"injectables/CommitAuthorsService.html":{}}}],["src/pizza/commits.service.ts",{"_index":1022,"title":{},"body":{"injectables/CommitsService.html":{}}}],["src/pizza/commits.service.ts:11",{"_index":1027,"title":{},"body":{"injectables/CommitsService.html":{}}}],["src/pizza/commits.service.ts:18",{"_index":1029,"title":{},"body":{"injectables/CommitsService.html":{}}}],["src/pizza/commits.service.ts:24",{"_index":1031,"title":{},"body":{"injectables/CommitsService.html":{}}}],["src/pizza/commits.service.ts:37",{"_index":1033,"title":{},"body":{"injectables/CommitsService.html":{}}}],["src/pizza/commits.service.ts:50",{"_index":1035,"title":{},"body":{"injectables/CommitsService.html":{}}}],["src/pizza/dtos/baked",{"_index":753,"title":{},"body":{"classes/BakeRepoDto.html":{}}}],["src/pizza/dtos/commit_authors.dto.ts",{"_index":982,"title":{},"body":{"classes/CommitAuthorDto.html":{}}}],["src/pizza/dtos/commit_authors.dto.ts:11",{"_index":987,"title":{},"body":{"classes/CommitAuthorDto.html":{}}}],["src/pizza/dtos/commits.dto.ts",{"_index":1014,"title":{},"body":{"classes/CommitsDto.html":{}}}],["src/pizza/dtos/commits.dto.ts:11",{"_index":1019,"title":{},"body":{"classes/CommitsDto.html":{}}}],["src/pizza/entities/baked",{"_index":1584,"title":{},"body":{"entities/DbBakedRepo.html":{}}}],["src/pizza/entities/commit_authors.entity.ts",{"_index":1616,"title":{},"body":{"entities/DbCommitAuthors.html":{}}}],["src/pizza/entities/commit_authors.entity.ts:20",{"_index":1622,"title":{},"body":{"entities/DbCommitAuthors.html":{}}}],["src/pizza/entities/commit_authors.entity.ts:28",{"_index":1619,"title":{},"body":{"entities/DbCommitAuthors.html":{}}}],["src/pizza/entities/commit_authors.entity.ts:32",{"_index":1621,"title":{},"body":{"entities/DbCommitAuthors.html":{}}}],["src/pizza/entities/commits.entity.ts",{"_index":1624,"title":{},"body":{"entities/DbCommits.html":{}}}],["src/pizza/entities/commits.entity.ts:21",{"_index":1645,"title":{},"body":{"entities/DbCommits.html":{}}}],["src/pizza/entities/commits.entity.ts:31",{"_index":1644,"title":{},"body":{"entities/DbCommits.html":{}}}],["src/pizza/entities/commits.entity.ts:41",{"_index":1643,"title":{},"body":{"entities/DbCommits.html":{}}}],["src/pizza/entities/commits.entity.ts:51",{"_index":1637,"title":{},"body":{"entities/DbCommits.html":{}}}],["src/pizza/entities/commits.entity.ts:59",{"_index":1633,"title":{},"body":{"entities/DbCommits.html":{}}}],["src/pizza/entities/commits.entity.ts:69",{"_index":1641,"title":{},"body":{"entities/DbCommits.html":{}}}],["src/pizza/entities/commits.entity.ts:77",{"_index":1639,"title":{},"body":{"entities/DbCommits.html":{}}}],["src/pizza/pizza",{"_index":3167,"title":{},"body":{"controllers/PizzaOvenController.html":{},"modules/PizzaOvenModule.html":{},"injectables/PizzaOvenService.html":{}}}],["src/pull",{"_index":892,"title":{},"body":{"controllers/CodeExplanationController.html":{},"injectables/CodeExplanationService.html":{},"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"controllers/CodeTestSuggestionController.html":{},"injectables/CodeTestSuggestionService.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbPullRequestReview.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestInsightsService.html":{},"modules/PullRequestModule.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestReviewService.html":{},"injectables/PullRequestService.html":{},"miscellaneous/enumerations.html":{}}}],["src/repo/dtos/repo",{"_index":3668,"title":{},"body":{"classes/RepoInfo.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"miscellaneous/enumerations.html":{}}}],["src/repo/entities/repo.to.user.stargazers.entity.ts",{"_index":2094,"title":{},"body":{"entities/DbRepoToUserStargazers.html":{}}}],["src/repo/entities/repo.to.user.stargazers.entity.ts:27",{"_index":2100,"title":{},"body":{"entities/DbRepoToUserStargazers.html":{}}}],["src/repo/entities/repo.to.user.stargazers.entity.ts:35",{"_index":2107,"title":{},"body":{"entities/DbRepoToUserStargazers.html":{}}}],["src/repo/entities/repo.to.user.stargazers.entity.ts:43",{"_index":2103,"title":{},"body":{"entities/DbRepoToUserStargazers.html":{}}}],["src/repo/entities/repo.to.user.stargazers.entity.ts:53",{"_index":2096,"title":{},"body":{"entities/DbRepoToUserStargazers.html":{}}}],["src/repo/entities/repo.to.user.stargazers.entity.ts:63",{"_index":2104,"title":{},"body":{"entities/DbRepoToUserStargazers.html":{}}}],["src/repo/entities/repo.to.user.stargazers.entity.ts:70",{"_index":2097,"title":{},"body":{"entities/DbRepoToUserStargazers.html":{}}}],["src/repo/entities/repo.to.user.stargazers.entity.ts:78",{"_index":2106,"title":{},"body":{"entities/DbRepoToUserStargazers.html":{}}}],["src/repo/entities/repo.to.user.stargazers.entity.ts:86",{"_index":2102,"title":{},"body":{"entities/DbRepoToUserStargazers.html":{}}}],["src/repo/entities/repo.to.user.stars.entity.ts",{"_index":2111,"title":{},"body":{"entities/DbRepoToUserStars.html":{}}}],["src/repo/entities/repo.to.user.stars.entity.ts:27",{"_index":2115,"title":{},"body":{"entities/DbRepoToUserStars.html":{}}}],["src/repo/entities/repo.to.user.stars.entity.ts:35",{"_index":2122,"title":{},"body":{"entities/DbRepoToUserStars.html":{}}}],["src/repo/entities/repo.to.user.stars.entity.ts:43",{"_index":2118,"title":{},"body":{"entities/DbRepoToUserStars.html":{}}}],["src/repo/entities/repo.to.user.stars.entity.ts:53",{"_index":2113,"title":{},"body":{"entities/DbRepoToUserStars.html":{}}}],["src/repo/entities/repo.to.user.stars.entity.ts:63",{"_index":2119,"title":{},"body":{"entities/DbRepoToUserStars.html":{}}}],["src/repo/entities/repo.to.user.stars.entity.ts:70",{"_index":2114,"title":{},"body":{"entities/DbRepoToUserStars.html":{}}}],["src/repo/entities/repo.to.user.stars.entity.ts:78",{"_index":2121,"title":{},"body":{"entities/DbRepoToUserStars.html":{}}}],["src/repo/entities/repo.to.user.stars.entity.ts:86",{"_index":2117,"title":{},"body":{"entities/DbRepoToUserStars.html":{}}}],["src/repo/entities/repo.to.user.submissions.entity.ts",{"_index":2126,"title":{},"body":{"entities/DbRepoToUserSubmissions.html":{}}}],["src/repo/entities/repo.to.user.submissions.entity.ts:27",{"_index":2131,"title":{},"body":{"entities/DbRepoToUserSubmissions.html":{}}}],["src/repo/entities/repo.to.user.submissions.entity.ts:35",{"_index":2140,"title":{},"body":{"entities/DbRepoToUserSubmissions.html":{}}}],["src/repo/entities/repo.to.user.submissions.entity.ts:43",{"_index":2136,"title":{},"body":{"entities/DbRepoToUserSubmissions.html":{}}}],["src/repo/entities/repo.to.user.submissions.entity.ts:50",{"_index":2133,"title":{},"body":{"entities/DbRepoToUserSubmissions.html":{}}}],["src/repo/entities/repo.to.user.submissions.entity.ts:60",{"_index":2129,"title":{},"body":{"entities/DbRepoToUserSubmissions.html":{}}}],["src/repo/entities/repo.to.user.submissions.entity.ts:70",{"_index":2137,"title":{},"body":{"entities/DbRepoToUserSubmissions.html":{}}}],["src/repo/entities/repo.to.user.submissions.entity.ts:77",{"_index":2130,"title":{},"body":{"entities/DbRepoToUserSubmissions.html":{}}}],["src/repo/entities/repo.to.user.submissions.entity.ts:85",{"_index":2139,"title":{},"body":{"entities/DbRepoToUserSubmissions.html":{}}}],["src/repo/entities/repo.to.user.submissions.entity.ts:93",{"_index":2135,"title":{},"body":{"entities/DbRepoToUserSubmissions.html":{}}}],["src/repo/entities/repo.to.user.votes.entity.ts",{"_index":2144,"title":{},"body":{"entities/DbRepoToUserVotes.html":{}}}],["src/repo/entities/repo.to.user.votes.entity.ts:27",{"_index":2148,"title":{},"body":{"entities/DbRepoToUserVotes.html":{}}}],["src/repo/entities/repo.to.user.votes.entity.ts:35",{"_index":2155,"title":{},"body":{"entities/DbRepoToUserVotes.html":{}}}],["src/repo/entities/repo.to.user.votes.entity.ts:43",{"_index":2151,"title":{},"body":{"entities/DbRepoToUserVotes.html":{}}}],["src/repo/entities/repo.to.user.votes.entity.ts:53",{"_index":2146,"title":{},"body":{"entities/DbRepoToUserVotes.html":{}}}],["src/repo/entities/repo.to.user.votes.entity.ts:63",{"_index":2152,"title":{},"body":{"entities/DbRepoToUserVotes.html":{}}}],["src/repo/entities/repo.to.user.votes.entity.ts:70",{"_index":2147,"title":{},"body":{"entities/DbRepoToUserVotes.html":{}}}],["src/repo/entities/repo.to.user.votes.entity.ts:78",{"_index":2154,"title":{},"body":{"entities/DbRepoToUserVotes.html":{}}}],["src/repo/entities/repo.to.user.votes.entity.ts:86",{"_index":2150,"title":{},"body":{"entities/DbRepoToUserVotes.html":{}}}],["src/repo/repo.controller.ts",{"_index":3606,"title":{},"body":{"controllers/RepoController.html":{}}}],["src/repo/repo.controller.ts:23",{"_index":3616,"title":{},"body":{"controllers/RepoController.html":{}}}],["src/repo/repo.controller.ts:34",{"_index":3620,"title":{},"body":{"controllers/RepoController.html":{}}}],["src/repo/repo.controller.ts:45",{"_index":3611,"title":{},"body":{"controllers/RepoController.html":{}}}],["src/repo/repo.controller.ts:56",{"_index":3614,"title":{},"body":{"controllers/RepoController.html":{}}}],["src/repo/repo.module.ts",{"_index":3678,"title":{},"body":{"modules/RepoModule.html":{}}}],["src/repo/repo.service.ts",{"_index":3696,"title":{},"body":{"injectables/RepoService.html":{}}}],["src/repo/repo.service.ts:157",{"_index":3718,"title":{},"body":{"injectables/RepoService.html":{}}}],["src/repo/repo.service.ts:18",{"_index":3703,"title":{},"body":{"injectables/RepoService.html":{}}}],["src/repo/repo.service.ts:26",{"_index":3721,"title":{},"body":{"injectables/RepoService.html":{}}}],["src/repo/repo.service.ts:285",{"_index":3711,"title":{},"body":{"injectables/RepoService.html":{}}}],["src/repo/repo.service.ts:299",{"_index":3712,"title":{},"body":{"injectables/RepoService.html":{}}}],["src/repo/repo.service.ts:313",{"_index":3709,"title":{},"body":{"injectables/RepoService.html":{}}}],["src/repo/repo.service.ts:347",{"_index":3710,"title":{},"body":{"injectables/RepoService.html":{}}}],["src/repo/repo.service.ts:41",{"_index":3707,"title":{},"body":{"injectables/RepoService.html":{}}}],["src/repo/repo.service.ts:418",{"_index":3716,"title":{},"body":{"injectables/RepoService.html":{}}}],["src/repo/repo.service.ts:448",{"_index":3714,"title":{},"body":{"injectables/RepoService.html":{}}}],["src/repo/repo.service.ts:66",{"_index":3706,"title":{},"body":{"injectables/RepoService.html":{}}}],["src/star/repo",{"_index":3800,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["src/star/star.module.ts",{"_index":3975,"title":{},"body":{"modules/StarModule.html":{}}}],["src/star/star.service.ts",{"_index":3977,"title":{},"body":{"injectables/StarService.html":{}}}],["src/star/star.service.ts:13",{"_index":3983,"title":{},"body":{"injectables/StarService.html":{}}}],["src/star/star.service.ts:19",{"_index":3987,"title":{},"body":{"injectables/StarService.html":{}}}],["src/star/star.service.ts:42",{"_index":3985,"title":{},"body":{"injectables/StarService.html":{}}}],["src/star/star.service.ts:7",{"_index":3981,"title":{},"body":{"injectables/StarService.html":{}}}],["src/stargaze/repo",{"_index":3847,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["src/stargaze/stargaze.module.ts",{"_index":4004,"title":{},"body":{"modules/StargazeModule.html":{}}}],["src/stargaze/stargaze.service.ts",{"_index":4006,"title":{},"body":{"injectables/StargazeService.html":{}}}],["src/stargaze/stargaze.service.ts:13",{"_index":4012,"title":{},"body":{"injectables/StargazeService.html":{}}}],["src/stargaze/stargaze.service.ts:19",{"_index":4016,"title":{},"body":{"injectables/StargazeService.html":{}}}],["src/stargaze/stargaze.service.ts:44",{"_index":4014,"title":{},"body":{"injectables/StargazeService.html":{}}}],["src/stargaze/stargaze.service.ts:7",{"_index":4010,"title":{},"body":{"injectables/StargazeService.html":{}}}],["src/stripe",{"_index":4082,"title":{},"body":{"modules/StripeWebHookModule.html":{},"controllers/StripeWebhookController.html":{},"miscellaneous/variables.html":{}}}],["src/stripe/stripe.module.ts",{"_index":4029,"title":{},"body":{"modules/StripeModule.html":{}}}],["src/stripe/stripe.service.ts",{"_index":4031,"title":{},"body":{"injectables/StripeService.html":{}}}],["src/stripe/stripe.service.ts:12",{"_index":4040,"title":{},"body":{"injectables/StripeService.html":{}}}],["src/stripe/stripe.service.ts:20",{"_index":4036,"title":{},"body":{"injectables/StripeService.html":{}}}],["src/stripe/stripe.service.ts:27",{"_index":4038,"title":{},"body":{"injectables/StripeService.html":{}}}],["src/stripe/stripe.service.ts:8",{"_index":4034,"title":{},"body":{"injectables/StripeService.html":{}}}],["src/submit/repo",{"_index":3885,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["src/submit/submit.module.ts",{"_index":4169,"title":{},"body":{"modules/SubmitModule.html":{}}}],["src/submit/submit.service.ts",{"_index":4171,"title":{},"body":{"injectables/SubmitService.html":{}}}],["src/submit/submit.service.ts:13",{"_index":4177,"title":{},"body":{"injectables/SubmitService.html":{}}}],["src/submit/submit.service.ts:19",{"_index":4181,"title":{},"body":{"injectables/SubmitService.html":{}}}],["src/submit/submit.service.ts:42",{"_index":4179,"title":{},"body":{"injectables/SubmitService.html":{}}}],["src/submit/submit.service.ts:7",{"_index":4175,"title":{},"body":{"injectables/SubmitService.html":{}}}],["src/subscription/stripe",{"_index":2159,"title":{},"body":{"entities/DbSubscription.html":{},"modules/StripeSubscriptionModule.html":{},"injectables/StripeSubscriptionService.html":{}}}],["src/tier/tier.module.ts",{"_index":4274,"title":{},"body":{"modules/TierModule.html":{}}}],["src/tier/tier.service.ts",{"_index":4276,"title":{},"body":{"injectables/TierService.html":{}}}],["src/tier/tier.service.ts:11",{"_index":4281,"title":{},"body":{"injectables/TierService.html":{}}}],["src/tier/tier.service.ts:7",{"_index":4278,"title":{},"body":{"injectables/TierService.html":{}}}],["src/timescale/entities/pull_request_github_event.ts",{"_index":2013,"title":{},"body":{"entities/DbPullRequestGitHubEvents.html":{}}}],["src/timescale/entities/pull_request_github_event.ts:106",{"_index":2040,"title":{},"body":{"entities/DbPullRequestGitHubEvents.html":{}}}],["src/timescale/entities/pull_request_github_event.ts:116",{"_index":2047,"title":{},"body":{"entities/DbPullRequestGitHubEvents.html":{}}}],["src/timescale/entities/pull_request_github_event.ts:126",{"_index":2044,"title":{},"body":{"entities/DbPullRequestGitHubEvents.html":{}}}],["src/timescale/entities/pull_request_github_event.ts:136",{"_index":2056,"title":{},"body":{"entities/DbPullRequestGitHubEvents.html":{}}}],["src/timescale/entities/pull_request_github_event.ts:146",{"_index":2060,"title":{},"body":{"entities/DbPullRequestGitHubEvents.html":{}}}],["src/timescale/entities/pull_request_github_event.ts:15",{"_index":2038,"title":{},"body":{"entities/DbPullRequestGitHubEvents.html":{}}}],["src/timescale/entities/pull_request_github_event.ts:154",{"_index":2045,"title":{},"body":{"entities/DbPullRequestGitHubEvents.html":{}}}],["src/timescale/entities/pull_request_github_event.ts:162",{"_index":2039,"title":{},"body":{"entities/DbPullRequestGitHubEvents.html":{}}}],["src/timescale/entities/pull_request_github_event.ts:170",{"_index":2048,"title":{},"body":{"entities/DbPullRequestGitHubEvents.html":{}}}],["src/timescale/entities/pull_request_github_event.ts:178",{"_index":2043,"title":{},"body":{"entities/DbPullRequestGitHubEvents.html":{}}}],["src/timescale/entities/pull_request_github_event.ts:189",{"_index":2061,"title":{},"body":{"entities/DbPullRequestGitHubEvents.html":{}}}],["src/timescale/entities/pull_request_github_event.ts:197",{"_index":2046,"title":{},"body":{"entities/DbPullRequestGitHubEvents.html":{}}}],["src/timescale/entities/pull_request_github_event.ts:23",{"_index":2057,"title":{},"body":{"entities/DbPullRequestGitHubEvents.html":{}}}],["src/timescale/entities/pull_request_github_event.ts:30",{"_index":2058,"title":{},"body":{"entities/DbPullRequestGitHubEvents.html":{}}}],["src/timescale/entities/pull_request_github_event.ts:37",{"_index":2051,"title":{},"body":{"entities/DbPullRequestGitHubEvents.html":{}}}],["src/timescale/entities/pull_request_github_event.ts:44",{"_index":2052,"title":{},"body":{"entities/DbPullRequestGitHubEvents.html":{}}}],["src/timescale/entities/pull_request_github_event.ts:51",{"_index":2055,"title":{},"body":{"entities/DbPullRequestGitHubEvents.html":{}}}],["src/timescale/entities/pull_request_github_event.ts:58",{"_index":2053,"title":{},"body":{"entities/DbPullRequestGitHubEvents.html":{}}}],["src/timescale/entities/pull_request_github_event.ts:65",{"_index":2059,"title":{},"body":{"entities/DbPullRequestGitHubEvents.html":{}}}],["src/timescale/entities/pull_request_github_event.ts:75",{"_index":2049,"title":{},"body":{"entities/DbPullRequestGitHubEvents.html":{}}}],["src/timescale/entities/pull_request_github_event.ts:85",{"_index":2041,"title":{},"body":{"entities/DbPullRequestGitHubEvents.html":{}}}],["src/timescale/entities/pull_request_github_event.ts:92",{"_index":2050,"title":{},"body":{"entities/DbPullRequestGitHubEvents.html":{}}}],["src/timescale/entities/pull_request_github_event.ts:99",{"_index":2042,"title":{},"body":{"entities/DbPullRequestGitHubEvents.html":{}}}],["src/timescale/pull_request_github_events.service.ts",{"_index":3347,"title":{},"body":{"injectables/PullRequestGithubEventsService.html":{}}}],["src/timescale/pull_request_github_events.service.ts:11",{"_index":3350,"title":{},"body":{"injectables/PullRequestGithubEventsService.html":{}}}],["src/timescale/pull_request_github_events.service.ts:17",{"_index":3352,"title":{},"body":{"injectables/PullRequestGithubEventsService.html":{}}}],["src/timescale/pull_request_github_events.service.ts:23",{"_index":3354,"title":{},"body":{"injectables/PullRequestGithubEventsService.html":{}}}],["src/timescale/timescale.module.ts",{"_index":4300,"title":{},"body":{"modules/TimescaleModule.html":{}}}],["src/user",{"_index":6,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"classes/CollaboratorsDto.html":{},"classes/ContributionPageMetaDto.html":{},"classes/ContributionsByProjectDto.html":{},"classes/ContributionsPageDto.html":{},"classes/ContributionsTimeframeDto.html":{},"classes/Contributor.html":{},"classes/CreateUserListDto.html":{},"entities/DbContributionStatTimeframe.html":{},"entities/DbContributionsProjects.html":{},"entities/DbContributorCategoryTimeframe.html":{},"classes/DbTimezone.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserListContributorStat-1.html":{},"entities/DbUserRepo.html":{},"classes/FilterListContributorsDto.html":{},"classes/TopProjectsDto.html":{},"controllers/UserListController.html":{},"modules/UserListModule.html":{},"classes/UserListMostActiveContributorsDto.html":{},"injectables/UserListService.html":{},"controllers/UserListStatsController.html":{},"injectables/UserListStatsService.html":{},"classes/UserRepoOptionsDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"modules/UserReposModule.html":{},"injectables/UserReposService.html":{},"classes/VotedRepoDto.html":{},"miscellaneous/enumerations.html":{}}}],["src/user/dtos/apply",{"_index":523,"title":{},"body":{"classes/ApplyUserCouponDto.html":{}}}],["src/user/dtos/contributor",{"_index":1286,"title":{},"body":{"classes/ContributorPullRequestsDto.html":{},"miscellaneous/enumerations.html":{}}}],["src/user/dtos/create",{"_index":1425,"title":{},"body":{"classes/CreateUserCollaborationDto.html":{},"classes/CreateUserHighlightDto.html":{}}}],["src/user/dtos/filtered",{"_index":2683,"title":{},"body":{"classes/FilteredUsersDto.html":{}}}],["src/user/dtos/follow",{"_index":2692,"title":{},"body":{"classes/FollowManyUsersDto.html":{}}}],["src/user/dtos/top",{"_index":4309,"title":{},"body":{"classes/TopUsersDto.html":{}}}],["src/user/dtos/update",{"_index":4327,"title":{},"body":{"classes/UpdateUserCollaborationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{}}}],["src/user/entities/filtered",{"_index":1788,"title":{},"body":{"classes/DbFilteredUser.html":{}}}],["src/user/entities/top",{"_index":2208,"title":{},"body":{"classes/DbTopUser.html":{}}}],["src/user/entities/user",{"_index":2209,"title":{},"body":{"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserNotification.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["src/user/user",{"_index":4380,"title":{},"body":{"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserEndorsementController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowingController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"injectables/UserOrganizationService.html":{},"controllers/UserRecommendationController.html":{}}}],["src/user/user.controller.ts",{"_index":4451,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:104",{"_index":4473,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:121",{"_index":4469,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:136",{"_index":4492,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:147",{"_index":4495,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:44",{"_index":4488,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:56",{"_index":4483,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:72",{"_index":4478,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:87",{"_index":4463,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.module.ts",{"_index":5246,"title":{},"body":{"modules/UserModule.html":{}}}],["src/vote/repo",{"_index":3922,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["src/vote/vote.module.ts",{"_index":5386,"title":{},"body":{"modules/VoteModule.html":{}}}],["src/vote/vote.service.ts",{"_index":5388,"title":{},"body":{"injectables/VoteService.html":{}}}],["src/vote/vote.service.ts:13",{"_index":5395,"title":{},"body":{"injectables/VoteService.html":{}}}],["src/vote/vote.service.ts:19",{"_index":5398,"title":{},"body":{"injectables/VoteService.html":{}}}],["src/vote/vote.service.ts:42",{"_index":5402,"title":{},"body":{"injectables/VoteService.html":{}}}],["src/vote/vote.service.ts:61",{"_index":5397,"title":{},"body":{"injectables/VoteService.html":{}}}],["src/vote/vote.service.ts:7",{"_index":5393,"title":{},"body":{"injectables/VoteService.html":{}}}],["src/vote/vote.service.ts:77",{"_index":5400,"title":{},"body":{"injectables/VoteService.html":{}}}],["ssl",{"_index":464,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["stack",{"_index":1496,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["staff",{"_index":2132,"title":{},"body":{"entities/DbRepoToUserSubmissions.html":{}}}],["standard",{"_index":2664,"title":{},"body":{"classes/FilterListContributorsDto.html":{}}}],["star",{"_index":2112,"title":{},"body":{"entities/DbRepoToUserStars.html":{},"controllers/RepoStarController.html":{},"injectables/StarService.html":{}}}],["star'})@apiokresponse({description",{"_index":3810,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["star'})@apiparam({name",{"_index":3815,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["star.controller",{"_index":3976,"title":{},"body":{"modules/StarModule.html":{}}}],["star.controller.ts",{"_index":3801,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["star.controller.ts:100",{"_index":3816,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["star.controller.ts:119",{"_index":3819,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["star.controller.ts:36",{"_index":3823,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["star.controller.ts:57",{"_index":3828,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["star.controller.ts:76",{"_index":3831,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["star.service",{"_index":3835,"title":{},"body":{"controllers/RepoStarController.html":{},"modules/StarModule.html":{}}}],["star/star.module",{"_index":356,"title":{},"body":{"modules/AppModule.html":{}}}],["starbyrepoid",{"_index":3979,"title":{},"body":{"injectables/StarService.html":{}}}],["starbyrepoid(repoid",{"_index":3986,"title":{},"body":{"injectables/StarService.html":{}}}],["starexists",{"_index":3993,"title":{},"body":{"injectables/StarService.html":{}}}],["starexists.deleted_at",{"_index":3994,"title":{},"body":{"injectables/StarService.html":{}}}],["stargaze",{"_index":2095,"title":{},"body":{"entities/DbRepoToUserStargazers.html":{},"controllers/RepoStargazeController.html":{}}}],["stargaze.controller",{"_index":4005,"title":{},"body":{"modules/StargazeModule.html":{}}}],["stargaze.controller.ts",{"_index":3848,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["stargaze.controller.ts:103",{"_index":3859,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["stargaze.controller.ts:125",{"_index":3862,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["stargaze.controller.ts:36",{"_index":3865,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["stargaze.controller.ts:57",{"_index":3869,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["stargaze.controller.ts:79",{"_index":3872,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["stargaze.service",{"_index":3874,"title":{},"body":{"controllers/RepoStargazeController.html":{},"modules/StargazeModule.html":{}}}],["stargaze/stargaze.module",{"_index":357,"title":{},"body":{"modules/AppModule.html":{}}}],["stargazebyrepoid",{"_index":4008,"title":{},"body":{"injectables/StargazeService.html":{}}}],["stargazebyrepoid(repoid",{"_index":4015,"title":{},"body":{"injectables/StargazeService.html":{}}}],["stargazeexists",{"_index":4021,"title":{},"body":{"injectables/StargazeService.html":{}}}],["stargazeexists.deleted_at",{"_index":4022,"title":{},"body":{"injectables/StargazeService.html":{}}}],["stargazemodule",{"_index":277,"title":{"modules/StargazeModule.html":{}},"body":{"modules/AppModule.html":{},"modules/StargazeModule.html":{},"modules.html":{},"overview.html":{}}}],["stargazeonebyid",{"_index":3852,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["stargazeonebyid(id",{"_index":3866,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["stargazeonebyownerandrepo",{"_index":3853,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["stargazeonebyownerandrepo(owner",{"_index":3870,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["stargazers",{"_index":3742,"title":{},"body":{"injectables/RepoService.html":{},"controllers/RepoStargazeController.html":{}}}],["stargazerscount",{"_index":3690,"title":{},"body":{"classes/RepoPageOptionsDto.html":{},"injectables/RepoService.html":{},"miscellaneous/enumerations.html":{}}}],["stargazeservice",{"_index":3873,"title":{"injectables/StargazeService.html":{}},"body":{"controllers/RepoStargazeController.html":{},"modules/StargazeModule.html":{},"injectables/StargazeService.html":{},"overview.html":{}}}],["starmodule",{"_index":276,"title":{"modules/StarModule.html":{}},"body":{"modules/AppModule.html":{},"modules/StarModule.html":{},"modules.html":{},"overview.html":{}}}],["staronebyid",{"_index":3805,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["staronebyid(@param(\"id",{"_index":3839,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["staronebyid(id",{"_index":3824,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["staronebyownerandrepo",{"_index":3806,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["staronebyownerandrepo(owner",{"_index":3829,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["starred",{"_index":3822,"title":{},"body":{"controllers/RepoStarController.html":{},"injectables/StarService.html":{}}}],["stars",{"_index":3684,"title":{},"body":{"classes/RepoPageOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"miscellaneous/enumerations.html":{}}}],["starscount",{"_index":3691,"title":{},"body":{"classes/RepoPageOptionsDto.html":{},"injectables/RepoService.html":{},"miscellaneous/enumerations.html":{}}}],["starservice",{"_index":3834,"title":{"injectables/StarService.html":{}},"body":{"controllers/RepoStarController.html":{},"modules/StarModule.html":{},"injectables/StarService.html":{},"overview.html":{}}}],["start",{"_index":947,"title":{},"body":{"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"classes/ContributionPageOptionsDto.html":{},"classes/ContributorPullRequestsDto.html":{},"entities/DbContributionStatTimeframe.html":{},"entities/DbContributorCategoryTimeframe.html":{},"entities/DbSubscription.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"controllers/RepoContributionsController.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/UserListMostActiveContributorsDto.html":{},"classes/UserRepoOptionsDto.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["start:dev",{"_index":5542,"title":{},"body":{"index.html":{}}}],["start_date",{"_index":3514,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["start_date}'::timestamp",{"_index":3557,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["start_range",{"_index":3511,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["startdate",{"_index":156,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/ContributionService.html":{},"injectables/PullRequestGithubEventsService.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoFilterService.html":{},"injectables/RepoService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserListService.html":{},"injectables/UserListStatsService.html":{}}}],["startdate}'::timestamp",{"_index":160,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/ContributionService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoFilterService.html":{},"injectables/RepoService.html":{},"injectables/UserListStatsService.html":{}}}],["started",{"_index":5438,"title":{"index.html":{},"license.html":{}},"body":{"miscellaneous/variables.html":{}}}],["starting",{"_index":3408,"title":{},"body":{"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{}}}],["starts",{"_index":5881,"title":{},"body":{"miscellaneous/variables.html":{}}}],["starttime",{"_index":2873,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{},"miscellaneous/variables.html":{}}}],["starttime)}ms",{"_index":5787,"title":{},"body":{"miscellaneous/variables.html":{}}}],["stat.service",{"_index":5069,"title":{},"body":{"modules/UserListModule.html":{},"controllers/UserListStatsController.html":{}}}],["stat.service.ts",{"_index":9,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["stat.service.ts:191",{"_index":5236,"title":{},"body":{"injectables/UserListStatsService.html":{}}}],["stat.service.ts:206",{"_index":5232,"title":{},"body":{"injectables/UserListStatsService.html":{}}}],["stat.service.ts:221",{"_index":5241,"title":{},"body":{"injectables/UserListStatsService.html":{}}}],["stat.service.ts:236",{"_index":5234,"title":{},"body":{"injectables/UserListStatsService.html":{}}}],["stat.service.ts:27",{"_index":5219,"title":{},"body":{"injectables/UserListStatsService.html":{}}}],["stat.service.ts:312",{"_index":5238,"title":{},"body":{"injectables/UserListStatsService.html":{}}}],["stat.service.ts:33",{"_index":5226,"title":{},"body":{"injectables/UserListStatsService.html":{}}}],["stat.service.ts:363",{"_index":5230,"title":{},"body":{"injectables/UserListStatsService.html":{}}}],["stat.service.ts:39",{"_index":5240,"title":{},"body":{"injectables/UserListStatsService.html":{}}}],["stat.service.ts:402",{"_index":5221,"title":{},"body":{"injectables/UserListStatsService.html":{}}}],["stat.service.ts:432",{"_index":5225,"title":{},"body":{"injectables/UserListStatsService.html":{}}}],["stat.service.ts:462",{"_index":5223,"title":{},"body":{"injectables/UserListStatsService.html":{}}}],["stat.service.ts:82",{"_index":5228,"title":{},"body":{"injectables/UserListStatsService.html":{}}}],["state",{"_index":1919,"title":{},"body":{"entities/DbPullRequest.html":{},"entities/DbPullRequestGitHubEvents.html":{},"entities/DbPullRequestReview.html":{},"injectables/PullRequestGithubEventsService.html":{}}}],["static",{"_index":5609,"title":{},"body":{"index.html":{}}}],["stats",{"_index":5195,"title":{},"body":{"controllers/UserListStatsController.html":{}}}],["stats.controller",{"_index":5070,"title":{},"body":{"modules/UserListModule.html":{}}}],["stats.controller.ts",{"_index":5168,"title":{},"body":{"controllers/UserListStatsController.html":{}}}],["stats.controller.ts:105",{"_index":5189,"title":{},"body":{"controllers/UserListStatsController.html":{}}}],["stats.controller.ts:40",{"_index":5203,"title":{},"body":{"controllers/UserListStatsController.html":{}}}],["stats.controller.ts:56",{"_index":5191,"title":{},"body":{"controllers/UserListStatsController.html":{}}}],["stats.controller.ts:73",{"_index":5180,"title":{},"body":{"controllers/UserListStatsController.html":{}}}],["stats.controller.ts:89",{"_index":5198,"title":{},"body":{"controllers/UserListStatsController.html":{}}}],["stats.entity",{"_index":32,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"modules/UserListModule.html":{},"controllers/UserListStatsController.html":{},"injectables/UserListStatsService.html":{}}}],["stats.entity.ts",{"_index":2356,"title":{},"body":{"entities/DbUserListContributorStat-1.html":{}}}],["stats.entity.ts:15",{"_index":2360,"title":{},"body":{"entities/DbUserListContributorStat-1.html":{}}}],["stats.entity.ts:27",{"_index":2358,"title":{},"body":{"entities/DbUserListContributorStat-1.html":{}}}],["stats.entity.ts:39",{"_index":2361,"title":{},"body":{"entities/DbUserListContributorStat-1.html":{}}}],["stats.entity.ts:51",{"_index":2362,"title":{},"body":{"entities/DbUserListContributorStat-1.html":{}}}],["stats.entity.ts:63",{"_index":2359,"title":{},"body":{"entities/DbUserListContributorStat-1.html":{}}}],["stats.entity.ts:75",{"_index":2357,"title":{},"body":{"entities/DbUserListContributorStat-1.html":{}}}],["status",{"_index":2170,"title":{},"body":{"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"classes/PullRequestPageOptionsDto.html":{},"controllers/StripeWebhookController.html":{},"classes/UpdateUserCollaborationDto.html":{},"controllers/UserCollaborationController.html":{},"miscellaneous/variables.html":{}}}],["statuscode",{"_index":2877,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{},"controllers/PizzaOvenController.html":{}}}],["statusmessage",{"_index":2878,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{}}}],["steps",{"_index":5459,"title":{},"body":{"index.html":{}}}],["stood",{"_index":5529,"title":{},"body":{"index.html":{}}}],["string",{"_index":76,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"classes/ApplyUserCouponDto.html":{},"controllers/AuthController.html":{},"classes/BakeRepoDto.html":{},"injectables/BlogSummaryService.html":{},"interfaces/ChatResponse.html":{},"injectables/CodeExplanationService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"classes/CommitAuthorDto.html":{},"classes/CommitsDto.html":{},"injectables/ContributionService.html":{},"classes/Contributor.html":{},"injectables/CouponService.html":{},"classes/CreateBlogSummaryDto.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateInsightDto.html":{},"classes/CreateInsightMemberDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/CreateLogDto.html":{},"classes/CreateUserCollaborationDto.html":{},"classes/CreateUserHighlightDto.html":{},"classes/CreateUserListDto.html":{},"injectables/CustomLogger.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"entities/DbBakedRepo.html":{},"entities/DbCommitAuthors.html":{},"entities/DbCommits.html":{},"entities/DbContribution.html":{},"entities/DbContributionStatTimeframe.html":{},"entities/DbContributionsProjects.html":{},"entities/DbContributorCategoryTimeframe.html":{},"entities/DbCoupon.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"classes/DbFilteredUser.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbPullRequestGitHubEvents.html":{},"entities/DbPullRequestReview.html":{},"entities/DbRepoLoginContributions.html":{},"entities/DbSubscription.html":{},"classes/DbTimezone.html":{},"classes/DbTopUser.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightReactionResponse.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserListContributorStat.html":{},"entities/DbUserListContributorStat-1.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"controllers/EndorsementController.html":{},"injectables/EndorsementService.html":{},"classes/FilterListContributorsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/FilteredUsersDto.html":{},"classes/FollowManyUsersDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"classes/HighlightOptionsDto.html":{},"injectables/InsightMemberService.html":{},"classes/InsightOptionsDto.html":{},"injectables/InsightsService.html":{},"injectables/IssueSummaryService.html":{},"injectables/OpenAiService.html":{},"injectables/PizzaOvenService.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"controllers/PullRequestController.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestGithubEventsService.html":{},"injectables/PullRequestInsightsService.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"injectables/RepoFilterService.html":{},"classes/RepoInfo.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StripeService.html":{},"controllers/StripeWebhookController.html":{},"classes/SupabaseAuthDto.html":{},"injectables/TierService.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateInsightMemberDto.html":{},"classes/UpdateUserCollaborationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"controllers/UserFollowingController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"injectables/UserListService.html":{},"controllers/UserListStatsController.html":{},"injectables/UserListStatsService.html":{},"classes/UserOnboardingDto.html":{},"injectables/UserReposService.html":{},"miscellaneous/variables.html":{}}}],["string'})@apiparam({name",{"_index":4968,"title":{},"body":{"controllers/UserListController.html":{}}}],["string'})@apiquery({name",{"_index":5179,"title":{},"body":{"controllers/UserListStatsController.html":{}}}],["string'})@column({type",{"_index":1714,"title":{},"body":{"entities/DbContributionStatTimeframe.html":{},"entities/DbContributionsProjects.html":{},"entities/DbContributorCategoryTimeframe.html":{}}}],["string'})@minlength(3)@type(undefined",{"_index":2688,"title":{},"body":{"classes/FilteredUsersDto.html":{}}}],["string'})@primarycolumn({type",{"_index":1732,"title":{},"body":{"entities/DbCoupon.html":{}}}],["string(id",{"_index":697,"title":{},"body":{"controllers/AuthController.html":{}}}],["string(major(\"1.8.0",{"_index":5852,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.api_codename",{"_index":5754,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.api_domain",{"_index":5761,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.api_host",{"_index":5757,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.api_port",{"_index":5759,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.endorsement_service_token",{"_index":5776,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.hacktoberfest_year",{"_index":5895,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.openai_api_key",{"_index":5900,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.openai_completions_api_url",{"_index":5907,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.openai_model_name",{"_index":5902,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.pizza_oven_host",{"_index":5910,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.pizza_oven_port",{"_index":5911,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.stripe_checkout_session_cancel_url",{"_index":5924,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.stripe_checkout_session_success_url",{"_index":5922,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.stripe_secret_key",{"_index":5916,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.stripe_subscription_price_id",{"_index":5920,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.stripe_webhook_secret_live",{"_index":5917,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.tier_plan_free",{"_index":6012,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.typeorm_connection_api",{"_index":5790,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.typeorm_connection_logging",{"_index":5804,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.typeorm_connection_timescale",{"_index":5814,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.typeorm_database_api",{"_index":5798,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.typeorm_database_logging",{"_index":5809,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.typeorm_database_timescale",{"_index":5820,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.typeorm_host_api",{"_index":5791,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.typeorm_host_logging",{"_index":5805,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.typeorm_host_timescale",{"_index":5815,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.typeorm_password_api",{"_index":5796,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.typeorm_password_logging",{"_index":5808,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.typeorm_password_timescale",{"_index":5819,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.typeorm_port_api",{"_index":5793,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.typeorm_port_logging",{"_index":5806,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.typeorm_port_timescale",{"_index":5816,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.typeorm_ssl_cert_api",{"_index":5801,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.typeorm_ssl_cert_logging",{"_index":5810,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.typeorm_ssl_cert_timescale",{"_index":5822,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.typeorm_username_api",{"_index":5794,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.typeorm_username_logging",{"_index":5807,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.typeorm_username_timescale",{"_index":5817,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(user_name",{"_index":698,"title":{},"body":{"controllers/AuthController.html":{}}}],["stringifyparameters",{"_index":1551,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["stringifyparameters(parameters",{"_index":1568,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["string})@isstring",{"_index":1326,"title":{},"body":{"classes/CreateBlogSummaryDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{}}}],["string})@isstring()@isoptional",{"_index":2717,"title":{},"body":{"classes/GeneratePullRequestDescriptionDto.html":{}}}],["stripe",{"_index":377,"title":{},"body":{"modules/AppModule.html":{},"entities/DbCustomer.html":{},"injectables/StripeService.html":{},"modules/StripeSubscriptionModule.html":{},"injectables/StripeSubscriptionService.html":{},"modules/StripeWebHookModule.html":{},"controllers/StripeWebhookController.html":{}}}],["stripe(this.configservice.get(\"stripe.secretkey",{"_index":4042,"title":{},"body":{"injectables/StripeService.html":{}}}],["stripe.checkout.session",{"_index":4160,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["stripe.service",{"_index":4030,"title":{},"body":{"modules/StripeModule.html":{}}}],["stripe.subscription",{"_index":4155,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["stripe/stripe.module",{"_index":749,"title":{},"body":{"modules/AuthModule.html":{},"modules/StripeWebHookModule.html":{}}}],["stripe/stripe.service",{"_index":635,"title":{},"body":{"controllers/AuthController.html":{},"controllers/StripeWebhookController.html":{}}}],["stripe_customer_id",{"_index":1530,"title":{},"body":{"injectables/CustomerService.html":{},"entities/DbCustomer.html":{}}}],["stripeconfig",{"_index":324,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["stripecustomer",{"_index":716,"title":{},"body":{"controllers/AuthController.html":{}}}],["stripecustomer.id",{"_index":720,"title":{},"body":{"controllers/AuthController.html":{}}}],["stripemodule",{"_index":744,"title":{"modules/StripeModule.html":{}},"body":{"modules/AuthModule.html":{},"modules/StripeModule.html":{},"modules/StripeWebHookModule.html":{},"modules.html":{},"overview.html":{}}}],["stripeservice",{"_index":634,"title":{"injectables/StripeService.html":{}},"body":{"controllers/AuthController.html":{},"modules/StripeModule.html":{},"injectables/StripeService.html":{},"controllers/StripeWebhookController.html":{},"overview.html":{}}}],["stripesubscriptionmodule",{"_index":278,"title":{"modules/StripeSubscriptionModule.html":{}},"body":{"modules/AppModule.html":{},"modules/StripeSubscriptionModule.html":{},"modules/StripeWebHookModule.html":{},"modules.html":{},"overview.html":{}}}],["stripesubscriptionservice",{"_index":4063,"title":{"injectables/StripeSubscriptionService.html":{}},"body":{"modules/StripeSubscriptionModule.html":{},"injectables/StripeSubscriptionService.html":{},"controllers/StripeWebhookController.html":{},"overview.html":{}}}],["stripewebhookcontroller",{"_index":4081,"title":{"controllers/StripeWebhookController.html":{}},"body":{"modules/StripeWebHookModule.html":{},"controllers/StripeWebhookController.html":{},"overview.html":{}}}],["stripewebhookmodule",{"_index":279,"title":{"modules/StripeWebHookModule.html":{}},"body":{"modules/AppModule.html":{},"modules/StripeWebHookModule.html":{},"modules.html":{},"overview.html":{}}}],["structure",{"_index":5616,"title":{},"body":{"index.html":{}}}],["structured",{"_index":5712,"title":{},"body":{"properties.html":{}}}],["style",{"_index":2726,"title":{},"body":{"classes/GeneratePullRequestDescriptionDto.html":{}}}],["styles",{"_index":5580,"title":{},"body":{"index.html":{}}}],["sub",{"_index":669,"title":{},"body":{"controllers/AuthController.html":{}}}],["sub_1234",{"_index":2200,"title":{},"body":{"entities/DbSubscription.html":{}}}],["sub_1234'})@primarycolumn('text",{"_index":2184,"title":{},"body":{"entities/DbSubscription.html":{}}}],["subdomain",{"_index":5834,"title":{},"body":{"miscellaneous/variables.html":{}}}],["subevents",{"_index":4152,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["subevents.includes(event.type",{"_index":4153,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["subj",{"_index":5503,"title":{},"body":{"index.html":{}}}],["subject",{"_index":5663,"title":{},"body":{"license.html":{}}}],["sublicense",{"_index":5656,"title":{},"body":{"license.html":{}}}],["submission",{"_index":2128,"title":{},"body":{"entities/DbRepoToUserSubmissions.html":{},"controllers/RepoSubmitController.html":{}}}],["submission'})@apiokresponse({description",{"_index":3894,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["submission'})@apiparam({name",{"_index":3896,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["submissions",{"_index":3741,"title":{},"body":{"injectables/RepoService.html":{},"controllers/RepoSubmitController.html":{}}}],["submissionscount",{"_index":3689,"title":{},"body":{"classes/RepoPageOptionsDto.html":{},"injectables/RepoService.html":{},"miscellaneous/enumerations.html":{}}}],["submit",{"_index":3913,"title":{},"body":{"controllers/RepoSubmitController.html":{},"injectables/SubmitService.html":{}}}],["submit.controller",{"_index":4170,"title":{},"body":{"modules/SubmitModule.html":{}}}],["submit.controller.ts",{"_index":3886,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["submit.controller.ts:103",{"_index":3897,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["submit.controller.ts:125",{"_index":3900,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["submit.controller.ts:36",{"_index":3904,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["submit.controller.ts:57",{"_index":3907,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["submit.controller.ts:79",{"_index":3910,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["submit.service",{"_index":3912,"title":{},"body":{"controllers/RepoSubmitController.html":{},"modules/SubmitModule.html":{}}}],["submit/submit.module",{"_index":358,"title":{},"body":{"modules/AppModule.html":{}}}],["submitbyrepoid",{"_index":4173,"title":{},"body":{"injectables/SubmitService.html":{}}}],["submitbyrepoid(repoid",{"_index":4180,"title":{},"body":{"injectables/SubmitService.html":{}}}],["submitd",{"_index":4188,"title":{},"body":{"injectables/SubmitService.html":{}}}],["submitexists",{"_index":4186,"title":{},"body":{"injectables/SubmitService.html":{}}}],["submitexists.deleted_at",{"_index":4187,"title":{},"body":{"injectables/SubmitService.html":{}}}],["submitmodule",{"_index":280,"title":{"modules/SubmitModule.html":{}},"body":{"modules/AppModule.html":{},"modules/SubmitModule.html":{},"modules.html":{},"overview.html":{}}}],["submitonebyid",{"_index":3890,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["submitonebyid(id",{"_index":3905,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["submitonebyownerandrepo",{"_index":3891,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["submitonebyownerandrepo(owner",{"_index":3908,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["submitservice",{"_index":3911,"title":{"injectables/SubmitService.html":{}},"body":{"controllers/RepoSubmitController.html":{},"modules/SubmitModule.html":{},"injectables/SubmitService.html":{},"overview.html":{}}}],["submitted",{"_index":3903,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["subquery",{"_index":209,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/RepoService.html":{},"injectables/UserListStatsService.html":{}}}],["subquerybuilder",{"_index":152,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["subquerybuilder.innerjoin",{"_index":153,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["subquerycount",{"_index":3701,"title":{},"body":{"injectables/RepoService.html":{}}}],["subquerycount(subquery",{"_index":3719,"title":{},"body":{"injectables/RepoService.html":{}}}],["subquerycountprs",{"_index":3385,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["subquerycountprs(qb",{"_index":3398,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["subscribe",{"_index":4285,"title":{},"body":{"injectables/TierService.html":{}}}],["subscribe(`org:${userid",{"_index":4294,"title":{},"body":{"injectables/TierService.html":{}}}],["subscribers",{"_index":3686,"title":{},"body":{"classes/RepoPageOptionsDto.html":{},"miscellaneous/enumerations.html":{}}}],["subscription",{"_index":2175,"title":{},"body":{"entities/DbSubscription.html":{},"injectables/StripeService.html":{},"injectables/StripeSubscriptionService.html":{},"controllers/StripeWebhookController.html":{}}}],["subscription.cancel_at",{"_index":4123,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["subscription.cancel_at_period_end",{"_index":4122,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["subscription.canceled_at",{"_index":4125,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["subscription.customer",{"_index":4157,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["subscription.dto",{"_index":383,"title":{},"body":{"modules/AppModule.html":{},"modules/StripeSubscriptionModule.html":{},"injectables/StripeSubscriptionService.html":{}}}],["subscription.dto.ts",{"_index":2160,"title":{},"body":{"entities/DbSubscription.html":{}}}],["subscription.dto.ts:101",{"_index":2183,"title":{},"body":{"entities/DbSubscription.html":{}}}],["subscription.dto.ts:111",{"_index":2174,"title":{},"body":{"entities/DbSubscription.html":{}}}],["subscription.dto.ts:121",{"_index":2178,"title":{},"body":{"entities/DbSubscription.html":{}}}],["subscription.dto.ts:131",{"_index":2196,"title":{},"body":{"entities/DbSubscription.html":{}}}],["subscription.dto.ts:141",{"_index":2195,"title":{},"body":{"entities/DbSubscription.html":{}}}],["subscription.dto.ts:16",{"_index":2185,"title":{},"body":{"entities/DbSubscription.html":{}}}],["subscription.dto.ts:23",{"_index":2198,"title":{},"body":{"entities/DbSubscription.html":{}}}],["subscription.dto.ts:33",{"_index":2193,"title":{},"body":{"entities/DbSubscription.html":{}}}],["subscription.dto.ts:40",{"_index":2186,"title":{},"body":{"entities/DbSubscription.html":{}}}],["subscription.dto.ts:47",{"_index":2189,"title":{},"body":{"entities/DbSubscription.html":{}}}],["subscription.dto.ts:54",{"_index":2191,"title":{},"body":{"entities/DbSubscription.html":{}}}],["subscription.dto.ts:61",{"_index":2176,"title":{},"body":{"entities/DbSubscription.html":{}}}],["subscription.dto.ts:71",{"_index":2179,"title":{},"body":{"entities/DbSubscription.html":{}}}],["subscription.dto.ts:81",{"_index":2182,"title":{},"body":{"entities/DbSubscription.html":{}}}],["subscription.dto.ts:91",{"_index":2181,"title":{},"body":{"entities/DbSubscription.html":{}}}],["subscription.ended_at",{"_index":4130,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["subscription.id",{"_index":4117,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["subscription.items.data.length",{"_index":4121,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["subscription.items.data[0].price.id",{"_index":4120,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["subscription.module",{"_index":381,"title":{},"body":{"modules/AppModule.html":{},"modules/StripeWebHookModule.html":{}}}],["subscription.module.ts",{"_index":4064,"title":{},"body":{"modules/StripeSubscriptionModule.html":{}}}],["subscription.service",{"_index":4065,"title":{},"body":{"modules/StripeSubscriptionModule.html":{},"controllers/StripeWebhookController.html":{}}}],["subscription.service.ts",{"_index":4067,"title":{},"body":{"injectables/StripeSubscriptionService.html":{}}}],["subscription.service.ts:14",{"_index":4072,"title":{},"body":{"injectables/StripeSubscriptionService.html":{}}}],["subscription.service.ts:18",{"_index":4074,"title":{},"body":{"injectables/StripeSubscriptionService.html":{}}}],["subscription.service.ts:8",{"_index":4070,"title":{},"body":{"injectables/StripeSubscriptionService.html":{}}}],["subscription.status",{"_index":4119,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["subscription.trial_end",{"_index":4134,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["subscription.trial_start",{"_index":4132,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["subscription/stripe",{"_index":380,"title":{},"body":{"modules/AppModule.html":{},"modules/StripeSubscriptionModule.html":{},"modules/StripeWebHookModule.html":{},"controllers/StripeWebhookController.html":{}}}],["subscriptiondata",{"_index":4116,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["subscriptionid",{"_index":4096,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["subscriptionpriceid",{"_index":5919,"title":{},"body":{"miscellaneous/variables.html":{}}}],["subscriptionrepository",{"_index":4071,"title":{},"body":{"injectables/StripeSubscriptionService.html":{}}}],["subscriptions",{"_index":2199,"title":{},"body":{"entities/DbSubscription.html":{}}}],["subscriptionsessioncancelurl",{"_index":5923,"title":{},"body":{"miscellaneous/variables.html":{}}}],["subscriptionsessioncheckoutsuccessurl",{"_index":5921,"title":{},"body":{"miscellaneous/variables.html":{}}}],["substantial",{"_index":5669,"title":{},"body":{"license.html":{}}}],["succeeds",{"_index":5967,"title":{},"body":{"miscellaneous/variables.html":{}}}],["success_url",{"_index":4054,"title":{},"body":{"injectables/StripeService.html":{}}}],["successfully",{"_index":5781,"title":{},"body":{"miscellaneous/variables.html":{}}}],["such",{"_index":834,"title":{},"body":{"injectables/BlogSummaryService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"injectables/IssueSummaryService.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["suggest",{"_index":946,"title":{},"body":{"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{}}}],["suggestion",{"_index":913,"title":{},"body":{"controllers/CodeExplanationController.html":{},"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"controllers/CodeTestSuggestionController.html":{},"injectables/CodeTestSuggestionService.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{}}}],["suggestion.controller",{"_index":3452,"title":{},"body":{"modules/PullRequestModule.html":{}}}],["suggestion.controller.ts",{"_index":927,"title":{},"body":{"controllers/CodeRefactorSuggestionController.html":{}}}],["suggestion.controller.ts:22",{"_index":933,"title":{},"body":{"controllers/CodeRefactorSuggestionController.html":{}}}],["suggestion.dto",{"_index":934,"title":{},"body":{"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"controllers/CodeTestSuggestionController.html":{},"injectables/CodeTestSuggestionService.html":{}}}],["suggestion.dto.ts",{"_index":2704,"title":{},"body":{"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{}}}],["suggestion.dto.ts:13",{"_index":2706,"title":{},"body":{"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{}}}],["suggestion.dto.ts:23",{"_index":2708,"title":{},"body":{"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{}}}],["suggestion.dto.ts:30",{"_index":2709,"title":{},"body":{"classes/GenerateCodeTestSuggestionDto.html":{}}}],["suggestion.dto.ts:33",{"_index":2707,"title":{},"body":{"classes/GenerateCodeRefactorSuggestionDto.html":{}}}],["suggestion.dto.ts:40",{"_index":2705,"title":{},"body":{"classes/GenerateCodeRefactorSuggestionDto.html":{}}}],["suggestion.service",{"_index":936,"title":{},"body":{"controllers/CodeRefactorSuggestionController.html":{},"controllers/CodeTestSuggestionController.html":{},"modules/PullRequestModule.html":{}}}],["suggestion.service.ts",{"_index":939,"title":{},"body":{"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{}}}],["suggestion.service.ts:10",{"_index":944,"title":{},"body":{"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{}}}],["suggestion.service.ts:18",{"_index":943,"title":{},"body":{"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{}}}],["suggestion.service.ts:7",{"_index":941,"title":{},"body":{"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{}}}],["suite",{"_index":5544,"title":{},"body":{"index.html":{}}}],["summarize",{"_index":839,"title":{},"body":{"injectables/BlogSummaryService.html":{},"injectables/IssueSummaryService.html":{}}}],["summary",{"_index":556,"title":{},"body":{"controllers/AuthController.html":{},"controllers/BlogSummaryController.html":{},"injectables/BlogSummaryService.html":{},"controllers/CodeExplanationController.html":{},"controllers/CodeRefactorSuggestionController.html":{},"controllers/CodeTestSuggestionController.html":{},"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"classes/CreateBlogSummaryDto.html":{},"classes/CreateIssueSummaryDto.html":{},"controllers/EmojiController.html":{},"controllers/EndorsementController.html":{},"controllers/HealthController.html":{},"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"controllers/IssueSummaryController.html":{},"injectables/IssueSummaryService.html":{},"controllers/PizzaOvenController.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"controllers/UserFollowingController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"controllers/UserListStatsController.html":{},"controllers/UserNotificationController.html":{},"controllers/UserRecommendationController.html":{}}}],["summary.controller",{"_index":809,"title":{},"body":{"modules/BlogSummaryModule.html":{},"modules/IssueSummaryModule.html":{}}}],["summary.controller.ts",{"_index":772,"title":{},"body":{"controllers/BlogSummaryController.html":{},"controllers/IssueSummaryController.html":{}}}],["summary.controller.ts:22",{"_index":785,"title":{},"body":{"controllers/BlogSummaryController.html":{},"controllers/IssueSummaryController.html":{}}}],["summary.dto",{"_index":793,"title":{},"body":{"controllers/BlogSummaryController.html":{},"injectables/BlogSummaryService.html":{},"controllers/IssueSummaryController.html":{},"injectables/IssueSummaryService.html":{}}}],["summary.dto.ts",{"_index":1322,"title":{},"body":{"classes/CreateBlogSummaryDto.html":{},"classes/CreateIssueSummaryDto.html":{}}}],["summary.dto.ts:13",{"_index":1343,"title":{},"body":{"classes/CreateBlogSummaryDto.html":{},"classes/CreateIssueSummaryDto.html":{}}}],["summary.dto.ts:23",{"_index":1345,"title":{},"body":{"classes/CreateBlogSummaryDto.html":{},"classes/CreateIssueSummaryDto.html":{}}}],["summary.dto.ts:32",{"_index":1351,"title":{},"body":{"classes/CreateBlogSummaryDto.html":{},"classes/CreateIssueSummaryDto.html":{}}}],["summary.dto.ts:42",{"_index":1340,"title":{},"body":{"classes/CreateBlogSummaryDto.html":{},"classes/CreateIssueSummaryDto.html":{}}}],["summary.dto.ts:49",{"_index":1328,"title":{},"body":{"classes/CreateBlogSummaryDto.html":{},"classes/CreateIssueSummaryDto.html":{}}}],["summary.dto.ts:56",{"_index":1327,"title":{},"body":{"classes/CreateBlogSummaryDto.html":{},"classes/CreateIssueSummaryDto.html":{}}}],["summary.dto.ts:63",{"_index":1416,"title":{},"body":{"classes/CreateIssueSummaryDto.html":{}}}],["summary.module",{"_index":425,"title":{},"body":{"modules/AppModule.html":{}}}],["summary.module.ts",{"_index":807,"title":{},"body":{"modules/BlogSummaryModule.html":{},"modules/IssueSummaryModule.html":{}}}],["summary.service",{"_index":795,"title":{},"body":{"controllers/BlogSummaryController.html":{},"modules/BlogSummaryModule.html":{},"controllers/IssueSummaryController.html":{},"modules/IssueSummaryModule.html":{}}}],["summary.service.ts",{"_index":812,"title":{},"body":{"injectables/BlogSummaryService.html":{},"injectables/IssueSummaryService.html":{}}}],["summary.service.ts:10",{"_index":822,"title":{},"body":{"injectables/BlogSummaryService.html":{},"injectables/IssueSummaryService.html":{}}}],["summary.service.ts:20",{"_index":818,"title":{},"body":{"injectables/BlogSummaryService.html":{}}}],["summary.service.ts:21",{"_index":3092,"title":{},"body":{"injectables/IssueSummaryService.html":{}}}],["summary.service.ts:7",{"_index":816,"title":{},"body":{"injectables/BlogSummaryService.html":{},"injectables/IssueSummaryService.html":{}}}],["summarylength",{"_index":1325,"title":{},"body":{"classes/CreateBlogSummaryDto.html":{},"classes/CreateIssueSummaryDto.html":{}}}],["supabase",{"_index":631,"title":{},"body":{"controllers/AuthController.html":{},"classes/SupabaseAuthDto.html":{},"injectables/SupabaseStrategy.html":{},"controllers/UserCollaborationController.html":{},"index.html":{},"properties.html":{}}}],["supabase.guard",{"_index":651,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["supabase.strategy",{"_index":751,"title":{},"body":{"modules/AuthModule.html":{}}}],["supabase.user.decorator",{"_index":649,"title":{},"body":{"controllers/AuthController.html":{}}}],["supabase/supabase",{"_index":862,"title":{},"body":{"interfaces/ChatResponse.html":{},"injectables/OpenAiService.html":{}}}],["supabase_api_key=your_supabase_api_key",{"_index":5469,"title":{},"body":{"index.html":{}}}],["supabase_jwt_secret=your_supabase_jwt_secret",{"_index":5470,"title":{},"body":{"index.html":{}}}],["supabase_url=your_supabase_url",{"_index":5468,"title":{},"body":{"index.html":{}}}],["supabaseauthdto",{"_index":646,"title":{"classes/SupabaseAuthDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/SupabaseAuthDto.html":{}}}],["supabaseauthdto})@apinotfoundresponse({description",{"_index":587,"title":{},"body":{"controllers/AuthController.html":{}}}],["supabaseauthdto})@httpcode(httpstatus.ok",{"_index":580,"title":{},"body":{"controllers/AuthController.html":{}}}],["supabaseauthrequest",{"_index":5724,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["supabaseauthstrategy",{"_index":4256,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["supabaseauthuser",{"_index":575,"title":{},"body":{"controllers/AuthController.html":{},"injectables/SupabaseStrategy.html":{},"controllers/UserCollaborationController.html":{}}}],["supabaseguard",{"_index":650,"title":{"injectables/SupabaseGuard.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/BlogSummaryController.html":{},"controllers/CodeExplanationController.html":{},"controllers/CodeRefactorSuggestionController.html":{},"controllers/CodeTestSuggestionController.html":{},"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"controllers/IssueSummaryController.html":{},"controllers/PullRequestDescriptionController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/SupabaseGuard.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserEndorsementController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"controllers/UserNotificationController.html":{},"controllers/UserRecommendationController.html":{},"overview.html":{}}}],["supabasejwtsecret",{"_index":4263,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["supabasekey",{"_index":4260,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["supabaseoptions",{"_index":4262,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["supabasestrategy",{"_index":745,"title":{"injectables/SupabaseStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/SupabaseStrategy.html":{},"overview.html":{}}}],["supabaseurl",{"_index":4258,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["super",{"_index":1082,"title":{},"body":{"classes/ContributionPageMetaDto.html":{},"injectables/SupabaseStrategy.html":{}}}],["super(context",{"_index":1507,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["super.authenticate(req",{"_index":4268,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["super.debug.apply(this",{"_index":1514,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["super.error.apply(this",{"_index":1512,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["super.log.apply(this",{"_index":1510,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["super.validate(user",{"_index":4267,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["super.warn.apply(this",{"_index":1513,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["support",{"_index":5693,"title":{},"body":{"modules.html":{}}}],["supported",{"_index":781,"title":{},"body":{"controllers/BlogSummaryController.html":{}}}],["sure",{"_index":5593,"title":{},"body":{"index.html":{}}}],["svg",{"_index":5694,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":5590,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["swagger.ts",{"_index":5739,"title":{},"body":{"miscellaneous/variables.html":{}}}],["swagger.yaml",{"_index":5883,"title":{},"body":{"miscellaneous/variables.html":{}}}],["swaggermarkdowndescription",{"_index":5747,"title":{},"body":{"miscellaneous/variables.html":{}}}],["swaggermarkdowndescription(apidomain",{"_index":5845,"title":{},"body":{"miscellaneous/variables.html":{}}}],["swaggermodule.createdocument(app",{"_index":5870,"title":{},"body":{"miscellaneous/variables.html":{}}}],["switch",{"_index":106,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoService.html":{},"injectables/UserListStatsService.html":{}}}],["synchronize",{"_index":461,"title":{},"body":{"modules/AppModule.html":{}}}],["system",{"_index":882,"title":{},"body":{"interfaces/ChatResponse.html":{},"injectables/OpenAiService.html":{}}}],["systemmessage",{"_index":883,"title":{},"body":{"interfaces/ChatResponse.html":{},"injectables/OpenAiService.html":{}}}],["t",{"_index":1188,"title":{},"body":{"classes/ContributionsPageDto.html":{},"classes/PageDto.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/RepoFilterService.html":{},"injectables/RepoService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["t.setseconds(secs",{"_index":6019,"title":{},"body":{"miscellaneous/variables.html":{}}}],["table",{"_index":677,"title":{},"body":{"controllers/AuthController.html":{},"miscellaneous/variables.html":{}}}],["tagged",{"_index":1454,"title":{},"body":{"classes/CreateUserHighlightDto.html":{},"entities/DbUserHighlight.html":{}}}],["tagged_repos",{"_index":2239,"title":{},"body":{"entities/DbUserHighlight.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{}}}],["taggedrepos",{"_index":1443,"title":{},"body":{"classes/CreateUserHighlightDto.html":{}}}],["tags",{"_index":1992,"title":{},"body":{"entities/DbPullRequest.html":{},"entities/DbPullRequestGitHubEvents.html":{}}}],["take",{"_index":3407,"title":{},"body":{"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{}}}],["taken",{"_index":3094,"title":{},"body":{"injectables/IssueSummaryService.html":{}}}],["target",{"_index":495,"title":{},"body":{"modules/AppModule.html":{},"entities/DbPullRequest.html":{},"entities/DbPullRequestGitHubEvents.html":{},"injectables/RepoService.html":{}}}],["target_branch",{"_index":1920,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["target_label",{"_index":1921,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["target}.id",{"_index":3730,"title":{},"body":{"injectables/RepoService.html":{}}}],["team",{"_index":1400,"title":{},"body":{"classes/CreateInsightDto.html":{},"classes/CreateInsightMemberDto.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"controllers/UserInsightMemberController.html":{}}}],["team'})@column({type",{"_index":1811,"title":{},"body":{"entities/DbInsight.html":{}}}],["team'})@isstring",{"_index":1394,"title":{},"body":{"classes/CreateInsightDto.html":{},"classes/UpdateInsightDto.html":{}}}],["ted",{"_index":5721,"title":{},"body":{"properties.html":{}}}],["temperature",{"_index":867,"title":{},"body":{"interfaces/ChatResponse.html":{},"classes/CreateBlogSummaryDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"injectables/OpenAiService.html":{}}}],["tense",{"_index":3095,"title":{},"body":{"injectables/IssueSummaryService.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["terminusmodule",{"_index":308,"title":{},"body":{"modules/AppModule.html":{},"modules/HealthModule.html":{}}}],["test",{"_index":960,"title":{},"body":{"controllers/CodeTestSuggestionController.html":{},"injectables/CodeTestSuggestionService.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"modules/PullRequestModule.html":{},"index.html":{}}}],["test.suggestion.controller",{"_index":3453,"title":{},"body":{"modules/PullRequestModule.html":{}}}],["test.suggestion.controller.ts",{"_index":955,"title":{},"body":{"controllers/CodeTestSuggestionController.html":{}}}],["test.suggestion.controller.ts:22",{"_index":961,"title":{},"body":{"controllers/CodeTestSuggestionController.html":{}}}],["test:coveragefor",{"_index":5554,"title":{},"body":{"index.html":{}}}],["tests",{"_index":5545,"title":{},"body":{"index.html":{}}}],["testyou",{"_index":5551,"title":{},"body":{"index.html":{}}}],["text",{"_index":952,"title":{},"body":{"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"classes/CreateUserHighlightDto.html":{},"entities/DbCoupon.html":{},"entities/DbEmoji.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbPullRequest.html":{},"entities/DbPullRequestGitHubEvents.html":{},"entities/DbRepoLoginContributions.html":{},"entities/DbSubscription.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserListContributorStat.html":{},"entities/DbUserListContributorStat-1.html":{},"entities/DbUserRepo.html":{},"miscellaneous/variables.html":{}}}],["th3nn3ss",{"_index":2007,"title":{},"body":{"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbPullRequestGitHubEvents.html":{}}}],["th3nn3ss'})@column('text",{"_index":1932,"title":{},"body":{"entities/DbPullRequest.html":{},"entities/DbPullRequestGitHubEvents.html":{}}}],["th3nn3ss:cli_split_kwargs",{"_index":2003,"title":{},"body":{"entities/DbPullRequest.html":{},"entities/DbPullRequestGitHubEvents.html":{}}}],["th3nn3ss:cli_split_kwargs'})@column({type",{"_index":1982,"title":{},"body":{"entities/DbPullRequest.html":{},"entities/DbPullRequestGitHubEvents.html":{}}}],["them'})@apibearerauth()@useguards(supabaseguard)@apipaginatedresponse(dbinsight)@apiokresponse({type",{"_index":4898,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["them'})@apibearerauth()@useguards(supabaseguard)@apipaginatedresponse(dbinsightmember)@apiokresponse({type",{"_index":4849,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["them'})@apiokresponse({type",{"_index":3571,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["them'})@apipaginatedresponse(dbbakedrepo)@apiokresponse({type",{"_index":3188,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["them'})@apipaginatedresponse(dbcommitauthors)@apiokresponse({type",{"_index":3194,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["them'})@apipaginatedresponse(dbcommits)@apiokresponse({type",{"_index":3198,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["them'})@apipaginatedresponse(dbcontribution)@apiokresponse({type",{"_index":3566,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["them'})@apipaginatedresponse(dbemoji)@apiokresponse({type",{"_index":2443,"title":{},"body":{"controllers/EmojiController.html":{}}}],["them'})@apipaginatedresponse(dbendorsement)@apiokresponse({type",{"_index":2494,"title":{},"body":{"controllers/EndorsementController.html":{},"controllers/UserEndorsementController.html":{}}}],["them'})@apipaginatedresponse(dbpullrequest)@apiokresponse({type",{"_index":3296,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["them'})@apipaginatedresponse(dbpullrequestcontributor)@apiokresponse({type",{"_index":1225,"title":{},"body":{"controllers/ContributorController.html":{}}}],["them'})@apipaginatedresponse(dbrepo)@apiokresponse({type",{"_index":3610,"title":{},"body":{"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserController.html":{}}}],["them'})@apipaginatedresponse(dbuserhighlight)@apiokresponse({type",{"_index":2801,"title":{},"body":{"controllers/HighlightController.html":{},"controllers/UserController.html":{}}}],["them'})@apipaginatedresponse(dbuserhighlightrepo)@apiokresponse({type",{"_index":2805,"title":{},"body":{"controllers/HighlightController.html":{}}}],["them'})@apipaginatedresponse(dbuserorganization)@apiokresponse({type",{"_index":4467,"title":{},"body":{"controllers/UserController.html":{}}}],["this._stripe",{"_index":4041,"title":{},"body":{"injectables/StripeService.html":{}}}],["this.addusernotification",{"_index":5307,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["this.allcontributionscount",{"_index":1083,"title":{},"body":{"classes/ContributionPageMetaDto.html":{}}}],["this.applyactivecontributorsfilter(activecountquerybuilder",{"_index":163,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["this.applyactivecontributorsfilter(ctebuilder",{"_index":112,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["this.applyactivecontributorsfilter(subquerybuilder",{"_index":155,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["this.applyalumnicontributorsfilter(alumnicountquerybuilder",{"_index":173,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["this.applyalumnicontributorsfilter(ctebuilder",{"_index":116,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["this.applyalumnicontributorsfilter(subquerybuilder",{"_index":158,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["this.applynewcontributorsfilter(ctebuilder",{"_index":114,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["this.applynewcontributorsfilter(newcountquerybuilder",{"_index":168,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["this.applynewcontributorsfilter(subquerybuilder",{"_index":157,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["this.bakedreporepository.createquerybuilder(\"baked_repos",{"_index":3269,"title":{},"body":{"injectables/PizzaOvenService.html":{}}}],["this.basefilterquerybuilder",{"_index":3788,"title":{},"body":{"injectables/RepoService.html":{}}}],["this.basefilterquerybuilder(startdate",{"_index":3772,"title":{},"body":{"injectables/RepoService.html":{}}}],["this.basequerybuilder",{"_index":83,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/CommitAuthorsService.html":{},"injectables/CommitsService.html":{},"injectables/CouponService.html":{},"injectables/CustomerService.html":{},"injectables/EmojiService.html":{},"injectables/EndorsementService.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightsService.html":{},"injectables/PizzaOvenService.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoService.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/SubmitService.html":{},"injectables/UserCollaborationService.html":{},"injectables/UserFollowService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserListService.html":{},"injectables/UserListStatsService.html":{},"injectables/UserNotificationService.html":{},"injectables/UserOrganizationService.html":{},"injectables/UserReposService.html":{},"injectables/VoteService.html":{}}}],["this.baseuserquerybuilder",{"_index":5163,"title":{},"body":{"injectables/UserListService.html":{}}}],["this.blogsummaryservice.generateblogsummary(genereateblogsummarydto",{"_index":801,"title":{},"body":{"controllers/BlogSummaryController.html":{}}}],["this.codeexplanationservice.generateexplanation(generatecodeexplanationdto",{"_index":914,"title":{},"body":{"controllers/CodeExplanationController.html":{}}}],["this.coderefactorsuggestionservice.generatedescription(generatecoderefactorsuggestiondto",{"_index":938,"title":{},"body":{"controllers/CodeRefactorSuggestionController.html":{}}}],["this.codetestsuggestionservice.generatetestsuggestion(generatecodetestsuggestiondto",{"_index":964,"title":{},"body":{"controllers/CodeTestSuggestionController.html":{}}}],["this.commitauthorservice.findallcommitauthors(pageoptionsdto",{"_index":3236,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["this.commitauthorservice.findcommitauthorbyid(id",{"_index":3231,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["this.commitauthorsrepository.createquerybuilder(\"commit_authors",{"_index":1007,"title":{},"body":{"injectables/CommitAuthorsService.html":{}}}],["this.commitsrepository.createquerybuilder(\"commits",{"_index":1038,"title":{},"body":{"injectables/CommitsService.html":{}}}],["this.commitsservice.findallcommitsbybakedrepoid(pageoptionsdto",{"_index":3242,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["this.commitsservice.findallcommitsbycommitauthorid(pageoptionsdto",{"_index":3245,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["this.commitsservice.findcommitbyid(id",{"_index":3239,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["this.configservice.get(\"api.endorsementservicetoken",{"_index":2623,"title":{},"body":{"guards/EndorsementTokenGuard.html":{}}}],["this.configservice.get(\"disk_percentage",{"_index":2761,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.configservice.get(\"disk_size",{"_index":2763,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.configservice.get(\"endpoint.admin",{"_index":2776,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.configservice.get(\"endpoint.app",{"_index":2768,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.configservice.get(\"endpoint.docs",{"_index":2772,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.configservice.get(\"endpoint.explore",{"_index":2774,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.configservice.get(\"endpoint.hot",{"_index":2770,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.configservice.get(\"endpoint.landing",{"_index":2766,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.configservice.get(\"hacktoberfest.year",{"_index":3406,"title":{},"body":{"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{}}}],["this.configservice.get(\"memory_heap",{"_index":2756,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.configservice.get(\"memory_rss",{"_index":2758,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.configservice.get(\"openai.apikey",{"_index":876,"title":{},"body":{"interfaces/ChatResponse.html":{},"injectables/OpenAiService.html":{}}}],["this.configservice.get(\"openai.modelname",{"_index":880,"title":{},"body":{"interfaces/ChatResponse.html":{},"injectables/OpenAiService.html":{}}}],["this.configservice.get(\"pizza.host",{"_index":3271,"title":{},"body":{"injectables/PizzaOvenService.html":{}}}],["this.configservice.get(\"pizza.port",{"_index":3272,"title":{},"body":{"injectables/PizzaOvenService.html":{}}}],["this.configservice.get(\"stripe.subscriptionpriceid",{"_index":4052,"title":{},"body":{"injectables/StripeService.html":{}}}],["this.configservice.get(\"stripe.subscriptionsessioncancelurl",{"_index":4057,"title":{},"body":{"injectables/StripeService.html":{}}}],["this.configservice.get(\"stripe.subscriptionsessioncheckoutsuccessurl",{"_index":4055,"title":{},"body":{"injectables/StripeService.html":{}}}],["this.configservice.get(\"stripe.webhooksecret",{"_index":4149,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["this.configservice.get(\"tier.freeplan",{"_index":4292,"title":{},"body":{"injectables/TierService.html":{}}}],["this.contributionrepository.createquerybuilder(\"contribution",{"_index":1151,"title":{},"body":{"injectables/ContributionService.html":{}}}],["this.contributionservice.findall(pageoptionsdto",{"_index":3594,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["this.contributionservice.findallbyrepoid(item.id",{"_index":3601,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["this.contributionservice.findallbyuserlogin(item.id",{"_index":3604,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["this.couponrepository.createquerybuilder(\"coupons\").withdeleted",{"_index":1313,"title":{},"body":{"injectables/CouponService.html":{}}}],["this.couponrepository.softdelete(code",{"_index":1320,"title":{},"body":{"injectables/CouponService.html":{}}}],["this.couponservice.findcoupon(applyusercoupondto.couponcode",{"_index":734,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.customerrepository.createquerybuilder(\"customer",{"_index":1538,"title":{},"body":{"injectables/CustomerService.html":{}}}],["this.customerrepository.save",{"_index":1541,"title":{},"body":{"injectables/CustomerService.html":{}}}],["this.customerservice.addcustomer(id",{"_index":719,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.customerservice.findbycustomerid(customerid",{"_index":4109,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["this.customerservice.findbyid(id",{"_index":713,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.data",{"_index":1198,"title":{},"body":{"classes/ContributionsPageDto.html":{},"classes/PageDto.html":{}}}],["this.database.pingcheck(\"db",{"_index":2754,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.disk.checkstorage(\"disk.storage",{"_index":2762,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.disk.checkstorage(\"disk.usage",{"_index":2759,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.emojirepository.createquerybuilder(\"emoji",{"_index":2467,"title":{},"body":{"injectables/EmojiService.html":{}}}],["this.emojiservice.findall(pageoptionsdto",{"_index":2454,"title":{},"body":{"controllers/EmojiController.html":{}}}],["this.endorsementrepository.createquerybuilder(\"endorsements",{"_index":2593,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["this.endorsementrepository.manager.createquerybuilder",{"_index":2606,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["this.endorsementrepository.save(createendorsementdto",{"_index":2594,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["this.endorsementrepository.softdelete(id",{"_index":2611,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["this.endorsementservice.create(createendorsementdto",{"_index":2530,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["this.endorsementservice.findall(pageoptionsdto",{"_index":2533,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["this.endorsementservice.findallbycreatoruserid(user.id",{"_index":2551,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["this.endorsementservice.findallbycreatoruserid(userid",{"_index":4541,"title":{},"body":{"controllers/UserEndorsementController.html":{}}}],["this.endorsementservice.findallbyrecipientuserid(user.id",{"_index":2553,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["this.endorsementservice.findallbyrecipientuserid(userid",{"_index":4544,"title":{},"body":{"controllers/UserEndorsementController.html":{}}}],["this.endorsementservice.findallbyrepoowneroruser(repoowneroruser",{"_index":2536,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["this.endorsementservice.findallendorsementsbyrepo(owner",{"_index":2540,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["this.endorsementservice.findallendorsementsbyrepobyuser(owner",{"_index":2544,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["this.endorsementservice.findonebyid(id",{"_index":2547,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["this.endorsementservice.remove(id",{"_index":2556,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["this.filterservice.getrepofilters(pageoptionsdto",{"_index":3530,"title":{},"body":{"injectables/PullRequestService.html":{},"injectables/RepoService.html":{}}}],["this.findcontributionsintimeframehelper(framestartdate.toisostring",{"_index":139,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["this.findcontributorcategoriesintimeframehelper(framestartdate.toisostring",{"_index":134,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["this.generateprompt(options.descriptionlength",{"_index":968,"title":{},"body":{"injectables/CodeTestSuggestionService.html":{}}}],["this.generateprompt(options.language",{"_index":848,"title":{},"body":{"injectables/BlogSummaryService.html":{},"injectables/CodeExplanationService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/IssueSummaryService.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["this.getcontributorrangequerybuilder(startdate",{"_index":3545,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["this.getdateframes(range",{"_index":130,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["this.getvotequery(repoid",{"_index":5406,"title":{},"body":{"injectables/VoteService.html":{}}}],["this.hacktoberfestfilterquerybuilder(range",{"_index":3771,"title":{},"body":{"injectables/RepoService.html":{}}}],["this.hasnextpage",{"_index":3145,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["this.haspreviouspage",{"_index":3144,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["this.health.check",{"_index":2753,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.http.pingcheck(\"admin.opensauced",{"_index":2775,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.http.pingcheck(\"app.opensauced",{"_index":2767,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.http.pingcheck(\"docs.opensauced",{"_index":2771,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.http.pingcheck(\"explore.opensauced",{"_index":2773,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.http.pingcheck(\"hot.opensauced",{"_index":2769,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.http.pingcheck(\"opensauced.pizza",{"_index":2765,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.insightmemberrepository.createquerybuilder(\"insight_members",{"_index":2959,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["this.insightmemberrepository.save(insightmember",{"_index":2961,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["this.insightmemberrepository.softdelete(id",{"_index":2963,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["this.insightmemberrepository.update(id",{"_index":2962,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["this.insightmemberservice.addinsightmember",{"_index":4879,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["this.insightmemberservice.canusermanageinsight",{"_index":4874,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["this.insightmemberservice.canusermanageinsight(userid",{"_index":4868,"title":{},"body":{"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["this.insightmemberservice.findallinsightmembers(pageoptionsdto",{"_index":4870,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["this.insightmemberservice.findonebyid(memberid",{"_index":4885,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["this.insightmemberservice.removeinsightmember(memberid",{"_index":4893,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["this.insightmemberservice.updateinsightmember(memberid",{"_index":4891,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["this.insightreporepository.save",{"_index":3017,"title":{},"body":{"injectables/InsightRepoService.html":{}}}],["this.insightreporepository.softdelete(id",{"_index":3020,"title":{},"body":{"injectables/InsightRepoService.html":{}}}],["this.insightrepository.createquerybuilder(\"insights",{"_index":3055,"title":{},"body":{"injectables/InsightsService.html":{}}}],["this.insightrepository.save(insight",{"_index":3062,"title":{},"body":{"injectables/InsightsService.html":{}}}],["this.insightrepository.softdelete(id",{"_index":3064,"title":{},"body":{"injectables/InsightsService.html":{}}}],["this.insightrepository.update(id",{"_index":3063,"title":{},"body":{"injectables/InsightsService.html":{}}}],["this.insightservice.findonebyid(insightid",{"_index":2964,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["this.insightsreposervice.addinsightrepo(insight.id",{"_index":4938,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["this.insightsreposervice.addinsightrepo(newinsight.id",{"_index":4914,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["this.insightsreposervice.removeinsightrepo(insightrepo.id",{"_index":4928,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["this.insightsservice.addinsight",{"_index":4911,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["this.insightsservice.findallbyuserid(pageoptionsdto",{"_index":4906,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["this.insightsservice.findallfeatured(pageoptionsdto",{"_index":2924,"title":{},"body":{"controllers/InsightController.html":{}}}],["this.insightsservice.findonebyid(id",{"_index":2922,"title":{},"body":{"controllers/InsightController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["this.insightsservice.findonebyid(insightid",{"_index":4866,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["this.insightsservice.removeinsight(id",{"_index":2928,"title":{},"body":{"controllers/InsightController.html":{}}}],["this.insightsservice.updateinsight(id",{"_index":4915,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["this.issuesummaryservice.generateissuesummary(generateissuesummarydto",{"_index":3086,"title":{},"body":{"controllers/IssueSummaryController.html":{}}}],["this.itemcount",{"_index":3141,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["this.limit",{"_index":2667,"title":{},"body":{"classes/FilterListContributorsDto.html":{},"classes/FilteredUsersDto.html":{},"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{},"classes/TopUsersDto.html":{}}}],["this.logger",{"_index":1572,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["this.logger.debug(message",{"_index":1582,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["this.logger.error",{"_index":1578,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{},"controllers/StripeWebhookController.html":{}}}],["this.logger.error(`${query",{"_index":1577,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["this.logger.error(`unable",{"_index":4296,"title":{},"body":{"injectables/TierService.html":{}}}],["this.logger.error(cliduration(starttime",{"_index":2879,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{}}}],["this.logger.log(`${query",{"_index":1575,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["this.logger.log(`inserted/updated",{"_index":4141,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["this.logger.log(cliduration(starttime",{"_index":2884,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{}}}],["this.logger.log(message",{"_index":1581,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["this.logger.warn(cliduration(starttime",{"_index":2882,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{}}}],["this.logger.warn(message",{"_index":1580,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["this.logsrepository.create(log",{"_index":3118,"title":{},"body":{"injectables/LogService.html":{}}}],["this.logsrepository.save(newlog",{"_index":3119,"title":{},"body":{"injectables/LogService.html":{}}}],["this.logsservice",{"_index":1509,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["this.logsservice.createlog",{"_index":1511,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["this.managesubscriptionstatuschange(subscription.id",{"_index":4156,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["this.managesubscriptionstatuschange(subscriptionid",{"_index":4163,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["this.marknotificationsasread(notificationids",{"_index":5299,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["this.memory.checkheap(\"memory.heap",{"_index":2755,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.memory.checkrss(\"memory.rss",{"_index":2757,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.meta",{"_index":1199,"title":{},"body":{"classes/ContributionsPageDto.html":{},"classes/PageDto.html":{}}}],["this.openaiservice.generatecompletion",{"_index":847,"title":{},"body":{"injectables/BlogSummaryService.html":{},"injectables/CodeExplanationService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"injectables/IssueSummaryService.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["this.page",{"_index":2666,"title":{},"body":{"classes/FilterListContributorsDto.html":{},"classes/FilteredUsersDto.html":{},"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{},"classes/TopUsersDto.html":{}}}],["this.pagecount",{"_index":3142,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["this.pagerservice.applypagination",{"_index":1009,"title":{},"body":{"injectables/CommitAuthorsService.html":{},"injectables/CommitsService.html":{},"injectables/EndorsementService.html":{},"injectables/InsightMemberService.html":{},"injectables/PizzaOvenService.html":{},"injectables/UserCollaborationService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserListService.html":{},"injectables/UserReposService.html":{}}}],["this.pizzaovenservice.findallbakedrepos(pageoptionsdto",{"_index":3227,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["this.pizzaovenservice.findbakedrepobyid(id",{"_index":3224,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["this.pizzaovenservice.posttopizzaovenservice(bakeoptionsinfo",{"_index":3220,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["this.pizzaovenservice.posttopizzaovenservice(bakerepoinfo",{"_index":3011,"title":{},"body":{"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{}}}],["this.prinsightrepository.createquerybuilder(\"pr",{"_index":3404,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["this.pullrequestdescriptionservice.generatedescription(generatepullrequestdescriptiondto",{"_index":3332,"title":{},"body":{"controllers/PullRequestDescriptionController.html":{}}}],["this.pullrequestgithubeventsrepository",{"_index":3370,"title":{},"body":{"injectables/PullRequestGithubEventsService.html":{}}}],["this.pullrequestgithubeventsrepository.createquerybuilder(\"pull_request_github_events",{"_index":3357,"title":{},"body":{"injectables/PullRequestGithubEventsService.html":{}}}],["this.pullrequestgithubeventsservice.findallbyprauthor(username",{"_index":4513,"title":{},"body":{"controllers/UserController.html":{}}}],["this.pullrequestrepository",{"_index":1167,"title":{},"body":{"injectables/ContributionService.html":{}}}],["this.pullrequestrepository.createquerybuilder(\"pull_requests",{"_index":3520,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["this.pullrequestrepository.manager.createquerybuilder",{"_index":3534,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["this.pullrequestreviewrepository.find",{"_index":3479,"title":{},"body":{"injectables/PullRequestReviewService.html":{}}}],["this.pullrequestreviewservice.findallreviewsbyprid(id",{"_index":3321,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["this.pullrequestservice.findall(pageoptionsdto",{"_index":3310,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["this.pullrequestservice.findallbycontributor(username",{"_index":4510,"title":{},"body":{"controllers/UserController.html":{}}}],["this.pullrequestservice.findallchurncontributors(pageoptionsdto",{"_index":1276,"title":{},"body":{"controllers/ContributorInsightsController.html":{}}}],["this.pullrequestservice.findallcontributorswithfilters(pageoptionsdto",{"_index":1241,"title":{},"body":{"controllers/ContributorController.html":{}}}],["this.pullrequestservice.findallrecentcontributors(pageoptionsdto",{"_index":1274,"title":{},"body":{"controllers/ContributorInsightsController.html":{}}}],["this.pullrequestservice.findallrepeatcontributors(pageoptionsdto",{"_index":1278,"title":{},"body":{"controllers/ContributorInsightsController.html":{}}}],["this.pullrequestservice.findallwithfilters(pageoptionsdto",{"_index":3312,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["this.pullrequestservice.findnewcontributorsintimerange(pageoptionsdto",{"_index":1272,"title":{},"body":{"controllers/ContributorInsightsController.html":{}}}],["this.pullrequestsinsightservice.getinsight(interval",{"_index":3318,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["this.repofilterservice.getrepofilters(options",{"_index":3426,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["this.reporepository",{"_index":3731,"title":{},"body":{"injectables/RepoService.html":{}}}],["this.reporepository.createquerybuilder(\"repo",{"_index":3778,"title":{},"body":{"injectables/RepoService.html":{}}}],["this.reposervice.findall(pageoptionsdto",{"_index":3628,"title":{},"body":{"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserController.html":{}}}],["this.reposervice.findallwithfilters(pageoptionsdto",{"_index":3630,"title":{},"body":{"controllers/RepoController.html":{}}}],["this.reposervice.findonebyid(id",{"_index":3593,"title":{},"body":{"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{}}}],["this.reposervice.findonebyownerandrepo(owner",{"_index":3597,"title":{},"body":{"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{}}}],["this.reposervice.findorgsrecommendations(userid",{"_index":5353,"title":{},"body":{"controllers/UserRecommendationController.html":{}}}],["this.reposervice.findrecommendations(interests",{"_index":5350,"title":{},"body":{"controllers/UserRecommendationController.html":{}}}],["this.repostargazerepository.createquerybuilder(\"r2stargazes\").withdeleted",{"_index":4018,"title":{},"body":{"injectables/StargazeService.html":{}}}],["this.repostargazerepository.restore(stargazeexists.id",{"_index":4023,"title":{},"body":{"injectables/StargazeService.html":{}}}],["this.repostargazerepository.save",{"_index":4024,"title":{},"body":{"injectables/StargazeService.html":{}}}],["this.repostargazerepository.softdelete(stargazeexists.id",{"_index":4025,"title":{},"body":{"injectables/StargazeService.html":{}}}],["this.repostarrepository.createquerybuilder(\"r2stars\").withdeleted",{"_index":3990,"title":{},"body":{"injectables/StarService.html":{}}}],["this.repostarrepository.restore(starexists.id",{"_index":3996,"title":{},"body":{"injectables/StarService.html":{}}}],["this.repostarrepository.save",{"_index":3997,"title":{},"body":{"injectables/StarService.html":{}}}],["this.repostarrepository.softdelete(starexists.id",{"_index":3999,"title":{},"body":{"injectables/StarService.html":{}}}],["this.reposubmitrepository.createquerybuilder(\"r2submits\").withdeleted",{"_index":4183,"title":{},"body":{"injectables/SubmitService.html":{}}}],["this.reposubmitrepository.restore(submitexists.id",{"_index":4189,"title":{},"body":{"injectables/SubmitService.html":{}}}],["this.reposubmitrepository.save",{"_index":4190,"title":{},"body":{"injectables/SubmitService.html":{}}}],["this.reposubmitrepository.softdelete(submitexists.id",{"_index":4191,"title":{},"body":{"injectables/SubmitService.html":{}}}],["this.repovoterepository.createquerybuilder(\"r2votes\").withdeleted",{"_index":5404,"title":{},"body":{"injectables/VoteService.html":{}}}],["this.repovoterepository.restore(voteexists.id",{"_index":5408,"title":{},"body":{"injectables/VoteService.html":{}}}],["this.repovoterepository.save",{"_index":5409,"title":{},"body":{"injectables/VoteService.html":{}}}],["this.repovoterepository.softdelete(voteexists.id",{"_index":5410,"title":{},"body":{"injectables/VoteService.html":{}}}],["this.stargazeservice.downstargazebyrepoid(item.id",{"_index":3882,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["this.stargazeservice.stargazebyrepoid(item.id",{"_index":3878,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["this.starservice.downstarbyrepoid(item.id",{"_index":3844,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["this.starservice.starbyrepoid(item.id",{"_index":3840,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["this.stringifyparameters(parameters",{"_index":1576,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["this.stripe.checkout.sessions.create",{"_index":4046,"title":{},"body":{"injectables/StripeService.html":{}}}],["this.stripe.customers.create",{"_index":4045,"title":{},"body":{"injectables/StripeService.html":{}}}],["this.stripeservice.addcustomer(id",{"_index":717,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.stripeservice.createcheckoutsession(customerid",{"_index":722,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.stripeservice.stripe.subscriptions.retrieve(subscriptionid",{"_index":4111,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["this.stripeservice.stripe.webhooks.constructevent(req.rawbody",{"_index":4150,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["this.stripesubscriptionservice.upsertsubscription(subscriptiondata",{"_index":4136,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["this.submitservice.downsubmitbyrepoid(item.id",{"_index":3919,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["this.submitservice.submitbyrepoid(item.id",{"_index":3916,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["this.subquerycount(qb",{"_index":3739,"title":{},"body":{"injectables/RepoService.html":{}}}],["this.subquerycountprs(querybuilder",{"_index":3438,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["this.subscriptionrepository.createquerybuilder(\"subscription",{"_index":4076,"title":{},"body":{"injectables/StripeSubscriptionService.html":{}}}],["this.subscriptionrepository.save(subscription",{"_index":4077,"title":{},"body":{"injectables/StripeSubscriptionService.html":{}}}],["this.usercollaborationrepository.createquerybuilder(\"user_collaborations",{"_index":4441,"title":{},"body":{"injectables/UserCollaborationService.html":{}}}],["this.usercollaborationrepository.save(usercollaboration",{"_index":4443,"title":{},"body":{"injectables/UserCollaborationService.html":{}}}],["this.usercollaborationrepository.softdelete(id",{"_index":4445,"title":{},"body":{"injectables/UserCollaborationService.html":{}}}],["this.usercollaborationrepository.update(id",{"_index":4444,"title":{},"body":{"injectables/UserCollaborationService.html":{}}}],["this.usercollaborationservice.findallusercollaborations(pageoptionsdto",{"_index":4413,"title":{},"body":{"controllers/UserCollaborationController.html":{}}}],["this.usercollaborationservice.findonebyid(id",{"_index":4418,"title":{},"body":{"controllers/UserCollaborationController.html":{}}}],["this.usercollaborationservice.removeusercollaboration(id",{"_index":4426,"title":{},"body":{"controllers/UserCollaborationController.html":{}}}],["this.usercollaborationservice.updateusercollaboration(id",{"_index":4422,"title":{},"body":{"controllers/UserCollaborationController.html":{}}}],["this.userfollowrepository.createquerybuilder(\"user_follows\").withdeleted",{"_index":4571,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["this.userfollowrepository.restore(followexists.id",{"_index":4584,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["this.userfollowrepository.save",{"_index":4586,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["this.userfollowrepository.softdelete(followexists.id",{"_index":4587,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["this.userfollowservice.adduserfollowerbyuserid(userid",{"_index":4629,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["this.userfollowservice.findallfollowers(userid",{"_index":4805,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["this.userfollowservice.findallfollowinglist(user.id",{"_index":4599,"title":{},"body":{"controllers/UserFollowingController.html":{}}}],["this.userfollowservice.finduserfollowerbyid(userid",{"_index":4627,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["this.userfollowservice.removeuserfollowerbyid(userid",{"_index":4640,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["this.userhighlightreactionrepository",{"_index":4824,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["this.userhighlightreactionrepository.createquerybuilder(\"user_highlight_reactions",{"_index":4813,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["this.userhighlightreactionrepository.restore(reactionexists.id",{"_index":4829,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["this.userhighlightreactionrepository.save",{"_index":4831,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["this.userhighlightreactionrepository.softdelete(id",{"_index":4832,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["this.userhighlightrepository.create",{"_index":4794,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["this.userhighlightrepository.createquerybuilder(\"user_highlights",{"_index":4769,"title":{},"body":{"injectables/UserHighlightsService.html":{},"injectables/UserListService.html":{}}}],["this.userhighlightrepository.save(newuserhighlight",{"_index":4803,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["this.userhighlightrepository.softdelete(highlightid",{"_index":4812,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["this.userhighlightrepository.update(highlightid",{"_index":4811,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["this.userhighlightsservice.addfeatured(id",{"_index":2841,"title":{},"body":{"controllers/HighlightController.html":{}}}],["this.userhighlightsservice.adduserhighlight(userid",{"_index":4697,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["this.userhighlightsservice.adduserhighlightreaction(userid",{"_index":4716,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["this.userhighlightsservice.deleteuserhighlight(highlight.id",{"_index":4712,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["this.userhighlightsservice.deleteuserhighlightreaction(userhighlightreaction.id",{"_index":4721,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["this.userhighlightsservice.findall(pageoptionsdto",{"_index":2835,"title":{},"body":{"controllers/HighlightController.html":{},"controllers/UserHighlightsController.html":{}}}],["this.userhighlightsservice.findallbyuserid(pageoptionsdto",{"_index":4515,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userhighlightsservice.findallfeatured(pageoptionsdto",{"_index":2838,"title":{},"body":{"controllers/HighlightController.html":{}}}],["this.userhighlightsservice.findallhighlightreactions(id",{"_index":2850,"title":{},"body":{"controllers/HighlightController.html":{},"controllers/UserHighlightsController.html":{}}}],["this.userhighlightsservice.findallhighlightrepos(pageoptionsdto",{"_index":2847,"title":{},"body":{"controllers/HighlightController.html":{},"controllers/UserHighlightsController.html":{}}}],["this.userhighlightsservice.findonebyid(highlight.id",{"_index":4711,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["this.userhighlightsservice.findonebyid(highlightid",{"_index":4701,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["this.userhighlightsservice.findonebyid(id",{"_index":4699,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["this.userhighlightsservice.findoneuserhighlightreaction",{"_index":4720,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["this.userhighlightsservice.findtop(pageoptionsdto",{"_index":2853,"title":{},"body":{"controllers/HighlightController.html":{}}}],["this.userhighlightsservice.removefeatured(id",{"_index":2843,"title":{},"body":{"controllers/HighlightController.html":{}}}],["this.userhighlightsservice.updateuserhighlight(highlight.id",{"_index":4702,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["this.userlistcontributorrepository.create",{"_index":5143,"title":{},"body":{"injectables/UserListService.html":{}}}],["this.userlistcontributorrepository.createquerybuilder(\"user_list_contributors",{"_index":70,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListService.html":{},"injectables/UserListStatsService.html":{}}}],["this.userlistcontributorrepository.findone",{"_index":5141,"title":{},"body":{"injectables/UserListService.html":{}}}],["this.userlistcontributorrepository.manager",{"_index":183,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["this.userlistcontributorrepository.save(newuserlistcontributor",{"_index":5144,"title":{},"body":{"injectables/UserListService.html":{}}}],["this.userlistcontributorrepository.softdelete(userlistcontributorid",{"_index":5145,"title":{},"body":{"injectables/UserListService.html":{}}}],["this.userlistrepository.create",{"_index":5136,"title":{},"body":{"injectables/UserListService.html":{}}}],["this.userlistrepository.createquerybuilder(\"user_lists",{"_index":5123,"title":{},"body":{"injectables/UserListService.html":{}}}],["this.userlistrepository.save(newuserlist",{"_index":5139,"title":{},"body":{"injectables/UserListService.html":{}}}],["this.userlistrepository.softdelete(listid",{"_index":5148,"title":{},"body":{"injectables/UserListService.html":{}}}],["this.userlistrepository.update(listid",{"_index":5147,"title":{},"body":{"injectables/UserListService.html":{}}}],["this.userlistservice.adduserlist(userid",{"_index":5024,"title":{},"body":{"controllers/UserListController.html":{}}}],["this.userlistservice.adduserlistcontributor(id",{"_index":5051,"title":{},"body":{"controllers/UserListController.html":{}}}],["this.userlistservice.adduserlistcontributor(newlist.id",{"_index":5027,"title":{},"body":{"controllers/UserListController.html":{}}}],["this.userlistservice.deleteuserlist(list.id",{"_index":5039,"title":{},"body":{"controllers/UserListController.html":{}}}],["this.userlistservice.deleteuserlistcontributor(id",{"_index":5055,"title":{},"body":{"controllers/UserListController.html":{}}}],["this.userlistservice.findallbyuserid(pageoptionsdto",{"_index":5019,"title":{},"body":{"controllers/UserListController.html":{}}}],["this.userlistservice.findallfeatured(pageoptionsdto",{"_index":5021,"title":{},"body":{"controllers/UserListController.html":{}}}],["this.userlistservice.findcontributorsbyfilter(pageoptionsdto",{"_index":5044,"title":{},"body":{"controllers/UserListController.html":{}}}],["this.userlistservice.findcontributorsbylistid(pageoptionsdto",{"_index":5047,"title":{},"body":{"controllers/UserListController.html":{}}}],["this.userlistservice.findlistcontributorshighlightedrepos(pageoptionsdto",{"_index":5059,"title":{},"body":{"controllers/UserListController.html":{}}}],["this.userlistservice.findlistcontributorshighlights(pageoptionsdto",{"_index":5057,"title":{},"body":{"controllers/UserListController.html":{}}}],["this.userlistservice.findonebyid(list.id",{"_index":5037,"title":{},"body":{"controllers/UserListController.html":{}}}],["this.userlistservice.findonebyid(listid",{"_index":5033,"title":{},"body":{"controllers/UserListController.html":{}}}],["this.userlistservice.findpubliconebyid(id",{"_index":5032,"title":{},"body":{"controllers/UserListController.html":{}}}],["this.userlistservice.getalltimezones",{"_index":5061,"title":{},"body":{"controllers/UserListController.html":{}}}],["this.userlistservice.updateuserlist(list.id",{"_index":5034,"title":{},"body":{"controllers/UserListController.html":{}}}],["this.userliststatsservice.findalllistcontributorstats(pageoptionsdto",{"_index":5206,"title":{},"body":{"controllers/UserListStatsController.html":{}}}],["this.userliststatsservice.findcontributionsbyproject(id",{"_index":5210,"title":{},"body":{"controllers/UserListStatsController.html":{}}}],["this.userliststatsservice.findcontributionsintimeframe(options",{"_index":5209,"title":{},"body":{"controllers/UserListStatsController.html":{}}}],["this.userliststatsservice.findcontributorcategoriesbytimeframe(options",{"_index":5213,"title":{},"body":{"controllers/UserListStatsController.html":{}}}],["this.userliststatsservice.findlistcontributorstatsbyproject(options",{"_index":5212,"title":{},"body":{"controllers/UserListStatsController.html":{}}}],["this.usernotificationrepository.createquerybuilder(\"user_notifications",{"_index":5289,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["this.usernotificationrepository.save",{"_index":5300,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["this.usernotificationrepository.update(id",{"_index":5313,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["this.usernotificationservice.adduserfollowernotification(userid",{"_index":4585,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["this.usernotificationservice.adduserhighlightnotification(newhighlight.id",{"_index":4808,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["this.usernotificationservice.adduserhighlightreactionnotification(userid",{"_index":4830,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["this.usernotificationservice.findallbyuserid(userid",{"_index":5263,"title":{},"body":{"controllers/UserNotificationController.html":{}}}],["this.userorganizationrepository.createquerybuilder(\"user_organizations",{"_index":5327,"title":{},"body":{"injectables/UserOrganizationService.html":{}}}],["this.userorganizationservice.findallbyuserid(user.id",{"_index":4521,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userreporepository.create",{"_index":5379,"title":{},"body":{"injectables/UserReposService.html":{}}}],["this.userreporepository.createquerybuilder(\"user_repos",{"_index":5377,"title":{},"body":{"injectables/UserReposService.html":{}}}],["this.userreporepository.save(newuserrepo",{"_index":5380,"title":{},"body":{"injectables/UserReposService.html":{}}}],["this.userrepository.createquerybuilder(\"user",{"_index":1163,"title":{},"body":{"injectables/ContributionService.html":{},"injectables/UserListService.html":{}}}],["this.userrepository.createquerybuilder(\"users",{"_index":5124,"title":{},"body":{"injectables/UserListService.html":{}}}],["this.userservice.applycoupon(userid",{"_index":735,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.userservice.checkadduser(user",{"_index":693,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.userservice.deleteuser(userid",{"_index":739,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.userservice.findmanybyusernames(bulkfollow.usernames",{"_index":4631,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["this.userservice.findonebyemail(createinsightmemberdto.email",{"_index":4877,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["this.userservice.findonebyid(user.user_metadata.sub",{"_index":4416,"title":{},"body":{"controllers/UserCollaborationController.html":{}}}],["this.userservice.findonebyid(userid",{"_index":728,"title":{},"body":{"controllers/AuthController.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserNotificationService.html":{},"controllers/UserRecommendationController.html":{}}}],["this.userservice.findonebyusername(createusercollaborationdto.username",{"_index":4414,"title":{},"body":{"controllers/UserCollaborationController.html":{}}}],["this.userservice.findonebyusername(username",{"_index":2550,"title":{},"body":{"controllers/EndorsementController.html":{},"controllers/UserController.html":{},"controllers/UserFollowingController.html":{},"controllers/UserFollowsController.html":{}}}],["this.userservice.findtopusers(pageoptionsdto",{"_index":4523,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.findusersbyfilter(pageoptionsdto",{"_index":4525,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.updateemailpreferences(userid",{"_index":730,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.userservice.updateinterests(userid",{"_index":727,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.userservice.updateonboarding(userid",{"_index":706,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.userservice.updaterole(userid",{"_index":4138,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["this.userservice.updateuser(userid",{"_index":725,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.userservice.updatewaitliststatus(userid",{"_index":709,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.voteservice.downvotebyrepoid(item.id",{"_index":3969,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["this.voteservice.findonebyrepoid(repoid",{"_index":3962,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["this.voteservice.votebyrepoid(item.id",{"_index":3965,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["thresholdpercent",{"_index":2760,"title":{},"body":{"controllers/HealthController.html":{}}}],["throw",{"_index":802,"title":{},"body":{"controllers/BlogSummaryController.html":{},"interfaces/ChatResponse.html":{},"controllers/CodeExplanationController.html":{},"controllers/CodeRefactorSuggestionController.html":{},"controllers/CodeTestSuggestionController.html":{},"injectables/CommitAuthorsService.html":{},"injectables/CommitsService.html":{},"injectables/CouponService.html":{},"injectables/EndorsementService.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightsService.html":{},"controllers/IssueSummaryController.html":{},"injectables/OpenAiService.html":{},"controllers/PizzaOvenController.html":{},"injectables/PizzaOvenService.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/RepoService.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"controllers/StripeWebhookController.html":{},"injectables/SubmitService.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"injectables/UserFollowService.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"injectables/UserListService.html":{},"injectables/UserReposService.html":{},"injectables/VoteService.html":{}}}],["tier",{"_index":4286,"title":{},"body":{"injectables/TierService.html":{}}}],["tier.service",{"_index":4275,"title":{},"body":{"modules/TierModule.html":{}}}],["tier/tier.module",{"_index":5249,"title":{},"body":{"modules/UserModule.html":{}}}],["tierconfig",{"_index":328,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["tiermodule",{"_index":4269,"title":{"modules/TierModule.html":{}},"body":{"modules/TierModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["tierservice",{"_index":4273,"title":{"injectables/TierService.html":{}},"body":{"modules/TierModule.html":{},"injectables/TierService.html":{},"overview.html":{}}}],["time",{"_index":1565,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{},"entities/DbContribution.html":{},"entities/DbContributionStatTimeframe.html":{},"entities/DbContributorCategoryTimeframe.html":{},"entities/DbCoupon.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbPullRequestGitHubEvents.html":{},"entities/DbPullRequestReview.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserNotification.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"classes/FilterListContributorsDto.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{},"miscellaneous/variables.html":{}}}],["time_end",{"_index":177,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"entities/DbContributionStatTimeframe.html":{},"entities/DbContributorCategoryTimeframe.html":{},"injectables/UserListStatsService.html":{}}}],["time_start",{"_index":176,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"entities/DbContributionStatTimeframe.html":{},"entities/DbContributorCategoryTimeframe.html":{},"injectables/UserListStatsService.html":{}}}],["timeframe",{"_index":5208,"title":{},"body":{"controllers/UserListStatsController.html":{}}}],["timeframe'})@apiokresponse({type",{"_index":5176,"title":{},"body":{"controllers/UserListStatsController.html":{}}}],["timeframe.dto",{"_index":41,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"controllers/UserListStatsController.html":{},"injectables/UserListStatsService.html":{}}}],["timeframe.dto.ts",{"_index":1200,"title":{},"body":{"classes/ContributionsTimeframeDto.html":{}}}],["timeframe.dto.ts:17",{"_index":1203,"title":{},"body":{"classes/ContributionsTimeframeDto.html":{}}}],["timeframe.dto.ts:26",{"_index":1202,"title":{},"body":{"classes/ContributionsTimeframeDto.html":{}}}],["timeframe.entity",{"_index":44,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"modules/UserListModule.html":{},"controllers/UserListStatsController.html":{},"injectables/UserListStatsService.html":{}}}],["timeframe.entity.ts",{"_index":1698,"title":{},"body":{"entities/DbContributionStatTimeframe.html":{},"entities/DbContributorCategoryTimeframe.html":{}}}],["timeframe.entity.ts:16",{"_index":1716,"title":{},"body":{"entities/DbContributionStatTimeframe.html":{},"entities/DbContributorCategoryTimeframe.html":{}}}],["timeframe.entity.ts:28",{"_index":1715,"title":{},"body":{"entities/DbContributionStatTimeframe.html":{},"entities/DbContributorCategoryTimeframe.html":{}}}],["timeframe.entity.ts:40",{"_index":1704,"title":{},"body":{"entities/DbContributionStatTimeframe.html":{},"entities/DbContributorCategoryTimeframe.html":{}}}],["timeframe.entity.ts:52",{"_index":1708,"title":{},"body":{"entities/DbContributionStatTimeframe.html":{},"entities/DbContributorCategoryTimeframe.html":{}}}],["timeframe.entity.ts:64",{"_index":1710,"title":{},"body":{"entities/DbContributionStatTimeframe.html":{}}}],["timeframe.entity.ts:65",{"_index":1730,"title":{},"body":{"entities/DbContributorCategoryTimeframe.html":{}}}],["timeframe.entity.ts:76",{"_index":1707,"title":{},"body":{"entities/DbContributionStatTimeframe.html":{}}}],["timeframe.entity.ts:78",{"_index":1728,"title":{},"body":{"entities/DbContributorCategoryTimeframe.html":{}}}],["timeframe.entity.ts:88",{"_index":1703,"title":{},"body":{"entities/DbContributionStatTimeframe.html":{}}}],["times",{"_index":3361,"title":{},"body":{"injectables/PullRequestGithubEventsService.html":{}}}],["timescale",{"_index":5813,"title":{},"body":{"miscellaneous/variables.html":{}}}],["timescale.certificate",{"_index":478,"title":{},"body":{"modules/AppModule.html":{}}}],["timescale.connection",{"_index":472,"title":{},"body":{"modules/AppModule.html":{}}}],["timescale.database",{"_index":477,"title":{},"body":{"modules/AppModule.html":{}}}],["timescale.host",{"_index":473,"title":{},"body":{"modules/AppModule.html":{}}}],["timescale.password",{"_index":476,"title":{},"body":{"modules/AppModule.html":{}}}],["timescale.port",{"_index":474,"title":{},"body":{"modules/AppModule.html":{}}}],["timescale.username",{"_index":475,"title":{},"body":{"modules/AppModule.html":{}}}],["timescale/entities/pull_request_github_event",{"_index":439,"title":{},"body":{"modules/AppModule.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{}}}],["timescale/pull_request_github_events.service",{"_index":4497,"title":{},"body":{"controllers/UserController.html":{}}}],["timescale/timescale.module",{"_index":437,"title":{},"body":{"modules/AppModule.html":{},"modules/UserModule.html":{}}}],["timescaleconnection",{"_index":471,"title":{},"body":{"modules/AppModule.html":{},"injectables/PullRequestGithubEventsService.html":{},"modules/TimescaleModule.html":{},"modules/UserModule.html":{}}}],["timescalemodule",{"_index":281,"title":{"modules/TimescaleModule.html":{}},"body":{"modules/AppModule.html":{},"modules/TimescaleModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["timestamp",{"_index":1661,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbContributionStatTimeframe.html":{},"entities/DbContributorCategoryTimeframe.html":{},"entities/DbCoupon.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbPullRequestGitHubEvents.html":{},"entities/DbPullRequestReview.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserNotification.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"classes/SupabaseAuthDto.html":{}}}],["timezone",{"_index":703,"title":{},"body":{"controllers/AuthController.html":{},"classes/DbTimezone.html":{},"classes/FilterListContributorsDto.html":{},"classes/UpdateUserDto.html":{},"injectables/UserListService.html":{},"classes/UserOnboardingDto.html":{}}}],["timezones",{"_index":4983,"title":{},"body":{"controllers/UserListController.html":{},"injectables/UserListService.html":{}}}],["timezones'})@apiokresponse({type",{"_index":4981,"title":{},"body":{"controllers/UserListController.html":{}}}],["title",{"_index":843,"title":{},"body":{"injectables/BlogSummaryService.html":{},"classes/CreateBlogSummaryDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/CreateUserHighlightDto.html":{},"entities/DbInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbPullRequestGitHubEvents.html":{},"entities/DbUserHighlight.html":{},"injectables/IssueSummaryService.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{}}}],["tmodel",{"_index":5778,"title":{},"body":{"miscellaneous/variables.html":{}}}],["to_date('${hacktoberfestyear",{"_index":3414,"title":{},"body":{"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoService.html":{}}}],["toclassonly",{"_index":2643,"title":{},"body":{"classes/FilterListContributorsDto.html":{}}}],["todatetime",{"_index":4097,"title":{},"body":{"controllers/StripeWebhookController.html":{},"miscellaneous/variables.html":{}}}],["todatetime(subscription.cancel_at",{"_index":4124,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["todatetime(subscription.canceled_at",{"_index":4126,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["todatetime(subscription.created",{"_index":4129,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["todatetime(subscription.current_period_end",{"_index":4128,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["todatetime(subscription.current_period_start",{"_index":4127,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["todatetime(subscription.ended_at",{"_index":4131,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["todatetime(subscription.trial_end",{"_index":4135,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["todatetime(subscription.trial_start",{"_index":4133,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["today",{"_index":1896,"title":{},"body":{"entities/DbPRInsight.html":{}}}],["todo",{"_index":5936,"title":{},"body":{"miscellaneous/variables.html":{}}}],["token",{"_index":2529,"title":{},"body":{"controllers/EndorsementController.html":{},"guards/EndorsementTokenGuard.html":{}}}],["token.guard",{"_index":2523,"title":{},"body":{"controllers/EndorsementController.html":{},"modules/EndorsementModule.html":{}}}],["token.guard.ts",{"_index":2615,"title":{},"body":{"guards/EndorsementTokenGuard.html":{}}}],["token.guard.ts:5",{"_index":2618,"title":{},"body":{"guards/EndorsementTokenGuard.html":{}}}],["token.guard.ts:8",{"_index":2621,"title":{},"body":{"guards/EndorsementTokenGuard.html":{}}}],["tone",{"_index":821,"title":{},"body":{"injectables/BlogSummaryService.html":{},"classes/CreateBlogSummaryDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"injectables/IssueSummaryService.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["tools",{"_index":5567,"title":{},"body":{"index.html":{}}}],["top",{"_index":410,"title":{},"body":{"modules/AppModule.html":{},"classes/DbTopUser.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserTopRepo.html":{},"controllers/HighlightController.html":{},"classes/InsightOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"controllers/UserController.html":{},"controllers/UserListStatsController.html":{},"modules/UserModule.html":{},"miscellaneous/enumerations.html":{}}}],["top100",{"_index":2983,"title":{},"body":{"classes/InsightOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"miscellaneous/enumerations.html":{}}}],["top_repos",{"_index":3658,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["top_repos\".id",{"_index":3657,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["top_repos.stars",{"_index":3659,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["topic",{"_index":2671,"title":{},"body":{"classes/FilterOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/RepoFilterService.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{}}}],["topprojectsdto",{"_index":56,"title":{"classes/TopProjectsDto.html":{}},"body":{"interfaces/AllContributionsCount.html":{},"classes/TopProjectsDto.html":{},"controllers/UserListStatsController.html":{},"injectables/UserListStatsService.html":{}}}],["toprepos",{"_index":4518,"title":{},"body":{"controllers/UserController.html":{}}}],["topusersdto",{"_index":4308,"title":{"classes/TopUsersDto.html":{}},"body":{"classes/TopUsersDto.html":{},"controllers/UserController.html":{}}}],["tort",{"_index":5688,"title":{},"body":{"license.html":{}}}],["total",{"_index":1656,"title":{},"body":{"entities/DbContribution.html":{},"controllers/HighlightController.html":{}}}],["total_contributions",{"_index":5077,"title":{},"body":{"classes/UserListMostActiveContributorsDto.html":{},"miscellaneous/enumerations.html":{}}}],["transform",{"_index":2654,"title":{},"body":{"classes/FilterListContributorsDto.html":{},"controllers/UserListController.html":{}}}],["transformer",{"_index":978,"title":{},"body":{"classes/CollaboratorsDto.html":{},"classes/ContributionsByProjectDto.html":{},"classes/ContributionsPageDto.html":{},"classes/ContributionsTimeframeDto.html":{},"classes/Contributor.html":{},"classes/CreateInsightDto.html":{},"classes/CreateUserListDto.html":{},"classes/FilterListContributorsDto.html":{},"classes/FilteredUsersDto.html":{},"classes/PageDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/TopProjectsDto.html":{},"classes/TopUsersDto.html":{}}}],["translatetime",{"_index":499,"title":{},"body":{"modules/AppModule.html":{}}}],["translation",{"_index":835,"title":{},"body":{"injectables/BlogSummaryService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"injectables/IssueSummaryService.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["transport",{"_index":494,"title":{},"body":{"modules/AppModule.html":{}}}],["trial",{"_index":2194,"title":{},"body":{"entities/DbSubscription.html":{}}}],["trial_end_at",{"_index":2171,"title":{},"body":{"entities/DbSubscription.html":{},"controllers/StripeWebhookController.html":{}}}],["trial_start_at",{"_index":2172,"title":{},"body":{"entities/DbSubscription.html":{},"controllers/StripeWebhookController.html":{}}}],["true",{"_index":443,"title":{},"body":{"modules/AppModule.html":{},"classes/CollaboratorsDto.html":{},"classes/ContributionPageMetaDto.html":{},"classes/ContributionsPageDto.html":{},"classes/Contributor.html":{},"classes/CreateInsightDto.html":{},"classes/CreateUserHighlightDto.html":{},"classes/CreateUserListDto.html":{},"entities/DbUserHighlight.html":{},"classes/DbUserHighlightReactionResponse.html":{},"entities/DbUserList.html":{},"guards/EndorsementTokenGuard.html":{},"classes/FilterListContributorsDto.html":{},"classes/FollowManyUsersDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"classes/HighlightOptionsDto.html":{},"injectables/InsightMemberService.html":{},"injectables/LogService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"controllers/RepoContributionsController.html":{},"injectables/StripeService.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"controllers/UserListController.html":{},"classes/UserOnboardingDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"injectables/VoteService.html":{},"classes/VotedRepoDto.html":{},"miscellaneous/variables.html":{}}}],["true`).orderby(\"user_highlights.updated_at",{"_index":4786,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["true})@apinotfoundresponse({description",{"_index":3584,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["true})@column({type",{"_index":2258,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["true})@isarray()@isstring({each",{"_index":1456,"title":{},"body":{"classes/CreateUserHighlightDto.html":{},"classes/FollowManyUsersDto.html":{}}}],["true})@isboolean",{"_index":5415,"title":{},"body":{"classes/VotedRepoDto.html":{}}}],["true})@isoptional",{"_index":2306,"title":{},"body":{"classes/DbUserHighlightReactionResponse.html":{},"classes/FilterListContributorsDto.html":{}}}],["true})@isstring({each",{"_index":2305,"title":{},"body":{"classes/DbUserHighlightReactionResponse.html":{}}}],["true})@type(undefined",{"_index":1192,"title":{},"body":{"classes/ContributionsPageDto.html":{},"classes/PageDto.html":{}}}],["true})@type(undefined)@transform",{"_index":2642,"title":{},"body":{"classes/FilterListContributorsDto.html":{}}}],["true})@validatenested({each",{"_index":1191,"title":{},"body":{"classes/ContributionsPageDto.html":{},"classes/PageDto.html":{}}}],["try",{"_index":675,"title":{},"body":{"controllers/AuthController.html":{},"injectables/BlogSummaryService.html":{},"injectables/CodeExplanationService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"injectables/IssueSummaryService.html":{},"injectables/PullRequestDescriptionService.html":{},"controllers/StripeWebhookController.html":{},"injectables/TierService.html":{},"controllers/UserFollowsController.html":{},"controllers/UserInsightsController.html":{}}}],["tsdb",{"_index":5821,"title":{},"body":{"miscellaneous/variables.html":{}}}],["tsdbadmin",{"_index":5818,"title":{},"body":{"miscellaneous/variables.html":{}}}],["turbo",{"_index":5905,"title":{},"body":{"miscellaneous/variables.html":{}}}],["twitter",{"_index":4232,"title":{},"body":{"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{}}}],["twitter_username",{"_index":683,"title":{},"body":{"controllers/AuthController.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{}}}],["type",{"_index":14,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"modules/AppModule.html":{},"classes/ApplyUserCouponDto.html":{},"controllers/AuthController.html":{},"classes/BakeRepoDto.html":{},"controllers/BlogSummaryController.html":{},"injectables/BlogSummaryService.html":{},"interfaces/ChatResponse.html":{},"controllers/CodeExplanationController.html":{},"injectables/CodeExplanationService.html":{},"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"controllers/CodeTestSuggestionController.html":{},"injectables/CodeTestSuggestionService.html":{},"classes/CollaboratorsDto.html":{},"classes/CommitAuthorDto.html":{},"injectables/CommitAuthorsService.html":{},"classes/CommitsDto.html":{},"injectables/CommitsService.html":{},"classes/ContributionPageMetaDto.html":{},"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"classes/ContributionsByProjectDto.html":{},"classes/ContributionsPageDto.html":{},"classes/ContributionsTimeframeDto.html":{},"classes/Contributor.html":{},"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"classes/ContributorPullRequestsDto.html":{},"injectables/CouponService.html":{},"classes/CreateBlogSummaryDto.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateInsightDto.html":{},"classes/CreateInsightMemberDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/CreateLogDto.html":{},"classes/CreateUserCollaborationDto.html":{},"classes/CreateUserHighlightDto.html":{},"classes/CreateUserListDto.html":{},"injectables/CustomLogger.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"entities/DbBakedRepo.html":{},"entities/DbCommitAuthors.html":{},"entities/DbCommits.html":{},"entities/DbContribution.html":{},"entities/DbContributionStatTimeframe.html":{},"entities/DbContributionsProjects.html":{},"entities/DbContributorCategoryTimeframe.html":{},"entities/DbCoupon.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"classes/DbFilteredUser.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbPullRequestGitHubEvents.html":{},"entities/DbPullRequestReview.html":{},"entities/DbRepoLoginContributions.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"classes/DbTimezone.html":{},"classes/DbTopUser.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightReactionResponse.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserListContributorStat.html":{},"entities/DbUserListContributorStat-1.html":{},"entities/DbUserNotification.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"controllers/EmojiController.html":{},"injectables/EmojiService.html":{},"controllers/EndorsementController.html":{},"injectables/EndorsementService.html":{},"guards/EndorsementTokenGuard.html":{},"classes/FilterListContributorsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/FilteredUsersDto.html":{},"classes/FollowManyUsersDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"controllers/HighlightController.html":{},"classes/HighlightOptionsDto.html":{},"injectables/HttpLoggerMiddleware.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"controllers/IssueSummaryController.html":{},"injectables/IssueSummaryService.html":{},"injectables/LogService.html":{},"injectables/OpenAiService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaParameters.html":{},"classes/PageOptionsDto.html":{},"injectables/PagerService.html":{},"interfaces/PaginationInput.html":{},"controllers/PizzaOvenController.html":{},"injectables/PizzaOvenService.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestGithubEventsService.html":{},"injectables/PullRequestInsightsService.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestReviewService.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"injectables/RepoFilterService.html":{},"classes/RepoInfo.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeService.html":{},"injectables/StripeSubscriptionService.html":{},"controllers/StripeWebhookController.html":{},"injectables/SubmitService.html":{},"classes/SupabaseAuthDto.html":{},"injectables/SupabaseStrategy.html":{},"injectables/TierService.html":{},"classes/TopProjectsDto.html":{},"classes/TopUsersDto.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateInsightMemberDto.html":{},"classes/UpdateUserCollaborationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowingController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"classes/UserListMostActiveContributorsDto.html":{},"injectables/UserListService.html":{},"controllers/UserListStatsController.html":{},"injectables/UserListStatsService.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"classes/UserOnboardingDto.html":{},"injectables/UserOrganizationService.html":{},"controllers/UserRecommendationController.html":{},"classes/UserRepoOptionsDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"injectables/UserReposService.html":{},"injectables/VoteService.html":{},"classes/VotedRepoDto.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["type')@apioperation({operationid",{"_index":5183,"title":{},"body":{"controllers/UserListStatsController.html":{}}}],["typealiases",{"_index":5722,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typeof",{"_index":869,"title":{},"body":{"interfaces/ChatResponse.html":{},"injectables/OpenAiService.html":{}}}],["typeorm",{"_index":22,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"modules/AppModule.html":{},"injectables/CommitAuthorsService.html":{},"injectables/CommitsService.html":{},"injectables/ContributionService.html":{},"injectables/CouponService.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"entities/DbBakedRepo.html":{},"entities/DbCommitAuthors.html":{},"entities/DbCommits.html":{},"entities/DbContribution.html":{},"entities/DbContributionStatTimeframe.html":{},"entities/DbContributionsProjects.html":{},"entities/DbContributorCategoryTimeframe.html":{},"entities/DbCoupon.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbPullRequestGitHubEvents.html":{},"entities/DbPullRequestReview.html":{},"entities/DbRepoLoginContributions.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserListContributorStat.html":{},"entities/DbUserListContributorStat-1.html":{},"entities/DbUserNotification.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"injectables/EmojiService.html":{},"injectables/EndorsementService.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"injectables/LogService.html":{},"injectables/PagerService.html":{},"interfaces/PaginationInput.html":{},"injectables/PizzaOvenService.html":{},"injectables/PullRequestGithubEventsService.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestReviewService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoFilterService.html":{},"injectables/RepoService.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeSubscriptionService.html":{},"injectables/SubmitService.html":{},"injectables/UserCollaborationService.html":{},"injectables/UserFollowService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserListService.html":{},"injectables/UserListStatsService.html":{},"injectables/UserNotificationService.html":{},"injectables/UserOrganizationService.html":{},"injectables/UserReposService.html":{},"injectables/VoteService.html":{}}}],["typeorm/query",{"_index":3160,"title":{},"body":{"injectables/PagerService.html":{},"interfaces/PaginationInput.html":{}}}],["typeormhealthindicator",{"_index":2743,"title":{},"body":{"controllers/HealthController.html":{}}}],["typeormlogger",{"_index":1545,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["typeormmodule",{"_index":302,"title":{},"body":{"modules/AppModule.html":{},"modules/ContributionModule.html":{},"modules/ContributorModule.html":{},"modules/CouponModule.html":{},"modules/CustomerModule.html":{},"modules/EmojiModule.html":{},"modules/EndorsementModule.html":{},"modules/HighlightModule.html":{},"modules/InsightsModule.html":{},"modules/LogModule.html":{},"modules/PizzaOvenModule.html":{},"modules/PullRequestModule.html":{},"modules/RepoModule.html":{},"modules/StarModule.html":{},"modules/StargazeModule.html":{},"modules/StripeSubscriptionModule.html":{},"modules/SubmitModule.html":{},"modules/TimescaleModule.html":{},"modules/UserListModule.html":{},"modules/UserModule.html":{},"modules/UserReposModule.html":{},"modules/VoteModule.html":{}}}],["typeormmodule.forfeature",{"_index":5071,"title":{},"body":{"modules/UserListModule.html":{},"modules/UserModule.html":{}}}],["typeormmodule.forfeature([dbbakedrepo",{"_index":3252,"title":{},"body":{"modules/PizzaOvenModule.html":{}}}],["typeormmodule.forfeature([dbcoupon",{"_index":1300,"title":{},"body":{"modules/CouponModule.html":{}}}],["typeormmodule.forfeature([dbcustomer",{"_index":1521,"title":{},"body":{"modules/CustomerModule.html":{}}}],["typeormmodule.forfeature([dbemoji",{"_index":2459,"title":{},"body":{"modules/EmojiModule.html":{}}}],["typeormmodule.forfeature([dbendorsement",{"_index":2565,"title":{},"body":{"modules/EndorsementModule.html":{}}}],["typeormmodule.forfeature([dbinsight",{"_index":3032,"title":{},"body":{"modules/InsightsModule.html":{}}}],["typeormmodule.forfeature([dblog",{"_index":3107,"title":{},"body":{"modules/LogModule.html":{}}}],["typeormmodule.forfeature([dbpullrequest",{"_index":1284,"title":{},"body":{"modules/ContributorModule.html":{},"modules/PullRequestModule.html":{}}}],["typeormmodule.forfeature([dbpullrequestgithubevents",{"_index":4302,"title":{},"body":{"modules/TimescaleModule.html":{},"modules/UserModule.html":{}}}],["typeormmodule.forfeature([dbrepo",{"_index":1051,"title":{},"body":{"modules/ContributionModule.html":{},"modules/RepoModule.html":{},"modules/StarModule.html":{},"modules/StargazeModule.html":{},"modules/SubmitModule.html":{},"modules/VoteModule.html":{}}}],["typeormmodule.forfeature([dbsubscription",{"_index":4066,"title":{},"body":{"modules/StripeSubscriptionModule.html":{}}}],["typeormmodule.forfeature([dbuserhighlight",{"_index":2858,"title":{},"body":{"modules/HighlightModule.html":{}}}],["typeormmodule.forfeature([dbuserrepo",{"_index":5365,"title":{},"body":{"modules/UserReposModule.html":{}}}],["typeormmodule.forrootasync",{"_index":444,"title":{},"body":{"modules/AppModule.html":{}}}],["typeormmoduleoptions",{"_index":314,"title":{},"body":{"modules/AppModule.html":{}}}],["types",{"_index":5597,"title":{},"body":{"index.html":{}}}],["types:auto",{"_index":5604,"title":{},"body":{"index.html":{}}}],["ucn2zrh2wgxkck7tt2jg4my6wbhkex9s",{"_index":5797,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ui",{"_index":2725,"title":{},"body":{"classes/GeneratePullRequestDescriptionDto.html":{},"miscellaneous/variables.html":{}}}],["unable",{"_index":561,"title":{},"body":{"controllers/AuthController.html":{},"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"controllers/UserListStatsController.html":{},"controllers/UserNotificationController.html":{}}}],["unauthorizedexception",{"_index":2909,"title":{},"body":{"controllers/InsightController.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"injectables/UserListService.html":{}}}],["unauthorizedexception(\"you're",{"_index":5131,"title":{},"body":{"injectables/UserListService.html":{}}}],["undefined",{"_index":870,"title":{},"body":{"interfaces/ChatResponse.html":{},"classes/CreateUserHighlightDto.html":{},"entities/DbUserHighlight.html":{},"classes/DbUserHighlightReactionResponse.html":{},"classes/FollowManyUsersDto.html":{},"injectables/OpenAiService.html":{},"controllers/PullRequestController.html":{},"injectables/PullRequestInsightsService.html":{},"controllers/StripeWebhookController.html":{}}}],["undefined})@apinotfoundresponse({description",{"_index":4663,"title":{},"body":{"controllers/UserHighlightsController.html":{},"controllers/UserNotificationController.html":{}}}],["undefined})@apiparam({name",{"_index":3293,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["undefined})@column({type",{"_index":1927,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["undefined})@isarray",{"_index":4376,"title":{},"body":{"classes/UpdateUserProfileInterestsDto.html":{},"classes/UserOnboardingDto.html":{},"classes/UserRepoOptionsDto-1.html":{}}}],["undefined})@isarray()@isstring({each",{"_index":2641,"title":{},"body":{"classes/FilterListContributorsDto.html":{}}}],["undefined})@isarray()@type(undefined",{"_index":1475,"title":{},"body":{"classes/CreateUserListDto.html":{}}}],["undefined})@isenum(contributionorderfieldsenum)@isoptional",{"_index":1096,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{}}}],["undefined})@isenum(orderdirectionenum)@isoptional",{"_index":1105,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/ContributorPullRequestsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/UserListMostActiveContributorsDto.html":{},"classes/UserRepoOptionsDto.html":{}}}],["undefined})@isenum(pullrequestorderfieldsenum)@isoptional",{"_index":3460,"title":{},"body":{"classes/PullRequestPageOptionsDto.html":{}}}],["undefined})@isenum(rangetypeenum)@isoptional",{"_index":1291,"title":{},"body":{"classes/ContributorPullRequestsDto.html":{}}}],["undefined})@isenum(repoorderfieldsenum)@isoptional",{"_index":3681,"title":{},"body":{"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{}}}],["undefined})@isenum(userlistcontributorstatsorderenum)@isoptional",{"_index":5075,"title":{},"body":{"classes/UserListMostActiveContributorsDto.html":{}}}],["undefined})@isenum(userlistcontributorstatstypeenum)@isoptional",{"_index":1201,"title":{},"body":{"classes/ContributionsTimeframeDto.html":{},"classes/UserListMostActiveContributorsDto.html":{}}}],["undefined})@isoptional",{"_index":2714,"title":{},"body":{"classes/GeneratePullRequestDescriptionDto.html":{}}}],["undefined})@type(undefined)@isarray",{"_index":976,"title":{},"body":{"classes/CollaboratorsDto.html":{},"classes/CreateInsightDto.html":{},"classes/UpdateInsightDto.html":{}}}],["underscores",{"_index":4356,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["unfeaturehighlight",{"_index":2788,"title":{},"body":{"controllers/HighlightController.html":{}}}],["unfeaturehighlight(id",{"_index":2819,"title":{},"body":{"controllers/HighlightController.html":{}}}],["unfollowed",{"_index":3858,"title":{},"body":{"controllers/RepoStargazeController.html":{},"injectables/StargazeService.html":{}}}],["unfollows",{"_index":3881,"title":{},"body":{"controllers/RepoStargazeController.html":{},"controllers/UserFollowsController.html":{}}}],["unfollows'})@apiokresponse({description",{"_index":3856,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["unfollowuserbyuserid",{"_index":4605,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["unfollowuserbyuserid(username",{"_index":4619,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["unfollowuserbyusername",{"_index":4621,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["unique",{"_index":1653,"title":{},"body":{"entities/DbContribution.html":{},"classes/SupabaseAuthDto.html":{}}}],["unit",{"_index":5563,"title":{},"body":{"index.html":{}}}],["unix",{"_index":6016,"title":{},"body":{"miscellaneous/variables.html":{}}}],["unknown",{"_index":787,"title":{},"body":{"controllers/BlogSummaryController.html":{},"injectables/BlogSummaryService.html":{},"controllers/CodeExplanationController.html":{},"injectables/CodeExplanationService.html":{},"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"controllers/CodeTestSuggestionController.html":{},"injectables/CodeTestSuggestionService.html":{},"injectables/CouponService.html":{},"injectables/CustomLogger.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"entities/DbPullRequestGitHubEvents.html":{},"controllers/EmojiController.html":{},"injectables/EmojiService.html":{},"controllers/EndorsementController.html":{},"injectables/EndorsementService.html":{},"controllers/HealthController.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"controllers/IssueSummaryController.html":{},"injectables/IssueSummaryService.html":{},"injectables/LogService.html":{},"injectables/OpenAiService.html":{},"injectables/PagerService.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/RepoService.html":{},"controllers/RepoVoteController.html":{},"injectables/StripeService.html":{},"injectables/StripeSubscriptionService.html":{},"controllers/StripeWebhookController.html":{},"injectables/SupabaseStrategy.html":{},"injectables/TierService.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserEndorsementController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserListService.html":{},"injectables/UserNotificationService.html":{},"injectables/UserOrganizationService.html":{},"controllers/UserRecommendationController.html":{},"injectables/UserReposService.html":{},"injectables/VoteService.html":{},"miscellaneous/variables.html":{}}}],["unknown'})@column('text",{"_index":2054,"title":{},"body":{"entities/DbPullRequestGitHubEvents.html":{}}}],["unnecessary",{"_index":833,"title":{},"body":{"injectables/BlogSummaryService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"injectables/IssueSummaryService.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["unnest(user_highlights.tagged_repos",{"_index":5162,"title":{},"body":{"injectables/UserListService.html":{}}}],["unprocessableentityexception",{"_index":4903,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["unread",{"_index":4212,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["up",{"_index":2221,"title":{},"body":{"entities/DbUserCollaboration.html":{},"index.html":{}}}],["update",{"_index":597,"title":{},"body":{"controllers/AuthController.html":{},"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbPullRequestGitHubEvents.html":{},"entities/DbPullRequestReview.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"classes/SupabaseAuthDto.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"miscellaneous/variables.html":{}}}],["updatecollaboratorsdto",{"_index":5007,"title":{},"body":{"controllers/UserListController.html":{}}}],["updatecollaboratorsdto.contributors.map(async",{"_index":5049,"title":{},"body":{"controllers/UserListController.html":{}}}],["updated",{"_index":1820,"title":{},"body":{"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserList.html":{},"index.html":{}}}],["updated_at",{"_index":667,"title":{},"body":{"controllers/AuthController.html":{},"classes/ContributionPageOptionsDto.html":{},"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbPullRequestReview.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserList.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{},"classes/RepoPageOptionsDto.html":{},"classes/SupabaseAuthDto.html":{},"miscellaneous/enumerations.html":{}}}],["updatedatecolumn",{"_index":1691,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserList.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{}}}],["updatedinsightmember",{"_index":4887,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["updatedinsightmember.access",{"_index":4890,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["updatedinsightmember.user_id",{"_index":4889,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["updatedusercollaboration",{"_index":4420,"title":{},"body":{"controllers/UserCollaborationController.html":{}}}],["updateemailpreferencesforuserprofile",{"_index":551,"title":{},"body":{"controllers/AuthController.html":{}}}],["updateemailpreferencesforuserprofile(userid",{"_index":603,"title":{},"body":{"controllers/AuthController.html":{}}}],["updateendorsementdto",{"_index":4312,"title":{"classes/UpdateEndorsementDto.html":{}},"body":{"classes/UpdateEndorsementDto.html":{}}}],["updatehighlightdto",{"_index":4690,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["updatehighlightdto.highlight",{"_index":4704,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["updatehighlightdto.shipped_at",{"_index":4707,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["updatehighlightdto.taggedrepos",{"_index":4710,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["updatehighlightdto.title",{"_index":4703,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["updatehighlightdto.type",{"_index":4706,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["updatehighlightdto.url",{"_index":4705,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["updatehighlightforuser",{"_index":4652,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["updatehighlightforuser(updatehighlightdto",{"_index":4686,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["updateinsight",{"_index":3038,"title":{},"body":{"injectables/InsightsService.html":{}}}],["updateinsight(id",{"_index":3052,"title":{},"body":{"injectables/InsightsService.html":{}}}],["updateinsightdto",{"_index":2911,"title":{"classes/UpdateInsightDto.html":{}},"body":{"controllers/InsightController.html":{},"classes/UpdateInsightDto.html":{},"controllers/UserInsightsController.html":{}}}],["updateinsightdto.is_public",{"_index":4917,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["updateinsightdto.name",{"_index":4916,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["updateinsightdto.repos.filter",{"_index":4934,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["updateinsightdto.repos.find((repoinfo",{"_index":4923,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["updateinsightdto})@apiparam({name",{"_index":2907,"title":{},"body":{"controllers/InsightController.html":{},"controllers/UserInsightsController.html":{}}}],["updateinsightforuser",{"_index":4895,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["updateinsightforuser(id",{"_index":4900,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["updateinsightmember",{"_index":2936,"title":{},"body":{"injectables/InsightMemberService.html":{},"controllers/UserInsightMemberController.html":{}}}],["updateinsightmember(id",{"_index":2955,"title":{},"body":{"injectables/InsightMemberService.html":{},"controllers/UserInsightMemberController.html":{}}}],["updateinsightmemberdto",{"_index":4320,"title":{"classes/UpdateInsightMemberDto.html":{}},"body":{"classes/UpdateInsightMemberDto.html":{},"controllers/UserInsightMemberController.html":{}}}],["updateinsightmemberdto.access",{"_index":4888,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["updateinsightmemberdto})@apiparam({name",{"_index":4859,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["updateinterestsforuserprofile",{"_index":552,"title":{},"body":{"controllers/AuthController.html":{}}}],["updateinterestsforuserprofile(userid",{"_index":611,"title":{},"body":{"controllers/AuthController.html":{}}}],["updatelistdto",{"_index":5011,"title":{},"body":{"controllers/UserListController.html":{}}}],["updatelistdto.is_public",{"_index":5036,"title":{},"body":{"controllers/UserListController.html":{}}}],["updatelistdto.name",{"_index":5035,"title":{},"body":{"controllers/UserListController.html":{}}}],["updatelistforuser",{"_index":4955,"title":{},"body":{"controllers/UserListController.html":{}}}],["updatelistforuser(updatelistdto",{"_index":5008,"title":{},"body":{"controllers/UserListController.html":{}}}],["updateprofileforuser",{"_index":553,"title":{},"body":{"controllers/AuthController.html":{}}}],["updateprofileforuser(@userid",{"_index":724,"title":{},"body":{"controllers/AuthController.html":{}}}],["updateprofileforuser(userid",{"_index":616,"title":{},"body":{"controllers/AuthController.html":{}}}],["updates",{"_index":594,"title":{},"body":{"controllers/AuthController.html":{},"injectables/PullRequestService.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"injectables/UserNotificationService.html":{}}}],["updateusercollaboration",{"_index":4386,"title":{},"body":{"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{}}}],["updateusercollaboration(id",{"_index":4402,"title":{},"body":{"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{}}}],["updateusercollaborationdto",{"_index":4326,"title":{"classes/UpdateUserCollaborationDto.html":{}},"body":{"classes/UpdateUserCollaborationDto.html":{},"controllers/UserCollaborationController.html":{}}}],["updateusercollaborationdto.status",{"_index":4421,"title":{},"body":{"controllers/UserCollaborationController.html":{}}}],["updateuserdto",{"_index":604,"title":{"classes/UpdateUserDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/UpdateUserDto.html":{}}}],["updateuseremailpreferencesdto",{"_index":605,"title":{"classes/UpdateUserEmailPreferencesDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/UpdateUserEmailPreferencesDto.html":{}}}],["updateuserhighlight",{"_index":4734,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["updateuserhighlight(highlightid",{"_index":4765,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["updateuserlist",{"_index":5091,"title":{},"body":{"injectables/UserListService.html":{}}}],["updateuserlist(listid",{"_index":5120,"title":{},"body":{"injectables/UserListService.html":{}}}],["updateuserprofileinterestsdto",{"_index":612,"title":{"classes/UpdateUserProfileInterestsDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/UpdateUserProfileInterestsDto.html":{}}}],["upsert",{"_index":4114,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["upsertsubscription",{"_index":4068,"title":{},"body":{"injectables/StripeSubscriptionService.html":{}}}],["upsertsubscription(subscription",{"_index":4073,"title":{},"body":{"injectables/StripeSubscriptionService.html":{}}}],["url",{"_index":686,"title":{},"body":{"controllers/AuthController.html":{},"classes/BakeRepoDto.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateUserHighlightDto.html":{},"entities/DbBakedRepo.html":{},"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbPullRequest.html":{},"entities/DbUserHighlight.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"injectables/PizzaOvenService.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["url'})@column({type",{"_index":1779,"title":{},"body":{"entities/DbEndorsement.html":{}}}],["url(`https://${subdomain",{"_index":5835,"title":{},"body":{"miscellaneous/variables.html":{}}}],["us/docs/web/http/methods/delete",{"_index":5984,"title":{},"body":{"miscellaneous/variables.html":{}}}],["us/docs/web/http/methods/get",{"_index":5973,"title":{},"body":{"miscellaneous/variables.html":{}}}],["us/docs/web/http/methods/patch",{"_index":5982,"title":{},"body":{"miscellaneous/variables.html":{}}}],["us/docs/web/http/methods/post",{"_index":5978,"title":{},"body":{"miscellaneous/variables.html":{}}}],["us/docs/web/http/status/200",{"_index":5971,"title":{},"body":{"miscellaneous/variables.html":{}}}],["us/docs/web/http/status/201",{"_index":5976,"title":{},"body":{"miscellaneous/variables.html":{}}}],["us/docs/web/http/status/204",{"_index":5980,"title":{},"body":{"miscellaneous/variables.html":{}}}],["us/docs/web/http/status/400",{"_index":5987,"title":{},"body":{"miscellaneous/variables.html":{}}}],["us/docs/web/http/status/401",{"_index":5994,"title":{},"body":{"miscellaneous/variables.html":{}}}],["us/docs/web/http/status/403",{"_index":5999,"title":{},"body":{"miscellaneous/variables.html":{}}}],["us/docs/web/http/status/404",{"_index":6002,"title":{},"body":{"miscellaneous/variables.html":{}}}],["us/docs/web/http/status/429",{"_index":6005,"title":{},"body":{"miscellaneous/variables.html":{}}}],["use",{"_index":2862,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{},"injectables/TierService.html":{},"index.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["use(request",{"_index":2863,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{}}}],["used",{"_index":838,"title":{},"body":{"injectables/BlogSummaryService.html":{},"injectables/IssueSummaryService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["usefactory",{"_index":445,"title":{},"body":{"modules/AppModule.html":{}}}],["useful",{"_index":5929,"title":{},"body":{"miscellaneous/variables.html":{}}}],["useguards",{"_index":624,"title":{},"body":{"controllers/AuthController.html":{},"controllers/BlogSummaryController.html":{},"controllers/CodeExplanationController.html":{},"controllers/CodeRefactorSuggestionController.html":{},"controllers/CodeTestSuggestionController.html":{},"controllers/EndorsementController.html":{},"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"controllers/IssueSummaryController.html":{},"controllers/PullRequestDescriptionController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserEndorsementController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"controllers/UserNotificationController.html":{},"controllers/UserRecommendationController.html":{}}}],["useguards(endorsementtokenguard",{"_index":2526,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["useguards(supabaseguard",{"_index":658,"title":{},"body":{"controllers/AuthController.html":{},"controllers/BlogSummaryController.html":{},"controllers/CodeExplanationController.html":{},"controllers/CodeRefactorSuggestionController.html":{},"controllers/CodeTestSuggestionController.html":{},"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"controllers/IssueSummaryController.html":{},"controllers/PullRequestDescriptionController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserEndorsementController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"controllers/UserNotificationController.html":{},"controllers/UserRecommendationController.html":{}}}],["useless",{"_index":4778,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["user",{"_index":207,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"modules/AppModule.html":{},"classes/ApplyUserCouponDto.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"interfaces/ChatResponse.html":{},"classes/CollaboratorsDto.html":{},"injectables/ContributionService.html":{},"classes/Contributor.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateUserCollaborationDto.html":{},"classes/CreateUserHighlightDto.html":{},"classes/CreateUserListDto.html":{},"entities/DbContribution.html":{},"entities/DbContributionStatTimeframe.html":{},"entities/DbCustomer.html":{},"entities/DbEndorsement.html":{},"classes/DbFilteredUser.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbRepoLoginContributions.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"classes/DbTopUser.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightReactionResponse.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserListContributorStat.html":{},"entities/DbUserListContributorStat-1.html":{},"entities/DbUserNotification.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"controllers/EndorsementController.html":{},"injectables/EndorsementService.html":{},"controllers/HighlightController.html":{},"classes/HighlightOptionsDto.html":{},"controllers/InsightController.html":{},"modules/InsightsModule.html":{},"injectables/InsightsService.html":{},"injectables/OpenAiService.html":{},"controllers/RepoContributionsController.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/StripeWebhookController.html":{},"classes/SupabaseAuthDto.html":{},"injectables/SupabaseStrategy.html":{},"injectables/TierService.html":{},"classes/TopUsersDto.html":{},"classes/UpdateUserCollaborationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowingController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"modules/UserListModule.html":{},"injectables/UserListService.html":{},"controllers/UserListStatsController.html":{},"injectables/UserListStatsService.html":{},"modules/UserModule.html":{},"controllers/UserNotificationController.html":{},"classes/UserOnboardingDto.html":{},"injectables/UserOrganizationService.html":{},"controllers/UserRecommendationController.html":{},"classes/UserRepoOptionsDto-1.html":{},"modules/UserReposModule.html":{},"injectables/UserReposService.html":{},"classes/VotedRepoDto.html":{},"miscellaneous/variables.html":{}}}],["user's",{"_index":569,"title":{},"body":{"controllers/AuthController.html":{},"entities/DbInsightMember.html":{},"classes/SupabaseAuthDto.html":{}}}],["user'})@apibearerauth()@apipaginatedresponse(dbrepo)@apiokresponse({type",{"_index":5343,"title":{},"body":{"controllers/UserRecommendationController.html":{}}}],["user'})@apibearerauth()@useguards(supabaseguard)@apinotfoundresponse({description",{"_index":4667,"title":{},"body":{"controllers/UserHighlightsController.html":{},"controllers/UserListController.html":{}}}],["user'})@apibearerauth()@useguards(supabaseguard)@apiokresponse({type",{"_index":559,"title":{},"body":{"controllers/AuthController.html":{},"controllers/InsightController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"controllers/UserNotificationController.html":{}}}],["user'})@apibearerauth()@useguards(supabaseguard)@apipaginatedresponse(dbusercollaboration)@apiokresponse({type",{"_index":4397,"title":{},"body":{"controllers/UserCollaborationController.html":{}}}],["user'})@apibody({type",{"_index":4612,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["user'})@apiokresponse({type",{"_index":586,"title":{},"body":{"controllers/AuthController.html":{}}}],["user.collaborations",{"_index":2231,"title":{},"body":{"entities/DbUserCollaboration.html":{}}}],["user.controller",{"_index":5250,"title":{},"body":{"modules/UserModule.html":{}}}],["user.dto",{"_index":639,"title":{},"body":{"controllers/AuthController.html":{}}}],["user.dto.ts",{"_index":4332,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts:102",{"_index":4344,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts:11",{"_index":4349,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts:110",{"_index":4339,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts:19",{"_index":4342,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts:28",{"_index":4335,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts:37",{"_index":4361,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts:50",{"_index":4359,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts:59",{"_index":4337,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts:68",{"_index":4347,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts:77",{"_index":4341,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts:86",{"_index":4351,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts:94",{"_index":4346,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.entity",{"_index":2235,"title":{},"body":{"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserNotification.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserTopRepo.html":{},"controllers/UserController.html":{},"controllers/UserFollowingController.html":{},"modules/UserModule.html":{}}}],["user.from_user_notifications",{"_index":2393,"title":{},"body":{"entities/DbUserNotification.html":{}}}],["user.from_user_notifications)@joincolumn({name",{"_index":2369,"title":{},"body":{"entities/DbUserNotification.html":{}}}],["user.highlights",{"_index":2268,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["user.id",{"_index":4516,"title":{},"body":{"controllers/UserController.html":{},"controllers/UserFollowsController.html":{}}}],["user.insights",{"_index":1823,"title":{},"body":{"entities/DbInsight.html":{}}}],["user.interests?.split(\",\").filter(boolean",{"_index":5349,"title":{},"body":{"controllers/UserRecommendationController.html":{}}}],["user.lists",{"_index":2324,"title":{},"body":{"entities/DbUserList.html":{}}}],["user.organizations",{"_index":2407,"title":{},"body":{"entities/DbUserOrganization.html":{}}}],["user.organizations)@joincolumn({name",{"_index":2402,"title":{},"body":{"entities/DbUserOrganization.html":{}}}],["user.repotouserstargazers",{"_index":2109,"title":{},"body":{"entities/DbRepoToUserStargazers.html":{}}}],["user.repotouserstargazers)@joincolumn({name",{"_index":2105,"title":{},"body":{"entities/DbRepoToUserStargazers.html":{}}}],["user.repotouserstars",{"_index":2124,"title":{},"body":{"entities/DbRepoToUserStars.html":{}}}],["user.repotouserstars)@joincolumn({name",{"_index":2120,"title":{},"body":{"entities/DbRepoToUserStars.html":{}}}],["user.repotousersubmissions",{"_index":2142,"title":{},"body":{"entities/DbRepoToUserSubmissions.html":{}}}],["user.repotousersubmissions)@joincolumn({name",{"_index":2138,"title":{},"body":{"entities/DbRepoToUserSubmissions.html":{}}}],["user.repotouservotes",{"_index":2157,"title":{},"body":{"entities/DbRepoToUserVotes.html":{}}}],["user.repotouservotes)@joincolumn({name",{"_index":2153,"title":{},"body":{"entities/DbRepoToUserVotes.html":{}}}],["user.request_collaborations",{"_index":2226,"title":{},"body":{"entities/DbUserCollaboration.html":{}}}],["user.role",{"_index":4790,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["user.toprepos",{"_index":2435,"title":{},"body":{"entities/DbUserTopRepo.html":{}}}],["user.toprepos)@joincolumn({name",{"_index":2431,"title":{},"body":{"entities/DbUserTopRepo.html":{}}}],["user.user_list_contributors",{"_index":2347,"title":{},"body":{"entities/DbUserListContributor.html":{}}}],["user.user_list_contributors)@joincolumn({name",{"_index":2343,"title":{},"body":{"entities/DbUserListContributor.html":{}}}],["user/collaborations",{"_index":4382,"title":{},"body":{"controllers/UserCollaborationController.html":{}}}],["user/dtos/apply",{"_index":642,"title":{},"body":{"controllers/AuthController.html":{}}}],["user/dtos/contributor",{"_index":3518,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["user/dtos/update",{"_index":638,"title":{},"body":{"controllers/AuthController.html":{}}}],["user/endorsements",{"_index":4528,"title":{},"body":{"controllers/UserEndorsementController.html":{}}}],["user/entities/user",{"_index":395,"title":{},"body":{"modules/AppModule.html":{},"entities/DbEmoji.html":{},"classes/DbUserHighlightReactionResponse.html":{},"controllers/HighlightController.html":{},"modules/HighlightModule.html":{},"classes/HighlightOptionsDto.html":{},"controllers/UserListController.html":{},"modules/UserListModule.html":{},"injectables/UserListService.html":{}}}],["user/highlights",{"_index":4643,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["user/insights",{"_index":4835,"title":{},"body":{"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["user/notifications",{"_index":5257,"title":{},"body":{"controllers/UserNotificationController.html":{}}}],["user/recommendations",{"_index":5332,"title":{},"body":{"controllers/UserRecommendationController.html":{}}}],["user/services/user.service",{"_index":633,"title":{},"body":{"controllers/AuthController.html":{},"controllers/EndorsementController.html":{},"controllers/StripeWebhookController.html":{},"controllers/UserInsightMemberController.html":{}}}],["user/user",{"_index":2827,"title":{},"body":{"controllers/HighlightController.html":{}}}],["user/user.entity",{"_index":336,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/ContributionModule.html":{},"injectables/ContributionService.html":{},"entities/DbInsight.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"controllers/UserListController.html":{},"modules/UserListModule.html":{},"injectables/UserListService.html":{}}}],["user/user.module",{"_index":360,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/EndorsementModule.html":{},"modules/HighlightModule.html":{},"modules/InsightsModule.html":{},"modules/StripeWebHookModule.html":{},"modules/UserListModule.html":{}}}],["user_collaborations",{"_index":2236,"title":{},"body":{"entities/DbUserCollaboration.html":{}}}],["user_follows.user_id=users.id",{"_index":4572,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["user_follows_deleted_at",{"_index":4581,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["user_highlight_reactions",{"_index":2294,"title":{},"body":{"entities/DbUserHighlightReaction.html":{},"injectables/UserHighlightsService.html":{}}}],["user_highlight_reactions.user_id=users.id",{"_index":4817,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["user_highlights",{"_index":2272,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["user_highlights.created_at",{"_index":4789,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["user_highlights.user_id",{"_index":4776,"title":{},"body":{"injectables/UserHighlightsService.html":{},"injectables/UserListService.html":{}}}],["user_highlights.user_id=users.id",{"_index":4770,"title":{},"body":{"injectables/UserHighlightsService.html":{},"injectables/UserListService.html":{}}}],["user_highlights_login",{"_index":4771,"title":{},"body":{"injectables/UserHighlightsService.html":{},"injectables/UserListService.html":{}}}],["user_highlights_name",{"_index":4774,"title":{},"body":{"injectables/UserHighlightsService.html":{},"injectables/UserListService.html":{}}}],["user_id",{"_index":1799,"title":{},"body":{"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserNotification.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"injectables/InsightsService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoService.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"controllers/StripeWebhookController.html":{},"injectables/SubmitService.html":{},"injectables/UserFollowService.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"injectables/UserListService.html":{},"injectables/UserNotificationService.html":{},"injectables/UserReposService.html":{},"injectables/VoteService.html":{}}}],["user_id=:userid",{"_index":4777,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["user_id=:userid)=0",{"_index":3068,"title":{},"body":{"injectables/InsightsService.html":{}}}],["user_list_contributor",{"_index":2335,"title":{},"body":{"entities/DbUserListContributor.html":{}}}],["user_list_contributors",{"_index":212,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"entities/DbContributionStatTimeframe.html":{},"entities/DbContributionsProjects.html":{},"entities/DbContributorCategoryTimeframe.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserListContributorStat.html":{},"entities/DbUserListContributorStat-1.html":{},"injectables/UserListService.html":{},"injectables/UserListStatsService.html":{}}}],["user_list_contributors\".\"user_id",{"_index":214,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["user_list_contributors.list_id='${listid",{"_index":154,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["user_list_contributors.user_id",{"_index":5160,"title":{},"body":{"injectables/UserListService.html":{}}}],["user_list_contributors.user_id=users.id",{"_index":86,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListService.html":{},"injectables/UserListStatsService.html":{}}}],["user_list_contributors_login",{"_index":5154,"title":{},"body":{"injectables/UserListService.html":{}}}],["user_lists",{"_index":2331,"title":{},"body":{"entities/DbUserList.html":{}}}],["user_lists.user_id=users.id",{"_index":5125,"title":{},"body":{"injectables/UserListService.html":{}}}],["user_lists_login",{"_index":5126,"title":{},"body":{"injectables/UserListService.html":{}}}],["user_login",{"_index":210,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["user_metadata",{"_index":668,"title":{},"body":{"controllers/AuthController.html":{}}}],["user_name",{"_index":671,"title":{},"body":{"controllers/AuthController.html":{},"classes/SupabaseAuthDto.html":{}}}],["user_notifications",{"_index":2390,"title":{},"body":{"entities/DbUserNotification.html":{}}}],["user_notifications.user_id=users.id",{"_index":5290,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["user_organizations",{"_index":2406,"title":{},"body":{"entities/DbUserOrganization.html":{}}}],["user_orgs",{"_index":3793,"title":{},"body":{"injectables/RepoService.html":{}}}],["user_orgs.login",{"_index":3797,"title":{},"body":{"injectables/RepoService.html":{}}}],["user_orgs.organization_id",{"_index":3794,"title":{},"body":{"injectables/RepoService.html":{}}}],["user_repos",{"_index":2413,"title":{},"body":{"entities/DbUserRepo.html":{}}}],["user_top_repos",{"_index":2434,"title":{},"body":{"entities/DbUserTopRepo.html":{}}}],["usercollaboration",{"_index":4424,"title":{},"body":{"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{}}}],["usercollaboration.user_id",{"_index":4425,"title":{},"body":{"controllers/UserCollaborationController.html":{}}}],["usercollaborationcontroller",{"_index":4379,"title":{"controllers/UserCollaborationController.html":{}},"body":{"controllers/UserCollaborationController.html":{},"modules/UserModule.html":{}}}],["usercollaborationrepository",{"_index":4431,"title":{},"body":{"injectables/UserCollaborationService.html":{}}}],["usercollaborationservice",{"_index":4407,"title":{"injectables/UserCollaborationService.html":{}},"body":{"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["usercontroller",{"_index":4450,"title":{"controllers/UserController.html":{}},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{}}}],["userdata",{"_index":702,"title":{},"body":{"controllers/AuthController.html":{}}}],["userdetails",{"_index":4280,"title":{},"body":{"injectables/TierService.html":{}}}],["userendorsementcontroller",{"_index":4526,"title":{"controllers/UserEndorsementController.html":{}},"body":{"controllers/UserEndorsementController.html":{},"modules/UserModule.html":{}}}],["userfollowingcontroller",{"_index":4589,"title":{"controllers/UserFollowingController.html":{}},"body":{"controllers/UserFollowingController.html":{},"modules/UserModule.html":{}}}],["userfollowrepository",{"_index":4555,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["userfollowscontroller",{"_index":4600,"title":{"controllers/UserFollowsController.html":{}},"body":{"controllers/UserFollowsController.html":{},"modules/UserModule.html":{}}}],["userfollowservice",{"_index":4545,"title":{"injectables/UserFollowService.html":{}},"body":{"injectables/UserFollowService.html":{},"controllers/UserFollowingController.html":{},"controllers/UserFollowsController.html":{},"injectables/UserHighlightsService.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["userhighlightreaction",{"_index":4719,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["userhighlightreactionrepository",{"_index":4736,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["userhighlightrepository",{"_index":4738,"title":{},"body":{"injectables/UserHighlightsService.html":{},"injectables/UserListService.html":{}}}],["userhighlightscontroller",{"_index":4641,"title":{"controllers/UserHighlightsController.html":{}},"body":{"controllers/UserHighlightsController.html":{},"modules/UserModule.html":{}}}],["userhighlightsservice",{"_index":2826,"title":{"injectables/UserHighlightsService.html":{}},"body":{"controllers/HighlightController.html":{},"controllers/UserController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["userid",{"_index":565,"title":{},"body":{"controllers/AuthController.html":{},"injectables/CustomerService.html":{},"injectables/EndorsementService.html":{},"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightsService.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeService.html":{},"controllers/StripeWebhookController.html":{},"injectables/SubmitService.html":{},"injectables/TierService.html":{},"classes/TopUsersDto.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserEndorsementController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"injectables/UserListService.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"injectables/UserOrganizationService.html":{},"controllers/UserRecommendationController.html":{},"injectables/UserReposService.html":{},"injectables/VoteService.html":{},"miscellaneous/variables.html":{}}}],["userinsightmembercontroller",{"_index":3027,"title":{"controllers/UserInsightMemberController.html":{}},"body":{"modules/InsightsModule.html":{},"controllers/UserInsightMemberController.html":{}}}],["userinsightscontroller",{"_index":3026,"title":{"controllers/UserInsightsController.html":{}},"body":{"modules/InsightsModule.html":{},"controllers/UserInsightsController.html":{}}}],["userinterests",{"_index":3779,"title":{},"body":{"injectables/RepoService.html":{}}}],["userinterests[interest",{"_index":3786,"title":{},"body":{"injectables/RepoService.html":{}}}],["userlistcontributorid",{"_index":4963,"title":{},"body":{"controllers/UserListController.html":{},"injectables/UserListService.html":{}}}],["userlistcontributorrepository",{"_index":66,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListService.html":{},"injectables/UserListStatsService.html":{}}}],["userlistcontributorstatsorderenum",{"_index":33,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"classes/UserListMostActiveContributorsDto.html":{},"injectables/UserListStatsService.html":{},"miscellaneous/enumerations.html":{}}}],["userlistcontributorstatsorderenum.commits",{"_index":5074,"title":{},"body":{"classes/UserListMostActiveContributorsDto.html":{}}}],["userlistcontributorstatstypeenum",{"_index":34,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"classes/ContributionsTimeframeDto.html":{},"classes/UserListMostActiveContributorsDto.html":{},"injectables/UserListStatsService.html":{},"miscellaneous/enumerations.html":{}}}],["userlistcontributorstatstypeenum.active",{"_index":111,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["userlistcontributorstatstypeenum.all",{"_index":109,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"classes/ContributionsTimeframeDto.html":{},"classes/UserListMostActiveContributorsDto.html":{},"injectables/UserListStatsService.html":{}}}],["userlistcontributorstatstypeenum.alumni",{"_index":115,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["userlistcontributorstatstypeenum.new",{"_index":113,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["userlistcontroller",{"_index":4940,"title":{"controllers/UserListController.html":{}},"body":{"controllers/UserListController.html":{},"modules/UserListModule.html":{}}}],["userlistmodule",{"_index":282,"title":{"modules/UserListModule.html":{}},"body":{"modules/AppModule.html":{},"modules/UserListModule.html":{},"modules.html":{},"overview.html":{}}}],["userlistmostactivecontributorsdto",{"_index":35,"title":{"classes/UserListMostActiveContributorsDto.html":{}},"body":{"interfaces/AllContributionsCount.html":{},"classes/UserListMostActiveContributorsDto.html":{},"controllers/UserListStatsController.html":{},"injectables/UserListStatsService.html":{}}}],["userlistrepository",{"_index":5094,"title":{},"body":{"injectables/UserListService.html":{}}}],["userlistservice",{"_index":5014,"title":{"injectables/UserListService.html":{}},"body":{"controllers/UserListController.html":{},"modules/UserListModule.html":{},"injectables/UserListService.html":{},"overview.html":{}}}],["userliststatscontroller",{"_index":5067,"title":{"controllers/UserListStatsController.html":{}},"body":{"modules/UserListModule.html":{},"controllers/UserListStatsController.html":{}}}],["userliststatsservice",{"_index":61,"title":{"injectables/UserListStatsService.html":{}},"body":{"interfaces/AllContributionsCount.html":{},"modules/UserListModule.html":{},"controllers/UserListStatsController.html":{},"injectables/UserListStatsService.html":{},"overview.html":{}}}],["usermessage",{"_index":866,"title":{},"body":{"interfaces/ChatResponse.html":{},"injectables/OpenAiService.html":{}}}],["usermodule",{"_index":283,"title":{"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/EndorsementModule.html":{},"modules/HighlightModule.html":{},"modules/InsightsModule.html":{},"modules/StripeWebHookModule.html":{},"modules/UserListModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["username",{"_index":453,"title":{},"body":{"modules/AppModule.html":{},"classes/CreateUserCollaborationDto.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbPullRequestGitHubEvents.html":{},"entities/DbPullRequestReview.html":{},"entities/DbUserListContributor.html":{},"controllers/EndorsementController.html":{},"classes/FilteredUsersDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"controllers/UserFollowingController.html":{},"controllers/UserFollowsController.html":{},"injectables/UserListService.html":{},"miscellaneous/variables.html":{}}}],["username'})@apinotfoundresponse({description",{"_index":4594,"title":{},"body":{"controllers/UserFollowingController.html":{},"controllers/UserFollowsController.html":{}}}],["username'})@apiokresponse({description",{"_index":4622,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["username'})@apiokresponse({type",{"_index":4487,"title":{},"body":{"controllers/UserController.html":{}}}],["username'})@apipaginatedresponse(dbpullrequest)@apiokresponse({type",{"_index":4481,"title":{},"body":{"controllers/UserController.html":{}}}],["username'})@apipaginatedresponse(dbpullrequestgithubevents)@apiokresponse({type",{"_index":4476,"title":{},"body":{"controllers/UserController.html":{}}}],["usernames",{"_index":2303,"title":{},"body":{"classes/DbUserHighlightReactionResponse.html":{},"classes/FollowManyUsersDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/UpdateUserDto.html":{}}}],["usernotification",{"_index":5281,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["usernotification.from_user_id",{"_index":5304,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["usernotification.message",{"_index":5303,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["usernotification.meta_id",{"_index":5305,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["usernotification.type",{"_index":5301,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["usernotification.user_id",{"_index":5302,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["usernotificationcontroller",{"_index":5247,"title":{"controllers/UserNotificationController.html":{}},"body":{"modules/UserModule.html":{},"controllers/UserNotificationController.html":{}}}],["usernotificationrepository",{"_index":5272,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["usernotificationservice",{"_index":4553,"title":{"injectables/UserNotificationService.html":{}},"body":{"injectables/UserFollowService.html":{},"injectables/UserHighlightsService.html":{},"modules/UserModule.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"overview.html":{}}}],["usernotificationtypes",{"_index":2386,"title":{},"body":{"entities/DbUserNotification.html":{},"injectables/UserNotificationService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["usernotificationtypes.follow",{"_index":5308,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["usernotificationtypes.highlightcreated",{"_index":5311,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["usernotificationtypes.highlightreaction",{"_index":5310,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["useronboardingdto",{"_index":592,"title":{"classes/UserOnboardingDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/UserOnboardingDto.html":{}}}],["userorganizationrepository",{"_index":5323,"title":{},"body":{"injectables/UserOrganizationService.html":{}}}],["userorganizationservice",{"_index":4503,"title":{"injectables/UserOrganizationService.html":{}},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserOrganizationService.html":{},"overview.html":{}}}],["userprofile",{"_index":672,"title":{},"body":{"controllers/AuthController.html":{}}}],["userprofile.email",{"_index":699,"title":{},"body":{"controllers/AuthController.html":{}}}],["userrecommendationcontroller",{"_index":5248,"title":{"controllers/UserRecommendationController.html":{}},"body":{"modules/UserModule.html":{},"controllers/UserRecommendationController.html":{}}}],["userrelations",{"_index":3708,"title":{},"body":{"injectables/RepoService.html":{}}}],["userrelations?.map((relation",{"_index":3763,"title":{},"body":{"injectables/RepoService.html":{}}}],["userrepooptionsdto",{"_index":5354,"title":{"classes/UserRepoOptionsDto.html":{},"classes/UserRepoOptionsDto-1.html":{}},"body":{"classes/UserRepoOptionsDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"injectables/UserReposService.html":{},"classes/VotedRepoDto.html":{}}}],["userreporepository",{"_index":5370,"title":{},"body":{"injectables/UserReposService.html":{}}}],["userrepository",{"_index":1129,"title":{},"body":{"injectables/ContributionService.html":{},"injectables/UserListService.html":{}}}],["userreposmodule",{"_index":284,"title":{"modules/UserReposModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UserReposModule.html":{},"modules.html":{},"overview.html":{}}}],["userreposservice",{"_index":5362,"title":{"injectables/UserReposService.html":{}},"body":{"modules/UserReposModule.html":{},"injectables/UserReposService.html":{},"overview.html":{}}}],["userrole",{"_index":4137,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["users",{"_index":85,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"controllers/AuthController.html":{},"injectables/ContributionService.html":{},"classes/DbFilteredUser.html":{},"classes/DbUserHighlightReactionResponse.html":{},"injectables/EndorsementService.html":{},"classes/FilteredUsersDto.html":{},"classes/HighlightOptionsDto.html":{},"injectables/InsightMemberService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoService.html":{},"controllers/UserController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowingController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserListController.html":{},"injectables/UserListService.html":{},"injectables/UserListStatsService.html":{},"injectables/UserNotificationService.html":{},"index.html":{}}}],["users\".\"id",{"_index":215,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["users\".\"login",{"_index":96,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["users'})@apiokresponse({type",{"_index":4491,"title":{},"body":{"controllers/UserController.html":{}}}],["users.dto",{"_index":4500,"title":{},"body":{"controllers/UserController.html":{},"controllers/UserFollowsController.html":{}}}],["users.dto.ts",{"_index":2684,"title":{},"body":{"classes/FilteredUsersDto.html":{},"classes/FollowManyUsersDto.html":{},"classes/TopUsersDto.html":{}}}],["users.dto.ts:13",{"_index":2694,"title":{},"body":{"classes/FollowManyUsersDto.html":{}}}],["users.dto.ts:15",{"_index":2686,"title":{},"body":{"classes/FilteredUsersDto.html":{},"classes/TopUsersDto.html":{}}}],["users.dto.ts:23",{"_index":2689,"title":{},"body":{"classes/FilteredUsersDto.html":{},"classes/TopUsersDto.html":{}}}],["users.dto.ts:36",{"_index":2685,"title":{},"body":{"classes/FilteredUsersDto.html":{},"classes/TopUsersDto.html":{}}}],["users.dto.ts:38",{"_index":2690,"title":{},"body":{"classes/FilteredUsersDto.html":{},"classes/TopUsersDto.html":{}}}],["users.entity",{"_index":4499,"title":{},"body":{"controllers/UserController.html":{}}}],["users.entity.ts",{"_index":1789,"title":{},"body":{"classes/DbFilteredUser.html":{},"classes/DbTopUser.html":{}}}],["users.entity.ts:14",{"_index":1793,"title":{},"body":{"classes/DbFilteredUser.html":{}}}],["users.entity.ts:8",{"_index":1794,"title":{},"body":{"classes/DbFilteredUser.html":{},"classes/DbTopUser.html":{}}}],["users.id",{"_index":3795,"title":{},"body":{"injectables/RepoService.html":{}}}],["users.login",{"_index":1177,"title":{},"body":{"injectables/ContributionService.html":{}}}],["users.map(async",{"_index":4633,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["users.timezone",{"_index":5165,"title":{},"body":{"injectables/UserListService.html":{}}}],["users_to_repos_stargazers",{"_index":2108,"title":{},"body":{"entities/DbRepoToUserStargazers.html":{}}}],["users_to_repos_stars",{"_index":2123,"title":{},"body":{"entities/DbRepoToUserStars.html":{}}}],["users_to_repos_submissions",{"_index":2141,"title":{},"body":{"entities/DbRepoToUserSubmissions.html":{}}}],["users_to_repos_votes",{"_index":2156,"title":{},"body":{"entities/DbRepoToUserVotes.html":{}}}],["users_to_users_followers",{"_index":2424,"title":{},"body":{"entities/DbUserToUserFollows.html":{},"injectables/UserHighlightsService.html":{}}}],["userservice",{"_index":632,"title":{},"body":{"controllers/AuthController.html":{},"controllers/EndorsementController.html":{},"controllers/StripeWebhookController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowingController.html":{},"controllers/UserFollowsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"modules/UserModule.html":{},"injectables/UserNotificationService.html":{},"controllers/UserRecommendationController.html":{},"overview.html":{}}}],["using",{"_index":1222,"title":{},"body":{"controllers/ContributorController.html":{},"controllers/PullRequestController.html":{},"controllers/RepoController.html":{},"injectables/RepoFilterService.html":{},"index.html":{}}}],["utc",{"_index":2665,"title":{},"body":{"classes/FilterListContributorsDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserOnboardingDto.html":{},"miscellaneous/variables.html":{}}}],["utc:hh:mm:ss.l",{"_index":500,"title":{},"body":{"modules/AppModule.html":{}}}],["utf8",{"_index":5884,"title":{},"body":{"miscellaneous/variables.html":{}}}],["util/cli",{"_index":2871,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{}}}],["utils",{"_index":4098,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["uuid",{"_index":1757,"title":{},"body":{"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsightMember.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"classes/PullRequestPageOptionsDto.html":{},"controllers/StripeWebhookController.html":{}}}],["v4",{"_index":1770,"title":{},"body":{"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsightMember.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"classes/PullRequestPageOptionsDto.html":{}}}],["v4'})@column",{"_index":2339,"title":{},"body":{"entities/DbUserListContributor.html":{}}}],["v4'})@column({type",{"_index":2282,"title":{},"body":{"entities/DbUserHighlightReaction.html":{}}}],["v4'})@isstring()@isoptional",{"_index":3456,"title":{},"body":{"classes/PullRequestPageOptionsDto.html":{}}}],["v4'})@primarycolumn()@primarygeneratedcolumn",{"_index":1841,"title":{},"body":{"entities/DbInsightMember.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{}}}],["v4'})@primarygeneratedcolumn",{"_index":1758,"title":{},"body":{"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbUserHighlightReaction.html":{}}}],["valid",{"_index":733,"title":{},"body":{"controllers/AuthController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"miscellaneous/variables.html":{}}}],["validate",{"_index":4245,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["validate(user",{"_index":4250,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["validatenested",{"_index":1196,"title":{},"body":{"classes/ContributionsPageDto.html":{},"classes/PageDto.html":{}}}],["validationpipe",{"_index":5012,"title":{},"body":{"controllers/UserListController.html":{}}}],["validator",{"_index":536,"title":{},"body":{"classes/ApplyUserCouponDto.html":{},"classes/BakeRepoDto.html":{},"classes/CollaboratorsDto.html":{},"classes/CommitAuthorDto.html":{},"classes/CommitsDto.html":{},"classes/ContributionPageOptionsDto.html":{},"classes/ContributionsByProjectDto.html":{},"classes/ContributionsPageDto.html":{},"classes/ContributionsTimeframeDto.html":{},"classes/Contributor.html":{},"classes/ContributorPullRequestsDto.html":{},"classes/CreateBlogSummaryDto.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateInsightDto.html":{},"classes/CreateInsightMemberDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/CreateLogDto.html":{},"classes/CreateUserCollaborationDto.html":{},"classes/CreateUserHighlightDto.html":{},"classes/CreateUserListDto.html":{},"classes/DbUserHighlightReactionResponse.html":{},"classes/FilterListContributorsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/FilteredUsersDto.html":{},"classes/FollowManyUsersDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/PageDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoInfo.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/TopProjectsDto.html":{},"classes/TopUsersDto.html":{},"classes/UpdateInsightMemberDto.html":{},"classes/UpdateUserCollaborationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"classes/UserListMostActiveContributorsDto.html":{},"classes/UserOnboardingDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"classes/VotedRepoDto.html":{}}}],["validresults",{"_index":4636,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["value",{"_index":1091,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/ContributionsByProjectDto.html":{},"classes/ContributionsTimeframeDto.html":{},"classes/ContributorPullRequestsDto.html":{},"classes/CreateUserHighlightDto.html":{},"entities/DbPullRequest.html":{},"entities/DbPullRequestGitHubEvents.html":{},"classes/FilterListContributorsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/FilteredUsersDto.html":{},"classes/HighlightOptionsDto.html":{},"injectables/HttpLoggerMiddleware.html":{},"injectables/InsightMemberService.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"injectables/PullRequestInsightsService.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"injectables/RepoFilterService.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"injectables/TierService.html":{},"classes/TopProjectsDto.html":{},"classes/TopUsersDto.html":{},"classes/UserListMostActiveContributorsDto.html":{},"injectables/UserListStatsService.html":{},"classes/UserRepoOptionsDto.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["values",{"_index":5477,"title":{},"body":{"index.html":{}}}],["varchar",{"_index":2259,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["variables",{"_index":5462,"title":{"miscellaneous/variables.html":{}},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["varying",{"_index":1590,"title":{},"body":{"entities/DbBakedRepo.html":{},"entities/DbCommitAuthors.html":{},"entities/DbCommits.html":{},"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserList.html":{},"entities/DbUserNotification.html":{}}}],["verbose",{"_index":1487,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["verbose(message",{"_index":1500,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["version",{"_index":4496,"title":{},"body":{"controllers/UserController.html":{},"properties.html":{}}}],["version(\"2",{"_index":4511,"title":{},"body":{"controllers/UserController.html":{}}}],["version('2')@get('/:username/prs')@apioperation({operationid",{"_index":4475,"title":{},"body":{"controllers/UserController.html":{}}}],["versioningtype.uri",{"_index":5850,"title":{},"body":{"miscellaneous/variables.html":{}}}],["videos",{"_index":5630,"title":{},"body":{"index.html":{}}}],["view",{"_index":2900,"title":{},"body":{"controllers/InsightController.html":{},"classes/UpdateInsightMemberDto.html":{},"controllers/UserInsightMemberController.html":{},"injectables/UserListService.html":{}}}],["view'})@isstring()@isin(['view",{"_index":4321,"title":{},"body":{"classes/UpdateInsightMemberDto.html":{}}}],["virtual",{"_index":2295,"title":{},"body":{"entities/DbUserHighlightReaction.html":{}}}],["visibility",{"_index":1210,"title":{},"body":{"classes/Contributor.html":{},"classes/CreateInsightDto.html":{},"classes/CreateUserListDto.html":{},"entities/DbInsight.html":{},"entities/DbUserList.html":{},"classes/UpdateInsightDto.html":{}}}],["visit",{"_index":5460,"title":{},"body":{"index.html":{}}}],["visual",{"_index":5635,"title":{},"body":{"index.html":{}}}],["visualization",{"_index":5634,"title":{},"body":{"index.html":{}}}],["visualizer",{"_index":5638,"title":{},"body":{"index.html":{}}}],["vitest",{"_index":5569,"title":{},"body":{"index.html":{}}}],["void",{"_index":299,"title":{},"body":{"modules/AppModule.html":{},"classes/DatabaseLoggerMiddleware.html":{},"injectables/HttpLoggerMiddleware.html":{},"injectables/RepoFilterService.html":{},"injectables/SupabaseStrategy.html":{},"injectables/UserListStatsService.html":{}}}],["vortex",{"_index":1694,"title":{},"body":{"entities/DbContribution.html":{},"classes/SupabaseAuthDto.html":{},"properties.html":{}}}],["vortex'})@column({type",{"_index":1654,"title":{},"body":{"entities/DbContribution.html":{}}}],["vortex@opensauced.pizza",{"_index":4206,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["vote",{"_index":2145,"title":{},"body":{"entities/DbRepoToUserVotes.html":{},"controllers/RepoVoteController.html":{},"injectables/VoteService.html":{}}}],["vote'})@apiokresponse({description",{"_index":3932,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["vote'})@apiparam({name",{"_index":3934,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["vote.controller",{"_index":5387,"title":{},"body":{"modules/VoteModule.html":{}}}],["vote.controller.ts",{"_index":3923,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["vote.controller.ts:117",{"_index":3935,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["vote.controller.ts:136",{"_index":3938,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["vote.controller.ts:37",{"_index":3942,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["vote.controller.ts:56",{"_index":3948,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["vote.controller.ts:74",{"_index":3951,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["vote.controller.ts:93",{"_index":3954,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["vote.service",{"_index":3958,"title":{},"body":{"controllers/RepoVoteController.html":{},"modules/VoteModule.html":{}}}],["vote/vote.module",{"_index":355,"title":{},"body":{"modules/AppModule.html":{}}}],["votebyrepoid",{"_index":5391,"title":{},"body":{"injectables/VoteService.html":{}}}],["votebyrepoid(repoid",{"_index":5401,"title":{},"body":{"injectables/VoteService.html":{}}}],["voted",{"_index":3941,"title":{},"body":{"controllers/RepoVoteController.html":{},"classes/UserRepoOptionsDto-1.html":{},"injectables/VoteService.html":{},"classes/VotedRepoDto.html":{}}}],["votedrepodto",{"_index":3946,"title":{"classes/VotedRepoDto.html":{}},"body":{"controllers/RepoVoteController.html":{},"classes/UserRepoOptionsDto-1.html":{},"classes/VotedRepoDto.html":{}}}],["voteexists",{"_index":5405,"title":{},"body":{"injectables/VoteService.html":{}}}],["voteexists.deleted_at",{"_index":5407,"title":{},"body":{"injectables/VoteService.html":{}}}],["votemodule",{"_index":285,"title":{"modules/VoteModule.html":{}},"body":{"modules/AppModule.html":{},"modules/VoteModule.html":{},"modules.html":{},"overview.html":{}}}],["voteonebyid",{"_index":3928,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["voteonebyid(@param(\"id",{"_index":3964,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["voteonebyid(id",{"_index":3949,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["voteonebyownerandrepo",{"_index":3929,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["voteonebyownerandrepo(owner",{"_index":3952,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["votes",{"_index":3740,"title":{},"body":{"injectables/RepoService.html":{},"controllers/RepoVoteController.html":{}}}],["votescount",{"_index":3688,"title":{},"body":{"classes/RepoPageOptionsDto.html":{},"injectables/RepoService.html":{},"miscellaneous/enumerations.html":{}}}],["voteservice",{"_index":3957,"title":{"injectables/VoteService.html":{}},"body":{"controllers/RepoVoteController.html":{},"modules/VoteModule.html":{},"injectables/VoteService.html":{},"overview.html":{}}}],["wait",{"_index":755,"title":{},"body":{"classes/BakeRepoDto.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"injectables/PizzaOvenService.html":{}}}],["waitlist",{"_index":601,"title":{},"body":{"controllers/AuthController.html":{}}}],["waitlisted",{"_index":4219,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["warn",{"_index":1488,"title":{},"body":{"injectables/CustomLogger.html":{},"classes/DatabaseLoggerMiddleware.html":{}}}],["warn(message",{"_index":1502,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["warranties",{"_index":5675,"title":{},"body":{"license.html":{}}}],["warranty",{"_index":5671,"title":{},"body":{"license.html":{}}}],["watch",{"_index":5546,"title":{},"body":{"index.html":{}}}],["watchers",{"_index":3685,"title":{},"body":{"classes/RepoPageOptionsDto.html":{},"miscellaneous/enumerations.html":{}}}],["watchman",{"_index":5550,"title":{},"body":{"index.html":{}}}],["web",{"_index":2733,"title":{},"body":{"controllers/HealthController.html":{}}}],["webhook.controller",{"_index":4084,"title":{},"body":{"modules/StripeWebHookModule.html":{}}}],["webhook.controller.ts",{"_index":4086,"title":{},"body":{"controllers/StripeWebhookController.html":{},"miscellaneous/variables.html":{}}}],["webhook.controller.ts:32",{"_index":4095,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["webhook.controller.ts:82",{"_index":4092,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["webhook/stripe",{"_index":4085,"title":{},"body":{"controllers/StripeWebhookController.html":{},"miscellaneous/variables.html":{}}}],["webhook/utils.ts",{"_index":6014,"title":{},"body":{"miscellaneous/variables.html":{}}}],["webhook/webhook.module",{"_index":378,"title":{},"body":{"modules/AppModule.html":{}}}],["webhook/webhook.module.ts",{"_index":4083,"title":{},"body":{"modules/StripeWebHookModule.html":{}}}],["webhooksecret",{"_index":4148,"title":{},"body":{"controllers/StripeWebhookController.html":{},"miscellaneous/variables.html":{}}}],["website",{"_index":4236,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["welcome",{"_index":2391,"title":{},"body":{"entities/DbUserNotification.html":{},"miscellaneous/enumerations.html":{}}}],["welcome'})@column({type",{"_index":2385,"title":{},"body":{"entities/DbUserNotification.html":{}}}],["where(\"endorsements.recipient_user_id",{"_index":2598,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["where(\"insight_members.insight_id",{"_index":2965,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["where(\"insights.id",{"_index":3056,"title":{},"body":{"injectables/InsightsService.html":{}}}],["where(\"insights.user_id",{"_index":3065,"title":{},"body":{"injectables/InsightsService.html":{}}}],["where(\"is_featured=true",{"_index":3074,"title":{},"body":{"injectables/InsightsService.html":{}}}],["where(\"login",{"_index":1166,"title":{},"body":{"injectables/ContributionService.html":{}}}],["where(\"lower(repos.full_name",{"_index":2601,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["where(\"now",{"_index":5153,"title":{},"body":{"injectables/UserListService.html":{}}}],["where(\"r2stargazes.repo_id",{"_index":4019,"title":{},"body":{"injectables/StargazeService.html":{}}}],["where(\"r2votes.repo_id",{"_index":5412,"title":{},"body":{"injectables/VoteService.html":{}}}],["where(\"user_collaborations.user_id",{"_index":4448,"title":{},"body":{"injectables/UserCollaborationService.html":{}}}],["where(\"user_follows.following_user_id",{"_index":4573,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["where(\"user_follows.user_id",{"_index":4575,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["where(\"user_highlight_reactions.highlight_id",{"_index":4818,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["where(\"user_highlights.id",{"_index":4772,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["where(\"user_id",{"_index":5292,"title":{},"body":{"injectables/UserNotificationService.html":{},"injectables/UserOrganizationService.html":{}}}],["where(\"user_list_contributors.list_id",{"_index":5155,"title":{},"body":{"injectables/UserListService.html":{}}}],["where(\"user_lists.id",{"_index":5127,"title":{},"body":{"injectables/UserListService.html":{}}}],["where(\"user_orgs.user_id",{"_index":3798,"title":{},"body":{"injectables/RepoService.html":{}}}],["where(\"users.timezone",{"_index":5166,"title":{},"body":{"injectables/UserListService.html":{}}}],["where(`\"previous_month_prs\".\"author_login",{"_index":233,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["where(`\"pull_request_github_events\".\"pr_author_login\"=:author",{"_index":3376,"title":{},"body":{"injectables/PullRequestGithubEventsService.html":{}}}],["where(`\"user_list_contributors\".\"list_id",{"_index":216,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["where(`${aliastable}.${target}_id",{"_index":3729,"title":{},"body":{"injectables/RepoService.html":{}}}],["where(`'${startdate}'::timestamp",{"_index":4788,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["where(`(:topic",{"_index":3783,"title":{},"body":{"injectables/RepoService.html":{}}}],["where(`lower(\"pull_requests\".\"author_login\")=:contributor",{"_index":3527,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["where(`pr.\"updated_at",{"_index":220,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["where(`pull_requests.repo_id",{"_index":1178,"title":{},"body":{"injectables/ContributionService.html":{}}}],["where(`pull_requests.updated_at",{"_index":3550,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["whether",{"_index":2242,"title":{},"body":{"entities/DbUserHighlight.html":{},"classes/SupabaseAuthDto.html":{},"license.html":{}}}],["window",{"_index":5956,"title":{},"body":{"miscellaneous/variables.html":{}}}],["withdeleted",{"_index":4826,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["within",{"_index":5186,"title":{},"body":{"controllers/UserListStatsController.html":{}}}],["without",{"_index":1667,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbCoupon.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbPullRequestGitHubEvents.html":{},"entities/DbPullRequestReview.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserNotification.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"license.html":{}}}],["workflow",{"_index":5639,"title":{},"body":{"index.html":{}}}],["write",{"_index":5562,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["writefile(path.resolve(process.cwd",{"_index":5882,"title":{},"body":{"miscellaneous/variables.html":{}}}],["writing",{"_index":5555,"title":{},"body":{"index.html":{}}}],["written",{"_index":828,"title":{},"body":{"injectables/BlogSummaryService.html":{},"injectables/CodeExplanationService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/IssueSummaryService.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["x",{"_index":5953,"title":{},"body":{"miscellaneous/variables.html":{}}}],["x509",{"_index":5497,"title":{},"body":{"index.html":{}}}],["xa",{"_index":1964,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["yaml",{"_index":5877,"title":{},"body":{"miscellaneous/variables.html":{}}}],["yaml.stringify(document",{"_index":5876,"title":{},"body":{"miscellaneous/variables.html":{}}}],["yamlswaggerdoc",{"_index":5875,"title":{},"body":{"miscellaneous/variables.html":{}}}],["year",{"_index":5894,"title":{},"body":{"miscellaneous/variables.html":{}}}],["years",{"_index":3413,"title":{},"body":{"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{}}}],["yes",{"_index":1135,"title":{},"body":{"injectables/ContributionService.html":{},"injectables/CustomLogger.html":{},"classes/DatabaseLoggerMiddleware.html":{},"injectables/RepoService.html":{},"injectables/StripeService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserListService.html":{}}}],["you'})@column({type",{"_index":2376,"title":{},"body":{"entities/DbUserNotification.html":{}}}],["your_api_domain",{"_index":5475,"title":{},"body":{"index.html":{}}}],["your_supabase_api_key",{"_index":5473,"title":{},"body":{"index.html":{}}}],["your_supabase_jwt_secret",{"_index":5474,"title":{},"body":{"index.html":{}}}],["your_supabase_url",{"_index":5472,"title":{},"body":{"index.html":{}}}],["youtube",{"_index":5632,"title":{},"body":{"index.html":{}}}],["yyyy",{"_index":3415,"title":{},"body":{"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoService.html":{}}}],["zone",{"_index":1668,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbCoupon.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbPullRequestGitHubEvents.html":{},"entities/DbPullRequestReview.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserNotification.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{}}}],["zoom",{"_index":248,"title":{},"body":{"modules/ApiServicesModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/BlogSummaryModule.html":{},"modules/ContributionModule.html":{},"modules/ContributorModule.html":{},"modules/CouponModule.html":{},"modules/CustomerModule.html":{},"modules/EmojiModule.html":{},"modules/EndorsementModule.html":{},"modules/HighlightModule.html":{},"modules/InsightsModule.html":{},"modules/IssueSummaryModule.html":{},"modules/LogModule.html":{},"modules/OpenAiModule.html":{},"modules/PizzaOvenModule.html":{},"modules/PullRequestModule.html":{},"modules/RepoFilterModule.html":{},"modules/RepoModule.html":{},"modules/StarModule.html":{},"modules/StargazeModule.html":{},"modules/StripeModule.html":{},"modules/StripeSubscriptionModule.html":{},"modules/StripeWebHookModule.html":{},"modules/SubmitModule.html":{},"modules/TierModule.html":{},"modules/TimescaleModule.html":{},"modules/UserListModule.html":{},"modules/UserModule.html":{},"modules/UserReposModule.html":{},"modules/VoteModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"interfaces/AllContributionsCount.html":{"url":"interfaces/AllContributionsCount.html","title":"interface - AllContributionsCount","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  AllContributionsCount\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user-lists/user-list-stat.service.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            all_contributions\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        all_contributions\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        all_contributions:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable, NotFoundException } from \"@nestjs/common\";\nimport { Repository, SelectQueryBuilder } from \"typeorm\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\n\nimport { PageDto } from \"../common/dtos/page.dto\";\nimport { DbUserListContributor } from \"./entities/user-list-contributor.entity\";\nimport { DbUserListContributorStat } from \"./entities/user-list-contributor-stats.entity\";\nimport {\n  UserListContributorStatsOrderEnum,\n  UserListContributorStatsTypeEnum,\n  UserListMostActiveContributorsDto,\n} from \"./dtos/most-active-contributors.dto\";\nimport { ContributionsTimeframeDto } from \"./dtos/contributions-timeframe.dto\";\nimport { DbContributionStatTimeframe } from \"./entities/contributions-timeframe.entity\";\nimport { DbContributionsProjects } from \"./entities/contributions-projects.entity\";\nimport { DbContributorCategoryTimeframe } from \"./entities/contributors-timeframe.entity\";\nimport { ContributionPageMetaDto as ContributionsPageMetaDto } from \"./dtos/contributions-pagemeta.dto\";\nimport { ContributionsPageDto } from \"./dtos/contributions-page.dto\";\nimport { ContributionsByProjectDto } from \"./dtos/contributions-by-project.dto\";\nimport { TopProjectsDto } from \"./dtos/top-projects.dto\";\n\ninterface AllContributionsCount {\n  all_contributions: number;\n}\n\n@Injectable()\nexport class UserListStatsService {\n  constructor(\n    @InjectRepository(DbUserListContributor, \"ApiConnection\")\n    private userListContributorRepository: Repository\n  ) {}\n\n  baseQueryBuilder(): SelectQueryBuilder {\n    const builder = this.userListContributorRepository.createQueryBuilder(\"user_list_contributors\");\n\n    return builder;\n  }\n\n  async findListContributorStatsByProject(\n    options: TopProjectsDto,\n    listId: string\n  ): Promise {\n    const range = options.range!;\n    const repoId = options.repo_id;\n\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder.innerJoin(\"users\", \"users\", \"user_list_contributors.user_id=users.id\");\n\n    queryBuilder\n      .select(\"users.login\", \"login\")\n      .andWhere(\"user_list_contributors.list_id = :listId\", { listId })\n      .addSelect(\n        `(\n          SELECT COALESCE(SUM(\"pull_requests\".\"commits\"), 0)\n          FROM \"pull_requests\"\n          WHERE \"pull_requests\".\"author_login\" = \"users\".\"login\"\n            AND \"pull_requests\".\"repo_id\" = ${repoId}\n            AND now() - INTERVAL '${range} days' > {\n    const range = pageOptionsDto.range!;\n    const now = new Date().toISOString();\n\n    const cteBuilder = this.baseQueryBuilder();\n\n    cteBuilder.innerJoin(\"users\", \"users\", \"user_list_contributors.user_id=users.id\");\n\n    switch (pageOptionsDto.contributorType) {\n      case UserListContributorStatsTypeEnum.all:\n        break;\n\n      case UserListContributorStatsTypeEnum.active:\n        this.applyActiveContributorsFilter(cteBuilder, now, range);\n        break;\n\n      case UserListContributorStatsTypeEnum.new:\n        this.applyNewContributorsFilter(cteBuilder, now, range);\n        break;\n\n      case UserListContributorStatsTypeEnum.alumni: {\n        this.applyAlumniContributorsFilter(cteBuilder, now, range);\n        break;\n      }\n\n      default:\n        break;\n    }\n\n    cteBuilder\n      .select(\"users.login\", \"login\")\n      .andWhere(\"user_list_contributors.list_id = :listId\", { listId })\n      .addSelect(\n        `(\n          SELECT COALESCE(SUM(\"pull_requests\".\"commits\"), 0)\n          FROM \"pull_requests\"\n          WHERE \"pull_requests\".\"author_login\" = \"users\".\"login\"\n            AND now() - INTERVAL '${range} days' (),\n        new ContributionsPageMetaDto({ itemCount, pageOptionsDto }, 0)\n      );\n    }\n\n    const allContributionsCount = allContributionsResult.all_contributions;\n\n    const entities: DbUserListContributorStat[] = await entityQb.getRawMany();\n\n    const pageMetaDto = new ContributionsPageMetaDto({ itemCount, pageOptionsDto }, allContributionsCount);\n\n    return new ContributionsPageDto(entities, pageMetaDto);\n  }\n\n  async findContributorCategoriesByTimeframe(\n    options: ContributionsTimeframeDto,\n    listId: string\n  ): Promise {\n    const denominator = 82;\n    const range = options.range!;\n    const dates = this.getDateFrames(range, denominator);\n\n    const framePromises = dates.map(async (frameStartDate) =>\n      this.findContributorCategoriesInTimeframeHelper(frameStartDate.toISOString(), range / denominator, listId)\n    );\n\n    return Promise.all(framePromises);\n  }\n\n  async findContributionsInTimeframe(\n    options: ContributionsTimeframeDto,\n    listId: string\n  ): Promise {\n    const range = options.range!;\n    const contributorType = options.contributorType!;\n    const dates = this.getDateFrames(range);\n\n    const framePromises = dates.map(async (frameStartDate) =>\n      this.findContributionsInTimeframeHelper(frameStartDate.toISOString(), range / 7, contributorType, listId)\n    );\n\n    return Promise.all(framePromises);\n  }\n\n  getDateFrames(range = 30, denominator = 7): Date[] {\n    const currentDate = new Date();\n    const frameDuration = range / denominator;\n    const dates: Date[] = [];\n\n    // eslint-disable-next-line no-loops/no-loops\n    for (let i = 0; i  {\n    const subQueryBuilder = this.baseQueryBuilder();\n\n    subQueryBuilder.innerJoin(\n      \"users\",\n      \"users\",\n      `user_list_contributors.user_id=users.id AND user_list_contributors.list_id='${listId}'`\n    );\n\n    switch (contributorType) {\n      case UserListContributorStatsTypeEnum.all:\n        break;\n\n      case UserListContributorStatsTypeEnum.active:\n        this.applyActiveContributorsFilter(subQueryBuilder, startDate, range);\n        break;\n\n      case UserListContributorStatsTypeEnum.new:\n        this.applyNewContributorsFilter(subQueryBuilder, startDate, range);\n        break;\n\n      case UserListContributorStatsTypeEnum.alumni: {\n        this.applyAlumniContributorsFilter(subQueryBuilder, startDate, range);\n        break;\n      }\n\n      default:\n        break;\n    }\n\n    subQueryBuilder\n      .addSelect(\n        `(\n          SELECT COALESCE(SUM(\"pull_requests\".\"commits\"), 0)\n          FROM \"pull_requests\"\n          WHERE \"pull_requests\".\"author_login\" = \"users\".\"login\"\n            AND \"pull_requests\".\"updated_at\" > '${startDate}'::TIMESTAMP - INTERVAL '${range} days'\n            AND \"pull_requests\".\"updated_at\"  '${startDate}'::TIMESTAMP - INTERVAL '${range} days'\n            AND \"pull_requests\".\"updated_at\"  {\n    const activeCountQueryBuilder = this.baseQueryBuilder();\n\n    activeCountQueryBuilder.innerJoin(\n      \"users\",\n      \"users\",\n      `user_list_contributors.user_id=users.id AND user_list_contributors.list_id='${listId}'`\n    );\n\n    this.applyActiveContributorsFilter(activeCountQueryBuilder, startDate, range);\n\n    const activeCount = await activeCountQueryBuilder.getCount();\n\n    const newCountQueryBuilder = this.baseQueryBuilder();\n\n    newCountQueryBuilder.innerJoin(\n      \"users\",\n      \"users\",\n      `user_list_contributors.user_id=users.id AND user_list_contributors.list_id='${listId}'`\n    );\n\n    this.applyNewContributorsFilter(newCountQueryBuilder, startDate, range);\n\n    const newCount = await newCountQueryBuilder.getCount();\n\n    const alumniCountQueryBuilder = this.baseQueryBuilder();\n\n    alumniCountQueryBuilder.innerJoin(\n      \"users\",\n      \"users\",\n      `user_list_contributors.user_id=users.id AND user_list_contributors.list_id='${listId}'`\n    );\n\n    this.applyAlumniContributorsFilter(alumniCountQueryBuilder, startDate, range);\n\n    const alumniCount = await alumniCountQueryBuilder.getCount();\n\n    return {\n      time_start: startDate,\n      time_end: `${new Date(new Date(startDate).getTime() + range * 86400000).toISOString()}`,\n      active: activeCount,\n      new: newCount,\n      alumni: alumniCount,\n      all: activeCount + newCount + alumniCount,\n    };\n  }\n\n  async findContributionsByProject(\n    listId: string,\n    options: ContributionsByProjectDto\n  ): Promise {\n    const range = options.range!;\n\n    const queryBuilder = this.userListContributorRepository.manager\n      .createQueryBuilder()\n      .select(\"split_part(repos.full_name, '/', 1)\", \"org_id\")\n      .addSelect(\"split_part(repos.full_name, '/', 2)\", \"project_id\")\n      .addSelect(\"repos.id\", \"repo_id\")\n      .addSelect(\"COUNT(pr.id)\", \"contributions\")\n\n      // grab pull requests first\n      .from(\"pull_requests\", \"pr\")\n\n      // and join them with repos\n      .innerJoin(\"repos\", \"repos\", 'pr.\"repo_id\" = \"repos\".\"id\"')\n\n      // join with filtered users from the user list\n      .innerJoin(\n        (subQuery) =>\n          subQuery\n            .select(\"users.login\", \"user_login\")\n            .from(\"user_list_contributors\", \"user_list_contributors\")\n            .innerJoin(\"users\", \"users\", '\"user_list_contributors\".\"user_id\" = \"users\".\"id\"')\n            .where(`\"user_list_contributors\".\"list_id\" = '${listId}'`),\n        \"filtered_users\",\n        'pr.\"author_login\" = \"filtered_users\".\"user_login\"'\n      )\n\n      .where(`pr.\"updated_at\" BETWEEN NOW() - INTERVAL '${range} days' AND NOW()`)\n      .groupBy(\"repos.full_name, repos.id\");\n\n    const entities: DbContributionsProjects[] = await queryBuilder.getRawMany();\n\n    return entities;\n  }\n\n  private applyActiveContributorsFilter(\n    queryBuilder: SelectQueryBuilder,\n    startDate: string,\n    range = 30\n  ) {\n    queryBuilder\n      .leftJoin(\n        `(\n        SELECT DISTINCT \"author_login\"\n        FROM \"pull_requests\"\n        WHERE \"pull_requests\".\"updated_at\" BETWEEN '${startDate}'::TIMESTAMP - INTERVAL '${range} days'\n          AND '${startDate}'::TIMESTAMP\n      )`,\n        \"current_month_prs\",\n        `\"users\".\"login\" = \"current_month_prs\".\"author_login\"`\n      )\n      .leftJoin(\n        `(\n        SELECT DISTINCT \"author_login\"\n        FROM \"pull_requests\"\n        WHERE \"pull_requests\".\"updated_at\" BETWEEN '${startDate}'::TIMESTAMP - INTERVAL '${range + range} days'\n          AND '${startDate}'::TIMESTAMP - INTERVAL '${range} days'\n      )`,\n        \"previous_month_prs\",\n        `\"users\".\"login\" = \"previous_month_prs\".\"author_login\"`\n      )\n      .where(`\"previous_month_prs\".\"author_login\" IS NOT NULL`)\n      .andWhere(`\"current_month_prs\".\"author_login\" IS NOT NULL`);\n  }\n\n  private applyNewContributorsFilter(\n    queryBuilder: SelectQueryBuilder,\n    startDate: string,\n    range = 30\n  ) {\n    queryBuilder\n      .leftJoin(\n        `(\n            SELECT DISTINCT \"author_login\"\n            FROM \"pull_requests\"\n            WHERE \"pull_requests\".\"updated_at\" BETWEEN NOW() - INTERVAL '${range} days'\n              AND '${startDate}'::TIMESTAMP\n          )`,\n        \"current_month_prs\",\n        `\"users\".\"login\" = \"current_month_prs\".\"author_login\"`\n      )\n      .leftJoin(\n        `(\n            SELECT DISTINCT \"author_login\"\n            FROM \"pull_requests\"\n            WHERE \"pull_requests\".\"updated_at\" BETWEEN NOW() - INTERVAL '${range + range} days'\n              AND '${startDate}'::TIMESTAMP - INTERVAL '${range} days'\n          )`,\n        \"previous_month_prs\",\n        `\"users\".\"login\" = \"previous_month_prs\".\"author_login\"`\n      )\n      .where(`\"previous_month_prs\".\"author_login\" IS NULL`)\n      .andWhere(`\"current_month_prs\".\"author_login\" IS NOT NULL`);\n  }\n\n  private applyAlumniContributorsFilter(\n    queryBuilder: SelectQueryBuilder,\n    startDate: string,\n    range = 30\n  ) {\n    queryBuilder\n      .leftJoin(\n        `(\n            SELECT DISTINCT \"author_login\"\n            FROM \"pull_requests\"\n            WHERE \"pull_requests\".\"updated_at\" BETWEEN '${startDate}'::TIMESTAMP - INTERVAL '${range} days'\n              AND '${startDate}'::TIMESTAMP\n          )`,\n        \"current_month_prs\",\n        `\"users\".\"login\" = \"current_month_prs\".\"author_login\"`\n      )\n      .leftJoin(\n        `(\n            SELECT DISTINCT \"author_login\"\n            FROM \"pull_requests\"\n            WHERE \"pull_requests\".\"updated_at\" BETWEEN '${startDate}'::TIMESTAMP - INTERVAL '${range + range} days'\n              AND '${startDate}'::TIMESTAMP - INTERVAL '${range} days'\n          )`,\n        \"previous_month_prs\",\n        `\"users\".\"login\" = \"previous_month_prs\".\"author_login\"`\n      )\n      .where(`\"previous_month_prs\".\"author_login\" IS NOT NULL`)\n      .andWhere(`\"current_month_prs\".\"author_login\" IS NULL`);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ApiServicesModule.html":{"url":"modules/ApiServicesModule.html","title":"module - ApiServicesModule","body":"\n                   \n\n\n\n\n    Modules\n    ApiServicesModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_ApiServicesModule\n\n\n\ncluster_ApiServicesModule_exports\n\n\n\ncluster_ApiServicesModule_providers\n\n\n\n\nPagerService \n\nPagerService \n\n\n\nApiServicesModule\n\nApiServicesModule\n\nPagerService  -->\n\nApiServicesModule->PagerService \n\n\n\n\n\nPagerService\n\nPagerService\n\nApiServicesModule -->\n\nPagerService->ApiServicesModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/common/services/api-services.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PagerService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            PagerService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { PagerService } from \"./pager.service\";\n\n@Module({\n  providers: [PagerService],\n  exports: [PagerService],\n})\nexport class ApiServicesModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nBlogSummaryModule\n\nBlogSummaryModule\n\nAppModule -->\n\nBlogSummaryModule->AppModule\n\n\n\n\n\nContributionModule\n\nContributionModule\n\nAppModule -->\n\nContributionModule->AppModule\n\n\n\n\n\nContributorModule\n\nContributorModule\n\nAppModule -->\n\nContributorModule->AppModule\n\n\n\n\n\nCouponModule\n\nCouponModule\n\nAppModule -->\n\nCouponModule->AppModule\n\n\n\n\n\nCustomerModule\n\nCustomerModule\n\nAppModule -->\n\nCustomerModule->AppModule\n\n\n\n\n\nEmojiModule\n\nEmojiModule\n\nAppModule -->\n\nEmojiModule->AppModule\n\n\n\n\n\nEndorsementModule\n\nEndorsementModule\n\nAppModule -->\n\nEndorsementModule->AppModule\n\n\n\n\n\nHealthModule\n\nHealthModule\n\nAppModule -->\n\nHealthModule->AppModule\n\n\n\n\n\nHighlightModule\n\nHighlightModule\n\nAppModule -->\n\nHighlightModule->AppModule\n\n\n\n\n\nInsightsModule\n\nInsightsModule\n\nAppModule -->\n\nInsightsModule->AppModule\n\n\n\n\n\nIssueSummaryModule\n\nIssueSummaryModule\n\nAppModule -->\n\nIssueSummaryModule->AppModule\n\n\n\n\n\nLogModule\n\nLogModule\n\nAppModule -->\n\nLogModule->AppModule\n\n\n\n\n\nOpenAiModule\n\nOpenAiModule\n\nAppModule -->\n\nOpenAiModule->AppModule\n\n\n\n\n\nPizzaOvenModule\n\nPizzaOvenModule\n\nAppModule -->\n\nPizzaOvenModule->AppModule\n\n\n\n\n\nPullRequestModule\n\nPullRequestModule\n\nAppModule -->\n\nPullRequestModule->AppModule\n\n\n\n\n\nRepoModule\n\nRepoModule\n\nAppModule -->\n\nRepoModule->AppModule\n\n\n\n\n\nStarModule\n\nStarModule\n\nAppModule -->\n\nStarModule->AppModule\n\n\n\n\n\nStargazeModule\n\nStargazeModule\n\nAppModule -->\n\nStargazeModule->AppModule\n\n\n\n\n\nStripeSubscriptionModule\n\nStripeSubscriptionModule\n\nAppModule -->\n\nStripeSubscriptionModule->AppModule\n\n\n\n\n\nStripeWebHookModule\n\nStripeWebHookModule\n\nAppModule -->\n\nStripeWebHookModule->AppModule\n\n\n\n\n\nSubmitModule\n\nSubmitModule\n\nAppModule -->\n\nSubmitModule->AppModule\n\n\n\n\n\nTimescaleModule\n\nTimescaleModule\n\nAppModule -->\n\nTimescaleModule->AppModule\n\n\n\n\n\nUserListModule\n\nUserListModule\n\nAppModule -->\n\nUserListModule->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nUserReposModule\n\nUserReposModule\n\nAppModule -->\n\nUserReposModule->AppModule\n\n\n\n\n\nVoteModule\n\nVoteModule\n\nAppModule -->\n\nVoteModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            BlogSummaryModule\n                        \n                        \n                            ContributionModule\n                        \n                        \n                            ContributorModule\n                        \n                        \n                            CouponModule\n                        \n                        \n                            CustomerModule\n                        \n                        \n                            EmojiModule\n                        \n                        \n                            EndorsementModule\n                        \n                        \n                            HealthModule\n                        \n                        \n                            HighlightModule\n                        \n                        \n                            InsightsModule\n                        \n                        \n                            IssueSummaryModule\n                        \n                        \n                            LogModule\n                        \n                        \n                            OpenAiModule\n                        \n                        \n                            PizzaOvenModule\n                        \n                        \n                            PullRequestModule\n                        \n                        \n                            RepoModule\n                        \n                        \n                            StarModule\n                        \n                        \n                            StargazeModule\n                        \n                        \n                            StripeSubscriptionModule\n                        \n                        \n                            StripeWebHookModule\n                        \n                        \n                            SubmitModule\n                        \n                        \n                            TimescaleModule\n                        \n                        \n                            UserListModule\n                        \n                        \n                            UserModule\n                        \n                        \n                            UserReposModule\n                        \n                        \n                            VoteModule\n                        \n                    \n                \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        configure\n                        \n                    \n                \n            \n            \n                \nconfigure(consumer: MiddlewareConsumer)\n                \n            \n\n\n            \n                \n                    Defined in src/app.module.ts:272\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    consumer\n                                    \n                                            MiddlewareConsumer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n\n\n    \n        import { MiddlewareConsumer, Module, RequestMethod } from \"@nestjs/common\";\nimport { InjectDataSource, TypeOrmModule } from \"@nestjs/typeorm\";\nimport { ConfigModule, ConfigService } from \"@nestjs/config\";\nimport { HttpModule } from \"@nestjs/axios\";\nimport { TerminusModule } from \"@nestjs/terminus\";\nimport { LoggerModule } from \"nestjs-pino\";\nimport { DataSource } from \"typeorm\";\nimport { TypeOrmModuleOptions } from \"@nestjs/typeorm/dist/interfaces/typeorm-options.interface\";\nimport { clc } from \"@nestjs/common/utils/cli-colors.util\";\n\nimport {\n  ApiConfig,\n  DbApiConfig,\n  DbLoggingConfig,\n  EndpointConfig,\n  StripeConfig,\n  OpenAIConfig,\n  PizzaConfig,\n  HacktoberfestConfig,\n  TierConfig,\n  DbTimescaleConfig,\n} from \"./config\";\nimport { RepoModule } from \"./repo/repo.module\";\nimport { HealthModule } from \"./health/health.module\";\nimport { DbRepo } from \"./repo/entities/repo.entity\";\nimport { DbUser } from \"./user/user.entity\";\nimport { DbContribution } from \"./contribution/contribution.entity\";\nimport { DbRepoToUserVotes } from \"./repo/entities/repo.to.user.votes.entity\";\nimport { DbRepoToUserStars } from \"./repo/entities/repo.to.user.stars.entity\";\nimport { DbRepoToUserSubmissions } from \"./repo/entities/repo.to.user.submissions.entity\";\nimport { DbRepoToUserStargazers } from \"./repo/entities/repo.to.user.stargazers.entity\";\nimport { DbBakedRepo } from \"./pizza/entities/baked-repo.entity\";\nimport { DbCommitAuthors } from \"./pizza/entities/commit_authors.entity\";\nimport { DbCommits } from \"./pizza/entities/commits.entity\";\nimport { AuthModule } from \"./auth/auth.module\";\nimport { VoteModule } from \"./vote/vote.module\";\nimport { StarModule } from \"./star/star.module\";\nimport { StargazeModule } from \"./stargaze/stargaze.module\";\nimport { SubmitModule } from \"./submit/submit.module\";\nimport { ContributionModule } from \"./contribution/contribution.module\";\nimport { UserModule } from \"./user/user.module\";\nimport { HttpLoggerMiddleware } from \"./common/middleware/http-logger.middleware\";\nimport { DatabaseLoggerMiddleware } from \"./common/middleware/database-logger.middleware\";\nimport { InsightsModule } from \"./insight/insights.module\";\nimport { DbInsight } from \"./insight/entities/insight.entity\";\nimport { DbInsightRepo } from \"./insight/entities/insight-repo.entity\";\nimport { UserReposModule } from \"./user-repo/user-repos.module\";\nimport { DbUserRepo } from \"./user-repo/user-repo.entity\";\nimport { DbCustomer } from \"./customer/customer.entity\";\nimport { CustomerModule } from \"./customer/customer.module\";\nimport { StripeWebHookModule } from \"./stripe-webhook/webhook.module\";\nimport { EmojiModule } from \"./emoji/emoji.module\";\nimport { StripeSubscriptionModule } from \"./subscription/stripe-subscription.module\";\nimport { DbSubscription } from \"./subscription/stripe-subscription.dto\";\nimport { DbLog } from \"./log/log.entity\";\nimport { PullRequestModule } from \"./pull-requests/pull-request.module\";\nimport { DbPullRequest } from \"./pull-requests/entities/pull-request.entity\";\nimport { DbPullRequestReview } from \"./pull-requests/entities/pull-request-review.entity\";\nimport { DbUserHighlight } from \"./user/entities/user-highlight.entity\";\nimport { HighlightModule } from \"./highlight/highlight.module\";\nimport { DbUserToUserFollows } from \"./user/entities/user-follows.entity\";\nimport { DbInsightMember } from \"./insight/entities/insight-member.entity\";\nimport { DbEmoji } from \"./emoji/entities/emoji.entity\";\nimport { DbUserHighlightReaction } from \"./user/entities/user-highlight-reaction.entity\";\nimport { DbPRInsight } from \"./pull-requests/entities/pull-request-insight.entity\";\nimport { DbUserTopRepo } from \"./user/entities/user-top-repo.entity\";\nimport { DbUserNotification } from \"./user/entities/user-notification.entity\";\nimport { DbUserCollaboration } from \"./user/entities/user-collaboration.entity\";\nimport { DbUserOrganization } from \"./user/entities/user-organization.entity\";\nimport { EndorsementModule } from \"./endorsement/endorsement.module\";\nimport { DbEndorsement } from \"./endorsement/entities/endorsement.entity\";\nimport { ContributorModule } from \"./contributor/contributor.module\";\nimport { OpenAiModule } from \"./open-ai/open-ai.module\";\nimport { IssueSummaryModule } from \"./issues/issue-summary.module\";\nimport { BlogSummaryModule } from \"./blogs/issue-summary.module\";\nimport { PizzaOvenModule } from \"./pizza/pizza-oven.module\";\nimport { UserListModule } from \"./user-lists/user-list.module\";\nimport { CouponModule } from \"./coupon/coupon.module\";\nimport { DbUserList } from \"./user-lists/entities/user-list.entity\";\nimport { DbUserListContributor } from \"./user-lists/entities/user-list-contributor.entity\";\nimport { DbCoupon } from \"./coupon/entities/coupon.entity\";\nimport { LogModule } from \"./log/log.module\";\nimport { TimescaleModule } from \"./timescale/timescale.module\";\nimport { DbPullRequestGitHubEvents } from \"./timescale/entities/pull_request_github_event\";\n\n@Module({\n  imports: [\n    ConfigModule.forRoot({\n      load: [\n        ApiConfig,\n        DbApiConfig,\n        DbLoggingConfig,\n        EndpointConfig,\n        StripeConfig,\n        OpenAIConfig,\n        PizzaConfig,\n        HacktoberfestConfig,\n        TierConfig,\n        DbTimescaleConfig,\n      ],\n      isGlobal: true,\n    }),\n    TypeOrmModule.forRootAsync({\n      imports: [ConfigModule],\n      name: \"ApiConnection\",\n      useFactory: (configService: ConfigService) =>\n        ({\n          parseInt8: true,\n          type: configService.get(\"db-api.connection\"),\n          host: configService.get(\"db-api.host\"),\n          port: configService.get(\"db-api.port\"),\n          username: configService.get(\"db-api.username\"),\n          password: configService.get(\"db-api.password\"),\n          database: configService.get(\"db-api.database\"),\n          autoLoadEntities: false,\n          entities: [\n            DbUser,\n            DbUserRepo,\n            DbUserHighlight,\n            DbUserHighlightReaction,\n            DbUserNotification,\n            DbUserCollaboration,\n            DbRepo,\n            DbContribution,\n            DbRepoToUserVotes,\n            DbRepoToUserStars,\n            DbRepoToUserSubmissions,\n            DbRepoToUserStargazers,\n            DbInsight,\n            DbInsightMember,\n            DbInsightRepo,\n            DbCustomer,\n            DbSubscription,\n            DbPullRequest,\n            DbPullRequestReview,\n            DbPRInsight,\n            DbUserToUserFollows,\n            DbEmoji,\n            DbUserTopRepo,\n            DbEndorsement,\n            DbBakedRepo,\n            DbCommitAuthors,\n            DbCommits,\n            DbUserOrganization,\n            DbUserList,\n            DbUserListContributor,\n            DbCoupon,\n          ],\n          synchronize: false,\n          logger: new DatabaseLoggerMiddleware(\"OS\"),\n          ssl: {\n            ca: configService.get(\"db-api.certificate\"),\n            rejectUnauthorized: false,\n          },\n          maxQueryExecutionTime: configService.get(\"db-api.maxQueryExecutionTime\"),\n        } as TypeOrmModuleOptions),\n      inject: [ConfigService],\n    }),\n    TypeOrmModule.forRootAsync({\n      imports: [ConfigModule],\n      name: \"TimescaleConnection\",\n      useFactory: (configService: ConfigService) =>\n        ({\n          type: configService.get(\"db-timescale.connection\"),\n          host: configService.get(\"db-timescale.host\"),\n          port: configService.get(\"db-timescale.port\"),\n          username: configService.get(\"db-timescale.username\"),\n          password: configService.get(\"db-timescale.password\"),\n          database: configService.get(\"db-timescale.database\"),\n          autoLoadEntities: false,\n          entities: [DbPullRequestGitHubEvents],\n          synchronize: false,\n          logger: new DatabaseLoggerMiddleware(\"OS\"),\n          ssl: {\n            ca: configService.get(\"db-timescale.certificate\"),\n            rejectUnauthorized: false,\n          },\n        } as TypeOrmModuleOptions),\n      inject: [ConfigService],\n    }),\n    TypeOrmModule.forRootAsync({\n      imports: [ConfigModule],\n      name: \"LogConnection\",\n      useFactory: (configService: ConfigService) =>\n        ({\n          parseInt8: true,\n          type: configService.get(\"db-logging.connection\"),\n          host: configService.get(\"db-logging.host\"),\n          port: configService.get(\"db-logging.port\"),\n          username: configService.get(\"db-logging.username\"),\n          password: configService.get(\"db-logging.password\"),\n          database: configService.get(\"db-logging.database\"),\n          autoLoadEntities: false,\n          entities: [DbLog],\n          synchronize: false,\n          logger: new DatabaseLoggerMiddleware(\"LG\"),\n          ssl: {\n            ca: configService.get(\"db-logging.certificate\"),\n            rejectUnauthorized: false,\n          },\n          maxQueryExecutionTime: configService.get(\"db-logging.maxQueryExecutionTime\"),\n        } as TypeOrmModuleOptions),\n      inject: [ConfigService],\n    }),\n    LoggerModule.forRootAsync({\n      imports: [ConfigModule],\n      inject: [ConfigService],\n      useFactory: (config: ConfigService) => ({\n        pinoHttp: {\n          name: `os.${String(config.get(\"api.codename\")).toLowerCase()}`,\n          level: config.get(\"api.logging\"),\n          transport: {\n            target: \"pino-pretty\",\n            options: {\n              colorize: true,\n              levelFirst: true,\n              translateTime: \"UTC:hh:MM:ss.l\",\n              singleLine: true,\n              messageFormat: `${clc.yellow(`[{context}]`)} ${clc.green(`{msg}`)}`,\n              ignore: \"pid,hostname,context\",\n            },\n          },\n          customProps: () => ({ context: \"HTTP\" }),\n        },\n        exclude: [{ method: RequestMethod.ALL, path: \"check\" }],\n      }),\n    }),\n    TerminusModule,\n    HttpModule,\n    AuthModule,\n    HealthModule,\n    RepoModule,\n    VoteModule,\n    StarModule,\n    StargazeModule,\n    SubmitModule,\n    ContributionModule,\n    UserModule,\n    InsightsModule,\n    IssueSummaryModule,\n    BlogSummaryModule,\n    UserReposModule,\n    CustomerModule,\n    StripeWebHookModule,\n    StripeSubscriptionModule,\n    PullRequestModule,\n    HighlightModule,\n    EmojiModule,\n    EndorsementModule,\n    ContributorModule,\n    OpenAiModule,\n    PizzaOvenModule,\n    UserListModule,\n    CouponModule,\n    LogModule,\n    TimescaleModule,\n  ],\n  providers: [],\n})\nexport class AppModule {\n  constructor(\n    @InjectDataSource(\"ApiConnection\")\n    private readonly apiConnection: DataSource,\n\n    @InjectDataSource(\"TimescaleConnection\")\n    private readonly timescaleConnection: DataSource,\n\n    @InjectDataSource(\"LogConnection\")\n    private readonly logConnection: DataSource\n  ) {}\n\n  configure(consumer: MiddlewareConsumer) {\n    consumer.apply(HttpLoggerMiddleware).forRoutes(`v1`);\n    consumer.apply(HttpLoggerMiddleware).forRoutes(`v2`);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ApplyUserCouponDto.html":{"url":"classes/ApplyUserCouponDto.html","title":"class - ApplyUserCouponDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ApplyUserCouponDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dtos/apply-user-coupon.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                couponCode\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        couponCode\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Coupon Code', type: String, example: 'saucy'})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/apply-user-coupon.dto.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsString } from \"class-validator\";\n\nexport class ApplyUserCouponDto {\n  @ApiProperty({\n    description: \"Coupon Code\",\n    type: String,\n    example: \"saucy\",\n  })\n  @IsString()\n  couponCode: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                applyCouponForUser\n                            \n                            \n                                    Async\n                                deleteUserAccount\n                            \n                            \n                                    Async\n                                getSession\n                            \n                            \n                                    Async\n                                postCreateCheckoutSession\n                            \n                            \n                                    Async\n                                postOnboarding\n                            \n                            \n                                    Async\n                                postWaitlist\n                            \n                            \n                                    Async\n                                updateEmailPreferencesForUserProfile\n                            \n                            \n                                    Async\n                                updateInterestsForUserProfile\n                            \n                            \n                                    Async\n                                updateProfileForUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        applyCouponForUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    applyCouponForUser(userId: number, applyUserCouponDto: ApplyUserCouponDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch('/profile/coupon')@ApiOperation({operationId: 'applyCouponForUser', summary: 'Applies a coupon for the authenticated user'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOkResponse({type: DbUser})@ApiNotFoundResponse({description: 'Unable to apply coupon for the user profile'})@ApiBody({type: ApplyUserCouponDto})\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:232\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    applyUserCouponDto\n                                    \n                                                ApplyUserCouponDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteUserAccount\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteUserAccount(userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/profile')@ApiOperation({operationId: 'deleteUserAccount', summary: 'Deletes the authenticated user's account'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOkResponse({type: DbUser})@ApiNotFoundResponse({description: 'Unable to delete user account'})\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:250\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getSession\n                        \n                    \n                \n            \n            \n                \n                    \n                    getSession(user: SupabaseAuthUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/session')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'checkAuthSession', summary: 'Get authenticated session information'})@ApiOkResponse({type: SupabaseAuthDto})@HttpCode(HttpStatus.OK)\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:37\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                SupabaseAuthUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        postCreateCheckoutSession\n                        \n                    \n                \n            \n            \n                \n                    \n                    postCreateCheckoutSession(user: SupabaseAuthUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/checkout/session')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'postCreateCheckoutSession', summary: 'Creates a new checkout session for the user'})@ApiOkResponse({type: SupabaseAuthDto})@ApiNotFoundResponse({description: 'Unable to create checkout session'})\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:149\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                SupabaseAuthUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        postOnboarding\n                        \n                    \n                \n            \n            \n                \n                    \n                    postOnboarding(userId: number, body: UserOnboardingDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/onboarding')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'postOnboarding', summary: 'Updates onboarding information for user'})@ApiOkResponse({type: SupabaseAuthDto})@ApiNotFoundResponse({description: 'Unable to update onboarding information for the user'})\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:118\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    body\n                                    \n                                                UserOnboardingDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        postWaitlist\n                        \n                    \n                \n            \n            \n                \n                    \n                    postWaitlist(userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/waitlist')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'postWaitlist', summary: 'Updates waitlist information for user'})@ApiOkResponse({type: SupabaseAuthDto})@ApiNotFoundResponse({description: 'Unable to update waitlist information for the user'})\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:136\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateEmailPreferencesForUserProfile\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateEmailPreferencesForUserProfile(userId: number, updateUserDto: UpdateUserEmailPreferencesDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch('/profile/email')@ApiOperation({operationId: 'updateEmailPreferencesForUserProfile', summary: 'Updates the email preferences for the authenticated user profile'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOkResponse({type: DbUser})@ApiNotFoundResponse({description: 'Unable to update email preferences for the user profile'})@ApiBody({type: UpdateUserEmailPreferencesDto})\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:213\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateUserDto\n                                    \n                                                UpdateUserEmailPreferencesDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateInterestsForUserProfile\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateInterestsForUserProfile(userId: number, updateUserDto: UpdateUserProfileInterestsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch('/profile/interests')@ApiOperation({operationId: 'updateInterestsForUserProfile', summary: 'Updates the interests for the authenticated user profile'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOkResponse({type: DbUser})@ApiNotFoundResponse({description: 'Unable to update interests for the user profile'})@ApiBody({type: UpdateUserProfileInterestsDto})\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:194\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateUserDto\n                                    \n                                                UpdateUserProfileInterestsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateProfileForUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateProfileForUser(userId: number, updateUserDto: UpdateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch('/profile')@ApiOperation({operationId: 'updateProfileForUser', summary: 'Updates the profile for the authenticated user'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOkResponse({type: DbUser})@ApiNotFoundResponse({description: 'Unable to update user profile'})@ApiBody({type: UpdateUserDto})\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:180\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateUserDto\n                                    \n                                                UpdateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Delete, Get, HttpCode, HttpStatus, Patch, Post, UseGuards } from \"@nestjs/common\";\nimport { ApiBearerAuth, ApiBody, ApiNotFoundResponse, ApiOkResponse, ApiOperation, ApiTags } from \"@nestjs/swagger\";\nimport { SupabaseAuthUser } from \"nestjs-supabase-auth\";\nimport { UserService } from \"../user/services/user.service\";\nimport { StripeService } from \"../stripe/stripe.service\";\nimport { CustomerService } from \"../customer/customer.service\";\nimport { DbUser } from \"../user/user.entity\";\nimport { UpdateUserDto } from \"../user/dtos/update-user.dto\";\nimport { UpdateUserEmailPreferencesDto } from \"../user/dtos/update-user-email-prefs.dto\";\nimport { UpdateUserProfileInterestsDto } from \"../user/dtos/update-user-interests.dto\";\nimport { ApplyUserCouponDto } from \"../user/dtos/apply-user-coupon.dto\";\nimport { CouponService } from \"../coupon/coupon.service\";\nimport { SupabaseAuthDto } from \"./dtos/supabase-auth-response.dto\";\nimport { User, UserId } from \"./supabase.user.decorator\";\nimport { SupabaseGuard } from \"./supabase.guard\";\nimport { UserOnboardingDto } from \"./dtos/user-onboarding.dto\";\n\n@Controller(\"auth\")\n@ApiTags(\"Authentication service\")\nexport class AuthController {\n  constructor(\n    private userService: UserService,\n    private stripeService: StripeService,\n    private customerService: CustomerService,\n    private couponService: CouponService\n  ) {}\n\n  @Get(\"/session\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"checkAuthSession\",\n    summary: \"Get authenticated session information\",\n  })\n  @ApiOkResponse({ type: SupabaseAuthDto })\n  @HttpCode(HttpStatus.OK)\n  async getSession(@User() user: SupabaseAuthUser): Promise {\n    const {\n      role,\n      email: session_email,\n      confirmed_at,\n      last_sign_in_at,\n      created_at,\n      updated_at,\n      user_metadata: { sub: id, user_name },\n    } = user;\n\n    let userProfile: Partial = {};\n\n    // check/insert user\n    try {\n      // get user from public users table\n      const {\n        is_onboarded,\n        is_waitlisted,\n        role: insights_role,\n        name,\n        bio,\n        location,\n        twitter_username,\n        company,\n        display_local_time,\n        url,\n        email,\n        github_sponsors_url,\n        linkedin_url,\n        discord_url,\n        notification_count,\n        coupon_code,\n        insights_count,\n      } = await this.userService.checkAddUser(user);\n\n      userProfile = {\n        is_onboarded,\n        insights_role,\n        is_waitlisted,\n        name,\n        location,\n        bio,\n        twitter_username,\n        company,\n        display_local_time,\n        url,\n        email,\n        github_sponsors_url,\n        linkedin_url,\n        discord_url,\n        notification_count,\n        coupon_code,\n        insights_count,\n      };\n    } catch (e) {\n      // leave user profile as-is\n    }\n\n    return {\n      id: `${String(id)}`,\n      user_name: `${String(user_name)}`,\n      role,\n      email: userProfile.email ?? session_email,\n      confirmed_at,\n      last_sign_in_at,\n      created_at,\n      updated_at,\n      ...userProfile,\n    };\n  }\n\n  @Post(\"/onboarding\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"postOnboarding\",\n    summary: \"Updates onboarding information for user\",\n  })\n  @ApiOkResponse({ type: SupabaseAuthDto })\n  @ApiNotFoundResponse({ description: \"Unable to update onboarding information for the user\" })\n  async postOnboarding(@UserId() userId: number, @Body() body: UserOnboardingDto): Promise {\n    const userData = {\n      timezone: body.timezone,\n      interests: body.interests,\n    };\n\n    return this.userService.updateOnboarding(userId, userData);\n  }\n\n  @Post(\"/waitlist\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"postWaitlist\",\n    summary: \"Updates waitlist information for user\",\n  })\n  @ApiOkResponse({ type: SupabaseAuthDto })\n  @ApiNotFoundResponse({ description: \"Unable to update waitlist information for the user\" })\n  async postWaitlist(@UserId() userId: number): Promise {\n    return this.userService.updateWaitlistStatus(userId);\n  }\n\n  @Post(\"/checkout/session\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"postCreateCheckoutSession\",\n    summary: \"Creates a new checkout session for the user\",\n  })\n  @ApiOkResponse({ type: SupabaseAuthDto })\n  @ApiNotFoundResponse({ description: \"Unable to create checkout session\" })\n  async postCreateCheckoutSession(@User() user: SupabaseAuthUser): Promise {\n    const {\n      email,\n      user_metadata: { sub },\n    } = user;\n    const id = sub as number;\n    const customer = await this.customerService.findById(id);\n    let customerId: string;\n\n    if (customer) {\n      customerId = customer.stripe_customer_id;\n    } else {\n      const stripeCustomer = await this.stripeService.addCustomer(id, email);\n      const newCustomer = await this.customerService.addCustomer(id, stripeCustomer.id);\n\n      customerId = newCustomer.stripe_customer_id;\n    }\n\n    return this.stripeService.createCheckoutSession(customerId);\n  }\n\n  @Patch(\"/profile\")\n  @ApiOperation({\n    operationId: \"updateProfileForUser\",\n    summary: \"Updates the profile for the authenticated user\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOkResponse({ type: DbUser })\n  @ApiNotFoundResponse({ description: \"Unable to update user profile\" })\n  @ApiBody({ type: UpdateUserDto })\n  async updateProfileForUser(@UserId() userId: number, @Body() updateUserDto: UpdateUserDto): Promise {\n    return this.userService.updateUser(userId, updateUserDto);\n  }\n\n  @Patch(\"/profile/interests\")\n  @ApiOperation({\n    operationId: \"updateInterestsForUserProfile\",\n    summary: \"Updates the interests for the authenticated user profile\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOkResponse({ type: DbUser })\n  @ApiNotFoundResponse({ description: \"Unable to update interests for the user profile\" })\n  @ApiBody({ type: UpdateUserProfileInterestsDto })\n  async updateInterestsForUserProfile(\n    @UserId() userId: number,\n    @Body() updateUserDto: UpdateUserProfileInterestsDto\n  ): Promise {\n    await this.userService.updateInterests(userId, updateUserDto);\n\n    return this.userService.findOneById(userId);\n  }\n\n  @Patch(\"/profile/email\")\n  @ApiOperation({\n    operationId: \"updateEmailPreferencesForUserProfile\",\n    summary: \"Updates the email preferences for the authenticated user profile\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOkResponse({ type: DbUser })\n  @ApiNotFoundResponse({ description: \"Unable to update email preferences for the user profile\" })\n  @ApiBody({ type: UpdateUserEmailPreferencesDto })\n  async updateEmailPreferencesForUserProfile(\n    @UserId() userId: number,\n    @Body() updateUserDto: UpdateUserEmailPreferencesDto\n  ): Promise {\n    await this.userService.updateEmailPreferences(userId, updateUserDto);\n\n    return this.userService.findOneById(userId);\n  }\n\n  @Patch(\"/profile/coupon\")\n  @ApiOperation({\n    operationId: \"applyCouponForUser\",\n    summary: \"Applies a coupon for the authenticated user\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOkResponse({ type: DbUser })\n  @ApiNotFoundResponse({ description: \"Unable to apply coupon for the user profile\" })\n  @ApiBody({ type: ApplyUserCouponDto })\n  async applyCouponForUser(@UserId() userId: number, @Body() applyUserCouponDto: ApplyUserCouponDto): Promise {\n    // check for valid coupon\n    await this.couponService.findCoupon(applyUserCouponDto.couponCode);\n\n    await this.userService.applyCoupon(userId, applyUserCouponDto.couponCode);\n\n    return this.userService.findOneById(userId);\n  }\n\n  @Delete(\"/profile\")\n  @ApiOperation({\n    operationId: \"deleteUserAccount\",\n    summary: \"Deletes the authenticated user's account\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOkResponse({ type: DbUser })\n  @ApiNotFoundResponse({ description: \"Unable to delete user account\" })\n  async deleteUserAccount(@UserId() userId: number): Promise {\n    return this.userService.deleteUser(userId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nCouponModule\n\nCouponModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nCouponModule->AuthModule\n\n\n\n\n\nCustomerModule\n\nCustomerModule\n\nAuthModule -->\n\nCustomerModule->AuthModule\n\n\n\n\n\nStripeModule\n\nStripeModule\n\nAuthModule -->\n\nStripeModule->AuthModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAuthModule -->\n\nUserModule->AuthModule\n\n\n\n\n\nUserReposModule\n\nUserReposModule\n\nAuthModule -->\n\nUserReposModule->AuthModule\n\n\n\n\n\nSupabaseGuard \n\nSupabaseGuard \n\nSupabaseGuard  -->\n\nAuthModule->SupabaseGuard \n\n\n\n\n\nSupabaseStrategy \n\nSupabaseStrategy \n\nSupabaseStrategy  -->\n\nAuthModule->SupabaseStrategy \n\n\n\n\n\nSupabaseGuard\n\nSupabaseGuard\n\nAuthModule -->\n\nSupabaseGuard->AuthModule\n\n\n\n\n\nSupabaseStrategy\n\nSupabaseStrategy\n\nAuthModule -->\n\nSupabaseStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            SupabaseGuard\n                        \n                        \n                            SupabaseStrategy\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            CouponModule\n                        \n                        \n                            CustomerModule\n                        \n                        \n                            StripeModule\n                        \n                        \n                            UserModule\n                        \n                        \n                            UserReposModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            SupabaseGuard\n                        \n                        \n                            SupabaseStrategy\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { PassportModule } from \"@nestjs/passport\";\nimport { UserModule } from \"../user/user.module\";\nimport { UserReposModule } from \"../user-repo/user-repos.module\";\nimport { StripeModule } from \"../stripe/stripe.module\";\nimport { CustomerModule } from \"../customer/customer.module\";\nimport { CouponModule } from \"../coupon/coupon.module\";\nimport { AuthController } from \"./auth.controller\";\nimport { SupabaseStrategy } from \"./supabase.strategy\";\nimport { SupabaseGuard } from \"./supabase.guard\";\n\n@Module({\n  imports: [PassportModule, UserModule, UserReposModule, StripeModule, CustomerModule, CouponModule],\n  providers: [SupabaseStrategy, SupabaseGuard],\n  exports: [SupabaseStrategy, SupabaseGuard],\n  controllers: [AuthController],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/BakeRepoDto.html":{"url":"classes/BakeRepoDto.html","title":"class - BakeRepoDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  BakeRepoDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/pizza/dtos/baked-repo.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                url\n                            \n                            \n                                wait\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        url\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Repo clone URL', type: String, example: 'https://github.com/open-sauced/insights'})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pizza/dtos/baked-repo.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        wait\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Option to wait for Pizza service to finish baking repo', type: Boolean, example: false})@IsBoolean()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pizza/dtos/baked-repo.dto.ts:19\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsBoolean, IsString } from \"class-validator\";\n\nexport class BakeRepoDto {\n  @ApiProperty({\n    description: \"Repo clone URL\",\n    type: String,\n    example: \"https://github.com/open-sauced/insights\",\n  })\n  @IsString()\n  url: string;\n\n  @ApiProperty({\n    description: \"Option to wait for Pizza service to finish baking repo\",\n    type: Boolean,\n    example: false,\n  })\n  @IsBoolean()\n  wait: boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/BlogSummaryController.html":{"url":"controllers/BlogSummaryController.html","title":"controller - BlogSummaryController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  BlogSummaryController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/blogs/issue-summary.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                blogs\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                genereateBlogSummary\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        genereateBlogSummary\n                        \n                    \n                \n            \n            \n                \n                    \n                    genereateBlogSummary(genereateBlogSummaryDto: CreateBlogSummaryDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/summary/generate')@ApiOperation({operationId: 'generateBlogSummary', summary: 'Generate a summary for a markdown supported blog'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiBadRequestResponse({description: 'Invalid request'})@ApiBody({type: CreateBlogSummaryDto})\n                \n            \n\n            \n                \n                    Defined in src/blogs/issue-summary.controller.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    genereateBlogSummaryDto\n                                    \n                                                CreateBlogSummaryDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { BadRequestException, Body, Controller, Post, UseGuards } from \"@nestjs/common\";\nimport { ApiOperation, ApiBearerAuth, ApiBadRequestResponse, ApiBody, ApiTags } from \"@nestjs/swagger\";\n\nimport { SupabaseGuard } from \"../auth/supabase.guard\";\nimport { CreateBlogSummaryDto } from \"./dtos/create-blog-summary.dto\";\nimport { BlogSummaryService } from \"./blog-summary.service\";\n\n@Controller(\"blogs\")\n@ApiTags(\"Blog summary service\")\nexport class BlogSummaryController {\n  constructor(private readonly blogSummaryService: BlogSummaryService) {}\n\n  @Post(\"/summary/generate\")\n  @ApiOperation({\n    operationId: \"generateBlogSummary\",\n    summary: \"Generate a summary for a markdown supported blog\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  @ApiBody({ type: CreateBlogSummaryDto })\n  async genereateBlogSummary(@Body() genereateBlogSummaryDto: CreateBlogSummaryDto) {\n    const summary = await this.blogSummaryService.generateBlogSummary(genereateBlogSummaryDto);\n\n    if (!summary) {\n      throw new BadRequestException();\n    }\n\n    return { summary };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/BlogSummaryModule.html":{"url":"modules/BlogSummaryModule.html","title":"module - BlogSummaryModule","body":"\n                   \n\n\n\n\n    Modules\n    BlogSummaryModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_BlogSummaryModule\n\n\n\ncluster_BlogSummaryModule_imports\n\n\n\ncluster_BlogSummaryModule_exports\n\n\n\ncluster_BlogSummaryModule_providers\n\n\n\n\nOpenAiModule\n\nOpenAiModule\n\n\n\nBlogSummaryModule\n\nBlogSummaryModule\n\nBlogSummaryModule -->\n\nOpenAiModule->BlogSummaryModule\n\n\n\n\n\nBlogSummaryService \n\nBlogSummaryService \n\nBlogSummaryService  -->\n\nBlogSummaryModule->BlogSummaryService \n\n\n\n\n\nBlogSummaryService\n\nBlogSummaryService\n\nBlogSummaryModule -->\n\nBlogSummaryService->BlogSummaryModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/blogs/issue-summary.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            BlogSummaryService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            BlogSummaryController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            OpenAiModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            BlogSummaryService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { OpenAiModule } from \"../open-ai/open-ai.module\";\nimport { BlogSummaryService } from \"./blog-summary.service\";\nimport { BlogSummaryController } from \"./issue-summary.controller\";\n\n@Module({\n  imports: [OpenAiModule],\n  controllers: [BlogSummaryController],\n  providers: [BlogSummaryService],\n  exports: [BlogSummaryService],\n})\nexport class BlogSummaryModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/BlogSummaryService.html":{"url":"injectables/BlogSummaryService.html","title":"injectable - BlogSummaryService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  BlogSummaryService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/blogs/blog-summary.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                generateBlogSummary\n                            \n                            \n                                    Private\n                                generatePrompt\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(openAiService: OpenAiService)\n                    \n                \n                        \n                            \n                                Defined in src/blogs/blog-summary.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        openAiService\n                                                  \n                                                        \n                                                                        OpenAiService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        generateBlogSummary\n                        \n                    \n                \n            \n            \n                \n                    \n                    generateBlogSummary(options: CreateBlogSummaryDto)\n                \n            \n\n\n            \n                \n                    Defined in src/blogs/blog-summary.service.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                CreateBlogSummaryDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        generatePrompt\n                        \n                    \n                \n            \n            \n                \n                    \n                    generatePrompt(language: string, maxLength: number, tone: string)\n                \n            \n\n\n            \n                \n                    Defined in src/blogs/blog-summary.service.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    language\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    maxLength\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    tone\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\n\nimport { OpenAiService } from \"../open-ai/open-ai.service\";\nimport { CreateBlogSummaryDto } from \"./dtos/create-blog-summary.dto\";\n\n@Injectable()\nexport class BlogSummaryService {\n  constructor(private openAiService: OpenAiService) {}\n\n  private generatePrompt(language: string, maxLength: number, tone: string) {\n    return [\n      `I will generate a blog summary for a blog with the specifications mentioned below`,\n      `The summary should be written in the first person with a ${tone} tone`,\n      `Summary language: ${language}`,\n      `Summary must be a maximum of ${maxLength} characters.`,\n      \"Exclude anything unnecessary such as translation. Your entire response will be used to summarize and analyze the blog.\",\n    ].join(\"\\n\");\n  }\n\n  async generateBlogSummary(options: CreateBlogSummaryDto) {\n    const content = `Blog Title: ${options.blogTitle}\\n\\nBlog Content: ${options.blogMarkdown}`;\n\n    try {\n      const completion = this.openAiService.generateCompletion(\n        this.generatePrompt(options.language, options.summaryLength, options.tone),\n        content,\n        options.temperature\n      );\n\n      return completion;\n    } catch (error: unknown) {\n      if (error instanceof Error) {\n        console.error(\"OpenAI error: \", error.message);\n      }\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ChatResponse.html":{"url":"interfaces/ChatResponse.html","title":"interface - ChatResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ChatResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/open-ai/open-ai.service.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            choices\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        choices\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        choices:     literal type[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { Fetch } from \"@supabase/supabase-js/dist/module/lib/types\";\nimport { ConfigService } from \"@nestjs/config\";\n\ninterface ChatResponse {\n  choices: { message: { content: string } }[];\n}\n\n@Injectable()\nexport class OpenAiService {\n  constructor(private configService: ConfigService) {}\n\n  async generateCompletion(systemMessage: string, userMessage: string, temperature: number) {\n    // eslint-disable-next-line\n    const fetcher: Fetch = typeof fetch !== \"undefined\" ? fetch : (require(\"node-fetch\") as Fetch);\n    const response = await fetcher(this.configService.get(\"openai.completionsURL\")!, {\n      method: \"POST\",\n      headers: {\n        Authorization: `Bearer ${this.configService.get(\"openai.APIKey\")!}`,\n        \"Content-type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        model: this.configService.get(\"openai.modelName\"),\n        messages: [\n          {\n            role: \"system\",\n            content: systemMessage,\n          },\n          {\n            role: \"user\",\n            content: userMessage,\n          },\n        ],\n        temperature: temperature / 10,\n        n: 1,\n      }),\n    });\n\n    if (response.ok) {\n      const data = (await response.json()) as ChatResponse;\n\n      return data.choices[0]?.message.content;\n    }\n\n    throw new Error(response.statusText);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/CodeExplanationController.html":{"url":"controllers/CodeExplanationController.html","title":"controller - CodeExplanationController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  CodeExplanationController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/pull-requests/code-explanation.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                prs\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                generatePRDescription\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        generatePRDescription\n                        \n                    \n                \n            \n            \n                \n                    \n                    generatePRDescription(generateCodeExplanationDto: GenerateCodeExplanationDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/explanation/generate')@ApiOperation({operationId: 'generateCodeExplanation', summary: 'Generates an explanation for the provided code'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiBadRequestResponse({description: 'Invalid request'})@ApiBody({type: GenerateCodeExplanationDto})\n                \n            \n\n            \n                \n                    Defined in src/pull-requests/code-explanation.controller.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    generateCodeExplanationDto\n                                    \n                                                GenerateCodeExplanationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { BadRequestException, Body, Controller, Post, UseGuards } from \"@nestjs/common\";\nimport { ApiOperation, ApiBearerAuth, ApiBadRequestResponse, ApiBody, ApiTags } from \"@nestjs/swagger\";\n\nimport { SupabaseGuard } from \"../auth/supabase.guard\";\nimport { GenerateCodeExplanationDto } from \"./dtos/create-code-explanation.dto\";\nimport { CodeExplanationService } from \"./code-explanation.service\";\n\n@Controller(\"prs\")\n@ApiTags(\"Pull Requests service\")\nexport class CodeExplanationController {\n  constructor(private codeExplanationService: CodeExplanationService) {}\n\n  @Post(\"/explanation/generate\")\n  @ApiOperation({\n    operationId: \"generateCodeExplanation\",\n    summary: \"Generates an explanation for the provided code\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  @ApiBody({ type: GenerateCodeExplanationDto })\n  async generatePRDescription(@Body() generateCodeExplanationDto: GenerateCodeExplanationDto) {\n    const suggestion = await this.codeExplanationService.generateExplanation(generateCodeExplanationDto);\n\n    if (!suggestion) {\n      throw new BadRequestException();\n    }\n\n    return { suggestion };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CodeExplanationService.html":{"url":"injectables/CodeExplanationService.html","title":"injectable - CodeExplanationService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CodeExplanationService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/pull-requests/code-explanation.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                generateExplanation\n                            \n                            \n                                    Private\n                                generatePrompt\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(openAiService: OpenAiService)\n                    \n                \n                        \n                            \n                                Defined in src/pull-requests/code-explanation.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        openAiService\n                                                  \n                                                        \n                                                                        OpenAiService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        generateExplanation\n                        \n                    \n                \n            \n            \n                \n                    \n                    generateExplanation(options: GenerateCodeExplanationDto)\n                \n            \n\n\n            \n                \n                    Defined in src/pull-requests/code-explanation.service.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                GenerateCodeExplanationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        generatePrompt\n                        \n                    \n                \n            \n            \n                \n                    \n                    generatePrompt(language: string, maxLength: number)\n                \n            \n\n\n            \n                \n                    Defined in src/pull-requests/code-explanation.service.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    language\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    maxLength\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\n\nimport { OpenAiService } from \"../open-ai/open-ai.service\";\nimport { GenerateCodeExplanationDto } from \"./dtos/create-code-explanation.dto\";\n\n@Injectable()\nexport class CodeExplanationService {\n  constructor(private openAiService: OpenAiService) {}\n\n  private generatePrompt(language: string, maxLength: number) {\n    return [\n      `Generate an explanation for the given code snippet written in ${language} with the specifications mentioned below`,\n      `The explanation must be a maximum of ${maxLength} characters.`,\n    ].join(\"\\n\");\n  }\n\n  async generateExplanation(options: GenerateCodeExplanationDto) {\n    const content = `Code: ${options.code}\\n`;\n\n    try {\n      const completion = await this.openAiService.generateCompletion(\n        this.generatePrompt(options.language, options.descriptionLength),\n        content,\n        options.temperature\n      );\n\n      return completion;\n    } catch (error: unknown) {\n      if (error instanceof Error) {\n        console.error(\"OpenAI error: \", error.message);\n      }\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/CodeRefactorSuggestionController.html":{"url":"controllers/CodeRefactorSuggestionController.html","title":"controller - CodeRefactorSuggestionController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  CodeRefactorSuggestionController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/pull-requests/code-refactor-suggestion.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                prs\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                generatePRDescription\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        generatePRDescription\n                        \n                    \n                \n            \n            \n                \n                    \n                    generatePRDescription(generateCodeRefactorSuggestionDto: GenerateCodeRefactorSuggestionDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/suggestion/generate')@ApiOperation({operationId: 'generateCodeRefactor', summary: 'Generates a refactor suggestion based on the provided code'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiBadRequestResponse({description: 'Invalid request'})@ApiBody({type: GenerateCodeRefactorSuggestionDto})\n                \n            \n\n            \n                \n                    Defined in src/pull-requests/code-refactor-suggestion.controller.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    generateCodeRefactorSuggestionDto\n                                    \n                                                GenerateCodeRefactorSuggestionDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { BadRequestException, Body, Controller, Post, UseGuards } from \"@nestjs/common\";\nimport { ApiOperation, ApiBearerAuth, ApiBadRequestResponse, ApiBody, ApiTags } from \"@nestjs/swagger\";\n\nimport { SupabaseGuard } from \"../auth/supabase.guard\";\nimport { GenerateCodeRefactorSuggestionDto } from \"./dtos/create-code-refactor-suggestion.dto\";\nimport { CodeRefactorSuggestionService } from \"./code-refactor-suggestion.service\";\n\n@Controller(\"prs\")\n@ApiTags(\"Pull Requests service\")\nexport class CodeRefactorSuggestionController {\n  constructor(private codeRefactorSuggestionService: CodeRefactorSuggestionService) {}\n\n  @Post(\"/suggestion/generate\")\n  @ApiOperation({\n    operationId: \"generateCodeRefactor\",\n    summary: \"Generates a refactor suggestion based on the provided code\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  @ApiBody({ type: GenerateCodeRefactorSuggestionDto })\n  async generatePRDescription(@Body() generateCodeRefactorSuggestionDto: GenerateCodeRefactorSuggestionDto) {\n    const suggestion = await this.codeRefactorSuggestionService.generateDescription(generateCodeRefactorSuggestionDto);\n\n    if (!suggestion) {\n      throw new BadRequestException();\n    }\n\n    return { suggestion };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CodeRefactorSuggestionService.html":{"url":"injectables/CodeRefactorSuggestionService.html","title":"injectable - CodeRefactorSuggestionService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CodeRefactorSuggestionService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/pull-requests/code-refactor-suggestion.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                generateDescription\n                            \n                            \n                                    Private\n                                generatePrompt\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(openAiService: OpenAiService)\n                    \n                \n                        \n                            \n                                Defined in src/pull-requests/code-refactor-suggestion.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        openAiService\n                                                  \n                                                        \n                                                                        OpenAiService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        generateDescription\n                        \n                    \n                \n            \n            \n                \n                    \n                    generateDescription(options: GenerateCodeRefactorSuggestionDto)\n                \n            \n\n\n            \n                \n                    Defined in src/pull-requests/code-refactor-suggestion.service.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                GenerateCodeRefactorSuggestionDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        generatePrompt\n                        \n                    \n                \n            \n            \n                \n                    \n                    generatePrompt(language: string, maxLength: number)\n                \n            \n\n\n            \n                \n                    Defined in src/pull-requests/code-refactor-suggestion.service.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    language\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    maxLength\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\n\nimport { OpenAiService } from \"../open-ai/open-ai.service\";\nimport { GenerateCodeRefactorSuggestionDto } from \"./dtos/create-code-refactor-suggestion.dto\";\n\n@Injectable()\nexport class CodeRefactorSuggestionService {\n  constructor(private openAiService: OpenAiService) {}\n\n  private generatePrompt(language: string, maxLength: number) {\n    return [\n      `Generate a code refactor suggestion for a given code snippet written in ${language} with the specifications mentioned below`,\n      `The code snippet must be a maximum of ${maxLength} characters.`,\n      'Exclude anything unnecessary such as translation and instructions. The code snippet you suggest should start with \"```suggestion\" and end with ``` to create a valid GitHub suggestion codeblock. All non-code text or description should be outside of the codeblock.',\n    ].join(\"\\n\");\n  }\n\n  async generateDescription(options: GenerateCodeRefactorSuggestionDto) {\n    const content = `Code: ${options.code}\\n`;\n\n    try {\n      const completion = await this.openAiService.generateCompletion(\n        this.generatePrompt(options.language, options.descriptionLength),\n        content,\n        options.temperature\n      );\n\n      return completion;\n    } catch (error: unknown) {\n      if (error instanceof Error) {\n        console.error(\"OpenAI error: \", error.message);\n      }\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/CodeTestSuggestionController.html":{"url":"controllers/CodeTestSuggestionController.html","title":"controller - CodeTestSuggestionController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  CodeTestSuggestionController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/pull-requests/code-test.suggestion.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                prs\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                generatePRDescription\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        generatePRDescription\n                        \n                    \n                \n            \n            \n                \n                    \n                    generatePRDescription(generateCodeTestSuggestionDto: GenerateCodeTestSuggestionDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/test/generate')@ApiOperation({operationId: 'generateCodeTest', summary: 'Generates a test for the provided code'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiBadRequestResponse({description: 'Invalid request'})@ApiBody({type: GenerateCodeTestSuggestionDto})\n                \n            \n\n            \n                \n                    Defined in src/pull-requests/code-test.suggestion.controller.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    generateCodeTestSuggestionDto\n                                    \n                                                GenerateCodeTestSuggestionDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { BadRequestException, Body, Controller, Post, UseGuards } from \"@nestjs/common\";\nimport { ApiOperation, ApiBearerAuth, ApiBadRequestResponse, ApiBody, ApiTags } from \"@nestjs/swagger\";\n\nimport { SupabaseGuard } from \"../auth/supabase.guard\";\nimport { GenerateCodeTestSuggestionDto } from \"./dtos/create-code-test-suggestion.dto\";\nimport { CodeTestSuggestionService } from \"./code-test-suggestion.service\";\n\n@Controller(\"prs\")\n@ApiTags(\"Pull Requests service\")\nexport class CodeTestSuggestionController {\n  constructor(private codeTestSuggestionService: CodeTestSuggestionService) {}\n\n  @Post(\"/test/generate\")\n  @ApiOperation({\n    operationId: \"generateCodeTest\",\n    summary: \"Generates a test for the provided code\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  @ApiBody({ type: GenerateCodeTestSuggestionDto })\n  async generatePRDescription(@Body() generateCodeTestSuggestionDto: GenerateCodeTestSuggestionDto) {\n    const suggestion = await this.codeTestSuggestionService.generateTestSuggestion(generateCodeTestSuggestionDto);\n\n    if (!suggestion) {\n      throw new BadRequestException();\n    }\n\n    return { suggestion };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CodeTestSuggestionService.html":{"url":"injectables/CodeTestSuggestionService.html","title":"injectable - CodeTestSuggestionService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CodeTestSuggestionService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/pull-requests/code-test-suggestion.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                generatePrompt\n                            \n                            \n                                    Async\n                                generateTestSuggestion\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(openAiService: OpenAiService)\n                    \n                \n                        \n                            \n                                Defined in src/pull-requests/code-test-suggestion.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        openAiService\n                                                  \n                                                        \n                                                                        OpenAiService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        generatePrompt\n                        \n                    \n                \n            \n            \n                \n                    \n                    generatePrompt(maxLength: number)\n                \n            \n\n\n            \n                \n                    Defined in src/pull-requests/code-test-suggestion.service.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    maxLength\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        generateTestSuggestion\n                        \n                    \n                \n            \n            \n                \n                    \n                    generateTestSuggestion(options: GenerateCodeTestSuggestionDto)\n                \n            \n\n\n            \n                \n                    Defined in src/pull-requests/code-test-suggestion.service.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                GenerateCodeTestSuggestionDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\n\nimport { OpenAiService } from \"../open-ai/open-ai.service\";\nimport { GenerateCodeTestSuggestionDto } from \"./dtos/create-code-test-suggestion.dto\";\n\n@Injectable()\nexport class CodeTestSuggestionService {\n  constructor(private openAiService: OpenAiService) {}\n\n  private generatePrompt(maxLength: number) {\n    return [\n      `Generate a test for a given code snippet with the specifications mentioned below`,\n      `The code snippet must be a maximum of ${maxLength} characters.`,\n      'Exclude anything unnecessary such as translation and instructions. The code snippet you suggest should start with \"```suggestion\" and end with ``` to create a valid GitHub suggestion codeblock. All non-code text or description should be outside of the codeblock.',\n    ].join(\"\\n\");\n  }\n\n  async generateTestSuggestion(options: GenerateCodeTestSuggestionDto) {\n    const content = `Code: ${options.code}\\n`;\n\n    try {\n      const completion = this.openAiService.generateCompletion(\n        this.generatePrompt(options.descriptionLength),\n        content,\n        options.temperature\n      );\n\n      return completion;\n    } catch (error: unknown) {\n      if (error instanceof Error) {\n        console.error(\"OpenAI error: \", error.message);\n      }\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CollaboratorsDto.html":{"url":"classes/CollaboratorsDto.html","title":"class - CollaboratorsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CollaboratorsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user-lists/dtos/collaborators.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                contributors\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        contributors\n                        \n                    \n                \n            \n                \n                    \n                        Type :     number[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'An array of contributor user IDs', isArray: true, type: 'integer', example: undefined})@Type(undefined)@IsArray()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-lists/dtos/collaborators.dto.ts:14\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { Type } from \"class-transformer\";\nimport { IsArray } from \"class-validator\";\n\nexport class CollaboratorsDto {\n  @ApiProperty({\n    description: \"An array of contributor user IDs\",\n    isArray: true,\n    type: \"integer\",\n    example: [42211, 81233],\n  })\n  @Type(() => Number)\n  @IsArray()\n  contributors: number[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CommitAuthorDto.html":{"url":"classes/CommitAuthorDto.html","title":"class - CommitAuthorDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CommitAuthorDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/pizza/dtos/commit_authors.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                author_email\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        author_email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Public Commit Author Email', type: String, example: 'hello@opensauced.pizza'})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pizza/dtos/commit_authors.dto.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsString } from \"class-validator\";\n\nexport class CommitAuthorDto {\n  @ApiProperty({\n    description: \"Public Commit Author Email\",\n    type: String,\n    example: \"hello@opensauced.pizza\",\n  })\n  @IsString()\n  author_email: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CommitAuthorsService.html":{"url":"injectables/CommitAuthorsService.html","title":"injectable - CommitAuthorsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CommitAuthorsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/pizza/commit-authors.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                baseQueryBuilder\n                            \n                            \n                                    Async\n                                findAllCommitAuthors\n                            \n                            \n                                    Async\n                                findCommitAuthorById\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(commitAuthorsRepository: Repository, pagerService: PagerService)\n                    \n                \n                        \n                            \n                                Defined in src/pizza/commit-authors.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        commitAuthorsRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        pagerService\n                                                  \n                                                        \n                                                                        PagerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        baseQueryBuilder\n                        \n                    \n                \n            \n            \n                \nbaseQueryBuilder()\n                \n            \n\n\n            \n                \n                    Defined in src/pizza/commit-authors.service.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllCommitAuthors\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllCommitAuthors(pageOptionsDto: PageOptionsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/pizza/commit-authors.service.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findCommitAuthorById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findCommitAuthorById(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/pizza/commit-authors.service.ts:35\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from \"@nestjs/common\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { Repository } from \"typeorm\";\n\nimport { PageOptionsDto } from \"../common/dtos/page-options.dto\";\nimport { PageDto } from \"../common/dtos/page.dto\";\nimport { PagerService } from \"../common/services/pager.service\";\nimport { DbCommitAuthors } from \"./entities/commit_authors.entity\";\n\n@Injectable()\nexport class CommitAuthorsService {\n  constructor(\n    @InjectRepository(DbCommitAuthors, \"ApiConnection\")\n    private commitAuthorsRepository: Repository,\n    private pagerService: PagerService\n  ) {}\n\n  baseQueryBuilder() {\n    const builder = this.commitAuthorsRepository.createQueryBuilder(\"commit_authors\");\n\n    return builder;\n  }\n\n  async findAllCommitAuthors(pageOptionsDto: PageOptionsDto): Promise> {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder.offset(pageOptionsDto.skip).limit(pageOptionsDto.limit);\n\n    return this.pagerService.applyPagination({\n      pageOptionsDto,\n      queryBuilder,\n    });\n  }\n\n  async findCommitAuthorById(id: number): Promise {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder.where(\"id = :id\", { id });\n\n    const item = await queryBuilder.getOne();\n\n    if (!item) {\n      throw new NotFoundException();\n    }\n\n    return item;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CommitsDto.html":{"url":"classes/CommitsDto.html","title":"class - CommitsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CommitsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/pizza/dtos/commits.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                commit_hash\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        commit_hash\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Hash for a specific commit', type: String, example: '5e7c6c7af42d38c57f363c564c58007da448c443'})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pizza/dtos/commits.dto.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsString } from \"class-validator\";\n\nexport class CommitsDto {\n  @ApiProperty({\n    description: \"Hash for a specific commit\",\n    type: String,\n    example: \"5e7c6c7af42d38c57f363c564c58007da448c443\",\n  })\n  @IsString()\n  commit_hash: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CommitsService.html":{"url":"injectables/CommitsService.html","title":"injectable - CommitsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CommitsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/pizza/commits.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                baseQueryBuilder\n                            \n                            \n                                    Async\n                                findAllCommitsByBakedRepoId\n                            \n                            \n                                    Async\n                                findAllCommitsByCommitAuthorId\n                            \n                            \n                                    Async\n                                findCommitById\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(commitsRepository: Repository, pagerService: PagerService)\n                    \n                \n                        \n                            \n                                Defined in src/pizza/commits.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        commitsRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        pagerService\n                                                  \n                                                        \n                                                                        PagerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        baseQueryBuilder\n                        \n                    \n                \n            \n            \n                \nbaseQueryBuilder()\n                \n            \n\n\n            \n                \n                    Defined in src/pizza/commits.service.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllCommitsByBakedRepoId\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllCommitsByBakedRepoId(pageOptionsDto: PageOptionsDto, id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/pizza/commits.service.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllCommitsByCommitAuthorId\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllCommitsByCommitAuthorId(pageOptionsDto: PageOptionsDto, id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/pizza/commits.service.ts:37\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findCommitById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findCommitById(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/pizza/commits.service.ts:50\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from \"@nestjs/common\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { Repository } from \"typeorm\";\n\nimport { PageOptionsDto } from \"../common/dtos/page-options.dto\";\nimport { PageDto } from \"../common/dtos/page.dto\";\nimport { PagerService } from \"../common/services/pager.service\";\nimport { DbCommits } from \"./entities/commits.entity\";\n\n@Injectable()\nexport class CommitsService {\n  constructor(\n    @InjectRepository(DbCommits, \"ApiConnection\")\n    private commitsRepository: Repository,\n    private pagerService: PagerService\n  ) {}\n\n  baseQueryBuilder() {\n    const builder = this.commitsRepository.createQueryBuilder(\"commits\");\n\n    return builder;\n  }\n\n  async findAllCommitsByBakedRepoId(pageOptionsDto: PageOptionsDto, id: number): Promise> {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder.where(\"baked_repo_id = :id\", { id });\n\n    queryBuilder.offset(pageOptionsDto.skip).limit(pageOptionsDto.limit);\n\n    return this.pagerService.applyPagination({\n      pageOptionsDto,\n      queryBuilder,\n    });\n  }\n\n  async findAllCommitsByCommitAuthorId(pageOptionsDto: PageOptionsDto, id: number): Promise> {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder.where(\"commit_author_id = :id\", { id });\n\n    queryBuilder.offset(pageOptionsDto.skip).limit(pageOptionsDto.limit);\n\n    return this.pagerService.applyPagination({\n      pageOptionsDto,\n      queryBuilder,\n    });\n  }\n\n  async findCommitById(id: number): Promise {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder.where(\"id = :id\", { id });\n\n    const item = await queryBuilder.getOne();\n\n    if (!item) {\n      throw new NotFoundException();\n    }\n\n    return item;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ContributionModule.html":{"url":"modules/ContributionModule.html","title":"module - ContributionModule","body":"\n                   \n\n\n\n\n    Modules\n    ContributionModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_ContributionModule\n\n\n\ncluster_ContributionModule_imports\n\n\n\ncluster_ContributionModule_providers\n\n\n\ncluster_ContributionModule_exports\n\n\n\n\nRepoModule\n\nRepoModule\n\n\n\nContributionModule\n\nContributionModule\n\nContributionModule -->\n\nRepoModule->ContributionModule\n\n\n\n\n\nContributionService \n\nContributionService \n\nContributionService  -->\n\nContributionModule->ContributionService \n\n\n\n\n\nContributionService\n\nContributionService\n\nContributionModule -->\n\nContributionService->ContributionModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/contribution/contribution.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ContributionService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            RepoContributionsController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            RepoModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            ContributionService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\n\nimport { DbRepo } from \"../repo/entities/repo.entity\";\nimport { RepoModule } from \"../repo/repo.module\";\nimport { DbUser } from \"../user/user.entity\";\nimport { DbPullRequest } from \"../pull-requests/entities/pull-request.entity\";\nimport { DbContribution } from \"./contribution.entity\";\nimport { ContributionService } from \"./contribution.service\";\nimport { RepoContributionsController } from \"./repo-contributions.controller\";\n\n@Module({\n  imports: [TypeOrmModule.forFeature([DbRepo, DbContribution, DbUser, DbPullRequest], \"ApiConnection\"), RepoModule],\n  controllers: [RepoContributionsController],\n  providers: [ContributionService],\n  exports: [ContributionService],\n})\nexport class ContributionModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ContributionPageMetaDto.html":{"url":"classes/ContributionPageMetaDto.html","title":"class - ContributionPageMetaDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ContributionPageMetaDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user-lists/dtos/contributions-pagemeta.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PageMetaDto\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                allContributionsCount\n                            \n                            \n                                    Readonly\n                                hasNextPage\n                            \n                            \n                                    Readonly\n                                hasPreviousPage\n                            \n                            \n                                    Readonly\n                                itemCount\n                            \n                            \n                                    Readonly\n                                limit\n                            \n                            \n                                    Readonly\n                                page\n                            \n                            \n                                    Readonly\n                                pageCount\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(undefined: PageMetaParameters, allContributionsCount: number)\n                    \n                \n                        \n                            \n                                Defined in src/user-lists/dtos/contributions-pagemeta.dto.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                  \n                                                        \n                                                                        PageMetaParameters\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        allContributionsCount\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        allContributionsCount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The number of all contributions', example: 100, type: 'integer'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-lists/dtos/contributions-pagemeta.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        hasNextPage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Flag indicating if there is a next page', example: true})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageMetaDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageMetaDto:43\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        hasPreviousPage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Flag indicating if there is a previous page', example: false})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageMetaDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageMetaDto:37\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        itemCount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The number of items in the collection', example: 100, type: 'integer'})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageMetaDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageMetaDto:24\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The number of items per page', example: 10, type: 'integer'})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageMetaDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageMetaDto:17\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The current page', example: 1, type: 'integer'})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageMetaDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageMetaDto:10\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        pageCount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The number of pages in the collection', example: 10, type: 'integer'})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageMetaDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageMetaDto:31\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { PageMetaParameters } from \"../../common/dtos/page-meta-parameters.dto\";\nimport { PageMetaDto } from \"../../common/dtos/page-meta.dto\";\n\nexport class ContributionPageMetaDto extends PageMetaDto {\n  @ApiProperty({\n    description: \"The number of all contributions\",\n    example: 100,\n    type: \"integer\",\n  })\n  readonly allContributionsCount: number;\n\n  constructor({ pageOptionsDto, itemCount }: PageMetaParameters, allContributionsCount: number) {\n    super({ pageOptionsDto, itemCount });\n\n    this.allContributionsCount = allContributionsCount;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ContributionPageOptionsDto.html":{"url":"classes/ContributionPageOptionsDto.html","title":"class - ContributionPageOptionsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ContributionPageOptionsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/contribution/dtos/contribution-page-options.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PageOptionsDto\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                    Optional\n                                orderBy\n                            \n                            \n                                    Readonly\n                                    Optional\n                                limit\n                            \n                            \n                                    Readonly\n                                    Optional\n                                orderDirection\n                            \n                            \n                                    Readonly\n                                    Optional\n                                page\n                            \n                            \n                                    Readonly\n                                    Optional\n                                prev_days_start_date\n                            \n                            \n                                    Readonly\n                                    Optional\n                                range\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        orderBy\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ContributionOrderFieldsEnum\n\n                    \n                \n                \n                    \n                        Default value : ContributionOrderFieldsEnum.count\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: ContributionOrderFieldsEnum, enumName: 'RepoOrderFieldsEnum', default: undefined})@IsEnum(ContributionOrderFieldsEnum)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/contribution/dtos/contribution-page-options.dto.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 50\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, maximum: 1000, default: 10, type: 'integer'})@Type(undefined)@IsInt()@Min(1)@Max(10000)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:30\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        orderDirection\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OrderDirectionEnum\n\n                    \n                \n                \n                    \n                        Default value : OrderDirectionEnum.DESC\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: OrderDirectionEnum, enumName: 'OrderDirectionEnum', default: undefined})@IsEnum(OrderDirectionEnum)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:35\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, default: 1, type: 'integer'})@Type(undefined)@IsInt()@Min(1)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:17\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        prev_days_start_date\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 0\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Number of days in the past to start range block', default: 0, type: 'integer'})@Type(undefined)@IsIn(['0', '7', '30', '90'])@IsInt()@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:57\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        range\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 30\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Range in days', default: 30, type: 'integer'})@Type(undefined)@IsIn(['7', '30', '90'])@IsInt()@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:46\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiPropertyOptional } from \"@nestjs/swagger\";\nimport { IsEnum, IsOptional } from \"class-validator\";\nimport { PageOptionsDto } from \"../../common/dtos/page-options.dto\";\n\nexport enum ContributionOrderFieldsEnum {\n  count = \"count\",\n  last_merged_at = \"last_merged_at\",\n  created_at = \"created_at\",\n  updated_at = \"updated_at\",\n  contributor = \"contributor\",\n}\n\nexport class ContributionPageOptionsDto extends PageOptionsDto {\n  @ApiPropertyOptional({\n    enum: ContributionOrderFieldsEnum,\n    enumName: \"RepoOrderFieldsEnum\",\n    default: ContributionOrderFieldsEnum.count,\n  })\n  @IsEnum(ContributionOrderFieldsEnum)\n  @IsOptional()\n  readonly orderBy?: ContributionOrderFieldsEnum = ContributionOrderFieldsEnum.count;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ContributionService.html":{"url":"injectables/ContributionService.html","title":"injectable - ContributionService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ContributionService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/contribution/contribution.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findAllByRepoId\n                            \n                            \n                                    Async\n                                findAllByUserLogin\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(contributionRepository: Repository, userRepository: Repository, pullRequestRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/contribution/contribution.service.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        contributionRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        pullRequestRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll(pageOptionsDto: ContributionPageOptionsDto, repoId?: number)\n                \n            \n\n\n            \n                \n                    Defined in src/contribution/contribution.service.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                ContributionPageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    repoId\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllByRepoId\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllByRepoId(repoId: number, range: number, prev_days_start_date: number)\n                \n            \n\n\n            \n                \n                    Defined in src/contribution/contribution.service.ts:91\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    repoId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    range\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    prev_days_start_date\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllByUserLogin\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllByUserLogin(repoId: number, login: string, range: number, prev_days_start_date: number)\n                \n            \n\n\n            \n                \n                    Defined in src/contribution/contribution.service.ts:47\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    repoId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    login\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    range\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    prev_days_start_date\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from \"@nestjs/common\";\nimport { Repository } from \"typeorm\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { DbPullRequest } from \"../pull-requests/entities/pull-request.entity\";\nimport { GetPrevDateISOString } from \"../common/util/datetimes\";\nimport { PageDto } from \"../common/dtos/page.dto\";\nimport { OrderDirectionEnum } from \"../common/constants/order-direction.constant\";\nimport { PageMetaDto } from \"../common/dtos/page-meta.dto\";\nimport { DbUser } from \"../user/user.entity\";\nimport { DbContribution } from \"./contribution.entity\";\nimport { ContributionOrderFieldsEnum, ContributionPageOptionsDto } from \"./dtos/contribution-page-options.dto\";\nimport { DbRepoLoginContributions } from \"./entities/repo-user-contributions.entity\";\n\n@Injectable()\nexport class ContributionService {\n  constructor(\n    @InjectRepository(DbContribution, \"ApiConnection\")\n    private contributionRepository: Repository,\n    @InjectRepository(DbUser, \"ApiConnection\")\n    private userRepository: Repository,\n    @InjectRepository(DbPullRequest, \"ApiConnection\")\n    private pullRequestRepository: Repository\n  ) {}\n\n  async findAll(pageOptionsDto: ContributionPageOptionsDto, repoId?: number): Promise> {\n    const queryBuilder = this.contributionRepository.createQueryBuilder(\"contribution\");\n    const orderField = pageOptionsDto.orderBy ?? ContributionOrderFieldsEnum.count;\n\n    if (repoId) {\n      queryBuilder.where(\"contribution.repo_id = :repoId\", { repoId });\n    }\n\n    queryBuilder\n      .addOrderBy(`\"${orderField}\"`, pageOptionsDto.orderDirection)\n      .addOrderBy(`\"contribution\".\"created_at\"`, OrderDirectionEnum.DESC)\n      .offset(pageOptionsDto.skip)\n      .limit(pageOptionsDto.limit);\n\n    const itemCount = await queryBuilder.getCount();\n    const entities = await queryBuilder.getMany();\n\n    const pageMetaDto = new PageMetaDto({ itemCount, pageOptionsDto });\n\n    return new PageDto(entities, pageMetaDto);\n  }\n\n  async findAllByUserLogin(\n    repoId: number,\n    login: string,\n    range: number,\n    prev_days_start_date: number\n  ): Promise {\n    const queryBuilder = this.userRepository.createQueryBuilder(\"user\");\n\n    const startDate = GetPrevDateISOString(prev_days_start_date);\n\n    queryBuilder\n      .select(\"login\")\n      .where(\"login = :login\", { login })\n      .addSelect(\n        `(\n          SELECT COALESCE(SUM(\"pull_requests\".\"commits\"), 0)\n          FROM \"pull_requests\"\n          WHERE \"pull_requests\".\"author_login\" = \"login\"\n            AND \"pull_requests\".\"repo_id\" = ${repoId}\n            AND '${startDate}'::TIMESTAMP >= \"pull_requests\".\"updated_at\"\n            AND '${startDate}'::TIMESTAMP - INTERVAL '${range} days'  {\n    const startDate = GetPrevDateISOString(prev_days_start_date);\n\n    const cteBuilder = this.pullRequestRepository\n      .createQueryBuilder(\"pull_requests\")\n      .select(\"pull_requests.author_login\", \"login\")\n      .addSelect(\"COALESCE(SUM(pull_requests.commits), 0)::INTEGER\", \"commits\")\n      .addSelect(\"COUNT(pull_requests.id)::INTEGER\", \"prs_created\")\n      .leftJoin(\"users\", \"users\", \"pull_requests.author_login = users.login\")\n      .where(`pull_requests.repo_id = ${repoId}`)\n      .andWhere(`'${startDate}'::TIMESTAMP >= \"pull_requests\".\"updated_at\"`)\n      .andWhere(`'${startDate}'::TIMESTAMP - INTERVAL '${range} days' \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ContributionsByProjectDto.html":{"url":"classes/ContributionsByProjectDto.html","title":"class - ContributionsByProjectDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ContributionsByProjectDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user-lists/dtos/contributions-by-project.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                    Optional\n                                range\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        range\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 30\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Range in days', default: 30, type: 'integer'})@Type(undefined)@IsIn(['7', '30', '90'])@IsInt()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-lists/dtos/contributions-by-project.dto.ts:15\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiPropertyOptional } from \"@nestjs/swagger\";\nimport { Type } from \"class-transformer\";\nimport { IsIn, IsInt, IsOptional } from \"class-validator\";\n\nexport class ContributionsByProjectDto {\n  @ApiPropertyOptional({\n    description: \"Range in days\",\n    default: 30,\n    type: \"integer\",\n  })\n  @Type(() => Number)\n  @IsIn([7, 30, 90])\n  @IsInt()\n  @IsOptional()\n  readonly range?: number = 30;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ContributionsPageDto.html":{"url":"classes/ContributionsPageDto.html","title":"class - ContributionsPageDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ContributionsPageDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user-lists/dtos/contributions-page.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                data\n                            \n                            \n                                    Readonly\n                                meta\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(data: T[], meta: PageMetaDto)\n                    \n                \n                        \n                            \n                                Defined in src/user-lists/dtos/contributions-page.dto.ts:16\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        data\n                                                  \n                                                        \n                                                                    T[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        meta\n                                                  \n                                                        \n                                                                        PageMetaDto\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        data\n                        \n                    \n                \n            \n                \n                    \n                        Type :     T[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsArray()@ApiProperty({isArray: true})@ValidateNested({each: true})@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-lists/dtos/contributions-page.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        meta\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PageMetaDto\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: () => PageMetaDto})@ValidateNested()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-lists/dtos/contributions-page.dto.ts:16\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsArray, ValidateNested } from \"class-validator\";\nimport { Type } from \"class-transformer\";\nimport { PageMetaDto } from \"../../common/dtos/page-meta.dto\";\n\nexport class ContributionsPageDto {\n  @IsArray()\n  @ApiProperty({ isArray: true })\n  @ValidateNested({ each: true })\n  @Type(() => Array)\n  readonly data: T[];\n\n  @ApiProperty({ type: () => PageMetaDto })\n  @ValidateNested()\n  @Type(() => PageMetaDto)\n  readonly meta: PageMetaDto;\n\n  constructor(data: T[], meta: PageMetaDto) {\n    this.data = data;\n    this.meta = meta;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ContributionsTimeframeDto.html":{"url":"classes/ContributionsTimeframeDto.html","title":"class - ContributionsTimeframeDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ContributionsTimeframeDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user-lists/dtos/contributions-timeframe.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                contributorType\n                            \n                            \n                                    Readonly\n                                    Optional\n                                range\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        contributorType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserListContributorStatsTypeEnum\n\n                    \n                \n                \n                    \n                        Default value : UserListContributorStatsTypeEnum.all\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: UserListContributorStatsTypeEnum, enumName: 'UserListContributorStatsTypeEnum', default: undefined})@IsEnum(UserListContributorStatsTypeEnum)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-lists/dtos/contributions-timeframe.dto.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        range\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 30\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Range in days', default: 30, type: 'integer'})@Type(undefined)@IsIn(['7', '30', '90'])@IsInt()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-lists/dtos/contributions-timeframe.dto.ts:17\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEnum, IsIn, IsInt, IsOptional } from \"class-validator\";\n\nimport { ApiPropertyOptional } from \"@nestjs/swagger\";\nimport { Type } from \"class-transformer\";\nimport { UserListContributorStatsTypeEnum } from \"./most-active-contributors.dto\";\n\nexport class ContributionsTimeframeDto {\n  @ApiPropertyOptional({\n    description: \"Range in days\",\n    default: 30,\n    type: \"integer\",\n  })\n  @Type(() => Number)\n  @IsIn([7, 30, 90])\n  @IsInt()\n  @IsOptional()\n  readonly range?: number = 30;\n\n  @ApiPropertyOptional({\n    enum: UserListContributorStatsTypeEnum,\n    enumName: \"UserListContributorStatsTypeEnum\",\n    default: UserListContributorStatsTypeEnum.all,\n  })\n  @IsEnum(UserListContributorStatsTypeEnum)\n  @IsOptional()\n  contributorType?: UserListContributorStatsTypeEnum = UserListContributorStatsTypeEnum.all;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Contributor.html":{"url":"classes/Contributor.html","title":"class - Contributor","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Contributor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user-lists/dtos/create-user-list.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                id\n                            \n                            \n                                login\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/user-lists/dtos/create-user-list.dto.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        login\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/user-lists/dtos/create-user-list.dto.ts:7\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { Type } from \"class-transformer\";\nimport { IsArray, IsBoolean, IsString } from \"class-validator\";\n\nexport class Contributor {\n  id: number;\n  login: string;\n}\n\nexport class CreateUserListDto {\n  @ApiProperty({\n    description: \"List Name\",\n    type: String,\n    example: \"My List\",\n  })\n  @IsString()\n  name: string;\n\n  @ApiProperty({\n    description: \"List Visibility\",\n    type: Boolean,\n    example: false,\n  })\n  @IsBoolean()\n  is_public: boolean;\n\n  @ApiProperty({\n    description: \"An array of contributor objects\",\n    isArray: true,\n    example: [{ id: 12345, login: \"sauceduser\" }],\n  })\n  @IsArray()\n  @Type(() => Contributor)\n  contributors: { id: number; login: string }[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ContributorController.html":{"url":"controllers/ContributorController.html","title":"controller - ContributorController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ContributorController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/contributor/contributor.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                contributors\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                searchAllPullRequestContributors\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        searchAllPullRequestContributors\n                        \n                    \n                \n            \n            \n                \n                    \n                    searchAllPullRequestContributors(pageOptionsDto: PullRequestContributorOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/search')@ApiOperation({operationId: 'searchAllPullRequestContributors', summary: 'Searches contributors from pull requests using filters and paginates them'})@ApiPaginatedResponse(DbPullRequestContributor)@ApiOkResponse({type: DbPullRequestContributor})\n                \n            \n\n            \n                \n                    Defined in src/contributor/contributor.controller.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PullRequestContributorOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Query } from \"@nestjs/common\";\nimport { ApiOperation, ApiOkResponse, ApiTags } from \"@nestjs/swagger\";\n\nimport { ApiPaginatedResponse } from \"../common/decorators/api-paginated-response.decorator\";\nimport { PageDto } from \"../common/dtos/page.dto\";\nimport { PullRequestService } from \"../pull-requests/pull-request.service\";\nimport { DbPullRequestContributor } from \"../pull-requests/dtos/pull-request-contributor.dto\";\nimport { PullRequestContributorOptionsDto } from \"../pull-requests/dtos/pull-request-contributor-options.dto\";\n\n@Controller(\"contributors\")\n@ApiTags(\"Contributors service\")\nexport class ContributorController {\n  constructor(private readonly pullRequestService: PullRequestService) {}\n\n  @Get(\"/search\")\n  @ApiOperation({\n    operationId: \"searchAllPullRequestContributors\",\n    summary: \"Searches contributors from pull requests using filters and paginates them\",\n  })\n  @ApiPaginatedResponse(DbPullRequestContributor)\n  @ApiOkResponse({ type: DbPullRequestContributor })\n  async searchAllPullRequestContributors(\n    @Query() pageOptionsDto: PullRequestContributorOptionsDto\n  ): Promise> {\n    return this.pullRequestService.findAllContributorsWithFilters(pageOptionsDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ContributorInsightsController.html":{"url":"controllers/ContributorInsightsController.html","title":"controller - ContributorInsightsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ContributorInsightsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/contributor/contributor-insights.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                contributors/insights\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                findAllChurnPullRequestContributors\n                            \n                            \n                                    Async\n                                findAllRecentPullRequestContributors\n                            \n                            \n                                    Async\n                                findAllRepeatPullRequestContributors\n                            \n                            \n                                    Async\n                                newPullRequestContributors\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllChurnPullRequestContributors\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllChurnPullRequestContributors(pageOptionsDto: PullRequestContributorInsightsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/churn')@ApiOperation({operationId: 'findAllChurnPullRequestContributors', summary: 'Gets all recent churned contributors for the last 30 days based on repo IDs'})@ApiPaginatedResponse(DbPullRequestContributor)@ApiOkResponse({type: DbPullRequestContributor})\n                \n            \n\n            \n                \n                    Defined in src/contributor/contributor-insights.controller.ts:48\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PullRequestContributorInsightsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllRecentPullRequestContributors\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllRecentPullRequestContributors(pageOptionsDto: PullRequestContributorInsightsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/recent')@ApiOperation({operationId: 'findAllRecentPullRequestContributors', summary: 'Gets all recent contributors for the last 30 days based on repo IDs'})@ApiPaginatedResponse(DbPullRequestContributor)@ApiOkResponse({type: DbPullRequestContributor})\n                \n            \n\n            \n                \n                    Defined in src/contributor/contributor-insights.controller.ts:35\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PullRequestContributorInsightsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllRepeatPullRequestContributors\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllRepeatPullRequestContributors(pageOptionsDto: PullRequestContributorInsightsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/repeat')@ApiOperation({operationId: 'findAllRepeatPullRequestContributors', summary: 'Gets all recent repeat contributors for the last 30 days based on repo IDs'})@ApiPaginatedResponse(DbPullRequestContributor)@ApiOkResponse({type: DbPullRequestContributor})\n                \n            \n\n            \n                \n                    Defined in src/contributor/contributor-insights.controller.ts:61\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PullRequestContributorInsightsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        newPullRequestContributors\n                        \n                    \n                \n            \n            \n                \n                    \n                    newPullRequestContributors(pageOptionsDto: PullRequestContributorInsightsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/new')@ApiOperation({operationId: 'newPullRequestContributors', summary: 'Gets new contributors given a date range for repo IDs'})@ApiPaginatedResponse(DbPullRequestContributor)@ApiOkResponse({type: DbPullRequestContributor})\n                \n            \n\n            \n                \n                    Defined in src/contributor/contributor-insights.controller.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PullRequestContributorInsightsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Query } from \"@nestjs/common\";\nimport { ApiOperation, ApiOkResponse, ApiTags } from \"@nestjs/swagger\";\n\nimport { ApiPaginatedResponse } from \"../common/decorators/api-paginated-response.decorator\";\nimport { PageDto } from \"../common/dtos/page.dto\";\nimport { PullRequestService } from \"../pull-requests/pull-request.service\";\nimport { DbPullRequestContributor } from \"../pull-requests/dtos/pull-request-contributor.dto\";\nimport { PullRequestContributorInsightsDto } from \"../pull-requests/dtos/pull-request-contributor-insights.dto\";\n\n@Controller(\"contributors/insights\")\n@ApiTags(\"Contributors service\")\nexport class ContributorInsightsController {\n  constructor(private readonly pullRequestService: PullRequestService) {}\n\n  @Get(\"/new\")\n  @ApiOperation({\n    operationId: \"newPullRequestContributors\",\n    summary: \"Gets new contributors given a date range for repo IDs\",\n  })\n  @ApiPaginatedResponse(DbPullRequestContributor)\n  @ApiOkResponse({ type: DbPullRequestContributor })\n  async newPullRequestContributors(\n    @Query() pageOptionsDto: PullRequestContributorInsightsDto\n  ): Promise> {\n    return this.pullRequestService.findNewContributorsInTimeRange(pageOptionsDto);\n  }\n\n  @Get(\"/recent\")\n  @ApiOperation({\n    operationId: \"findAllRecentPullRequestContributors\",\n    summary: \"Gets all recent contributors for the last 30 days based on repo IDs\",\n  })\n  @ApiPaginatedResponse(DbPullRequestContributor)\n  @ApiOkResponse({ type: DbPullRequestContributor })\n  async findAllRecentPullRequestContributors(\n    @Query() pageOptionsDto: PullRequestContributorInsightsDto\n  ): Promise> {\n    return this.pullRequestService.findAllRecentContributors(pageOptionsDto);\n  }\n\n  @Get(\"/churn\")\n  @ApiOperation({\n    operationId: \"findAllChurnPullRequestContributors\",\n    summary: \"Gets all recent churned contributors for the last 30 days based on repo IDs\",\n  })\n  @ApiPaginatedResponse(DbPullRequestContributor)\n  @ApiOkResponse({ type: DbPullRequestContributor })\n  async findAllChurnPullRequestContributors(\n    @Query() pageOptionsDto: PullRequestContributorInsightsDto\n  ): Promise> {\n    return this.pullRequestService.findAllChurnContributors(pageOptionsDto);\n  }\n\n  @Get(\"/repeat\")\n  @ApiOperation({\n    operationId: \"findAllRepeatPullRequestContributors\",\n    summary: \"Gets all recent repeat contributors for the last 30 days based on repo IDs\",\n  })\n  @ApiPaginatedResponse(DbPullRequestContributor)\n  @ApiOkResponse({ type: DbPullRequestContributor })\n  async findAllRepeatPullRequestContributors(\n    @Query() pageOptionsDto: PullRequestContributorInsightsDto\n  ): Promise> {\n    return this.pullRequestService.findAllRepeatContributors(pageOptionsDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ContributorModule.html":{"url":"modules/ContributorModule.html","title":"module - ContributorModule","body":"\n                   \n\n\n\n\n    Modules\n    ContributorModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_ContributorModule\n\n\n\ncluster_ContributorModule_imports\n\n\n\n\nPullRequestModule\n\nPullRequestModule\n\n\n\nContributorModule\n\nContributorModule\n\nContributorModule -->\n\nPullRequestModule->ContributorModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/contributor/contributor.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Controllers\n                    \n                        \n                            ContributorController\n                        \n                        \n                            ContributorInsightsController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            PullRequestModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\n\nimport { PullRequestModule } from \"../pull-requests/pull-request.module\";\nimport { DbPullRequest } from \"../pull-requests/entities/pull-request.entity\";\nimport { ContributorController } from \"./contributor.controller\";\nimport { ContributorInsightsController } from \"./contributor-insights.controller\";\n\n@Module({\n  imports: [TypeOrmModule.forFeature([DbPullRequest], \"ApiConnection\"), PullRequestModule],\n  controllers: [ContributorController, ContributorInsightsController],\n})\nexport class ContributorModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ContributorPullRequestsDto.html":{"url":"classes/ContributorPullRequestsDto.html","title":"class - ContributorPullRequestsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ContributorPullRequestsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dtos/contributor-prs.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PageOptionsDto\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                rangeType\n                            \n                            \n                                    Readonly\n                                    Optional\n                                limit\n                            \n                            \n                                    Readonly\n                                    Optional\n                                orderDirection\n                            \n                            \n                                    Readonly\n                                    Optional\n                                page\n                            \n                            \n                                    Readonly\n                                    Optional\n                                prev_days_start_date\n                            \n                            \n                                    Readonly\n                                    Optional\n                                range\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        rangeType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         RangeTypeEnum\n\n                    \n                \n                \n                    \n                        Default value : RangeTypeEnum.Recent\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: RangeTypeEnum, enumName: 'OrderDirectionEnum', default: undefined})@IsEnum(RangeTypeEnum)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/contributor-prs.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 50\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, maximum: 1000, default: 10, type: 'integer'})@Type(undefined)@IsInt()@Min(1)@Max(10000)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:30\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        orderDirection\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OrderDirectionEnum\n\n                    \n                \n                \n                    \n                        Default value : OrderDirectionEnum.DESC\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: OrderDirectionEnum, enumName: 'OrderDirectionEnum', default: undefined})@IsEnum(OrderDirectionEnum)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:35\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, default: 1, type: 'integer'})@Type(undefined)@IsInt()@Min(1)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:17\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        prev_days_start_date\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 0\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Number of days in the past to start range block', default: 0, type: 'integer'})@Type(undefined)@IsIn(['0', '7', '30', '90'])@IsInt()@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:57\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        range\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 30\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Range in days', default: 30, type: 'integer'})@Type(undefined)@IsIn(['7', '30', '90'])@IsInt()@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:46\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiPropertyOptional } from \"@nestjs/swagger\";\nimport { IsEnum, IsOptional } from \"class-validator\";\n\nimport { PageOptionsDto } from \"../../common/dtos/page-options.dto\";\n\nexport enum RangeTypeEnum {\n  All = \"all\",\n  Recent = \"recent\",\n}\n\nexport class ContributorPullRequestsDto extends PageOptionsDto {\n  @ApiPropertyOptional({ enum: RangeTypeEnum, enumName: \"OrderDirectionEnum\", default: RangeTypeEnum.Recent })\n  @IsEnum(RangeTypeEnum)\n  @IsOptional()\n  rangeType?: RangeTypeEnum = RangeTypeEnum.Recent;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CouponModule.html":{"url":"modules/CouponModule.html","title":"module - CouponModule","body":"\n                   \n\n\n\n\n    Modules\n    CouponModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_CouponModule\n\n\n\ncluster_CouponModule_exports\n\n\n\ncluster_CouponModule_providers\n\n\n\n\nCouponService \n\nCouponService \n\n\n\nCouponModule\n\nCouponModule\n\nCouponService  -->\n\nCouponModule->CouponService \n\n\n\n\n\nCouponService\n\nCouponService\n\nCouponModule -->\n\nCouponService->CouponModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/coupon/coupon.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CouponService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            CouponService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\n\nimport { DbCoupon } from \"./entities/coupon.entity\";\nimport { CouponService } from \"./coupon.service\";\n\n@Module({\n  imports: [TypeOrmModule.forFeature([DbCoupon], \"ApiConnection\")],\n  providers: [CouponService],\n  exports: [CouponService],\n})\nexport class CouponModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CouponService.html":{"url":"injectables/CouponService.html","title":"injectable - CouponService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CouponService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/coupon/coupon.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                baseQueryBuilder\n                            \n                            \n                                    Async\n                                deleteCoupon\n                            \n                            \n                                    Async\n                                findCoupon\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(couponRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/coupon/coupon.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        couponRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        baseQueryBuilder\n                        \n                    \n                \n            \n            \n                \nbaseQueryBuilder()\n                \n            \n\n\n            \n                \n                    Defined in src/coupon/coupon.service.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteCoupon\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteCoupon(code: string)\n                \n            \n\n\n            \n                \n                    Defined in src/coupon/coupon.service.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    code\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findCoupon\n                        \n                    \n                \n            \n            \n                \n                    \n                    findCoupon(code: string)\n                \n            \n\n\n            \n                \n                    Defined in src/coupon/coupon.service.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    code\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from \"@nestjs/common\";\nimport { Repository } from \"typeorm\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\n\nimport { DbCoupon } from \"./entities/coupon.entity\";\n\n@Injectable()\nexport class CouponService {\n  constructor(\n    @InjectRepository(DbCoupon, \"ApiConnection\")\n    private couponRepository: Repository\n  ) {}\n\n  baseQueryBuilder() {\n    const builder = this.couponRepository.createQueryBuilder(\"coupons\").withDeleted();\n\n    return builder;\n  }\n\n  async findCoupon(code: string) {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder.where(\"code = :code\", { code }).andWhere(`(expired_at IS NULL OR expired_at > now())`);\n\n    const entity = await queryBuilder.getOne();\n\n    if (!entity) {\n      throw new NotFoundException(\"The coupon does not exist\");\n    }\n\n    return entity;\n  }\n\n  async deleteCoupon(code: string) {\n    return this.couponRepository.softDelete(code);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateBlogSummaryDto.html":{"url":"classes/CreateBlogSummaryDto.html","title":"class - CreateBlogSummaryDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateBlogSummaryDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/blogs/dtos/create-blog-summary.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                blogMarkdown\n                            \n                            \n                                blogTitle\n                            \n                            \n                                language\n                            \n                            \n                                summaryLength\n                            \n                            \n                                temperature\n                            \n                            \n                                tone\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        blogMarkdown\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Blog Markdown', type: String})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/blogs/dtos/create-blog-summary.dto.ts:56\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        blogTitle\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Blog Title', type: String})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/blogs/dtos/create-blog-summary.dto.ts:49\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        language\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Summary Language', type: String, example: 'english', default: 'english'})@IsString()@IsIn(['english', 'spanish', 'french', 'german', 'italian', 'portuguese', 'dutch', 'russian', 'chinese', 'korean'])\n                        \n                    \n                \n                    \n                        \n                                Defined in src/blogs/dtos/create-blog-summary.dto.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        summaryLength\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Summary Length', type: 'integer', example: 250})@IsNumber()@Min(100)@Max(500)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/blogs/dtos/create-blog-summary.dto.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        temperature\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Summary Temperature', type: 'integer', example: 7})@IsNumber()@Min(0)@Max(10)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/blogs/dtos/create-blog-summary.dto.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        tone\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Summary Tone', type: String, example: 'formal'})@IsString()@IsIn(['exciting', 'persuasive', 'informative', 'humorous', 'formal'])\n                        \n                    \n                \n                    \n                        \n                                Defined in src/blogs/dtos/create-blog-summary.dto.ts:32\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsIn, IsNumber, IsString, Max, Min } from \"class-validator\";\n\nexport class CreateBlogSummaryDto {\n  @ApiProperty({\n    description: \"Summary Length\",\n    type: \"integer\",\n    example: 250,\n  })\n  @IsNumber()\n  @Min(100)\n  @Max(500)\n  summaryLength: number;\n\n  @ApiProperty({\n    description: \"Summary Temperature\",\n    type: \"integer\",\n    example: 7,\n  })\n  @IsNumber()\n  @Min(0)\n  @Max(10)\n  temperature: number;\n\n  @ApiProperty({\n    description: \"Summary Tone\",\n    type: String,\n    example: \"formal\",\n  })\n  @IsString()\n  @IsIn([\"exciting\", \"persuasive\", \"informative\", \"humorous\", \"formal\"])\n  tone: string;\n\n  @ApiProperty({\n    description: \"Summary Language\",\n    type: String,\n    example: \"english\",\n    default: \"english\",\n  })\n  @IsString()\n  @IsIn([\"english\", \"spanish\", \"french\", \"german\", \"italian\", \"portuguese\", \"dutch\", \"russian\", \"chinese\", \"korean\"])\n  language: string;\n\n  @ApiProperty({\n    description: \"Blog Title\",\n    type: String,\n  })\n  @IsString()\n  blogTitle: string;\n\n  @ApiProperty({\n    description: \"Blog Markdown\",\n    type: String,\n  })\n  @IsString()\n  blogMarkdown: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateEndorsementDto.html":{"url":"classes/CreateEndorsementDto.html","title":"class - CreateEndorsementDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateEndorsementDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/endorsement/dto/create-endorsement.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                creator_user_id\n                            \n                            \n                                    Public\n                                recipient_user_id\n                            \n                            \n                                    Public\n                                repo_id\n                            \n                            \n                                    Public\n                                    Optional\n                                source_comment_url\n                            \n                            \n                                    Public\n                                source_context_url\n                            \n                            \n                                    Public\n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        creator_user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Endorsement Creator User ID', type: 'integer', example: 42211})@IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/endorsement/dto/create-endorsement.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        recipient_user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Endorsement Recipient User ID', type: 'integer', example: 5736810})@IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/endorsement/dto/create-endorsement.dto.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        repo_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Repository ID', type: 'integer', example: 78133})@IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/endorsement/dto/create-endorsement.dto.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        source_comment_url\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Endorsement Source Comment URL', default: ''})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/endorsement/dto/create-endorsement.dto.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        source_context_url\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Endorsement Source Context URL', example: 'https://github.com/open-sauced/insights/pulls'})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/endorsement/dto/create-endorsement.dto.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Endorsement Type', example: 'doc'})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/endorsement/dto/create-endorsement.dto.ts:49\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from \"@nestjs/swagger\";\nimport { IsString, IsNumber, IsOptional } from \"class-validator\";\n\nexport class CreateEndorsementDto {\n  @ApiProperty({\n    description: \"Endorsement Creator User ID\",\n    type: \"integer\",\n    example: 42211,\n  })\n  @IsNumber()\n  public creator_user_id: number;\n\n  @ApiProperty({\n    description: \"Endorsement Recipient User ID\",\n    type: \"integer\",\n    example: 5736810,\n  })\n  @IsNumber()\n  public recipient_user_id: number;\n\n  @ApiProperty({\n    description: \"Repository ID\",\n    type: \"integer\",\n    example: 78133,\n  })\n  @IsNumber()\n  public repo_id: number;\n\n  @ApiPropertyOptional({\n    description: \"Endorsement Source Comment URL\",\n    default: \"\",\n  })\n  @IsString()\n  @IsOptional()\n  public source_comment_url?: string;\n\n  @ApiProperty({\n    description: \"Endorsement Source Context URL\",\n    example: \"https://github.com/open-sauced/insights/pulls\",\n  })\n  @IsString()\n  public source_context_url: string;\n\n  @ApiProperty({\n    description: \"Endorsement Type\",\n    example: \"doc\",\n  })\n  @IsString()\n  public type: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateInsightDto.html":{"url":"classes/CreateInsightDto.html","title":"class - CreateInsightDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateInsightDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/insight/dtos/create-insight.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                is_public\n                            \n                            \n                                name\n                            \n                            \n                                repos\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        is_public\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Insight Page Visibility', type: Boolean, example: false})@IsBoolean()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/dtos/create-insight.dto.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Insight Page Name', type: String, example: 'My Team'})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/dtos/create-insight.dto.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        repos\n                        \n                    \n                \n            \n                \n                    \n                        Type :         RepoInfo[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'An array of repository information objects', isArray: true, type: RepoInfo, example: undefined})@Type(undefined)@IsArray()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/dtos/create-insight.dto.ts:32\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { Type } from \"class-transformer\";\nimport { IsArray, IsBoolean, IsString } from \"class-validator\";\n\nimport { RepoInfo } from \"../../repo/dtos/repo-info.dto\";\n\nexport class CreateInsightDto {\n  @ApiProperty({\n    description: \"Insight Page Name\",\n    type: String,\n    example: \"My Team\",\n  })\n  @IsString()\n  name: string;\n\n  @ApiProperty({\n    description: \"Insight Page Visibility\",\n    type: Boolean,\n    example: false,\n  })\n  @IsBoolean()\n  is_public: boolean;\n\n  @ApiProperty({\n    description: \"An array of repository information objects\",\n    isArray: true,\n    type: RepoInfo,\n    example: [{ id: 797, full_name: \"open-sauced/insights\" }],\n  })\n  @Type(() => RepoInfo)\n  @IsArray()\n  repos: RepoInfo[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateInsightMemberDto.html":{"url":"classes/CreateInsightMemberDto.html","title":"class - CreateInsightMemberDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateInsightMemberDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/insight/dtos/create-insight-member.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Insight Team Member Invite Email', type: String, example: 'hello@opensauced.pizza'})@IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/dtos/create-insight-member.dto.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsEmail } from \"class-validator\";\n\nexport class CreateInsightMemberDto {\n  @ApiProperty({\n    description: \"Insight Team Member Invite Email\",\n    type: String,\n    example: \"hello@opensauced.pizza\",\n  })\n  @IsEmail()\n  email: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateIssueSummaryDto.html":{"url":"classes/CreateIssueSummaryDto.html","title":"class - CreateIssueSummaryDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateIssueSummaryDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issues/dtos/create-issue-summary.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                issueComments\n                            \n                            \n                                issueDescription\n                            \n                            \n                                issueTitle\n                            \n                            \n                                language\n                            \n                            \n                                summaryLength\n                            \n                            \n                                temperature\n                            \n                            \n                                tone\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        issueComments\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Issue Comments', type: String})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issues/dtos/create-issue-summary.dto.ts:63\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        issueDescription\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Issue Description', type: String})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issues/dtos/create-issue-summary.dto.ts:56\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        issueTitle\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Issue Title', type: String})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issues/dtos/create-issue-summary.dto.ts:49\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        language\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Summary Language', type: String, example: 'english', default: 'english'})@IsString()@IsIn(['english', 'spanish', 'french', 'german', 'italian', 'portuguese', 'dutch', 'russian', 'chinese', 'korean'])\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issues/dtos/create-issue-summary.dto.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        summaryLength\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Summary Length', type: 'integer', example: 250})@IsNumber()@Min(100)@Max(500)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issues/dtos/create-issue-summary.dto.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        temperature\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Summary Temperature', type: 'integer', example: 7})@IsNumber()@Min(0)@Max(10)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issues/dtos/create-issue-summary.dto.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        tone\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Summary Tone', type: String, example: 'formal'})@IsString()@IsIn(['exciting', 'persuasive', 'informative', 'humorous', 'formal'])\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issues/dtos/create-issue-summary.dto.ts:32\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsIn, IsNumber, IsString, Max, Min } from \"class-validator\";\n\nexport class CreateIssueSummaryDto {\n  @ApiProperty({\n    description: \"Summary Length\",\n    type: \"integer\",\n    example: 250,\n  })\n  @IsNumber()\n  @Min(100)\n  @Max(500)\n  summaryLength: number;\n\n  @ApiProperty({\n    description: \"Summary Temperature\",\n    type: \"integer\",\n    example: 7,\n  })\n  @IsNumber()\n  @Min(0)\n  @Max(10)\n  temperature: number;\n\n  @ApiProperty({\n    description: \"Summary Tone\",\n    type: String,\n    example: \"formal\",\n  })\n  @IsString()\n  @IsIn([\"exciting\", \"persuasive\", \"informative\", \"humorous\", \"formal\"])\n  tone: string;\n\n  @ApiProperty({\n    description: \"Summary Language\",\n    type: String,\n    example: \"english\",\n    default: \"english\",\n  })\n  @IsString()\n  @IsIn([\"english\", \"spanish\", \"french\", \"german\", \"italian\", \"portuguese\", \"dutch\", \"russian\", \"chinese\", \"korean\"])\n  language: string;\n\n  @ApiProperty({\n    description: \"Issue Title\",\n    type: String,\n  })\n  @IsString()\n  issueTitle: string;\n\n  @ApiProperty({\n    description: \"Issue Description\",\n    type: String,\n  })\n  @IsString()\n  issueDescription: string;\n\n  @ApiProperty({\n    description: \"Issue Comments\",\n    type: String,\n  })\n  @IsString()\n  issueComments: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateLogDto.html":{"url":"classes/CreateLogDto.html","title":"class - CreateLogDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateLogDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/log/dtos/create-log.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                    Optional\n                                context\n                            \n                            \n                                    Readonly\n                                    Optional\n                                level\n                            \n                            \n                                    Readonly\n                                    Optional\n                                message\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        context\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/log/dtos/create-log.dto.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        level\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/log/dtos/create-log.dto.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        message\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/log/dtos/create-log.dto.ts:10\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsOptional, IsString } from \"class-validator\";\n\nexport class CreateLogDto {\n  @IsOptional()\n  @IsString()\n  readonly context?: string;\n\n  @IsOptional()\n  @IsString()\n  readonly message?: string;\n\n  @IsOptional()\n  @IsString()\n  readonly level?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserCollaborationDto.html":{"url":"classes/CreateUserCollaborationDto.html","title":"class - CreateUserCollaborationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserCollaborationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dtos/create-user-collaboration.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                message\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        message\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Collaboration Request Message', type: String, example: 'Come collaborate on a cool project'})@IsString()@MinLength(20)@MaxLength(500)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/create-user-collaboration.dto.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Collaboration Recipient Username', type: String, example: 'bdougie'})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/create-user-collaboration.dto.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsString, MaxLength, MinLength } from \"class-validator\";\n\nexport class CreateUserCollaborationDto {\n  @ApiProperty({\n    description: \"Collaboration Recipient Username\",\n    type: String,\n    example: \"bdougie\",\n  })\n  @IsString()\n  username: string;\n\n  @ApiProperty({\n    description: \"Collaboration Request Message\",\n    type: String,\n    example: \"Come collaborate on a cool project\",\n  })\n  @IsString()\n  @MinLength(20)\n  @MaxLength(500)\n  message: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserHighlightDto.html":{"url":"classes/CreateUserHighlightDto.html","title":"class - CreateUserHighlightDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserHighlightDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dtos/create-user-highlight.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                highlight\n                            \n                            \n                                    Public\n                                    Optional\n                                shipped_at\n                            \n                            \n                                    Public\n                                taggedRepos\n                            \n                            \n                                    Public\n                                    Optional\n                                title\n                            \n                            \n                                    Public\n                                type\n                            \n                            \n                                    Public\n                                url\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        highlight\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Highlight Text', type: String, example: My first PR to Open Sauced!})@IsString()@MinLength(3)@MaxLength(500)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/create-user-highlight.dto.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        shipped_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Shipped Date', type: String, example: 2023-01-19 13:24:51.000000})@IsDateString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/create-user-highlight.dto.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        taggedRepos\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'An array of full-names of tagged repositories', example: undefined, type: 'string', isArray: true})@IsArray()@IsString({each: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/create-user-highlight.dto.ts:58\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Highlight Title', type: String, example: My first PR!})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/create-user-highlight.dto.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"pull_request\"\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Highlight type', type: String, example: 'pull_request'})@IsString()@IsIn(['pull_request', 'blog_post', 'issue', 'milestone'])\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/create-user-highlight.dto.ts:48\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        url\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Highlight PR URL', type: String, example: 'github.com/open-sauced/insights/pull/1'})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/create-user-highlight.dto.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from \"@nestjs/swagger\";\nimport { IsArray, IsDateString, IsIn, IsOptional, IsString, MaxLength, MinLength } from \"class-validator\";\n\nexport class CreateUserHighlightDto {\n  @ApiProperty({\n    description: \"Highlight PR URL\",\n    type: String,\n    example: \"github.com/open-sauced/insights/pull/1\",\n  })\n  @IsString()\n  public url: string;\n\n  @ApiPropertyOptional({\n    description: \"Highlight Title\",\n    type: String,\n    example: `My first PR!`,\n  })\n  @IsOptional()\n  @IsString()\n  public title?: string;\n\n  @ApiProperty({\n    description: \"Highlight Text\",\n    type: String,\n    example: `My first PR to Open Sauced!`,\n  })\n  @IsString()\n  @MinLength(3)\n  @MaxLength(500)\n  public highlight: string;\n\n  @ApiPropertyOptional({\n    description: \"Shipped Date\",\n    type: String,\n    example: `2023-01-19 13:24:51.000000`,\n  })\n  @IsDateString()\n  @IsOptional()\n  public shipped_at?: string;\n\n  @ApiProperty({\n    description: \"Highlight type\",\n    type: String,\n    example: \"pull_request\",\n  })\n  @IsString()\n  @IsIn([\"pull_request\", \"blog_post\", \"issue\", \"milestone\"])\n  public type = \"pull_request\";\n\n  @ApiProperty({\n    description: \"An array of full-names of tagged repositories\",\n    example: [\"open-sauced/insights\", \"open-sauced/ai\"],\n    type: \"string\",\n    isArray: true,\n  })\n  @IsArray()\n  @IsString({ each: true })\n  public taggedRepos: string[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserListDto.html":{"url":"classes/CreateUserListDto.html","title":"class - CreateUserListDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserListDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user-lists/dtos/create-user-list.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                contributors\n                            \n                            \n                                is_public\n                            \n                            \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        contributors\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'An array of contributor objects', isArray: true, example: undefined})@IsArray()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-lists/dtos/create-user-list.dto.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        is_public\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'List Visibility', type: Boolean, example: false})@IsBoolean()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-lists/dtos/create-user-list.dto.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'List Name', type: String, example: 'My List'})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-lists/dtos/create-user-list.dto.ts:17\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { Type } from \"class-transformer\";\nimport { IsArray, IsBoolean, IsString } from \"class-validator\";\n\nexport class Contributor {\n  id: number;\n  login: string;\n}\n\nexport class CreateUserListDto {\n  @ApiProperty({\n    description: \"List Name\",\n    type: String,\n    example: \"My List\",\n  })\n  @IsString()\n  name: string;\n\n  @ApiProperty({\n    description: \"List Visibility\",\n    type: Boolean,\n    example: false,\n  })\n  @IsBoolean()\n  is_public: boolean;\n\n  @ApiProperty({\n    description: \"An array of contributor objects\",\n    isArray: true,\n    example: [{ id: 12345, login: \"sauceduser\" }],\n  })\n  @IsArray()\n  @Type(() => Contributor)\n  contributors: { id: number; login: string }[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CustomLogger.html":{"url":"injectables/CustomLogger.html","title":"injectable - CustomLogger","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CustomLogger\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/log/custom-logger.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    ConsoleLogger\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logsService\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                debug\n                            \n                            \n                                    Async\n                                error\n                            \n                            \n                                    Async\n                                log\n                            \n                            \n                                    Async\n                                verbose\n                            \n                            \n                                    Async\n                                warn\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(context: string, options: ConsoleLoggerOptions, configService: ConfigService, logsService: LogService)\n                    \n                \n                        \n                            \n                                Defined in src/log/custom-logger.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        context\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        options\n                                                  \n                                                        \n                                                                    ConsoleLoggerOptions\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        logsService\n                                                  \n                                                        \n                                                                        LogService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        debug\n                        \n                    \n                \n            \n            \n                \n                    \n                    debug(message: string, context?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/log/custom-logger.ts:49\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    context\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        error\n                        \n                    \n                \n            \n            \n                \n                    \n                    error(message: string, stack?: string, context?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/log/custom-logger.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    stack\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    context\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        log\n                        \n                    \n                \n            \n            \n                \n                    \n                    log(message: string, context?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/log/custom-logger.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    context\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        verbose\n                        \n                    \n                \n            \n            \n                \n                    \n                    verbose(message: string, context?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/log/custom-logger.ts:59\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    context\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        warn\n                        \n                    \n                \n            \n            \n                \n                    \n                    warn(message: string, context?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/log/custom-logger.ts:39\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    context\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logsService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         LogService\n\n                    \n                \n                    \n                        \n                                Defined in src/log/custom-logger.ts:8\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, ConsoleLogger } from \"@nestjs/common\";\nimport { ConsoleLoggerOptions } from \"@nestjs/common/services/console-logger.service\";\nimport { ConfigService } from \"@nestjs/config\";\nimport { LogService } from \"./log.service\";\n\n@Injectable()\nclass CustomLogger extends ConsoleLogger {\n  private readonly logsService: LogService;\n\n  constructor(context: string, options: ConsoleLoggerOptions, configService: ConfigService, logsService: LogService) {\n    super(context, {\n      ...options,\n      logLevels: [\"error\", \"warn\", \"log\", \"verbose\", \"debug\"],\n    });\n\n    this.logsService = logsService;\n  }\n\n  async log(message: string, context?: string) {\n    super.log.apply(this, [message, context]);\n\n    return this.logsService.createLog({\n      message,\n      context,\n      level: \"log\",\n    });\n  }\n\n  async error(message: string, stack?: string, context?: string) {\n    super.error.apply(this, [message, stack, context]);\n\n    return this.logsService.createLog({\n      message,\n      context,\n      level: \"error\",\n    });\n  }\n\n  async warn(message: string, context?: string) {\n    super.warn.apply(this, [message, context]);\n\n    return this.logsService.createLog({\n      message,\n      context,\n      level: \"error\",\n    });\n  }\n\n  async debug(message: string, context?: string) {\n    super.debug.apply(this, [message, context]);\n\n    return this.logsService.createLog({\n      message,\n      context,\n      level: \"error\",\n    });\n  }\n\n  async verbose(message: string, context?: string) {\n    super.debug.apply(this, [message, context]);\n\n    return this.logsService.createLog({\n      message,\n      context,\n      level: \"error\",\n    });\n  }\n}\n\nexport default CustomLogger;\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CustomerModule.html":{"url":"modules/CustomerModule.html","title":"module - CustomerModule","body":"\n                   \n\n\n\n\n    Modules\n    CustomerModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_CustomerModule\n\n\n\ncluster_CustomerModule_exports\n\n\n\ncluster_CustomerModule_providers\n\n\n\n\nCustomerService \n\nCustomerService \n\n\n\nCustomerModule\n\nCustomerModule\n\nCustomerService  -->\n\nCustomerModule->CustomerService \n\n\n\n\n\nCustomerService\n\nCustomerService\n\nCustomerModule -->\n\nCustomerService->CustomerModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/customer/customer.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CustomerService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            CustomerService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\n\nimport { DbCustomer } from \"./customer.entity\";\nimport { CustomerService } from \"./customer.service\";\n\n@Module({\n  imports: [TypeOrmModule.forFeature([DbCustomer], \"ApiConnection\")],\n  providers: [CustomerService],\n  exports: [CustomerService],\n})\nexport class CustomerModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CustomerService.html":{"url":"injectables/CustomerService.html","title":"injectable - CustomerService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CustomerService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/customer/customer.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addCustomer\n                            \n                            \n                                baseQueryBuilder\n                            \n                            \n                                    Async\n                                findByCustomerId\n                            \n                            \n                                    Async\n                                findById\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(customerRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/customer/customer.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        customerRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addCustomer\n                        \n                    \n                \n            \n            \n                \n                    \n                    addCustomer(userId: number, stripe_customer_id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/customer/customer.service.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    stripe_customer_id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        baseQueryBuilder\n                        \n                    \n                \n            \n            \n                \nbaseQueryBuilder()\n                \n            \n\n\n            \n                \n                    Defined in src/customer/customer.service.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findByCustomerId\n                        \n                    \n                \n            \n            \n                \n                    \n                    findByCustomerId(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/customer/customer.service.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findById(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/customer/customer.service.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { Repository } from \"typeorm\";\n\nimport { DbCustomer } from \"./customer.entity\";\n\n@Injectable()\nexport class CustomerService {\n  constructor(\n    @InjectRepository(DbCustomer, \"ApiConnection\")\n    private customerRepository: Repository\n  ) {}\n\n  baseQueryBuilder() {\n    return this.customerRepository.createQueryBuilder(\"customer\");\n  }\n\n  async findById(id: number) {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder.where(\"customer.id=:id\", { id });\n\n    return queryBuilder.getOne();\n  }\n\n  async findByCustomerId(id: string) {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder.where(\"customer.stripe_customer_id=:id\", { id });\n\n    return queryBuilder.getOne();\n  }\n\n  async addCustomer(userId: number, stripe_customer_id: string) {\n    return this.customerRepository.save({ id: userId, stripe_customer_id });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DatabaseLoggerMiddleware.html":{"url":"classes/DatabaseLoggerMiddleware.html","title":"class - DatabaseLoggerMiddleware","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DatabaseLoggerMiddleware\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/middleware/database-logger.middleware.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        TypeOrmLogger\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                log\n                            \n                            \n                                logMigration\n                            \n                            \n                                logQuery\n                            \n                            \n                                logQueryError\n                            \n                            \n                                logQuerySlow\n                            \n                            \n                                logSchemaBuild\n                            \n                            \n                                    Private\n                                stringifyParameters\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string)\n                    \n                \n                        \n                            \n                                Defined in src/common/middleware/database-logger.middleware.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in src/common/middleware/database-logger.middleware.ts:6\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        log\n                        \n                    \n                \n            \n            \n                \nlog(level: \"log\" | \"info\" | \"warn\", message: string, queryRunner?: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/common/middleware/database-logger.middleware.ts:46\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    level\n                                    \n                                            \"log\" | \"info\" | \"warn\"\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logMigration\n                        \n                    \n                \n            \n            \n                \nlogMigration(message: string)\n                \n            \n\n\n            \n                \n                    Defined in src/common/middleware/database-logger.middleware.ts:38\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logQuery\n                        \n                    \n                \n            \n            \n                \nlogQuery(query: string, parameters?: [], queryRunner?: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/common/middleware/database-logger.middleware.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    query\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    parameters\n                                    \n                                            []\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logQueryError\n                        \n                    \n                \n            \n            \n                \nlogQueryError(error: string, query: string, parameters?: [], queryRunner?: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/common/middleware/database-logger.middleware.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    error\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    query\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    parameters\n                                    \n                                            []\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logQuerySlow\n                        \n                    \n                \n            \n            \n                \nlogQuerySlow(time: number, query: string, parameters?: [], queryRunner?: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/common/middleware/database-logger.middleware.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    time\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    query\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    parameters\n                                    \n                                            []\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logSchemaBuild\n                        \n                    \n                \n            \n            \n                \nlogSchemaBuild(message: string)\n                \n            \n\n\n            \n                \n                    Defined in src/common/middleware/database-logger.middleware.ts:42\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        stringifyParameters\n                        \n                    \n                \n            \n            \n                \n                    \n                    stringifyParameters(parameters?: [])\n                \n            \n\n\n            \n                \n                    Defined in src/common/middleware/database-logger.middleware.ts:61\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    parameters\n                                    \n                                            []\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Logger as TypeOrmLogger, QueryRunner } from \"typeorm\";\nimport { Logger as NestLogger } from \"@nestjs/common\";\nimport { clc } from \"@nestjs/common/utils/cli-colors.util\";\n\nexport class DatabaseLoggerMiddleware implements TypeOrmLogger {\n  private readonly logger;\n\n  constructor(name = \"SQL\") {\n    this.logger = new NestLogger(name);\n  }\n\n  logQuery(query: string, parameters?: unknown[], queryRunner?: QueryRunner) {\n    if (queryRunner?.data.isCreatingLogs) {\n      return;\n    }\n\n    this.logger.log(`${query} -- Parameters: ${this.stringifyParameters(parameters)}`);\n  }\n\n  logQueryError(error: string, query: string, parameters?: unknown[], queryRunner?: QueryRunner) {\n    if (queryRunner?.data.isCreatingLogs) {\n      return;\n    }\n\n    this.logger.error(`${query} -- Parameters: ${this.stringifyParameters(parameters)} -- ${error}`);\n  }\n\n  logQuerySlow(time: number, query: string, parameters?: unknown[], queryRunner?: QueryRunner) {\n    if (queryRunner?.data.isCreatingLogs) {\n      return;\n    }\n\n    this.logger.error(\n      `${query} -- Parameters: ${this.stringifyParameters(parameters)} ${clc.red(`+${String(time)}ms`)}`\n    );\n  }\n\n  logMigration(message: string) {\n    this.logger.warn(message);\n  }\n\n  logSchemaBuild(message: string) {\n    this.logger.warn(message);\n  }\n\n  log(level: \"log\" | \"info\" | \"warn\", message: string, queryRunner?: QueryRunner) {\n    if (queryRunner?.data.isCreatingLogs) {\n      return;\n    }\n\n    if (level === \"log\") {\n      return this.logger.log(message);\n    }\n    if (level === \"info\") {\n      return this.logger.debug(message);\n    }\n\n    return this.logger.warn(message);\n  }\n\n  private stringifyParameters(parameters?: unknown[]) {\n    try {\n      return JSON.stringify(parameters);\n    } catch {\n      return \"\";\n    }\n  }\n}\n\nexport default DatabaseLoggerMiddleware;\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbBakedRepo.html":{"url":"entities/DbBakedRepo.html","title":"entity - DbBakedRepo","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbBakedRepo\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/pizza/entities/baked-repo.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                clone_url\n                            \n                            \n                                    Public\n                                commits\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                repo_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        clone_url\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Repository clone url', example: 'https://github.com/open-sauced/insights.git'})@Column({type: 'character varying', length: 255})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pizza/entities/baked-repo.entity.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        commits\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbCommits[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@OneToMany(undefined, commits => commits.baked_repo)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pizza/entities/baked-repo.entity.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Baked repository identifier', example: 71359796, type: 'integer'})@PrimaryColumn('bigint')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pizza/entities/baked-repo.entity.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        repo_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Repository identifier', example: 12345678, type: 'integer'})@PrimaryColumn('bigint')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pizza/entities/baked-repo.entity.ts:38\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { BaseEntity, Column, Entity, OneToMany, PrimaryColumn } from \"typeorm\";\nimport { ApiModelProperty } from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\nimport { ApiHideProperty } from \"@nestjs/swagger\";\n\nimport { DbCommits } from \"./commits.entity\";\n\n@Entity({\n  name: \"baked_repos\",\n  orderBy: {\n    id: \"DESC\",\n  },\n})\nexport class DbBakedRepo extends BaseEntity {\n  @ApiModelProperty({\n    description: \"Baked repository identifier\",\n    example: 71359796,\n    type: \"integer\",\n  })\n  @PrimaryColumn(\"bigint\")\n  public id!: number;\n\n  @ApiModelProperty({\n    description: \"Repository clone url\",\n    example: \"https://github.com/open-sauced/insights.git\",\n  })\n  @Column({\n    type: \"character varying\",\n    length: 255,\n  })\n  public clone_url: string;\n\n  @ApiModelProperty({\n    description: \"Repository identifier\",\n    example: 12345678,\n    type: \"integer\",\n  })\n  @PrimaryColumn(\"bigint\")\n  public repo_id!: number;\n\n  @ApiHideProperty()\n  @OneToMany(() => DbCommits, (commits) => commits.baked_repo)\n  public commits: DbCommits[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbCommitAuthors.html":{"url":"entities/DbCommitAuthors.html","title":"entity - DbCommitAuthors","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbCommitAuthors\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/pizza/entities/commit_authors.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                commit_author_email\n                            \n                            \n                                    Public\n                                commits\n                            \n                            \n                                    Public\n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        commit_author_email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@Column({type: 'character varying', length: 255, select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pizza/entities/commit_authors.entity.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        commits\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbCommits[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@OneToMany(undefined, commits => commits.commit_author)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pizza/entities/commit_authors.entity.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Commit author identifier', example: 71359796, type: 'integer'})@PrimaryColumn('bigint')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pizza/entities/commit_authors.entity.ts:20\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { BaseEntity, Column, Entity, OneToMany, PrimaryColumn } from \"typeorm\";\nimport { ApiModelProperty } from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\nimport { ApiHideProperty } from \"@nestjs/swagger\";\n\nimport { DbCommits } from \"./commits.entity\";\n\n@Entity({\n  name: \"commit_authors\",\n  orderBy: {\n    id: \"DESC\",\n  },\n})\nexport class DbCommitAuthors extends BaseEntity {\n  @ApiModelProperty({\n    description: \"Commit author identifier\",\n    example: 71359796,\n    type: \"integer\",\n  })\n  @PrimaryColumn(\"bigint\")\n  public id!: number;\n\n  @ApiHideProperty()\n  @Column({\n    type: \"character varying\",\n    length: 255,\n    select: false,\n  })\n  public commit_author_email: string;\n\n  @ApiHideProperty()\n  @OneToMany(() => DbCommits, (commits) => commits.commit_author)\n  public commits: DbCommits[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbCommits.html":{"url":"entities/DbCommits.html","title":"entity - DbCommits","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbCommits\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/pizza/entities/commits.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                baked_repo\n                            \n                            \n                                    Public\n                                baked_repo_id\n                            \n                            \n                                    Public\n                                commit_author\n                            \n                            \n                                    Public\n                                commit_author_id\n                            \n                            \n                                    Public\n                                commit_date\n                            \n                            \n                                    Public\n                                commit_hash\n                            \n                            \n                                    Public\n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        baked_repo\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbBakedRepo\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@ManyToOne(undefined, baked_repo => baked_repo.commits)@JoinColumn({name: 'baked_repo_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pizza/entities/commits.entity.ts:59\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        baked_repo_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Baked repo identifier', example: 57568598, type: 'integer'})@Column({type: 'bigint'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pizza/entities/commits.entity.ts:51\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        commit_author\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbCommitAuthors\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@ManyToOne(undefined, commit_author => commit_author.commits)@JoinColumn({name: 'commit_author_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pizza/entities/commits.entity.ts:77\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        commit_author_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Commit author identifier', example: 9876543, type: 'integer'})@Column({type: 'bigint'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pizza/entities/commits.entity.ts:69\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        commit_date\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Date for the commit', example: '5e7c6c7af42d38c57f363c564c58007da448c443'})@Column({type: 'character varying', length: 255})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pizza/entities/commits.entity.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        commit_hash\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Hash for the commit', example: '5e7c6c7af42d38c57f363c564c58007da448c443'})@Column({type: 'character varying', length: 255})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pizza/entities/commits.entity.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Commit identifier', example: 71359796, type: 'integer'})@PrimaryColumn('bigint')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pizza/entities/commits.entity.ts:21\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { BaseEntity, Column, Entity, JoinColumn, ManyToOne, PrimaryColumn } from \"typeorm\";\nimport { ApiModelProperty } from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\nimport { ApiHideProperty } from \"@nestjs/swagger\";\n\nimport { DbBakedRepo } from \"./baked-repo.entity\";\nimport { DbCommitAuthors } from \"./commit_authors.entity\";\n\n@Entity({\n  name: \"commits\",\n  orderBy: {\n    id: \"DESC\",\n  },\n})\nexport class DbCommits extends BaseEntity {\n  @ApiModelProperty({\n    description: \"Commit identifier\",\n    example: 71359796,\n    type: \"integer\",\n  })\n  @PrimaryColumn(\"bigint\")\n  public id!: number;\n\n  @ApiModelProperty({\n    description: \"Hash for the commit\",\n    example: \"5e7c6c7af42d38c57f363c564c58007da448c443\",\n  })\n  @Column({\n    type: \"character varying\",\n    length: 255,\n  })\n  public commit_hash: string;\n\n  @ApiModelProperty({\n    description: \"Date for the commit\",\n    example: \"5e7c6c7af42d38c57f363c564c58007da448c443\",\n  })\n  @Column({\n    type: \"character varying\",\n    length: 255,\n  })\n  public commit_date: string;\n\n  @ApiModelProperty({\n    description: \"Baked repo identifier\",\n    example: 57568598,\n    type: \"integer\",\n  })\n  @Column({\n    type: \"bigint\",\n  })\n  public baked_repo_id!: number;\n\n  @ApiHideProperty()\n  @ManyToOne(() => DbBakedRepo, (baked_repo) => baked_repo.commits)\n  @JoinColumn({\n    name: \"baked_repo_id\",\n    referencedColumnName: \"id\",\n  })\n  public baked_repo!: DbBakedRepo;\n\n  @ApiModelProperty({\n    description: \"Commit author identifier\",\n    example: 9876543,\n    type: \"integer\",\n  })\n  @Column({\n    type: \"bigint\",\n  })\n  public commit_author_id!: number;\n\n  @ApiHideProperty()\n  @ManyToOne(() => DbCommitAuthors, (commit_author) => commit_author.commits)\n  @JoinColumn({\n    name: \"commit_author_id\",\n    referencedColumnName: \"id\",\n  })\n  public commit_author!: DbCommitAuthors;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbContribution.html":{"url":"entities/DbContribution.html","title":"entity - DbContribution","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbContribution\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/contribution/contribution.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                contributor\n                            \n                            \n                                    Public\n                                count\n                            \n                            \n                                    Public\n                                    Optional\n                                created_at\n                            \n                            \n                                    Public\n                                    Optional\n                                deleted_at\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                last_merged_at\n                            \n                            \n                                    Public\n                                repo\n                            \n                            \n                                    Public\n                                repo_id\n                            \n                            \n                                    Public\n                                    Optional\n                                updated_at\n                            \n                            \n                                    Public\n                                url\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        contributor\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Contributor unique user name', example: '0-vortex'})@Column({type: 'character varying', length: 255})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/contribution/contribution.entity.ts:94\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        count\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Total number of contributed pull requests', example: 15, type: 'integer'})@Column({type: 'bigint', default: 0})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/contribution/contribution.entity.ts:50\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing contribution creation', example: '2016-10-19 13:24:51.000000'})@CreateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/contribution/contribution.entity.ts:67\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        deleted_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@DeleteDateColumn({type: 'timestamp without time zone', select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/contribution/contribution.entity.ts:84\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Contribution identifier', example: 12237133, type: 'integer'})@PrimaryColumn('bigint')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/contribution/contribution.entity.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        last_merged_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Timestamp representing last contribution merge to the default branch', example: '2016-10-19 13:24:51.000000'})@Column({type: 'timestamp without time zone'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/contribution/contribution.entity.ts:57\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        repo\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbRepo\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@ManyToOne(undefined, repo => repo.contributions)@JoinColumn({name: 'repo_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/contribution/contribution.entity.ts:112\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        repo_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Repository identifier', example: 71359796, type: 'integer'})@Column({type: 'bigint', select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/contribution/contribution.entity.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing contribution last update', example: '2022-08-28 22:04:29.000000'})@UpdateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/contribution/contribution.entity.ts:77\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        url\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Contribution GitHub origin URL', example: 'https://github.com/open-sauced/hot/pull/320'})@Column({type: 'character varying', length: 255})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/contribution/contribution.entity.ts:104\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  Column,\n  BaseEntity,\n  PrimaryColumn,\n  ManyToOne,\n  JoinColumn,\n  DeleteDateColumn,\n  CreateDateColumn,\n  UpdateDateColumn,\n} from \"typeorm\";\nimport { ApiHideProperty } from \"@nestjs/swagger\";\n\nimport {\n  ApiModelProperty,\n  ApiModelPropertyOptional,\n} from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\nimport { DbRepo } from \"../repo/entities/repo.entity\";\n\n@Entity({ name: \"contributions\" })\nexport class DbContribution extends BaseEntity {\n  @ApiModelProperty({\n    description: \"Contribution identifier\",\n    example: 12237133,\n    type: \"integer\",\n  })\n  @PrimaryColumn(\"bigint\")\n  public id!: number;\n\n  @ApiModelProperty({\n    description: \"Repository identifier\",\n    example: 71359796,\n    type: \"integer\",\n  })\n  @Column({\n    type: \"bigint\",\n    select: false,\n  })\n  public repo_id!: number;\n\n  @ApiModelProperty({\n    description: \"Total number of contributed pull requests\",\n    example: 15,\n    type: \"integer\",\n  })\n  @Column({\n    type: \"bigint\",\n    default: 0,\n  })\n  public count: number;\n\n  @ApiModelProperty({\n    description: \"Timestamp representing last contribution merge to the default branch\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  @Column({ type: \"timestamp without time zone\" })\n  public last_merged_at: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing contribution creation\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  @CreateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public created_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing contribution last update\",\n    example: \"2022-08-28 22:04:29.000000\",\n  })\n  @UpdateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public updated_at?: Date;\n\n  @ApiHideProperty()\n  @DeleteDateColumn({\n    type: \"timestamp without time zone\",\n    select: false,\n  })\n  public deleted_at?: Date;\n\n  @ApiModelProperty({\n    description: \"Contributor unique user name\",\n    example: \"0-vortex\",\n  })\n  @Column({\n    type: \"character varying\",\n    length: 255,\n  })\n  public contributor: string;\n\n  @ApiModelProperty({\n    description: \"Contribution GitHub origin URL\",\n    example: \"https://github.com/open-sauced/hot/pull/320\",\n  })\n  @Column({\n    type: \"character varying\",\n    length: 255,\n  })\n  public url: string;\n\n  @ApiHideProperty()\n  @ManyToOne(() => DbRepo, (repo) => repo.contributions)\n  @JoinColumn({\n    name: \"repo_id\",\n    referencedColumnName: \"id\",\n  })\n  public repo!: DbRepo;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbContributionStatTimeframe.html":{"url":"entities/DbContributionStatTimeframe.html","title":"entity - DbContributionStatTimeframe","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbContributionStatTimeframe\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user-lists/entities/contributions-timeframe.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                comments\n                            \n                            \n                                commits\n                            \n                            \n                                issues_created\n                            \n                            \n                                prs_created\n                            \n                            \n                                prs_reviewed\n                            \n                            \n                                time_end\n                            \n                            \n                                time_start\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        comments\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Number of comments associated with a user login', example: 0, type: 'integer'})@Column({type: 'bigint', select: false, insert: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-lists/entities/contributions-timeframe.entity.ts:88\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        commits\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Number of commits associated with a user login', example: 0, type: 'integer'})@Column({type: 'bigint', select: false, insert: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-lists/entities/contributions-timeframe.entity.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        issues_created\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Number of issues created by a user login', example: 0, type: 'integer'})@Column({type: 'bigint', select: false, insert: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-lists/entities/contributions-timeframe.entity.ts:76\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        prs_created\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Number of PRs created associated with a user login', example: 0, type: 'integer'})@Column({type: 'bigint', select: false, insert: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-lists/entities/contributions-timeframe.entity.ts:52\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        prs_reviewed\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Number of PRs reviewed by a user login', example: 0, type: 'integer'})@Column({type: 'bigint', select: false, insert: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-lists/entities/contributions-timeframe.entity.ts:64\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        time_end\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'The ISO timestamp for the end of the time frame', example: '2023-08-26T23:55:49.204Z', type: 'string'})@Column({type: 'string', select: false, insert: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-lists/entities/contributions-timeframe.entity.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        time_start\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'The ISO timestamp for the start of the time frame', example: '2023-08-26T23:55:49.204Z', type: 'string'})@Column({type: 'string', select: false, insert: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-lists/entities/contributions-timeframe.entity.ts:16\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { ApiModelProperty } from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\nimport { Column, Entity } from \"typeorm\";\n\n@Entity({ name: \"user_list_contributors\" })\nexport class DbContributionStatTimeframe {\n  @ApiModelProperty({\n    description: \"The ISO timestamp for the start of the time frame\",\n    example: \"2023-08-26T23:55:49.204Z\",\n    type: \"string\",\n  })\n  @Column({\n    type: \"string\",\n    select: false,\n    insert: false,\n  })\n  time_start: string;\n\n  @ApiModelProperty({\n    description: \"The ISO timestamp for the end of the time frame\",\n    example: \"2023-08-26T23:55:49.204Z\",\n    type: \"string\",\n  })\n  @Column({\n    type: \"string\",\n    select: false,\n    insert: false,\n  })\n  time_end: string;\n\n  @ApiModelProperty({\n    description: \"Number of commits associated with a user login\",\n    example: 0,\n    type: \"integer\",\n  })\n  @Column({\n    type: \"bigint\",\n    select: false,\n    insert: false,\n  })\n  commits: number;\n\n  @ApiModelProperty({\n    description: \"Number of PRs created associated with a user login\",\n    example: 0,\n    type: \"integer\",\n  })\n  @Column({\n    type: \"bigint\",\n    select: false,\n    insert: false,\n  })\n  prs_created: number;\n\n  @ApiModelProperty({\n    description: \"Number of PRs reviewed by a user login\",\n    example: 0,\n    type: \"integer\",\n  })\n  @Column({\n    type: \"bigint\",\n    select: false,\n    insert: false,\n  })\n  prs_reviewed: number;\n\n  @ApiModelProperty({\n    description: \"Number of issues created by a user login\",\n    example: 0,\n    type: \"integer\",\n  })\n  @Column({\n    type: \"bigint\",\n    select: false,\n    insert: false,\n  })\n  issues_created: number;\n\n  @ApiModelProperty({\n    description: \"Number of comments associated with a user login\",\n    example: 0,\n    type: \"integer\",\n  })\n  @Column({\n    type: \"bigint\",\n    select: false,\n    insert: false,\n  })\n  comments: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbContributionsProjects.html":{"url":"entities/DbContributionsProjects.html","title":"entity - DbContributionsProjects","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbContributionsProjects\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user-lists/entities/contributions-projects.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                contributions\n                            \n                            \n                                org_id\n                            \n                            \n                                project_id\n                            \n                            \n                                repo_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        contributions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'The number of contributions associated with a org/repo', example: 0, type: 'integer'})@Column({type: 'bigint', select: false, insert: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-lists/entities/contributions-projects.entity.ts:52\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        org_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'The org name of the repo', example: 'open-sauced', type: 'string'})@Column({type: 'string', select: false, insert: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-lists/entities/contributions-projects.entity.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        project_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'The project name of the repo', example: 'api', type: 'string'})@Column({type: 'string', select: false, insert: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-lists/entities/contributions-projects.entity.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        repo_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'The ID of the associated repo in the OpenSauced API context', example: 0, type: 'integer'})@Column({type: 'bigint', select: false, insert: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-lists/entities/contributions-projects.entity.ts:40\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { ApiModelProperty } from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\nimport { Column, Entity } from \"typeorm\";\n\n@Entity({ name: \"user_list_contributors\" })\nexport class DbContributionsProjects {\n  @ApiModelProperty({\n    description: \"The org name of the repo\",\n    example: \"open-sauced\",\n    type: \"string\",\n  })\n  @Column({\n    type: \"string\",\n    select: false,\n    insert: false,\n  })\n  org_id: string;\n\n  @ApiModelProperty({\n    description: \"The project name of the repo\",\n    example: \"api\",\n    type: \"string\",\n  })\n  @Column({\n    type: \"string\",\n    select: false,\n    insert: false,\n  })\n  project_id: string;\n\n  @ApiModelProperty({\n    description: \"The ID of the associated repo in the OpenSauced API context\",\n    example: 0,\n    type: \"integer\",\n  })\n  @Column({\n    type: \"bigint\",\n    select: false,\n    insert: false,\n  })\n  repo_id: number;\n\n  @ApiModelProperty({\n    description: \"The number of contributions associated with a org/repo\",\n    example: 0,\n    type: \"integer\",\n  })\n  @Column({\n    type: \"bigint\",\n    select: false,\n    insert: false,\n  })\n  contributions: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbContributorCategoryTimeframe.html":{"url":"entities/DbContributorCategoryTimeframe.html","title":"entity - DbContributorCategoryTimeframe","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbContributorCategoryTimeframe\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user-lists/entities/contributors-timeframe.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                active\n                            \n                            \n                                all\n                            \n                            \n                                alumni\n                            \n                            \n                                new\n                            \n                            \n                                time_end\n                            \n                            \n                                time_start\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        active\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Number of contributors who contributed in current time frame and previous time frame', example: 0, type: 'integer'})@Column({type: 'bigint', select: false, insert: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-lists/entities/contributors-timeframe.entity.ts:52\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        all\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Number of all contributors (active, new, and alumni)', example: 0, type: 'integer'})@Column({type: 'bigint', select: false, insert: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-lists/entities/contributors-timeframe.entity.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        alumni\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Number of contributors who did not contribute in current time frame but did in the previous time frame', example: 0, type: 'integer'})@Column({type: 'bigint', select: false, insert: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-lists/entities/contributors-timeframe.entity.ts:78\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        new\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Number of contributors who are new to contributing (contributed in current time frame but not the previous time frame)', example: 0, type: 'integer'})@Column({type: 'bigint', select: false, insert: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-lists/entities/contributors-timeframe.entity.ts:65\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        time_end\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'The ISO timestamp for the end of the time frame', example: '2023-08-26T23:55:49.204Z', type: 'string'})@Column({type: 'string', select: false, insert: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-lists/entities/contributors-timeframe.entity.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        time_start\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'The ISO timestamp for the start of the time frame', example: '2023-08-26T23:55:49.204Z', type: 'string'})@Column({type: 'string', select: false, insert: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-lists/entities/contributors-timeframe.entity.ts:16\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { ApiModelProperty } from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\nimport { Column, Entity } from \"typeorm\";\n\n@Entity({ name: \"user_list_contributors\" })\nexport class DbContributorCategoryTimeframe {\n  @ApiModelProperty({\n    description: \"The ISO timestamp for the start of the time frame\",\n    example: \"2023-08-26T23:55:49.204Z\",\n    type: \"string\",\n  })\n  @Column({\n    type: \"string\",\n    select: false,\n    insert: false,\n  })\n  time_start: string;\n\n  @ApiModelProperty({\n    description: \"The ISO timestamp for the end of the time frame\",\n    example: \"2023-08-26T23:55:49.204Z\",\n    type: \"string\",\n  })\n  @Column({\n    type: \"string\",\n    select: false,\n    insert: false,\n  })\n  time_end: string;\n\n  @ApiModelProperty({\n    description: \"Number of all contributors (active, new, and alumni)\",\n    example: 0,\n    type: \"integer\",\n  })\n  @Column({\n    type: \"bigint\",\n    select: false,\n    insert: false,\n  })\n  all: number;\n\n  @ApiModelProperty({\n    description: \"Number of contributors who contributed in current time frame and previous time frame\",\n    example: 0,\n    type: \"integer\",\n  })\n  @Column({\n    type: \"bigint\",\n    select: false,\n    insert: false,\n  })\n  active: number;\n\n  @ApiModelProperty({\n    description:\n      \"Number of contributors who are new to contributing (contributed in current time frame but not the previous time frame)\",\n    example: 0,\n    type: \"integer\",\n  })\n  @Column({\n    type: \"bigint\",\n    select: false,\n    insert: false,\n  })\n  new: number;\n\n  @ApiModelProperty({\n    description:\n      \"Number of contributors who did not contribute in current time frame but did in the previous time frame\",\n    example: 0,\n    type: \"integer\",\n  })\n  @Column({\n    type: \"bigint\",\n    select: false,\n    insert: false,\n  })\n  alumni: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbCoupon.html":{"url":"entities/DbCoupon.html","title":"entity - DbCoupon","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbCoupon\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/coupon/entities/coupon.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                code\n                            \n                            \n                                    Public\n                                    Optional\n                                created_at\n                            \n                            \n                                    Public\n                                    Optional\n                                expired_at\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        code\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Coupon identifier', example: 'saucy', type: 'string'})@PrimaryColumn({type: 'text'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/coupon/entities/coupon.entity.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing highlight creation date', example: '2023-01-19 13:24:51.000000'})@CreateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/coupon/entities/coupon.entity.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        expired_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing coupon expiration date', example: '2023-01-19 13:24:51.000000'})@DeleteDateColumn({type: 'timestamp without time zone'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/coupon/entities/coupon.entity.ts:33\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Entity, BaseEntity, CreateDateColumn, DeleteDateColumn, PrimaryColumn } from \"typeorm\";\n\nimport {\n  ApiModelProperty,\n  ApiModelPropertyOptional,\n} from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\n\n@Entity({ name: \"coupons\" })\nexport class DbCoupon extends BaseEntity {\n  @ApiModelProperty({\n    description: \"Coupon identifier\",\n    example: \"saucy\",\n    type: \"string\",\n  })\n  @PrimaryColumn({ type: \"text\" })\n  public code: string;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing highlight creation date\",\n    example: \"2023-01-19 13:24:51.000000\",\n  })\n  @CreateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public created_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing coupon expiration date\",\n    example: \"2023-01-19 13:24:51.000000\",\n  })\n  @DeleteDateColumn({ type: \"timestamp without time zone\" })\n  public expired_at?: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbCustomer.html":{"url":"entities/DbCustomer.html","title":"entity - DbCustomer","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbCustomer\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/customer/customer.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                stripe_customer_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User identifier', example: 237133})@PrimaryColumn('bigint')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/customer/customer.entity.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        stripe_customer_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Stripe Customer Id', example: 498})@Column({type: 'character varying', length: 50})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/customer/customer.entity.ts:22\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Entity, Column, BaseEntity, PrimaryColumn } from \"typeorm\";\n\nimport { ApiModelProperty } from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\n\n@Entity({ name: \"customers\" })\nexport class DbCustomer extends BaseEntity {\n  @ApiModelProperty({\n    description: \"User identifier\",\n    example: 237133,\n  })\n  @PrimaryColumn(\"bigint\")\n  public id!: number;\n\n  @ApiModelProperty({\n    description: \"Stripe Customer Id\",\n    example: 498,\n  })\n  @Column({\n    type: \"character varying\",\n    length: 50,\n  })\n  public stripe_customer_id: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbEmoji.html":{"url":"entities/DbEmoji.html","title":"entity - DbEmoji","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbEmoji\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/emoji/entities/emoji.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                created_at\n                            \n                            \n                                    Public\n                                    Optional\n                                deleted_at\n                            \n                            \n                                    Public\n                                display_order\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                reactions\n                            \n                            \n                                    Public\n                                    Optional\n                                updated_at\n                            \n                            \n                                    Public\n                                url\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing highlight reaction creation', example: '2016-10-19 13:24:51.000000'})@CreateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/emoji/entities/emoji.entity.ts:57\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        deleted_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@DeleteDateColumn({type: 'timestamp without time zone', select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/emoji/entities/emoji.entity.ts:74\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        display_order\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Emoji display order', example: 1, type: 'integer'})@Column({type: 'integer'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/emoji/entities/emoji.entity.ts:47\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Emoji identifier', example: 'uuid-v4'})@PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/emoji/entities/emoji.entity.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Emoji Name', example: '100'})@Column({type: 'text'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/emoji/entities/emoji.entity.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        reactions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbUserHighlightReaction[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@OneToMany(undefined, highlightReaction => highlightReaction.emoji)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/emoji/entities/emoji.entity.ts:78\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing highlight reaction last update', example: '2022-08-28 22:04:29.000000'})@UpdateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/emoji/entities/emoji.entity.ts:67\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        url\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Emoji URL', example: 'https://github.githubassets.com/images/icons/emoji/unicode/1f4af.png?v8'})@Column({type: 'text'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/emoji/entities/emoji.entity.ts:39\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Column,\n  CreateDateColumn,\n  DeleteDateColumn,\n  Entity,\n  OneToMany,\n  PrimaryGeneratedColumn,\n  UpdateDateColumn,\n} from \"typeorm\";\nimport { ApiHideProperty } from \"@nestjs/swagger\";\nimport {\n  ApiModelProperty,\n  ApiModelPropertyOptional,\n} from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\n\nimport { DbUserHighlightReaction } from \"../../user/entities/user-highlight-reaction.entity\";\n\n@Entity({ name: \"emojis\" })\nexport class DbEmoji {\n  @ApiModelProperty({\n    description: \"Emoji identifier\",\n    example: \"uuid-v4\",\n  })\n  @PrimaryGeneratedColumn()\n  public id!: string;\n\n  @ApiModelProperty({\n    description: \"Emoji Name\",\n    example: \"100\",\n  })\n  @Column({ type: \"text\" })\n  public name: string;\n\n  @ApiModelProperty({\n    description: \"Emoji URL\",\n    example: \"https://github.githubassets.com/images/icons/emoji/unicode/1f4af.png?v8\",\n  })\n  @Column({ type: \"text\" })\n  public url: string;\n\n  @ApiModelProperty({\n    description: \"Emoji display order\",\n    example: 1,\n    type: \"integer\",\n  })\n  @Column({ type: \"integer\" })\n  public display_order!: number;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing highlight reaction creation\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  @CreateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public created_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing highlight reaction last update\",\n    example: \"2022-08-28 22:04:29.000000\",\n  })\n  @UpdateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public updated_at?: Date;\n\n  @ApiHideProperty()\n  @DeleteDateColumn({\n    type: \"timestamp without time zone\",\n    select: false,\n  })\n  public deleted_at?: Date;\n\n  @ApiHideProperty()\n  @OneToMany(() => DbUserHighlightReaction, (highlightReaction) => highlightReaction.emoji)\n  public reactions: DbUserHighlightReaction[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbEndorsement.html":{"url":"entities/DbEndorsement.html","title":"entity - DbEndorsement","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbEndorsement\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/endorsement/entities/endorsement.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                created_at\n                            \n                            \n                                    Public\n                                    Optional\n                                creator_user_id\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                    Optional\n                                recipient_user_id\n                            \n                            \n                                    Public\n                                repo_id\n                            \n                            \n                                    Public\n                                    Optional\n                                source_comment_url\n                            \n                            \n                                    Public\n                                source_context_url\n                            \n                            \n                                    Public\n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing endorsement creation', example: '2022-10-19 13:24:51.000000'})@CreateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/endorsement/entities/endorsement.entity.ts:72\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        creator_user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Endorsement Creator User ID', example: 237133, type: 'integer'})@Column({type: 'integer'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/endorsement/entities/endorsement.entity.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Endorsement identifier', example: 'uuid-v4'})@PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/endorsement/entities/endorsement.entity.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        recipient_user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Endorsement Recipient User ID', example: 31333, type: 'integer'})@Column({type: 'integer'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/endorsement/entities/endorsement.entity.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        repo_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Repository ID', example: 78133, type: 'integer'})@Column({type: 'integer'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/endorsement/entities/endorsement.entity.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        source_comment_url\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Endorsement Source Comment URL'})@Column({type: 'character varying', length: 500})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/endorsement/entities/endorsement.entity.ts:45\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        source_context_url\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Endorsement Source Context URL'})@Column({type: 'character varying', length: 20})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/endorsement/entities/endorsement.entity.ts:52\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Endorsement Type', example: 'doc'})@Column({type: 'character varying', length: 20})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/endorsement/entities/endorsement.entity.ts:62\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  ApiModelProperty,\n  ApiModelPropertyOptional,\n} from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\nimport { Column, CreateDateColumn, Entity, PrimaryGeneratedColumn } from \"typeorm\";\n\n@Entity({ name: \"endorsements\" })\nexport class DbEndorsement {\n  @ApiModelProperty({\n    description: \"Endorsement identifier\",\n    example: \"uuid-v4\",\n  })\n  @PrimaryGeneratedColumn()\n  public id!: string;\n\n  @ApiModelProperty({\n    description: \"Endorsement Creator User ID\",\n    example: 237133,\n    type: \"integer\",\n  })\n  @Column({ type: \"integer\" })\n  public creator_user_id?: number;\n\n  @ApiModelProperty({\n    description: \"Endorsement Recipient User ID\",\n    example: 31333,\n    type: \"integer\",\n  })\n  @Column({ type: \"integer\" })\n  public recipient_user_id?: number;\n\n  @ApiModelProperty({\n    description: \"Repository ID\",\n    example: 78133,\n    type: \"integer\",\n  })\n  @Column({ type: \"integer\" })\n  public repo_id: number;\n\n  @ApiModelProperty({ description: \"Endorsement Source Comment URL\" })\n  @Column({\n    type: \"character varying\",\n    length: 500,\n  })\n  public source_comment_url?: string;\n\n  @ApiModelProperty({ description: \"Endorsement Source Context URL\" })\n  @Column({\n    type: \"character varying\",\n    length: 20,\n  })\n  public source_context_url: string;\n\n  @ApiModelProperty({\n    description: \"Endorsement Type\",\n    example: \"doc\",\n  })\n  @Column({\n    type: \"character varying\",\n    length: 20,\n  })\n  public type: string;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing endorsement creation\",\n    example: \"2022-10-19 13:24:51.000000\",\n  })\n  @CreateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public created_at?: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DbFilteredUser.html":{"url":"classes/DbFilteredUser.html","title":"class - DbFilteredUser","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DbFilteredUser\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/entities/filtered-users.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                full_name\n                            \n                            \n                                    Public\n                                    Optional\n                                login\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        full_name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Users fullname', example: 'Brian Douglas'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/filtered-users.entity.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        login\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User Login', example: 'bdougie'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/filtered-users.entity.ts:8\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiModelProperty } from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\n\nexport class DbFilteredUser {\n  @ApiModelProperty({\n    description: \"User Login\",\n    example: \"bdougie\",\n  })\n  public login?: string;\n\n  @ApiModelProperty({\n    description: \"Users fullname\",\n    example: \"Brian Douglas\",\n  })\n  public full_name: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbInsight.html":{"url":"entities/DbInsight.html","title":"entity - DbInsight","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbInsight\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/insight/entities/insight.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                created_at\n                            \n                            \n                                    Public\n                                    Optional\n                                deleted_at\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                is_favorite\n                            \n                            \n                                    Public\n                                is_featured\n                            \n                            \n                                    Public\n                                is_public\n                            \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                repos\n                            \n                            \n                                    Public\n                                short_code\n                            \n                            \n                                    Public\n                                    Optional\n                                updated_at\n                            \n                            \n                                    Public\n                                user\n                            \n                            \n                                    Public\n                                user_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing insight creation', example: '2022-10-19 13:24:51.000000'})@CreateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight.entity.ts:95\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        deleted_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing insight deletion', example: '2022-10-19 13:24:51.000000'})@DeleteDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight.entity.ts:115\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Insight identifier', example: 237133, type: 'integer'})@PrimaryColumn()@PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight.entity.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        is_favorite\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Flag indicating insight favorite', example: false})@Column({default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight.entity.ts:68\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        is_featured\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Flag indicating featured insight', example: false})@Column({default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight.entity.ts:75\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        is_public\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Flag indicating insight visibility', example: false})@Column({default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight.entity.ts:61\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Insight Page Name', example: 'Open Sauced Team'})@Column({type: 'character varying', length: 255})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight.entity.ts:54\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        repos\n                        \n                    \n                \n            \n                \n                    \n                        Type :     DbInsightRepo[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@OneToMany(undefined, insightRepo => insightRepo.insight)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight.entity.ts:127\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        short_code\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Title', example: 'Insight Page Short Code'})@Column({type: 'character varying', length: 25})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight.entity.ts:85\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing insight last updated', example: '2022-10-19 13:24:51.000000'})@UpdateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight.entity.ts:105\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbUser\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@ManyToOne(undefined, user => user.insights, {onDelete: 'CASCADE'})@JoinColumn({name: 'user_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight.entity.ts:123\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User ID', example: 237133, type: 'integer'})@Column({type: 'bigint', select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight.entity.ts:44\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  Column,\n  BaseEntity,\n  PrimaryColumn,\n  CreateDateColumn,\n  UpdateDateColumn,\n  OneToMany,\n  PrimaryGeneratedColumn,\n  DeleteDateColumn,\n  ManyToOne,\n  JoinColumn,\n} from \"typeorm\";\n\nimport {\n  ApiModelProperty,\n  ApiModelPropertyOptional,\n} from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\nimport { ApiHideProperty } from \"@nestjs/swagger\";\n\nimport { DbUser } from \"../../user/user.entity\";\nimport { DbInsightRepo } from \"./insight-repo.entity\";\n\n@Entity({ name: \"insights\" })\nexport class DbInsight extends BaseEntity {\n  @ApiModelProperty({\n    description: \"Insight identifier\",\n    example: 237133,\n    type: \"integer\",\n  })\n  @PrimaryColumn()\n  @PrimaryGeneratedColumn()\n  public id!: number;\n\n  @ApiModelProperty({\n    description: \"User ID\",\n    example: 237133,\n    type: \"integer\",\n  })\n  @Column({\n    type: \"bigint\",\n    select: false,\n  })\n  public user_id: number;\n\n  @ApiModelProperty({\n    description: \"Insight Page Name\",\n    example: \"Open Sauced Team\",\n  })\n  @Column({\n    type: \"character varying\",\n    length: 255,\n  })\n  public name: string;\n\n  @ApiModelProperty({\n    description: \"Flag indicating insight visibility\",\n    example: false,\n  })\n  @Column({ default: false })\n  public is_public: boolean;\n\n  @ApiModelProperty({\n    description: \"Flag indicating insight favorite\",\n    example: false,\n  })\n  @Column({ default: false })\n  public is_favorite: boolean;\n\n  @ApiModelProperty({\n    description: \"Flag indicating featured insight\",\n    example: false,\n  })\n  @Column({ default: false })\n  public is_featured: boolean;\n\n  @ApiModelProperty({\n    description: \"Title\",\n    example: \"Insight Page Short Code\",\n  })\n  @Column({\n    type: \"character varying\",\n    length: 25,\n  })\n  public short_code: string;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing insight creation\",\n    example: \"2022-10-19 13:24:51.000000\",\n  })\n  @CreateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public created_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing insight last updated\",\n    example: \"2022-10-19 13:24:51.000000\",\n  })\n  @UpdateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public updated_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing insight deletion\",\n    example: \"2022-10-19 13:24:51.000000\",\n  })\n  @DeleteDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public deleted_at?: Date;\n\n  @ApiHideProperty()\n  @ManyToOne(() => DbUser, (user) => user.insights, { onDelete: \"CASCADE\" })\n  @JoinColumn({\n    name: \"user_id\",\n    referencedColumnName: \"id\",\n  })\n  public user!: DbUser;\n\n  @ApiHideProperty()\n  @OneToMany(() => DbInsightRepo, (insightRepo) => insightRepo.insight)\n  public repos: DbInsightRepo[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbInsightMember.html":{"url":"entities/DbInsightMember.html","title":"entity - DbInsightMember","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbInsightMember\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/insight/entities/insight-member.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                access\n                            \n                            \n                                    Public\n                                    Optional\n                                created_at\n                            \n                            \n                                    Public\n                                    Optional\n                                deleted_at\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                insight_id\n                            \n                            \n                                    Public\n                                    Optional\n                                invitation_email\n                            \n                            \n                                    Public\n                                    Optional\n                                invitation_emailed_at\n                            \n                            \n                                    Public\n                                    Optional\n                                name\n                            \n                            \n                                    Public\n                                    Optional\n                                updated_at\n                            \n                            \n                                    Public\n                                    Optional\n                                user_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        access\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Insight Member Access', example: 'pending'})@Column({type: 'character varying', length: 20, default: 'pending'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight-member.entity.ts:63\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing team member creation', example: '2022-10-19 13:24:51.000000'})@CreateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight-member.entity.ts:73\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        deleted_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing team member deletion', example: '2022-10-19 13:24:51.000000'})@DeleteDateColumn({type: 'timestamp without time zone'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight-member.entity.ts:90\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Insight Member identifier', example: 'uuid-v4'})@PrimaryColumn()@PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight-member.entity.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        insight_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Insight ID', example: 237133, type: 'integer'})@Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight-member.entity.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        invitation_email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Team Member Invitation Email', example: 'hello@opensauced.pizza'})@Column({type: 'text', select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight-member.entity.ts:110\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        invitation_emailed_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing team member invitation email sent date', example: '2023-04-10 13:24:51.000000'})@Column({type: 'timestamp without time zone', select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight-member.entity.ts:100\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User's Name', example: 'Brian Douglas'})@Column({type: 'text', select: false, insert: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight-member.entity.ts:52\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing team member last updated', example: '2022-10-19 13:24:51.000000'})@UpdateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight-member.entity.ts:83\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User ID', example: 237133, type: 'integer'})@Column({type: 'integer'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight-member.entity.ts:41\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  Column,\n  BaseEntity,\n  PrimaryColumn,\n  CreateDateColumn,\n  UpdateDateColumn,\n  PrimaryGeneratedColumn,\n  DeleteDateColumn,\n} from \"typeorm\";\n\nimport {\n  ApiModelProperty,\n  ApiModelPropertyOptional,\n} from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\n\n@Entity({ name: \"insight_members\" })\nexport class DbInsightMember extends BaseEntity {\n  @ApiModelProperty({\n    description: \"Insight Member identifier\",\n    example: \"uuid-v4\",\n  })\n  @PrimaryColumn()\n  @PrimaryGeneratedColumn()\n  public id!: string;\n\n  @ApiModelProperty({\n    description: \"Insight ID\",\n    example: 237133,\n    type: \"integer\",\n  })\n  @Column()\n  public insight_id: number;\n\n  @ApiModelProperty({\n    description: \"User ID\",\n    example: 237133,\n    type: \"integer\",\n  })\n  @Column({ type: \"integer\" })\n  public user_id?: number;\n\n  @ApiModelProperty({\n    description: \"User's Name\",\n    example: \"Brian Douglas\",\n  })\n  @Column({\n    type: \"text\",\n    select: false,\n    insert: false,\n  })\n  public name?: string;\n\n  @ApiModelProperty({\n    description: \"Insight Member Access\",\n    example: \"pending\",\n  })\n  @Column({\n    type: \"character varying\",\n    length: 20,\n    default: \"pending\",\n  })\n  public access: string;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing team member creation\",\n    example: \"2022-10-19 13:24:51.000000\",\n  })\n  @CreateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public created_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing team member last updated\",\n    example: \"2022-10-19 13:24:51.000000\",\n  })\n  @UpdateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public updated_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing team member deletion\",\n    example: \"2022-10-19 13:24:51.000000\",\n  })\n  @DeleteDateColumn({ type: \"timestamp without time zone\" })\n  public deleted_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing team member invitation email sent date\",\n    example: \"2023-04-10 13:24:51.000000\",\n  })\n  @Column({\n    type: \"timestamp without time zone\",\n    select: false,\n  })\n  public invitation_emailed_at?: Date;\n\n  @ApiModelProperty({\n    description: \"Team Member Invitation Email\",\n    example: \"hello@opensauced.pizza\",\n  })\n  @Column({\n    type: \"text\",\n    select: false,\n  })\n  public invitation_email?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbInsightRepo.html":{"url":"entities/DbInsightRepo.html","title":"entity - DbInsightRepo","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbInsightRepo\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/insight/entities/insight-repo.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                created_at\n                            \n                            \n                                    Public\n                                    Optional\n                                deleted_at\n                            \n                            \n                                    Public\n                                full_name\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                insight\n                            \n                            \n                                    Public\n                                insight_id\n                            \n                            \n                                    Public\n                                repo_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing insight repo creation', example: '2022-10-19 13:24:51.000000'})@CreateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight-repo.entity.ts:63\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        deleted_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing insight repo deletion', example: '2022-10-19 13:24:51.000000'})@DeleteDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight-repo.entity.ts:73\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        full_name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Repo Full Name', example: 'open-sauced/insights'})@Column({type: 'text'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight-repo.entity.ts:53\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Insight identifier', example: 237133, type: 'integer'})@PrimaryColumn()@PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight-repo.entity.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        insight\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbInsight\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@ManyToOne(undefined, insight => insight.repos)@JoinColumn({name: 'insight_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight-repo.entity.ts:81\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        insight_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Insight ID', example: 237133, type: 'integer'})@Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight-repo.entity.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        repo_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Repo ID', example: 237133, type: 'integer'})@Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight-repo.entity.ts:46\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  Column,\n  BaseEntity,\n  PrimaryColumn,\n  CreateDateColumn,\n  ManyToOne,\n  JoinColumn,\n  PrimaryGeneratedColumn,\n  DeleteDateColumn,\n} from \"typeorm\";\nimport { ApiHideProperty } from \"@nestjs/swagger\";\n\nimport {\n  ApiModelProperty,\n  ApiModelPropertyOptional,\n} from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\n\nimport { DbInsight } from \"./insight.entity\";\n\n@Entity({ name: \"insight_repos\" })\nexport class DbInsightRepo extends BaseEntity {\n  @ApiModelProperty({\n    description: \"Insight identifier\",\n    example: 237133,\n    type: \"integer\",\n  })\n  @PrimaryColumn()\n  @PrimaryGeneratedColumn()\n  public id!: number;\n\n  @ApiModelProperty({\n    description: \"Insight ID\",\n    example: 237133,\n    type: \"integer\",\n  })\n  @Column()\n  public insight_id: number;\n\n  @ApiModelProperty({\n    description: \"Repo ID\",\n    example: 237133,\n    type: \"integer\",\n  })\n  @Column()\n  public repo_id: number;\n\n  @ApiModelProperty({\n    description: \"Repo Full Name\",\n    example: \"open-sauced/insights\",\n  })\n  @Column({ type: \"text\" })\n  public full_name: string;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing insight repo creation\",\n    example: \"2022-10-19 13:24:51.000000\",\n  })\n  @CreateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public created_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing insight repo deletion\",\n    example: \"2022-10-19 13:24:51.000000\",\n  })\n  @DeleteDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public deleted_at?: Date;\n\n  @ApiHideProperty()\n  @ManyToOne(() => DbInsight, (insight) => insight.repos)\n  @JoinColumn({\n    name: \"insight_id\",\n    referencedColumnName: \"id\",\n  })\n  public insight!: DbInsight;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbLog.html":{"url":"entities/DbLog.html","title":"entity - DbLog","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbLog\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/log/log.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                context\n                            \n                            \n                                    Public\n                                created_at\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                level\n                            \n                            \n                                    Public\n                                message\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        context\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/log/log.entity.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/log/log.entity.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn('uuid')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/log/log.entity.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        level\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/log/log.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        message\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/log/log.entity.ts:12\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { BaseEntity, Column, CreateDateColumn, Entity, PrimaryGeneratedColumn } from \"typeorm\";\n\n@Entity({ name: \"logs\" })\nexport class DbLog extends BaseEntity {\n  @PrimaryGeneratedColumn(\"uuid\")\n  public id: string;\n\n  @Column()\n  public context: string;\n\n  @Column()\n  public message: string;\n\n  @Column()\n  public level: string;\n\n  @CreateDateColumn()\n  public created_at: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbPRInsight.html":{"url":"entities/DbPRInsight.html","title":"entity - DbPRInsight","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbPRInsight\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/pull-requests/entities/pull-request-insight.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                accepted_prs\n                            \n                            \n                                    Public\n                                all_prs\n                            \n                            \n                                    Public\n                                day\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                interval\n                            \n                            \n                                    Public\n                                spam_prs\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        accepted_prs\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'PR Type: accepted requests count', example: 287, type: 'integer'})@Column({type: 'integer', default: 0, select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request-insight.entity.ts:65\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        all_prs\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'PR Type: all requests count', example: 287, type: 'integer'})@Column({type: 'integer', default: 0, select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request-insight.entity.ts:53\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        day\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Selected interval computed date in human readable format', example: '2022-08-28', type: 'string', format: 'date'})@Column({type: 'timestamp without time zone', default: () => now(), select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request-insight.entity.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Repository identifier', example: 71359796, type: 'integer'})@PrimaryColumn({type: 'bigint', select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request-insight.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        interval\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Selected interval in numerical days, goes back with number, 0 means today', example: 1, default: 0, type: 'integer'})@Column({type: 'integer', default: 0, select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request-insight.entity.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        spam_prs\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'PR Type: spam requests count', example: 287, type: 'integer'})@Column({type: 'integer', default: 0, select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request-insight.entity.ts:77\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Entity, BaseEntity, PrimaryColumn, Column } from \"typeorm\";\nimport { ApiModelProperty } from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\n\n@Entity({ name: \"pull_requests\" })\nexport class DbPRInsight extends BaseEntity {\n  @ApiModelProperty({\n    description: \"Repository identifier\",\n    example: 71359796,\n    type: \"integer\",\n  })\n  @PrimaryColumn({\n    type: \"bigint\",\n    select: false,\n  })\n  public id!: number;\n\n  @ApiModelProperty({\n    description: \"Selected interval in numerical days, goes back with number, 0 means today\",\n    example: 1,\n    default: 0,\n    type: \"integer\",\n  })\n  @Column({\n    type: \"integer\",\n    default: 0,\n    select: false,\n  })\n  public interval: number;\n\n  @ApiModelProperty({\n    description: \"Selected interval computed date in human readable format\",\n    example: \"2022-08-28\",\n    type: \"string\",\n    format: \"date\",\n  })\n  @Column({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n    select: false,\n  })\n  public day: Date;\n\n  @ApiModelProperty({\n    description: \"PR Type: all requests count\",\n    example: 287,\n    type: \"integer\",\n  })\n  @Column({\n    type: \"integer\",\n    default: 0,\n    select: false,\n  })\n  public all_prs: number;\n\n  @ApiModelProperty({\n    description: \"PR Type: accepted requests count\",\n    example: 287,\n    type: \"integer\",\n  })\n  @Column({\n    type: \"integer\",\n    default: 0,\n    select: false,\n  })\n  public accepted_prs: number;\n\n  @ApiModelProperty({\n    description: \"PR Type: spam requests count\",\n    example: 287,\n    type: \"integer\",\n  })\n  @Column({\n    type: \"integer\",\n    default: 0,\n    select: false,\n  })\n  public spam_prs: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbPullRequest.html":{"url":"entities/DbPullRequest.html","title":"entity - DbPullRequest","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbPullRequest\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/pull-requests/entities/pull-request.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                additions\n                            \n                            \n                                    Public\n                                    Optional\n                                assignee_avatar\n                            \n                            \n                                    Public\n                                    Optional\n                                assignee_login\n                            \n                            \n                                    Public\n                                author_avatar\n                            \n                            \n                                    Public\n                                author_login\n                            \n                            \n                                    Public\n                                    Optional\n                                changed_files\n                            \n                            \n                                    Public\n                                    Optional\n                                closed_at\n                            \n                            \n                                    Public\n                                    Optional\n                                comments\n                            \n                            \n                                    Public\n                                    Optional\n                                commits\n                            \n                            \n                                    Public\n                                    Optional\n                                created_at\n                            \n                            \n                                    Public\n                                    Optional\n                                deletions\n                            \n                            \n                                    Public\n                                draft\n                            \n                            \n                                    Public\n                                    Optional\n                                full_name\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                    Optional\n                                label_names\n                            \n                            \n                                    Public\n                                    Optional\n                                labels\n                            \n                            \n                                    Public\n                                    Optional\n                                last_updated_at\n                            \n                            \n                                    Public\n                                mergeable\n                            \n                            \n                                    Public\n                                merged\n                            \n                            \n                                    Public\n                                    Optional\n                                merged_at\n                            \n                            \n                                    Public\n                                    Optional\n                                merged_by_login\n                            \n                            \n                                    Public\n                                number\n                            \n                            \n                                    Public\n                                rebaseable\n                            \n                            \n                                    Public\n                                repo_id\n                            \n                            \n                                    Public\n                                    Optional\n                                source_branch\n                            \n                            \n                                    Public\n                                    Optional\n                                source_label\n                            \n                            \n                                    Public\n                                state\n                            \n                            \n                                    Public\n                                    Optional\n                                target_branch\n                            \n                            \n                                    Public\n                                    Optional\n                                target_label\n                            \n                            \n                                    Public\n                                title\n                            \n                            \n                                    Public\n                                    Optional\n                                updated_at\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        additions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'PR lines added', example: 10, type: 'integer'})@Column({type: 'bigint'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:244\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        assignee_avatar\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Pull request assignee avatar', example: undefined})@Column({type: 'text', default: ''})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:171\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        assignee_login\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Pull request assignee username', example: undefined})@Column({type: 'text', default: ''})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:161\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        author_avatar\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Pull request author avatar', example: 'https://avatars.githubusercontent.com/u/25160953?v=4'})@Column('text')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:151\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        author_login\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Pull request author username', example: 'Th3nn3ss'})@Column('text')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:144\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        changed_files\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'PR files changed', example: 5, type: 'integer'})@Column({type: 'bigint'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:260\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        closed_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Timestamp representing pr close date', example: '2022-08-28 22:04:29.000000'})@Column({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:191\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        comments\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'PR comments', example: 0, type: 'integer'})@Column({type: 'bigint'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:236\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        commits\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Number of commits in the PR', example: 4, type: 'integer'})@Column({type: 'bigint'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:279\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing pr creation date', example: '2022-08-28 22:04:29.000000'})@CreateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:181\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        deletions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'PR lines deleted', example: 5, type: 'integer'})@Column({type: 'bigint'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:252\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        draft\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Pull request is draft', example: false})@Column('boolean')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:45\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        full_name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Pull request repo full name', example: 'open-sauced/insights'})@Column({type: 'text', select: false, insert: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:271\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Pull request identifier', example: 1045024650, type: 'integer'})@PrimaryColumn('integer')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        label_names\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Pull request label names', example: showcase})@Column({type: 'text', select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:137\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        labels\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Pull request labels', example: [\n      {\n        \"id\": 4456742596,\n        \"url\": \"https://api.github.com/repos/denoland/fresh/labels/showcase\",\n        \"name\": \"showcase\",\n        \"color\": \"0e8a16\",\n        \"default\": false,\n        \"node_id\": \"LA_kwDOFcV7488AAAABCaR-xA\",\n        \"description\": \"\"\n      }\n    ]})@Column({type: 'text', select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:127\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        last_updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Timestamp representing internal last update', example: '2022-08-28 22:04:29.000000'})@Column({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:228\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        mergeable\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Pull request is mergeable', example: false})@Column('boolean')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:59\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        merged\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Pull request is merged', example: false})@Column('boolean')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:52\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        merged_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Timestamp representing pr merge date', example: '2022-08-28 22:04:29.000000'})@Column({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:201\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        merged_by_login\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Pull request merged by username', example: 'bdougie'})@Column('text')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:208\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        number\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Pull request number', example: 612, type: 'integer'})@Column('integer')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        rebaseable\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Pull request is rebaseable', example: false})@Column('boolean')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:66\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        repo_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@Column({type: 'integer', select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        source_branch\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Pull request source branch', example: 'main'})@Column('text')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:100\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        source_label\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Pull request source ref', example: 'Th3nn3ss:cli_split_kwargs'})@Column({type: 'text', default: ''})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:83\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        state\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Pull request state', example: 'closed'})@Column('text')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        target_branch\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Pull request target branch', example: 'cli_split_kwargs'})@Column('text')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:107\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        target_label\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Pull request target ref', example: 'aws:main'})@Column({type: 'text', default: ''})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:93\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Pull request title', example: 'fix(cli): arg tags value with equal sign'})@Column('text')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:73\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Timestamp representing repository last update', example: '2022-08-28 22:04:29.000000'})@Column({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:218\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Entity, Column, BaseEntity, PrimaryColumn, CreateDateColumn } from \"typeorm\";\nimport {\n  ApiModelProperty,\n  ApiModelPropertyOptional,\n} from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\nimport { ApiHideProperty } from \"@nestjs/swagger\";\n\n@Entity({ name: \"pull_requests\" })\nexport class DbPullRequest extends BaseEntity {\n  @ApiModelProperty({\n    description: \"Pull request identifier\",\n    example: 1045024650,\n    type: \"integer\",\n  })\n  @PrimaryColumn(\"integer\")\n  public id!: number;\n\n  @ApiHideProperty()\n  @Column({\n    type: \"integer\",\n    select: false,\n  })\n  public repo_id!: number;\n\n  @ApiModelProperty({\n    description: \"Pull request number\",\n    example: 612,\n    type: \"integer\",\n  })\n  @Column(\"integer\")\n  public number: number;\n\n  @ApiModelProperty({\n    description: \"Pull request state\",\n    example: \"closed\",\n  })\n  @Column(\"text\")\n  public state: string;\n\n  @ApiModelProperty({\n    description: \"Pull request is draft\",\n    example: false,\n  })\n  @Column(\"boolean\")\n  public draft: boolean;\n\n  @ApiModelProperty({\n    description: \"Pull request is merged\",\n    example: false,\n  })\n  @Column(\"boolean\")\n  public merged: boolean;\n\n  @ApiModelProperty({\n    description: \"Pull request is mergeable\",\n    example: false,\n  })\n  @Column(\"boolean\")\n  public mergeable: boolean;\n\n  @ApiModelProperty({\n    description: \"Pull request is rebaseable\",\n    example: false,\n  })\n  @Column(\"boolean\")\n  public rebaseable: boolean;\n\n  @ApiModelProperty({\n    description: \"Pull request title\",\n    example: \"fix(cli): arg tags value with equal sign\",\n  })\n  @Column(\"text\")\n  public title: string;\n\n  @ApiModelProperty({\n    description: \"Pull request source ref\",\n    example: \"Th3nn3ss:cli_split_kwargs\",\n  })\n  @Column({\n    type: \"text\",\n    default: \"\",\n  })\n  public source_label?: string;\n\n  @ApiModelProperty({\n    description: \"Pull request target ref\",\n    example: \"aws:main\",\n  })\n  @Column({\n    type: \"text\",\n    default: \"\",\n  })\n  public target_label?: string;\n\n  @ApiModelProperty({\n    description: \"Pull request source branch\",\n    example: \"main\",\n  })\n  @Column(\"text\")\n  public source_branch?: string;\n\n  @ApiModelProperty({\n    description: \"Pull request target branch\",\n    example: \"cli_split_kwargs\",\n  })\n  @Column(\"text\")\n  public target_branch?: string;\n\n  @ApiModelProperty({\n    description: \"Pull request labels\",\n    example: `[\n      {\n        \"id\": 4456742596,\n        \"url\": \"https://api.github.com/repos/denoland/fresh/labels/showcase\",\n        \"name\": \"showcase\",\n        \"color\": \"0e8a16\",\n        \"default\": false,\n        \"node_id\": \"LA_kwDOFcV7488AAAABCaR-xA\",\n        \"description\": \"\"\n      }\n    ]`,\n  })\n  @Column({\n    type: \"text\",\n    select: false,\n  })\n  public labels?: string;\n\n  @ApiModelProperty({\n    description: \"Pull request label names\",\n    example: `showcase`,\n  })\n  @Column({\n    type: \"text\",\n    select: false,\n  })\n  public label_names?: string[];\n\n  @ApiModelProperty({\n    description: \"Pull request author username\",\n    example: \"Th3nn3ss\",\n  })\n  @Column(\"text\")\n  public author_login: string;\n\n  @ApiModelProperty({\n    description: \"Pull request author avatar\",\n    example: \"https://avatars.githubusercontent.com/u/25160953?v=4\",\n  })\n  @Column(\"text\")\n  public author_avatar: string;\n\n  @ApiModelProperty({\n    description: \"Pull request assignee username\",\n    example: null,\n  })\n  @Column({\n    type: \"text\",\n    default: \"\",\n  })\n  public assignee_login?: string;\n\n  @ApiModelProperty({\n    description: \"Pull request assignee avatar\",\n    example: null,\n  })\n  @Column({\n    type: \"text\",\n    default: \"\",\n  })\n  public assignee_avatar?: string;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing pr creation date\",\n    example: \"2022-08-28 22:04:29.000000\",\n  })\n  @CreateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public created_at?: Date;\n\n  @ApiModelProperty({\n    description: \"Timestamp representing pr close date\",\n    example: \"2022-08-28 22:04:29.000000\",\n  })\n  @Column({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public closed_at?: Date;\n\n  @ApiModelProperty({\n    description: \"Timestamp representing pr merge date\",\n    example: \"2022-08-28 22:04:29.000000\",\n  })\n  @Column({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public merged_at?: Date;\n\n  @ApiModelProperty({\n    description: \"Pull request merged by username\",\n    example: \"bdougie\",\n  })\n  @Column(\"text\")\n  public merged_by_login?: string;\n\n  @ApiModelProperty({\n    description: \"Timestamp representing repository last update\",\n    example: \"2022-08-28 22:04:29.000000\",\n  })\n  @Column({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public updated_at?: Date;\n\n  @ApiModelProperty({\n    description: \"Timestamp representing internal last update\",\n    example: \"2022-08-28 22:04:29.000000\",\n  })\n  @Column({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public last_updated_at?: Date;\n\n  @ApiModelProperty({\n    description: \"PR comments\",\n    example: 0,\n    type: \"integer\",\n  })\n  @Column({ type: \"bigint\" })\n  public comments?: number;\n\n  @ApiModelProperty({\n    description: \"PR lines added\",\n    example: 10,\n    type: \"integer\",\n  })\n  @Column({ type: \"bigint\" })\n  public additions?: number;\n\n  @ApiModelProperty({\n    description: \"PR lines deleted\",\n    example: 5,\n    type: \"integer\",\n  })\n  @Column({ type: \"bigint\" })\n  public deletions?: number;\n\n  @ApiModelProperty({\n    description: \"PR files changed\",\n    example: 5,\n    type: \"integer\",\n  })\n  @Column({ type: \"bigint\" })\n  public changed_files?: number;\n\n  @ApiModelProperty({\n    description: \"Pull request repo full name\",\n    example: \"open-sauced/insights\",\n  })\n  @Column({\n    type: \"text\",\n    select: false,\n    insert: false,\n  })\n  public full_name?: string;\n\n  @ApiModelProperty({\n    description: \"Number of commits in the PR\",\n    example: 4,\n    type: \"integer\",\n  })\n  @Column({ type: \"bigint\" })\n  public commits?: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DbPullRequestContributor.html":{"url":"classes/DbPullRequestContributor.html","title":"class - DbPullRequestContributor","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DbPullRequestContributor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/pull-requests/dtos/pull-request-contributor.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                author_login\n                            \n                            \n                                    Public\n                                    Optional\n                                updated_at\n                            \n                            \n                                    Public\n                                user_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        author_login\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Pull request author username', example: 'Th3nn3ss'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/dtos/pull-request-contributor.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Timestamp representing pr last update', example: '2022-08-28 22:04:29.000000'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/dtos/pull-request-contributor.dto.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Pull request author id', example: 1})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/dtos/pull-request-contributor.dto.ts:14\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiModelProperty } from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\n\nexport class DbPullRequestContributor {\n  @ApiModelProperty({\n    description: \"Pull request author username\",\n    example: \"Th3nn3ss\",\n  })\n  public author_login: string;\n\n  @ApiModelProperty({\n    description: \"Pull request author id\",\n    example: 1,\n  })\n  public user_id: number;\n\n  @ApiModelProperty({\n    description: \"Timestamp representing pr last update\",\n    example: \"2022-08-28 22:04:29.000000\",\n  })\n  public updated_at?: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbPullRequestGitHubEvents.html":{"url":"entities/DbPullRequestGitHubEvents.html","title":"entity - DbPullRequestGitHubEvents","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbPullRequestGitHubEvents\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/timescale/entities/pull_request_github_event.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                event_id\n                            \n                            \n                                    Public\n                                    Optional\n                                pr_additions\n                            \n                            \n                                    Public\n                                pr_author_login\n                            \n                            \n                                    Public\n                                    Optional\n                                pr_base_label\n                            \n                            \n                                    Public\n                                    Optional\n                                pr_base_ref\n                            \n                            \n                                    Public\n                                    Optional\n                                pr_changed_files\n                            \n                            \n                                    Public\n                                    Optional\n                                pr_closed_at\n                            \n                            \n                                    Public\n                                    Optional\n                                pr_comments\n                            \n                            \n                                    Public\n                                    Optional\n                                pr_commits\n                            \n                            \n                                    Public\n                                    Optional\n                                pr_created_at\n                            \n                            \n                                    Public\n                                    Optional\n                                pr_deletions\n                            \n                            \n                                    Public\n                                    Optional\n                                pr_head_label\n                            \n                            \n                                    Public\n                                    Optional\n                                pr_head_ref\n                            \n                            \n                                    Public\n                                pr_is_draft\n                            \n                            \n                                    Public\n                                pr_is_merged\n                            \n                            \n                                    Public\n                                pr_is_rebaseable\n                            \n                            \n                                    Public\n                                pr_mergeable_state\n                            \n                            \n                                    Public\n                                    Optional\n                                pr_merged_at\n                            \n                            \n                                    Public\n                                pr_number\n                            \n                            \n                                    Public\n                                pr_state\n                            \n                            \n                                    Public\n                                pr_title\n                            \n                            \n                                    Public\n                                    Optional\n                                pr_updated_at\n                            \n                            \n                                    Public\n                                    Optional\n                                repo_name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        event_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Pull request event identifier', example: 1045024650, type: 'integer'})@PrimaryColumn('integer')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/timescale/entities/pull_request_github_event.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        pr_additions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'PR lines added', example: 10, type: 'integer'})@Column({type: 'bigint'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/timescale/entities/pull_request_github_event.ts:162\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        pr_author_login\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Pull request author username', example: 'Th3nn3ss'})@Column('text')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/timescale/entities/pull_request_github_event.ts:106\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        pr_base_label\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Pull request target ref', example: 'aws:main'})@Column({type: 'text', default: ''})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/timescale/entities/pull_request_github_event.ts:85\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        pr_base_ref\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Pull request target branch', example: 'main'})@Column('text')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/timescale/entities/pull_request_github_event.ts:99\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        pr_changed_files\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'PR files changed', example: 5, type: 'integer'})@Column({type: 'bigint'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/timescale/entities/pull_request_github_event.ts:178\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        pr_closed_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Timestamp representing pr close date', example: '2022-08-28 22:04:29.000000'})@Column({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/timescale/entities/pull_request_github_event.ts:126\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        pr_comments\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'PR comments', example: 0, type: 'integer'})@Column({type: 'bigint'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/timescale/entities/pull_request_github_event.ts:154\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        pr_commits\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Number of commits in the PR', example: 4, type: 'integer'})@Column({type: 'bigint'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/timescale/entities/pull_request_github_event.ts:197\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        pr_created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing pr creation date', example: '2022-08-28 22:04:29.000000'})@CreateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/timescale/entities/pull_request_github_event.ts:116\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        pr_deletions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'PR lines deleted', example: 5, type: 'integer'})@Column({type: 'bigint'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/timescale/entities/pull_request_github_event.ts:170\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        pr_head_label\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Pull request source ref', example: 'Th3nn3ss:cli_split_kwargs'})@Column({type: 'text', default: ''})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/timescale/entities/pull_request_github_event.ts:75\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        pr_head_ref\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Pull request source branch', example: 'cli_split_kwargs'})@Column('text')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/timescale/entities/pull_request_github_event.ts:92\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        pr_is_draft\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Pull request is draft', example: false})@Column('boolean')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/timescale/entities/pull_request_github_event.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        pr_is_merged\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Pull request is merged', example: false})@Column('boolean')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/timescale/entities/pull_request_github_event.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        pr_is_rebaseable\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Pull request is rebaseable', example: false})@Column('boolean')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/timescale/entities/pull_request_github_event.ts:58\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        pr_mergeable_state\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Pull request mergeable state', example: 'unknown'})@Column('text')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/timescale/entities/pull_request_github_event.ts:51\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        pr_merged_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Timestamp representing pr merge date', example: '2022-08-28 22:04:29.000000'})@Column({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/timescale/entities/pull_request_github_event.ts:136\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        pr_number\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Pull request number', example: 612, type: 'integer'})@Column('integer')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/timescale/entities/pull_request_github_event.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        pr_state\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Pull request state', example: 'closed'})@Column('text')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/timescale/entities/pull_request_github_event.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        pr_title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Pull request title', example: 'fix(cli): arg tags value with equal sign'})@Column('text')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/timescale/entities/pull_request_github_event.ts:65\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        pr_updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Timestamp representing repository last update', example: '2022-08-28 22:04:29.000000'})@Column({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/timescale/entities/pull_request_github_event.ts:146\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        repo_name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Pull request repo full name', example: 'open-sauced/insights'})@Column({type: 'text', select: false, insert: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/timescale/entities/pull_request_github_event.ts:189\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  ApiModelProperty,\n  ApiModelPropertyOptional,\n} from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\nimport { Entity, BaseEntity, PrimaryColumn, Column, CreateDateColumn } from \"typeorm\";\n\n@Entity({ name: \"pull_request_github_events\" })\nexport class DbPullRequestGitHubEvents extends BaseEntity {\n  @ApiModelProperty({\n    description: \"Pull request event identifier\",\n    example: 1045024650,\n    type: \"integer\",\n  })\n  @PrimaryColumn(\"integer\")\n  event_id: number;\n\n  @ApiModelProperty({\n    description: \"Pull request number\",\n    example: 612,\n    type: \"integer\",\n  })\n  @Column(\"integer\")\n  public pr_number: number;\n\n  @ApiModelProperty({\n    description: \"Pull request state\",\n    example: \"closed\",\n  })\n  @Column(\"text\")\n  public pr_state: string;\n\n  @ApiModelProperty({\n    description: \"Pull request is draft\",\n    example: false,\n  })\n  @Column(\"boolean\")\n  public pr_is_draft: boolean;\n\n  @ApiModelProperty({\n    description: \"Pull request is merged\",\n    example: false,\n  })\n  @Column(\"boolean\")\n  public pr_is_merged: boolean;\n\n  @ApiModelProperty({\n    description: \"Pull request mergeable state\",\n    example: \"unknown\",\n  })\n  @Column(\"text\")\n  public pr_mergeable_state: string;\n\n  @ApiModelProperty({\n    description: \"Pull request is rebaseable\",\n    example: false,\n  })\n  @Column(\"boolean\")\n  public pr_is_rebaseable: boolean;\n\n  @ApiModelProperty({\n    description: \"Pull request title\",\n    example: \"fix(cli): arg tags value with equal sign\",\n  })\n  @Column(\"text\")\n  public pr_title: string;\n\n  @ApiModelProperty({\n    description: \"Pull request source ref\",\n    example: \"Th3nn3ss:cli_split_kwargs\",\n  })\n  @Column({\n    type: \"text\",\n    default: \"\",\n  })\n  public pr_head_label?: string;\n\n  @ApiModelProperty({\n    description: \"Pull request target ref\",\n    example: \"aws:main\",\n  })\n  @Column({\n    type: \"text\",\n    default: \"\",\n  })\n  public pr_base_label?: string;\n\n  @ApiModelProperty({\n    description: \"Pull request source branch\",\n    example: \"cli_split_kwargs\",\n  })\n  @Column(\"text\")\n  public pr_head_ref?: string;\n\n  @ApiModelProperty({\n    description: \"Pull request target branch\",\n    example: \"main\",\n  })\n  @Column(\"text\")\n  public pr_base_ref?: string;\n\n  @ApiModelProperty({\n    description: \"Pull request author username\",\n    example: \"Th3nn3ss\",\n  })\n  @Column(\"text\")\n  public pr_author_login: string;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing pr creation date\",\n    example: \"2022-08-28 22:04:29.000000\",\n  })\n  @CreateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public pr_created_at?: Date;\n\n  @ApiModelProperty({\n    description: \"Timestamp representing pr close date\",\n    example: \"2022-08-28 22:04:29.000000\",\n  })\n  @Column({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public pr_closed_at?: Date;\n\n  @ApiModelProperty({\n    description: \"Timestamp representing pr merge date\",\n    example: \"2022-08-28 22:04:29.000000\",\n  })\n  @Column({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public pr_merged_at?: Date;\n\n  @ApiModelProperty({\n    description: \"Timestamp representing repository last update\",\n    example: \"2022-08-28 22:04:29.000000\",\n  })\n  @Column({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public pr_updated_at?: Date;\n\n  @ApiModelProperty({\n    description: \"PR comments\",\n    example: 0,\n    type: \"integer\",\n  })\n  @Column({ type: \"bigint\" })\n  public pr_comments?: number;\n\n  @ApiModelProperty({\n    description: \"PR lines added\",\n    example: 10,\n    type: \"integer\",\n  })\n  @Column({ type: \"bigint\" })\n  public pr_additions?: number;\n\n  @ApiModelProperty({\n    description: \"PR lines deleted\",\n    example: 5,\n    type: \"integer\",\n  })\n  @Column({ type: \"bigint\" })\n  public pr_deletions?: number;\n\n  @ApiModelProperty({\n    description: \"PR files changed\",\n    example: 5,\n    type: \"integer\",\n  })\n  @Column({ type: \"bigint\" })\n  public pr_changed_files?: number;\n\n  @ApiModelProperty({\n    description: \"Pull request repo full name\",\n    example: \"open-sauced/insights\",\n  })\n  @Column({\n    type: \"text\",\n    select: false,\n    insert: false,\n  })\n  public repo_name?: string;\n\n  @ApiModelProperty({\n    description: \"Number of commits in the PR\",\n    example: 4,\n    type: \"integer\",\n  })\n  @Column({ type: \"bigint\" })\n  public pr_commits?: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbPullRequestReview.html":{"url":"entities/DbPullRequestReview.html","title":"entity - DbPullRequestReview","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbPullRequestReview\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/pull-requests/entities/pull-request-review.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                created_at\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                    Optional\n                                published_at\n                            \n                            \n                                    Public\n                                pullRequest\n                            \n                            \n                                    Public\n                                reviewer_login\n                            \n                            \n                                    Public\n                                    Optional\n                                state\n                            \n                            \n                                    Public\n                                    Optional\n                                updated_at\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing pr review creation date', example: '2022-08-28 22:04:29.000000'})@CreateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request-review.entity.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Pull request review identifier', example: 123456789, type: 'integer'})@PrimaryColumn('integer')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request-review.entity.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        published_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Timestamp representing pr review published date', example: '2022-08-28 22:04:29.000000'})@Column({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request-review.entity.ts:47\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        pullRequest\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbPullRequest\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined)@JoinColumn({name: 'pull_request_id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request-review.entity.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        reviewer_login\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Pull request reviewer username', example: 'Bdougie'})@Column('text')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request-review.entity.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        state\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Pull request review state', example: 'approved'})@Column('text')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request-review.entity.ts:64\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Timestamp representing pr review update date', example: '2022-08-28 22:04:29.000000'})@Column({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request-review.entity.ts:57\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Entity, Column, ManyToOne, JoinColumn, BaseEntity, CreateDateColumn, PrimaryColumn } from \"typeorm\";\nimport {\n  ApiModelProperty,\n  ApiModelPropertyOptional,\n} from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\nimport { DbPullRequest } from \"./pull-request.entity\";\n\n@Entity(\"pull_request_reviews\")\nexport class DbPullRequestReview extends BaseEntity {\n  @ApiModelProperty({\n    description: \"Pull request review identifier\",\n    example: 123456789,\n    type: \"integer\",\n  })\n  @PrimaryColumn(\"integer\")\n  public id: number;\n\n  @ManyToOne(() => DbPullRequest)\n  @JoinColumn({ name: \"pull_request_id\" })\n  public pullRequest: DbPullRequest;\n\n  @ApiModelProperty({\n    description: \"Pull request reviewer username\",\n    example: \"Bdougie\",\n  })\n  @Column(\"text\")\n  public reviewer_login: string;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing pr review creation date\",\n    example: \"2022-08-28 22:04:29.000000\",\n  })\n  @CreateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public created_at?: Date;\n\n  @ApiModelProperty({\n    description: \"Timestamp representing pr review published date\",\n    example: \"2022-08-28 22:04:29.000000\",\n  })\n  @Column({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public published_at?: Date;\n\n  @ApiModelProperty({\n    description: \"Timestamp representing pr review update date\",\n    example: \"2022-08-28 22:04:29.000000\",\n  })\n  @Column({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public updated_at?: Date;\n\n  @ApiModelProperty({\n    description: \"Pull request review state\",\n    example: \"approved\",\n  })\n  @Column(\"text\")\n  public state?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbRepoLoginContributions.html":{"url":"entities/DbRepoLoginContributions.html","title":"entity - DbRepoLoginContributions","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbRepoLoginContributions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/contribution/entities/repo-user-contributions.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                comments\n                            \n                            \n                                commits\n                            \n                            \n                                issues_created\n                            \n                            \n                                    Public\n                                    Optional\n                                login\n                            \n                            \n                                prs_created\n                            \n                            \n                                prs_reviewed\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        comments\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Number of comments associated with a user login', example: 0, type: 'integer'})@Column({type: 'bigint', select: false, insert: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/contribution/entities/repo-user-contributions.entity.ts:75\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        commits\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Number of commits associated with a user login', example: 0, type: 'integer'})@Column({type: 'bigint', select: false, insert: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/contribution/entities/repo-user-contributions.entity.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        issues_created\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Number of issues created by a user login', example: 0, type: 'integer'})@Column({type: 'bigint', select: false, insert: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/contribution/entities/repo-user-contributions.entity.ts:63\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        login\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User list collaborator's login', example: 'bdougie'})@Column({type: 'text', select: false, insert: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/contribution/entities/repo-user-contributions.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        prs_created\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Number of PRs created associated with a user login', example: 0, type: 'integer'})@Column({type: 'bigint', select: false, insert: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/contribution/entities/repo-user-contributions.entity.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        prs_reviewed\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Number of PRs reviewed by a user login', example: 0, type: 'integer'})@Column({type: 'bigint', select: false, insert: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/contribution/entities/repo-user-contributions.entity.ts:51\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity } from \"typeorm\";\nimport { ApiModelProperty } from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\n\n@Entity({ name: \"repo_user_contributions\" })\nexport class DbRepoLoginContributions {\n  @ApiModelProperty({\n    description: \"User list collaborator's login\",\n    example: \"bdougie\",\n  })\n  @Column({\n    type: \"text\",\n    select: false,\n    insert: false,\n  })\n  public login?: string;\n\n  @ApiModelProperty({\n    description: \"Number of commits associated with a user login\",\n    example: 0,\n    type: \"integer\",\n  })\n  @Column({\n    type: \"bigint\",\n    select: false,\n    insert: false,\n  })\n  commits: number;\n\n  @ApiModelProperty({\n    description: \"Number of PRs created associated with a user login\",\n    example: 0,\n    type: \"integer\",\n  })\n  @Column({\n    type: \"bigint\",\n    select: false,\n    insert: false,\n  })\n  prs_created: number;\n\n  @ApiModelProperty({\n    description: \"Number of PRs reviewed by a user login\",\n    example: 0,\n    type: \"integer\",\n  })\n  @Column({\n    type: \"bigint\",\n    select: false,\n    insert: false,\n  })\n  prs_reviewed: number;\n\n  @ApiModelProperty({\n    description: \"Number of issues created by a user login\",\n    example: 0,\n    type: \"integer\",\n  })\n  @Column({\n    type: \"bigint\",\n    select: false,\n    insert: false,\n  })\n  issues_created: number;\n\n  @ApiModelProperty({\n    description: \"Number of comments associated with a user login\",\n    example: 0,\n    type: \"integer\",\n  })\n  @Column({\n    type: \"bigint\",\n    select: false,\n    insert: false,\n  })\n  comments: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbRepoToUserStargazers.html":{"url":"entities/DbRepoToUserStargazers.html","title":"entity - DbRepoToUserStargazers","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbRepoToUserStargazers\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/repo/entities/repo.to.user.stargazers.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                created_at\n                            \n                            \n                                    Public\n                                    Optional\n                                deleted_at\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                repo\n                            \n                            \n                                    Public\n                                repo_id\n                            \n                            \n                                    Public\n                                    Optional\n                                updated_at\n                            \n                            \n                                    Public\n                                user\n                            \n                            \n                                    Public\n                                user_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing stargaze creation', example: '2016-10-19 13:24:51.000000'})@CreateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.stargazers.entity.ts:53\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        deleted_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@DeleteDateColumn({type: 'timestamp without time zone', select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.stargazers.entity.ts:70\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Stargaze identifier', example: 196, type: 'integer'})@PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.stargazers.entity.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        repo\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbRepo\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@ManyToOne(undefined, repo => repo.repoToUserStargazers)@JoinColumn({name: 'repo_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.stargazers.entity.ts:86\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        repo_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Repository identifier', example: 71359796, type: 'integer'})@Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.stargazers.entity.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing stargaze last update', example: '2022-08-28 22:04:29.000000'})@UpdateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.stargazers.entity.ts:63\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbUser\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@ManyToOne(undefined, user => user.repoToUserStargazers)@JoinColumn({name: 'user_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.stargazers.entity.ts:78\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User identifier', example: 237133, type: 'integer'})@Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.stargazers.entity.ts:35\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Column,\n  CreateDateColumn,\n  DeleteDateColumn,\n  Entity,\n  JoinColumn,\n  ManyToOne,\n  PrimaryGeneratedColumn,\n  UpdateDateColumn,\n} from \"typeorm\";\nimport { ApiHideProperty } from \"@nestjs/swagger\";\nimport {\n  ApiModelProperty,\n  ApiModelPropertyOptional,\n} from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\nimport { DbUser } from \"../../user/user.entity\";\nimport { DbRepo } from \"./repo.entity\";\n\n@Entity({ name: \"users_to_repos_stargazers\" })\nexport class DbRepoToUserStargazers {\n  @ApiModelProperty({\n    description: \"Stargaze identifier\",\n    example: 196,\n    type: \"integer\",\n  })\n  @PrimaryGeneratedColumn()\n  public id!: number;\n\n  @ApiModelProperty({\n    description: \"User identifier\",\n    example: 237133,\n    type: \"integer\",\n  })\n  @Column()\n  public user_id!: number;\n\n  @ApiModelProperty({\n    description: \"Repository identifier\",\n    example: 71359796,\n    type: \"integer\",\n  })\n  @Column()\n  public repo_id!: number;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing stargaze creation\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  @CreateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public created_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing stargaze last update\",\n    example: \"2022-08-28 22:04:29.000000\",\n  })\n  @UpdateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public updated_at?: Date;\n\n  @ApiHideProperty()\n  @DeleteDateColumn({\n    type: \"timestamp without time zone\",\n    select: false,\n  })\n  public deleted_at?: Date;\n\n  @ApiHideProperty()\n  @ManyToOne(() => DbUser, (user) => user.repoToUserStargazers)\n  @JoinColumn({\n    name: \"user_id\",\n    referencedColumnName: \"id\",\n  })\n  public user!: DbUser;\n\n  @ApiHideProperty()\n  @ManyToOne(() => DbRepo, (repo) => repo.repoToUserStargazers)\n  @JoinColumn({\n    name: \"repo_id\",\n    referencedColumnName: \"id\",\n  })\n  public repo!: DbRepo;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbRepoToUserStars.html":{"url":"entities/DbRepoToUserStars.html","title":"entity - DbRepoToUserStars","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbRepoToUserStars\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/repo/entities/repo.to.user.stars.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                created_at\n                            \n                            \n                                    Public\n                                    Optional\n                                deleted_at\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                repo\n                            \n                            \n                                    Public\n                                repo_id\n                            \n                            \n                                    Public\n                                    Optional\n                                updated_at\n                            \n                            \n                                    Public\n                                user\n                            \n                            \n                                    Public\n                                user_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing star creation', example: '2016-10-19 13:24:51.000000'})@CreateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.stars.entity.ts:53\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        deleted_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@DeleteDateColumn({type: 'timestamp without time zone', select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.stars.entity.ts:70\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Star identifier', example: 196, type: 'integer'})@PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.stars.entity.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        repo\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbRepo\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@ManyToOne(undefined, repo => repo.repoToUserStars)@JoinColumn({name: 'repo_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.stars.entity.ts:86\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        repo_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Repository identifier', example: 71359796, type: 'integer'})@Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.stars.entity.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing star last update', example: '2022-08-28 22:04:29.000000'})@UpdateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.stars.entity.ts:63\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbUser\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@ManyToOne(undefined, user => user.repoToUserStars)@JoinColumn({name: 'user_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.stars.entity.ts:78\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User identifier', example: 237133, type: 'integer'})@Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.stars.entity.ts:35\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Column,\n  CreateDateColumn,\n  DeleteDateColumn,\n  Entity,\n  JoinColumn,\n  ManyToOne,\n  PrimaryGeneratedColumn,\n  UpdateDateColumn,\n} from \"typeorm\";\nimport { ApiHideProperty } from \"@nestjs/swagger\";\nimport {\n  ApiModelProperty,\n  ApiModelPropertyOptional,\n} from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\nimport { DbUser } from \"../../user/user.entity\";\nimport { DbRepo } from \"./repo.entity\";\n\n@Entity({ name: \"users_to_repos_stars\" })\nexport class DbRepoToUserStars {\n  @ApiModelProperty({\n    description: \"Star identifier\",\n    example: 196,\n    type: \"integer\",\n  })\n  @PrimaryGeneratedColumn()\n  public id!: number;\n\n  @ApiModelProperty({\n    description: \"User identifier\",\n    example: 237133,\n    type: \"integer\",\n  })\n  @Column()\n  public user_id!: number;\n\n  @ApiModelProperty({\n    description: \"Repository identifier\",\n    example: 71359796,\n    type: \"integer\",\n  })\n  @Column()\n  public repo_id!: number;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing star creation\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  @CreateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public created_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing star last update\",\n    example: \"2022-08-28 22:04:29.000000\",\n  })\n  @UpdateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public updated_at?: Date;\n\n  @ApiHideProperty()\n  @DeleteDateColumn({\n    type: \"timestamp without time zone\",\n    select: false,\n  })\n  public deleted_at?: Date;\n\n  @ApiHideProperty()\n  @ManyToOne(() => DbUser, (user) => user.repoToUserStars)\n  @JoinColumn({\n    name: \"user_id\",\n    referencedColumnName: \"id\",\n  })\n  public user!: DbUser;\n\n  @ApiHideProperty()\n  @ManyToOne(() => DbRepo, (repo) => repo.repoToUserStars)\n  @JoinColumn({\n    name: \"repo_id\",\n    referencedColumnName: \"id\",\n  })\n  public repo!: DbRepo;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbRepoToUserSubmissions.html":{"url":"entities/DbRepoToUserSubmissions.html","title":"entity - DbRepoToUserSubmissions","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbRepoToUserSubmissions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/repo/entities/repo.to.user.submissions.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                created_at\n                            \n                            \n                                    Public\n                                    Optional\n                                deleted_at\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                    Optional\n                                is_accepted\n                            \n                            \n                                    Public\n                                repo\n                            \n                            \n                                    Public\n                                repo_id\n                            \n                            \n                                    Public\n                                    Optional\n                                updated_at\n                            \n                            \n                                    Public\n                                user\n                            \n                            \n                                    Public\n                                user_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing submission creation', example: '2016-10-19 13:24:51.000000'})@CreateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.submissions.entity.ts:60\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        deleted_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@DeleteDateColumn({type: 'timestamp without time zone', select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.submissions.entity.ts:77\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Submission identifier', example: 196, type: 'integer'})@PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.submissions.entity.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        is_accepted\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Flag representing if the submission is approved by open sauced staff', example: false})@Column({default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.submissions.entity.ts:50\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        repo\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbRepo\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@ManyToOne(undefined, repo => repo.repoToUserSubmissions)@JoinColumn({name: 'repo_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.submissions.entity.ts:93\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        repo_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Repository identifier', example: 71359796, type: 'integer'})@Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.submissions.entity.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing submission last update', example: '2022-08-28 22:04:29.000000'})@UpdateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.submissions.entity.ts:70\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbUser\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@ManyToOne(undefined, user => user.repoToUserSubmissions)@JoinColumn({name: 'user_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.submissions.entity.ts:85\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User identifier', example: 237133, type: 'integer'})@Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.submissions.entity.ts:35\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Column,\n  CreateDateColumn,\n  DeleteDateColumn,\n  Entity,\n  JoinColumn,\n  ManyToOne,\n  PrimaryGeneratedColumn,\n  UpdateDateColumn,\n} from \"typeorm\";\nimport { ApiHideProperty } from \"@nestjs/swagger\";\nimport {\n  ApiModelProperty,\n  ApiModelPropertyOptional,\n} from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\nimport { DbUser } from \"../../user/user.entity\";\nimport { DbRepo } from \"./repo.entity\";\n\n@Entity({ name: \"users_to_repos_submissions\" })\nexport class DbRepoToUserSubmissions {\n  @ApiModelProperty({\n    description: \"Submission identifier\",\n    example: 196,\n    type: \"integer\",\n  })\n  @PrimaryGeneratedColumn()\n  public id!: number;\n\n  @ApiModelProperty({\n    description: \"User identifier\",\n    example: 237133,\n    type: \"integer\",\n  })\n  @Column()\n  public user_id!: number;\n\n  @ApiModelProperty({\n    description: \"Repository identifier\",\n    example: 71359796,\n    type: \"integer\",\n  })\n  @Column()\n  public repo_id!: number;\n\n  @ApiModelProperty({\n    description: \"Flag representing if the submission is approved by open sauced staff\",\n    example: false,\n  })\n  @Column({ default: false })\n  public is_accepted?: boolean;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing submission creation\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  @CreateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public created_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing submission last update\",\n    example: \"2022-08-28 22:04:29.000000\",\n  })\n  @UpdateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public updated_at?: Date;\n\n  @ApiHideProperty()\n  @DeleteDateColumn({\n    type: \"timestamp without time zone\",\n    select: false,\n  })\n  public deleted_at?: Date;\n\n  @ApiHideProperty()\n  @ManyToOne(() => DbUser, (user) => user.repoToUserSubmissions)\n  @JoinColumn({\n    name: \"user_id\",\n    referencedColumnName: \"id\",\n  })\n  public user!: DbUser;\n\n  @ApiHideProperty()\n  @ManyToOne(() => DbRepo, (repo) => repo.repoToUserSubmissions)\n  @JoinColumn({\n    name: \"repo_id\",\n    referencedColumnName: \"id\",\n  })\n  public repo!: DbRepo;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbRepoToUserVotes.html":{"url":"entities/DbRepoToUserVotes.html","title":"entity - DbRepoToUserVotes","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbRepoToUserVotes\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/repo/entities/repo.to.user.votes.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                created_at\n                            \n                            \n                                    Public\n                                    Optional\n                                deleted_at\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                repo\n                            \n                            \n                                    Public\n                                repo_id\n                            \n                            \n                                    Public\n                                    Optional\n                                updated_at\n                            \n                            \n                                    Public\n                                user\n                            \n                            \n                                    Public\n                                user_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing vote creation', example: '2016-10-19 13:24:51.000000'})@CreateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.votes.entity.ts:53\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        deleted_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@DeleteDateColumn({type: 'timestamp without time zone', select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.votes.entity.ts:70\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Vote identifier', example: 196, type: 'integer'})@PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.votes.entity.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        repo\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbRepo\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@ManyToOne(undefined, repo => repo.repoToUserVotes)@JoinColumn({name: 'repo_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.votes.entity.ts:86\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        repo_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Repository identifier', example: 71359796, type: 'integer'})@Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.votes.entity.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing vote last update', example: '2022-08-28 22:04:29.000000'})@UpdateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.votes.entity.ts:63\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbUser\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@ManyToOne(undefined, user => user.repoToUserVotes)@JoinColumn({name: 'user_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.votes.entity.ts:78\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User identifier', example: 237133, type: 'integer'})@Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.votes.entity.ts:35\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Column,\n  CreateDateColumn,\n  DeleteDateColumn,\n  Entity,\n  JoinColumn,\n  ManyToOne,\n  PrimaryGeneratedColumn,\n  UpdateDateColumn,\n} from \"typeorm\";\nimport { ApiHideProperty } from \"@nestjs/swagger\";\nimport {\n  ApiModelProperty,\n  ApiModelPropertyOptional,\n} from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\nimport { DbUser } from \"../../user/user.entity\";\nimport { DbRepo } from \"./repo.entity\";\n\n@Entity({ name: \"users_to_repos_votes\" })\nexport class DbRepoToUserVotes {\n  @ApiModelProperty({\n    description: \"Vote identifier\",\n    example: 196,\n    type: \"integer\",\n  })\n  @PrimaryGeneratedColumn()\n  public id!: number;\n\n  @ApiModelProperty({\n    description: \"User identifier\",\n    example: 237133,\n    type: \"integer\",\n  })\n  @Column()\n  public user_id!: number;\n\n  @ApiModelProperty({\n    description: \"Repository identifier\",\n    example: 71359796,\n    type: \"integer\",\n  })\n  @Column()\n  public repo_id!: number;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing vote creation\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  @CreateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public created_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing vote last update\",\n    example: \"2022-08-28 22:04:29.000000\",\n  })\n  @UpdateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public updated_at?: Date;\n\n  @ApiHideProperty()\n  @DeleteDateColumn({\n    type: \"timestamp without time zone\",\n    select: false,\n  })\n  public deleted_at?: Date;\n\n  @ApiHideProperty()\n  @ManyToOne(() => DbUser, (user) => user.repoToUserVotes)\n  @JoinColumn({\n    name: \"user_id\",\n    referencedColumnName: \"id\",\n  })\n  public user!: DbUser;\n\n  @ApiHideProperty()\n  @ManyToOne(() => DbRepo, (repo) => repo.repoToUserVotes)\n  @JoinColumn({\n    name: \"repo_id\",\n    referencedColumnName: \"id\",\n  })\n  public repo!: DbRepo;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbSubscription.html":{"url":"entities/DbSubscription.html","title":"entity - DbSubscription","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbSubscription\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/subscription/stripe-subscription.dto.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                cancel_at\n                            \n                            \n                                    Public\n                                cancel_at_period_end\n                            \n                            \n                                    Public\n                                    Optional\n                                canceled_at\n                            \n                            \n                                    Public\n                                    Optional\n                                created_at\n                            \n                            \n                                    Public\n                                    Optional\n                                current_period_end_at\n                            \n                            \n                                    Public\n                                    Optional\n                                current_period_start_at\n                            \n                            \n                                    Public\n                                    Optional\n                                ended_at\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                metadata\n                            \n                            \n                                    Public\n                                price_id\n                            \n                            \n                                    Public\n                                quantity\n                            \n                            \n                                    Public\n                                status\n                            \n                            \n                                    Public\n                                    Optional\n                                trial_end_at\n                            \n                            \n                                    Public\n                                    Optional\n                                trial_start_at\n                            \n                            \n                                    Public\n                                user_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        cancel_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing cancel date', example: '2016-10-19 13:24:51.000000'})@Column({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/subscription/stripe-subscription.dto.ts:111\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        cancel_at_period_end\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing subscription creation', example: '2016-10-19 13:24:51.000000'})@Column({type: 'boolean'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/subscription/stripe-subscription.dto.ts:61\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        canceled_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing canceled date', example: '2016-10-19 13:24:51.000000'})@Column({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/subscription/stripe-subscription.dto.ts:121\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing subscription creation', example: '2016-10-19 13:24:51.000000'})@CreateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/subscription/stripe-subscription.dto.ts:71\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        current_period_end_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing current period end date', example: '2016-10-19 13:24:51.000000'})@Column({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/subscription/stripe-subscription.dto.ts:91\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        current_period_start_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing current period start date', example: '2016-10-19 13:24:51.000000'})@Column({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/subscription/stripe-subscription.dto.ts:81\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        ended_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing end date', example: '2016-10-19 13:24:51.000000'})@Column({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/subscription/stripe-subscription.dto.ts:101\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Subscription identifier', example: 'sub_1234'})@PrimaryColumn('text')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/subscription/stripe-subscription.dto.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        metadata\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@Column({type: 'text', select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/subscription/stripe-subscription.dto.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        price_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Price ID', example: 'price_12345'})@Column({type: 'text'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/subscription/stripe-subscription.dto.ts:47\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        quantity\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Quantity', example: 1})@Column({type: 'bigint'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/subscription/stripe-subscription.dto.ts:54\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Subscription Status', example: 'active'})@Column({type: 'text', default: 'active'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/subscription/stripe-subscription.dto.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        trial_end_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing trial end date', example: '2016-10-19 13:24:51.000000'})@Column({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/subscription/stripe-subscription.dto.ts:141\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        trial_start_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing trial start date', example: '2016-10-19 13:24:51.000000'})@Column({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/subscription/stripe-subscription.dto.ts:131\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User identifier', example: 42211})@Column({type: 'bigint'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/subscription/stripe-subscription.dto.ts:23\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Entity, BaseEntity, PrimaryColumn, Column, CreateDateColumn } from \"typeorm\";\n\nimport {\n  ApiModelProperty,\n  ApiModelPropertyOptional,\n} from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\nimport { ApiHideProperty } from \"@nestjs/swagger\";\n\n@Entity({ name: \"subscriptions\" })\nexport class DbSubscription extends BaseEntity {\n  @ApiModelProperty({\n    description: \"Subscription identifier\",\n    example: \"sub_1234\",\n  })\n  @PrimaryColumn(\"text\")\n  public id!: string;\n\n  @ApiModelProperty({\n    description: \"User identifier\",\n    example: 42211,\n  })\n  @Column({ type: \"bigint\" })\n  public user_id!: number;\n\n  @ApiModelProperty({\n    description: \"Subscription Status\",\n    example: \"active\",\n  })\n  @Column({\n    type: \"text\",\n    default: \"active\",\n  })\n  public status!: string;\n\n  @ApiHideProperty()\n  @Column({\n    type: \"text\",\n    select: false,\n  })\n  public metadata!: string;\n\n  @ApiModelProperty({\n    description: \"Price ID\",\n    example: \"price_12345\",\n  })\n  @Column({ type: \"text\" })\n  public price_id!: string;\n\n  @ApiModelProperty({\n    description: \"Quantity\",\n    example: 1,\n  })\n  @Column({ type: \"bigint\" })\n  public quantity!: number;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing subscription creation\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  @Column({ type: \"boolean\" })\n  public cancel_at_period_end!: boolean;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing subscription creation\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  @CreateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public created_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing current period start date\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  @Column({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public current_period_start_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing current period end date\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  @Column({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public current_period_end_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing end date\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  @Column({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public ended_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing cancel date\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  @Column({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public cancel_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing canceled date\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  @Column({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public canceled_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing trial start date\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  @Column({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public trial_start_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing trial end date\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  @Column({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public trial_end_at?: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DbTimezone.html":{"url":"classes/DbTimezone.html","title":"class - DbTimezone","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DbTimezone\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user-lists/entities/timezones.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                timezone\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        timezone\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Timezone string', example: 'America/Los_Angeles'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-lists/entities/timezones.entity.ts:8\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiModelProperty } from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\n\nexport class DbTimezone {\n  @ApiModelProperty({\n    description: \"Timezone string\",\n    example: \"America/Los_Angeles\",\n  })\n  public timezone: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DbTopUser.html":{"url":"classes/DbTopUser.html","title":"class - DbTopUser","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DbTopUser\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/entities/top-users.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                login\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        login\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Top User Login', example: 'bdougie'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/top-users.entity.ts:8\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiModelProperty } from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\n\nexport class DbTopUser {\n  @ApiModelProperty({\n    description: \"Top User Login\",\n    example: \"bdougie\",\n  })\n  public login?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbUserCollaboration.html":{"url":"entities/DbUserCollaboration.html","title":"entity - DbUserCollaboration","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbUserCollaboration\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/entities/user-collaboration.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                collaboration_emailed_at\n                            \n                            \n                                    Public\n                                    Optional\n                                created_at\n                            \n                            \n                                    Public\n                                    Optional\n                                deleted_at\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                message\n                            \n                            \n                                    Public\n                                    Optional\n                                request_emailed_at\n                            \n                            \n                                    Public\n                                request_user\n                            \n                            \n                                    Public\n                                    Optional\n                                request_user_id\n                            \n                            \n                                    Public\n                                status\n                            \n                            \n                                    Public\n                                    Optional\n                                updated_at\n                            \n                            \n                                    Public\n                                user\n                            \n                            \n                                    Public\n                                    Optional\n                                user_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        collaboration_emailed_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing collaboration acceptance email sent date', example: '2023-04-10 13:24:51.000000'})@Column({type: 'timestamp without time zone', select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-collaboration.entity.ts:133\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing user collaboration creation', example: '2022-10-19 13:24:51.000000'})@CreateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-collaboration.entity.ts:93\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        deleted_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing user collaboration deletion', example: '2022-10-19 13:24:51.000000'})@DeleteDateColumn({type: 'timestamp without time zone', select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-collaboration.entity.ts:113\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User Collaboration identifier', example: 'uuid-v4'})@PrimaryColumn()@PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-collaboration.entity.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        message\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Collaboration Request Message', example: 'Hey, are you up for collaborating on this cool project?'})@Column({type: 'character varying', length: 500, default: ''})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-collaboration.entity.ts:72\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        request_emailed_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing collaboration request email sent date', example: '2023-04-10 13:24:51.000000'})@Column({type: 'timestamp without time zone', select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-collaboration.entity.ts:123\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        request_user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbUser\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@ManyToOne(undefined, user => user.request_collaborations, {onDelete: 'CASCADE'})@JoinColumn({name: 'request_user_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-collaboration.entity.ts:61\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        request_user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Collaboration Request User ID', example: 31333, type: 'integer'})@Column({type: 'integer'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-collaboration.entity.ts:45\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Collaboration Status', example: 'pending'})@Column({type: 'character varying', length: 20, default: 'pending'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-collaboration.entity.ts:83\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing user collaboration last updated', example: '2022-10-19 13:24:51.000000'})@UpdateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-collaboration.entity.ts:103\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbUser\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@ManyToOne(undefined, user => user.collaborations, {onDelete: 'CASCADE'})@JoinColumn({name: 'user_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-collaboration.entity.ts:53\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Collaboration Receipient User ID', example: 237133, type: 'integer'})@Column({type: 'integer'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-collaboration.entity.ts:37\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  Column,\n  BaseEntity,\n  PrimaryColumn,\n  CreateDateColumn,\n  UpdateDateColumn,\n  PrimaryGeneratedColumn,\n  DeleteDateColumn,\n  JoinColumn,\n  ManyToOne,\n} from \"typeorm\";\n\nimport {\n  ApiModelProperty,\n  ApiModelPropertyOptional,\n} from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\nimport { ApiHideProperty } from \"@nestjs/swagger\";\nimport { DbUser } from \"../user.entity\";\n\n@Entity({ name: \"user_collaborations\" })\nexport class DbUserCollaboration extends BaseEntity {\n  @ApiModelProperty({\n    description: \"User Collaboration identifier\",\n    example: \"uuid-v4\",\n  })\n  @PrimaryColumn()\n  @PrimaryGeneratedColumn()\n  public id!: string;\n\n  @ApiModelProperty({\n    description: \"Collaboration Receipient User ID\",\n    example: 237133,\n    type: \"integer\",\n  })\n  @Column({ type: \"integer\" })\n  public user_id?: number;\n\n  @ApiModelProperty({\n    description: \"Collaboration Request User ID\",\n    example: 31333,\n    type: \"integer\",\n  })\n  @Column({ type: \"integer\" })\n  public request_user_id?: number;\n\n  @ApiHideProperty()\n  @ManyToOne(() => DbUser, (user) => user.collaborations, { onDelete: \"CASCADE\" })\n  @JoinColumn({\n    name: \"user_id\",\n    referencedColumnName: \"id\",\n  })\n  public user: DbUser;\n\n  @ApiHideProperty()\n  @ManyToOne(() => DbUser, (user) => user.request_collaborations, { onDelete: \"CASCADE\" })\n  @JoinColumn({\n    name: \"request_user_id\",\n    referencedColumnName: \"id\",\n  })\n  public request_user: DbUser;\n\n  @ApiModelProperty({\n    description: \"Collaboration Request Message\",\n    example: \"Hey, are you up for collaborating on this cool project?\",\n  })\n  @Column({\n    type: \"character varying\",\n    length: 500,\n    default: \"\",\n  })\n  public message: string;\n\n  @ApiModelProperty({\n    description: \"Collaboration Status\",\n    example: \"pending\",\n  })\n  @Column({\n    type: \"character varying\",\n    length: 20,\n    default: \"pending\",\n  })\n  public status: string;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing user collaboration creation\",\n    example: \"2022-10-19 13:24:51.000000\",\n  })\n  @CreateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public created_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing user collaboration last updated\",\n    example: \"2022-10-19 13:24:51.000000\",\n  })\n  @UpdateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public updated_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing user collaboration deletion\",\n    example: \"2022-10-19 13:24:51.000000\",\n  })\n  @DeleteDateColumn({\n    type: \"timestamp without time zone\",\n    select: false,\n  })\n  public deleted_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing collaboration request email sent date\",\n    example: \"2023-04-10 13:24:51.000000\",\n  })\n  @Column({\n    type: \"timestamp without time zone\",\n    select: false,\n  })\n  public request_emailed_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing collaboration acceptance email sent date\",\n    example: \"2023-04-10 13:24:51.000000\",\n  })\n  @Column({\n    type: \"timestamp without time zone\",\n    select: false,\n  })\n  public collaboration_emailed_at?: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbUserHighlight.html":{"url":"entities/DbUserHighlight.html","title":"entity - DbUserHighlight","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbUserHighlight\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/entities/user-highlight.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                created_at\n                            \n                            \n                                    Public\n                                    Optional\n                                deleted_at\n                            \n                            \n                                    Public\n                                    Optional\n                                featured\n                            \n                            \n                                    Public\n                                    Optional\n                                full_name\n                            \n                            \n                                    Public\n                                highlight\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                    Optional\n                                login\n                            \n                            \n                                    Public\n                                    Optional\n                                name\n                            \n                            \n                                    Public\n                                    Optional\n                                pinned\n                            \n                            \n                                    Public\n                                reactions\n                            \n                            \n                                    Public\n                                    Optional\n                                shipped_at\n                            \n                            \n                                    Public\n                                tagged_repos\n                            \n                            \n                                    Public\n                                    Optional\n                                title\n                            \n                            \n                                    Public\n                                type\n                            \n                            \n                                    Public\n                                    Optional\n                                updated_at\n                            \n                            \n                                    Public\n                                    Optional\n                                url\n                            \n                            \n                                    Public\n                                user\n                            \n                            \n                                    Public\n                                user_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing highlight creation date', example: '2023-01-19 13:24:51.000000'})@CreateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight.entity.ts:99\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        deleted_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing highlight deletion date', example: '2023-01-19 13:24:51.000000'})@DeleteDateColumn({type: 'timestamp without time zone'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight.entity.ts:116\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        featured\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Whether the highlight is featured or not', example: false})@Column({type: 'boolean', default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight.entity.ts:89\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        full_name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Highlight Repo Full Name', example: 'open-sauced/insights'})@Column({type: 'text', select: false, insert: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight.entity.ts:134\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        highlight\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Highlight Text', example: \n    I made my first open source pull request!\n\n    github.com/open-sauced/insights/pull/1})@Column('text')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight.entity.ts:62\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User Highlight identifier', example: 237133, type: 'integer'})@PrimaryGeneratedColumn({type: 'bigint'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight.entity.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        login\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Highlight User Login', example: 'bdougie'})@Column({type: 'text', select: false, insert: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight.entity.ts:156\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Highlight User Full Name', example: 'Brian Douglas'})@Column({type: 'text', select: false, insert: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight.entity.ts:145\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        pinned\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Whether the highlight is pinned to the top', example: false})@Column({type: 'boolean', default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight.entity.ts:79\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        reactions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbUserHighlightReaction[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@OneToMany(undefined, highlightReaction => highlightReaction.highlight)@JoinColumn({name: 'highlight_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight.entity.ts:185\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        shipped_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing highlight shipped date', example: '2023-01-19 13:24:51.000000'})@Column({type: 'timestamp without time zone'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight.entity.ts:123\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        tagged_repos\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'An array of full-names of tagged repositories', example: undefined, type: 'string', isArray: true})@Column({type: 'varchar', array: true, default: '{}'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight.entity.ts:169\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Highlight Title', example: 'My First PR!'})@Column('text')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight.entity.ts:52\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Highlight type', example: 'pull_request'})@Column('text')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight.entity.ts:69\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing highlight updated date', example: '2023-01-19 13:24:51.000000'})@UpdateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight.entity.ts:109\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        url\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Highlight Pull Request URL', example: 'github.com/open-sauced/insights/pull/1'})@Column('text')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight.entity.ts:45\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbUser\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@ManyToOne(undefined, user => user.highlights, {onDelete: 'CASCADE'})@JoinColumn({name: 'user_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight.entity.ts:177\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User identifier', example: 237133, type: 'integer'})@Column('bigint')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight.entity.ts:38\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  BaseEntity,\n  Column,\n  PrimaryGeneratedColumn,\n  CreateDateColumn,\n  DeleteDateColumn,\n  UpdateDateColumn,\n  OneToMany,\n  ManyToOne,\n  JoinColumn,\n} from \"typeorm\";\n\nimport {\n  ApiModelProperty,\n  ApiModelPropertyOptional,\n} from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\nimport { ApiHideProperty } from \"@nestjs/swagger\";\nimport { DbUser } from \"../user.entity\";\nimport { DbUserHighlightReaction } from \"./user-highlight-reaction.entity\";\n\n@Entity({ name: \"user_highlights\" })\nexport class DbUserHighlight extends BaseEntity {\n  @ApiModelProperty({\n    description: \"User Highlight identifier\",\n    example: 237133,\n    type: \"integer\",\n  })\n  @PrimaryGeneratedColumn({ type: \"bigint\" })\n  public id!: number;\n\n  @ApiModelProperty({\n    description: \"User identifier\",\n    example: 237133,\n    type: \"integer\",\n  })\n  @Column(\"bigint\")\n  public user_id: number;\n\n  @ApiModelProperty({\n    description: \"Highlight Pull Request URL\",\n    example: \"github.com/open-sauced/insights/pull/1\",\n  })\n  @Column(\"text\")\n  public url?: string;\n\n  @ApiModelProperty({\n    description: \"Highlight Title\",\n    example: \"My First PR!\",\n  })\n  @Column(\"text\")\n  public title?: string;\n\n  @ApiModelProperty({\n    description: \"Highlight Text\",\n    example: `\n    I made my first open source pull request!\n\n    github.com/open-sauced/insights/pull/1`,\n  })\n  @Column(\"text\")\n  public highlight: string;\n\n  @ApiModelProperty({\n    description: \"Highlight type\",\n    example: \"pull_request\",\n  })\n  @Column(\"text\")\n  public type: string;\n\n  @ApiModelProperty({\n    description: \"Whether the highlight is pinned to the top\",\n    example: false,\n  })\n  @Column({\n    type: \"boolean\",\n    default: false,\n  })\n  public pinned?: boolean;\n\n  @ApiModelProperty({\n    description: \"Whether the highlight is featured or not\",\n    example: false,\n  })\n  @Column({\n    type: \"boolean\",\n    default: false,\n  })\n  public featured?: boolean;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing highlight creation date\",\n    example: \"2023-01-19 13:24:51.000000\",\n  })\n  @CreateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public created_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing highlight updated date\",\n    example: \"2023-01-19 13:24:51.000000\",\n  })\n  @UpdateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public updated_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing highlight deletion date\",\n    example: \"2023-01-19 13:24:51.000000\",\n  })\n  @DeleteDateColumn({ type: \"timestamp without time zone\" })\n  public deleted_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing highlight shipped date\",\n    example: \"2023-01-19 13:24:51.000000\",\n  })\n  @Column({ type: \"timestamp without time zone\" })\n  public shipped_at?: Date;\n\n  @ApiModelProperty({\n    description: \"Highlight Repo Full Name\",\n    example: \"open-sauced/insights\",\n  })\n  @Column({\n    type: \"text\",\n    select: false,\n    insert: false,\n  })\n  public full_name?: string;\n\n  @ApiModelProperty({\n    description: \"Highlight User Full Name\",\n    example: \"Brian Douglas\",\n  })\n  @Column({\n    type: \"text\",\n    select: false,\n    insert: false,\n  })\n  public name?: string;\n\n  @ApiModelProperty({\n    description: \"Highlight User Login\",\n    example: \"bdougie\",\n  })\n  @Column({\n    type: \"text\",\n    select: false,\n    insert: false,\n  })\n  public login?: string;\n\n  @ApiModelProperty({\n    description: \"An array of full-names of tagged repositories\",\n    example: [\"open-sauced/insights\", \"open-sauced/ai\"],\n    type: \"string\",\n    isArray: true,\n  })\n  @Column({\n    type: \"varchar\",\n    array: true,\n    default: \"{}\",\n  })\n  public tagged_repos: string[];\n\n  @ApiHideProperty()\n  @ManyToOne(() => DbUser, (user) => user.highlights, { onDelete: \"CASCADE\" })\n  @JoinColumn({\n    name: \"user_id\",\n    referencedColumnName: \"id\",\n  })\n  public user: DbUser;\n\n  @ApiHideProperty()\n  @OneToMany(() => DbUserHighlightReaction, (highlightReaction) => highlightReaction.highlight)\n  @JoinColumn({\n    name: \"highlight_id\",\n    referencedColumnName: \"id\",\n  })\n  public reactions: DbUserHighlightReaction[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbUserHighlightReaction.html":{"url":"entities/DbUserHighlightReaction.html","title":"entity - DbUserHighlightReaction","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbUserHighlightReaction\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/entities/user-highlight-reaction.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                created_at\n                            \n                            \n                                    Public\n                                    Optional\n                                deleted_at\n                            \n                            \n                                    Optional\n                                emoji\n                            \n                            \n                                    Public\n                                emoji_id\n                            \n                            \n                                    Optional\n                                highlight\n                            \n                            \n                                    Public\n                                highlight_id\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                    Optional\n                                reaction_count\n                            \n                            \n                                    Public\n                                    Optional\n                                updated_at\n                            \n                            \n                                    Optional\n                                user\n                            \n                            \n                                    Public\n                                user_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing highlight reaction creation', example: '2016-10-19 13:24:51.000000'})@CreateDateColumn({type: 'timestamp without time zone', default: () => now(), select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight-reaction.entity.ts:70\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        deleted_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@DeleteDateColumn({type: 'timestamp without time zone'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight-reaction.entity.ts:85\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        emoji\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbEmoji\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@ManyToOne(undefined, reaction => reaction.emoji)@JoinColumn({name: 'emoji_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight-reaction.entity.ts:118\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        emoji_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Emoji identifier', example: 'uuid-v4'})@Column({type: 'text', select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight-reaction.entity.ts:59\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        highlight\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbUserHighlight\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@ManyToOne(undefined, reaction => reaction.highlight)@JoinColumn({name: 'highlight_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight-reaction.entity.ts:102\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        highlight_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Highlight identifier', example: 71359796, type: 'integer'})@Column({type: 'integer', select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight-reaction.entity.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Reaction identifier', example: 'uuid-v4'})@PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight-reaction.entity.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        reaction_count\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({type: 'integer'})@Column({type: 'integer', select: false, insert: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight-reaction.entity.ts:94\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing highlight reaction last update', example: '2022-08-28 22:04:29.000000'})@UpdateDateColumn({type: 'timestamp without time zone', default: () => now(), select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight-reaction.entity.ts:81\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbUser\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@ManyToOne(undefined, reaction => reaction.user)@JoinColumn({name: 'user_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight-reaction.entity.ts:110\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User identifier', example: 237133, type: 'integer'})@Column({type: 'integer', select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight-reaction.entity.ts:49\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Column,\n  CreateDateColumn,\n  DeleteDateColumn,\n  Entity,\n  JoinColumn,\n  ManyToOne,\n  PrimaryGeneratedColumn,\n  UpdateDateColumn,\n} from \"typeorm\";\nimport { ApiHideProperty } from \"@nestjs/swagger\";\nimport {\n  ApiModelProperty,\n  ApiModelPropertyOptional,\n} from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\nimport { DbEmoji } from \"../../emoji/entities/emoji.entity\";\nimport { DbUser } from \"../user.entity\";\nimport { DbUserHighlight } from \"./user-highlight.entity\";\n\n@Entity({ name: \"user_highlight_reactions\" })\nexport class DbUserHighlightReaction {\n  @ApiModelProperty({\n    description: \"Reaction identifier\",\n    example: \"uuid-v4\",\n  })\n  @PrimaryGeneratedColumn()\n  public id!: string;\n\n  @ApiModelProperty({\n    description: \"Highlight identifier\",\n    example: 71359796,\n    type: \"integer\",\n  })\n  @Column({\n    type: \"integer\",\n    select: false,\n  })\n  public highlight_id!: number;\n\n  @ApiModelProperty({\n    description: \"User identifier\",\n    example: 237133,\n    type: \"integer\",\n  })\n  @Column({\n    type: \"integer\",\n    select: false,\n  })\n  public user_id!: number;\n\n  @ApiModelProperty({\n    description: \"Emoji identifier\",\n    example: \"uuid-v4\",\n  })\n  @Column({\n    type: \"text\",\n    select: false,\n  })\n  public emoji_id!: string;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing highlight reaction creation\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  @CreateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n    select: false,\n  })\n  public created_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing highlight reaction last update\",\n    example: \"2022-08-28 22:04:29.000000\",\n  })\n  @UpdateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n    select: false,\n  })\n  public updated_at?: Date;\n\n  @ApiHideProperty()\n  @DeleteDateColumn({ type: \"timestamp without time zone\" })\n  public deleted_at?: Date;\n\n  // virtual columns\n  @ApiModelProperty({ type: \"integer\" })\n  @Column({\n    type: \"integer\",\n    select: false,\n    insert: false,\n  })\n  public reaction_count?: number;\n\n  @ApiHideProperty()\n  @ManyToOne(() => DbUserHighlightReaction, (reaction) => reaction.highlight)\n  @JoinColumn({\n    name: \"highlight_id\",\n    referencedColumnName: \"id\",\n  })\n  highlight?: DbUserHighlight;\n\n  @ApiHideProperty()\n  @ManyToOne(() => DbUserHighlightReaction, (reaction) => reaction.user)\n  @JoinColumn({\n    name: \"user_id\",\n    referencedColumnName: \"id\",\n  })\n  user?: DbUser;\n\n  @ApiHideProperty()\n  @ManyToOne(() => DbUserHighlightReaction, (reaction) => reaction.emoji)\n  @JoinColumn({\n    name: \"emoji_id\",\n    referencedColumnName: \"id\",\n  })\n  emoji?: DbEmoji;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DbUserHighlightReactionResponse.html":{"url":"classes/DbUserHighlightReactionResponse.html","title":"class - DbUserHighlightReactionResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DbUserHighlightReactionResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/highlight/dtos/highlight-options.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                    Optional\n                                reaction_users\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        reaction_users\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Usernames of users who reacted with this emoji', type: 'string', example: undefined, isArray: true})@IsString({each: true})@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/highlight/dtos/highlight-options.dto.ts:33\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiPropertyOptional, PickType } from \"@nestjs/swagger\";\nimport { IsOptional, IsString } from \"class-validator\";\nimport { PageOptionsDto } from \"../../common/dtos/page-options.dto\";\nimport { DbUserHighlightReaction } from \"../../user/entities/user-highlight-reaction.entity\";\n\nexport class HighlightOptionsDto extends PageOptionsDto {\n  @ApiPropertyOptional({\n    description: \"Highlight Repo Filter\",\n    example: \"open-sauced/insights\",\n  })\n  @IsString()\n  @IsOptional()\n  readonly repo?: string;\n\n  @ApiPropertyOptional({\n    description: \"Highlight User Filter\",\n    example: \"RitaDee\",\n  })\n  @IsString()\n  @IsOptional()\n  readonly contributor?: string;\n}\n\nexport class DbUserHighlightReactionResponse extends PickType(DbUserHighlightReaction, [\"emoji_id\", \"reaction_count\"]) {\n  @ApiPropertyOptional({\n    description: \"Usernames of users who reacted with this emoji\",\n    type: \"string\",\n    example: [\"RitaDee\", \"diivi\"],\n    isArray: true,\n  })\n  @IsString({ each: true })\n  @IsOptional()\n  readonly reaction_users?: string[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DbUserHighlightRepo.html":{"url":"classes/DbUserHighlightRepo.html","title":"class - DbUserHighlightRepo","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DbUserHighlightRepo\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/highlight/entities/user-highlight-repo.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                full_name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        full_name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Highlight Repo Full Name', example: 'open-sauced/insights'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/highlight/entities/user-highlight-repo.entity.ts:8\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiModelProperty } from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\n\nexport class DbUserHighlightRepo {\n  @ApiModelProperty({\n    description: \"Highlight Repo Full Name\",\n    example: \"open-sauced/insights\",\n  })\n  public full_name?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbUserList.html":{"url":"entities/DbUserList.html","title":"entity - DbUserList","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbUserList\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user-lists/entities/user-list.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                created_at\n                            \n                            \n                                    Public\n                                    Optional\n                                deleted_at\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                is_featured\n                            \n                            \n                                    Public\n                                is_public\n                            \n                            \n                                    Public\n                                list_user\n                            \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                    Optional\n                                updated_at\n                            \n                            \n                                    Public\n                                user_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing insight creation', example: '2022-10-19 13:24:51.000000'})@CreateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-lists/entities/user-list.entity.ts:75\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        deleted_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing insight deletion', example: '2022-10-19 13:24:51.000000'})@DeleteDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-lists/entities/user-list.entity.ts:95\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User List identifier', example: 'uuid-v4'})@PrimaryColumn()@PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-lists/entities/user-list.entity.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        is_featured\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Flag indicating featured list', example: false})@Column({default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-lists/entities/user-list.entity.ts:65\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        is_public\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Flag indicating insight visibility', example: false})@Column({default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-lists/entities/user-list.entity.ts:58\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        list_user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbUser\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@ManyToOne(undefined, user => user.lists, {onDelete: 'CASCADE'})@JoinColumn({name: 'user_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-lists/entities/user-list.entity.ts:103\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'List Name', example: 'JavaScript Developers'})@Column({type: 'character varying', length: 255})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-lists/entities/user-list.entity.ts:51\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing insight last updated', example: '2022-10-19 13:24:51.000000'})@UpdateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-lists/entities/user-list.entity.ts:85\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User ID', example: 237133, type: 'integer'})@Column({type: 'bigint', select: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-lists/entities/user-list.entity.ts:41\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  Column,\n  BaseEntity,\n  PrimaryColumn,\n  CreateDateColumn,\n  UpdateDateColumn,\n  PrimaryGeneratedColumn,\n  DeleteDateColumn,\n  ManyToOne,\n  JoinColumn,\n} from \"typeorm\";\n\nimport {\n  ApiModelProperty,\n  ApiModelPropertyOptional,\n} from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\nimport { ApiHideProperty } from \"@nestjs/swagger\";\n\nimport { DbUser } from \"../../user/user.entity\";\n\n@Entity({ name: \"user_lists\" })\nexport class DbUserList extends BaseEntity {\n  @ApiModelProperty({\n    description: \"User List identifier\",\n    example: \"uuid-v4\",\n  })\n  @PrimaryColumn()\n  @PrimaryGeneratedColumn()\n  public id!: string;\n\n  @ApiModelProperty({\n    description: \"User ID\",\n    example: 237133,\n    type: \"integer\",\n  })\n  @Column({\n    type: \"bigint\",\n    select: true,\n  })\n  public user_id: number;\n\n  @ApiModelProperty({\n    description: \"List Name\",\n    example: \"JavaScript Developers\",\n  })\n  @Column({\n    type: \"character varying\",\n    length: 255,\n  })\n  public name: string;\n\n  @ApiModelProperty({\n    description: \"Flag indicating insight visibility\",\n    example: false,\n  })\n  @Column({ default: false })\n  public is_public: boolean;\n\n  @ApiModelProperty({\n    description: \"Flag indicating featured list\",\n    example: false,\n  })\n  @Column({ default: false })\n  public is_featured: boolean;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing insight creation\",\n    example: \"2022-10-19 13:24:51.000000\",\n  })\n  @CreateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public created_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing insight last updated\",\n    example: \"2022-10-19 13:24:51.000000\",\n  })\n  @UpdateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public updated_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing insight deletion\",\n    example: \"2022-10-19 13:24:51.000000\",\n  })\n  @DeleteDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public deleted_at?: Date;\n\n  @ApiHideProperty()\n  @ManyToOne(() => DbUser, (user) => user.lists, { onDelete: \"CASCADE\" })\n  @JoinColumn({\n    name: \"user_id\",\n    referencedColumnName: \"id\",\n  })\n  public list_user!: DbUser;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbUserListContributor.html":{"url":"entities/DbUserListContributor.html","title":"entity - DbUserListContributor","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbUserListContributor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user-lists/entities/user-list-contributor.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                created_at\n                            \n                            \n                                    Public\n                                    Optional\n                                deleted_at\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                list_id\n                            \n                            \n                                    Public\n                                    Optional\n                                login\n                            \n                            \n                                    Public\n                                user_id\n                            \n                            \n                                    Public\n                                user_list_contributor\n                            \n                            \n                                    Public\n                                    Optional\n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing top repo first index', example: '2016-10-19 13:24:51.000000'})@CreateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-lists/entities/user-list-contributor.entity.ts:59\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        deleted_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@DeleteDateColumn({type: 'timestamp without time zone', select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-lists/entities/user-list-contributor.entity.ts:66\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User list contributor identifier', example: 'uuid-v4'})@PrimaryColumn()@PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-lists/entities/user-list-contributor.entity.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        list_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'List identifier', example: 'uuid-v4'})@Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-lists/entities/user-list-contributor.entity.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        login\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User list collaborator's login', example: 'bdougie'})@Column({type: 'text', select: false, insert: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-lists/entities/user-list-contributor.entity.ts:85\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User identifier', example: 237133, type: 'integer'})@Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-lists/entities/user-list-contributor.entity.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        user_list_contributor\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbUser\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@ManyToOne(undefined, user => user.user_list_contributors)@JoinColumn({name: 'user_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-lists/entities/user-list-contributor.entity.ts:74\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'List user source username', example: 'sauceduser'})@Column({type: 'text'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-lists/entities/user-list-contributor.entity.ts:49\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Column,\n  CreateDateColumn,\n  DeleteDateColumn,\n  Entity,\n  JoinColumn,\n  ManyToOne,\n  PrimaryColumn,\n  PrimaryGeneratedColumn,\n} from \"typeorm\";\nimport { ApiHideProperty } from \"@nestjs/swagger\";\nimport {\n  ApiModelProperty,\n  ApiModelPropertyOptional,\n} from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\n\nimport { DbUser } from \"../../user/user.entity\";\n\n@Entity({ name: \"user_list_contributors\" })\nexport class DbUserListContributor {\n  @ApiModelProperty({\n    description: \"User list contributor identifier\",\n    example: \"uuid-v4\",\n  })\n  @PrimaryColumn()\n  @PrimaryGeneratedColumn()\n  public id!: string;\n\n  @ApiModelProperty({\n    description: \"User identifier\",\n    example: 237133,\n    type: \"integer\",\n  })\n  @Column()\n  public user_id!: number;\n\n  @ApiModelProperty({\n    description: \"List identifier\",\n    example: \"uuid-v4\",\n  })\n  @Column()\n  public list_id!: string;\n\n  @ApiModelProperty({\n    description: \"List user source username\",\n    example: \"sauceduser\",\n  })\n  @Column({ type: \"text\" })\n  public username?: string;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing top repo first index\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  @CreateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public created_at?: Date;\n\n  @ApiHideProperty()\n  @DeleteDateColumn({\n    type: \"timestamp without time zone\",\n    select: false,\n  })\n  public deleted_at?: Date;\n\n  @ApiHideProperty()\n  @ManyToOne(() => DbUser, (user) => user.user_list_contributors)\n  @JoinColumn({\n    name: \"user_id\",\n    referencedColumnName: \"id\",\n  })\n  public user_list_contributor!: DbUser;\n\n  @ApiModelProperty({\n    description: \"User list collaborator's login\",\n    example: \"bdougie\",\n  })\n  @Column({\n    type: \"text\",\n    select: false,\n    insert: false,\n  })\n  public login?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbUserListContributorStat.html":{"url":"entities/DbUserListContributorStat.html","title":"entity - DbUserListContributorStat","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbUserListContributorStat\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/contribution/dtos/repo-user-contributions.dto.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                comments\n                            \n                            \n                                commits\n                            \n                            \n                                issues_created\n                            \n                            \n                                    Public\n                                    Optional\n                                login\n                            \n                            \n                                prs_created\n                            \n                            \n                                prs_reviewed\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        comments\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Number of comments associated with a user login', example: 0, type: 'integer'})@Column({type: 'bigint', select: false, insert: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/contribution/dtos/repo-user-contributions.dto.ts:75\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        commits\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Number of commits associated with a user login', example: 0, type: 'integer'})@Column({type: 'bigint', select: false, insert: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/contribution/dtos/repo-user-contributions.dto.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        issues_created\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Number of issues created by a user login', example: 0, type: 'integer'})@Column({type: 'bigint', select: false, insert: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/contribution/dtos/repo-user-contributions.dto.ts:63\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        login\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User list collaborator's login', example: 'bdougie'})@Column({type: 'text', select: false, insert: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/contribution/dtos/repo-user-contributions.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        prs_created\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Number of PRs created associated with a user login', example: 0, type: 'integer'})@Column({type: 'bigint', select: false, insert: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/contribution/dtos/repo-user-contributions.dto.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        prs_reviewed\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Number of PRs reviewed by a user login', example: 0, type: 'integer'})@Column({type: 'bigint', select: false, insert: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/contribution/dtos/repo-user-contributions.dto.ts:51\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity } from \"typeorm\";\nimport { ApiModelProperty } from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\n\n@Entity({ name: \"user_list_contributors\" })\nexport class DbUserListContributorStat {\n  @ApiModelProperty({\n    description: \"User list collaborator's login\",\n    example: \"bdougie\",\n  })\n  @Column({\n    type: \"text\",\n    select: false,\n    insert: false,\n  })\n  public login?: string;\n\n  @ApiModelProperty({\n    description: \"Number of commits associated with a user login\",\n    example: 0,\n    type: \"integer\",\n  })\n  @Column({\n    type: \"bigint\",\n    select: false,\n    insert: false,\n  })\n  commits: number;\n\n  @ApiModelProperty({\n    description: \"Number of PRs created associated with a user login\",\n    example: 0,\n    type: \"integer\",\n  })\n  @Column({\n    type: \"bigint\",\n    select: false,\n    insert: false,\n  })\n  prs_created: number;\n\n  @ApiModelProperty({\n    description: \"Number of PRs reviewed by a user login\",\n    example: 0,\n    type: \"integer\",\n  })\n  @Column({\n    type: \"bigint\",\n    select: false,\n    insert: false,\n  })\n  prs_reviewed: number;\n\n  @ApiModelProperty({\n    description: \"Number of issues created by a user login\",\n    example: 0,\n    type: \"integer\",\n  })\n  @Column({\n    type: \"bigint\",\n    select: false,\n    insert: false,\n  })\n  issues_created: number;\n\n  @ApiModelProperty({\n    description: \"Number of comments associated with a user login\",\n    example: 0,\n    type: \"integer\",\n  })\n  @Column({\n    type: \"bigint\",\n    select: false,\n    insert: false,\n  })\n  comments: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbUserListContributorStat-1.html":{"url":"entities/DbUserListContributorStat-1.html","title":"entity - DbUserListContributorStat-1","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbUserListContributorStat\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user-lists/entities/user-list-contributor-stats.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                comments\n                            \n                            \n                                commits\n                            \n                            \n                                issues_created\n                            \n                            \n                                    Public\n                                    Optional\n                                login\n                            \n                            \n                                prs_created\n                            \n                            \n                                prs_reviewed\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        comments\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Number of comments associated with a user login', example: 0, type: 'integer'})@Column({type: 'bigint', select: false, insert: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-lists/entities/user-list-contributor-stats.entity.ts:75\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        commits\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Number of commits associated with a user login', example: 0, type: 'integer'})@Column({type: 'bigint', select: false, insert: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-lists/entities/user-list-contributor-stats.entity.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        issues_created\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Number of issues created by a user login', example: 0, type: 'integer'})@Column({type: 'bigint', select: false, insert: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-lists/entities/user-list-contributor-stats.entity.ts:63\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        login\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User list collaborator's login', example: 'bdougie'})@Column({type: 'text', select: false, insert: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-lists/entities/user-list-contributor-stats.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        prs_created\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Number of PRs created associated with a user login', example: 0, type: 'integer'})@Column({type: 'bigint', select: false, insert: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-lists/entities/user-list-contributor-stats.entity.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        prs_reviewed\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Number of PRs reviewed by a user login', example: 0, type: 'integer'})@Column({type: 'bigint', select: false, insert: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-lists/entities/user-list-contributor-stats.entity.ts:51\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity } from \"typeorm\";\nimport { ApiModelProperty } from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\n\n@Entity({ name: \"user_list_contributors\" })\nexport class DbUserListContributorStat {\n  @ApiModelProperty({\n    description: \"User list collaborator's login\",\n    example: \"bdougie\",\n  })\n  @Column({\n    type: \"text\",\n    select: false,\n    insert: false,\n  })\n  public login?: string;\n\n  @ApiModelProperty({\n    description: \"Number of commits associated with a user login\",\n    example: 0,\n    type: \"integer\",\n  })\n  @Column({\n    type: \"bigint\",\n    select: false,\n    insert: false,\n  })\n  commits: number;\n\n  @ApiModelProperty({\n    description: \"Number of PRs created associated with a user login\",\n    example: 0,\n    type: \"integer\",\n  })\n  @Column({\n    type: \"bigint\",\n    select: false,\n    insert: false,\n  })\n  prs_created: number;\n\n  @ApiModelProperty({\n    description: \"Number of PRs reviewed by a user login\",\n    example: 0,\n    type: \"integer\",\n  })\n  @Column({\n    type: \"bigint\",\n    select: false,\n    insert: false,\n  })\n  prs_reviewed: number;\n\n  @ApiModelProperty({\n    description: \"Number of issues created by a user login\",\n    example: 0,\n    type: \"integer\",\n  })\n  @Column({\n    type: \"bigint\",\n    select: false,\n    insert: false,\n  })\n  issues_created: number;\n\n  @ApiModelProperty({\n    description: \"Number of comments associated with a user login\",\n    example: 0,\n    type: \"integer\",\n  })\n  @Column({\n    type: \"bigint\",\n    select: false,\n    insert: false,\n  })\n  comments: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbUserNotification.html":{"url":"entities/DbUserNotification.html","title":"entity - DbUserNotification","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbUserNotification\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/entities/user-notification.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                from_user\n                            \n                            \n                                    Public\n                                    Optional\n                                from_user_id\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                    Optional\n                                message\n                            \n                            \n                                    Public\n                                    Optional\n                                meta_id\n                            \n                            \n                                    Public\n                                    Optional\n                                notified_at\n                            \n                            \n                                    Public\n                                    Optional\n                                read_at\n                            \n                            \n                                    Public\n                                type\n                            \n                            \n                                    Public\n                                user_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        from_user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbUser\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@ManyToOne(undefined, user => user.from_user_notifications)@JoinColumn({name: 'from_user_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-notification.entity.ts:92\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        from_user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'From User ID', example: 43311, type: 'integer'})@Column({type: 'bigint'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-notification.entity.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Notification identifier', example: 237133, type: 'integer'})@PrimaryColumn('bigint')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-notification.entity.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        message\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User notification message', example: 'bdougie followed you'})@Column({type: 'character varying', length: 100})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-notification.entity.ts:55\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        meta_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Notification Source ID (highlight, user, invite)', example: '133'})@Column({type: 'character varying', length: 32})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-notification.entity.ts:84\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        notified_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing db-user-notification creation', example: '2022-10-19 13:24:51.000000'})@CreateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-notification.entity.ts:65\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        read_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing user notification read date', example: '2023-04-19 13:24:51.000000'})@Column({type: 'timestamp without time zone'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-notification.entity.ts:74\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User notification type', example: 'welcome'})@Column({type: 'character varying', enum: UserNotificationTypes, length: 25})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-notification.entity.ts:45\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User ID', example: 498, type: 'integer'})@Column({type: 'bigint'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-notification.entity.ts:26\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Entity, Column, BaseEntity, PrimaryColumn, CreateDateColumn, JoinColumn, ManyToOne } from \"typeorm\";\nimport {\n  ApiModelProperty,\n  ApiModelPropertyOptional,\n} from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\nimport { ApiHideProperty } from \"@nestjs/swagger\";\nimport { DbUser } from \"../user.entity\";\nimport { UserNotificationTypes } from \"./user-notification.constants\";\n\n@Entity({ name: \"user_notifications\" })\nexport class DbUserNotification extends BaseEntity {\n  @ApiModelProperty({\n    description: \"Notification identifier\",\n    example: 237133,\n    type: \"integer\",\n  })\n  @PrimaryColumn(\"bigint\")\n  public id!: number;\n\n  @ApiModelProperty({\n    description: \"User ID\",\n    example: 498,\n    type: \"integer\",\n  })\n  @Column({ type: \"bigint\" })\n  public user_id: number;\n\n  @ApiModelProperty({\n    description: \"From User ID\",\n    example: 43311,\n    type: \"integer\",\n  })\n  @Column({ type: \"bigint\" })\n  public from_user_id?: number;\n\n  @ApiModelProperty({\n    description: \"User notification type\",\n    example: \"welcome\",\n  })\n  @Column({\n    type: \"character varying\",\n    enum: UserNotificationTypes,\n    length: 25,\n  })\n  public type: string;\n\n  @ApiModelProperty({\n    description: \"User notification message\",\n    example: \"bdougie followed you\",\n  })\n  @Column({\n    type: \"character varying\",\n    length: 100,\n  })\n  public message?: string;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing db-user-notification creation\",\n    example: \"2022-10-19 13:24:51.000000\",\n  })\n  @CreateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public notified_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing user notification read date\",\n    example: \"2023-04-19 13:24:51.000000\",\n  })\n  @Column({\n    type: \"timestamp without time zone\",\n  })\n  public read_at?: Date;\n\n  @ApiModelProperty({\n    description: \"Notification Source ID (highlight, user, invite)\",\n    example: \"133\",\n  })\n  @Column({\n    type: \"character varying\",\n    length: 32,\n  })\n  public meta_id?: string;\n\n  @ApiHideProperty()\n  @ManyToOne(() => DbUser, (user) => user.from_user_notifications)\n  @JoinColumn({\n    name: \"from_user_id\",\n    referencedColumnName: \"id\",\n  })\n  public from_user: DbUser;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbUserOrganization.html":{"url":"entities/DbUserOrganization.html","title":"entity - DbUserOrganization","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbUserOrganization\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/entities/user-organization.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                created_at\n                            \n                            \n                                    Public\n                                    Optional\n                                deleted_at\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                organization_id\n                            \n                            \n                                    Public\n                                organization_user\n                            \n                            \n                                    Public\n                                user\n                            \n                            \n                                    Public\n                                user_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing top repo first index', example: '2016-10-19 13:24:51.000000'})@CreateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-organization.entity.ts:52\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        deleted_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@DeleteDateColumn({type: 'timestamp without time zone', select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-organization.entity.ts:59\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User organization identifier', example: 196, type: 'integer'})@PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-organization.entity.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        organization_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Organization identifier', example: 71359796, type: 'integer'})@Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-organization.entity.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        organization_user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbUser\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@ManyToOne(undefined, user => user.organizations)@JoinColumn({name: 'organization_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-organization.entity.ts:75\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbUser\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@ManyToOne(undefined, user => user.organizations)@JoinColumn({name: 'user_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-organization.entity.ts:67\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User identifier', example: 237133, type: 'integer'})@Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-organization.entity.ts:34\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Column,\n  CreateDateColumn,\n  DeleteDateColumn,\n  Entity,\n  JoinColumn,\n  ManyToOne,\n  PrimaryGeneratedColumn,\n} from \"typeorm\";\nimport { ApiHideProperty } from \"@nestjs/swagger\";\nimport {\n  ApiModelProperty,\n  ApiModelPropertyOptional,\n} from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\n\nimport { DbUser } from \"../user.entity\";\n\n@Entity({ name: \"user_organizations\" })\nexport class DbUserOrganization {\n  @ApiModelProperty({\n    description: \"User organization identifier\",\n    example: 196,\n    type: \"integer\",\n  })\n  @PrimaryGeneratedColumn()\n  public id!: number;\n\n  @ApiModelProperty({\n    description: \"User identifier\",\n    example: 237133,\n    type: \"integer\",\n  })\n  @Column()\n  public user_id!: number;\n\n  @ApiModelProperty({\n    description: \"Organization identifier\",\n    example: 71359796,\n    type: \"integer\",\n  })\n  @Column()\n  public organization_id!: number;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing top repo first index\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  @CreateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public created_at?: Date;\n\n  @ApiHideProperty()\n  @DeleteDateColumn({\n    type: \"timestamp without time zone\",\n    select: false,\n  })\n  public deleted_at?: Date;\n\n  @ApiHideProperty()\n  @ManyToOne(() => DbUser, (user) => user.organizations)\n  @JoinColumn({\n    name: \"user_id\",\n    referencedColumnName: \"id\",\n  })\n  public user!: DbUser;\n\n  @ApiHideProperty()\n  @ManyToOne(() => DbUser, (user) => user.organizations)\n  @JoinColumn({\n    name: \"organization_id\",\n    referencedColumnName: \"id\",\n  })\n  public organization_user: DbUser;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbUserRepo.html":{"url":"entities/DbUserRepo.html","title":"entity - DbUserRepo","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbUserRepo\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user-repo/user-repo.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                created_at\n                            \n                            \n                                    Public\n                                full_name\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                repo_id\n                            \n                            \n                                    Public\n                                user_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing user creation', example: '2022-10-19 13:24:51.000000'})@CreateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-repo/user-repo.entity.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        full_name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Repo Full Name', example: 'open-sauced/insights'})@Column({type: 'text'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-repo/user-repo.entity.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User Repo identifier', example: 237133})@PrimaryColumn('bigint')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-repo/user-repo.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        repo_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Repo identifier', example: 237133})@Column('bigint')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-repo/user-repo.entity.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User identifier', example: 237133})@Column('bigint')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-repo/user-repo.entity.ts:22\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Entity, BaseEntity, Column, PrimaryColumn, CreateDateColumn } from \"typeorm\";\n\nimport {\n  ApiModelProperty,\n  ApiModelPropertyOptional,\n} from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\n\n@Entity({ name: \"user_repos\" })\nexport class DbUserRepo extends BaseEntity {\n  @ApiModelProperty({\n    description: \"User Repo identifier\",\n    example: 237133,\n  })\n  @PrimaryColumn(\"bigint\")\n  public id!: number;\n\n  @ApiModelProperty({\n    description: \"User identifier\",\n    example: 237133,\n  })\n  @Column(\"bigint\")\n  public user_id: number;\n\n  @ApiModelProperty({\n    description: \"Repo identifier\",\n    example: 237133,\n  })\n  @Column(\"bigint\")\n  public repo_id: number;\n\n  @ApiModelProperty({\n    description: \"Repo Full Name\",\n    example: \"open-sauced/insights\",\n  })\n  @Column({ type: \"text\" })\n  public full_name: string;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing user creation\",\n    example: \"2022-10-19 13:24:51.000000\",\n  })\n  @CreateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public created_at?: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbUserToUserFollows.html":{"url":"entities/DbUserToUserFollows.html","title":"entity - DbUserToUserFollows","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbUserToUserFollows\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/entities/user-follows.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                created_at\n                            \n                            \n                                    Public\n                                    Optional\n                                deleted_at\n                            \n                            \n                                    Public\n                                following_user_id\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                    Optional\n                                updated_at\n                            \n                            \n                                    Public\n                                user_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing user follow creation', example: '2016-10-19 13:24:51.000000'})@CreateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-follows.entity.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        deleted_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@DeleteDateColumn({type: 'timestamp without time zone', select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-follows.entity.ts:59\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        following_user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User follower identifier', example: 71359796, type: 'integer'})@Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-follows.entity.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User Follow identifier', example: 196, type: 'integer'})@PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-follows.entity.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing user follow last update', example: '2022-08-28 22:04:29.000000'})@UpdateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-follows.entity.ts:52\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User identifier', example: 237133, type: 'integer'})@Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-follows.entity.ts:24\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, CreateDateColumn, DeleteDateColumn, Entity, PrimaryGeneratedColumn, UpdateDateColumn } from \"typeorm\";\nimport { ApiHideProperty } from \"@nestjs/swagger\";\nimport {\n  ApiModelProperty,\n  ApiModelPropertyOptional,\n} from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\n\n@Entity({ name: \"users_to_users_followers\" })\nexport class DbUserToUserFollows {\n  @ApiModelProperty({\n    description: \"User Follow identifier\",\n    example: 196,\n    type: \"integer\",\n  })\n  @PrimaryGeneratedColumn()\n  public id!: number;\n\n  @ApiModelProperty({\n    description: \"User identifier\",\n    example: 237133,\n    type: \"integer\",\n  })\n  @Column()\n  public user_id!: number;\n\n  @ApiModelProperty({\n    description: \"User follower identifier\",\n    example: 71359796,\n    type: \"integer\",\n  })\n  @Column()\n  public following_user_id!: number;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing user follow creation\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  @CreateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public created_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing user follow last update\",\n    example: \"2022-08-28 22:04:29.000000\",\n  })\n  @UpdateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public updated_at?: Date;\n\n  @ApiHideProperty()\n  @DeleteDateColumn({\n    type: \"timestamp without time zone\",\n    select: false,\n  })\n  public deleted_at?: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbUserTopRepo.html":{"url":"entities/DbUserTopRepo.html","title":"entity - DbUserTopRepo","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbUserTopRepo\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/entities/user-top-repo.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                created_at\n                            \n                            \n                                    Public\n                                    Optional\n                                deleted_at\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                repo\n                            \n                            \n                                    Public\n                                repo_id\n                            \n                            \n                                    Public\n                                    Optional\n                                updated_at\n                            \n                            \n                                    Public\n                                user\n                            \n                            \n                                    Public\n                                user_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing top repo first index', example: '2016-10-19 13:24:51.000000'})@CreateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-top-repo.entity.ts:53\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        deleted_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@DeleteDateColumn({type: 'timestamp without time zone', select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-top-repo.entity.ts:70\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Top repo connection identifier', example: 196, type: 'integer'})@PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-top-repo.entity.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        repo\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbRepo\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@ManyToOne(undefined, repo => repo.repoToUserTopRepos)@JoinColumn({name: 'repo_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-top-repo.entity.ts:86\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        repo_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Repository identifier', example: 71359796, type: 'integer'})@Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-top-repo.entity.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing top repo last update', example: '2022-08-28 22:04:29.000000'})@UpdateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-top-repo.entity.ts:63\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbUser\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@ManyToOne(undefined, user => user.topRepos)@JoinColumn({name: 'user_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-top-repo.entity.ts:78\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User identifier', example: 237133, type: 'integer'})@Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-top-repo.entity.ts:35\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Column,\n  CreateDateColumn,\n  DeleteDateColumn,\n  Entity,\n  JoinColumn,\n  ManyToOne,\n  PrimaryGeneratedColumn,\n  UpdateDateColumn,\n} from \"typeorm\";\nimport { ApiHideProperty } from \"@nestjs/swagger\";\nimport {\n  ApiModelProperty,\n  ApiModelPropertyOptional,\n} from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\nimport { DbUser } from \"../user.entity\";\nimport { DbRepo } from \"../../repo/entities/repo.entity\";\n\n@Entity({ name: \"user_top_repos\" })\nexport class DbUserTopRepo {\n  @ApiModelProperty({\n    description: \"Top repo connection identifier\",\n    example: 196,\n    type: \"integer\",\n  })\n  @PrimaryGeneratedColumn()\n  public id!: number;\n\n  @ApiModelProperty({\n    description: \"User identifier\",\n    example: 237133,\n    type: \"integer\",\n  })\n  @Column()\n  public user_id!: number;\n\n  @ApiModelProperty({\n    description: \"Repository identifier\",\n    example: 71359796,\n    type: \"integer\",\n  })\n  @Column()\n  public repo_id!: number;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing top repo first index\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  @CreateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public created_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing top repo last update\",\n    example: \"2022-08-28 22:04:29.000000\",\n  })\n  @UpdateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public updated_at?: Date;\n\n  @ApiHideProperty()\n  @DeleteDateColumn({\n    type: \"timestamp without time zone\",\n    select: false,\n  })\n  public deleted_at?: Date;\n\n  @ApiHideProperty()\n  @ManyToOne(() => DbUser, (user) => user.topRepos)\n  @JoinColumn({\n    name: \"user_id\",\n    referencedColumnName: \"id\",\n  })\n  public user!: DbUser;\n\n  @ApiHideProperty()\n  @ManyToOne(() => DbRepo, (repo) => repo.repoToUserTopRepos)\n  @JoinColumn({\n    name: \"repo_id\",\n    referencedColumnName: \"id\",\n  })\n  public repo!: DbRepo;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/EmojiController.html":{"url":"controllers/EmojiController.html","title":"controller - EmojiController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  EmojiController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/emoji/emoji.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                emojis\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                findAllEmojis\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllEmojis\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllEmojis(pageOptionsDto: PageOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/')@ApiOperation({operationId: 'findAllEmojis', summary: 'Listing all emojis and paginates them'})@ApiPaginatedResponse(DbEmoji)@ApiOkResponse({type: DbEmoji})@ApiNotFoundResponse({description: 'Emojis not found'})\n                \n            \n\n            \n                \n                    Defined in src/emoji/emoji.controller.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Query } from \"@nestjs/common\";\nimport { ApiOperation, ApiOkResponse, ApiNotFoundResponse, ApiTags } from \"@nestjs/swagger\";\n\nimport { ApiPaginatedResponse } from \"../common/decorators/api-paginated-response.decorator\";\nimport { PageOptionsDto } from \"../common/dtos/page-options.dto\";\n\nimport { EmojiService } from \"./emoji.service\";\nimport { DbEmoji } from \"./entities/emoji.entity\";\n\n@Controller(\"emojis\")\n@ApiTags(\"Emojis service\")\nexport class EmojiController {\n  constructor(private emojiService: EmojiService) {}\n\n  @Get(\"/\")\n  @ApiOperation({\n    operationId: \"findAllEmojis\",\n    summary: \"Listing all emojis and paginates them\",\n  })\n  @ApiPaginatedResponse(DbEmoji)\n  @ApiOkResponse({ type: DbEmoji })\n  @ApiNotFoundResponse({ description: \"Emojis not found\" })\n  async findAllEmojis(@Query() pageOptionsDto: PageOptionsDto) {\n    return this.emojiService.findAll(pageOptionsDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/EmojiModule.html":{"url":"modules/EmojiModule.html","title":"module - EmojiModule","body":"\n                   \n\n\n\n\n    Modules\n    EmojiModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_EmojiModule\n\n\n\ncluster_EmojiModule_providers\n\n\n\n\nEmojiService\n\nEmojiService\n\n\n\nEmojiModule\n\nEmojiModule\n\nEmojiModule -->\n\nEmojiService->EmojiModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/emoji/emoji.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            EmojiService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            EmojiController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\n\nimport { EmojiController } from \"./emoji.controller\";\nimport { DbEmoji } from \"./entities/emoji.entity\";\nimport { EmojiService } from \"./emoji.service\";\n\n@Module({\n  imports: [TypeOrmModule.forFeature([DbEmoji], \"ApiConnection\")],\n  controllers: [EmojiController],\n  providers: [EmojiService],\n})\nexport class EmojiModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/EmojiService.html":{"url":"injectables/EmojiService.html","title":"injectable - EmojiService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  EmojiService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/emoji/emoji.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                baseQueryBuilder\n                            \n                            \n                                    Async\n                                findAll\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(emojiRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/emoji/emoji.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        emojiRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        baseQueryBuilder\n                        \n                    \n                \n            \n            \n                \nbaseQueryBuilder()\n                \n            \n\n\n            \n                \n                    Defined in src/emoji/emoji.service.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll(pageOptionsDto: PageOptionsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/emoji/emoji.service.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { Repository } from \"typeorm\";\n\nimport { PageDto } from \"../common/dtos/page.dto\";\nimport { PageMetaDto } from \"../common/dtos/page-meta.dto\";\nimport { PageOptionsDto } from \"../common/dtos/page-options.dto\";\nimport { DbEmoji } from \"./entities/emoji.entity\";\n\n@Injectable()\nexport class EmojiService {\n  constructor(\n    @InjectRepository(DbEmoji, \"ApiConnection\")\n    private emojiRepository: Repository\n  ) {}\n\n  baseQueryBuilder() {\n    return this.emojiRepository.createQueryBuilder(\"emoji\");\n  }\n\n  async findAll(pageOptionsDto: PageOptionsDto) {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder.orderBy(\"emoji.display_order\", \"ASC\");\n\n    const itemCount = await queryBuilder.getCount();\n    const entities = await queryBuilder.getMany();\n\n    const pageMetaDto = new PageMetaDto({ itemCount, pageOptionsDto });\n\n    return new PageDto(entities, pageMetaDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/EndorsementController.html":{"url":"controllers/EndorsementController.html","title":"controller - EndorsementController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  EndorsementController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/endorsement/endorsement.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                endorsements\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createEndorsement\n                            \n                            \n                                    Async\n                                deleteEndoresementById\n                            \n                            \n                                    Async\n                                findAllByRepoOwnerOrUsername\n                            \n                            \n                                    Async\n                                findAllEndorsements\n                            \n                            \n                                    Async\n                                findAllEndorsementsByRepo\n                            \n                            \n                                    Async\n                                findAllUserCreatedEndorsementsByUsername\n                            \n                            \n                                    Async\n                                findAllUserReceivedEndorsementsByUsername\n                            \n                            \n                                    Async\n                                findEndorsementById\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createEndorsement\n                        \n                    \n                \n            \n            \n                \n                    \n                    createEndorsement(_token: string, createEndorsementDto: CreateEndorsementDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/')@UseGuards(EndorsementTokenGuard)@ApiOperation({operationId: 'createEndorsement', summary: 'Creates a new endorsement record'})@ApiOkResponse({type: DbEndorsement})@ApiBody({type: CreateEndorsementDto})\n                \n            \n\n            \n                \n                    Defined in src/endorsement/endorsement.controller.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    _token\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    createEndorsementDto\n                                    \n                                                CreateEndorsementDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteEndoresementById\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteEndoresementById(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')@ApiOperation({operationId: 'deleteEndoresementById', summary: 'Finds ands deletes the endorsement by ID'})@ApiNotFoundResponse({description: 'Endorsement not found'})\n                \n            \n\n            \n                \n                    Defined in src/endorsement/endorsement.controller.ts:138\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllByRepoOwnerOrUsername\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllByRepoOwnerOrUsername(repoOwnerOrUser: string, pageOptionsDto: PageOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/repos/:repoOwnerOrUser')@ApiOperation({operationId: 'findAllByRepoOwnerOrUsername', summary: 'Finds all endorsements by repo org or username and paginates them'})@ApiPaginatedResponse(DbEndorsement)@ApiOkResponse({type: DbEndorsement})\n                \n            \n\n            \n                \n                    Defined in src/endorsement/endorsement.controller.ts:51\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    repoOwnerOrUser\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllEndorsements\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllEndorsements(pageOptionsDto: PageOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/')@ApiOperation({operationId: 'findAllEndorsements', summary: 'Finds all endorsements and paginates them'})@ApiPaginatedResponse(DbEndorsement)@ApiOkResponse({type: DbEndorsement})\n                \n            \n\n            \n                \n                    Defined in src/endorsement/endorsement.controller.ts:40\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllEndorsementsByRepo\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllEndorsementsByRepo(owner: string, repo: string, pageOptionsDto: PageOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/repos/:owner/:repo')@ApiOperation({operationId: 'findAllEndorsementsByRepo', summary: 'Finds all endorsements by repo owner or username and paginates them'})@ApiPaginatedResponse(DbEndorsement)@ApiOkResponse({type: DbEndorsement})\n                \n            \n\n            \n                \n                    Defined in src/endorsement/endorsement.controller.ts:65\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    owner\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    repo\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllUserCreatedEndorsementsByUsername\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllUserCreatedEndorsementsByUsername(username: string, pageOptionsDto: PageOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/user/:username/created')@ApiOperation({operationId: 'findAllUserCreatedEndorsementsByUsername', summary: 'Finds all endorsements received by the user and paginates them'})@ApiPaginatedResponse(DbEndorsement)@ApiOkResponse({type: DbEndorsement})\n                \n            \n\n            \n                \n                    Defined in src/endorsement/endorsement.controller.ts:107\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllUserReceivedEndorsementsByUsername\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllUserReceivedEndorsementsByUsername(username: string, pageOptionsDto: PageOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/user/:username/received')@ApiOperation({operationId: 'findAllUserReceivedEndorsementsByUsername', summary: 'Finds all endorsements received by the user and paginates them'})@ApiPaginatedResponse(DbEndorsement)@ApiOkResponse({type: DbEndorsement})\n                \n            \n\n            \n                \n                    Defined in src/endorsement/endorsement.controller.ts:123\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findEndorsementById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findEndorsementById(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')@ApiOperation({operationId: 'findEndorsementById', summary: 'Retrieves the endorsement based on ID'})@ApiOkResponse({type: DbEndorsement})@ApiNotFoundResponse({description: 'Endorsement not found'})\n                \n            \n\n            \n                \n                    Defined in src/endorsement/endorsement.controller.ts:96\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Post, Body, Param, Delete, Query, UseGuards, Headers } from \"@nestjs/common\";\nimport { ApiBody, ApiNotFoundResponse, ApiOkResponse, ApiOperation, ApiTags } from \"@nestjs/swagger\";\n\nimport { PageOptionsDto } from \"../common/dtos/page-options.dto\";\nimport { ApiPaginatedResponse } from \"../common/decorators/api-paginated-response.decorator\";\nimport { UserService } from \"../user/services/user.service\";\n\nimport { EndorsementService } from \"./endorsement.service\";\nimport { CreateEndorsementDto } from \"./dto/create-endorsement.dto\";\nimport { DbEndorsement } from \"./entities/endorsement.entity\";\nimport { EndorsementTokenGuard } from \"./endorsement-token.guard\";\n\n@Controller(\"endorsements\")\n@ApiTags(\"Endorsements service\")\nexport class EndorsementController {\n  constructor(private readonly endorsementService: EndorsementService, private readonly userService: UserService) {}\n\n  @Post(\"/\")\n  @UseGuards(EndorsementTokenGuard)\n  @ApiOperation({\n    operationId: \"createEndorsement\",\n    summary: \"Creates a new endorsement record\",\n  })\n  @ApiOkResponse({ type: DbEndorsement })\n  @ApiBody({ type: CreateEndorsementDto })\n  async createEndorsement(\n    @Headers(\"X-OpenSauced-token\") _token: string,\n    @Body() createEndorsementDto: CreateEndorsementDto\n  ) {\n    return this.endorsementService.create(createEndorsementDto);\n  }\n\n  @Get(\"/\")\n  @ApiOperation({\n    operationId: \"findAllEndorsements\",\n    summary: \"Finds all endorsements and paginates them\",\n  })\n  @ApiPaginatedResponse(DbEndorsement)\n  @ApiOkResponse({ type: DbEndorsement })\n  async findAllEndorsements(@Query() pageOptionsDto: PageOptionsDto) {\n    return this.endorsementService.findAll(pageOptionsDto);\n  }\n\n  @Get(\"/repos/:repoOwnerOrUser\")\n  @ApiOperation({\n    operationId: \"findAllByRepoOwnerOrUsername\",\n    summary: \"Finds all endorsements by repo org or username and paginates them\",\n  })\n  @ApiPaginatedResponse(DbEndorsement)\n  @ApiOkResponse({ type: DbEndorsement })\n  async findAllByRepoOwnerOrUsername(\n    @Param(\"repoOwnerOrUser\") repoOwnerOrUser: string,\n    @Query() pageOptionsDto: PageOptionsDto\n  ) {\n    return this.endorsementService.findAllByRepoOwnerOrUser(repoOwnerOrUser, pageOptionsDto);\n  }\n\n  @Get(\"/repos/:owner/:repo\")\n  @ApiOperation({\n    operationId: \"findAllEndorsementsByRepo\",\n    summary: \"Finds all endorsements by repo owner or username and paginates them\",\n  })\n  @ApiPaginatedResponse(DbEndorsement)\n  @ApiOkResponse({ type: DbEndorsement })\n  async findAllEndorsementsByRepo(\n    @Param(\"owner\") owner: string,\n    @Param(\"repo\") repo: string,\n    @Query() pageOptionsDto: PageOptionsDto\n  ) {\n    return this.endorsementService.findAllEndorsementsByRepo(owner, repo, pageOptionsDto);\n  }\n\n  /*\n   * @Get(\"/repos/:owner/:repo/byUser\")\n   * @ApiOperation({\n   *   operationId: \"findAllEndorsementsByRepoByUser\",\n   *   summary: \"Finds all endorsements by repo owner grouped by user\",\n   * })\n   * @ApiOkResponse({ type: DbEndorsement })\n   * async findAllEndorsementsByRepoByUser (\n   * @Param(\"owner\") owner: string,\n   *   @Param(\"repo\") repo: string,\n   *   @Query() pageOptionsDto: PageOptionsDto,\n   * ) {\n   *   return this.endorsementService.findAllEndorsementsByRepoByUser(owner, repo, pageOptionsDto);\n   * }\n   */\n\n  @Get(\":id\")\n  @ApiOperation({\n    operationId: \"findEndorsementById\",\n    summary: \"Retrieves the endorsement based on ID\",\n  })\n  @ApiOkResponse({ type: DbEndorsement })\n  @ApiNotFoundResponse({ description: \"Endorsement not found\" })\n  async findEndorsementById(@Param(\"id\") id: string) {\n    return this.endorsementService.findOneById(id);\n  }\n\n  @Get(\"/user/:username/created\")\n  @ApiOperation({\n    operationId: \"findAllUserCreatedEndorsementsByUsername\",\n    summary: \"Finds all endorsements received by the user and paginates them\",\n  })\n  @ApiPaginatedResponse(DbEndorsement)\n  @ApiOkResponse({ type: DbEndorsement })\n  async findAllUserCreatedEndorsementsByUsername(\n    @Param(\"username\") username: string,\n    @Query() pageOptionsDto: PageOptionsDto\n  ) {\n    const user = await this.userService.findOneByUsername(username);\n\n    return this.endorsementService.findAllByCreatorUserId(user.id, pageOptionsDto);\n  }\n\n  @Get(\"/user/:username/received\")\n  @ApiOperation({\n    operationId: \"findAllUserReceivedEndorsementsByUsername\",\n    summary: \"Finds all endorsements received by the user and paginates them\",\n  })\n  @ApiPaginatedResponse(DbEndorsement)\n  @ApiOkResponse({ type: DbEndorsement })\n  async findAllUserReceivedEndorsementsByUsername(\n    @Param(\"username\") username: string,\n    @Query() pageOptionsDto: PageOptionsDto\n  ) {\n    const user = await this.userService.findOneByUsername(username);\n\n    return this.endorsementService.findAllByRecipientUserId(user.id, pageOptionsDto);\n  }\n\n  @Delete(\":id\")\n  @ApiOperation({\n    operationId: \"deleteEndoresementById\",\n    summary: \"Finds ands deletes the endorsement by ID\",\n  })\n  @ApiNotFoundResponse({ description: \"Endorsement not found\" })\n  async deleteEndoresementById(@Param(\"id\") id: string) {\n    return this.endorsementService.remove(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/EndorsementModule.html":{"url":"modules/EndorsementModule.html","title":"module - EndorsementModule","body":"\n                   \n\n\n\n\n    Modules\n    EndorsementModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_EndorsementModule\n\n\n\ncluster_EndorsementModule_providers\n\n\n\ncluster_EndorsementModule_exports\n\n\n\ncluster_EndorsementModule_imports\n\n\n\n\nApiServicesModule\n\nApiServicesModule\n\n\n\nEndorsementModule\n\nEndorsementModule\n\nEndorsementModule -->\n\nApiServicesModule->EndorsementModule\n\n\n\n\n\nAuthModule\n\nAuthModule\n\nEndorsementModule -->\n\nAuthModule->EndorsementModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nEndorsementModule -->\n\nUserModule->EndorsementModule\n\n\n\n\n\nEndorsementService \n\nEndorsementService \n\nEndorsementService  -->\n\nEndorsementModule->EndorsementService \n\n\n\n\n\nEndorsementService\n\nEndorsementService\n\nEndorsementModule -->\n\nEndorsementService->EndorsementModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/endorsement/endorsement.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            EndorsementService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            EndorsementController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            ApiServicesModule\n                        \n                        \n                            AuthModule\n                        \n                        \n                            UserModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            EndorsementService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\n\nimport { UserModule } from \"../user/user.module\";\nimport { AuthModule } from \"../auth/auth.module\";\nimport { ApiServicesModule } from \"../common/services/api-services.module\";\nimport { EndorsementService } from \"./endorsement.service\";\nimport { EndorsementController } from \"./endorsement.controller\";\nimport { DbEndorsement } from \"./entities/endorsement.entity\";\nimport { EndorsementTokenGuard } from \"./endorsement-token.guard\";\n\n@Module({\n  imports: [TypeOrmModule.forFeature([DbEndorsement], \"ApiConnection\"), UserModule, AuthModule, ApiServicesModule],\n  controllers: [EndorsementController],\n  providers: [EndorsementService, EndorsementTokenGuard],\n  exports: [EndorsementService],\n})\nexport class EndorsementModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/EndorsementService.html":{"url":"injectables/EndorsementService.html","title":"injectable - EndorsementService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  EndorsementService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/endorsement/endorsement.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                baseQueryBuilder\n                            \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findAllByCreatorUserId\n                            \n                            \n                                    Async\n                                findAllByRecipientUserId\n                            \n                            \n                                    Async\n                                findAllByRepoOwnerOrUser\n                            \n                            \n                                    Async\n                                findAllEndorsementsByRepo\n                            \n                            \n                                    Async\n                                findAllEndorsementsByRepoByUser\n                            \n                            \n                                    Async\n                                findOneById\n                            \n                            \n                                    Async\n                                remove\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(endorsementRepository: Repository, pagerService: PagerService)\n                    \n                \n                        \n                            \n                                Defined in src/endorsement/endorsement.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        endorsementRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        pagerService\n                                                  \n                                                        \n                                                                        PagerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        baseQueryBuilder\n                        \n                    \n                \n            \n            \n                \nbaseQueryBuilder()\n                \n            \n\n\n            \n                \n                    Defined in src/endorsement/endorsement.service.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createEndorsementDto: CreateEndorsementDto)\n                \n            \n\n\n            \n                \n                    Defined in src/endorsement/endorsement.service.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createEndorsementDto\n                                    \n                                                CreateEndorsementDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll(pageOptionsDto: PageOptionsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/endorsement/endorsement.service.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllByCreatorUserId\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllByCreatorUserId(userId: number, pageOptionsDto: PageOptionsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/endorsement/endorsement.service.ts:37\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllByRecipientUserId\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllByRecipientUserId(userId: number, pageOptionsDto: PageOptionsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/endorsement/endorsement.service.ts:48\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllByRepoOwnerOrUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllByRepoOwnerOrUser(repoOwnerOrUser: string, pageOptionsDto: PageOptionsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/endorsement/endorsement.service.ts:61\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    repoOwnerOrUser\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllEndorsementsByRepo\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllEndorsementsByRepo(owner: string, repo: string, pageOptionsDto: PageOptionsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/endorsement/endorsement.service.ts:77\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    owner\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    repo\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllEndorsementsByRepoByUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllEndorsementsByRepoByUser(owner: string, repo: string, pageOptionsDto: PageOptionsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/endorsement/endorsement.service.ts:91\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    owner\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    repo\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneById(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/endorsement/endorsement.service.ts:110\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/endorsement/endorsement.service.ts:124\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from \"@nestjs/common\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { Repository } from \"typeorm\";\n\nimport { PageOptionsDto } from \"../common/dtos/page-options.dto\";\nimport { PagerService } from \"../common/services/pager.service\";\nimport { CreateEndorsementDto } from \"./dto/create-endorsement.dto\";\nimport { DbEndorsement } from \"./entities/endorsement.entity\";\n\n@Injectable()\nexport class EndorsementService {\n  constructor(\n    @InjectRepository(DbEndorsement, \"ApiConnection\")\n    private endorsementRepository: Repository,\n    private pagerService: PagerService\n  ) {}\n\n  baseQueryBuilder() {\n    return this.endorsementRepository.createQueryBuilder(\"endorsements\");\n  }\n\n  async create(createEndorsementDto: CreateEndorsementDto) {\n    return this.endorsementRepository.save(createEndorsementDto);\n  }\n\n  async findAll(pageOptionsDto: PageOptionsDto) {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder.orderBy(\"endorsements.created_at\", \"DESC\");\n\n    return this.pagerService.applyPagination({\n      pageOptionsDto,\n      queryBuilder,\n    });\n  }\n\n  async findAllByCreatorUserId(userId: number, pageOptionsDto: PageOptionsDto) {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder.where(\"endorsements.creator_user_id = :userId\", { userId }).orderBy(\"endorsements.created_at\", \"DESC\");\n\n    return this.pagerService.applyPagination({\n      pageOptionsDto,\n      queryBuilder,\n    });\n  }\n\n  async findAllByRecipientUserId(userId: number, pageOptionsDto: PageOptionsDto) {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .where(\"endorsements.recipient_user_id = :userId\", { userId })\n      .orderBy(\"endorsements.created_at\", \"DESC\");\n\n    return this.pagerService.applyPagination({\n      pageOptionsDto,\n      queryBuilder,\n    });\n  }\n\n  async findAllByRepoOwnerOrUser(repoOwnerOrUser: string, pageOptionsDto: PageOptionsDto) {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .innerJoin(\"repos\", \"repos\", \"endorsements.repo_id=repos.id\")\n      .leftJoin(\"users\", \"users\", \"endorsements.recipient_user_id=users.id\")\n      .where(\"LOWER(repos.full_name) LIKE ':ownerOrUser/%'\", { ownerOrUser: repoOwnerOrUser.toLowerCase() })\n      .orWhere(\"LOWER(users.login) = :user\", { user: repoOwnerOrUser.toLowerCase() })\n      .orderBy(\"endorsements.created_at\", \"DESC\");\n\n    return this.pagerService.applyPagination({\n      pageOptionsDto,\n      queryBuilder,\n    });\n  }\n\n  async findAllEndorsementsByRepo(owner: string, repo: string, pageOptionsDto: PageOptionsDto) {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .innerJoin(\"repos\", \"repos\", \"endorsements.repo_id=repos.id\")\n      .where(\"LOWER(repos.full_name) = :repo\", { repo: `${owner}/${repo}`.toLowerCase() })\n      .orderBy(\"endorsements.created_at\", \"DESC\");\n\n    return this.pagerService.applyPagination({\n      pageOptionsDto,\n      queryBuilder,\n    });\n  }\n\n  async findAllEndorsementsByRepoByUser(owner: string, repo: string, pageOptionsDto: PageOptionsDto) {\n    const queryBuilder = this.endorsementRepository.manager.createQueryBuilder();\n\n    queryBuilder\n      .from(DbEndorsement, \"endorsements\")\n      .innerJoin(\"repos\", \"repos\", \"endorsements.repo_id=repos.id\")\n      .leftJoin(\"users\", \"users\", \"endorsements.repo_id=users.id\")\n      .select(\"users.login\")\n      .addSelect(\"\", \"endorsements\")\n      .where(\"LOWER(repos.full_name) = :repo\", { repo: `${owner}/${repo}`.toLowerCase() })\n      .groupBy(\"users.login\")\n      .orderBy(\"endorsements.created_at\", \"DESC\");\n\n    return this.pagerService.applyPagination({\n      pageOptionsDto,\n      queryBuilder,\n    });\n  }\n\n  async findOneById(id: string) {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder.where(\"endorsements.id = :id\", { id });\n\n    const item = await queryBuilder.getOne();\n\n    if (!item) {\n      throw new NotFoundException();\n    }\n\n    return item;\n  }\n\n  async remove(id: string) {\n    await this.endorsementRepository.softDelete(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/EndorsementTokenGuard.html":{"url":"guards/EndorsementTokenGuard.html","title":"guard - EndorsementTokenGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    EndorsementTokenGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/endorsement/endorsement-token.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/endorsement/endorsement-token.guard.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(host: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/endorsement/endorsement-token.guard.ts:8\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    host\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n        \n\n\n        \n            import { CanActivate, ExecutionContext, Injectable } from \"@nestjs/common\";\nimport { ConfigService } from \"@nestjs/config\";\n\n@Injectable()\nexport class EndorsementTokenGuard implements CanActivate {\n  constructor(private configService: ConfigService) {}\n\n  canActivate(host: ExecutionContext) {\n    const apiToken = this.configService.get(\"api.endorsementServiceToken\");\n    const ctx = host.switchToHttp();\n    const request: { headers: Record } = ctx.getRequest();\n    const token = request.headers[\"x-opensauced-token\"];\n\n    if (!apiToken) {\n      return false;\n    }\n\n    const isValid = token === apiToken;\n\n    if (!isValid) {\n      return false;\n    }\n\n    return true;\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FilterListContributorsDto.html":{"url":"classes/FilterListContributorsDto.html","title":"class - FilterListContributorsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FilterListContributorsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user-lists/dtos/filter-contributors.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                contributor\n                            \n                            \n                                    Readonly\n                                    Optional\n                                limit\n                            \n                            \n                                    Optional\n                                location\n                            \n                            \n                                    Readonly\n                                    Optional\n                                page\n                            \n                            \n                                    Optional\n                                pr_velocity\n                            \n                            \n                                    Optional\n                                timezone\n                            \n                        \n                    \n                \n\n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    skip\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        contributor\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: 'string', example: 'bdougie'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-lists/dtos/filter-contributors.dto.ts:48\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 10\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, maximum: 1000, default: 10, type: 'integer'})@Type(undefined)@IsInt()@Min(1)@Max(100)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-lists/dtos/filter-contributors.dto.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        location\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({isArray: true, type: 'string', example: undefined})@IsArray()@IsString({each: true})@Type(undefined)@Transform( => , {toClassOnly: true})@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-lists/dtos/filter-contributors.dto.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, default: 1, type: 'integer'})@Type(undefined)@IsInt()@Min(1)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-lists/dtos/filter-contributors.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        pr_velocity\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: 'integer', example: 2, description: 'Less than or equal to the average number of days to merge a PR over the last 30 days'})@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-lists/dtos/filter-contributors.dto.ts:68\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        timezone\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({isArray: true, type: 'string', example: undefined})@IsArray()@IsString({each: true})@Type(undefined)@Transform( => , {toClassOnly: true})@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-lists/dtos/filter-contributors.dto.ts:60\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        skip\n                    \n                \n\n                \n                    \n                        getskip()\n                    \n                \n                            \n                                \n                                    Defined in src/user-lists/dtos/filter-contributors.dto.ts:70\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { ApiPropertyOptional } from \"@nestjs/swagger\";\nimport { Transform, Type } from \"class-transformer\";\nimport { IsInt, Min, IsOptional, Max, IsString, IsArray } from \"class-validator\";\n\nexport class FilterListContributorsDto {\n  @ApiPropertyOptional({\n    minimum: 1,\n    default: 1,\n    type: \"integer\",\n  })\n  @Type(() => Number)\n  @IsInt()\n  @Min(1)\n  @IsOptional()\n  readonly page?: number = 1;\n\n  @ApiPropertyOptional({\n    minimum: 1,\n    maximum: 1000,\n    default: 10,\n    type: \"integer\",\n  })\n  @Type(() => Number)\n  @IsInt()\n  @Min(1)\n  @Max(100)\n  @IsOptional()\n  readonly limit?: number = 10;\n\n  @ApiPropertyOptional({\n    isArray: true,\n    type: \"string\",\n    example: [\"Denver, Colorado\", \"Germany\"],\n  })\n  @IsArray()\n  @IsString({ each: true })\n  @Type(() => String)\n  @Transform(({ value }) => (Array.isArray(value) ? value : Array(value)) as string[], { toClassOnly: true })\n  @IsOptional()\n  location?: string[];\n\n  @ApiPropertyOptional({\n    type: \"string\",\n    example: \"bdougie\",\n  })\n  @IsString()\n  @IsOptional()\n  contributor?: string;\n\n  @ApiPropertyOptional({\n    isArray: true,\n    type: \"string\",\n    example: [\"Mountain Standard Time\", \"UTC\"],\n  })\n  @IsArray()\n  @IsString({ each: true })\n  @Type(() => String)\n  @Transform(({ value }) => (Array.isArray(value) ? value : Array(value)) as string[], { toClassOnly: true })\n  @IsOptional()\n  timezone?: string[];\n\n  @ApiPropertyOptional({\n    type: \"integer\",\n    example: 2,\n    description: \"Less than or equal to the average number of days to merge a PR over the last 30 days\",\n  })\n  @IsOptional()\n  pr_velocity?: number;\n\n  get skip(): number {\n    return ((this.page ?? 1) - 1) * (this.limit ?? 10);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FilterOptionsDto.html":{"url":"classes/FilterOptionsDto.html","title":"class - FilterOptionsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FilterOptionsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/dtos/filter-options.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PageOptionsDto\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                    Optional\n                                filter\n                            \n                            \n                                    Readonly\n                                    Optional\n                                repo\n                            \n                            \n                                    Readonly\n                                    Optional\n                                repoIds\n                            \n                            \n                                    Readonly\n                                    Optional\n                                topic\n                            \n                            \n                                    Readonly\n                                    Optional\n                                limit\n                            \n                            \n                                    Readonly\n                                    Optional\n                                orderDirection\n                            \n                            \n                                    Readonly\n                                    Optional\n                                page\n                            \n                            \n                                    Readonly\n                                    Optional\n                                prev_days_start_date\n                            \n                            \n                                    Readonly\n                                    Optional\n                                range\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        filter\n                        \n                    \n                \n            \n                \n                    \n                        Type :         InsightFilterFieldsEnum\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: InsightFilterFieldsEnum, enumName: 'InsightFilterFieldsEnum'})@IsEnum(InsightFilterFieldsEnum)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dtos/filter-options.dto.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        repo\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: 'string', example: 'open-sauced/insights'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dtos/filter-options.dto.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        repoIds\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional()@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dtos/filter-options.dto.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        topic\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: 'string', default: ''})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dtos/filter-options.dto.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 50\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, maximum: 1000, default: 10, type: 'integer'})@Type(undefined)@IsInt()@Min(1)@Max(10000)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:30\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        orderDirection\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OrderDirectionEnum\n\n                    \n                \n                \n                    \n                        Default value : OrderDirectionEnum.DESC\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: OrderDirectionEnum, enumName: 'OrderDirectionEnum', default: undefined})@IsEnum(OrderDirectionEnum)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:35\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, default: 1, type: 'integer'})@Type(undefined)@IsInt()@Min(1)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:17\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        prev_days_start_date\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 0\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Number of days in the past to start range block', default: 0, type: 'integer'})@Type(undefined)@IsIn(['0', '7', '30', '90'])@IsInt()@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:57\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        range\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 30\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Range in days', default: 30, type: 'integer'})@Type(undefined)@IsIn(['7', '30', '90'])@IsInt()@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:46\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiPropertyOptional } from \"@nestjs/swagger\";\nimport { IsString, IsOptional, IsEnum } from \"class-validator\";\n\nimport { InsightFilterFieldsEnum } from \"../../insight/dtos/insight-options.dto\";\nimport { PageOptionsDto } from \"./page-options.dto\";\n\nexport class FilterOptionsDto extends PageOptionsDto {\n  @ApiPropertyOptional({\n    enum: InsightFilterFieldsEnum,\n    enumName: \"InsightFilterFieldsEnum\",\n  })\n  @IsEnum(InsightFilterFieldsEnum)\n  @IsOptional()\n  readonly filter?: InsightFilterFieldsEnum;\n\n  @ApiPropertyOptional({\n    type: \"string\",\n    default: \"\",\n  })\n  @IsString()\n  @IsOptional()\n  readonly topic?: string;\n\n  @ApiPropertyOptional({\n    type: \"string\",\n    example: \"open-sauced/insights\",\n  })\n  @IsString()\n  @IsOptional()\n  readonly repo?: string;\n\n  @ApiPropertyOptional()\n  @IsString()\n  @IsOptional()\n  readonly repoIds?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FilteredUsersDto.html":{"url":"classes/FilteredUsersDto.html","title":"class - FilteredUsersDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FilteredUsersDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dtos/filtered-users.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                    Optional\n                                limit\n                            \n                            \n                                    Readonly\n                                    Optional\n                                page\n                            \n                            \n                                    Readonly\n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    skip\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 10\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, maximum: 1000, default: 10, type: 'integer'})@Type(undefined)@IsInt()@Min(1)@Max(100)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/filtered-users.dto.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, default: 1, type: 'integer'})@Type(undefined)@IsInt()@Min(1)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/filtered-users.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"\"\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Username search query to filter from the list of users', type: 'string'})@MinLength(3)@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/filtered-users.dto.ts:23\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        skip\n                    \n                \n\n                \n                    \n                        getskip()\n                    \n                \n                            \n                                \n                                    Defined in src/user/dtos/filtered-users.dto.ts:38\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from \"@nestjs/swagger\";\nimport { Type } from \"class-transformer\";\nimport { IsInt, Min, IsOptional, Max, MinLength } from \"class-validator\";\n\nexport class FilteredUsersDto {\n  @ApiPropertyOptional({\n    minimum: 1,\n    default: 1,\n    type: \"integer\",\n  })\n  @Type(() => Number)\n  @IsInt()\n  @Min(1)\n  @IsOptional()\n  readonly page?: number = 1;\n\n  @ApiProperty({\n    description: \"Username search query to filter from the list of users\",\n    type: \"string\",\n  })\n  @MinLength(3)\n  @Type(() => String)\n  readonly username: string = \"\";\n\n  @ApiPropertyOptional({\n    minimum: 1,\n    maximum: 1000,\n    default: 10,\n    type: \"integer\",\n  })\n  @Type(() => Number)\n  @IsInt()\n  @Min(1)\n  @Max(100)\n  @IsOptional()\n  readonly limit?: number = 10;\n\n  get skip(): number {\n    return ((this.page ?? 1) - 1) * (this.limit ?? 10);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FollowManyUsersDto.html":{"url":"classes/FollowManyUsersDto.html","title":"class - FollowManyUsersDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FollowManyUsersDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dtos/follow-many-users.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                usernames\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        usernames\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'An array of usernames  to follow', example: undefined, type: 'string', isArray: true})@IsArray()@IsString({each: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/follow-many-users.dto.ts:13\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsArray, IsString } from \"class-validator\";\n\nexport class FollowManyUsersDto {\n  @ApiProperty({\n    description: \"An array of usernames  to follow\",\n    example: [\"jpmcb\", \"bdougie\", \"brandonroberts\"],\n    type: \"string\",\n    isArray: true,\n  })\n  @IsArray()\n  @IsString({ each: true })\n  public usernames: string[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GenerateCodeExplanationDto.html":{"url":"classes/GenerateCodeExplanationDto.html","title":"class - GenerateCodeExplanationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GenerateCodeExplanationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/pull-requests/dtos/create-code-explanation.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                code\n                            \n                            \n                                descriptionLength\n                            \n                            \n                                language\n                            \n                            \n                                temperature\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        code\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Code', type: String})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/dtos/create-code-explanation.dto.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        descriptionLength\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Description Length', type: 'integer', example: 250})@IsNumber()@Min(100)@Max(500)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/dtos/create-code-explanation.dto.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        language\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Description Language', type: String, example: 'english', default: 'english'})@IsString()@IsIn(['english', 'spanish', 'french', 'german', 'italian', 'portuguese', 'dutch', 'russian', 'chinese', 'korean'])\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/dtos/create-code-explanation.dto.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        temperature\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Description Temperature', type: 'integer', example: 7})@IsNumber()@Min(0)@Max(10)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/dtos/create-code-explanation.dto.ts:23\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsNumber, IsString, Max, Min, IsIn } from \"class-validator\";\n\nexport class GenerateCodeExplanationDto {\n  @ApiProperty({\n    description: \"Description Length\",\n    type: \"integer\",\n    example: 250,\n  })\n  @IsNumber()\n  @Min(100)\n  @Max(500)\n  descriptionLength: number;\n\n  @ApiProperty({\n    description: \"Description Temperature\",\n    type: \"integer\",\n    example: 7,\n  })\n  @IsNumber()\n  @Min(0)\n  @Max(10)\n  temperature: number;\n\n  @ApiProperty({\n    description: \"Description Language\",\n    type: String,\n    example: \"english\",\n    default: \"english\",\n  })\n  @IsString()\n  @IsIn([\"english\", \"spanish\", \"french\", \"german\", \"italian\", \"portuguese\", \"dutch\", \"russian\", \"chinese\", \"korean\"])\n  language: string;\n\n  @ApiProperty({\n    description: \"Code\",\n    type: String,\n  })\n  @IsString()\n  code: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GenerateCodeRefactorSuggestionDto.html":{"url":"classes/GenerateCodeRefactorSuggestionDto.html","title":"class - GenerateCodeRefactorSuggestionDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GenerateCodeRefactorSuggestionDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/pull-requests/dtos/create-code-refactor-suggestion.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                code\n                            \n                            \n                                descriptionLength\n                            \n                            \n                                language\n                            \n                            \n                                temperature\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        code\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Code', type: String})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/dtos/create-code-refactor-suggestion.dto.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        descriptionLength\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Suggestion Length', type: 'integer', example: 250})@IsNumber()@Min(100)@Max(500)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/dtos/create-code-refactor-suggestion.dto.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        language\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Suggestion Language', type: String, example: 'english', default: 'english'})@IsString()@IsIn(['english', 'spanish', 'french', 'german', 'italian', 'portuguese', 'dutch', 'russian', 'chinese', 'korean'])\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/dtos/create-code-refactor-suggestion.dto.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        temperature\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Description Temperature', type: 'integer', example: 7})@IsNumber()@Min(0)@Max(10)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/dtos/create-code-refactor-suggestion.dto.ts:23\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsIn, IsNumber, IsString, Max, Min } from \"class-validator\";\n\nexport class GenerateCodeRefactorSuggestionDto {\n  @ApiProperty({\n    description: \"Suggestion Length\",\n    type: \"integer\",\n    example: 250,\n  })\n  @IsNumber()\n  @Min(100)\n  @Max(500)\n  descriptionLength: number;\n\n  @ApiProperty({\n    description: \"Description Temperature\",\n    type: \"integer\",\n    example: 7,\n  })\n  @IsNumber()\n  @Min(0)\n  @Max(10)\n  temperature: number;\n\n  @ApiProperty({\n    description: \"Suggestion Language\",\n    type: String,\n    example: \"english\",\n    default: \"english\",\n  })\n  @IsString()\n  @IsIn([\"english\", \"spanish\", \"french\", \"german\", \"italian\", \"portuguese\", \"dutch\", \"russian\", \"chinese\", \"korean\"])\n  language: string;\n\n  @ApiProperty({\n    description: \"Code\",\n    type: String,\n  })\n  @IsString()\n  code: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GenerateCodeTestSuggestionDto.html":{"url":"classes/GenerateCodeTestSuggestionDto.html","title":"class - GenerateCodeTestSuggestionDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GenerateCodeTestSuggestionDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/pull-requests/dtos/create-code-test-suggestion.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                code\n                            \n                            \n                                descriptionLength\n                            \n                            \n                                temperature\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        code\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Code', type: String})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/dtos/create-code-test-suggestion.dto.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        descriptionLength\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Suggestion Length', type: 'integer', example: 250})@IsNumber()@Min(100)@Max(500)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/dtos/create-code-test-suggestion.dto.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        temperature\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Description Temperature', type: 'integer', example: 7})@IsNumber()@Min(0)@Max(10)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/dtos/create-code-test-suggestion.dto.ts:23\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsNumber, IsString, Max, Min } from \"class-validator\";\n\nexport class GenerateCodeTestSuggestionDto {\n  @ApiProperty({\n    description: \"Suggestion Length\",\n    type: \"integer\",\n    example: 250,\n  })\n  @IsNumber()\n  @Min(100)\n  @Max(500)\n  descriptionLength: number;\n\n  @ApiProperty({\n    description: \"Description Temperature\",\n    type: \"integer\",\n    example: 7,\n  })\n  @IsNumber()\n  @Min(0)\n  @Max(10)\n  temperature: number;\n\n  @ApiProperty({\n    description: \"Code\",\n    type: String,\n  })\n  @IsString()\n  code: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GeneratePullRequestDescriptionDto.html":{"url":"classes/GeneratePullRequestDescriptionDto.html","title":"class - GeneratePullRequestDescriptionDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GeneratePullRequestDescriptionDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/pull-requests/dtos/create-pull-request-description.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                commitMessages\n                            \n                            \n                                descriptionLength\n                            \n                            \n                                    Optional\n                                diff\n                            \n                            \n                                language\n                            \n                            \n                                temperature\n                            \n                            \n                                tone\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        commitMessages\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'PR Commit Messages', type: String, isArray: true, example: undefined})@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/dtos/create-pull-request-description.dto.ts:59\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        descriptionLength\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Description Length', type: 'integer', example: 250})@IsNumber()@Min(100)@Max(500)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/dtos/create-pull-request-description.dto.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        diff\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'PR Diff', type: String})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/dtos/create-pull-request-description.dto.ts:50\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        language\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Description Language', type: String, example: 'english', default: 'english'})@IsString()@IsIn(['english', 'spanish', 'french', 'german', 'italian', 'portuguese', 'dutch', 'russian', 'chinese', 'korean'])\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/dtos/create-pull-request-description.dto.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        temperature\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Description Temperature', type: 'integer', example: 7})@IsNumber()@Min(0)@Max(10)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/dtos/create-pull-request-description.dto.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        tone\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Description Tone', type: String, example: 'formal'})@IsString()@IsIn(['exciting', 'persuasive', 'informative', 'humorous', 'formal'])\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/dtos/create-pull-request-description.dto.ts:32\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from \"@nestjs/swagger\";\nimport { IsIn, IsNumber, IsOptional, IsString, Max, Min } from \"class-validator\";\n\nexport class GeneratePullRequestDescriptionDto {\n  @ApiProperty({\n    description: \"Description Length\",\n    type: \"integer\",\n    example: 250,\n  })\n  @IsNumber()\n  @Min(100)\n  @Max(500)\n  descriptionLength: number;\n\n  @ApiProperty({\n    description: \"Description Temperature\",\n    type: \"integer\",\n    example: 7,\n  })\n  @IsNumber()\n  @Min(0)\n  @Max(10)\n  temperature: number;\n\n  @ApiProperty({\n    description: \"Description Tone\",\n    type: String,\n    example: \"formal\",\n  })\n  @IsString()\n  @IsIn([\"exciting\", \"persuasive\", \"informative\", \"humorous\", \"formal\"])\n  tone: string;\n\n  @ApiProperty({\n    description: \"Description Language\",\n    type: String,\n    example: \"english\",\n    default: \"english\",\n  })\n  @IsString()\n  @IsIn([\"english\", \"spanish\", \"french\", \"german\", \"italian\", \"portuguese\", \"dutch\", \"russian\", \"chinese\", \"korean\"])\n  language: string;\n\n  @ApiPropertyOptional({\n    description: \"PR Diff\",\n    type: String,\n  })\n  @IsString()\n  @IsOptional()\n  diff?: string;\n\n  @ApiPropertyOptional({\n    description: \"PR Commit Messages\",\n    type: String,\n    isArray: true,\n    example: [\"chore: fixed a bug with the UI\", \"style: added some rounded corners to some boxes\"],\n  })\n  @IsOptional()\n  commitMessages?: string[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/HealthController.html":{"url":"controllers/HealthController.html","title":"controller - HealthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  HealthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/health/health.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                health\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                service\n                            \n                            \n                                    Async\n                                web\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        service\n                        \n                    \n                \n            \n            \n                \n                    \n                    service()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/service')@ApiOperation({operationId: 'healthStatusService', summary: 'Check the health of Open Sauced service endpoints'})@HealthCheck()@ApiOkResponse()\n                \n            \n\n            \n                \n                    Defined in src/health/health.controller.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        web\n                        \n                    \n                \n            \n            \n                \n                    \n                    web()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/web')@ApiOperation({operationId: 'healthStatusWeb', summary: 'Check the health of Open Sauced web endpoints'})@HealthCheck()@ApiOkResponse()\n                \n            \n\n            \n                \n                    Defined in src/health/health.controller.ts:57\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from \"@nestjs/common\";\nimport {\n  HealthCheckService,\n  HttpHealthIndicator,\n  TypeOrmHealthIndicator,\n  HealthCheck,\n  MemoryHealthIndicator,\n  DiskHealthIndicator,\n} from \"@nestjs/terminus\";\nimport { ConfigService } from \"@nestjs/config\";\nimport { ApiOkResponse, ApiOperation, ApiTags } from \"@nestjs/swagger\";\n\n@Controller(\"health\")\n@ApiTags(\"Health check service\")\nexport class HealthController {\n  constructor(\n    private health: HealthCheckService,\n    private http: HttpHealthIndicator,\n    private database: TypeOrmHealthIndicator,\n    private memory: MemoryHealthIndicator,\n    private disk: DiskHealthIndicator,\n    private readonly configService: ConfigService\n  ) {}\n\n  @Get(\"/service\")\n  @ApiOperation({\n    operationId: \"healthStatusService\",\n    summary: \"Check the health of Open Sauced service endpoints\",\n  })\n  @HealthCheck()\n  @ApiOkResponse()\n  async service() {\n    return this.health.check([\n      async () => this.database.pingCheck(\"db\"),\n      async () => this.memory.checkHeap(\"memory.heap\", this.configService.get(\"memory_heap\")!),\n      async () => this.memory.checkRSS(\"memory.rss\", this.configService.get(\"memory_rss\")!),\n      async () =>\n        this.disk.checkStorage(\"disk.usage\", {\n          thresholdPercent: this.configService.get(\"disk_percentage\")!,\n          path: \"/\",\n        }),\n      async () =>\n        this.disk.checkStorage(\"disk.storage\", {\n          thresholdPercent: this.configService.get(\"disk_size\")!,\n          path: \"/\",\n        }),\n    ]);\n  }\n\n  @Get(\"/web\")\n  @ApiOperation({\n    operationId: \"healthStatusWeb\",\n    summary: \"Check the health of Open Sauced web endpoints\",\n  })\n  @HealthCheck()\n  @ApiOkResponse()\n  async web() {\n    return this.health.check([\n      async () => this.http.pingCheck(\"opensauced.pizza\", this.configService.get(\"endpoint.landing\")!),\n      async () => this.http.pingCheck(\"app.opensauced\", this.configService.get(\"endpoint.app\")!),\n      async () => this.http.pingCheck(\"hot.opensauced\", this.configService.get(\"endpoint.hot\")!),\n      async () => this.http.pingCheck(\"docs.opensauced\", this.configService.get(\"endpoint.docs\")!),\n      async () => this.http.pingCheck(\"explore.opensauced\", this.configService.get(\"endpoint.explore\")!),\n      async () => this.http.pingCheck(\"admin.opensauced\", this.configService.get(\"endpoint.admin\")!),\n    ]);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/HealthModule.html":{"url":"modules/HealthModule.html","title":"module - HealthModule","body":"\n                   \n\n\n\n\n    Modules\n    HealthModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/health/health.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Controllers\n                    \n                        \n                            HealthController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { TerminusModule } from \"@nestjs/terminus\";\nimport { HealthController } from \"./health.controller\";\n\n@Module({\n  imports: [TerminusModule],\n  controllers: [HealthController],\n})\nexport class HealthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/HighlightController.html":{"url":"controllers/HighlightController.html","title":"controller - HighlightController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  HighlightController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/highlight/highlight.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                highlights\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                featureHighlight\n                            \n                            \n                                    Async\n                                findAllFeaturedHighlights\n                            \n                            \n                                    Async\n                                findAllHighlightRepos\n                            \n                            \n                                    Async\n                                findAllHighlights\n                            \n                            \n                                    Async\n                                findTopHighlights\n                            \n                            \n                                    Async\n                                getAllHighlightReactions\n                            \n                            \n                                    Async\n                                unfeatureHighlight\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        featureHighlight\n                        \n                    \n                \n            \n            \n                \n                    \n                    featureHighlight(id: number, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/:id/featured')@ApiOperation({operationId: 'addAFeaturedHighlight', summary: 'Add a highlight to the featured list'})@UseGuards(SupabaseGuard)@ApiBearerAuth()@ApiOkResponse({type: DbUserHighlight})@ApiNotFoundResponse({description: 'Unable to find highlight'})@ApiBadRequestResponse({description: 'Invalid request'})@ApiParam({name: 'id', type: 'integer'})\n                \n            \n\n            \n                \n                    Defined in src/highlight/highlight.controller.ts:61\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllFeaturedHighlights\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllFeaturedHighlights(pageOptionsDto: HighlightOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/featured')@ApiOperation({operationId: 'findAllFeaturedHighlights', summary: 'Finds all featured highlights and paginates them'})@ApiPaginatedResponse(DbUserHighlight)@ApiOkResponse({type: DbUserHighlight})\n                \n            \n\n            \n                \n                    Defined in src/highlight/highlight.controller.ts:46\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                HighlightOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllHighlightRepos\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllHighlightRepos(pageOptionsDto: PageOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/repos/list')@ApiOperation({operationId: 'findAllHighlightRepos', summary: 'Finds all highlight repos and paginates them'})@ApiPaginatedResponse(DbUserHighlightRepo)@ApiOkResponse({type: DbUserHighlightRepo})\n                \n            \n\n            \n                \n                    Defined in src/highlight/highlight.controller.ts:93\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllHighlights\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllHighlights(pageOptionsDto: HighlightOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/list')@ApiOperation({operationId: 'findAllHighlights', summary: 'Finds all highlights and paginates them'})@ApiPaginatedResponse(DbUserHighlight)@ApiOkResponse({type: DbUserHighlight})\n                \n            \n\n            \n                \n                    Defined in src/highlight/highlight.controller.ts:35\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                HighlightOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findTopHighlights\n                        \n                    \n                \n            \n            \n                \n                    \n                    findTopHighlights(pageOptionsDto: PageOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/top')@ApiOperation({operationId: 'findTopHighlights', summary: 'Finds top highlights for the day range and paginates them'})@ApiPaginatedResponse(DbUserHighlight)@ApiOkResponse({type: DbUserHighlight})\n                \n            \n\n            \n                \n                    Defined in src/highlight/highlight.controller.ts:117\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAllHighlightReactions\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllHighlightReactions(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:id/reactions')@ApiOperation({operationId: 'getAllHighlightReactions', summary: 'Retrieves total reactions for a highlight'})@ApiOkResponse({type: DbUserHighlightReactionResponse})@ApiNotFoundResponse({description: 'Unable to get user highlight reactions'})@ApiBadRequestResponse({description: 'Invalid request'})@ApiParam({name: 'id', type: 'integer'})\n                \n            \n\n            \n                \n                    Defined in src/highlight/highlight.controller.ts:106\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        unfeatureHighlight\n                        \n                    \n                \n            \n            \n                \n                    \n                    unfeatureHighlight(id: number, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/:id/featured')@ApiOperation({operationId: 'removeAFeaturedHighlight', summary: 'Remove a highlight from the featured list'})@UseGuards(SupabaseGuard)@ApiBearerAuth()@ApiOkResponse({type: DbUserHighlight})@ApiNotFoundResponse({description: 'Unable to find highlight'})@ApiBadRequestResponse({description: 'Invalid request'})@ApiParam({name: 'id', type: 'integer'})\n                \n            \n\n            \n                \n                    Defined in src/highlight/highlight.controller.ts:79\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Delete, Get, Param, ParseIntPipe, Post, Query, UseGuards } from \"@nestjs/common\";\nimport {\n  ApiOperation,\n  ApiOkResponse,\n  ApiTags,\n  ApiBadRequestResponse,\n  ApiNotFoundResponse,\n  ApiBearerAuth,\n  ApiParam,\n} from \"@nestjs/swagger\";\n\nimport { UserId } from \"../auth/supabase.user.decorator\";\nimport { SupabaseGuard } from \"../auth/supabase.guard\";\nimport { ApiPaginatedResponse } from \"../common/decorators/api-paginated-response.decorator\";\nimport { PageOptionsDto } from \"../common/dtos/page-options.dto\";\nimport { PageDto } from \"../common/dtos/page.dto\";\n\nimport { DbUserHighlight } from \"../user/entities/user-highlight.entity\";\nimport { UserHighlightsService } from \"../user/user-highlights.service\";\nimport { DbUserHighlightRepo } from \"./entities/user-highlight-repo.entity\";\nimport { DbUserHighlightReactionResponse, HighlightOptionsDto } from \"./dtos/highlight-options.dto\";\n\n@Controller(\"highlights\")\n@ApiTags(\"Highlights service\")\nexport class HighlightController {\n  constructor(private readonly userHighlightsService: UserHighlightsService) {}\n\n  @Get(\"/list\")\n  @ApiOperation({\n    operationId: \"findAllHighlights\",\n    summary: \"Finds all highlights and paginates them\",\n  })\n  @ApiPaginatedResponse(DbUserHighlight)\n  @ApiOkResponse({ type: DbUserHighlight })\n  async findAllHighlights(@Query() pageOptionsDto: HighlightOptionsDto): Promise> {\n    return this.userHighlightsService.findAll(pageOptionsDto);\n  }\n\n  @Get(\"/featured\")\n  @ApiOperation({\n    operationId: \"findAllFeaturedHighlights\",\n    summary: \"Finds all featured highlights and paginates them\",\n  })\n  @ApiPaginatedResponse(DbUserHighlight)\n  @ApiOkResponse({ type: DbUserHighlight })\n  async findAllFeaturedHighlights(@Query() pageOptionsDto: HighlightOptionsDto): Promise> {\n    return this.userHighlightsService.findAllFeatured(pageOptionsDto);\n  }\n\n  @Post(\"/:id/featured\")\n  @ApiOperation({\n    operationId: \"addAFeaturedHighlight\",\n    summary: \"Add a highlight to the featured list\",\n  })\n  @UseGuards(SupabaseGuard)\n  @ApiBearerAuth()\n  @ApiOkResponse({ type: DbUserHighlight })\n  @ApiNotFoundResponse({ description: \"Unable to find highlight\" })\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  @ApiParam({ name: \"id\", type: \"integer\" })\n  async featureHighlight(\n    @Param(\"id\", ParseIntPipe) id: number,\n    @UserId() userId: number\n  ): Promise {\n    return this.userHighlightsService.addFeatured(id, userId);\n  }\n\n  @Delete(\"/:id/featured\")\n  @ApiOperation({\n    operationId: \"removeAFeaturedHighlight\",\n    summary: \"Remove a highlight from the featured list\",\n  })\n  @UseGuards(SupabaseGuard)\n  @ApiBearerAuth()\n  @ApiOkResponse({ type: DbUserHighlight })\n  @ApiNotFoundResponse({ description: \"Unable to find highlight\" })\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  @ApiParam({ name: \"id\", type: \"integer\" })\n  async unfeatureHighlight(\n    @Param(\"id\", ParseIntPipe) id: number,\n    @UserId() userId: number\n  ): Promise {\n    return this.userHighlightsService.removeFeatured(id, userId);\n  }\n\n  @Get(\"/repos/list\")\n  @ApiOperation({\n    operationId: \"findAllHighlightRepos\",\n    summary: \"Finds all highlight repos and paginates them\",\n  })\n  @ApiPaginatedResponse(DbUserHighlightRepo)\n  @ApiOkResponse({ type: DbUserHighlightRepo })\n  async findAllHighlightRepos(@Query() pageOptionsDto: PageOptionsDto): Promise> {\n    return this.userHighlightsService.findAllHighlightRepos(pageOptionsDto);\n  }\n\n  @Get(\"/:id/reactions\")\n  @ApiOperation({\n    operationId: \"getAllHighlightReactions\",\n    summary: \"Retrieves total reactions for a highlight\",\n  })\n  @ApiOkResponse({ type: DbUserHighlightReactionResponse })\n  @ApiNotFoundResponse({ description: \"Unable to get user highlight reactions\" })\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  @ApiParam({ name: \"id\", type: \"integer\" })\n  async getAllHighlightReactions(@Param(\"id\", ParseIntPipe) id: number): Promise {\n    return this.userHighlightsService.findAllHighlightReactions(id);\n  }\n\n  @Get(\"/top\")\n  @ApiOperation({\n    operationId: \"findTopHighlights\",\n    summary: \"Finds top highlights for the day range and paginates them\",\n  })\n  @ApiPaginatedResponse(DbUserHighlight)\n  @ApiOkResponse({ type: DbUserHighlight })\n  async findTopHighlights(@Query() pageOptionsDto: PageOptionsDto): Promise> {\n    return this.userHighlightsService.findTop(pageOptionsDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/HighlightModule.html":{"url":"modules/HighlightModule.html","title":"module - HighlightModule","body":"\n                   \n\n\n\n\n    Modules\n    HighlightModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_HighlightModule\n\n\n\ncluster_HighlightModule_imports\n\n\n\n\nUserModule\n\nUserModule\n\n\n\nHighlightModule\n\nHighlightModule\n\nHighlightModule -->\n\nUserModule->HighlightModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/highlight/highlight.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Controllers\n                    \n                        \n                            HighlightController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UserModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\n\nimport { DbUserHighlight } from \"../user/entities/user-highlight.entity\";\nimport { UserModule } from \"../user/user.module\";\nimport { HighlightController } from \"./highlight.controller\";\n\n@Module({\n  controllers: [HighlightController],\n  imports: [TypeOrmModule.forFeature([DbUserHighlight], \"ApiConnection\"), UserModule],\n})\nexport class HighlightModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/HighlightOptionsDto.html":{"url":"classes/HighlightOptionsDto.html","title":"class - HighlightOptionsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  HighlightOptionsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/highlight/dtos/highlight-options.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PageOptionsDto\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                    Optional\n                                contributor\n                            \n                            \n                                    Readonly\n                                    Optional\n                                repo\n                            \n                            \n                                    Readonly\n                                    Optional\n                                limit\n                            \n                            \n                                    Readonly\n                                    Optional\n                                orderDirection\n                            \n                            \n                                    Readonly\n                                    Optional\n                                page\n                            \n                            \n                                    Readonly\n                                    Optional\n                                prev_days_start_date\n                            \n                            \n                                    Readonly\n                                    Optional\n                                range\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        contributor\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Highlight User Filter', example: 'RitaDee'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/highlight/dtos/highlight-options.dto.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        repo\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Highlight Repo Filter', example: 'open-sauced/insights'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/highlight/dtos/highlight-options.dto.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 50\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, maximum: 1000, default: 10, type: 'integer'})@Type(undefined)@IsInt()@Min(1)@Max(10000)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:30\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        orderDirection\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OrderDirectionEnum\n\n                    \n                \n                \n                    \n                        Default value : OrderDirectionEnum.DESC\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: OrderDirectionEnum, enumName: 'OrderDirectionEnum', default: undefined})@IsEnum(OrderDirectionEnum)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:35\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, default: 1, type: 'integer'})@Type(undefined)@IsInt()@Min(1)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:17\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        prev_days_start_date\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 0\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Number of days in the past to start range block', default: 0, type: 'integer'})@Type(undefined)@IsIn(['0', '7', '30', '90'])@IsInt()@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:57\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        range\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 30\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Range in days', default: 30, type: 'integer'})@Type(undefined)@IsIn(['7', '30', '90'])@IsInt()@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:46\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiPropertyOptional, PickType } from \"@nestjs/swagger\";\nimport { IsOptional, IsString } from \"class-validator\";\nimport { PageOptionsDto } from \"../../common/dtos/page-options.dto\";\nimport { DbUserHighlightReaction } from \"../../user/entities/user-highlight-reaction.entity\";\n\nexport class HighlightOptionsDto extends PageOptionsDto {\n  @ApiPropertyOptional({\n    description: \"Highlight Repo Filter\",\n    example: \"open-sauced/insights\",\n  })\n  @IsString()\n  @IsOptional()\n  readonly repo?: string;\n\n  @ApiPropertyOptional({\n    description: \"Highlight User Filter\",\n    example: \"RitaDee\",\n  })\n  @IsString()\n  @IsOptional()\n  readonly contributor?: string;\n}\n\nexport class DbUserHighlightReactionResponse extends PickType(DbUserHighlightReaction, [\"emoji_id\", \"reaction_count\"]) {\n  @ApiPropertyOptional({\n    description: \"Usernames of users who reacted with this emoji\",\n    type: \"string\",\n    example: [\"RitaDee\", \"diivi\"],\n    isArray: true,\n  })\n  @IsString({ each: true })\n  @IsOptional()\n  readonly reaction_users?: string[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/HttpLoggerMiddleware.html":{"url":"injectables/HttpLoggerMiddleware.html","title":"injectable - HttpLoggerMiddleware","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  HttpLoggerMiddleware\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/middleware/http-logger.middleware.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                use\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        use\n                        \n                    \n                \n            \n            \n                \nuse(request: Request, response: Response, next: NextFunction)\n                \n            \n\n\n            \n                \n                    Defined in src/common/middleware/http-logger.middleware.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    response\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                            NextFunction\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(`HTTP`)\n                    \n                \n                    \n                        \n                                Defined in src/common/middleware/http-logger.middleware.ts:9\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Logger, NestMiddleware } from \"@nestjs/common\";\nimport { clc } from \"@nestjs/common/utils/cli-colors.util\";\nimport { Request, Response, NextFunction } from \"express\";\n\nimport { cliDuration } from \"../util/cli-duration\";\n\n@Injectable()\nexport class HttpLoggerMiddleware implements NestMiddleware {\n  private logger = new Logger(`HTTP`);\n\n  use(request: Request, response: Response, next: NextFunction) {\n    const startTime = Date.now();\n\n    response.on(\"finish\", () => {\n      const { method, originalUrl } = request;\n      const { statusCode, statusMessage } = response;\n\n      const message = `${method} ${originalUrl} ${statusCode} ${statusMessage}`;\n\n      if (statusCode >= 500) {\n        return this.logger.error(cliDuration(startTime, clc.red(message)));\n      }\n\n      if (statusCode >= 400) {\n        return this.logger.warn(cliDuration(startTime, clc.magentaBright(message)));\n      }\n\n      return this.logger.log(cliDuration(startTime, message));\n    });\n\n    next();\n  }\n}\n\nexport default HttpLoggerMiddleware;\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/InsightController.html":{"url":"controllers/InsightController.html","title":"controller - InsightController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  InsightController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/insight/insight.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                insights\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                findFeaturedInsights\n                            \n                            \n                                    Async\n                                findInsightPageById\n                            \n                            \n                                    Async\n                                removeInsightForUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findFeaturedInsights\n                        \n                    \n                \n            \n            \n                \n                    \n                    findFeaturedInsights(pageOptionsDto: InsightPageOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/featured')@ApiOperation({operationId: 'findFeaturedInsights', summary: 'Finds featured insights'})@ApiOkResponse({type: DbInsight})@ApiBadRequestResponse({description: 'Invalid request'})\n                \n            \n\n            \n                \n                    Defined in src/insight/insight.controller.ts:47\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                InsightPageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findInsightPageById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findInsightPageById(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:id')@ApiOperation({operationId: 'findInsightPageById', summary: 'Finds a insight page by :id'})@ApiOkResponse({type: DbInsight})@ApiNotFoundResponse({description: 'Insight page not found'})@ApiUnauthorizedResponse({description: 'Not Authorized to view this Insight'})@ApiParam({name: 'id', type: 'integer'})\n                \n            \n\n            \n                \n                    Defined in src/insight/insight.controller.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        removeInsightForUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    removeInsightForUser(id: number, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/:id')@ApiOperation({operationId: 'removeInsightForUser', summary: 'Removes an insight page for the authenticated user'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOkResponse({type: DbInsight})@ApiNotFoundResponse({description: 'Unable to remove user insight'})@ApiBadRequestResponse({description: 'Invalid request'})@ApiBody({type: UpdateInsightDto})@ApiParam({name: 'id', type: 'integer'})\n                \n            \n\n            \n                \n                    Defined in src/insight/insight.controller.ts:63\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Delete, Get, Param, ParseIntPipe, Query, UnauthorizedException, UseGuards } from \"@nestjs/common\";\nimport {\n  ApiOperation,\n  ApiOkResponse,\n  ApiNotFoundResponse,\n  ApiTags,\n  ApiUnauthorizedResponse,\n  ApiBadRequestResponse,\n  ApiBearerAuth,\n  ApiBody,\n  ApiParam,\n} from \"@nestjs/swagger\";\nimport { PageDto } from \"../common/dtos/page.dto\";\nimport { SupabaseGuard } from \"../auth/supabase.guard\";\nimport { UserId } from \"../auth/supabase.user.decorator\";\nimport { UpdateInsightDto } from \"./dtos/update-insight.dto\";\n\nimport { DbInsight } from \"./entities/insight.entity\";\nimport { InsightsService } from \"./insights.service\";\nimport { InsightPageOptionsDto } from \"./dtos/insight-page-options.dto\";\n\n@Controller(\"insights\")\n@ApiTags(\"Insights service\")\nexport class InsightController {\n  constructor(private readonly insightsService: InsightsService) {}\n\n  @Get(\"/:id\")\n  @ApiOperation({\n    operationId: \"findInsightPageById\",\n    summary: \"Finds a insight page by :id\",\n  })\n  @ApiOkResponse({ type: DbInsight })\n  @ApiNotFoundResponse({ description: \"Insight page not found\" })\n  @ApiUnauthorizedResponse({ description: \"Not Authorized to view this Insight\" })\n  @ApiParam({ name: \"id\", type: \"integer\" })\n  async findInsightPageById(@Param(\"id\", ParseIntPipe) id: number): Promise {\n    return this.insightsService.findOneById(id);\n  }\n\n  @Get(\"/featured\")\n  @ApiOperation({\n    operationId: \"findFeaturedInsights\",\n    summary: \"Finds featured insights\",\n  })\n  @ApiOkResponse({ type: DbInsight })\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  async findFeaturedInsights(@Query() pageOptionsDto: InsightPageOptionsDto): Promise> {\n    return this.insightsService.findAllFeatured(pageOptionsDto);\n  }\n\n  @Delete(\"/:id\")\n  @ApiOperation({\n    operationId: \"removeInsightForUser\",\n    summary: \"Removes an insight page for the authenticated user\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOkResponse({ type: DbInsight })\n  @ApiNotFoundResponse({ description: \"Unable to remove user insight\" })\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  @ApiBody({ type: UpdateInsightDto })\n  @ApiParam({ name: \"id\", type: \"integer\" })\n  async removeInsightForUser(@Param(\"id\", ParseIntPipe) id: number, @UserId() userId: number): Promise {\n    const insight = await this.insightsService.findOneById(id);\n\n    if (Number(insight.user.id) !== userId) {\n      throw new UnauthorizedException();\n    }\n\n    await this.insightsService.removeInsight(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/InsightMemberService.html":{"url":"injectables/InsightMemberService.html","title":"injectable - InsightMemberService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  InsightMemberService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/insight/insight-member.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addInsightMember\n                            \n                            \n                                baseQueryBuilder\n                            \n                            \n                                    Async\n                                canUserManageInsight\n                            \n                            \n                                    Async\n                                findAllInsightMembers\n                            \n                            \n                                    Async\n                                findOneById\n                            \n                            \n                                    Async\n                                removeInsightMember\n                            \n                            \n                                    Async\n                                updateInsightMember\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(insightMemberRepository: Repository, insightService: InsightsService, pagerService: PagerService)\n                    \n                \n                        \n                            \n                                Defined in src/insight/insight-member.service.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        insightMemberRepository\n                                                  \n                                                        \n                                                                    Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        insightService\n                                                  \n                                                        \n                                                                        InsightsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        pagerService\n                                                  \n                                                        \n                                                                        PagerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addInsightMember\n                        \n                    \n                \n            \n            \n                \n                    \n                    addInsightMember(insightMember: Partial)\n                \n            \n\n\n            \n                \n                    Defined in src/insight/insight-member.service.ts:41\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    insightMember\n                                    \n                                            Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        baseQueryBuilder\n                        \n                    \n                \n            \n            \n                \nbaseQueryBuilder()\n                \n            \n\n\n            \n                \n                    Defined in src/insight/insight-member.service.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     SelectQueryBuilder\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        canUserManageInsight\n                        \n                    \n                \n            \n            \n                \n                    \n                    canUserManageInsight(userId: number, insightId: number, accessRoles: string[], checkOwner)\n                \n            \n\n\n            \n                \n                    Defined in src/insight/insight-member.service.ts:53\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    insightId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    accessRoles\n                                    \n                                            string[]\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    checkOwner\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        true\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllInsightMembers\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllInsightMembers(pageOptionsDto: PageOptionsDto, insightId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/insight/insight-member.service.ts:81\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    insightId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneById(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/insight/insight-member.service.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        removeInsightMember\n                        \n                    \n                \n            \n            \n                \n                    \n                    removeInsightMember(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/insight/insight-member.service.ts:49\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateInsightMember\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateInsightMember(id: string, insightMember: Partial)\n                \n            \n\n\n            \n                \n                    Defined in src/insight/insight-member.service.ts:45\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    insightMember\n                                    \n                                            Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from \"@nestjs/common\";\nimport { Repository, SelectQueryBuilder } from \"typeorm\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\n\nimport { PageDto } from \"../common/dtos/page.dto\";\n\nimport { PageOptionsDto } from \"../common/dtos/page-options.dto\";\nimport { PagerService } from \"../common/services/pager.service\";\nimport { DbInsightMember } from \"./entities/insight-member.entity\";\nimport { InsightsService } from \"./insights.service\";\n\n@Injectable()\nexport class InsightMemberService {\n  constructor(\n    @InjectRepository(DbInsightMember, \"ApiConnection\")\n    private insightMemberRepository: Repository,\n    private insightService: InsightsService,\n    private pagerService: PagerService\n  ) {}\n\n  baseQueryBuilder(): SelectQueryBuilder {\n    const builder = this.insightMemberRepository.createQueryBuilder(\"insight_members\");\n\n    return builder;\n  }\n\n  async findOneById(id: string): Promise {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder.where(\"insight_members.id = :id\", { id });\n\n    const item: DbInsightMember | null = await queryBuilder.getOne();\n\n    if (!item) {\n      throw new NotFoundException();\n    }\n\n    return item;\n  }\n\n  async addInsightMember(insightMember: Partial) {\n    return this.insightMemberRepository.save(insightMember);\n  }\n\n  async updateInsightMember(id: string, insightMember: Partial) {\n    return this.insightMemberRepository.update(id, insightMember);\n  }\n\n  async removeInsightMember(id: string) {\n    return this.insightMemberRepository.softDelete(id);\n  }\n\n  async canUserManageInsight(\n    userId: number,\n    insightId: number,\n    accessRoles: string[],\n    checkOwner = true\n  ): Promise {\n    const insight = await this.insightService.findOneById(insightId);\n\n    if (checkOwner && Number(insight.user.id) === userId) {\n      return true;\n    }\n\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .where(\"insight_members.insight_id = :insightId\", { insightId })\n      .andWhere(\"insight_members.user_id = :userId\", { userId })\n      .andWhere(\"insight_members.access IN (:...accessRoles)\", { accessRoles });\n\n    const item: DbInsightMember | null = await queryBuilder.getOne();\n\n    if (!item) {\n      return false;\n    }\n\n    return true;\n  }\n\n  async findAllInsightMembers(pageOptionsDto: PageOptionsDto, insightId: number): Promise> {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .addSelect(\"users.name\", \"insight_members_name\")\n      .addSelect(\"insight_members.invitation_email\", \"insight_members_invitation_email\")\n      .innerJoin(\"insights\", \"insights\", \"insight_members.insight_id=insights.id\")\n      .leftJoin(\"users\", \"users\", \"insight_members.user_id=users.id\")\n      .where(\"insight_members.insight_id = :insightId\", { insightId })\n      .orderBy(\"users.name\", \"ASC\");\n\n    return this.pagerService.applyPagination({\n      pageOptionsDto,\n      queryBuilder,\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/InsightOptionsDto.html":{"url":"classes/InsightOptionsDto.html","title":"class - InsightOptionsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  InsightOptionsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/insight/dtos/insight-options.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PageOptionsDto\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                    Optional\n                                filter\n                            \n                            \n                                    Readonly\n                                    Optional\n                                repo\n                            \n                            \n                                    Readonly\n                                    Optional\n                                repoIds\n                            \n                            \n                                    Readonly\n                                    Optional\n                                topic\n                            \n                            \n                                    Readonly\n                                    Optional\n                                limit\n                            \n                            \n                                    Readonly\n                                    Optional\n                                orderDirection\n                            \n                            \n                                    Readonly\n                                    Optional\n                                page\n                            \n                            \n                                    Readonly\n                                    Optional\n                                prev_days_start_date\n                            \n                            \n                                    Readonly\n                                    Optional\n                                range\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        filter\n                        \n                    \n                \n            \n                \n                    \n                        Type :         InsightFilterFieldsEnum\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: InsightFilterFieldsEnum, enumName: 'InsightFilterFieldsEnum'})@IsEnum(InsightFilterFieldsEnum)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/dtos/insight-options.dto.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        repo\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional()@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/dtos/insight-options.dto.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        repoIds\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional()@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/dtos/insight-options.dto.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        topic\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"javscript\"\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: 'string', default: 'javscript'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/dtos/insight-options.dto.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 50\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, maximum: 1000, default: 10, type: 'integer'})@Type(undefined)@IsInt()@Min(1)@Max(10000)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:30\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        orderDirection\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OrderDirectionEnum\n\n                    \n                \n                \n                    \n                        Default value : OrderDirectionEnum.DESC\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: OrderDirectionEnum, enumName: 'OrderDirectionEnum', default: undefined})@IsEnum(OrderDirectionEnum)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:35\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, default: 1, type: 'integer'})@Type(undefined)@IsInt()@Min(1)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:17\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        prev_days_start_date\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 0\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Number of days in the past to start range block', default: 0, type: 'integer'})@Type(undefined)@IsIn(['0', '7', '30', '90'])@IsInt()@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:57\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        range\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 30\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Range in days', default: 30, type: 'integer'})@Type(undefined)@IsIn(['7', '30', '90'])@IsInt()@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:46\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiPropertyOptional } from \"@nestjs/swagger\";\nimport { IsEnum, IsOptional, IsString } from \"class-validator\";\n\nimport { PageOptionsDto } from \"../../common/dtos/page-options.dto\";\n\nexport enum InsightFilterFieldsEnum {\n  Recent = \"recent\",\n  Top100 = \"top-100-repos\",\n  MinimumContributors = \"minimum-5-contributors\",\n  MostActive = \"most-active\",\n  MostSpammed = \"most-spammed\",\n}\n\nexport class InsightOptionsDto extends PageOptionsDto {\n  @ApiPropertyOptional({\n    enum: InsightFilterFieldsEnum,\n    enumName: \"InsightFilterFieldsEnum\",\n  })\n  @IsEnum(InsightFilterFieldsEnum)\n  @IsOptional()\n  readonly filter?: InsightFilterFieldsEnum;\n\n  @ApiPropertyOptional()\n  @IsString()\n  @IsOptional()\n  readonly repo?: string;\n\n  @ApiPropertyOptional({\n    type: \"string\",\n    default: \"javscript\",\n  })\n  @IsString()\n  @IsOptional()\n  readonly topic?: string = \"javscript\";\n\n  @ApiPropertyOptional()\n  @IsString()\n  @IsOptional()\n  readonly repoIds?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/InsightPageOptionsDto.html":{"url":"classes/InsightPageOptionsDto.html","title":"class - InsightPageOptionsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  InsightPageOptionsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/insight/dtos/insight-page-options.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PageOptionsDto\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                    Optional\n                                limit\n                            \n                            \n                                    Readonly\n                                    Optional\n                                orderDirection\n                            \n                            \n                                    Readonly\n                                    Optional\n                                page\n                            \n                            \n                                    Readonly\n                                    Optional\n                                prev_days_start_date\n                            \n                            \n                                    Readonly\n                                    Optional\n                                range\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 50\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, maximum: 1000, default: 10, type: 'integer'})@Type(undefined)@IsInt()@Min(1)@Max(10000)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:30\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        orderDirection\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OrderDirectionEnum\n\n                    \n                \n                \n                    \n                        Default value : OrderDirectionEnum.DESC\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: OrderDirectionEnum, enumName: 'OrderDirectionEnum', default: undefined})@IsEnum(OrderDirectionEnum)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:35\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, default: 1, type: 'integer'})@Type(undefined)@IsInt()@Min(1)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:17\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        prev_days_start_date\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 0\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Number of days in the past to start range block', default: 0, type: 'integer'})@Type(undefined)@IsIn(['0', '7', '30', '90'])@IsInt()@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:57\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        range\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 30\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Range in days', default: 30, type: 'integer'})@Type(undefined)@IsIn(['7', '30', '90'])@IsInt()@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:46\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PageOptionsDto } from \"../../common/dtos/page-options.dto\";\n\nexport class InsightPageOptionsDto extends PageOptionsDto {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/InsightRepoService.html":{"url":"injectables/InsightRepoService.html","title":"injectable - InsightRepoService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  InsightRepoService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/insight/insight-repo.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addInsightRepo\n                            \n                            \n                                    Async\n                                removeInsightRepo\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(insightRepoRepository: Repository, pizzaOvenService: PizzaOvenService)\n                    \n                \n                        \n                            \n                                Defined in src/insight/insight-repo.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        insightRepoRepository\n                                                  \n                                                        \n                                                                    Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        pizzaOvenService\n                                                  \n                                                        \n                                                                        PizzaOvenService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addInsightRepo\n                        \n                    \n                \n            \n            \n                \n                    \n                    addInsightRepo(insightId: number, repo: RepoInfo)\n                \n            \n\n\n            \n                \n                    Defined in src/insight/insight-repo.service.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    insightId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    repo\n                                    \n                                                RepoInfo\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        removeInsightRepo\n                        \n                    \n                \n            \n            \n                \n                    \n                    removeInsightRepo(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/insight/insight-repo.service.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { Repository } from \"typeorm\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\n\nimport { RepoInfo } from \"../repo/dtos/repo-info.dto\";\nimport { PizzaOvenService } from \"../pizza/pizza-oven.service\";\nimport { BakeRepoDto } from \"../pizza/dtos/baked-repo.dto\";\nimport { DbInsightRepo } from \"./entities/insight-repo.entity\";\n\n@Injectable()\nexport class InsightRepoService {\n  constructor(\n    @InjectRepository(DbInsightRepo, \"ApiConnection\")\n    private insightRepoRepository: Repository,\n    private pizzaOvenService: PizzaOvenService\n  ) {}\n\n  async addInsightRepo(insightId: number, repo: RepoInfo) {\n    // when individual insight pages are fetched, go bake their repos to get fresh commit data\n    const bakeRepoInfo: BakeRepoDto = {\n      url: `https://github.com/${repo.fullName}`,\n      wait: false,\n    };\n\n    try {\n      await this.pizzaOvenService.postToPizzaOvenService(bakeRepoInfo);\n    } catch (e: unknown) {\n      if (e instanceof Error) {\n        console.error(`error posting to pizza-oven service for repo ${bakeRepoInfo.url}: ${e.message}`);\n      }\n    }\n\n    return this.insightRepoRepository.save({ insight_id: insightId, repo_id: repo.id, full_name: repo.fullName });\n  }\n\n  async removeInsightRepo(id: number) {\n    return this.insightRepoRepository.softDelete(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/InsightsModule.html":{"url":"modules/InsightsModule.html","title":"module - InsightsModule","body":"\n                   \n\n\n\n\n    Modules\n    InsightsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_InsightsModule\n\n\n\ncluster_InsightsModule_imports\n\n\n\ncluster_InsightsModule_exports\n\n\n\ncluster_InsightsModule_providers\n\n\n\n\nApiServicesModule\n\nApiServicesModule\n\n\n\nInsightsModule\n\nInsightsModule\n\nInsightsModule -->\n\nApiServicesModule->InsightsModule\n\n\n\n\n\nPizzaOvenModule\n\nPizzaOvenModule\n\nInsightsModule -->\n\nPizzaOvenModule->InsightsModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nInsightsModule -->\n\nUserModule->InsightsModule\n\n\n\n\n\nInsightRepoService \n\nInsightRepoService \n\nInsightRepoService  -->\n\nInsightsModule->InsightRepoService \n\n\n\n\n\nInsightsService \n\nInsightsService \n\nInsightsService  -->\n\nInsightsModule->InsightsService \n\n\n\n\n\nInsightMemberService\n\nInsightMemberService\n\nInsightsModule -->\n\nInsightMemberService->InsightsModule\n\n\n\n\n\nInsightRepoService\n\nInsightRepoService\n\nInsightsModule -->\n\nInsightRepoService->InsightsModule\n\n\n\n\n\nInsightsService\n\nInsightsService\n\nInsightsModule -->\n\nInsightsService->InsightsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/insight/insights.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            InsightMemberService\n                        \n                        \n                            InsightRepoService\n                        \n                        \n                            InsightsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            InsightController\n                        \n                        \n                            UserInsightsController\n                        \n                        \n                            UserInsightMemberController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            ApiServicesModule\n                        \n                        \n                            PizzaOvenModule\n                        \n                        \n                            UserModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            InsightRepoService\n                        \n                        \n                            InsightsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\n\nimport { UserModule } from \"../user/user.module\";\nimport { ApiServicesModule } from \"../common/services/api-services.module\";\nimport { PizzaOvenModule } from \"../pizza/pizza-oven.module\";\nimport { DbInsight } from \"./entities/insight.entity\";\nimport { DbInsightRepo } from \"./entities/insight-repo.entity\";\nimport { DbInsightMember } from \"./entities/insight-member.entity\";\nimport { InsightController } from \"./insight.controller\";\nimport { UserInsightsController } from \"./user-insight.controller\";\nimport { InsightsService } from \"./insights.service\";\nimport { InsightRepoService } from \"./insight-repo.service\";\nimport { UserInsightMemberController } from \"./user-insight-member.controller\";\nimport { InsightMemberService } from \"./insight-member.service\";\n\n@Module({\n  controllers: [InsightController, UserInsightsController, UserInsightMemberController],\n  imports: [\n    TypeOrmModule.forFeature([DbInsight, DbInsightRepo, DbInsightMember], \"ApiConnection\"),\n    UserModule,\n    ApiServicesModule,\n    PizzaOvenModule,\n  ],\n  providers: [InsightsService, InsightRepoService, InsightMemberService],\n  exports: [InsightsService, InsightRepoService],\n})\nexport class InsightsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/InsightsService.html":{"url":"injectables/InsightsService.html","title":"injectable - InsightsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  InsightsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/insight/insights.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addInsight\n                            \n                            \n                                baseQueryBuilder\n                            \n                            \n                                    Async\n                                findAllByUserId\n                            \n                            \n                                    Async\n                                findAllFeatured\n                            \n                            \n                                    Async\n                                findOneById\n                            \n                            \n                                    Async\n                                removeInsight\n                            \n                            \n                                    Async\n                                updateInsight\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(insightRepository: Repository, pizzaOvenService: PizzaOvenService)\n                    \n                \n                        \n                            \n                                Defined in src/insight/insights.service.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        insightRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        pizzaOvenService\n                                                  \n                                                        \n                                                                        PizzaOvenService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addInsight\n                        \n                    \n                \n            \n            \n                \n                    \n                    addInsight(insight: Partial)\n                \n            \n\n\n            \n                \n                    Defined in src/insight/insights.service.ts:60\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    insight\n                                    \n                                                Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        baseQueryBuilder\n                        \n                    \n                \n            \n            \n                \nbaseQueryBuilder()\n                \n            \n\n\n            \n                \n                    Defined in src/insight/insights.service.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         SelectQueryBuilder\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllByUserId\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllByUserId(pageOptionsDto: InsightPageOptionsDto, userId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/insight/insights.service.ts:72\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                InsightPageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllFeatured\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllFeatured(pageOptionsDto: InsightPageOptionsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/insight/insights.service.ts:111\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                InsightPageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneById(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/insight/insights.service.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        removeInsight\n                        \n                    \n                \n            \n            \n                \n                    \n                    removeInsight(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/insight/insights.service.ts:68\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateInsight\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateInsight(id: number, insight: Partial)\n                \n            \n\n\n            \n                \n                    Defined in src/insight/insights.service.ts:64\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    insight\n                                    \n                                                Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from \"@nestjs/common\";\nimport { Repository, SelectQueryBuilder } from \"typeorm\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\n\nimport { PageDto } from \"../common/dtos/page.dto\";\nimport { PageMetaDto } from \"../common/dtos/page-meta.dto\";\n\nimport { PizzaOvenService } from \"../pizza/pizza-oven.service\";\nimport { BakeRepoDto } from \"../pizza/dtos/baked-repo.dto\";\nimport { DbInsight } from \"./entities/insight.entity\";\nimport { InsightPageOptionsDto } from \"./dtos/insight-page-options.dto\";\n\n@Injectable()\nexport class InsightsService {\n  constructor(\n    @InjectRepository(DbInsight, \"ApiConnection\")\n    private insightRepository: Repository,\n    private pizzaOvenService: PizzaOvenService\n  ) {}\n\n  baseQueryBuilder(): SelectQueryBuilder {\n    const builder = this.insightRepository.createQueryBuilder(\"insights\");\n\n    return builder;\n  }\n\n  async findOneById(id: number): Promise {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .where(\"insights.id = :id\", { id })\n      .innerJoinAndSelect(`insights.user`, `user`)\n      .leftJoinAndSelect(`insights.repos`, `insight_repos`, `insights.id=insight_repos.insight_id`);\n\n    const item: DbInsight | null = await queryBuilder.getOne();\n\n    if (!item) {\n      throw new NotFoundException();\n    }\n\n    item.repos.forEach(async (url) => {\n      // when individual insight pages are fetched, go bake their repos to get fresh commit data\n      const bakeRepoInfo: BakeRepoDto = {\n        url: `https://github.com/${url.full_name}`,\n        wait: false,\n      };\n\n      try {\n        await this.pizzaOvenService.postToPizzaOvenService(bakeRepoInfo);\n      } catch (e: unknown) {\n        if (e instanceof Error) {\n          console.error(`error posting to pizza-oven service for repo ${bakeRepoInfo.url}: ${e.message}`);\n        }\n      }\n    });\n\n    return item;\n  }\n\n  async addInsight(insight: Partial) {\n    return this.insightRepository.save(insight);\n  }\n\n  async updateInsight(id: number, insight: Partial) {\n    return this.insightRepository.update(id, insight);\n  }\n\n  async removeInsight(id: number) {\n    return this.insightRepository.softDelete(id);\n  }\n\n  async findAllByUserId(pageOptionsDto: InsightPageOptionsDto, userId: string): Promise> {\n    const queryBuilder = this.insightRepository.createQueryBuilder(\"insights\");\n\n    queryBuilder\n      .where(\"insights.user_id = :userId\", { userId })\n      .orWhere(\n        `(\n          ((SELECT COUNT(id) FROM insights where user_id=:userId)=0)\n          AND\n          (is_featured=true AND insights.deleted_at IS NULL)\n        )\n      `,\n        { userId }\n      )\n      .orWhere(\n        `:userId IN (\n          SELECT user_id\n          FROM insight_members\n          WHERE insight_id = insights.id\n          AND user_id = :userId\n          AND access != 'pending'\n          AND deleted_at IS NULL\n        )\n      `,\n        { userId }\n      )\n      .leftJoinAndSelect(`insights.repos`, `insight_repos`, `insights.id=insight_repos.insight_id`)\n      .orderBy(\"insights.updated_at\", \"DESC\");\n\n    queryBuilder.skip(pageOptionsDto.skip).take(pageOptionsDto.limit);\n\n    const itemCount = await queryBuilder.getCount();\n    const entities = await queryBuilder.getMany();\n\n    const pageMetaDto = new PageMetaDto({ itemCount, pageOptionsDto });\n\n    return new PageDto(entities, pageMetaDto);\n  }\n\n  async findAllFeatured(pageOptionsDto: InsightPageOptionsDto): Promise> {\n    const queryBuilder = this.insightRepository.createQueryBuilder(\"insights\");\n\n    queryBuilder\n      .where(\"is_featured=true\")\n      .andWhere(\"is_public=true\")\n      .leftJoinAndSelect(`insights.repos`, `insight_repos`, `insights.id=insight_repos.insight_id`)\n      .orderBy(\"insights.updated_at\", \"DESC\");\n\n    queryBuilder.skip(pageOptionsDto.skip).take(pageOptionsDto.limit);\n\n    const itemCount = await queryBuilder.getCount();\n    const entities = await queryBuilder.getMany();\n\n    const pageMetaDto = new PageMetaDto({ itemCount, pageOptionsDto });\n\n    return new PageDto(entities, pageMetaDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/IssueSummaryController.html":{"url":"controllers/IssueSummaryController.html","title":"controller - IssueSummaryController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  IssueSummaryController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issues/issue-summary.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                issues\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                generateIssueSummary\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        generateIssueSummary\n                        \n                    \n                \n            \n            \n                \n                    \n                    generateIssueSummary(generateIssueSummaryDto: CreateIssueSummaryDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/summary/generate')@ApiOperation({operationId: 'generateIssueSummary', summary: 'Generate a summary for an issue'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiBadRequestResponse({description: 'Invalid request'})@ApiBody({type: CreateIssueSummaryDto})\n                \n            \n\n            \n                \n                    Defined in src/issues/issue-summary.controller.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    generateIssueSummaryDto\n                                    \n                                                CreateIssueSummaryDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { BadRequestException, Body, Controller, Post, UseGuards } from \"@nestjs/common\";\nimport { ApiOperation, ApiBearerAuth, ApiBadRequestResponse, ApiBody, ApiTags } from \"@nestjs/swagger\";\n\nimport { SupabaseGuard } from \"../auth/supabase.guard\";\nimport { CreateIssueSummaryDto } from \"./dtos/create-issue-summary.dto\";\nimport { IssueSummaryService } from \"./issue-summary.service\";\n\n@Controller(\"issues\")\n@ApiTags(\"Issue summary service\")\nexport class IssueSummaryController {\n  constructor(private readonly issueSummaryService: IssueSummaryService) {}\n\n  @Post(\"/summary/generate\")\n  @ApiOperation({\n    operationId: \"generateIssueSummary\",\n    summary: \"Generate a summary for an issue\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  @ApiBody({ type: CreateIssueSummaryDto })\n  async generateIssueSummary(@Body() generateIssueSummaryDto: CreateIssueSummaryDto) {\n    const summary = await this.issueSummaryService.generateIssueSummary(generateIssueSummaryDto);\n\n    if (!summary) {\n      throw new BadRequestException();\n    }\n\n    return { summary };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/IssueSummaryModule.html":{"url":"modules/IssueSummaryModule.html","title":"module - IssueSummaryModule","body":"\n                   \n\n\n\n\n    Modules\n    IssueSummaryModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_IssueSummaryModule\n\n\n\ncluster_IssueSummaryModule_imports\n\n\n\ncluster_IssueSummaryModule_exports\n\n\n\ncluster_IssueSummaryModule_providers\n\n\n\n\nOpenAiModule\n\nOpenAiModule\n\n\n\nIssueSummaryModule\n\nIssueSummaryModule\n\nIssueSummaryModule -->\n\nOpenAiModule->IssueSummaryModule\n\n\n\n\n\nIssueSummaryService \n\nIssueSummaryService \n\nIssueSummaryService  -->\n\nIssueSummaryModule->IssueSummaryService \n\n\n\n\n\nIssueSummaryService\n\nIssueSummaryService\n\nIssueSummaryModule -->\n\nIssueSummaryService->IssueSummaryModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/issues/issue-summary.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            IssueSummaryService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            IssueSummaryController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            OpenAiModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            IssueSummaryService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { OpenAiModule } from \"../open-ai/open-ai.module\";\nimport { IssueSummaryService } from \"./issue-summary.service\";\nimport { IssueSummaryController } from \"./issue-summary.controller\";\n\n@Module({\n  imports: [OpenAiModule],\n  controllers: [IssueSummaryController],\n  providers: [IssueSummaryService],\n  exports: [IssueSummaryService],\n})\nexport class IssueSummaryModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/IssueSummaryService.html":{"url":"injectables/IssueSummaryService.html","title":"injectable - IssueSummaryService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  IssueSummaryService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issues/issue-summary.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                generateIssueSummary\n                            \n                            \n                                    Private\n                                generatePrompt\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(openAiService: OpenAiService)\n                    \n                \n                        \n                            \n                                Defined in src/issues/issue-summary.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        openAiService\n                                                  \n                                                        \n                                                                        OpenAiService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        generateIssueSummary\n                        \n                    \n                \n            \n            \n                \n                    \n                    generateIssueSummary(options: CreateIssueSummaryDto)\n                \n            \n\n\n            \n                \n                    Defined in src/issues/issue-summary.service.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                CreateIssueSummaryDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        generatePrompt\n                        \n                    \n                \n            \n            \n                \n                    \n                    generatePrompt(language: string, maxLength: number, tone: string)\n                \n            \n\n\n            \n                \n                    Defined in src/issues/issue-summary.service.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    language\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    maxLength\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    tone\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\n\nimport { OpenAiService } from \"../open-ai/open-ai.service\";\nimport { CreateIssueSummaryDto } from \"./dtos/create-issue-summary.dto\";\n\n@Injectable()\nexport class IssueSummaryService {\n  constructor(private openAiService: OpenAiService) {}\n\n  private generatePrompt(language: string, maxLength: number, tone: string) {\n    return [\n      `Generate an apt issue summary for an issue taken from github issues with the specifications mentioned below`,\n      `The summary should be written in past tense and ${tone} tone`,\n      `Summary language: ${language}`,\n      `Summary must be a maximum of ${maxLength} characters.`,\n      \"If the issue or its comments include a solution, include it in the summary.\",\n      \"Exclude anything unnecessary such as translation. Your entire response will be used to summarize and analyze the issue.\",\n    ].join(\"\\n\");\n  }\n\n  async generateIssueSummary(options: CreateIssueSummaryDto) {\n    const content = `Issue Title: ${options.issueTitle}\\nIssue Description: ${options.issueDescription}\\nIssue Comments: ${options.issueComments}`;\n\n    try {\n      const completion = this.openAiService.generateCompletion(\n        this.generatePrompt(options.language, options.summaryLength, options.tone),\n        content,\n        options.temperature\n      );\n\n      return completion;\n    } catch (error: unknown) {\n      if (error instanceof Error) {\n        console.error(\"OpenAI error: \", error.message);\n      }\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/LogModule.html":{"url":"modules/LogModule.html","title":"module - LogModule","body":"\n                   \n\n\n\n\n    Modules\n    LogModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_LogModule\n\n\n\ncluster_LogModule_exports\n\n\n\ncluster_LogModule_providers\n\n\n\n\nCustomLogger \n\nCustomLogger \n\n\n\nLogModule\n\nLogModule\n\nCustomLogger  -->\n\nLogModule->CustomLogger \n\n\n\n\n\nCustomLogger\n\nCustomLogger\n\nLogModule -->\n\nCustomLogger->LogModule\n\n\n\n\n\nLogService\n\nLogService\n\nLogModule -->\n\nLogService->LogModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/log/log.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CustomLogger\n                        \n                        \n                            LogService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            CustomLogger\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { ConfigModule } from \"@nestjs/config\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\nimport { LogService } from \"./log.service\";\nimport { DbLog } from \"./log.entity\";\nimport CustomLogger from \"./custom-logger\";\n\n@Module({\n  imports: [ConfigModule, TypeOrmModule.forFeature([DbLog], \"LogConnection\")],\n  providers: [CustomLogger, LogService],\n  exports: [CustomLogger],\n})\nexport class LogModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LogService.html":{"url":"injectables/LogService.html","title":"injectable - LogService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LogService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/log/log.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createLog\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(logsRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/log/log.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        logsRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createLog\n                        \n                    \n                \n            \n            \n                \n                    \n                    createLog(log: CreateLogDto)\n                \n            \n\n\n            \n                \n                    Defined in src/log/log.service.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    log\n                                    \n                                                CreateLogDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { Repository } from \"typeorm\";\nimport { DbLog } from \"./log.entity\";\nimport { CreateLogDto } from \"./dtos/create-log.dto\";\n\n@Injectable()\nexport class LogService {\n  constructor(\n    @InjectRepository(DbLog, \"LogConnection\")\n    private logsRepository: Repository\n  ) {}\n\n  async createLog(log: CreateLogDto) {\n    const newLog = this.logsRepository.create(log);\n\n    await this.logsRepository.save(newLog, { data: { isCreatingLogs: true } });\n\n    return newLog;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/OpenAiModule.html":{"url":"modules/OpenAiModule.html","title":"module - OpenAiModule","body":"\n                   \n\n\n\n\n    Modules\n    OpenAiModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_OpenAiModule\n\n\n\ncluster_OpenAiModule_exports\n\n\n\ncluster_OpenAiModule_providers\n\n\n\n\nOpenAiService \n\nOpenAiService \n\n\n\nOpenAiModule\n\nOpenAiModule\n\nOpenAiService  -->\n\nOpenAiModule->OpenAiService \n\n\n\n\n\nOpenAiService\n\nOpenAiService\n\nOpenAiModule -->\n\nOpenAiService->OpenAiModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/open-ai/open-ai.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            OpenAiService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            OpenAiService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { OpenAiService } from \"./open-ai.service\";\n\n@Module({\n  providers: [OpenAiService],\n  exports: [OpenAiService],\n})\nexport class OpenAiModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/OpenAiService.html":{"url":"injectables/OpenAiService.html","title":"injectable - OpenAiService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  OpenAiService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/open-ai/open-ai.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                generateCompletion\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/open-ai/open-ai.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        generateCompletion\n                        \n                    \n                \n            \n            \n                \n                    \n                    generateCompletion(systemMessage: string, userMessage: string, temperature: number)\n                \n            \n\n\n            \n                \n                    Defined in src/open-ai/open-ai.service.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    systemMessage\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userMessage\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    temperature\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { Fetch } from \"@supabase/supabase-js/dist/module/lib/types\";\nimport { ConfigService } from \"@nestjs/config\";\n\ninterface ChatResponse {\n  choices: { message: { content: string } }[];\n}\n\n@Injectable()\nexport class OpenAiService {\n  constructor(private configService: ConfigService) {}\n\n  async generateCompletion(systemMessage: string, userMessage: string, temperature: number) {\n    // eslint-disable-next-line\n    const fetcher: Fetch = typeof fetch !== \"undefined\" ? fetch : (require(\"node-fetch\") as Fetch);\n    const response = await fetcher(this.configService.get(\"openai.completionsURL\")!, {\n      method: \"POST\",\n      headers: {\n        Authorization: `Bearer ${this.configService.get(\"openai.APIKey\")!}`,\n        \"Content-type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        model: this.configService.get(\"openai.modelName\"),\n        messages: [\n          {\n            role: \"system\",\n            content: systemMessage,\n          },\n          {\n            role: \"user\",\n            content: userMessage,\n          },\n        ],\n        temperature: temperature / 10,\n        n: 1,\n      }),\n    });\n\n    if (response.ok) {\n      const data = (await response.json()) as ChatResponse;\n\n      return data.choices[0]?.message.content;\n    }\n\n    throw new Error(response.statusText);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PageDto.html":{"url":"classes/PageDto.html","title":"class - PageDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PageDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/dtos/page.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                data\n                            \n                            \n                                    Readonly\n                                meta\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(data: T[], meta: PageMetaDto)\n                    \n                \n                        \n                            \n                                Defined in src/common/dtos/page.dto.ts:16\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        data\n                                                  \n                                                        \n                                                                    T[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        meta\n                                                  \n                                                        \n                                                                        PageMetaDto\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        data\n                        \n                    \n                \n            \n                \n                    \n                        Type :     T[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsArray()@ApiProperty({isArray: true})@ValidateNested({each: true})@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dtos/page.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        meta\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PageMetaDto\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: () => PageMetaDto})@ValidateNested()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dtos/page.dto.ts:16\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsArray, ValidateNested } from \"class-validator\";\nimport { Type } from \"class-transformer\";\nimport { PageMetaDto } from \"./page-meta.dto\";\n\nexport class PageDto {\n  @IsArray()\n  @ApiProperty({ isArray: true })\n  @ValidateNested({ each: true })\n  @Type(() => Array)\n  readonly data: T[];\n\n  @ApiProperty({ type: () => PageMetaDto })\n  @ValidateNested()\n  @Type(() => PageMetaDto)\n  readonly meta: PageMetaDto;\n\n  constructor(data: T[], meta: PageMetaDto) {\n    this.data = data;\n    this.meta = meta;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PageMetaDto.html":{"url":"classes/PageMetaDto.html","title":"class - PageMetaDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PageMetaDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/dtos/page-meta.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                hasNextPage\n                            \n                            \n                                    Readonly\n                                hasPreviousPage\n                            \n                            \n                                    Readonly\n                                itemCount\n                            \n                            \n                                    Readonly\n                                limit\n                            \n                            \n                                    Readonly\n                                page\n                            \n                            \n                                    Readonly\n                                pageCount\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(undefined: PageMetaParameters)\n                    \n                \n                        \n                            \n                                Defined in src/common/dtos/page-meta.dto.ts:43\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                  \n                                                        \n                                                                        PageMetaParameters\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        hasNextPage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Flag indicating if there is a next page', example: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dtos/page-meta.dto.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        hasPreviousPage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Flag indicating if there is a previous page', example: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dtos/page-meta.dto.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        itemCount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The number of items in the collection', example: 100, type: 'integer'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dtos/page-meta.dto.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The number of items per page', example: 10, type: 'integer'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dtos/page-meta.dto.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The current page', example: 1, type: 'integer'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dtos/page-meta.dto.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        pageCount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The number of pages in the collection', example: 10, type: 'integer'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dtos/page-meta.dto.ts:31\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { PageMetaParameters } from \"./page-meta-parameters.dto\";\n\nexport class PageMetaDto {\n  @ApiProperty({\n    description: \"The current page\",\n    example: 1,\n    type: \"integer\",\n  })\n  readonly page: number;\n\n  @ApiProperty({\n    description: \"The number of items per page\",\n    example: 10,\n    type: \"integer\",\n  })\n  readonly limit: number;\n\n  @ApiProperty({\n    description: \"The number of items in the collection\",\n    example: 100,\n    type: \"integer\",\n  })\n  readonly itemCount: number;\n\n  @ApiProperty({\n    description: \"The number of pages in the collection\",\n    example: 10,\n    type: \"integer\",\n  })\n  readonly pageCount: number;\n\n  @ApiProperty({\n    description: \"Flag indicating if there is a previous page\",\n    example: false,\n  })\n  readonly hasPreviousPage: boolean;\n\n  @ApiProperty({\n    description: \"Flag indicating if there is a next page\",\n    example: true,\n  })\n  readonly hasNextPage: boolean;\n\n  constructor({ pageOptionsDto, itemCount }: PageMetaParameters) {\n    this.page = pageOptionsDto.page ?? 1;\n    this.limit = pageOptionsDto.limit ?? 10;\n    this.itemCount = itemCount;\n    this.pageCount = Math.ceil(this.itemCount / this.limit);\n    this.hasPreviousPage = this.page > 1;\n    this.hasNextPage = this.page \n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/PageMetaParameters.html":{"url":"interfaces/PageMetaParameters.html","title":"interface - PageMetaParameters","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  PageMetaParameters\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/dtos/page-meta-parameters.dto.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            itemCount\n                                        \n                                \n                                \n                                        \n                                            pageOptionsDto\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        itemCount\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        itemCount:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        pageOptionsDto\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        pageOptionsDto:         PageOptionsDto\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         PageOptionsDto\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { PageOptionsDto } from \"./page-options.dto\";\n\nexport interface PageMetaParameters {\n  pageOptionsDto: PageOptionsDto;\n  itemCount: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PageOptionsDto.html":{"url":"classes/PageOptionsDto.html","title":"class - PageOptionsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PageOptionsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/dtos/page-options.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                    Optional\n                                limit\n                            \n                            \n                                    Readonly\n                                    Optional\n                                orderDirection\n                            \n                            \n                                    Readonly\n                                    Optional\n                                page\n                            \n                            \n                                    Readonly\n                                    Optional\n                                prev_days_start_date\n                            \n                            \n                                    Readonly\n                                    Optional\n                                range\n                            \n                        \n                    \n                \n\n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    skip\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 50\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, maximum: 1000, default: 10, type: 'integer'})@Type(undefined)@IsInt()@Min(1)@Max(10000)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dtos/page-options.dto.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        orderDirection\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OrderDirectionEnum\n\n                    \n                \n                \n                    \n                        Default value : OrderDirectionEnum.DESC\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: OrderDirectionEnum, enumName: 'OrderDirectionEnum', default: undefined})@IsEnum(OrderDirectionEnum)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dtos/page-options.dto.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, default: 1, type: 'integer'})@Type(undefined)@IsInt()@Min(1)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dtos/page-options.dto.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        prev_days_start_date\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 0\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Number of days in the past to start range block', default: 0, type: 'integer'})@Type(undefined)@IsIn(['0', '7', '30', '90'])@IsInt()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dtos/page-options.dto.ts:57\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        range\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 30\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Range in days', default: 30, type: 'integer'})@Type(undefined)@IsIn(['7', '30', '90'])@IsInt()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dtos/page-options.dto.ts:46\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        skip\n                    \n                \n\n                \n                    \n                        getskip()\n                    \n                \n                            \n                                \n                                    Defined in src/common/dtos/page-options.dto.ts:59\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { ApiPropertyOptional } from \"@nestjs/swagger\";\nimport { Type } from \"class-transformer\";\nimport { IsEnum, IsIn, IsInt, IsOptional, Max, Min } from \"class-validator\";\n\nimport { OrderDirectionEnum } from \"../constants/order-direction.constant\";\n\nexport class PageOptionsDto {\n  @ApiPropertyOptional({\n    minimum: 1,\n    default: 1,\n    type: \"integer\",\n  })\n  @Type(() => Number)\n  @IsInt()\n  @Min(1)\n  @IsOptional()\n  readonly page?: number = 1;\n\n  @ApiPropertyOptional({\n    minimum: 1,\n    maximum: 1000,\n    default: 10,\n    type: \"integer\",\n  })\n  @Type(() => Number)\n  @IsInt()\n  @Min(1)\n  @Max(10000)\n  @IsOptional()\n  readonly limit?: number = 50;\n\n  @ApiPropertyOptional({ enum: OrderDirectionEnum, enumName: \"OrderDirectionEnum\", default: OrderDirectionEnum.DESC })\n  @IsEnum(OrderDirectionEnum)\n  @IsOptional()\n  readonly orderDirection?: OrderDirectionEnum = OrderDirectionEnum.DESC;\n\n  @ApiPropertyOptional({\n    description: \"Range in days\",\n    default: 30,\n    type: \"integer\",\n  })\n  @Type(() => Number)\n  @IsIn([7, 30, 90])\n  @IsInt()\n  @IsOptional()\n  readonly range?: number = 30;\n\n  @ApiPropertyOptional({\n    description: \"Number of days in the past to start range block\",\n    default: 0,\n    type: \"integer\",\n  })\n  @Type(() => Number)\n  @IsIn([0, 7, 30, 90])\n  @IsInt()\n  @IsOptional()\n  readonly prev_days_start_date?: number = 0;\n\n  get skip(): number {\n    return ((this.page ?? 1) - 1) * (this.limit ?? 50);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PagerService.html":{"url":"injectables/PagerService.html","title":"injectable - PagerService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PagerService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/services/pager.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                applyPagination\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        applyPagination\n                        \n                    \n                \n            \n            \n                \n                    \n                    applyPagination(undefined: PaginationInput)\n                \n            \n\n\n            \n                \n                    Defined in src/common/services/pager.service.ts:16\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        Entity\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                PaginationInput\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { SelectQueryBuilder } from \"typeorm/query-builder/SelectQueryBuilder\";\nimport { ObjectLiteral } from \"typeorm\";\n\nimport { PageMetaDto } from \"../dtos/page-meta.dto\";\nimport { PageDto } from \"../dtos/page.dto\";\nimport { PageOptionsDto } from \"../dtos/page-options.dto\";\n\ninterface PaginationInput {\n  queryBuilder: SelectQueryBuilder;\n  pageOptionsDto: PageOptionsDto;\n}\n\n@Injectable()\nexport class PagerService {\n  async applyPagination({ queryBuilder, pageOptionsDto }: PaginationInput) {\n    queryBuilder.offset(pageOptionsDto.skip).limit(pageOptionsDto.limit);\n\n    const [itemCount, entities] = await Promise.all([queryBuilder.getCount(), queryBuilder.getMany()]);\n\n    const pageMetaDto = new PageMetaDto({ itemCount, pageOptionsDto });\n\n    return new PageDto(entities, pageMetaDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/PaginationInput.html":{"url":"interfaces/PaginationInput.html","title":"interface - PaginationInput","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  PaginationInput\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/services/pager.service.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            pageOptionsDto\n                                        \n                                \n                                \n                                        \n                                            queryBuilder\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        pageOptionsDto\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        pageOptionsDto:         PageOptionsDto\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         PageOptionsDto\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        queryBuilder\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        queryBuilder:     SelectQueryBuilder\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     SelectQueryBuilder\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { SelectQueryBuilder } from \"typeorm/query-builder/SelectQueryBuilder\";\nimport { ObjectLiteral } from \"typeorm\";\n\nimport { PageMetaDto } from \"../dtos/page-meta.dto\";\nimport { PageDto } from \"../dtos/page.dto\";\nimport { PageOptionsDto } from \"../dtos/page-options.dto\";\n\ninterface PaginationInput {\n  queryBuilder: SelectQueryBuilder;\n  pageOptionsDto: PageOptionsDto;\n}\n\n@Injectable()\nexport class PagerService {\n  async applyPagination({ queryBuilder, pageOptionsDto }: PaginationInput) {\n    queryBuilder.offset(pageOptionsDto.skip).limit(pageOptionsDto.limit);\n\n    const [itemCount, entities] = await Promise.all([queryBuilder.getCount(), queryBuilder.getMany()]);\n\n    const pageMetaDto = new PageMetaDto({ itemCount, pageOptionsDto });\n\n    return new PageDto(entities, pageMetaDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/PizzaOvenController.html":{"url":"controllers/PizzaOvenController.html","title":"controller - PizzaOvenController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  PizzaOvenController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/pizza/pizza-oven.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                bake\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                findBakedRepoById\n                            \n                            \n                                    Async\n                                findCommitAuthorById\n                            \n                            \n                                    Async\n                                findCommitById\n                            \n                            \n                                    Async\n                                listAllBakedRepos\n                            \n                            \n                                    Async\n                                listAllCommitAuthors\n                            \n                            \n                                    Async\n                                listAllCommitsByBakedRepoId\n                            \n                            \n                                    Async\n                                listAllCommitsByCommitAuthorId\n                            \n                            \n                                    Async\n                                postToPizzaOvenService\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findBakedRepoById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findBakedRepoById(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('repos/:id')@ApiOperation({operationId: 'findBakedRepoById', summary: 'Finds a baked repo by :id'})@ApiOkResponse({type: DbBakedRepo})@ApiNotFoundResponse({description: 'Baked repository not found'})@ApiParam({name: 'id', type: 'integer'})\n                \n            \n\n            \n                \n                    Defined in src/pizza/pizza-oven.controller.ts:57\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findCommitAuthorById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findCommitAuthorById(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('commit-authors/:id')@ApiOperation({operationId: 'findCommitAuthorById', summary: 'Finds a commit author by :id'})@ApiOkResponse({type: DbCommitAuthors})@ApiNotFoundResponse({description: 'Commit author not found'})@ApiParam({name: 'id', type: 'integer'})\n                \n            \n\n            \n                \n                    Defined in src/pizza/pizza-oven.controller.ts:80\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findCommitById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findCommitById(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('commits/:id')@ApiOperation({operationId: 'findCommitById', summary: 'Finds a commit by :id'})@ApiOkResponse({type: DbCommits})@ApiNotFoundResponse({description: 'Commit not found'})@ApiParam({name: 'id', type: 'integer'})\n                \n            \n\n            \n                \n                    Defined in src/pizza/pizza-oven.controller.ts:103\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        listAllBakedRepos\n                        \n                    \n                \n            \n            \n                \n                    \n                    listAllBakedRepos(pageOptionsDto: PageOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/repos/list')@ApiOperation({operationId: 'listAllBakedRepos', summary: 'Finds all baked repos and paginates them'})@ApiPaginatedResponse(DbBakedRepo)@ApiOkResponse({type: DbBakedRepo})\n                \n            \n\n            \n                \n                    Defined in src/pizza/pizza-oven.controller.ts:68\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        listAllCommitAuthors\n                        \n                    \n                \n            \n            \n                \n                    \n                    listAllCommitAuthors(pageOptionsDto: PageOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/commit-authors/list')@ApiOperation({operationId: 'listAllCommitAuthors', summary: 'Finds all commit authors and paginates them'})@ApiPaginatedResponse(DbCommitAuthors)@ApiOkResponse({type: DbCommitAuthors})\n                \n            \n\n            \n                \n                    Defined in src/pizza/pizza-oven.controller.ts:91\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        listAllCommitsByBakedRepoId\n                        \n                    \n                \n            \n            \n                \n                    \n                    listAllCommitsByBakedRepoId(pageOptionsDto: PageOptionsDto, id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/commits/list/repo/:id')@ApiOperation({operationId: 'listAllCommitsByBakedRepoId', summary: 'Finds all commits by baked repo :id and paginates them'})@ApiPaginatedResponse(DbCommits)@ApiOkResponse({type: DbCommits})@ApiParam({name: 'id', type: 'integer'})\n                \n            \n\n            \n                \n                    Defined in src/pizza/pizza-oven.controller.ts:115\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        listAllCommitsByCommitAuthorId\n                        \n                    \n                \n            \n            \n                \n                    \n                    listAllCommitsByCommitAuthorId(pageOptionsDto: PageOptionsDto, id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/commits/list/commit-author/:id')@ApiOperation({operationId: 'listAllCommitsByCommitAuthorId', summary: 'Finds all commits by commit author :id and paginates them'})@ApiPaginatedResponse(DbCommits)@ApiOkResponse({type: DbCommits})@ApiParam({name: 'id', type: 'integer'})\n                \n            \n\n            \n                \n                    Defined in src/pizza/pizza-oven.controller.ts:130\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        postToPizzaOvenService\n                        \n                    \n                \n            \n            \n                \n                    \n                    postToPizzaOvenService(bakeOptionsInfo: BakeRepoDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/')@ApiOperation({operationId: 'Bake a repository with the pizza oven microservice', summary: 'postToPizzaOvenService'})@ApiAcceptedResponse()@ApiBadRequestResponse({description: 'Invalid request'})@ApiBody({type: BakeRepoDto})\n                \n            \n\n            \n                \n                    Defined in src/pizza/pizza-oven.controller.ts:41\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    bakeOptionsInfo\n                                    \n                                                BakeRepoDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { BadRequestException, Body, Controller, Get, Param, ParseIntPipe, Post, Query } from \"@nestjs/common\";\nimport {\n  ApiAcceptedResponse,\n  ApiBadRequestResponse,\n  ApiBody,\n  ApiNotFoundResponse,\n  ApiOkResponse,\n  ApiOperation,\n  ApiParam,\n  ApiTags,\n} from \"@nestjs/swagger\";\n\nimport { ApiPaginatedResponse } from \"../common/decorators/api-paginated-response.decorator\";\nimport { PageOptionsDto } from \"../common/dtos/page-options.dto\";\nimport { PageDto } from \"../common/dtos/page.dto\";\nimport { BakeRepoDto } from \"./dtos/baked-repo.dto\";\nimport { PizzaOvenService } from \"./pizza-oven.service\";\nimport { DbBakedRepo } from \"./entities/baked-repo.entity\";\nimport { DbCommitAuthors } from \"./entities/commit_authors.entity\";\nimport { CommitAuthorsService } from \"./commit-authors.service\";\nimport { CommitsService } from \"./commits.service\";\nimport { DbCommits } from \"./entities/commits.entity\";\n\n@Controller(\"bake\")\n@ApiTags(\"Pizza oven service\")\nexport class PizzaOvenController {\n  constructor(\n    private readonly pizzaOvenService: PizzaOvenService,\n    private readonly commitAuthorService: CommitAuthorsService,\n    private readonly commitsService: CommitsService\n  ) {}\n\n  @Post(\"/\")\n  @ApiOperation({\n    operationId: \"Bake a repository with the pizza oven microservice\",\n    summary: \"postToPizzaOvenService\",\n  })\n  @ApiAcceptedResponse()\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  @ApiBody({ type: BakeRepoDto })\n  async postToPizzaOvenService(@Body() bakeOptionsInfo: BakeRepoDto) {\n    const statusCode = await this.pizzaOvenService.postToPizzaOvenService(bakeOptionsInfo);\n\n    if (statusCode !== 202) {\n      throw new BadRequestException();\n    }\n  }\n\n  @Get(\"repos/:id\")\n  @ApiOperation({\n    operationId: \"findBakedRepoById\",\n    summary: \"Finds a baked repo by :id\",\n  })\n  @ApiOkResponse({ type: DbBakedRepo })\n  @ApiNotFoundResponse({ description: \"Baked repository not found\" })\n  @ApiParam({ name: \"id\", type: \"integer\" })\n  async findBakedRepoById(@Param(\"id\", ParseIntPipe) id: number): Promise {\n    return this.pizzaOvenService.findBakedRepoById(id);\n  }\n\n  @Get(\"/repos/list\")\n  @ApiOperation({\n    operationId: \"listAllBakedRepos\",\n    summary: \"Finds all baked repos and paginates them\",\n  })\n  @ApiPaginatedResponse(DbBakedRepo)\n  @ApiOkResponse({ type: DbBakedRepo })\n  async listAllBakedRepos(@Query() pageOptionsDto: PageOptionsDto): Promise> {\n    return this.pizzaOvenService.findAllBakedRepos(pageOptionsDto);\n  }\n\n  @Get(\"commit-authors/:id\")\n  @ApiOperation({\n    operationId: \"findCommitAuthorById\",\n    summary: \"Finds a commit author by :id\",\n  })\n  @ApiOkResponse({ type: DbCommitAuthors })\n  @ApiNotFoundResponse({ description: \"Commit author not found\" })\n  @ApiParam({ name: \"id\", type: \"integer\" })\n  async findCommitAuthorById(@Param(\"id\", ParseIntPipe) id: number): Promise {\n    return this.commitAuthorService.findCommitAuthorById(id);\n  }\n\n  @Get(\"/commit-authors/list\")\n  @ApiOperation({\n    operationId: \"listAllCommitAuthors\",\n    summary: \"Finds all commit authors and paginates them\",\n  })\n  @ApiPaginatedResponse(DbCommitAuthors)\n  @ApiOkResponse({ type: DbCommitAuthors })\n  async listAllCommitAuthors(@Query() pageOptionsDto: PageOptionsDto): Promise> {\n    return this.commitAuthorService.findAllCommitAuthors(pageOptionsDto);\n  }\n\n  @Get(\"commits/:id\")\n  @ApiOperation({\n    operationId: \"findCommitById\",\n    summary: \"Finds a commit by :id\",\n  })\n  @ApiOkResponse({ type: DbCommits })\n  @ApiNotFoundResponse({ description: \"Commit not found\" })\n  @ApiParam({ name: \"id\", type: \"integer\" })\n  async findCommitById(@Param(\"id\", ParseIntPipe) id: number): Promise {\n    return this.commitsService.findCommitById(id);\n  }\n\n  @Get(\"/commits/list/repo/:id\")\n  @ApiOperation({\n    operationId: \"listAllCommitsByBakedRepoId\",\n    summary: \"Finds all commits by baked repo :id and paginates them\",\n  })\n  @ApiPaginatedResponse(DbCommits)\n  @ApiOkResponse({ type: DbCommits })\n  @ApiParam({ name: \"id\", type: \"integer\" })\n  async listAllCommitsByBakedRepoId(\n    @Query() pageOptionsDto: PageOptionsDto,\n    @Param(\"id\", ParseIntPipe) id: number\n  ): Promise> {\n    return this.commitsService.findAllCommitsByBakedRepoId(pageOptionsDto, id);\n  }\n\n  @Get(\"/commits/list/commit-author/:id\")\n  @ApiOperation({\n    operationId: \"listAllCommitsByCommitAuthorId\",\n    summary: \"Finds all commits by commit author :id and paginates them\",\n  })\n  @ApiPaginatedResponse(DbCommits)\n  @ApiOkResponse({ type: DbCommits })\n  @ApiParam({ name: \"id\", type: \"integer\" })\n  async listAllCommitsByCommitAuthorId(\n    @Query() pageOptionsDto: PageOptionsDto,\n    @Param(\"id\", ParseIntPipe) id: number\n  ): Promise> {\n    return this.commitsService.findAllCommitsByCommitAuthorId(pageOptionsDto, id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PizzaOvenModule.html":{"url":"modules/PizzaOvenModule.html","title":"module - PizzaOvenModule","body":"\n                   \n\n\n\n\n    Modules\n    PizzaOvenModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_PizzaOvenModule\n\n\n\ncluster_PizzaOvenModule_exports\n\n\n\ncluster_PizzaOvenModule_providers\n\n\n\ncluster_PizzaOvenModule_imports\n\n\n\n\nApiServicesModule\n\nApiServicesModule\n\n\n\nPizzaOvenModule\n\nPizzaOvenModule\n\nPizzaOvenModule -->\n\nApiServicesModule->PizzaOvenModule\n\n\n\n\n\nCommitAuthorsService \n\nCommitAuthorsService \n\nCommitAuthorsService  -->\n\nPizzaOvenModule->CommitAuthorsService \n\n\n\n\n\nCommitsService \n\nCommitsService \n\nCommitsService  -->\n\nPizzaOvenModule->CommitsService \n\n\n\n\n\nPizzaOvenService \n\nPizzaOvenService \n\nPizzaOvenService  -->\n\nPizzaOvenModule->PizzaOvenService \n\n\n\n\n\nCommitAuthorsService\n\nCommitAuthorsService\n\nPizzaOvenModule -->\n\nCommitAuthorsService->PizzaOvenModule\n\n\n\n\n\nCommitsService\n\nCommitsService\n\nPizzaOvenModule -->\n\nCommitsService->PizzaOvenModule\n\n\n\n\n\nPizzaOvenService\n\nPizzaOvenService\n\nPizzaOvenModule -->\n\nPizzaOvenService->PizzaOvenModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/pizza/pizza-oven.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CommitAuthorsService\n                        \n                        \n                            CommitsService\n                        \n                        \n                            PizzaOvenService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            PizzaOvenController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            ApiServicesModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            CommitAuthorsService\n                        \n                        \n                            CommitsService\n                        \n                        \n                            PizzaOvenService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\nimport { HttpModule } from \"@nestjs/axios\";\n\nimport { ApiServicesModule } from \"../common/services/api-services.module\";\nimport { PizzaOvenService } from \"./pizza-oven.service\";\nimport { PizzaOvenController } from \"./pizza-oven.controller\";\nimport { DbBakedRepo } from \"./entities/baked-repo.entity\";\nimport { DbCommitAuthors } from \"./entities/commit_authors.entity\";\nimport { DbCommits } from \"./entities/commits.entity\";\nimport { CommitAuthorsService } from \"./commit-authors.service\";\nimport { CommitsService } from \"./commits.service\";\n\n@Module({\n  imports: [\n    ApiServicesModule,\n    HttpModule,\n    TypeOrmModule.forFeature([DbBakedRepo, DbCommitAuthors, DbCommits], \"ApiConnection\"),\n  ],\n  controllers: [PizzaOvenController],\n  providers: [PizzaOvenService, CommitAuthorsService, CommitsService],\n  exports: [PizzaOvenService, CommitAuthorsService, CommitsService],\n})\nexport class PizzaOvenModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PizzaOvenService.html":{"url":"injectables/PizzaOvenService.html","title":"injectable - PizzaOvenService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PizzaOvenService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/pizza/pizza-oven.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                baseQueryBuilder\n                            \n                            \n                                    Async\n                                findAllBakedRepos\n                            \n                            \n                                    Async\n                                findBakedRepoById\n                            \n                            \n                                    Async\n                                postToPizzaOvenService\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(bakedRepoRepository: Repository, httpService: HttpService, configService: ConfigService, pagerService: PagerService)\n                    \n                \n                        \n                            \n                                Defined in src/pizza/pizza-oven.service.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        bakedRepoRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        httpService\n                                                  \n                                                        \n                                                                    HttpService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        pagerService\n                                                  \n                                                        \n                                                                        PagerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        baseQueryBuilder\n                        \n                    \n                \n            \n            \n                \nbaseQueryBuilder()\n                \n            \n\n\n            \n                \n                    Defined in src/pizza/pizza-oven.service.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllBakedRepos\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllBakedRepos(pageOptionsDto: PageOptionsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/pizza/pizza-oven.service.ts:56\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findBakedRepoById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findBakedRepoById(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/pizza/pizza-oven.service.ts:42\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        postToPizzaOvenService\n                        \n                    \n                \n            \n            \n                \n                    \n                    postToPizzaOvenService(bakeRepoInfo: BakeRepoDto)\n                \n            \n\n\n            \n                \n                    Defined in src/pizza/pizza-oven.service.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    bakeRepoInfo\n                                    \n                                                BakeRepoDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from \"@nestjs/common\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { lastValueFrom, map } from \"rxjs\";\nimport { HttpService } from \"@nestjs/axios\";\nimport { Repository } from \"typeorm\";\nimport { ConfigService } from \"@nestjs/config\";\n\nimport { PageOptionsDto } from \"../common/dtos/page-options.dto\";\nimport { PageDto } from \"../common/dtos/page.dto\";\nimport { PagerService } from \"../common/services/pager.service\";\nimport { BakeRepoDto } from \"./dtos/baked-repo.dto\";\nimport { DbBakedRepo } from \"./entities/baked-repo.entity\";\n\n@Injectable()\nexport class PizzaOvenService {\n  constructor(\n    @InjectRepository(DbBakedRepo, \"ApiConnection\")\n    private bakedRepoRepository: Repository,\n    private readonly httpService: HttpService,\n    private configService: ConfigService,\n    private pagerService: PagerService\n  ) {}\n\n  baseQueryBuilder() {\n    const builder = this.bakedRepoRepository.createQueryBuilder(\"baked_repos\");\n\n    return builder;\n  }\n\n  async postToPizzaOvenService(bakeRepoInfo: BakeRepoDto): Promise {\n    const data = {\n      url: bakeRepoInfo.url,\n      wait: bakeRepoInfo.wait,\n    };\n\n    const host: string = this.configService.get(\"pizza.host\")!;\n    const port: string = this.configService.get(\"pizza.port\")!;\n\n    return lastValueFrom(this.httpService.post(`${host}:${port}/bake`, data).pipe(map((resp) => resp.status)));\n  }\n\n  async findBakedRepoById(id: number): Promise {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder.where(\"id = :id\", { id });\n\n    const item = await queryBuilder.getOne();\n\n    if (!item) {\n      throw new NotFoundException();\n    }\n\n    return item;\n  }\n\n  async findAllBakedRepos(pageOptionsDto: PageOptionsDto): Promise> {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder.offset(pageOptionsDto.skip).limit(pageOptionsDto.limit);\n\n    return this.pagerService.applyPagination({\n      pageOptionsDto,\n      queryBuilder,\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PullRequestContributorInsightsDto.html":{"url":"classes/PullRequestContributorInsightsDto.html","title":"class - PullRequestContributorInsightsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PullRequestContributorInsightsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/pull-requests/dtos/pull-request-contributor-insights.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PageOptionsDto\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                limit\n                            \n                            \n                                    Readonly\n                                    Optional\n                                repoIds\n                            \n                            \n                                    Readonly\n                                    Optional\n                                orderDirection\n                            \n                            \n                                    Readonly\n                                    Optional\n                                page\n                            \n                            \n                                    Readonly\n                                    Optional\n                                prev_days_start_date\n                            \n                            \n                                    Readonly\n                                    Optional\n                                range\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 50\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, maximum: 1000, default: 10, type: 'integer'})@Type(undefined)@IsInt()@Min(1)@Max(10000)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:24\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        repoIds\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional()@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/dtos/pull-request-contributor-insights.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        orderDirection\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OrderDirectionEnum\n\n                    \n                \n                \n                    \n                        Default value : OrderDirectionEnum.DESC\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: OrderDirectionEnum, enumName: 'OrderDirectionEnum', default: undefined})@IsEnum(OrderDirectionEnum)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:35\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, default: 1, type: 'integer'})@Type(undefined)@IsInt()@Min(1)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:17\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        prev_days_start_date\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 0\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Number of days in the past to start range block', default: 0, type: 'integer'})@Type(undefined)@IsIn(['0', '7', '30', '90'])@IsInt()@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:57\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        range\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 30\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Range in days', default: 30, type: 'integer'})@Type(undefined)@IsIn(['7', '30', '90'])@IsInt()@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:46\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiPropertyOptional } from \"@nestjs/swagger\";\nimport { IsInt, IsOptional, IsString, Max, Min } from \"class-validator\";\nimport { Type } from \"class-transformer\";\n\nimport { PageOptionsDto } from \"../../common/dtos/page-options.dto\";\n\nexport class PullRequestContributorInsightsDto extends PageOptionsDto {\n  @ApiPropertyOptional()\n  @IsString()\n  @IsOptional()\n  readonly repoIds?: string;\n\n  @ApiPropertyOptional({\n    minimum: 1,\n    maximum: 1000,\n    default: 10,\n    type: \"integer\",\n  })\n  @Type(() => Number)\n  @IsInt()\n  @Min(1)\n  @Max(10000)\n  @IsOptional()\n  limit?: number = 50;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PullRequestContributorOptionsDto.html":{"url":"classes/PullRequestContributorOptionsDto.html","title":"class - PullRequestContributorOptionsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PullRequestContributorOptionsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/pull-requests/dtos/pull-request-contributor-options.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PageOptionsDto\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                    Optional\n                                filter\n                            \n                            \n                                    Readonly\n                                    Optional\n                                repo\n                            \n                            \n                                    Readonly\n                                    Optional\n                                repoIds\n                            \n                            \n                                    Readonly\n                                    Optional\n                                topic\n                            \n                            \n                                    Readonly\n                                    Optional\n                                limit\n                            \n                            \n                                    Readonly\n                                    Optional\n                                orderDirection\n                            \n                            \n                                    Readonly\n                                    Optional\n                                page\n                            \n                            \n                                    Readonly\n                                    Optional\n                                prev_days_start_date\n                            \n                            \n                                    Readonly\n                                    Optional\n                                range\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        filter\n                        \n                    \n                \n            \n                \n                    \n                        Type :         InsightFilterFieldsEnum\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: InsightFilterFieldsEnum, enumName: 'InsightFilterFieldsEnum'})@IsEnum(InsightFilterFieldsEnum)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/dtos/pull-request-contributor-options.dto.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        repo\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: 'string', example: 'open-sauced/insights'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/dtos/pull-request-contributor-options.dto.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        repoIds\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional()@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/dtos/pull-request-contributor-options.dto.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        topic\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: 'string', example: 'javascript'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/dtos/pull-request-contributor-options.dto.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 50\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, maximum: 1000, default: 10, type: 'integer'})@Type(undefined)@IsInt()@Min(1)@Max(10000)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:30\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        orderDirection\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OrderDirectionEnum\n\n                    \n                \n                \n                    \n                        Default value : OrderDirectionEnum.DESC\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: OrderDirectionEnum, enumName: 'OrderDirectionEnum', default: undefined})@IsEnum(OrderDirectionEnum)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:35\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, default: 1, type: 'integer'})@Type(undefined)@IsInt()@Min(1)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:17\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        prev_days_start_date\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 0\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Number of days in the past to start range block', default: 0, type: 'integer'})@Type(undefined)@IsIn(['0', '7', '30', '90'])@IsInt()@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:57\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        range\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 30\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Range in days', default: 30, type: 'integer'})@Type(undefined)@IsIn(['7', '30', '90'])@IsInt()@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:46\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiPropertyOptional } from \"@nestjs/swagger\";\nimport { IsEnum, IsOptional, IsString } from \"class-validator\";\n\nimport { PageOptionsDto } from \"../../common/dtos/page-options.dto\";\nimport { InsightFilterFieldsEnum } from \"../../insight/dtos/insight-options.dto\";\n\nexport class PullRequestContributorOptionsDto extends PageOptionsDto {\n  @ApiPropertyOptional({\n    enum: InsightFilterFieldsEnum,\n    enumName: \"InsightFilterFieldsEnum\",\n  })\n  @IsEnum(InsightFilterFieldsEnum)\n  @IsOptional()\n  readonly filter?: InsightFilterFieldsEnum;\n\n  @ApiPropertyOptional({\n    type: \"string\",\n    example: \"javascript\",\n  })\n  @IsString()\n  @IsOptional()\n  readonly topic?: string;\n\n  @ApiPropertyOptional({\n    type: \"string\",\n    example: \"open-sauced/insights\",\n  })\n  @IsString()\n  @IsOptional()\n  readonly repo?: string;\n\n  @ApiPropertyOptional()\n  @IsString()\n  @IsOptional()\n  readonly repoIds?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/PullRequestController.html":{"url":"controllers/PullRequestController.html","title":"controller - PullRequestController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  PullRequestController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/pull-requests/pull-request.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                prs\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getPullRequestInsights\n                            \n                            \n                                    Async\n                                getPullRequestReviews\n                            \n                            \n                                    Async\n                                listAllPullRequests\n                            \n                            \n                                    Async\n                                searchAllPullRequests\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getPullRequestInsights\n                        \n                    \n                \n            \n            \n                \n                    \n                    getPullRequestInsights(pageOptionsDto: FilterOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/insights')@ApiOperation({operationId: 'getPullRequestInsights', summary: 'Find pull request insights over the last 2 months'})@ApiOkResponse({type: undefined})\n                \n            \n\n            \n                \n                    Defined in src/pull-requests/pull-request.controller.ts:53\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                FilterOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getPullRequestReviews\n                        \n                    \n                \n            \n            \n                \n                    \n                    getPullRequestReviews(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:id/reviews')@ApiOperation({operationId: 'getPullRequestReviews', summary: 'Find all pull request reviews by pull request ID'})@ApiOkResponse({type: undefined})@ApiParam({name: 'id', type: 'string'})\n                \n            \n\n            \n                \n                    Defined in src/pull-requests/pull-request.controller.ts:66\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        listAllPullRequests\n                        \n                    \n                \n            \n            \n                \n                    \n                    listAllPullRequests(pageOptionsDto: PageOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/list')@ApiOperation({operationId: 'listAllPullRequests', summary: 'Finds all pull requests and paginates them'})@ApiPaginatedResponse(DbPullRequest)@ApiOkResponse({type: DbPullRequest})\n                \n            \n\n            \n                \n                    Defined in src/pull-requests/pull-request.controller.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        searchAllPullRequests\n                        \n                    \n                \n            \n            \n                \n                    \n                    searchAllPullRequests(pageOptionsDto: PullRequestPageOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/search')@ApiOperation({operationId: 'searchAllPullRequests', summary: 'Searches pull requests using filters and paginates them'})@ApiPaginatedResponse(DbPullRequest)@ApiOkResponse({type: DbPullRequest})\n                \n            \n\n            \n                \n                    Defined in src/pull-requests/pull-request.controller.ts:43\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PullRequestPageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Param, ParseIntPipe, Query } from \"@nestjs/common\";\nimport { ApiOperation, ApiOkResponse, ApiTags, ApiParam } from \"@nestjs/swagger\";\n\nimport { PageOptionsDto } from \"../common/dtos/page-options.dto\";\nimport { ApiPaginatedResponse } from \"../common/decorators/api-paginated-response.decorator\";\nimport { PageDto } from \"../common/dtos/page.dto\";\nimport { FilterOptionsDto } from \"../common/dtos/filter-options.dto\";\nimport { DbPullRequest } from \"./entities/pull-request.entity\";\nimport { PullRequestService } from \"./pull-request.service\";\nimport { PullRequestPageOptionsDto } from \"./dtos/pull-request-page-options.dto\";\nimport { PullRequestInsightsService } from \"./pull-request-insights.service\";\nimport { DbPRInsight } from \"./entities/pull-request-insight.entity\";\nimport { DbPullRequestReview } from \"./entities/pull-request-review.entity\";\nimport { PullRequestReviewService } from \"./pull-request-review.service\";\n\n@Controller(\"prs\")\n@ApiTags(\"Pull Requests service\")\nexport class PullRequestController {\n  constructor(\n    private readonly pullRequestService: PullRequestService,\n    private readonly pullRequestsInsightService: PullRequestInsightsService,\n    private readonly pullRequestReviewService: PullRequestReviewService\n  ) {}\n\n  @Get(\"/list\")\n  @ApiOperation({\n    operationId: \"listAllPullRequests\",\n    summary: \"Finds all pull requests and paginates them\",\n  })\n  @ApiPaginatedResponse(DbPullRequest)\n  @ApiOkResponse({ type: DbPullRequest })\n  async listAllPullRequests(@Query() pageOptionsDto: PageOptionsDto): Promise> {\n    return this.pullRequestService.findAll(pageOptionsDto);\n  }\n\n  @Get(\"/search\")\n  @ApiOperation({\n    operationId: \"searchAllPullRequests\",\n    summary: \"Searches pull requests using filters and paginates them\",\n  })\n  @ApiPaginatedResponse(DbPullRequest)\n  @ApiOkResponse({ type: DbPullRequest })\n  async searchAllPullRequests(@Query() pageOptionsDto: PullRequestPageOptionsDto): Promise> {\n    return this.pullRequestService.findAllWithFilters(pageOptionsDto);\n  }\n\n  @Get(\"/insights\")\n  @ApiOperation({\n    operationId: \"getPullRequestInsights\",\n    summary: \"Find pull request insights over the last 2 months\",\n  })\n  @ApiOkResponse({ type: [DbPRInsight] })\n  async getPullRequestInsights(@Query() pageOptionsDto: FilterOptionsDto): Promise {\n    return Promise.all(\n      [30, 60].map(async (interval) => this.pullRequestsInsightService.getInsight(interval, pageOptionsDto))\n    );\n  }\n\n  @Get(\"/:id/reviews\")\n  @ApiOperation({\n    operationId: \"getPullRequestReviews\",\n    summary: \"Find all pull request reviews by pull request ID\",\n  })\n  @ApiOkResponse({ type: [DbPullRequestReview] })\n  @ApiParam({ name: \"id\", type: \"string\" })\n  async getPullRequestReviews(@Param(\"id\", ParseIntPipe) id: number): Promise {\n    return this.pullRequestReviewService.findAllReviewsByPrId(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/PullRequestDescriptionController.html":{"url":"controllers/PullRequestDescriptionController.html","title":"controller - PullRequestDescriptionController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  PullRequestDescriptionController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/pull-requests/pull-request-description.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                prs\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                generatePRDescription\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        generatePRDescription\n                        \n                    \n                \n            \n            \n                \n                    \n                    generatePRDescription(generatePullRequestDescriptionDto: GeneratePullRequestDescriptionDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/description/generate')@ApiOperation({operationId: 'generatePRDescription', summary: 'Generates a PR description based on the provided information'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiBadRequestResponse({description: 'Invalid request'})@ApiBody({type: GeneratePullRequestDescriptionDto})\n                \n            \n\n            \n                \n                    Defined in src/pull-requests/pull-request-description.controller.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    generatePullRequestDescriptionDto\n                                    \n                                                GeneratePullRequestDescriptionDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { BadRequestException, Body, Controller, Post, UseGuards } from \"@nestjs/common\";\nimport { ApiOperation, ApiBearerAuth, ApiBadRequestResponse, ApiBody, ApiTags } from \"@nestjs/swagger\";\n\nimport { SupabaseGuard } from \"../auth/supabase.guard\";\nimport { GeneratePullRequestDescriptionDto } from \"./dtos/create-pull-request-description.dto\";\nimport { PullRequestDescriptionService } from \"./pull-request-description.service\";\n\n@Controller(\"prs\")\n@ApiTags(\"Pull Requests service\")\nexport class PullRequestDescriptionController {\n  constructor(private pullRequestDescriptionService: PullRequestDescriptionService) {}\n\n  @Post(\"/description/generate\")\n  @ApiOperation({\n    operationId: \"generatePRDescription\",\n    summary: \"Generates a PR description based on the provided information\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  @ApiBody({ type: GeneratePullRequestDescriptionDto })\n  async generatePRDescription(@Body() generatePullRequestDescriptionDto: GeneratePullRequestDescriptionDto) {\n    const description = await this.pullRequestDescriptionService.generateDescription(generatePullRequestDescriptionDto);\n\n    if (!description) {\n      throw new BadRequestException();\n    }\n\n    return { description };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PullRequestDescriptionService.html":{"url":"injectables/PullRequestDescriptionService.html","title":"injectable - PullRequestDescriptionService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PullRequestDescriptionService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/pull-requests/pull-request-description.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                generateDescription\n                            \n                            \n                                    Private\n                                generatePrompt\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(openAiService: OpenAiService)\n                    \n                \n                        \n                            \n                                Defined in src/pull-requests/pull-request-description.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        openAiService\n                                                  \n                                                        \n                                                                        OpenAiService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        generateDescription\n                        \n                    \n                \n            \n            \n                \n                    \n                    generateDescription(options: GeneratePullRequestDescriptionDto)\n                \n            \n\n\n            \n                \n                    Defined in src/pull-requests/pull-request-description.service.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                GeneratePullRequestDescriptionDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        generatePrompt\n                        \n                    \n                \n            \n            \n                \n                    \n                    generatePrompt(language: string, maxLength: number, tone: string)\n                \n            \n\n\n            \n                \n                    Defined in src/pull-requests/pull-request-description.service.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    language\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    maxLength\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    tone\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\n\nimport { OpenAiService } from \"../open-ai/open-ai.service\";\nimport { GeneratePullRequestDescriptionDto } from \"./dtos/create-pull-request-description.dto\";\n\n@Injectable()\nexport class PullRequestDescriptionService {\n  constructor(private openAiService: OpenAiService) {}\n\n  private generatePrompt(language: string, maxLength: number, tone: string) {\n    return [\n      `Generate an apt github PR description written in present tense and ${tone} tone for the given code diff/commit-messages with the specifications mentioned below`,\n      `Description language: ${language}`,\n      `Description must be a maximum of ${maxLength} characters.`,\n      \"Exclude anything unnecessary such as translation. Your entire response will be passed directly into a pull request description\",\n    ].join(\"\\n\");\n  }\n\n  async generateDescription(options: GeneratePullRequestDescriptionDto) {\n    const content = `${options.diff ? `Diff: ${options.diff}\\n` : \"\"}${\n      options.commitMessages ? `\\nCommit Messages: ${options.commitMessages.join(\",\")}` : \"\"\n    }`;\n\n    try {\n      const completion = this.openAiService.generateCompletion(\n        this.generatePrompt(options.language, options.descriptionLength, options.tone),\n        content,\n        options.temperature\n      );\n\n      return completion;\n    } catch (error: unknown) {\n      if (error instanceof Error) {\n        console.error(\"OpenAI error: \", error.message);\n      }\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PullRequestGithubEventsService.html":{"url":"injectables/PullRequestGithubEventsService.html","title":"injectable - PullRequestGithubEventsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PullRequestGithubEventsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/timescale/pull_request_github_events.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                baseQueryBuilder\n                            \n                            \n                                    Async\n                                findAllByPrAuthor\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(pullRequestGithubEventsRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/timescale/pull_request_github_events.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        pullRequestGithubEventsRepository\n                                                  \n                                                        \n                                                                    Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        baseQueryBuilder\n                        \n                    \n                \n            \n            \n                \nbaseQueryBuilder()\n                \n            \n\n\n            \n                \n                    Defined in src/timescale/pull_request_github_events.service.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllByPrAuthor\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllByPrAuthor(author: string, pageOptionsDto: PageOptionsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/timescale/pull_request_github_events.service.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    author\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { Repository } from \"typeorm\";\nimport { PageOptionsDto } from \"../common/dtos/page-options.dto\";\nimport { PageMetaDto } from \"../common/dtos/page-meta.dto\";\nimport { PageDto } from \"../common/dtos/page.dto\";\nimport { GetPrevDateISOString } from \"../common/util/datetimes\";\nimport { DbPullRequestGitHubEvents } from \"./entities/pull_request_github_event\";\n\n@Injectable()\nexport class PullRequestGithubEventsService {\n  constructor(\n    @InjectRepository(DbPullRequestGitHubEvents, \"TimescaleConnection\")\n    private pullRequestGithubEventsRepository: Repository\n  ) {}\n\n  baseQueryBuilder() {\n    const builder = this.pullRequestGithubEventsRepository.createQueryBuilder(\"pull_request_github_events\");\n\n    return builder;\n  }\n\n  async findAllByPrAuthor(author: string, pageOptionsDto: PageOptionsDto): Promise> {\n    const startDate = GetPrevDateISOString(pageOptionsDto.prev_days_start_date);\n    const range = pageOptionsDto.range!;\n    const order = pageOptionsDto.orderDirection!;\n\n    /*\n     * because PR events may be \"opened\" or \"closed\" many times, this inner CTE query gets similar PRs rows\n     *  based on pr_number and repo_name. This essentially gives a full picture of opened/closed PRs\n     *  and their current state\n     */\n\n    const cteBuilder = this.pullRequestGithubEventsRepository\n      .createQueryBuilder(\"pull_request_github_events\")\n      .select(\"*\")\n      .addSelect(`ROW_NUMBER() OVER (PARTITION BY pr_number, repo_name ORDER BY event_time ${order}) AS row_num`)\n      .where(`\"pull_request_github_events\".\"pr_author_login\"=:author`, { author: author.toLowerCase() })\n      .andWhere(`'${startDate}'::TIMESTAMP >= \"pull_request_github_events\".\"event_time\"`)\n      .andWhere(`'${startDate}'::TIMESTAMP - INTERVAL '${range} days' ();\n    const itemCount = parseInt(`${cteCounterResult?.count ?? \"0\"}`, 10);\n\n    const entities = await queryBuilder.getRawMany();\n\n    const pageMetaDto = new PageMetaDto({ itemCount, pageOptionsDto });\n\n    return new PageDto(entities, pageMetaDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PullRequestInsightsService.html":{"url":"injectables/PullRequestInsightsService.html","title":"injectable - PullRequestInsightsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PullRequestInsightsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/pull-requests/pull-request-insights.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                baseQueryBuilder\n                            \n                            \n                                    Async\n                                getInsight\n                            \n                            \n                                hacktoberfestPrCountFilterBuilderEnd\n                            \n                            \n                                hacktoberfestPrCountFilterBuilderStart\n                            \n                            \n                                hacktoberfestPrDateCharBuilder\n                            \n                            \n                                subQueryCountPrs\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prInsightRepository: Repository, repoFilterService: RepoFilterService, configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/pull-requests/pull-request-insights.service.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prInsightRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        repoFilterService\n                                                  \n                                                        \n                                                                        RepoFilterService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        baseQueryBuilder\n                        \n                    \n                \n            \n            \n                \nbaseQueryBuilder()\n                \n            \n\n\n            \n                \n                    Defined in src/pull-requests/pull-request-insights.service.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getInsight\n                        \n                    \n                \n            \n            \n                \n                    \n                    getInsight(interval: number, options: FilterOptionsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/pull-requests/pull-request-insights.service.ts:97\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    interval\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        0\n                                    \n\n                                \n                                \n                                    options\n                                    \n                                                FilterOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        hacktoberfestPrCountFilterBuilderEnd\n                        \n                    \n                \n            \n            \n                \nhacktoberfestPrCountFilterBuilderEnd(interval: number)\n                \n            \n\n\n            \n                \n                    Defined in src/pull-requests/pull-request-insights.service.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    interval\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        0\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        hacktoberfestPrCountFilterBuilderStart\n                        \n                    \n                \n            \n            \n                \nhacktoberfestPrCountFilterBuilderStart()\n                \n            \n\n\n            \n                \n                    Defined in src/pull-requests/pull-request-insights.service.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        hacktoberfestPrDateCharBuilder\n                        \n                    \n                \n            \n            \n                \nhacktoberfestPrDateCharBuilder(interval: number)\n                \n            \n\n\n            \n                \n                    Defined in src/pull-requests/pull-request-insights.service.ts:49\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    interval\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        0\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        subQueryCountPrs\n                        \n                    \n                \n            \n            \n                \nsubQueryCountPrs(qb: SelectQueryBuilder, type: string, interval: number, options: FilterOptionsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/pull-requests/pull-request-insights.service.ts:63\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    qb\n                                    \n                                            SelectQueryBuilder\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    type\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        \"all\"\n                                    \n\n                                \n                                \n                                    interval\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        0\n                                    \n\n                                \n                                \n                                    options\n                                    \n                                                FilterOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from \"@nestjs/common\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { ObjectLiteral, Repository, SelectQueryBuilder } from \"typeorm\";\n\nimport { ConfigService } from \"@nestjs/config\";\nimport { RepoFilterService } from \"../common/filters/repo-filter.service\";\nimport { FilterOptionsDto } from \"../common/dtos/filter-options.dto\";\nimport { GetPrevDateISOString } from \"../common/util/datetimes\";\nimport { DbPRInsight } from \"./entities/pull-request-insight.entity\";\n\n@Injectable()\nexport class PullRequestInsightsService {\n  constructor(\n    @InjectRepository(DbPRInsight, \"ApiConnection\")\n    private prInsightRepository: Repository,\n    private repoFilterService: RepoFilterService,\n    private configService: ConfigService\n  ) {}\n\n  baseQueryBuilder() {\n    return this.prInsightRepository.createQueryBuilder(\"pr\");\n  }\n\n  hacktoberfestPrCountFilterBuilderStart() {\n    const hacktoberfestYear: string = this.configService.get(\"hacktoberfest.year\")!;\n\n    /*\n     * take the date range starting from the last day of October.\n     * this ensures inclusive date range blocks for years in the past.\n     */\n    return `to_date('${hacktoberfestYear}', 'YYYY')\n            + INTERVAL '10 months'\n            - INTERVAL '1 day' >= \"pr\".\"updated_at\"`;\n  }\n\n  hacktoberfestPrCountFilterBuilderEnd(interval = 0) {\n    const hacktoberfestYear: string = this.configService.get(\"hacktoberfest.year\")!;\n\n    /*\n     * take the date range starting from the last day of October minus the range.\n     * so Oct 31st minus 30 days would be the full hacktoberfest month date range\n     */\n    return `to_date('${hacktoberfestYear}', 'YYYY')\n            + INTERVAL '10 months'\n            - INTERVAL '1 day'\n            - INTERVAL '${interval} days' (\n    qb: SelectQueryBuilder,\n    type = \"all\",\n    interval = 0,\n    options: FilterOptionsDto\n  ) {\n    const startDate = GetPrevDateISOString(options.prev_days_start_date);\n    const prQuery = this.baseQueryBuilder()\n      .select(`COALESCE(COUNT(\"pr\".\"id\"), 0)`)\n      .innerJoin(\"repos\", \"repos\", `\"pr\".\"repo_id\"=\"repos\".\"id\"`);\n\n    const filters = this.repoFilterService.getRepoFilters(options, startDate, interval);\n\n    switch (options.topic) {\n      case \"hacktoberfest\":\n        filters.push([this.hacktoberfestPrCountFilterBuilderStart(), {}]);\n        filters.push([this.hacktoberfestPrCountFilterBuilderEnd(interval), {}]);\n        break;\n\n      default:\n        filters.push([`'${startDate}'::TIMESTAMP >= \"pr\".\"updated_at\"`, {}]);\n        filters.push([`'${startDate}'::TIMESTAMP - INTERVAL '${interval} days'  {\n    const startDate = GetPrevDateISOString(options.prev_days_start_date);\n    let queryBuilder: SelectQueryBuilder;\n\n    switch (options.topic) {\n      case \"hacktoberfest\":\n        queryBuilder = this.baseQueryBuilder()\n          .select(this.hacktoberfestPrDateCharBuilder(interval), \"day\")\n          .addSelect(`${interval}::INTEGER`, \"interval\");\n        break;\n\n      default:\n        queryBuilder = this.baseQueryBuilder()\n          .select(`TO_CHAR('${startDate}'::TIMESTAMP - INTERVAL '${interval} days', 'YYYY-MM-DD')`, \"day\")\n          .addSelect(`${interval}::INTEGER`, \"interval\");\n        break;\n    }\n\n    queryBuilder.limit(1);\n\n    [\"all\", \"accepted\", \"spam\"].forEach((type) => {\n      this.subQueryCountPrs(queryBuilder, type, interval, options);\n    });\n\n    queryBuilder.setParameters({ ...options, repoIds: options.repoIds ? options.repoIds.split(\",\") : [] });\n\n    const item: DbPRInsight | undefined = await queryBuilder.getRawOne();\n\n    if (!item) {\n      throw new NotFoundException();\n    }\n\n    return item;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PullRequestModule.html":{"url":"modules/PullRequestModule.html","title":"module - PullRequestModule","body":"\n                   \n\n\n\n\n    Modules\n    PullRequestModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_PullRequestModule\n\n\n\ncluster_PullRequestModule_imports\n\n\n\ncluster_PullRequestModule_exports\n\n\n\ncluster_PullRequestModule_providers\n\n\n\n\nOpenAiModule\n\nOpenAiModule\n\n\n\nPullRequestModule\n\nPullRequestModule\n\nPullRequestModule -->\n\nOpenAiModule->PullRequestModule\n\n\n\n\n\nRepoFilterModule\n\nRepoFilterModule\n\nPullRequestModule -->\n\nRepoFilterModule->PullRequestModule\n\n\n\n\n\nPullRequestReviewService \n\nPullRequestReviewService \n\nPullRequestReviewService  -->\n\nPullRequestModule->PullRequestReviewService \n\n\n\n\n\nPullRequestService \n\nPullRequestService \n\nPullRequestService  -->\n\nPullRequestModule->PullRequestService \n\n\n\n\n\nCodeExplanationService\n\nCodeExplanationService\n\nPullRequestModule -->\n\nCodeExplanationService->PullRequestModule\n\n\n\n\n\nCodeRefactorSuggestionService\n\nCodeRefactorSuggestionService\n\nPullRequestModule -->\n\nCodeRefactorSuggestionService->PullRequestModule\n\n\n\n\n\nCodeTestSuggestionService\n\nCodeTestSuggestionService\n\nPullRequestModule -->\n\nCodeTestSuggestionService->PullRequestModule\n\n\n\n\n\nPullRequestDescriptionService\n\nPullRequestDescriptionService\n\nPullRequestModule -->\n\nPullRequestDescriptionService->PullRequestModule\n\n\n\n\n\nPullRequestInsightsService\n\nPullRequestInsightsService\n\nPullRequestModule -->\n\nPullRequestInsightsService->PullRequestModule\n\n\n\n\n\nPullRequestReviewService\n\nPullRequestReviewService\n\nPullRequestModule -->\n\nPullRequestReviewService->PullRequestModule\n\n\n\n\n\nPullRequestService\n\nPullRequestService\n\nPullRequestModule -->\n\nPullRequestService->PullRequestModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/pull-requests/pull-request.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CodeExplanationService\n                        \n                        \n                            CodeRefactorSuggestionService\n                        \n                        \n                            CodeTestSuggestionService\n                        \n                        \n                            PullRequestDescriptionService\n                        \n                        \n                            PullRequestInsightsService\n                        \n                        \n                            PullRequestReviewService\n                        \n                        \n                            PullRequestService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            PullRequestController\n                        \n                        \n                            PullRequestDescriptionController\n                        \n                        \n                            CodeRefactorSuggestionController\n                        \n                        \n                            CodeTestSuggestionController\n                        \n                        \n                            CodeExplanationController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            OpenAiModule\n                        \n                        \n                            RepoFilterModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            PullRequestReviewService\n                        \n                        \n                            PullRequestService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\n\nimport { RepoFilterModule } from \"../common/filters/repo-filter.module\";\nimport { OpenAiModule } from \"../open-ai/open-ai.module\";\nimport { DbPRInsight } from \"./entities/pull-request-insight.entity\";\nimport { DbPullRequest } from \"./entities/pull-request.entity\";\nimport { PullRequestInsightsService } from \"./pull-request-insights.service\";\nimport { PullRequestController } from \"./pull-request.controller\";\nimport { PullRequestService } from \"./pull-request.service\";\nimport { PullRequestDescriptionService } from \"./pull-request-description.service\";\nimport { PullRequestDescriptionController } from \"./pull-request-description.controller\";\nimport { CodeRefactorSuggestionController } from \"./code-refactor-suggestion.controller\";\nimport { CodeRefactorSuggestionService } from \"./code-refactor-suggestion.service\";\nimport { CodeTestSuggestionController } from \"./code-test.suggestion.controller\";\nimport { CodeExplanationService } from \"./code-explanation.service\";\nimport { CodeExplanationController } from \"./code-explanation.controller\";\nimport { CodeTestSuggestionService } from \"./code-test-suggestion.service\";\nimport { PullRequestReviewService } from \"./pull-request-review.service\";\nimport { DbPullRequestReview } from \"./entities/pull-request-review.entity\";\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([DbPullRequest, DbPRInsight, DbPullRequestReview], \"ApiConnection\"),\n    RepoFilterModule,\n    OpenAiModule,\n  ],\n  controllers: [\n    PullRequestController,\n    PullRequestDescriptionController,\n    CodeRefactorSuggestionController,\n    CodeTestSuggestionController,\n    CodeExplanationController,\n  ],\n  providers: [\n    PullRequestService,\n    PullRequestInsightsService,\n    PullRequestDescriptionService,\n    CodeRefactorSuggestionService,\n    CodeTestSuggestionService,\n    CodeExplanationService,\n    PullRequestReviewService,\n  ],\n  exports: [PullRequestService, PullRequestReviewService],\n})\nexport class PullRequestModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PullRequestPageOptionsDto.html":{"url":"classes/PullRequestPageOptionsDto.html","title":"class - PullRequestPageOptionsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PullRequestPageOptionsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/pull-requests/dtos/pull-request-page-options.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PageOptionsDto\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                    Optional\n                                contributor\n                            \n                            \n                                    Readonly\n                                    Optional\n                                filter\n                            \n                            \n                                    Readonly\n                                    Optional\n                                listId\n                            \n                            \n                                    Readonly\n                                    Optional\n                                orderBy\n                            \n                            \n                                    Readonly\n                                    Optional\n                                repo\n                            \n                            \n                                    Readonly\n                                    Optional\n                                repoIds\n                            \n                            \n                                    Readonly\n                                    Optional\n                                status\n                            \n                            \n                                    Readonly\n                                    Optional\n                                topic\n                            \n                            \n                                    Readonly\n                                    Optional\n                                limit\n                            \n                            \n                                    Readonly\n                                    Optional\n                                orderDirection\n                            \n                            \n                                    Readonly\n                                    Optional\n                                page\n                            \n                            \n                                    Readonly\n                                    Optional\n                                prev_days_start_date\n                            \n                            \n                                    Readonly\n                                    Optional\n                                range\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        contributor\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: 'string', example: 'bdougie'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/dtos/pull-request-page-options.dto.ts:72\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        filter\n                        \n                    \n                \n            \n                \n                    \n                        Type :         InsightFilterFieldsEnum\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: InsightFilterFieldsEnum, enumName: 'InsightFilterFieldsEnum'})@IsEnum(InsightFilterFieldsEnum)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/dtos/pull-request-page-options.dto.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        listId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: 'string', example: 'uuid-v4'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/dtos/pull-request-page-options.dto.ts:80\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        orderBy\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PullRequestOrderFieldsEnum\n\n                    \n                \n                \n                    \n                        Default value : PullRequestOrderFieldsEnum.updated_at\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: PullRequestOrderFieldsEnum, enumName: 'PullRequestOrderFieldsEnum', default: undefined})@IsEnum(PullRequestOrderFieldsEnum)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/dtos/pull-request-page-options.dto.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        repo\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: 'string', example: 'open-sauced/insights'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/dtos/pull-request-page-options.dto.ts:51\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        repoIds\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional()@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/dtos/pull-request-page-options.dto.ts:56\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PullRequestStatusEnum\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: PullRequestStatusEnum, enumName: 'PullRequestStatusEnum'})@IsEnum(PullRequestStatusEnum)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/dtos/pull-request-page-options.dto.ts:64\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        topic\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: 'string', example: 'javascript'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/dtos/pull-request-page-options.dto.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 50\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, maximum: 1000, default: 10, type: 'integer'})@Type(undefined)@IsInt()@Min(1)@Max(10000)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:30\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        orderDirection\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OrderDirectionEnum\n\n                    \n                \n                \n                    \n                        Default value : OrderDirectionEnum.DESC\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: OrderDirectionEnum, enumName: 'OrderDirectionEnum', default: undefined})@IsEnum(OrderDirectionEnum)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:35\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, default: 1, type: 'integer'})@Type(undefined)@IsInt()@Min(1)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:17\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        prev_days_start_date\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 0\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Number of days in the past to start range block', default: 0, type: 'integer'})@Type(undefined)@IsIn(['0', '7', '30', '90'])@IsInt()@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:57\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        range\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 30\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Range in days', default: 30, type: 'integer'})@Type(undefined)@IsIn(['7', '30', '90'])@IsInt()@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:46\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiPropertyOptional } from \"@nestjs/swagger\";\nimport { IsEnum, IsOptional, IsString } from \"class-validator\";\n\nimport { PageOptionsDto } from \"../../common/dtos/page-options.dto\";\nimport { InsightFilterFieldsEnum } from \"../../insight/dtos/insight-options.dto\";\n\nexport enum PullRequestOrderFieldsEnum {\n  created_at = \"created_at\",\n  closed_at = \"closed_at\",\n  merged_at = \"merged_at\",\n  updated_at = \"updated_at\",\n}\n\nexport enum PullRequestStatusEnum {\n  open = \"open\",\n  closed = \"closed\",\n}\n\nexport class PullRequestPageOptionsDto extends PageOptionsDto {\n  @ApiPropertyOptional({\n    enum: PullRequestOrderFieldsEnum,\n    enumName: \"PullRequestOrderFieldsEnum\",\n    default: PullRequestOrderFieldsEnum.updated_at,\n  })\n  @IsEnum(PullRequestOrderFieldsEnum)\n  @IsOptional()\n  readonly orderBy?: PullRequestOrderFieldsEnum = PullRequestOrderFieldsEnum.updated_at;\n\n  @ApiPropertyOptional({\n    enum: InsightFilterFieldsEnum,\n    enumName: \"InsightFilterFieldsEnum\",\n  })\n  @IsEnum(InsightFilterFieldsEnum)\n  @IsOptional()\n  readonly filter?: InsightFilterFieldsEnum;\n\n  @ApiPropertyOptional({\n    type: \"string\",\n    example: \"javascript\",\n  })\n  @IsString()\n  @IsOptional()\n  readonly topic?: string;\n\n  @ApiPropertyOptional({\n    type: \"string\",\n    example: \"open-sauced/insights\",\n  })\n  @IsString()\n  @IsOptional()\n  readonly repo?: string;\n\n  @ApiPropertyOptional()\n  @IsString()\n  @IsOptional()\n  readonly repoIds?: string;\n\n  @ApiPropertyOptional({\n    enum: PullRequestStatusEnum,\n    enumName: \"PullRequestStatusEnum\",\n  })\n  @IsEnum(PullRequestStatusEnum)\n  @IsOptional()\n  readonly status?: PullRequestStatusEnum;\n\n  @ApiPropertyOptional({\n    type: \"string\",\n    example: \"bdougie\",\n  })\n  @IsString()\n  @IsOptional()\n  readonly contributor?: string;\n\n  @ApiPropertyOptional({\n    type: \"string\",\n    example: \"uuid-v4\",\n  })\n  @IsString()\n  @IsOptional()\n  readonly listId?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PullRequestReviewService.html":{"url":"injectables/PullRequestReviewService.html","title":"injectable - PullRequestReviewService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PullRequestReviewService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/pull-requests/pull-request-review.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                findAllReviewsByPrId\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(pullRequestReviewRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/pull-requests/pull-request-review.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        pullRequestReviewRepository\n                                                  \n                                                        \n                                                                    Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllReviewsByPrId\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllReviewsByPrId(PrId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/pull-requests/pull-request-review.service.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    PrId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { Repository } from \"typeorm\";\nimport { DbPullRequestReview } from \"./entities/pull-request-review.entity\";\n\n@Injectable()\nexport class PullRequestReviewService {\n  constructor(\n    @InjectRepository(DbPullRequestReview, \"ApiConnection\")\n    private pullRequestReviewRepository: Repository\n  ) {}\n\n  async findAllReviewsByPrId(PrId: number): Promise {\n    return this.pullRequestReviewRepository.find({\n      where: { pullRequest: { id: PrId } },\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PullRequestService.html":{"url":"injectables/PullRequestService.html","title":"injectable - PullRequestService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PullRequestService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/pull-requests/pull-request.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                baseQueryBuilder\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findAllByContributor\n                            \n                            \n                                    Async\n                                findAllChurnContributors\n                            \n                            \n                                    Async\n                                findAllContributorsWithFilters\n                            \n                            \n                                    Async\n                                findAllRecentContributors\n                            \n                            \n                                    Async\n                                findAllRepeatContributors\n                            \n                            \n                                    Async\n                                findAllWithFilters\n                            \n                            \n                                    Async\n                                findNewContributorsInTimeRange\n                            \n                            \n                                    Private\n                                getContributorRangeQueryBuilder\n                            \n                            \n                                hacktoberfestPrFilterBuilderEnd\n                            \n                            \n                                hacktoberfestPrFilterBuilderStart\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(pullRequestRepository: Repository, filterService: RepoFilterService, configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/pull-requests/pull-request.service.ts:21\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        pullRequestRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        filterService\n                                                  \n                                                        \n                                                                        RepoFilterService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        baseQueryBuilder\n                        \n                    \n                \n            \n            \n                \nbaseQueryBuilder()\n                \n            \n\n\n            \n                \n                    Defined in src/pull-requests/pull-request.service.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll(pageOptionsDto: PageOptionsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/pull-requests/pull-request.service.ts:60\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllByContributor\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllByContributor(contributor: string, pageOptionsDto: ContributorPullRequestsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/pull-requests/pull-request.service.ts:76\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    contributor\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                ContributorPullRequestsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllChurnContributors\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllChurnContributors(pageOptionsDto: PullRequestContributorOptionsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/pull-requests/pull-request.service.ts:285\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PullRequestContributorOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllContributorsWithFilters\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllContributorsWithFilters(pageOptionsDto: PullRequestContributorOptionsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/pull-requests/pull-request.service.ts:174\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PullRequestContributorOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllRecentContributors\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllRecentContributors(pageOptionsDto: PullRequestContributorInsightsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/pull-requests/pull-request.service.ts:266\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PullRequestContributorInsightsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllRepeatContributors\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllRepeatContributors(pageOptionsDto: PullRequestContributorOptionsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/pull-requests/pull-request.service.ts:323\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PullRequestContributorOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllWithFilters\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllWithFilters(pageOptionsDto: PullRequestPageOptionsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/pull-requests/pull-request.service.ts:109\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PullRequestPageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findNewContributorsInTimeRange\n                        \n                    \n                \n            \n            \n                \n                    \n                    findNewContributorsInTimeRange(pageOptionsDto: PullRequestContributorInsightsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/pull-requests/pull-request.service.ts:228\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PullRequestContributorInsightsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        getContributorRangeQueryBuilder\n                        \n                    \n                \n            \n            \n                \n                    \n                    getContributorRangeQueryBuilder(start_date: string, start_range: number, end_range: number, repoIds: string[])\n                \n            \n\n\n            \n                \n                    Defined in src/pull-requests/pull-request.service.ts:361\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    start_date\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    start_range\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    end_range\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    repoIds\n                                    \n                                            string[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        hacktoberfestPrFilterBuilderEnd\n                        \n                    \n                \n            \n            \n                \nhacktoberfestPrFilterBuilderEnd(range: number)\n                \n            \n\n\n            \n                \n                    Defined in src/pull-requests/pull-request.service.ts:47\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    range\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        30\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        hacktoberfestPrFilterBuilderStart\n                        \n                    \n                \n            \n            \n                \nhacktoberfestPrFilterBuilderStart()\n                \n            \n\n\n            \n                \n                    Defined in src/pull-requests/pull-request.service.ts:35\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { BadRequestException, Injectable } from \"@nestjs/common\";\nimport { Repository } from \"typeorm\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\n\nimport { ConfigService } from \"@nestjs/config\";\nimport { GetPrevDateISOString } from \"../common/util/datetimes\";\nimport { PageMetaDto } from \"../common/dtos/page-meta.dto\";\nimport { PageDto } from \"../common/dtos/page.dto\";\nimport { OrderDirectionEnum } from \"../common/constants/order-direction.constant\";\nimport { PageOptionsDto } from \"../common/dtos/page-options.dto\";\nimport { RepoFilterService } from \"../common/filters/repo-filter.service\";\nimport { InsightFilterFieldsEnum } from \"../insight/dtos/insight-options.dto\";\nimport { ContributorPullRequestsDto, RangeTypeEnum } from \"../user/dtos/contributor-prs.dto\";\nimport { PullRequestPageOptionsDto } from \"./dtos/pull-request-page-options.dto\";\nimport { DbPullRequest } from \"./entities/pull-request.entity\";\nimport { DbPullRequestContributor } from \"./dtos/pull-request-contributor.dto\";\nimport { PullRequestContributorOptionsDto } from \"./dtos/pull-request-contributor-options.dto\";\nimport { PullRequestContributorInsightsDto } from \"./dtos/pull-request-contributor-insights.dto\";\n\n@Injectable()\nexport class PullRequestService {\n  constructor(\n    @InjectRepository(DbPullRequest, \"ApiConnection\")\n    private pullRequestRepository: Repository,\n    private filterService: RepoFilterService,\n    private configService: ConfigService\n  ) {}\n\n  baseQueryBuilder() {\n    const builder = this.pullRequestRepository.createQueryBuilder(\"pull_requests\");\n\n    return builder;\n  }\n\n  hacktoberfestPrFilterBuilderStart() {\n    const hacktoberfestYear: string = this.configService.get(\"hacktoberfest.year\")!;\n\n    /*\n     * take the date range starting from the last day of October.\n     * this is inclusive of previous years where the current pull_requests have \"newer\" updates\n     */\n    return `to_date('${hacktoberfestYear}', 'YYYY')\n                + INTERVAL '10 months'\n                - INTERVAL '1 day' >= \"pull_requests\".\"updated_at\"`;\n  }\n\n  hacktoberfestPrFilterBuilderEnd(range = 30) {\n    const hacktoberfestYear: string = this.configService.get(\"hacktoberfest.year\")!;\n\n    /*\n     * take the date range starting from the last day of October.\n     * so Oct 31st minus 30 days would be the full hacktoberfest month date range\n     */\n    return `to_date('${hacktoberfestYear}', 'YYYY')\n                + INTERVAL '10 months'\n                - INTERVAL '1 day'\n                - INTERVAL '${range} days' > {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .addOrderBy(`\"pull_requests\".\"updated_at\"`, OrderDirectionEnum.DESC)\n      .offset(pageOptionsDto.skip)\n      .limit(pageOptionsDto.limit);\n\n    const itemCount = await queryBuilder.getCount();\n    const entities = await queryBuilder.getMany();\n\n    const pageMetaDto = new PageMetaDto({ itemCount, pageOptionsDto });\n\n    return new PageDto(entities, pageMetaDto);\n  }\n\n  async findAllByContributor(\n    contributor: string,\n    pageOptionsDto: ContributorPullRequestsDto\n  ): Promise> {\n    const queryBuilder = this.baseQueryBuilder();\n    const startDate = GetPrevDateISOString(pageOptionsDto.prev_days_start_date);\n    const range = pageOptionsDto.range!;\n\n    queryBuilder\n      .innerJoin(\"repos\", \"repos\", `\"pull_requests\".\"repo_id\"=\"repos\".\"id\"`)\n      .addSelect(\"repos.full_name\", \"pull_requests_full_name\")\n      .addSelect(\"repos.id\", \"pull_requests_repo_id\")\n      .where(`LOWER(\"pull_requests\".\"author_login\")=:contributor`, { contributor: contributor.toLowerCase() });\n\n    if (pageOptionsDto.rangeType === RangeTypeEnum.Recent) {\n      queryBuilder\n        .andWhere(`'${startDate}'::TIMESTAMP >= \"pull_requests\".\"updated_at\"`)\n        .andWhere(`'${startDate}'::TIMESTAMP - INTERVAL '${range} days' > {\n    const queryBuilder = this.baseQueryBuilder();\n    const startDate = GetPrevDateISOString(pageOptionsDto.prev_days_start_date);\n    const range = pageOptionsDto.range!;\n\n    queryBuilder\n      .innerJoin(\"repos\", \"repos\", `\"pull_requests\".\"repo_id\"=\"repos\".\"id\"`)\n      .addSelect(\"repos.full_name\", \"pull_requests_full_name\")\n      .addSelect(\"repos.id\", \"pull_requests_repo_id\");\n\n    const filters = this.filterService.getRepoFilters(pageOptionsDto, startDate, range);\n\n    switch (pageOptionsDto.topic) {\n      case \"hacktoberfest\":\n        filters.push([this.hacktoberfestPrFilterBuilderStart(), {}]);\n        filters.push([this.hacktoberfestPrFilterBuilderEnd(range), {}]);\n        break;\n      default:\n        filters.push([`'${startDate}'::TIMESTAMP >= \"pull_requests\".\"updated_at\"`, {}]);\n        filters.push([`'${startDate}'::TIMESTAMP - INTERVAL '${range} days' > {\n    const queryBuilder = this.pullRequestRepository.manager.createQueryBuilder();\n    const startDate = GetPrevDateISOString(pageOptionsDto.prev_days_start_date);\n    const range = pageOptionsDto.range!;\n\n    queryBuilder\n      .from(DbPullRequest, \"pull_requests\")\n      .distinct()\n      .select(\"pull_requests.author_login\", \"author_login\")\n      .addSelect(\"MAX(pull_requests.updated_at)\", \"updated_at\")\n      .addSelect(\"users.id\", \"user_id\")\n      .innerJoin(\"repos\", \"repos\", `\"pull_requests\".\"repo_id\"=\"repos\".\"id\"`)\n      .innerJoin(\"users\", \"users\", `\"pull_requests\".\"author_login\"=\"users\".\"login\"`)\n      .addGroupBy(\"author_login\")\n      .addGroupBy(\"users.id\");\n\n    const filters = this.filterService.getRepoFilters(pageOptionsDto, startDate, range);\n\n    switch (pageOptionsDto.topic) {\n      case \"hacktoberfest\":\n        filters.push([this.hacktoberfestPrFilterBuilderStart(), {}]);\n        filters.push([this.hacktoberfestPrFilterBuilderEnd(range), {}]);\n        break;\n      default:\n        filters.push([`'${startDate}'::TIMESTAMP >= \"pull_requests\".\"updated_at\"`, {}]);\n        filters.push([`'${startDate}'::TIMESTAMP - INTERVAL '${range} days' ();\n    const itemCount = parseInt(`${countQueryResult?.count ?? \"0\"}`, 10);\n\n    queryBuilder\n      .addOrderBy(`\"updated_at\"`, OrderDirectionEnum.DESC)\n      .offset(pageOptionsDto.skip)\n      .limit(pageOptionsDto.limit);\n\n    const entities: DbPullRequestContributor[] = await queryBuilder.getRawMany();\n\n    const pageMetaDto = new PageMetaDto({ itemCount, pageOptionsDto });\n\n    return new PageDto(entities, pageMetaDto);\n  }\n\n  async findNewContributorsInTimeRange(\n    pageOptionsDto: PullRequestContributorInsightsDto\n  ): Promise> {\n    const startDate = GetPrevDateISOString(pageOptionsDto.prev_days_start_date);\n    const range = pageOptionsDto.range!;\n    const repoIds = pageOptionsDto.repoIds?.split(\",\") ?? [];\n\n    const queryBuilder = this.pullRequestRepository.manager.createQueryBuilder();\n    const currentMonthQuery = this.getContributorRangeQueryBuilder(startDate, 0, range, repoIds);\n\n    queryBuilder\n      .select(\"current_month.author_login\")\n      .distinct()\n      .from(`(${currentMonthQuery.getQuery()})`, \"current_month\")\n      .leftJoin(\n        (qb) =>\n          qb\n            .select(\"author_login\")\n            .distinct()\n            .from(DbPullRequest, \"pull_requests\")\n            .innerJoin(\"repos\", \"repos\", `\"pull_requests\".\"repo_id\"=\"repos\".\"id\"`)\n            .where(`pull_requests.updated_at >= '${startDate}'::TIMESTAMP - INTERVAL '${range + range} days'`)\n            .andWhere(`pull_requests.updated_at > {\n    const startDate = GetPrevDateISOString(pageOptionsDto.prev_days_start_date);\n    const range = pageOptionsDto.range!;\n    const repoIds = pageOptionsDto.repoIds?.split(\",\") ?? [];\n\n    const queryBuilder = this.getContributorRangeQueryBuilder(startDate, 0, range, repoIds);\n    const entities: DbPullRequestContributor[] = await queryBuilder.getRawMany();\n    const itemCount = entities.length;\n\n    const pageMetaDto = new PageMetaDto({\n      itemCount,\n      pageOptionsDto: { ...pageOptionsDto, limit: itemCount, skip: 0 },\n    });\n\n    return new PageDto(entities, pageMetaDto);\n  }\n\n  async findAllChurnContributors(\n    pageOptionsDto: PullRequestContributorOptionsDto\n  ): Promise> {\n    const startDate = GetPrevDateISOString(pageOptionsDto.prev_days_start_date);\n    const range = pageOptionsDto.range!;\n    const repoIds = pageOptionsDto.repoIds?.split(\",\") ?? [];\n\n    const queryBuilder = this.pullRequestRepository.manager.createQueryBuilder();\n    const prevMonthQuery = this.getContributorRangeQueryBuilder(startDate, range, range + range, repoIds);\n\n    queryBuilder\n      .select(\"previous_month.author_login\")\n      .distinct()\n      .from(`(${prevMonthQuery.getQuery()})`, \"previous_month\")\n      .leftJoin(\n        (qb) =>\n          qb\n            .select(\"author_login\")\n            .distinct()\n            .from(DbPullRequest, \"pull_requests\")\n            .innerJoin(\"repos\", \"repos\", `\"pull_requests\".\"repo_id\"=\"repos\".\"id\"`)\n            .where(`pull_requests.updated_at >= '${startDate}'::TIMESTAMP - INTERVAL '${range} days'`)\n            .andWhere(`pull_requests.updated_at > {\n    const startDate = GetPrevDateISOString(pageOptionsDto.prev_days_start_date);\n    const range = pageOptionsDto.range!;\n    const repoIds = pageOptionsDto.repoIds?.split(\",\") ?? [];\n\n    const queryBuilder = this.pullRequestRepository.manager.createQueryBuilder();\n    const prevMonthQuery = this.getContributorRangeQueryBuilder(startDate, range, range + range, repoIds);\n\n    queryBuilder\n      .select(\"previous_month.author_login\")\n      .distinct()\n      .from(`(${prevMonthQuery.getQuery()})`, \"previous_month\")\n      .leftJoin(\n        (qb) =>\n          qb\n            .select(\"author_login\")\n            .distinct()\n            .from(DbPullRequest, \"pull_requests\")\n            .innerJoin(\"repos\", \"repos\", `\"pull_requests\".\"repo_id\"=\"repos\".\"id\"`)\n            .where(`pull_requests.updated_at >= '${startDate}'::TIMESTAMP - INTERVAL '${range} days'`)\n            .andWhere(`pull_requests.updated_at = '${start_date}'::TIMESTAMP - INTERVAL '${end_range} days'`)\n      .andWhere(`pull_requests.updated_at \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/RepoContributionsController.html":{"url":"controllers/RepoContributionsController.html","title":"controller - RepoContributionsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  RepoContributionsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/contribution/repo-contributions.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                repos\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                findAllByOwnerAndRepo\n                            \n                            \n                                    Async\n                                findAllByOwnerRepoAndContributorLogin\n                            \n                            \n                                    Async\n                                findAllByRepoId\n                            \n                            \n                                    Async\n                                findAllUserContributionsByRepoId\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllByOwnerAndRepo\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllByOwnerAndRepo(owner: string, repo: string, pageOptionsDto: ContributionPageOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:owner/:repo/contributions')@ApiOperation({operationId: 'findAllByOwnerAndRepo', summary: 'Finds a repo by :owner and :repo listing all contributions and paginating them'})@ApiPaginatedResponse(DbContribution)@ApiOkResponse({type: DbContribution})@ApiNotFoundResponse({description: 'Repo not found'})\n                \n            \n\n            \n                \n                    Defined in src/contribution/repo-contributions.controller.ts:42\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    owner\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    repo\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                ContributionPageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllByOwnerRepoAndContributorLogin\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllByOwnerRepoAndContributorLogin(owner: string, repo: string, login: string, range: number, prev_days_start_date: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:owner/:repo/:login/contributions')@ApiOperation({operationId: 'findAllByOwnerRepoAndContributorLogin', summary: 'Finds a repo by :owner and :repo listing all contributions for a given :login and paginating them'})@ApiOkResponse({type: DbRepoLoginContributions})@ApiNotFoundResponse({description: 'Repo not found'})@ApiQuery({name: 'range', type: 'integer', description: 'Range in days', required: false})@ApiQuery({name: 'prev_days_start_date', type: 'integer', description: 'Previous number of days to go back to start date range', required: false})\n                \n            \n\n            \n                \n                    Defined in src/contribution/repo-contributions.controller.ts:101\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    owner\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    repo\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    login\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    range\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        30\n                                    \n\n                                \n                                \n                                    prev_days_start_date\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        0\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllByRepoId\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllByRepoId(id: number, pageOptionsDto: ContributionPageOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:id/contributions')@ApiOperation({operationId: 'findAllByRepoId', summary: 'Find a repo by :id listing all contributions and paginating them'})@ApiPaginatedResponse(DbContribution)@ApiOkResponse({type: DbContribution})@ApiNotFoundResponse({description: 'Repo not found'})@ApiParam({name: 'id', type: 'integer'})\n                \n            \n\n            \n                \n                    Defined in src/contribution/repo-contributions.controller.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                ContributionPageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllUserContributionsByRepoId\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllUserContributionsByRepoId(owner: string, repo: string, range: number, prev_days_start_date: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:owner/:repo/contributions/contributors')@ApiOperation({operationId: 'findAllContributorsByRepoId', summary: 'Finds a repo by :owner and :repo listing all contributions by their user login'})@ApiOkResponse({type: DbRepoLoginContributions, isArray: true})@ApiNotFoundResponse({description: 'Repo not found'})@ApiQuery({name: 'range', type: 'integer', description: 'Range in days', required: false})@ApiQuery({name: 'prev_days_start_date', type: 'integer', description: 'Previous number of days to go back to start date range', required: false})\n                \n            \n\n            \n                \n                    Defined in src/contribution/repo-contributions.controller.ts:71\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    owner\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    repo\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    range\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        30\n                                    \n\n                                \n                                \n                                    prev_days_start_date\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        0\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Param, ParseIntPipe, Query } from \"@nestjs/common\";\nimport { ApiNotFoundResponse, ApiOkResponse, ApiOperation, ApiParam, ApiQuery, ApiTags } from \"@nestjs/swagger\";\nimport { RepoService } from \"../repo/repo.service\";\nimport { ApiPaginatedResponse } from \"../common/decorators/api-paginated-response.decorator\";\nimport { PageDto } from \"../common/dtos/page.dto\";\nimport { ContributionService } from \"./contribution.service\";\nimport { DbContribution } from \"./contribution.entity\";\nimport { ContributionPageOptionsDto } from \"./dtos/contribution-page-options.dto\";\nimport { DbRepoLoginContributions } from \"./entities/repo-user-contributions.entity\";\n\n@Controller(\"repos\")\n@ApiTags(\"Repository service\", \"Contribution service\")\nexport class RepoContributionsController {\n  constructor(private readonly repoService: RepoService, private readonly contributionService: ContributionService) {}\n\n  @Get(\"/:id/contributions\")\n  @ApiOperation({\n    operationId: \"findAllByRepoId\",\n    summary: \"Find a repo by :id listing all contributions and paginating them\",\n  })\n  @ApiPaginatedResponse(DbContribution)\n  @ApiOkResponse({ type: DbContribution })\n  @ApiNotFoundResponse({ description: \"Repo not found\" })\n  @ApiParam({ name: \"id\", type: \"integer\" })\n  async findAllByRepoId(\n    @Param(\"id\", ParseIntPipe) id: number,\n    @Query() pageOptionsDto: ContributionPageOptionsDto\n  ): Promise> {\n    const item = await this.repoService.findOneById(id);\n\n    return this.contributionService.findAll(pageOptionsDto, item.id);\n  }\n\n  @Get(\"/:owner/:repo/contributions\")\n  @ApiOperation({\n    operationId: \"findAllByOwnerAndRepo\",\n    summary: \"Finds a repo by :owner and :repo listing all contributions and paginating them\",\n  })\n  @ApiPaginatedResponse(DbContribution)\n  @ApiOkResponse({ type: DbContribution })\n  @ApiNotFoundResponse({ description: \"Repo not found\" })\n  async findAllByOwnerAndRepo(\n    @Param(\"owner\") owner: string,\n    @Param(\"repo\") repo: string,\n    @Query() pageOptionsDto: ContributionPageOptionsDto\n  ): Promise> {\n    const item = await this.repoService.findOneByOwnerAndRepo(owner, repo);\n\n    return this.contributionService.findAll(pageOptionsDto, item.id);\n  }\n\n  @Get(\"/:owner/:repo/contributions/contributors\")\n  @ApiOperation({\n    operationId: \"findAllContributorsByRepoId\",\n    summary: \"Finds a repo by :owner and :repo listing all contributions by their user login\",\n  })\n  @ApiOkResponse({ type: DbRepoLoginContributions, isArray: true })\n  @ApiNotFoundResponse({ description: \"Repo not found\" })\n  @ApiQuery({\n    name: \"range\",\n    type: \"integer\",\n    description: \"Range in days\",\n    required: false,\n  })\n  @ApiQuery({\n    name: \"prev_days_start_date\",\n    type: \"integer\",\n    description: \"Previous number of days to go back to start date range\",\n    required: false,\n  })\n  async findAllUserContributionsByRepoId(\n    @Param(\"owner\") owner: string,\n    @Param(\"repo\") repo: string,\n    @Query(\"range\") range = 30,\n    @Query(\"prev_days_start_date\") prev_days_start_date = 0\n  ): Promise {\n    const item = await this.repoService.findOneByOwnerAndRepo(owner, repo);\n\n    return this.contributionService.findAllByRepoId(item.id, range, prev_days_start_date);\n  }\n\n  @Get(\"/:owner/:repo/:login/contributions\")\n  @ApiOperation({\n    operationId: \"findAllByOwnerRepoAndContributorLogin\",\n    summary: \"Finds a repo by :owner and :repo listing all contributions for a given :login and paginating them\",\n  })\n  @ApiOkResponse({ type: DbRepoLoginContributions })\n  @ApiNotFoundResponse({ description: \"Repo not found\" })\n  @ApiQuery({\n    name: \"range\",\n    type: \"integer\",\n    description: \"Range in days\",\n    required: false,\n  })\n  @ApiQuery({\n    name: \"prev_days_start_date\",\n    type: \"integer\",\n    description: \"Previous number of days to go back to start date range\",\n    required: false,\n  })\n  async findAllByOwnerRepoAndContributorLogin(\n    @Param(\"owner\") owner: string,\n    @Param(\"repo\") repo: string,\n    @Param(\"login\") login: string,\n    @Query(\"range\") range = 30,\n    @Query(\"prev_days_start_date\") prev_days_start_date = 0\n  ): Promise {\n    const item = await this.repoService.findOneByOwnerAndRepo(owner, repo);\n\n    return this.contributionService.findAllByUserLogin(item.id, login, range, prev_days_start_date);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/RepoController.html":{"url":"controllers/RepoController.html","title":"controller - RepoController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  RepoController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/repo/repo.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                repos\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findAllReposWithFilters\n                            \n                            \n                                    Async\n                                findOneById\n                            \n                            \n                                    Async\n                                findOneByOwnerAndRepo\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll(pageOptionsDto: RepoPageOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/list')@ApiOperation({operationId: 'findAll', summary: 'Finds all repos and paginates them'})@ApiPaginatedResponse(DbRepo)@ApiOkResponse({type: DbRepo})\n                \n            \n\n            \n                \n                    Defined in src/repo/repo.controller.ts:45\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                RepoPageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllReposWithFilters\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllReposWithFilters(pageOptionsDto: RepoSearchOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/search')@ApiOperation({operationId: 'findAllReposWithFilters', summary: 'Finds all repos using filters and paginates them'})@ApiPaginatedResponse(DbRepo)@ApiOkResponse({type: DbRepo})\n                \n            \n\n            \n                \n                    Defined in src/repo/repo.controller.ts:56\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                RepoSearchOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneById(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:id')@ApiOperation({operationId: 'findOneById', summary: 'Finds a repo by :id'})@ApiOkResponse({type: DbRepo})@ApiNotFoundResponse({description: 'Repository not found'})@ApiParam({name: 'id', type: 'integer'})\n                \n            \n\n            \n                \n                    Defined in src/repo/repo.controller.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneByOwnerAndRepo\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneByOwnerAndRepo(owner: string, repo: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:owner/:repo')@ApiOperation({operationId: 'findOneByOwnerAndRepo', summary: 'Finds a repo by :owner and :repo'})@ApiOkResponse({type: DbRepo})@ApiNotFoundResponse({description: 'Repository not found'})\n                \n            \n\n            \n                \n                    Defined in src/repo/repo.controller.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    owner\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    repo\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Param, ParseIntPipe, Query } from \"@nestjs/common\";\nimport { ApiNotFoundResponse, ApiOkResponse, ApiOperation, ApiParam, ApiTags } from \"@nestjs/swagger\";\nimport { PageDto } from \"../common/dtos/page.dto\";\nimport { ApiPaginatedResponse } from \"../common/decorators/api-paginated-response.decorator\";\nimport { DbRepo } from \"./entities/repo.entity\";\nimport { RepoService } from \"./repo.service\";\nimport { RepoPageOptionsDto } from \"./dtos/repo-page-options.dto\";\nimport { RepoSearchOptionsDto } from \"./dtos/repo-search-options.dto\";\n\n@Controller(\"repos\")\n@ApiTags(\"Repository service\")\nexport class RepoController {\n  constructor(private readonly repoService: RepoService) {}\n\n  @Get(\"/:id\")\n  @ApiOperation({\n    operationId: \"findOneById\",\n    summary: \"Finds a repo by :id\",\n  })\n  @ApiOkResponse({ type: DbRepo })\n  @ApiNotFoundResponse({ description: \"Repository not found\" })\n  @ApiParam({ name: \"id\", type: \"integer\" })\n  async findOneById(@Param(\"id\", ParseIntPipe) id: number): Promise {\n    return this.repoService.findOneById(id);\n  }\n\n  @Get(\"/:owner/:repo\")\n  @ApiOperation({\n    operationId: \"findOneByOwnerAndRepo\",\n    summary: \"Finds a repo by :owner and :repo\",\n  })\n  @ApiOkResponse({ type: DbRepo })\n  @ApiNotFoundResponse({ description: \"Repository not found\" })\n  async findOneByOwnerAndRepo(@Param(\"owner\") owner: string, @Param(\"repo\") repo: string): Promise {\n    return this.repoService.findOneByOwnerAndRepo(owner, repo);\n  }\n\n  @Get(\"/list\")\n  @ApiOperation({\n    operationId: \"findAll\",\n    summary: \"Finds all repos and paginates them\",\n  })\n  @ApiPaginatedResponse(DbRepo)\n  @ApiOkResponse({ type: DbRepo })\n  async findAll(@Query() pageOptionsDto: RepoPageOptionsDto): Promise> {\n    return this.repoService.findAll(pageOptionsDto);\n  }\n\n  @Get(\"/search\")\n  @ApiOperation({\n    operationId: \"findAllReposWithFilters\",\n    summary: \"Finds all repos using filters and paginates them\",\n  })\n  @ApiPaginatedResponse(DbRepo)\n  @ApiOkResponse({ type: DbRepo })\n  async findAllReposWithFilters(@Query() pageOptionsDto: RepoSearchOptionsDto): Promise> {\n    return this.repoService.findAllWithFilters(pageOptionsDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/RepoFilterModule.html":{"url":"modules/RepoFilterModule.html","title":"module - RepoFilterModule","body":"\n                   \n\n\n\n\n    Modules\n    RepoFilterModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_RepoFilterModule\n\n\n\ncluster_RepoFilterModule_exports\n\n\n\ncluster_RepoFilterModule_providers\n\n\n\n\nRepoFilterService \n\nRepoFilterService \n\n\n\nRepoFilterModule\n\nRepoFilterModule\n\nRepoFilterService  -->\n\nRepoFilterModule->RepoFilterService \n\n\n\n\n\nRepoFilterService\n\nRepoFilterService\n\nRepoFilterModule -->\n\nRepoFilterService->RepoFilterModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/common/filters/repo-filter.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            RepoFilterService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            RepoFilterService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\n\nimport { RepoFilterService } from \"./repo-filter.service\";\n\n@Module({\n  providers: [RepoFilterService],\n  exports: [RepoFilterService],\n})\nexport class RepoFilterModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RepoFilterService.html":{"url":"injectables/RepoFilterService.html","title":"injectable - RepoFilterService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RepoFilterService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/filters/repo-filter.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                applyQueryBuilderFilters\n                            \n                            \n                                getRepoFilters\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        applyQueryBuilderFilters\n                        \n                    \n                \n            \n            \n                \napplyQueryBuilderFilters(qb: SelectQueryBuilder, filters: [])\n                \n            \n\n\n            \n                \n                    Defined in src/common/filters/repo-filter.service.ts:86\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n                    applies the filters using the provided QueryBuilder\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    qb\n                                    \n                                            SelectQueryBuilder\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    filters\n                                    \n                                            []\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        []\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getRepoFilters\n                        \n                    \n                \n            \n            \n                \ngetRepoFilters(options: FilterOptionsDto, startDate: string, range: number)\n                \n            \n\n\n            \n                \n                    Defined in src/common/filters/repo-filter.service.ts:15\n                \n            \n\n\n            \n                \n                    applies repo-based filters based on the filter/InsightFilterFieldsEnum query param\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                FilterOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    startDate\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        \"NOW()\"\n                                    \n\n                                \n                                \n                                    range\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        0\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     []\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { ObjectLiteral, SelectQueryBuilder } from \"typeorm\";\n\nimport { InsightFilterFieldsEnum } from \"../../insight/dtos/insight-options.dto\";\nimport { FilterOptionsDto } from \"../dtos/filter-options.dto\";\n\n@Injectable()\nexport class RepoFilterService {\n  /**\n   * applies repo-based filters based on the filter/InsightFilterFieldsEnum query param\n   * @param options\n   * @param range\n   */\n\n  getRepoFilters(options: FilterOptionsDto, startDate = \"NOW()\", range = 0): [string, object][] {\n    const filters: [string, object][] = [];\n\n    if (options.repoIds) {\n      filters.push([`repos.id IN (:...repoIds)`, { repoIds: options.repoIds.split(\",\") }]);\n    }\n\n    if (options.repo) {\n      filters.push([`LOWER(repos.full_name)=:repo`, { repo: decodeURIComponent(options.repo.toLowerCase()) }]);\n    }\n\n    if (options.topic) {\n      filters.push([`:topic = ANY(\"repos\".\"topics\")`, { topic: options.topic }]);\n    }\n\n    if (options.filter === InsightFilterFieldsEnum.Recent) {\n      filters.push([\"repos.stars >= 1000\", {}]);\n    } else if (options.filter === InsightFilterFieldsEnum.Top100) {\n      filters.push([\n        `\n        repos.id IN (\n          SELECT \"top_repos\".id\n          FROM \"repos\" \"top_repos\"\n          WHERE\n            top_repos.stars > 1000\n          ORDER BY top_repos.stars DESC\n          LIMIT 1000\n        )\n      `,\n        {},\n      ]);\n    } else if (options.filter === InsightFilterFieldsEnum.MostSpammed) {\n      filters.push([\n        `\n        repos.id IN (\n          SELECT spam_pull_requests.repo_id\n          FROM \"pull_requests\" \"spam_pull_requests\"\n          WHERE\n            'spam' = ANY(\"spam_pull_requests\".\"label_names\")\n            AND '${startDate}'::TIMESTAMP >= \"spam_pull_requests\".\"updated_at\"\n            AND '${startDate}'::TIMESTAMP - INTERVAL '${range} days' = 5\n     *   )`, {}]);\n     * }\n     */\n\n    return filters;\n  }\n\n  /**\n   * applies the filters using the provided QueryBuilder\n   * @param qb\n   * @param filters\n   */\n\n  applyQueryBuilderFilters(qb: SelectQueryBuilder, filters: [string, object][] = []) {\n    filters.forEach(([sql, data], index) => {\n      if (index === 0) {\n        qb.where(sql, data);\n      } else {\n        qb.andWhere(sql, data);\n      }\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RepoInfo.html":{"url":"classes/RepoInfo.html","title":"class - RepoInfo","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RepoInfo\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/repo/dtos/repo-info.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                fullName\n                            \n                            \n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        fullName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Repo Full Name', type: String, example: 'open-sauced/insights'})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/dtos/repo-info.dto.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Repo ID', type: 'integer', example: 234343})@IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/dtos/repo-info.dto.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsNumber, IsString } from \"class-validator\";\n\nexport class RepoInfo {\n  @ApiProperty({\n    description: \"Repo ID\",\n    type: \"integer\",\n    example: 234343,\n  })\n  @IsNumber()\n  id: number;\n\n  @ApiProperty({\n    description: \"Repo Full Name\",\n    type: String,\n    example: \"open-sauced/insights\",\n  })\n  @IsString()\n  fullName: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/RepoModule.html":{"url":"modules/RepoModule.html","title":"module - RepoModule","body":"\n                   \n\n\n\n\n    Modules\n    RepoModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_RepoModule\n\n\n\ncluster_RepoModule_imports\n\n\n\ncluster_RepoModule_exports\n\n\n\ncluster_RepoModule_providers\n\n\n\n\nRepoFilterModule\n\nRepoFilterModule\n\n\n\nRepoModule\n\nRepoModule\n\nRepoModule -->\n\nRepoFilterModule->RepoModule\n\n\n\n\n\nRepoService \n\nRepoService \n\nRepoService  -->\n\nRepoModule->RepoService \n\n\n\n\n\nRepoService\n\nRepoService\n\nRepoModule -->\n\nRepoService->RepoModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/repo/repo.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            RepoService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            RepoController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            RepoFilterModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            RepoService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\n\nimport { RepoFilterModule } from \"../common/filters/repo-filter.module\";\nimport { DbRepo } from \"./entities/repo.entity\";\nimport { RepoService } from \"./repo.service\";\nimport { RepoController } from \"./repo.controller\";\n\n@Module({\n  imports: [TypeOrmModule.forFeature([DbRepo], \"ApiConnection\"), RepoFilterModule],\n  controllers: [RepoController],\n  providers: [RepoService],\n  exports: [RepoService],\n})\nexport class RepoModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RepoPageOptionsDto.html":{"url":"classes/RepoPageOptionsDto.html","title":"class - RepoPageOptionsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RepoPageOptionsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/repo/dtos/repo-page-options.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PageOptionsDto\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                    Optional\n                                orderBy\n                            \n                            \n                                    Readonly\n                                    Optional\n                                limit\n                            \n                            \n                                    Readonly\n                                    Optional\n                                orderDirection\n                            \n                            \n                                    Readonly\n                                    Optional\n                                page\n                            \n                            \n                                    Readonly\n                                    Optional\n                                prev_days_start_date\n                            \n                            \n                                    Readonly\n                                    Optional\n                                range\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        orderBy\n                        \n                    \n                \n            \n                \n                    \n                        Type :         RepoOrderFieldsEnum\n\n                    \n                \n                \n                    \n                        Default value : RepoOrderFieldsEnum.stars\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: RepoOrderFieldsEnum, enumName: 'RepoOrderFieldsEnum', default: undefined})@IsEnum(RepoOrderFieldsEnum)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/dtos/repo-page-options.dto.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 50\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, maximum: 1000, default: 10, type: 'integer'})@Type(undefined)@IsInt()@Min(1)@Max(10000)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:30\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        orderDirection\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OrderDirectionEnum\n\n                    \n                \n                \n                    \n                        Default value : OrderDirectionEnum.DESC\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: OrderDirectionEnum, enumName: 'OrderDirectionEnum', default: undefined})@IsEnum(OrderDirectionEnum)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:35\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, default: 1, type: 'integer'})@Type(undefined)@IsInt()@Min(1)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:17\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        prev_days_start_date\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 0\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Number of days in the past to start range block', default: 0, type: 'integer'})@Type(undefined)@IsIn(['0', '7', '30', '90'])@IsInt()@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:57\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        range\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 30\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Range in days', default: 30, type: 'integer'})@Type(undefined)@IsIn(['7', '30', '90'])@IsInt()@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:46\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiPropertyOptional } from \"@nestjs/swagger\";\nimport { IsEnum, IsOptional } from \"class-validator\";\n\nimport { PageOptionsDto } from \"../../common/dtos/page-options.dto\";\n\nexport enum RepoFilterFieldsEnum {\n  Recent = \"recent\",\n  Top100 = \"top-100-repos\",\n  MinimumContributors = \"minimum-5-contributors\",\n  MostActive = \"most-active\",\n  MostSpammed = \"most-spammed\",\n}\n\nexport enum RepoOrderFieldsEnum {\n  issues = \"issues\",\n  stars = \"stars\",\n  watchers = \"watchers\",\n  subscribers = \"subscribers\",\n  created_at = \"created_at\",\n  updated_at = \"updated_at\",\n  name = \"name\",\n  contributionsCount = \"contributionsCount\",\n  votesCount = \"votesCount\",\n  submissionsCount = \"submissionsCount\",\n  stargazersCount = \"stargazersCount\",\n  starsCount = \"starsCount\",\n}\n\nexport class RepoPageOptionsDto extends PageOptionsDto {\n  @ApiPropertyOptional({\n    enum: RepoOrderFieldsEnum,\n    enumName: \"RepoOrderFieldsEnum\",\n    default: RepoOrderFieldsEnum.stars,\n  })\n  @IsEnum(RepoOrderFieldsEnum)\n  @IsOptional()\n  readonly orderBy?: RepoOrderFieldsEnum = RepoOrderFieldsEnum.stars;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RepoSearchOptionsDto.html":{"url":"classes/RepoSearchOptionsDto.html","title":"class - RepoSearchOptionsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RepoSearchOptionsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/repo/dtos/repo-search-options.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        RepoPageOptionsDto\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                    Optional\n                                filter\n                            \n                            \n                                    Readonly\n                                    Optional\n                                repo\n                            \n                            \n                                    Readonly\n                                    Optional\n                                repoIds\n                            \n                            \n                                    Readonly\n                                    Optional\n                                topic\n                            \n                            \n                                    Readonly\n                                    Optional\n                                orderBy\n                            \n                            \n                                    Readonly\n                                    Optional\n                                limit\n                            \n                            \n                                    Readonly\n                                    Optional\n                                orderDirection\n                            \n                            \n                                    Readonly\n                                    Optional\n                                page\n                            \n                            \n                                    Readonly\n                                    Optional\n                                prev_days_start_date\n                            \n                            \n                                    Readonly\n                                    Optional\n                                range\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        filter\n                        \n                    \n                \n            \n                \n                    \n                        Type :         InsightFilterFieldsEnum\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: InsightFilterFieldsEnum, enumName: 'InsightFilterFieldsEnum'})@IsEnum(InsightFilterFieldsEnum)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/dtos/repo-search-options.dto.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        repo\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional()@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/dtos/repo-search-options.dto.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        repoIds\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional()@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/dtos/repo-search-options.dto.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        topic\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: 'string', default: ''})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/dtos/repo-search-options.dto.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        orderBy\n                        \n                    \n                \n            \n                \n                    \n                        Type :         RepoOrderFieldsEnum\n\n                    \n                \n                \n                    \n                        Default value : RepoOrderFieldsEnum.stars\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: RepoOrderFieldsEnum, enumName: 'RepoOrderFieldsEnum', default: undefined})@IsEnum(RepoOrderFieldsEnum)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         RepoPageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         RepoPageOptionsDto:37\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 50\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, maximum: 1000, default: 10, type: 'integer'})@Type(undefined)@IsInt()@Min(1)@Max(10000)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:30\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        orderDirection\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OrderDirectionEnum\n\n                    \n                \n                \n                    \n                        Default value : OrderDirectionEnum.DESC\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: OrderDirectionEnum, enumName: 'OrderDirectionEnum', default: undefined})@IsEnum(OrderDirectionEnum)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:35\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, default: 1, type: 'integer'})@Type(undefined)@IsInt()@Min(1)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:17\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        prev_days_start_date\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 0\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Number of days in the past to start range block', default: 0, type: 'integer'})@Type(undefined)@IsIn(['0', '7', '30', '90'])@IsInt()@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:57\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        range\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 30\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Range in days', default: 30, type: 'integer'})@Type(undefined)@IsIn(['7', '30', '90'])@IsInt()@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:46\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiPropertyOptional } from \"@nestjs/swagger\";\nimport { IsEnum, IsOptional, IsString } from \"class-validator\";\nimport { InsightFilterFieldsEnum } from \"../../insight/dtos/insight-options.dto\";\n\nimport { RepoPageOptionsDto } from \"./repo-page-options.dto\";\n\nexport class RepoSearchOptionsDto extends RepoPageOptionsDto {\n  @ApiPropertyOptional({\n    enum: InsightFilterFieldsEnum,\n    enumName: \"InsightFilterFieldsEnum\",\n  })\n  @IsEnum(InsightFilterFieldsEnum)\n  @IsOptional()\n  readonly filter?: InsightFilterFieldsEnum;\n\n  @ApiPropertyOptional()\n  @IsString()\n  @IsOptional()\n  readonly repo?: string;\n\n  @ApiPropertyOptional({\n    type: \"string\",\n    default: \"\",\n  })\n  @IsString()\n  @IsOptional()\n  readonly topic?: string;\n\n  @ApiPropertyOptional()\n  @IsString()\n  @IsOptional()\n  readonly repoIds?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RepoService.html":{"url":"injectables/RepoService.html","title":"injectable - RepoService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RepoService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/repo/repo.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                baseFilterQueryBuilder\n                            \n                            \n                                baseQueryBuilder\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findAllWithFilters\n                            \n                            \n                                    Async\n                                findOneById\n                            \n                            \n                                    Async\n                                findOneByOwnerAndRepo\n                            \n                            \n                                    Async\n                                findOrgsRecommendations\n                            \n                            \n                                    Async\n                                findRecommendations\n                            \n                            \n                                    Private\n                                hacktoberfestfilterquerybuilder\n                            \n                            \n                                subQueryCount\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(repoRepository: Repository, filterService: RepoFilterService, configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/repo/repo.service.ts:18\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        repoRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        filterService\n                                                  \n                                                        \n                                                                        RepoFilterService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        baseFilterQueryBuilder\n                        \n                    \n                \n            \n            \n                \n                    \n                    baseFilterQueryBuilder(startDate: string, range: number)\n                \n            \n\n\n            \n                \n                    Defined in src/repo/repo.service.ts:66\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    startDate\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        \"NOW()\"\n                                    \n\n                                \n                                \n                                    range\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        30\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        baseQueryBuilder\n                        \n                    \n                \n            \n            \n                \nbaseQueryBuilder()\n                \n            \n\n\n            \n                \n                    Defined in src/repo/repo.service.ts:41\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll(pageOptionsDto: RepoPageOptionsDto, userId?: number, userRelations?: string[])\n                \n            \n\n\n            \n                \n                    Defined in src/repo/repo.service.ts:313\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                RepoPageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    userRelations\n                                    \n                                            string[]\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllWithFilters\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllWithFilters(pageOptionsDto: RepoSearchOptionsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/repo/repo.service.ts:347\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                RepoSearchOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneById(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/repo/repo.service.ts:285\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneByOwnerAndRepo\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneByOwnerAndRepo(owner: string, repo: string)\n                \n            \n\n\n            \n                \n                    Defined in src/repo/repo.service.ts:299\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    owner\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    repo\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOrgsRecommendations\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOrgsRecommendations(userId: number, pageOptionsDto: PageOptionsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/repo/repo.service.ts:448\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findRecommendations\n                        \n                    \n                \n            \n            \n                \n                    \n                    findRecommendations(interests: string[])\n                \n            \n\n\n            \n                \n                    Defined in src/repo/repo.service.ts:418\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    interests\n                                    \n                                            string[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        hacktoberfestfilterquerybuilder\n                        \n                    \n                \n            \n            \n                \n                    \n                    hacktoberfestfilterquerybuilder(range: number)\n                \n            \n\n\n            \n                \n                    Defined in src/repo/repo.service.ts:157\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    range\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        30\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        subQueryCount\n                        \n                    \n                \n            \n            \n                \nsubQueryCount(subQuery: SelectQueryBuilder, entity: string, alias: string, target: string)\n                \n            \n\n\n            \n                \n                    Defined in src/repo/repo.service.ts:26\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    subQuery\n                                    \n                                            SelectQueryBuilder\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    entity\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    alias\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    target\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        \"repo\"\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from \"@nestjs/common\";\nimport { ObjectLiteral, Repository, SelectQueryBuilder } from \"typeorm\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\n\nimport { ConfigService } from \"@nestjs/config\";\nimport { PageMetaDto } from \"../common/dtos/page-meta.dto\";\nimport { PageDto } from \"../common/dtos/page.dto\";\nimport { OrderDirectionEnum } from \"../common/constants/order-direction.constant\";\nimport { InsightFilterFieldsEnum } from \"../insight/dtos/insight-options.dto\";\nimport { RepoFilterService } from \"../common/filters/repo-filter.service\";\nimport { PageOptionsDto } from \"../common/dtos/page-options.dto\";\nimport { GetPrevDateISOString } from \"../common/util/datetimes\";\nimport { RepoOrderFieldsEnum, RepoPageOptionsDto } from \"./dtos/repo-page-options.dto\";\nimport { DbRepo } from \"./entities/repo.entity\";\nimport { RepoSearchOptionsDto } from \"./dtos/repo-search-options.dto\";\n\n@Injectable()\nexport class RepoService {\n  constructor(\n    @InjectRepository(DbRepo, \"ApiConnection\")\n    private repoRepository: Repository,\n    private filterService: RepoFilterService,\n    private configService: ConfigService\n  ) {}\n\n  subQueryCount(\n    subQuery: SelectQueryBuilder,\n    entity: string,\n    alias: string,\n    target = \"repo\"\n  ) {\n    const aliasName = `${alias}Count`;\n    const aliasTable = `${alias}CountSelect`;\n\n    return subQuery\n      .select(\"COUNT(DISTINCT id)\", aliasName)\n      .from(entity, aliasTable)\n      .where(`${aliasTable}.${target}_id = ${target}.id`);\n  }\n\n  baseQueryBuilder() {\n    const builder = this.repoRepository\n      .createQueryBuilder(\"repo\")\n\n      /*\n       * .select(['repo.id'])\n       * .leftJoinAndSelect(\"repo.user\", \"user\")\n       * .leftJoinAndSelect(DbRepoToUserStars, \"stars\")\n       * .leftJoinAndMapMany(\"repo.contributions\", DbContribution, \"contributions\", \"contributions.repo_id = repo.id\")\n       */\n\n      .addSelect((qb) => this.subQueryCount(qb, \"DbContribution\", \"contributions\"), \"contributionsCount\")\n      .addSelect((qb) => this.subQueryCount(qb, \"DbRepoToUserVotes\", \"votes\"), \"votesCount\")\n      .addSelect((qb) => this.subQueryCount(qb, \"DbRepoToUserSubmissions\", \"submissions\"), \"submissionsCount\")\n      .addSelect((qb) => this.subQueryCount(qb, \"DbRepoToUserStargazers\", \"stargazers\"), \"stargazersCount\")\n      .addSelect((qb) => this.subQueryCount(qb, \"DbRepoToUserStars\", \"stars\"), \"starsCount\")\n      .loadRelationCountAndMap(\"repo.contributionsCount\", \"repo.contributions\")\n      .loadRelationCountAndMap(\"repo.votesCount\", \"repo.repoToUserVotes\")\n      .loadRelationCountAndMap(\"repo.submissionsCount\", \"repo.repoToUserSubmissions\")\n      .loadRelationCountAndMap(\"repo.stargazersCount\", \"repo.repoToUserStargazers\")\n      .loadRelationCountAndMap(\"repo.starsCount\", \"repo.repoToUserStars\");\n\n    return builder;\n  }\n\n  private baseFilterQueryBuilder(startDate = \"NOW()\", range = 30) {\n    return this.repoRepository\n      .createQueryBuilder(\"repos\")\n      .addSelect(\n        `(\n          SELECT COALESCE(COUNT(\"open_pull_requests\".\"id\"), 0)\n          FROM \"pull_requests\" \"open_pull_requests\"\n          WHERE\n            LOWER(\"open_pull_requests\".\"state\") = 'open'\n            AND \"open_pull_requests\".\"repo_id\" = \"repos\".\"id\"\n            AND '${startDate}'::TIMESTAMP >= \"open_pull_requests\".\"updated_at\"\n            AND '${startDate}'::TIMESTAMP - INTERVAL '${range} days' = \"closed_pull_requests\".\"updated_at\"\n            AND '${startDate}'::TIMESTAMP - INTERVAL '${range} days' = \"merged_pull_requests\".\"updated_at\"\n            AND '${startDate}'::TIMESTAMP - INTERVAL '${range} days' = \"draft_pull_requests\".\"updated_at\"\n            AND '${startDate}'::TIMESTAMP - INTERVAL '${range} days' = \"spam_pull_requests\".\"updated_at\"\n            AND '${startDate}'::TIMESTAMP - INTERVAL '${range} days'  \"pull_requests_velocity\".\"created_at\"\n            AND '${startDate}'::TIMESTAMP >= \"pull_requests_velocity\".\"updated_at\"\n            AND '${startDate}'::TIMESTAMP - INTERVAL '${range} days' = \"active_pull_requests\".\"updated_at\"\n            AND '${startDate}'::TIMESTAMP - INTERVAL '${range} days' = \"open_pull_requests\".\"updated_at\"\n            AND to_date('${hacktoberfestYear}', 'YYYY')\n                + INTERVAL '10 months'\n                - INTERVAL '1 day'\n                - INTERVAL '${range} days' = \"closed_pull_requests\".\"updated_at\"\n            AND to_date('${hacktoberfestYear}', 'YYYY')\n                + INTERVAL '10 months'\n                - INTERVAL '1 day'\n                - INTERVAL '${range} days' = \"merged_pull_requests\".\"updated_at\"\n            AND to_date('${hacktoberfestYear}', 'YYYY')\n                + INTERVAL '10 months'\n                - INTERVAL '1 day'\n                - INTERVAL '${range} days' = \"draft_pull_requests\".\"updated_at\"\n            AND to_date('${hacktoberfestYear}', 'YYYY')\n                + INTERVAL '10 months'\n                - INTERVAL '1 day'\n                - INTERVAL '${range} days' = \"spam_pull_requests\".\"updated_at\"\n            AND to_date('${hacktoberfestYear}', 'YYYY')\n                + INTERVAL '10 months'\n                - INTERVAL '1 day'\n                - INTERVAL '${range} days'  \"pull_requests_velocity\".\"created_at\"\n            AND to_date('${hacktoberfestYear}', 'YYYY')\n                + INTERVAL '10 months'\n                - INTERVAL '1 day' >= \"pull_requests_velocity\".\"updated_at\"\n            AND to_date('${hacktoberfestYear}', 'YYYY')\n                + INTERVAL '10 months'\n                - INTERVAL '1 day'\n                - INTERVAL '${range} days' = \"active_pull_requests\".\"updated_at\"\n            AND to_date('${hacktoberfestYear}', 'YYYY')\n                + INTERVAL '10 months'\n                - INTERVAL '1 day'\n                - INTERVAL '${range} days'  {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder.where(\"repo.id = :id\", { id });\n\n    const item = await queryBuilder.getOne();\n\n    if (!item) {\n      throw new NotFoundException();\n    }\n\n    return item;\n  }\n\n  async findOneByOwnerAndRepo(owner: string, repo: string): Promise {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder.where(\"repo.full_name = :name\", { name: `${owner}/${repo}` });\n\n    const item = await queryBuilder.getOne();\n\n    if (!item) {\n      throw new NotFoundException();\n    }\n\n    return item;\n  }\n\n  async findAll(\n    pageOptionsDto: RepoPageOptionsDto,\n    userId?: number,\n    userRelations?: string[]\n  ): Promise> {\n    const queryBuilder = this.baseQueryBuilder();\n    const orderField = pageOptionsDto.orderBy ?? RepoOrderFieldsEnum.stars;\n\n    if (userId) {\n      userRelations?.map((relation) =>\n        queryBuilder.innerJoin(\n          `repo.repoToUser${relation}`,\n          `authUser${relation}`,\n          `authUser${relation}.user_id = :userId`,\n          { userId }\n        )\n      );\n    }\n\n    queryBuilder\n      .orderBy(`\"repo\".\"is_fork\"`, OrderDirectionEnum.ASC)\n      .addOrderBy(`\"${orderField}\"`, pageOptionsDto.orderDirection)\n      .addOrderBy(`\"repo\".\"created_at\"`, OrderDirectionEnum.DESC)\n      .offset(pageOptionsDto.skip)\n      .limit(pageOptionsDto.limit);\n\n    const itemCount = await queryBuilder.getCount();\n    const entities = await queryBuilder.getMany();\n\n    const pageMetaDto = new PageMetaDto({ itemCount, pageOptionsDto });\n\n    return new PageDto(entities, pageMetaDto);\n  }\n\n  async findAllWithFilters(pageOptionsDto: RepoSearchOptionsDto): Promise> {\n    const orderField = pageOptionsDto.orderBy ?? \"stars\";\n    const startDate = GetPrevDateISOString(pageOptionsDto.prev_days_start_date);\n    const range = pageOptionsDto.range!;\n\n    let queryBuilder;\n\n    switch (pageOptionsDto.topic) {\n      case \"hacktoberfest\":\n        queryBuilder = this.hacktoberfestfilterquerybuilder(range);\n        break;\n      default:\n        queryBuilder = this.baseFilterQueryBuilder(startDate, range);\n        break;\n    }\n\n    const filters = this.filterService.getRepoFilters(pageOptionsDto, startDate, range);\n\n    if (!pageOptionsDto.repoIds && !pageOptionsDto.repo) {\n      filters.push([`'${startDate}'::TIMESTAMP >= \"repos\".\"updated_at\"`, { range }]);\n      filters.push([`'${startDate}'::TIMESTAMP - INTERVAL '${range} days' = \"repos\".\"updated_at\"`, { range }]);\n      countFilters.push([`'${startDate}'::TIMESTAMP - INTERVAL '${range} days' ();\n    const itemCount = parseInt(`${countQueryResult?.count ?? \"0\"}`, 10);\n\n    queryBuilder\n      .addOrderBy(`\"repos\".\"${orderField}\"`, OrderDirectionEnum.DESC)\n      .offset(pageOptionsDto.skip)\n      .limit(pageOptionsDto.limit);\n\n    const entities = await queryBuilder.getMany();\n    const pageMetaDto = new PageMetaDto({ itemCount, pageOptionsDto });\n\n    return new PageDto(entities, pageMetaDto);\n  }\n\n  async findRecommendations(interests: string[]): Promise> {\n    const queryBuilder = this.repoRepository.createQueryBuilder(\"repo\");\n    const userInterests: Record = {};\n\n    const promises = interests.map(async (interest) => {\n      queryBuilder\n        .where(`(:topic = ANY(\"repo\".\"topics\"))`, { topic: interest })\n        .andWhere(\n          `\n          repo.id IN (\n            SELECT repo_id FROM pull_requests\n            WHERE now() - INTERVAL '30 days'  {\n      userInterests[interest] = results[index];\n    });\n\n    return userInterests;\n  }\n\n  async findOrgsRecommendations(userId: number, pageOptionsDto: PageOptionsDto) {\n    const queryBuilder = this.baseFilterQueryBuilder();\n    const startDate = GetPrevDateISOString(pageOptionsDto.prev_days_start_date);\n    const range = pageOptionsDto.range!;\n\n    queryBuilder\n      .leftJoin(\n        (qb: SelectQueryBuilder) =>\n          qb\n            .select(\"users.id\", \"id\")\n            .addSelect(\"users.login\", \"login\")\n            .addSelect(\"user_orgs.user_id\", \"user_id\")\n            .from(\"user_organizations\", \"user_orgs\")\n            .innerJoin(\"users\", \"users\", \"user_orgs.organization_id = users.id\"),\n        \"user_orgs\",\n        \"repos.full_name LIKE user_orgs.login || '/%'\"\n      )\n      .where(\"user_orgs.user_id = :userId\", { userId })\n      .andWhere(`'${startDate}'::TIMESTAMP >= \"repos\".\"updated_at\"`)\n      .andWhere(`'${startDate}'::TIMESTAMP - INTERVAL '${range} days' \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/RepoStarController.html":{"url":"controllers/RepoStarController.html","title":"controller - RepoStarController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  RepoStarController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/star/repo-star.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                repos\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                downStarOneById\n                            \n                            \n                                    Async\n                                downStarOneByOwnerAndRepo\n                            \n                            \n                                    Async\n                                findAllUserStarred\n                            \n                            \n                                    Async\n                                starOneById\n                            \n                            \n                                    Async\n                                starOneByOwnerAndRepo\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        downStarOneById\n                        \n                    \n                \n            \n            \n                \n                    \n                    downStarOneById(id: number, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/:id/star')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'downStarOneById', summary: 'Finds a repo by :id and removes existing star'})@ApiOkResponse({description: 'Returns the repo star', type: DbRepoToUserStars})@ApiNotFoundResponse({description: 'Repo or star not found'})@ApiConflictResponse({description: 'You have already removed your star'})@ApiParam({name: 'id', type: 'integer'})\n                \n            \n\n            \n                \n                    Defined in src/star/repo-star.controller.ts:100\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        downStarOneByOwnerAndRepo\n                        \n                    \n                \n            \n            \n                \n                    \n                    downStarOneByOwnerAndRepo(owner: string, repo: string, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/:owner/:repo/star')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'downStarOneByOwnerAndRepo', summary: 'Finds a repo by :owner and :repo and removes existing star'})@ApiOkResponse({description: 'Returns the repo star', type: DbRepoToUserStars})@ApiNotFoundResponse({description: 'Repo or star not found'})@ApiConflictResponse({description: 'You have already removed your star'})\n                \n            \n\n            \n                \n                    Defined in src/star/repo-star.controller.ts:119\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    owner\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    repo\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllUserStarred\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllUserStarred(pageOptionsDto: RepoPageOptionsDto, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/listUserStarred')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'findAllUserStarred', summary: 'Finds all repos starred by authenticated user and paginates them'})@ApiPaginatedResponse(DbRepo)@ApiOkResponse({type: DbRepo})\n                \n            \n\n            \n                \n                    Defined in src/star/repo-star.controller.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                RepoPageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        starOneById\n                        \n                    \n                \n            \n            \n                \n                    \n                    starOneById(id: number, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('/:id/star')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'starOneById', summary: 'Finds a repo by :id and adds a star'})@ApiOkResponse({description: 'Returns the repo star', type: DbRepoToUserStars})@ApiNotFoundResponse({description: 'Repo or star not found'})@ApiConflictResponse({description: 'You have already starred this repo'})@ApiParam({name: 'id', type: 'integer'})\n                \n            \n\n            \n                \n                    Defined in src/star/repo-star.controller.ts:57\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        starOneByOwnerAndRepo\n                        \n                    \n                \n            \n            \n                \n                    \n                    starOneByOwnerAndRepo(owner: string, repo: string, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('/:owner/:repo/star')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'starOneByOwnerAndRepo', summary: 'Finds a repo by :owner and :repo and adds a star'})@ApiOkResponse({description: 'Returns the repo star', type: DbRepoToUserStars})@ApiNotFoundResponse({description: 'Repo or star not found'})@ApiConflictResponse({description: 'You have already starred this repo'})\n                \n            \n\n            \n                \n                    Defined in src/star/repo-star.controller.ts:76\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    owner\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    repo\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Delete, Get, Param, ParseIntPipe, Put, Query, UseGuards } from \"@nestjs/common\";\nimport {\n  ApiBearerAuth,\n  ApiConflictResponse,\n  ApiNotFoundResponse,\n  ApiOkResponse,\n  ApiOperation,\n  ApiParam,\n  ApiTags,\n} from \"@nestjs/swagger\";\n\nimport { RepoService } from \"../repo/repo.service\";\nimport { SupabaseGuard } from \"../auth/supabase.guard\";\nimport { UserId } from \"../auth/supabase.user.decorator\";\nimport { DbRepoToUserStars } from \"../repo/entities/repo.to.user.stars.entity\";\nimport { ApiPaginatedResponse } from \"../common/decorators/api-paginated-response.decorator\";\nimport { DbRepo } from \"../repo/entities/repo.entity\";\nimport { RepoPageOptionsDto } from \"../repo/dtos/repo-page-options.dto\";\nimport { PageDto } from \"../common/dtos/page.dto\";\nimport { StarService } from \"./star.service\";\n\n@Controller(\"repos\")\n@ApiTags(\"Repository service guarded\", \"Star service\")\nexport class RepoStarController {\n  constructor(private readonly repoService: RepoService, private readonly starService: StarService) {}\n\n  @Get(\"/listUserStarred\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"findAllUserStarred\",\n    summary: \"Finds all repos starred by authenticated user and paginates them\",\n  })\n  @ApiPaginatedResponse(DbRepo)\n  @ApiOkResponse({ type: DbRepo })\n  async findAllUserStarred(\n    @Query() pageOptionsDto: RepoPageOptionsDto,\n    @UserId() userId: number\n  ): Promise> {\n    return this.repoService.findAll(pageOptionsDto, userId, [\"Stars\"]);\n  }\n\n  @Put(\"/:id/star\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"starOneById\",\n    summary: \"Finds a repo by :id and adds a star\",\n  })\n  @ApiOkResponse({\n    description: \"Returns the repo star\",\n    type: DbRepoToUserStars,\n  })\n  @ApiNotFoundResponse({ description: \"Repo or star not found\" })\n  @ApiConflictResponse({ description: \"You have already starred this repo\" })\n  @ApiParam({ name: \"id\", type: \"integer\" })\n  async starOneById(@Param(\"id\", ParseIntPipe) id: number, @UserId() userId: number): Promise {\n    const item = await this.repoService.findOneById(id);\n\n    return this.starService.starByRepoId(item.id, userId);\n  }\n\n  @Put(\"/:owner/:repo/star\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"starOneByOwnerAndRepo\",\n    summary: \"Finds a repo by :owner and :repo and adds a star\",\n  })\n  @ApiOkResponse({\n    description: \"Returns the repo star\",\n    type: DbRepoToUserStars,\n  })\n  @ApiNotFoundResponse({ description: \"Repo or star not found\" })\n  @ApiConflictResponse({ description: \"You have already starred this repo\" })\n  async starOneByOwnerAndRepo(\n    @Param(\"owner\") owner: string,\n    @Param(\"repo\") repo: string,\n    @UserId() userId: number\n  ): Promise {\n    const item = await this.repoService.findOneByOwnerAndRepo(owner, repo);\n\n    return this.starService.starByRepoId(item.id, userId);\n  }\n\n  @Delete(\"/:id/star\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"downStarOneById\",\n    summary: \"Finds a repo by :id and removes existing star\",\n  })\n  @ApiOkResponse({\n    description: \"Returns the repo star\",\n    type: DbRepoToUserStars,\n  })\n  @ApiNotFoundResponse({ description: \"Repo or star not found\" })\n  @ApiConflictResponse({ description: \"You have already removed your star\" })\n  @ApiParam({ name: \"id\", type: \"integer\" })\n  async downStarOneById(@Param(\"id\", ParseIntPipe) id: number, @UserId() userId: number): Promise {\n    const item = await this.repoService.findOneById(id);\n\n    return this.starService.downStarByRepoId(item.id, userId);\n  }\n\n  @Delete(\"/:owner/:repo/star\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"downStarOneByOwnerAndRepo\",\n    summary: \"Finds a repo by :owner and :repo and removes existing star\",\n  })\n  @ApiOkResponse({\n    description: \"Returns the repo star\",\n    type: DbRepoToUserStars,\n  })\n  @ApiNotFoundResponse({ description: \"Repo or star not found\" })\n  @ApiConflictResponse({ description: \"You have already removed your star\" })\n  async downStarOneByOwnerAndRepo(\n    @Param(\"owner\") owner: string,\n    @Param(\"repo\") repo: string,\n    @UserId() userId: number\n  ): Promise {\n    const item = await this.repoService.findOneByOwnerAndRepo(owner, repo);\n\n    return this.starService.downStarByRepoId(item.id, userId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/RepoStargazeController.html":{"url":"controllers/RepoStargazeController.html","title":"controller - RepoStargazeController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  RepoStargazeController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/stargaze/repo-stargaze.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                repos\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                downStargazeOneById\n                            \n                            \n                                    Async\n                                downStargazeOneByOwnerAndRepo\n                            \n                            \n                                    Async\n                                findAllUserStargazed\n                            \n                            \n                                    Async\n                                stargazeOneById\n                            \n                            \n                                    Async\n                                stargazeOneByOwnerAndRepo\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        downStargazeOneById\n                        \n                    \n                \n            \n            \n                \n                    \n                    downStargazeOneById(id: number, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/:id/stargaze')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'downStargazeOneById', summary: 'Finds a repo by :id and unfollows'})@ApiOkResponse({description: 'Returns the repo follow', type: DbRepoToUserStargazers})@ApiNotFoundResponse({description: 'Repo or follow not found'})@ApiConflictResponse({description: 'You have already unfollowed this repo'})@ApiParam({name: 'id', type: 'integer'})\n                \n            \n\n            \n                \n                    Defined in src/stargaze/repo-stargaze.controller.ts:103\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        downStargazeOneByOwnerAndRepo\n                        \n                    \n                \n            \n            \n                \n                    \n                    downStargazeOneByOwnerAndRepo(owner: string, repo: string, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/:owner/:repo/stargaze')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'downStargazeOneByOwnerAndRepo', summary: 'Finds a repo by :owner and :repo and unfollows'})@ApiOkResponse({description: 'Returns the repo follow', type: DbRepoToUserStargazers})@ApiNotFoundResponse({description: 'Repo or stargaze not found'})@ApiConflictResponse({description: 'You have already unfollowed this repo'})\n                \n            \n\n            \n                \n                    Defined in src/stargaze/repo-stargaze.controller.ts:125\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    owner\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    repo\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllUserStargazed\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllUserStargazed(pageOptionsDto: RepoPageOptionsDto, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/listUserStargazed')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'findAllUserStargazed', summary: 'Finds all repos followed by authenticated user and paginates them'})@ApiPaginatedResponse(DbRepo)@ApiOkResponse({type: DbRepo})\n                \n            \n\n            \n                \n                    Defined in src/stargaze/repo-stargaze.controller.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                RepoPageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        stargazeOneById\n                        \n                    \n                \n            \n            \n                \n                    \n                    stargazeOneById(id: number, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('/:id/stargaze')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'stargazeOneById', summary: 'Finds a repo by :id and follows'})@ApiOkResponse({description: 'Returns the repo follow', type: DbRepoToUserStargazers})@ApiNotFoundResponse({description: 'Repo or follow not found'})@ApiConflictResponse({description: 'You have already followed this repo'})@ApiParam({name: 'id', type: 'integer'})\n                \n            \n\n            \n                \n                    Defined in src/stargaze/repo-stargaze.controller.ts:57\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        stargazeOneByOwnerAndRepo\n                        \n                    \n                \n            \n            \n                \n                    \n                    stargazeOneByOwnerAndRepo(owner: string, repo: string, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('/:owner/:repo/stargaze')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'stargazeOneByOwnerAndRepo', summary: 'Finds a repo by :owner and :repo and follows'})@ApiOkResponse({description: 'Returns the repo follow', type: DbRepoToUserStargazers})@ApiNotFoundResponse({description: 'Repo or follow not found'})@ApiConflictResponse({description: 'You have already followed this repo'})\n                \n            \n\n            \n                \n                    Defined in src/stargaze/repo-stargaze.controller.ts:79\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    owner\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    repo\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Delete, Get, Param, ParseIntPipe, Put, Query, UseGuards } from \"@nestjs/common\";\nimport {\n  ApiBearerAuth,\n  ApiConflictResponse,\n  ApiNotFoundResponse,\n  ApiOkResponse,\n  ApiOperation,\n  ApiParam,\n  ApiTags,\n} from \"@nestjs/swagger\";\n\nimport { RepoService } from \"../repo/repo.service\";\nimport { SupabaseGuard } from \"../auth/supabase.guard\";\nimport { UserId } from \"../auth/supabase.user.decorator\";\nimport { DbRepoToUserStargazers } from \"../repo/entities/repo.to.user.stargazers.entity\";\nimport { ApiPaginatedResponse } from \"../common/decorators/api-paginated-response.decorator\";\nimport { DbRepo } from \"../repo/entities/repo.entity\";\nimport { RepoPageOptionsDto } from \"../repo/dtos/repo-page-options.dto\";\nimport { PageDto } from \"../common/dtos/page.dto\";\nimport { StargazeService } from \"./stargaze.service\";\n\n@Controller(\"repos\")\n@ApiTags(\"Repository service guarded\", \"Stargaze service\")\nexport class RepoStargazeController {\n  constructor(private readonly repoService: RepoService, private readonly stargazeService: StargazeService) {}\n\n  @Get(\"/listUserStargazed\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"findAllUserStargazed\",\n    summary: \"Finds all repos followed by authenticated user and paginates them\",\n  })\n  @ApiPaginatedResponse(DbRepo)\n  @ApiOkResponse({ type: DbRepo })\n  async findAllUserStargazed(\n    @Query() pageOptionsDto: RepoPageOptionsDto,\n    @UserId() userId: number\n  ): Promise> {\n    return this.repoService.findAll(pageOptionsDto, userId, [\"Stargazers\"]);\n  }\n\n  @Put(\"/:id/stargaze\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"stargazeOneById\",\n    summary: \"Finds a repo by :id and follows\",\n  })\n  @ApiOkResponse({\n    description: \"Returns the repo follow\",\n    type: DbRepoToUserStargazers,\n  })\n  @ApiNotFoundResponse({ description: \"Repo or follow not found\" })\n  @ApiConflictResponse({ description: \"You have already followed this repo\" })\n  @ApiParam({ name: \"id\", type: \"integer\" })\n  async stargazeOneById(\n    @Param(\"id\", ParseIntPipe) id: number,\n    @UserId() userId: number\n  ): Promise {\n    const item = await this.repoService.findOneById(id);\n\n    return this.stargazeService.stargazeByRepoId(item.id, userId);\n  }\n\n  @Put(\"/:owner/:repo/stargaze\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"stargazeOneByOwnerAndRepo\",\n    summary: \"Finds a repo by :owner and :repo and follows\",\n  })\n  @ApiOkResponse({\n    description: \"Returns the repo follow\",\n    type: DbRepoToUserStargazers,\n  })\n  @ApiNotFoundResponse({ description: \"Repo or follow not found\" })\n  @ApiConflictResponse({ description: \"You have already followed this repo\" })\n  async stargazeOneByOwnerAndRepo(\n    @Param(\"owner\") owner: string,\n    @Param(\"repo\") repo: string,\n    @UserId() userId: number\n  ): Promise {\n    const item = await this.repoService.findOneByOwnerAndRepo(owner, repo);\n\n    return this.stargazeService.stargazeByRepoId(item.id, userId);\n  }\n\n  @Delete(\"/:id/stargaze\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"downStargazeOneById\",\n    summary: \"Finds a repo by :id and unfollows\",\n  })\n  @ApiOkResponse({\n    description: \"Returns the repo follow\",\n    type: DbRepoToUserStargazers,\n  })\n  @ApiNotFoundResponse({ description: \"Repo or follow not found\" })\n  @ApiConflictResponse({ description: \"You have already unfollowed this repo\" })\n  @ApiParam({ name: \"id\", type: \"integer\" })\n  async downStargazeOneById(\n    @Param(\"id\", ParseIntPipe) id: number,\n    @UserId() userId: number\n  ): Promise {\n    const item = await this.repoService.findOneById(id);\n\n    return this.stargazeService.downStargazeByRepoId(item.id, userId);\n  }\n\n  @Delete(\"/:owner/:repo/stargaze\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"downStargazeOneByOwnerAndRepo\",\n    summary: \"Finds a repo by :owner and :repo and unfollows\",\n  })\n  @ApiOkResponse({\n    description: \"Returns the repo follow\",\n    type: DbRepoToUserStargazers,\n  })\n  @ApiNotFoundResponse({ description: \"Repo or stargaze not found\" })\n  @ApiConflictResponse({ description: \"You have already unfollowed this repo\" })\n  async downStargazeOneByOwnerAndRepo(\n    @Param(\"owner\") owner: string,\n    @Param(\"repo\") repo: string,\n    @UserId() userId: number\n  ): Promise {\n    const item = await this.repoService.findOneByOwnerAndRepo(owner, repo);\n\n    return this.stargazeService.downStargazeByRepoId(item.id, userId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/RepoSubmitController.html":{"url":"controllers/RepoSubmitController.html","title":"controller - RepoSubmitController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  RepoSubmitController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/submit/repo-submit.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                repos\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                downSubmitOneById\n                            \n                            \n                                    Async\n                                downSubmitOneByOwnerAndRepo\n                            \n                            \n                                    Async\n                                findAllUserSubmitted\n                            \n                            \n                                    Async\n                                submitOneById\n                            \n                            \n                                    Async\n                                submitOneByOwnerAndRepo\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        downSubmitOneById\n                        \n                    \n                \n            \n            \n                \n                    \n                    downSubmitOneById(id: number, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/:id/submit')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'downSubmitOneById', summary: 'Finds a repo by :id and removes existing submission'})@ApiOkResponse({description: 'Returns the repo submission', type: DbRepoToUserSubmissions})@ApiNotFoundResponse({description: 'Repo or submission not found'})@ApiConflictResponse({description: 'You have already removed your submission'})@ApiParam({name: 'id', type: 'integer'})\n                \n            \n\n            \n                \n                    Defined in src/submit/repo-submit.controller.ts:103\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        downSubmitOneByOwnerAndRepo\n                        \n                    \n                \n            \n            \n                \n                    \n                    downSubmitOneByOwnerAndRepo(owner: string, repo: string, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/:owner/:repo/submit')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'downSubmitOneByOwnerAndRepo', summary: 'Finds a repo by :owner and :repo and removes existing submission'})@ApiOkResponse({description: 'Returns the repo submission', type: DbRepoToUserSubmissions})@ApiNotFoundResponse({description: 'Repo or submission not found'})@ApiConflictResponse({description: 'You have already removed your submission'})\n                \n            \n\n            \n                \n                    Defined in src/submit/repo-submit.controller.ts:125\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    owner\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    repo\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllUserSubmitted\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllUserSubmitted(pageOptionsDto: RepoPageOptionsDto, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/listUserSubmitted')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'findAllUserSubmitted', summary: 'Finds all repos submitted by authenticated user and paginates them'})@ApiPaginatedResponse(DbRepo)@ApiOkResponse({type: DbRepo})\n                \n            \n\n            \n                \n                    Defined in src/submit/repo-submit.controller.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                RepoPageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        submitOneById\n                        \n                    \n                \n            \n            \n                \n                    \n                    submitOneById(id: number, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('/:id/submit')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'submitOneById', summary: 'Finds a repo by :id and adds a submission'})@ApiOkResponse({description: 'Returns the repo submission', type: DbRepoToUserSubmissions})@ApiNotFoundResponse({description: 'Repo or submission not found'})@ApiConflictResponse({description: 'You have already submitted this repo'})@ApiParam({name: 'id', type: 'integer'})\n                \n            \n\n            \n                \n                    Defined in src/submit/repo-submit.controller.ts:57\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        submitOneByOwnerAndRepo\n                        \n                    \n                \n            \n            \n                \n                    \n                    submitOneByOwnerAndRepo(owner: string, repo: string, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('/:owner/:repo/submit')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'submitOneByOwnerAndRepo', summary: 'Finds a repo by :owner and :repo and adds a submission'})@ApiOkResponse({description: 'Returns the repo submission', type: DbRepoToUserSubmissions})@ApiNotFoundResponse({description: 'Repo or submission not found'})@ApiConflictResponse({description: 'You have already submitted this repo'})\n                \n            \n\n            \n                \n                    Defined in src/submit/repo-submit.controller.ts:79\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    owner\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    repo\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Delete, Get, Param, ParseIntPipe, Put, Query, UseGuards } from \"@nestjs/common\";\nimport {\n  ApiBearerAuth,\n  ApiConflictResponse,\n  ApiNotFoundResponse,\n  ApiOkResponse,\n  ApiOperation,\n  ApiParam,\n  ApiTags,\n} from \"@nestjs/swagger\";\n\nimport { RepoService } from \"../repo/repo.service\";\nimport { SupabaseGuard } from \"../auth/supabase.guard\";\nimport { UserId } from \"../auth/supabase.user.decorator\";\nimport { DbRepoToUserSubmissions } from \"../repo/entities/repo.to.user.submissions.entity\";\nimport { ApiPaginatedResponse } from \"../common/decorators/api-paginated-response.decorator\";\nimport { DbRepo } from \"../repo/entities/repo.entity\";\nimport { RepoPageOptionsDto } from \"../repo/dtos/repo-page-options.dto\";\nimport { PageDto } from \"../common/dtos/page.dto\";\nimport { SubmitService } from \"./submit.service\";\n\n@Controller(\"repos\")\n@ApiTags(\"Repository service guarded\", \"Submit service\")\nexport class RepoSubmitController {\n  constructor(private readonly repoService: RepoService, private readonly submitService: SubmitService) {}\n\n  @Get(\"/listUserSubmitted\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"findAllUserSubmitted\",\n    summary: \"Finds all repos submitted by authenticated user and paginates them\",\n  })\n  @ApiPaginatedResponse(DbRepo)\n  @ApiOkResponse({ type: DbRepo })\n  async findAllUserSubmitted(\n    @Query() pageOptionsDto: RepoPageOptionsDto,\n    @UserId() userId: number\n  ): Promise> {\n    return this.repoService.findAll(pageOptionsDto, userId, [\"Submissions\"]);\n  }\n\n  @Put(\"/:id/submit\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"submitOneById\",\n    summary: \"Finds a repo by :id and adds a submission\",\n  })\n  @ApiOkResponse({\n    description: \"Returns the repo submission\",\n    type: DbRepoToUserSubmissions,\n  })\n  @ApiNotFoundResponse({ description: \"Repo or submission not found\" })\n  @ApiConflictResponse({ description: \"You have already submitted this repo\" })\n  @ApiParam({ name: \"id\", type: \"integer\" })\n  async submitOneById(\n    @Param(\"id\", ParseIntPipe) id: number,\n    @UserId() userId: number\n  ): Promise {\n    const item = await this.repoService.findOneById(id);\n\n    return this.submitService.submitByRepoId(item.id, userId);\n  }\n\n  @Put(\"/:owner/:repo/submit\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"submitOneByOwnerAndRepo\",\n    summary: \"Finds a repo by :owner and :repo and adds a submission\",\n  })\n  @ApiOkResponse({\n    description: \"Returns the repo submission\",\n    type: DbRepoToUserSubmissions,\n  })\n  @ApiNotFoundResponse({ description: \"Repo or submission not found\" })\n  @ApiConflictResponse({ description: \"You have already submitted this repo\" })\n  async submitOneByOwnerAndRepo(\n    @Param(\"owner\") owner: string,\n    @Param(\"repo\") repo: string,\n    @UserId() userId: number\n  ): Promise {\n    const item = await this.repoService.findOneByOwnerAndRepo(owner, repo);\n\n    return this.submitService.submitByRepoId(item.id, userId);\n  }\n\n  @Delete(\"/:id/submit\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"downSubmitOneById\",\n    summary: \"Finds a repo by :id and removes existing submission\",\n  })\n  @ApiOkResponse({\n    description: \"Returns the repo submission\",\n    type: DbRepoToUserSubmissions,\n  })\n  @ApiNotFoundResponse({ description: \"Repo or submission not found\" })\n  @ApiConflictResponse({ description: \"You have already removed your submission\" })\n  @ApiParam({ name: \"id\", type: \"integer\" })\n  async downSubmitOneById(\n    @Param(\"id\", ParseIntPipe) id: number,\n    @UserId() userId: number\n  ): Promise {\n    const item = await this.repoService.findOneById(id);\n\n    return this.submitService.downSubmitByRepoId(item.id, userId);\n  }\n\n  @Delete(\"/:owner/:repo/submit\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"downSubmitOneByOwnerAndRepo\",\n    summary: \"Finds a repo by :owner and :repo and removes existing submission\",\n  })\n  @ApiOkResponse({\n    description: \"Returns the repo submission\",\n    type: DbRepoToUserSubmissions,\n  })\n  @ApiNotFoundResponse({ description: \"Repo or submission not found\" })\n  @ApiConflictResponse({ description: \"You have already removed your submission\" })\n  async downSubmitOneByOwnerAndRepo(\n    @Param(\"owner\") owner: string,\n    @Param(\"repo\") repo: string,\n    @UserId() userId: number\n  ): Promise {\n    const item = await this.repoService.findOneByOwnerAndRepo(owner, repo);\n\n    return this.submitService.downSubmitByRepoId(item.id, userId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/RepoVoteController.html":{"url":"controllers/RepoVoteController.html","title":"controller - RepoVoteController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  RepoVoteController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/vote/repo-vote.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                repos\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                downVoteOneById\n                            \n                            \n                                    Async\n                                downVoteOneByOwnerAndRepo\n                            \n                            \n                                    Async\n                                findAllUserVoted\n                            \n                            \n                                    Async\n                                findOneByRepoId\n                            \n                            \n                                    Async\n                                voteOneById\n                            \n                            \n                                    Async\n                                voteOneByOwnerAndRepo\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        downVoteOneById\n                        \n                    \n                \n            \n            \n                \n                    \n                    downVoteOneById(id: number, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/:id/vote')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'downVoteOneById', summary: 'Finds a repo by :id and removes existing vote'})@ApiOkResponse({description: 'Returns the repo vote', type: DbRepoToUserVotes})@ApiNotFoundResponse({description: 'Repo or vote not found'})@ApiConflictResponse({description: 'You have already removed your vote'})@ApiParam({name: 'id', type: 'integer'})\n                \n            \n\n            \n                \n                    Defined in src/vote/repo-vote.controller.ts:117\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        downVoteOneByOwnerAndRepo\n                        \n                    \n                \n            \n            \n                \n                    \n                    downVoteOneByOwnerAndRepo(owner: string, repo: string, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/:owner/:repo/vote')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'downVoteOneByOwnerAndRepo', summary: 'Finds a repo by :owner and :repo and removes existing vote'})@ApiOkResponse({description: 'Returns the repo vote', type: DbRepoToUserVotes})@ApiNotFoundResponse({description: 'Repo or vote not found'})@ApiConflictResponse({description: 'You have already removed your vote'})\n                \n            \n\n            \n                \n                    Defined in src/vote/repo-vote.controller.ts:136\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    owner\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    repo\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllUserVoted\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllUserVoted(pageOptionsDto: RepoPageOptionsDto, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/listUserVoted')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'findAllUserVoted', summary: 'Finds all repos voted by authenticated user and paginates them'})@ApiPaginatedResponse(DbRepo)@ApiOkResponse({type: DbRepo})\n                \n            \n\n            \n                \n                    Defined in src/vote/repo-vote.controller.ts:37\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                RepoPageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneByRepoId\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneByRepoId(repoId: number, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:repoId/vote')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'findOneByRepoId', summary: 'Finds a repo by :repoId and returns if authenticated user has voted for it'})@ApiOkResponse({type: VotedRepoDto, description: 'Returns if authenticated user has voted for it'})@ApiParam({name: 'repoId', type: 'integer'})\n                \n            \n\n            \n                \n                    Defined in src/vote/repo-vote.controller.ts:56\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    repoId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        voteOneById\n                        \n                    \n                \n            \n            \n                \n                    \n                    voteOneById(id: number, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('/:id/vote')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'voteOneById', summary: 'Finds a repo by :id and adds a vote'})@ApiOkResponse({description: 'Returns the repo vote', type: DbRepoToUserVotes})@ApiNotFoundResponse({description: 'Repo or vote not found'})@ApiConflictResponse({description: 'You have already voted for this repo'})@ApiParam({name: 'id', type: 'integer'})\n                \n            \n\n            \n                \n                    Defined in src/vote/repo-vote.controller.ts:74\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        voteOneByOwnerAndRepo\n                        \n                    \n                \n            \n            \n                \n                    \n                    voteOneByOwnerAndRepo(owner: string, repo: string, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('/:owner/:repo/vote')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'voteOneByOwnerAndRepo', summary: 'Finds a repo by :owner and :repo and adds a vote'})@ApiOkResponse({description: 'Returns the repo vote', type: DbRepoToUserVotes})@ApiNotFoundResponse({description: 'Repo or vote not found'})@ApiConflictResponse({description: 'You have already voted for this repo'})\n                \n            \n\n            \n                \n                    Defined in src/vote/repo-vote.controller.ts:93\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    owner\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    repo\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Delete, Get, Param, ParseIntPipe, Put, Query, UseGuards } from \"@nestjs/common\";\nimport {\n  ApiBearerAuth,\n  ApiConflictResponse,\n  ApiNotFoundResponse,\n  ApiOkResponse,\n  ApiOperation,\n  ApiParam,\n  ApiTags,\n} from \"@nestjs/swagger\";\n\nimport { RepoService } from \"../repo/repo.service\";\nimport { SupabaseGuard } from \"../auth/supabase.guard\";\nimport { UserId } from \"../auth/supabase.user.decorator\";\nimport { DbRepoToUserVotes } from \"../repo/entities/repo.to.user.votes.entity\";\nimport { ApiPaginatedResponse } from \"../common/decorators/api-paginated-response.decorator\";\nimport { DbRepo } from \"../repo/entities/repo.entity\";\nimport { RepoPageOptionsDto } from \"../repo/dtos/repo-page-options.dto\";\nimport { PageDto } from \"../common/dtos/page.dto\";\nimport { VotedRepoDto } from \"./../user-repo/dtos/user-repos.dto\";\nimport { VoteService } from \"./vote.service\";\n\n@Controller(\"repos\")\n@ApiTags(\"Repository service guarded\", \"Vote service\")\nexport class RepoVoteController {\n  constructor(private readonly repoService: RepoService, private readonly voteService: VoteService) {}\n\n  @Get(\"/listUserVoted\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"findAllUserVoted\",\n    summary: \"Finds all repos voted by authenticated user and paginates them\",\n  })\n  @ApiPaginatedResponse(DbRepo)\n  @ApiOkResponse({ type: DbRepo })\n  async findAllUserVoted(\n    @Query() pageOptionsDto: RepoPageOptionsDto,\n    @UserId() userId: number\n  ): Promise> {\n    return this.repoService.findAll(pageOptionsDto, userId, [\"Votes\"]);\n  }\n\n  @Get(\"/:repoId/vote\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"findOneByRepoId\",\n    summary: \"Finds a repo by :repoId and returns if authenticated user has voted for it\",\n  })\n  @ApiOkResponse({\n    type: VotedRepoDto,\n    description: \"Returns if authenticated user has voted for it\",\n  })\n  @ApiParam({ name: \"repoId\", type: \"integer\" })\n  async findOneByRepoId(@Param(\"repoId\", ParseIntPipe) repoId: number, @UserId() userId: number) {\n    return this.voteService.findOneByRepoId(repoId, userId);\n  }\n\n  @Put(\"/:id/vote\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"voteOneById\",\n    summary: \"Finds a repo by :id and adds a vote\",\n  })\n  @ApiOkResponse({\n    description: \"Returns the repo vote\",\n    type: DbRepoToUserVotes,\n  })\n  @ApiNotFoundResponse({ description: \"Repo or vote not found\" })\n  @ApiConflictResponse({ description: \"You have already voted for this repo\" })\n  @ApiParam({ name: \"id\", type: \"integer\" })\n  async voteOneById(@Param(\"id\", ParseIntPipe) id: number, @UserId() userId: number): Promise {\n    const item = await this.repoService.findOneById(id);\n\n    return this.voteService.voteByRepoId(item.id, userId);\n  }\n\n  @Put(\"/:owner/:repo/vote\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"voteOneByOwnerAndRepo\",\n    summary: \"Finds a repo by :owner and :repo and adds a vote\",\n  })\n  @ApiOkResponse({\n    description: \"Returns the repo vote\",\n    type: DbRepoToUserVotes,\n  })\n  @ApiNotFoundResponse({ description: \"Repo or vote not found\" })\n  @ApiConflictResponse({ description: \"You have already voted for this repo\" })\n  async voteOneByOwnerAndRepo(\n    @Param(\"owner\") owner: string,\n    @Param(\"repo\") repo: string,\n    @UserId() userId: number\n  ): Promise {\n    const item = await this.repoService.findOneByOwnerAndRepo(owner, repo);\n\n    return this.voteService.voteByRepoId(item.id, userId);\n  }\n\n  @Delete(\"/:id/vote\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"downVoteOneById\",\n    summary: \"Finds a repo by :id and removes existing vote\",\n  })\n  @ApiOkResponse({\n    description: \"Returns the repo vote\",\n    type: DbRepoToUserVotes,\n  })\n  @ApiNotFoundResponse({ description: \"Repo or vote not found\" })\n  @ApiConflictResponse({ description: \"You have already removed your vote\" })\n  @ApiParam({ name: \"id\", type: \"integer\" })\n  async downVoteOneById(@Param(\"id\", ParseIntPipe) id: number, @UserId() userId: number): Promise {\n    const item = await this.repoService.findOneById(id);\n\n    return this.voteService.downVoteByRepoId(item.id, userId);\n  }\n\n  @Delete(\"/:owner/:repo/vote\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"downVoteOneByOwnerAndRepo\",\n    summary: \"Finds a repo by :owner and :repo and removes existing vote\",\n  })\n  @ApiOkResponse({\n    description: \"Returns the repo vote\",\n    type: DbRepoToUserVotes,\n  })\n  @ApiNotFoundResponse({ description: \"Repo or vote not found\" })\n  @ApiConflictResponse({ description: \"You have already removed your vote\" })\n  async downVoteOneByOwnerAndRepo(\n    @Param(\"owner\") owner: string,\n    @Param(\"repo\") repo: string,\n    @UserId() userId: number\n  ): Promise {\n    const item = await this.repoService.findOneByOwnerAndRepo(owner, repo);\n\n    return this.voteService.downVoteByRepoId(item.id, userId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/StarModule.html":{"url":"modules/StarModule.html","title":"module - StarModule","body":"\n                   \n\n\n\n\n    Modules\n    StarModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_StarModule\n\n\n\ncluster_StarModule_exports\n\n\n\ncluster_StarModule_imports\n\n\n\ncluster_StarModule_providers\n\n\n\n\nRepoModule\n\nRepoModule\n\n\n\nStarModule\n\nStarModule\n\nStarModule -->\n\nRepoModule->StarModule\n\n\n\n\n\nStarService \n\nStarService \n\nStarService  -->\n\nStarModule->StarService \n\n\n\n\n\nStarService\n\nStarService\n\nStarModule -->\n\nStarService->StarModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/star/star.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            StarService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            RepoStarController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            RepoModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            StarService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\n\nimport { DbRepo } from \"../repo/entities/repo.entity\";\nimport { DbRepoToUserStars } from \"../repo/entities/repo.to.user.stars.entity\";\nimport { RepoModule } from \"../repo/repo.module\";\nimport { StarService } from \"./star.service\";\nimport { RepoStarController } from \"./repo-star.controller\";\n\n@Module({\n  imports: [TypeOrmModule.forFeature([DbRepo, DbRepoToUserStars], \"ApiConnection\"), RepoModule],\n  controllers: [RepoStarController],\n  providers: [StarService],\n  exports: [StarService],\n})\nexport class StarModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/StarService.html":{"url":"injectables/StarService.html","title":"injectable - StarService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  StarService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/star/star.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                baseQueryBuilder\n                            \n                            \n                                    Async\n                                downStarByRepoId\n                            \n                            \n                                    Async\n                                starByRepoId\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(repoStarRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/star/star.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        repoStarRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        baseQueryBuilder\n                        \n                    \n                \n            \n            \n                \nbaseQueryBuilder()\n                \n            \n\n\n            \n                \n                    Defined in src/star/star.service.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        downStarByRepoId\n                        \n                    \n                \n            \n            \n                \n                    \n                    downStarByRepoId(repoId: number, userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/star/star.service.ts:42\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    repoId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        starByRepoId\n                        \n                    \n                \n            \n            \n                \n                    \n                    starByRepoId(repoId: number, userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/star/star.service.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    repoId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ConflictException, Injectable, NotFoundException } from \"@nestjs/common\";\nimport { Repository } from \"typeorm\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { DbRepoToUserStars } from \"../repo/entities/repo.to.user.stars.entity\";\n\n@Injectable()\nexport class StarService {\n  constructor(\n    @InjectRepository(DbRepoToUserStars, \"ApiConnection\")\n    private repoStarRepository: Repository\n  ) {}\n\n  baseQueryBuilder() {\n    const builder = this.repoStarRepository.createQueryBuilder(\"r2stars\").withDeleted();\n\n    return builder;\n  }\n\n  async starByRepoId(repoId: number, userId: number): Promise {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder.where(\"r2stars.repo_id = :repoId\", { repoId }).andWhere(\"r2stars.user_id = :userId\", { userId });\n\n    const starExists = await queryBuilder.getOne();\n\n    if (starExists) {\n      if (!starExists.deleted_at) {\n        throw new ConflictException(\"You have already starred this repo\");\n      }\n\n      await this.repoStarRepository.restore(starExists.id);\n\n      return starExists;\n    }\n\n    return this.repoStarRepository.save({\n      repo_id: repoId,\n      user_id: userId,\n    });\n  }\n\n  async downStarByRepoId(repoId: number, userId: number): Promise {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder.where(\"r2stars.repo_id = :repoId\", { repoId }).andWhere(\"r2stars.user_id = :userId\", { userId });\n\n    const starExists = await queryBuilder.getOne();\n\n    if (!starExists) {\n      throw new NotFoundException(\"You have not starred this repo\");\n    }\n\n    if (starExists.deleted_at) {\n      throw new ConflictException(\"You have already removed your star\");\n    }\n\n    await this.repoStarRepository.softDelete(starExists.id);\n\n    return starExists;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/StargazeModule.html":{"url":"modules/StargazeModule.html","title":"module - StargazeModule","body":"\n                   \n\n\n\n\n    Modules\n    StargazeModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_StargazeModule\n\n\n\ncluster_StargazeModule_exports\n\n\n\ncluster_StargazeModule_imports\n\n\n\ncluster_StargazeModule_providers\n\n\n\n\nRepoModule\n\nRepoModule\n\n\n\nStargazeModule\n\nStargazeModule\n\nStargazeModule -->\n\nRepoModule->StargazeModule\n\n\n\n\n\nStargazeService \n\nStargazeService \n\nStargazeService  -->\n\nStargazeModule->StargazeService \n\n\n\n\n\nStargazeService\n\nStargazeService\n\nStargazeModule -->\n\nStargazeService->StargazeModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/stargaze/stargaze.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            StargazeService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            RepoStargazeController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            RepoModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            StargazeService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\n\nimport { DbRepo } from \"../repo/entities/repo.entity\";\nimport { DbRepoToUserStargazers } from \"../repo/entities/repo.to.user.stargazers.entity\";\nimport { RepoModule } from \"../repo/repo.module\";\nimport { StargazeService } from \"./stargaze.service\";\nimport { RepoStargazeController } from \"./repo-stargaze.controller\";\n\n@Module({\n  imports: [TypeOrmModule.forFeature([DbRepo, DbRepoToUserStargazers], \"ApiConnection\"), RepoModule],\n  controllers: [RepoStargazeController],\n  providers: [StargazeService],\n  exports: [StargazeService],\n})\nexport class StargazeModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/StargazeService.html":{"url":"injectables/StargazeService.html","title":"injectable - StargazeService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  StargazeService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/stargaze/stargaze.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                baseQueryBuilder\n                            \n                            \n                                    Async\n                                downStargazeByRepoId\n                            \n                            \n                                    Async\n                                stargazeByRepoId\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(repoStargazeRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/stargaze/stargaze.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        repoStargazeRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        baseQueryBuilder\n                        \n                    \n                \n            \n            \n                \nbaseQueryBuilder()\n                \n            \n\n\n            \n                \n                    Defined in src/stargaze/stargaze.service.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        downStargazeByRepoId\n                        \n                    \n                \n            \n            \n                \n                    \n                    downStargazeByRepoId(repoId: number, userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/stargaze/stargaze.service.ts:44\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    repoId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        stargazeByRepoId\n                        \n                    \n                \n            \n            \n                \n                    \n                    stargazeByRepoId(repoId: number, userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/stargaze/stargaze.service.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    repoId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ConflictException, Injectable, NotFoundException } from \"@nestjs/common\";\nimport { Repository } from \"typeorm\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { DbRepoToUserStargazers } from \"../repo/entities/repo.to.user.stargazers.entity\";\n\n@Injectable()\nexport class StargazeService {\n  constructor(\n    @InjectRepository(DbRepoToUserStargazers, \"ApiConnection\")\n    private repoStargazeRepository: Repository\n  ) {}\n\n  baseQueryBuilder() {\n    const builder = this.repoStargazeRepository.createQueryBuilder(\"r2stargazes\").withDeleted();\n\n    return builder;\n  }\n\n  async stargazeByRepoId(repoId: number, userId: number): Promise {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .where(\"r2stargazes.repo_id = :repoId\", { repoId })\n      .andWhere(\"r2stargazes.user_id = :userId\", { userId });\n\n    const stargazeExists = await queryBuilder.getOne();\n\n    if (stargazeExists) {\n      if (!stargazeExists.deleted_at) {\n        throw new ConflictException(\"You have already unfollowed this repo\");\n      }\n\n      await this.repoStargazeRepository.restore(stargazeExists.id);\n\n      return stargazeExists;\n    }\n\n    return this.repoStargazeRepository.save({\n      repo_id: repoId,\n      user_id: userId,\n    });\n  }\n\n  async downStargazeByRepoId(repoId: number, userId: number): Promise {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .where(\"r2stargazes.repo_id = :repoId\", { repoId })\n      .andWhere(\"r2stargazes.user_id = :userId\", { userId });\n\n    const stargazeExists = await queryBuilder.getOne();\n\n    if (!stargazeExists) {\n      throw new NotFoundException(\"You have not followed this repo\");\n    }\n\n    if (stargazeExists.deleted_at) {\n      throw new ConflictException(\"You have already unfollowed this repo\");\n    }\n\n    await this.repoStargazeRepository.softDelete(stargazeExists.id);\n\n    return stargazeExists;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/StripeModule.html":{"url":"modules/StripeModule.html","title":"module - StripeModule","body":"\n                   \n\n\n\n\n    Modules\n    StripeModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_StripeModule\n\n\n\ncluster_StripeModule_providers\n\n\n\ncluster_StripeModule_exports\n\n\n\n\nStripeService \n\nStripeService \n\n\n\nStripeModule\n\nStripeModule\n\nStripeService  -->\n\nStripeModule->StripeService \n\n\n\n\n\nStripeService\n\nStripeService\n\nStripeModule -->\n\nStripeService->StripeModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/stripe/stripe.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            StripeService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            StripeService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { StripeService } from \"./stripe.service\";\n\n@Module({\n  imports: [],\n  providers: [StripeService],\n  exports: [StripeService],\n})\nexport class StripeModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/StripeService.html":{"url":"injectables/StripeService.html","title":"injectable - StripeService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  StripeService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/stripe/stripe.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Optional\n                                _stripe\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addCustomer\n                            \n                            \n                                    Async\n                                createCheckoutSession\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    stripe\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/stripe/stripe.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addCustomer\n                        \n                    \n                \n            \n            \n                \n                    \n                    addCustomer(id: number, email?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/stripe/stripe.service.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createCheckoutSession\n                        \n                    \n                \n            \n            \n                \n                    \n                    createCheckoutSession(customer: string)\n                \n            \n\n\n            \n                \n                    Defined in src/stripe/stripe.service.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    customer\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Optional\n                        _stripe\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Stripe\n\n                    \n                \n                    \n                        \n                                Defined in src/stripe/stripe.service.ts:8\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        stripe\n                    \n                \n\n                \n                    \n                        getstripe()\n                    \n                \n                            \n                                \n                                    Defined in src/stripe/stripe.service.ts:12\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { ConfigService } from \"@nestjs/config\";\n\nimport Stripe from \"stripe\";\n\n@Injectable()\nexport class StripeService {\n  private _stripe?: Stripe;\n\n  constructor(private configService: ConfigService) {}\n\n  get stripe() {\n    if (!this._stripe) {\n      this._stripe = new Stripe(this.configService.get(\"stripe.secretKey\")!, { apiVersion: \"2022-11-15\" });\n    }\n\n    return this._stripe;\n  }\n\n  async addCustomer(id: number, email?: string) {\n    return this.stripe.customers.create({\n      metadata: { userId: id },\n      email,\n    });\n  }\n\n  async createCheckoutSession(customer: string) {\n    const session = await this.stripe.checkout.sessions.create({\n      payment_method_types: [\"card\"],\n      billing_address_collection: \"required\",\n      allow_promotion_codes: true,\n      customer,\n      line_items: [\n        {\n          price: this.configService.get(\"stripe.subscriptionPriceID\")!,\n          quantity: 1,\n        },\n      ],\n      mode: \"subscription\",\n      success_url: `${this.configService.get(\"stripe.subscriptionSessionCheckoutSuccessURL\")!}`,\n      cancel_url: `${this.configService.get(\"stripe.subscriptionSessionCancelURL\")!}`,\n    });\n\n    return { sessionId: session.id };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/StripeSubscriptionModule.html":{"url":"modules/StripeSubscriptionModule.html","title":"module - StripeSubscriptionModule","body":"\n                   \n\n\n\n\n    Modules\n    StripeSubscriptionModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_StripeSubscriptionModule\n\n\n\ncluster_StripeSubscriptionModule_exports\n\n\n\ncluster_StripeSubscriptionModule_providers\n\n\n\n\nStripeSubscriptionService \n\nStripeSubscriptionService \n\n\n\nStripeSubscriptionModule\n\nStripeSubscriptionModule\n\nStripeSubscriptionService  -->\n\nStripeSubscriptionModule->StripeSubscriptionService \n\n\n\n\n\nStripeSubscriptionService\n\nStripeSubscriptionService\n\nStripeSubscriptionModule -->\n\nStripeSubscriptionService->StripeSubscriptionModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/subscription/stripe-subscription.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            StripeSubscriptionService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            StripeSubscriptionService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\n\nimport { DbSubscription } from \"../subscription/stripe-subscription.dto\";\nimport { StripeSubscriptionService } from \"./stripe-subscription.service\";\n\n@Module({\n  imports: [TypeOrmModule.forFeature([DbSubscription], \"ApiConnection\")],\n  providers: [StripeSubscriptionService],\n  exports: [StripeSubscriptionService],\n})\nexport class StripeSubscriptionModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/StripeSubscriptionService.html":{"url":"injectables/StripeSubscriptionService.html","title":"injectable - StripeSubscriptionService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  StripeSubscriptionService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/subscription/stripe-subscription.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                baseQueryBuilder\n                            \n                            \n                                    Async\n                                upsertSubscription\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(subscriptionRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/subscription/stripe-subscription.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        subscriptionRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        baseQueryBuilder\n                        \n                    \n                \n            \n            \n                \nbaseQueryBuilder()\n                \n            \n\n\n            \n                \n                    Defined in src/subscription/stripe-subscription.service.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        upsertSubscription\n                        \n                    \n                \n            \n            \n                \n                    \n                    upsertSubscription(subscription: Partial)\n                \n            \n\n\n            \n                \n                    Defined in src/subscription/stripe-subscription.service.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    subscription\n                                    \n                                                Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { Repository } from \"typeorm\";\n\nimport { DbSubscription } from \"./stripe-subscription.dto\";\n\n@Injectable()\nexport class StripeSubscriptionService {\n  constructor(\n    @InjectRepository(DbSubscription, \"ApiConnection\")\n    private subscriptionRepository: Repository\n  ) {}\n\n  baseQueryBuilder() {\n    return this.subscriptionRepository.createQueryBuilder(\"subscription\");\n  }\n\n  async upsertSubscription(subscription: Partial) {\n    return this.subscriptionRepository.save(subscription);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/StripeWebHookModule.html":{"url":"modules/StripeWebHookModule.html","title":"module - StripeWebHookModule","body":"\n                   \n\n\n\n\n    Modules\n    StripeWebHookModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_StripeWebHookModule\n\n\n\ncluster_StripeWebHookModule_imports\n\n\n\ncluster_StripeWebHookModule_exports\n\n\n\n\nCustomerModule\n\nCustomerModule\n\n\n\nStripeWebHookModule\n\nStripeWebHookModule\n\nStripeWebHookModule -->\n\nCustomerModule->StripeWebHookModule\n\n\n\n\n\nStripeModule\n\nStripeModule\n\nStripeWebHookModule -->\n\nStripeModule->StripeWebHookModule\n\n\n\n\n\nStripeSubscriptionModule\n\nStripeSubscriptionModule\n\nStripeWebHookModule -->\n\nStripeSubscriptionModule->StripeWebHookModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nStripeWebHookModule -->\n\nUserModule->StripeWebHookModule\n\n\n\n\n\nStripeWebhookController \n\nStripeWebhookController \n\nStripeWebhookController  -->\n\nStripeWebHookModule->StripeWebhookController \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/stripe-webhook/webhook.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Controllers\n                    \n                        \n                            StripeWebhookController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            CustomerModule\n                        \n                        \n                            StripeModule\n                        \n                        \n                            StripeSubscriptionModule\n                        \n                        \n                            UserModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            StripeWebhookController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\n\nimport { StripeSubscriptionModule } from \"../subscription/stripe-subscription.module\";\nimport { CustomerModule } from \"../customer/customer.module\";\n\nimport { StripeModule } from \"../stripe/stripe.module\";\nimport { UserModule } from \"../user/user.module\";\nimport { StripeWebhookController } from \"./stripe-webhook.controller\";\n\n@Module({\n  imports: [StripeSubscriptionModule, CustomerModule, StripeModule, UserModule],\n  providers: [StripeWebhookController],\n  controllers: [StripeWebhookController],\n  exports: [StripeWebhookController],\n})\nexport class StripeWebHookModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/StripeWebhookController.html":{"url":"controllers/StripeWebhookController.html","title":"controller - StripeWebhookController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  StripeWebhookController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/stripe-webhook/stripe-webhook.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                stripe\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                handleStripeWebhook\n                            \n                            \n                                    Private\n                                    Async\n                                manageSubscriptionStatusChange\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        handleStripeWebhook\n                        \n                    \n                \n            \n            \n                \n                    \n                    handleStripeWebhook(req: RawBodyRequest)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/webhooks')@ApiOkResponse()\n                \n            \n\n            \n                \n                    Defined in src/stripe-webhook/stripe-webhook.controller.ts:82\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            RawBodyRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        Async\n                        manageSubscriptionStatusChange\n                        \n                    \n                \n            \n            \n                \n                    \n                    manageSubscriptionStatusChange(subscriptionId: string, customerId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/stripe-webhook/stripe-webhook.controller.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    subscriptionId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    customerId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { ConfigService } from \"@nestjs/config\";\nimport { BadRequestException, Controller, Logger, Post, RawBodyRequest, Req } from \"@nestjs/common\";\nimport { ApiOkResponse, ApiTags } from \"@nestjs/swagger\";\nimport Stripe from \"stripe\";\n\nimport { CustomerService } from \"../customer/customer.service\";\nimport { StripeSubscriptionService } from \"../subscription/stripe-subscription.service\";\nimport { StripeService } from \"../stripe/stripe.service\";\nimport { UserService } from \"../user/services/user.service\";\nimport { toDateTime } from \"./utils\";\n\nconst relevantEvents = new Set([\n  \"checkout.session.completed\",\n  \"customer.subscription.created\",\n  \"customer.subscription.updated\",\n  \"customer.subscription.deleted\",\n]);\n\n@ApiTags(\"Stripe service\")\n@Controller(\"stripe\")\nexport class StripeWebhookController {\n  private logger = new Logger(`StripeWebhook`);\n\n  constructor(\n    private customerService: CustomerService,\n    private stripeSubscriptionService: StripeSubscriptionService,\n    private stripeService: StripeService,\n    private configService: ConfigService,\n    private userService: UserService\n  ) {}\n\n  private async manageSubscriptionStatusChange(subscriptionId: string, customerId: string) {\n    const customerData = await this.customerService.findByCustomerId(customerId);\n\n    if (!customerData) {\n      throw new BadRequestException();\n    }\n\n    const { id: uuid } = customerData;\n    const userId = parseInt(`${uuid}`, 10);\n    const subscription = await this.stripeService.stripe.subscriptions.retrieve(subscriptionId, {\n      expand: [\"default_payment_method\"],\n    });\n\n    // upsert the latest status of the subscription object.\n    const subscriptionData = {\n      id: subscription.id,\n      user_id: userId,\n      metadata: JSON.stringify(subscription.metadata),\n      status: subscription.status as string,\n      price_id: subscription.items.data[0].price.id,\n      quantity: subscription.items.data.length,\n      cancel_at_period_end: subscription.cancel_at_period_end,\n      cancel_at: subscription.cancel_at ? toDateTime(subscription.cancel_at) : undefined,\n      canceled_at: subscription.canceled_at ? toDateTime(subscription.canceled_at) : undefined,\n      current_period_start_at: toDateTime(subscription.current_period_start),\n      current_period_end_at: toDateTime(subscription.current_period_end),\n      created_at: toDateTime(subscription.created),\n      ended_at: subscription.ended_at ? toDateTime(subscription.ended_at) : undefined,\n      trial_start_at: subscription.trial_start ? toDateTime(subscription.trial_start) : undefined,\n      trial_end_at: subscription.trial_end ? toDateTime(subscription.trial_end) : undefined,\n    };\n\n    try {\n      await this.stripeSubscriptionService.upsertSubscription(subscriptionData);\n\n      const userRole = subscription.status === \"active\" ? 50 : 10;\n\n      await this.userService.updateRole(userId, userRole);\n    } catch (e: unknown) {\n      this.logger.error(\n        `Error inserting/updating subscription [${subscription.id}] for user [${userId}]: ${(e as Error).toString()}`\n      );\n      throw new BadRequestException();\n    }\n\n    this.logger.log(`Inserted/updated subscription [${subscription.id}] for user [${userId}]`);\n  }\n\n  @Post(\"/webhooks\")\n  @ApiOkResponse()\n  async handleStripeWebhook(@Req() req: RawBodyRequest) {\n    const sig = (req.headers as unknown as Record)[\"stripe-signature\"];\n    const webhookSecret: string | undefined = this.configService.get(\"stripe.webhookSecret\");\n\n    if (!sig || !webhookSecret) {\n      return;\n    }\n\n    const event = this.stripeService.stripe.webhooks.constructEvent(req.rawBody!, sig, webhookSecret);\n\n    if (relevantEvents.has(event.type)) {\n      const subEvents = [\n        \"customer.subscription.created\",\n        \"customer.subscription.updated\",\n        \"customer.subscription.deleted\",\n      ];\n\n      if (subEvents.includes(event.type)) {\n        const subscription = event.data.object as Stripe.Subscription;\n\n        await this.manageSubscriptionStatusChange(subscription.id, subscription.customer as string);\n      } else if (event.type === \"checkout.session.completed\") {\n        const checkoutSession = event.data.object as Stripe.Checkout.Session;\n\n        if (checkoutSession.mode === \"subscription\") {\n          const subscriptionId = checkoutSession.subscription;\n\n          await this.manageSubscriptionStatusChange(subscriptionId as string, checkoutSession.customer as string);\n        }\n      } else {\n        throw new BadRequestException();\n      }\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/SubmitModule.html":{"url":"modules/SubmitModule.html","title":"module - SubmitModule","body":"\n                   \n\n\n\n\n    Modules\n    SubmitModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_SubmitModule\n\n\n\ncluster_SubmitModule_exports\n\n\n\ncluster_SubmitModule_imports\n\n\n\ncluster_SubmitModule_providers\n\n\n\n\nRepoModule\n\nRepoModule\n\n\n\nSubmitModule\n\nSubmitModule\n\nSubmitModule -->\n\nRepoModule->SubmitModule\n\n\n\n\n\nSubmitService \n\nSubmitService \n\nSubmitService  -->\n\nSubmitModule->SubmitService \n\n\n\n\n\nSubmitService\n\nSubmitService\n\nSubmitModule -->\n\nSubmitService->SubmitModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/submit/submit.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            SubmitService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            RepoSubmitController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            RepoModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            SubmitService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\n\nimport { DbRepo } from \"../repo/entities/repo.entity\";\nimport { DbRepoToUserSubmissions } from \"../repo/entities/repo.to.user.submissions.entity\";\nimport { RepoModule } from \"../repo/repo.module\";\nimport { SubmitService } from \"./submit.service\";\nimport { RepoSubmitController } from \"./repo-submit.controller\";\n\n@Module({\n  imports: [TypeOrmModule.forFeature([DbRepo, DbRepoToUserSubmissions], \"ApiConnection\"), RepoModule],\n  controllers: [RepoSubmitController],\n  providers: [SubmitService],\n  exports: [SubmitService],\n})\nexport class SubmitModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SubmitService.html":{"url":"injectables/SubmitService.html","title":"injectable - SubmitService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SubmitService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/submit/submit.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                baseQueryBuilder\n                            \n                            \n                                    Async\n                                downSubmitByRepoId\n                            \n                            \n                                    Async\n                                submitByRepoId\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(repoSubmitRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/submit/submit.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        repoSubmitRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        baseQueryBuilder\n                        \n                    \n                \n            \n            \n                \nbaseQueryBuilder()\n                \n            \n\n\n            \n                \n                    Defined in src/submit/submit.service.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        downSubmitByRepoId\n                        \n                    \n                \n            \n            \n                \n                    \n                    downSubmitByRepoId(repoId: number, userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/submit/submit.service.ts:42\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    repoId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        submitByRepoId\n                        \n                    \n                \n            \n            \n                \n                    \n                    submitByRepoId(repoId: number, userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/submit/submit.service.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    repoId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ConflictException, Injectable, NotFoundException } from \"@nestjs/common\";\nimport { Repository } from \"typeorm\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { DbRepoToUserSubmissions } from \"../repo/entities/repo.to.user.submissions.entity\";\n\n@Injectable()\nexport class SubmitService {\n  constructor(\n    @InjectRepository(DbRepoToUserSubmissions, \"ApiConnection\")\n    private repoSubmitRepository: Repository\n  ) {}\n\n  baseQueryBuilder() {\n    const builder = this.repoSubmitRepository.createQueryBuilder(\"r2submits\").withDeleted();\n\n    return builder;\n  }\n\n  async submitByRepoId(repoId: number, userId: number): Promise {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder.where(\"r2submits.repo_id = :repoId\", { repoId }).andWhere(\"r2submits.user_id = :userId\", { userId });\n\n    const submitExists = await queryBuilder.getOne();\n\n    if (submitExists) {\n      if (!submitExists.deleted_at) {\n        throw new ConflictException(\"You have already submitd for this repo\");\n      }\n\n      await this.repoSubmitRepository.restore(submitExists.id);\n\n      return submitExists;\n    }\n\n    return this.repoSubmitRepository.save({\n      repo_id: repoId,\n      user_id: userId,\n    });\n  }\n\n  async downSubmitByRepoId(repoId: number, userId: number): Promise {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder.where(\"r2submits.repo_id = :repoId\", { repoId }).andWhere(\"r2submits.user_id = :userId\", { userId });\n\n    const submitExists = await queryBuilder.getOne();\n\n    if (!submitExists) {\n      throw new NotFoundException(\"You have not submitd for this repo\");\n    }\n\n    if (submitExists.deleted_at) {\n      throw new ConflictException(\"You have already removed your submit\");\n    }\n\n    await this.repoSubmitRepository.softDelete(submitExists.id);\n\n    return submitExists;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SupabaseAuthDto.html":{"url":"classes/SupabaseAuthDto.html","title":"class - SupabaseAuthDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SupabaseAuthDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dtos/supabase-auth-response.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                    Optional\n                                bio\n                            \n                            \n                                    Readonly\n                                    Optional\n                                company\n                            \n                            \n                                    Readonly\n                                    Optional\n                                confirmed_at\n                            \n                            \n                                    Readonly\n                                    Optional\n                                coupon_code\n                            \n                            \n                                    Readonly\n                                    Optional\n                                created_at\n                            \n                            \n                                    Readonly\n                                    Optional\n                                discord_url\n                            \n                            \n                                    Readonly\n                                    Optional\n                                display_local_time\n                            \n                            \n                                    Readonly\n                                    Optional\n                                email\n                            \n                            \n                                    Readonly\n                                    Optional\n                                github_sponsors_url\n                            \n                            \n                                    Readonly\n                                id\n                            \n                            \n                                    Readonly\n                                    Optional\n                                insights_count\n                            \n                            \n                                    Readonly\n                                    Optional\n                                insights_role\n                            \n                            \n                                    Readonly\n                                    Optional\n                                is_onboarded\n                            \n                            \n                                    Readonly\n                                    Optional\n                                is_waitlisted\n                            \n                            \n                                    Readonly\n                                    Optional\n                                last_sign_in_at\n                            \n                            \n                                    Readonly\n                                    Optional\n                                linkedin_url\n                            \n                            \n                                    Readonly\n                                    Optional\n                                location\n                            \n                            \n                                    Readonly\n                                    Optional\n                                name\n                            \n                            \n                                    Readonly\n                                    Optional\n                                notification_count\n                            \n                            \n                                    Readonly\n                                    Optional\n                                role\n                            \n                            \n                                    Readonly\n                                    Optional\n                                twitter_username\n                            \n                            \n                                    Readonly\n                                    Optional\n                                updated_at\n                            \n                            \n                                    Readonly\n                                    Optional\n                                url\n                            \n                            \n                                    Readonly\n                                    Optional\n                                user_name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        bio\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'User bio information', example: 'OpenSauced User'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/supabase-auth-response.dto.ts:75\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        company\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'User company information', example: 'OpenSauced'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/supabase-auth-response.dto.ts:99\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        confirmed_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Timestamp representing supabase user registration confirmation', example: '2016-10-19 13:24:51.000000'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/supabase-auth-response.dto.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        coupon_code\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Coupon Code', example: 'saucy'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/supabase-auth-response.dto.ts:149\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Timestamp representing supabase user creation', example: '2016-10-19 13:24:51.000000'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/supabase-auth-response.dto.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        discord_url\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Discord URL', example: 'https://discord.gg/opensauced'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/supabase-auth-response.dto.ts:129\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        display_local_time\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'User display local time information', example: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/supabase-auth-response.dto.ts:111\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Supabase authenticated user email', example: 'vortex@opensauced.pizza'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/supabase-auth-response.dto.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        github_sponsors_url\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'GitHub Sponsors URL', example: 'https://github.com/sponsors/open-sauced'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/supabase-auth-response.dto.ts:123\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Supabase authenticated unique user identifier', example: 237133})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/supabase-auth-response.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        insights_count\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Unread Insight Pagees Count', example: 2, type: 'integer'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/supabase-auth-response.dto.ts:143\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        insights_role\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Authenticated User's Insights Role', example: 10, type: 'integer'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/supabase-auth-response.dto.ts:69\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        is_onboarded\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Flag indicated whether the user is onboarded', example: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/supabase-auth-response.dto.ts:56\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        is_waitlisted\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Flag indicated whether the user is waitlisted', example: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/supabase-auth-response.dto.ts:62\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        last_sign_in_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Timestamp representing supabase user last sign in', example: '2016-10-19 13:24:51.000000'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/supabase-auth-response.dto.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        linkedin_url\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'LinkedIn URL', example: 'https://www.linkedin.com/in/brianldouglas'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/supabase-auth-response.dto.ts:117\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        location\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'User location information', example: 'San Francisco, CA'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/supabase-auth-response.dto.ts:105\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'User name information', example: 'MrPizza'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/supabase-auth-response.dto.ts:81\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        notification_count\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Unread User Notification Count', example: 5, type: 'integer'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/supabase-auth-response.dto.ts:136\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Supabase authenticated user role', example: 'authenticated'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/supabase-auth-response.dto.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        twitter_username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'User Twitter information', example: 'saucedopen'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/supabase-auth-response.dto.ts:93\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Timestamp representing supabase user last update', example: '2016-10-19 13:24:51.000000'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/supabase-auth-response.dto.ts:50\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        url\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'User website', example: 'https://opensauced.pizza'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/supabase-auth-response.dto.ts:87\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        user_name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Supabase authenticated user login name', example: '0-vortex'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/supabase-auth-response.dto.ts:14\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from \"@nestjs/swagger\";\n\nexport class SupabaseAuthDto {\n  @ApiProperty({\n    description: \"Supabase authenticated unique user identifier\",\n    example: 237133,\n  })\n  readonly id: string;\n\n  @ApiPropertyOptional({\n    description: \"Supabase authenticated user login name\",\n    example: \"0-vortex\",\n  })\n  readonly user_name?: string;\n\n  @ApiPropertyOptional({\n    description: \"Supabase authenticated user role\",\n    example: \"authenticated\",\n  })\n  readonly role?: string;\n\n  @ApiPropertyOptional({\n    description: \"Supabase authenticated user email\",\n    example: \"vortex@opensauced.pizza\",\n  })\n  readonly email?: string;\n\n  @ApiPropertyOptional({\n    description: \"Timestamp representing supabase user registration confirmation\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  readonly confirmed_at?: string;\n\n  @ApiPropertyOptional({\n    description: \"Timestamp representing supabase user last sign in\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  readonly last_sign_in_at?: string;\n\n  @ApiPropertyOptional({\n    description: \"Timestamp representing supabase user creation\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  readonly created_at?: string;\n\n  @ApiPropertyOptional({\n    description: \"Timestamp representing supabase user last update\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  readonly updated_at?: string;\n\n  @ApiPropertyOptional({\n    description: \"Flag indicated whether the user is onboarded\",\n    example: false,\n  })\n  readonly is_onboarded?: boolean;\n\n  @ApiPropertyOptional({\n    description: \"Flag indicated whether the user is waitlisted\",\n    example: false,\n  })\n  readonly is_waitlisted?: boolean;\n\n  @ApiPropertyOptional({\n    description: \"Authenticated User's Insights Role\",\n    example: 10,\n    type: \"integer\",\n  })\n  readonly insights_role?: number;\n\n  @ApiPropertyOptional({\n    description: \"User bio information\",\n    example: \"OpenSauced User\",\n  })\n  readonly bio?: string;\n\n  @ApiPropertyOptional({\n    description: \"User name information\",\n    example: \"MrPizza\",\n  })\n  readonly name?: string;\n\n  @ApiPropertyOptional({\n    description: \"User website\",\n    example: \"https://opensauced.pizza\",\n  })\n  readonly url?: string;\n\n  @ApiPropertyOptional({\n    description: \"User Twitter information\",\n    example: \"saucedopen\",\n  })\n  readonly twitter_username?: string;\n\n  @ApiPropertyOptional({\n    description: \"User company information\",\n    example: \"OpenSauced\",\n  })\n  readonly company?: string;\n\n  @ApiPropertyOptional({\n    description: \"User location information\",\n    example: \"San Francisco, CA\",\n  })\n  readonly location?: string;\n\n  @ApiPropertyOptional({\n    description: \"User display local time information\",\n    example: false,\n  })\n  readonly display_local_time?: boolean;\n\n  @ApiPropertyOptional({\n    description: \"LinkedIn URL\",\n    example: \"https://www.linkedin.com/in/brianldouglas\",\n  })\n  readonly linkedin_url?: string;\n\n  @ApiPropertyOptional({\n    description: \"GitHub Sponsors URL\",\n    example: \"https://github.com/sponsors/open-sauced\",\n  })\n  readonly github_sponsors_url?: string;\n\n  @ApiPropertyOptional({\n    description: \"Discord URL\",\n    example: \"https://discord.gg/opensauced\",\n  })\n  readonly discord_url?: string;\n\n  @ApiPropertyOptional({\n    description: \"Unread User Notification Count\",\n    example: 5,\n    type: \"integer\",\n  })\n  readonly notification_count?: number;\n\n  @ApiPropertyOptional({\n    description: \"Unread Insight Pagees Count\",\n    example: 2,\n    type: \"integer\",\n  })\n  readonly insights_count?: number;\n\n  @ApiPropertyOptional({\n    description: \"Coupon Code\",\n    example: \"saucy\",\n  })\n  readonly coupon_code?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SupabaseGuard.html":{"url":"injectables/SupabaseGuard.html","title":"injectable - SupabaseGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SupabaseGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/supabase.guard.ts\n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { AuthGuard } from \"@nestjs/passport\";\n\n@Injectable()\nexport class SupabaseGuard extends AuthGuard(\"supabase\") {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SupabaseStrategy.html":{"url":"injectables/SupabaseStrategy.html","title":"injectable - SupabaseStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SupabaseStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/supabase.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                authenticate\n                            \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Public\n                        constructor()\n                    \n                \n                        \n                            \n                                Defined in src/auth/supabase.strategy.ts:7\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        authenticate\n                        \n                    \n                \n            \n            \n                \nauthenticate(req: never)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/supabase.strategy.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            never\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(user: SupabaseAuthUser)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/supabase.strategy.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                SupabaseAuthUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { PassportStrategy } from \"@nestjs/passport\";\nimport { ExtractJwt } from \"passport-jwt\";\nimport { SupabaseAuthStrategy, SupabaseAuthUser } from \"nestjs-supabase-auth\";\n\n@Injectable()\nexport class SupabaseStrategy extends PassportStrategy(SupabaseAuthStrategy, \"supabase\") {\n  public constructor() {\n    super({\n      supabaseUrl: process.env.SUPABASE_URL,\n      supabaseKey: process.env.SUPABASE_API_KEY,\n      supabaseOptions: {},\n      supabaseJwtSecret: process.env.SUPABASE_JWT_SECRET,\n      extractor: ExtractJwt.fromAuthHeaderAsBearerToken(),\n    });\n  }\n\n  async validate(user: SupabaseAuthUser) {\n    return super.validate(user);\n  }\n\n  authenticate(req: never) {\n    super.authenticate(req);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/TierModule.html":{"url":"modules/TierModule.html","title":"module - TierModule","body":"\n                   \n\n\n\n\n    Modules\n    TierModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_TierModule\n\n\n\ncluster_TierModule_providers\n\n\n\ncluster_TierModule_exports\n\n\n\n\nTierService \n\nTierService \n\n\n\nTierModule\n\nTierModule\n\nTierService  -->\n\nTierModule->TierService \n\n\n\n\n\nTierService\n\nTierService\n\nTierModule -->\n\nTierService->TierModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/tier/tier.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            TierService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            TierService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { TierService } from \"./tier.service\";\n\n@Module({\n  providers: [TierService],\n  exports: [TierService],\n})\nexport class TierModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TierService.html":{"url":"injectables/TierService.html","title":"injectable - TierService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TierService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tier/tier.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                checkAddOrg\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/tier/tier.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        checkAddOrg\n                        \n                    \n                \n            \n            \n                \n                    \n                    checkAddOrg(userId: number, userDetails: literal type)\n                \n            \n\n\n            \n                \n                    Defined in src/tier/tier.service.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userDetails\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(TierService.name)\n                    \n                \n                    \n                        \n                                Defined in src/tier/tier.service.ts:7\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Logger } from \"@nestjs/common\";\nimport { ConfigService } from \"@nestjs/config\";\nimport { Features, lookupOrg, subscribe } from \"tier\";\n\n@Injectable()\nexport class TierService {\n  private logger = new Logger(TierService.name);\n\n  constructor(private configService: ConfigService) {}\n\n  async checkAddOrg(userId: number, userDetails: { email: string; name: string; login: string }) {\n    try {\n      // check to see if the user is registered\n      await lookupOrg(`org:${userId}`);\n    } catch (e) {\n      const { email, name, login } = userDetails;\n\n      // use free account plan\n      const plan: Features = this.configService.get(\"tier.freePlan\")! as Features;\n\n      try {\n        // register the user with a free account\n        await subscribe(`org:${userId}`, plan, {\n          info: {\n            email,\n            name,\n            description: `OpenSauced Free Account`,\n            phone: \"\",\n            metadata: {\n              login,\n            },\n          },\n        });\n      } catch (e: unknown) {\n        if (e instanceof Error) {\n          this.logger.error(`Unable to register account for ${login}`);\n        }\n      }\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/TimescaleModule.html":{"url":"modules/TimescaleModule.html","title":"module - TimescaleModule","body":"\n                   \n\n\n\n\n    Modules\n    TimescaleModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_TimescaleModule\n\n\n\ncluster_TimescaleModule_exports\n\n\n\ncluster_TimescaleModule_providers\n\n\n\n\nPullRequestGithubEventsService \n\nPullRequestGithubEventsService \n\n\n\nTimescaleModule\n\nTimescaleModule\n\nPullRequestGithubEventsService  -->\n\nTimescaleModule->PullRequestGithubEventsService \n\n\n\n\n\nPullRequestGithubEventsService\n\nPullRequestGithubEventsService\n\nTimescaleModule -->\n\nPullRequestGithubEventsService->TimescaleModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/timescale/timescale.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PullRequestGithubEventsService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            PullRequestGithubEventsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\nimport { DbPullRequestGitHubEvents } from \"./entities/pull_request_github_event\";\nimport { PullRequestGithubEventsService } from \"./pull_request_github_events.service\";\n\n@Module({\n  imports: [TypeOrmModule.forFeature([DbPullRequestGitHubEvents], \"TimescaleConnection\")],\n  providers: [PullRequestGithubEventsService],\n  exports: [PullRequestGithubEventsService],\n})\nexport class TimescaleModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TopProjectsDto.html":{"url":"classes/TopProjectsDto.html","title":"class - TopProjectsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TopProjectsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user-lists/dtos/top-projects.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                    Optional\n                                range\n                            \n                            \n                                repo_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        range\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 30\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Range in days', default: 30, type: 'integer'})@Type(undefined)@IsIn(['7', '30', '90'])@IsInt()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-lists/dtos/top-projects.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        repo_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Repo ID', type: 'integer', example: 234343})@Type(undefined)@IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-lists/dtos/top-projects.dto.ts:24\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from \"@nestjs/swagger\";\nimport { Type } from \"class-transformer\";\nimport { IsIn, IsInt, IsNumber, IsOptional } from \"class-validator\";\n\nexport class TopProjectsDto {\n  @ApiPropertyOptional({\n    description: \"Range in days\",\n    default: 30,\n    type: \"integer\",\n  })\n  @Type(() => Number)\n  @IsIn([7, 30, 90])\n  @IsInt()\n  @IsOptional()\n  readonly range?: number = 30;\n\n  @ApiProperty({\n    description: \"Repo ID\",\n    type: \"integer\",\n    example: 234343,\n  })\n  @Type(() => Number)\n  @IsNumber()\n  repo_id: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TopUsersDto.html":{"url":"classes/TopUsersDto.html","title":"class - TopUsersDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TopUsersDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dtos/top-users.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                    Optional\n                                limit\n                            \n                            \n                                    Readonly\n                                    Optional\n                                page\n                            \n                            \n                                    Readonly\n                                    Optional\n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    skip\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 50\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, maximum: 1000, default: 10, type: 'integer'})@Type(undefined)@IsInt()@Min(1)@Max(10000)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/top-users.dto.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, default: 1, type: 'integer'})@Type(undefined)@IsInt()@Min(1)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/top-users.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 0\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'User ID to filter followings from the list', type: 'integer'})@IsOptional()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/top-users.dto.ts:23\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        skip\n                    \n                \n\n                \n                    \n                        getskip()\n                    \n                \n                            \n                                \n                                    Defined in src/user/dtos/top-users.dto.ts:38\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { ApiPropertyOptional } from \"@nestjs/swagger\";\nimport { Type } from \"class-transformer\";\nimport { IsInt, Min, IsOptional, Max } from \"class-validator\";\n\nexport class TopUsersDto {\n  @ApiPropertyOptional({\n    minimum: 1,\n    default: 1,\n    type: \"integer\",\n  })\n  @Type(() => Number)\n  @IsInt()\n  @Min(1)\n  @IsOptional()\n  readonly page?: number = 1;\n\n  @ApiPropertyOptional({\n    description: \"User ID to filter followings from the list\",\n    type: \"integer\",\n  })\n  @IsOptional()\n  @Type(() => Number)\n  readonly userId?: number = 0;\n\n  @ApiPropertyOptional({\n    minimum: 1,\n    maximum: 1000,\n    default: 10,\n    type: \"integer\",\n  })\n  @Type(() => Number)\n  @IsInt()\n  @Min(1)\n  @Max(10000)\n  @IsOptional()\n  readonly limit?: number = 50;\n\n  get skip(): number {\n    return ((this.page ?? 1) - 1) * (this.limit ?? 50);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateEndorsementDto.html":{"url":"classes/UpdateEndorsementDto.html","title":"class - UpdateEndorsementDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateEndorsementDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/endorsement/dto/update-endorsement.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from \"@nestjs/swagger\";\nimport { CreateEndorsementDto } from \"./create-endorsement.dto\";\n\nexport class UpdateEndorsementDto extends PartialType(CreateEndorsementDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateInsightDto.html":{"url":"classes/UpdateInsightDto.html","title":"class - UpdateInsightDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateInsightDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/insight/dtos/update-insight.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        CreateInsightDto\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                is_public\n                            \n                            \n                                name\n                            \n                            \n                                repos\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        is_public\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Insight Page Visibility', type: Boolean, example: false})@IsBoolean()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         CreateInsightDto\n\n                            \n                        \n                    \n                        \n                                Defined in         CreateInsightDto:22\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Insight Page Name', type: String, example: 'My Team'})@IsString()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         CreateInsightDto\n\n                            \n                        \n                    \n                        \n                                Defined in         CreateInsightDto:14\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        repos\n                        \n                    \n                \n            \n                \n                    \n                        Type :         RepoInfo[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'An array of repository information objects', isArray: true, type: RepoInfo, example: undefined})@Type(undefined)@IsArray()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         CreateInsightDto\n\n                            \n                        \n                    \n                        \n                                Defined in         CreateInsightDto:32\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { CreateInsightDto } from \"./create-insight.dto\";\n\nexport class UpdateInsightDto extends CreateInsightDto {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateInsightMemberDto.html":{"url":"classes/UpdateInsightMemberDto.html","title":"class - UpdateInsightMemberDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateInsightMemberDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/insight/dtos/update-insight-member.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                access\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        access\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Insight Member Access', type: String, example: 'view'})@IsString()@IsIn(['view', 'edit', 'admin', 'pending'])\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/dtos/update-insight-member.dto.ts:12\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsString, IsIn } from \"class-validator\";\n\nexport class UpdateInsightMemberDto {\n  @ApiProperty({\n    description: \"Insight Member Access\",\n    type: String,\n    example: \"view\",\n  })\n  @IsString()\n  @IsIn([\"view\", \"edit\", \"admin\", \"pending\"])\n  access: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserCollaborationDto.html":{"url":"classes/UpdateUserCollaborationDto.html","title":"class - UpdateUserCollaborationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserCollaborationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dtos/update-user-collaboration.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                status\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Collaboration Request Status', type: String, example: 'accept'})@IsString()@IsIn(['accept', 'ignore'])\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/update-user-collaboration.dto.ts:12\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsIn, IsString } from \"class-validator\";\n\nexport class UpdateUserCollaborationDto {\n  @ApiProperty({\n    description: \"Collaboration Request Status\",\n    type: String,\n    example: \"accept\",\n  })\n  @IsString()\n  @IsIn([\"accept\", \"ignore\"])\n  status: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserDto.html":{"url":"classes/UpdateUserDto.html","title":"class - UpdateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dtos/update-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                bio\n                            \n                            \n                                    Public\n                                    Optional\n                                company\n                            \n                            \n                                    Readonly\n                                    Optional\n                                discord_url\n                            \n                            \n                                    Public\n                                    Optional\n                                display_local_time\n                            \n                            \n                                    Public\n                                email\n                            \n                            \n                                    Readonly\n                                    Optional\n                                github_sponsors_url\n                            \n                            \n                                    Readonly\n                                    Optional\n                                linkedin_url\n                            \n                            \n                                    Public\n                                    Optional\n                                location\n                            \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                    Optional\n                                timezone\n                            \n                            \n                                    Public\n                                    Optional\n                                twitter_username\n                            \n                            \n                                    Public\n                                    Optional\n                                url\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        bio\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'User Profile Bio', type: String, example: 'I make the pizza'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/update-user.dto.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        company\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'User Profile Company', type: String, example: 'OpenSauced'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/update-user.dto.ts:59\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        discord_url\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Discord URL', example: 'https://discord.gg/opensauced'})@IsUrl()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/update-user.dto.ts:110\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        display_local_time\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Display user local time in profile', type: Boolean, example: false})@IsBoolean()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/update-user.dto.ts:77\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'User Profile Email', type: String, example: 'hello@opensauced.pizza'})@IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/update-user.dto.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        github_sponsors_url\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'GitHub Sponsors URL', example: 'https://github.com/sponsors/open-sauced'})@IsUrl()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/update-user.dto.ts:102\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        linkedin_url\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'LinkedIn URL', example: 'https://www.linkedin.com/in/brianldouglas'})@IsUrl()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/update-user.dto.ts:94\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        location\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'User Profile Location', type: String, example: 'OpenSauced'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/update-user.dto.ts:68\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'User Profile Name', type: String, example: 'Pizza Maker'})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/update-user.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        timezone\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'User timezone in UTC', type: String, example: 'UTC-5'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/update-user.dto.ts:86\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        twitter_username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'User Profile Twitter Username', type: String, example: 'saucedopen'})@IsString()@Matches(/^(?!.*?admin)(?!.*?twitter)\\w{0,15}$/i, {message: 'Twitter username can only contain letters, numbers, and underscores. It also cannot contain reserved Twitter usernames (twitter or admin).'})@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/update-user.dto.ts:50\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        url\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'User Profile URL', type: String, example: 'https://opensauced.pizza'})@IsUrl()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/update-user.dto.ts:37\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from \"@nestjs/swagger\";\nimport { IsBoolean, IsEmail, IsOptional, IsString, IsUrl, Matches } from \"class-validator\";\n\nexport class UpdateUserDto {\n  @ApiProperty({\n    description: \"User Profile Name\",\n    type: String,\n    example: \"Pizza Maker\",\n  })\n  @IsString()\n  public name: string;\n\n  @ApiProperty({\n    description: \"User Profile Email\",\n    type: String,\n    example: \"hello@opensauced.pizza\",\n  })\n  @IsEmail()\n  public email: string;\n\n  @ApiPropertyOptional({\n    description: \"User Profile Bio\",\n    type: String,\n    example: \"I make the pizza\",\n  })\n  @IsString()\n  @IsOptional()\n  public bio?: string;\n\n  @ApiPropertyOptional({\n    description: \"User Profile URL\",\n    type: String,\n    example: \"https://opensauced.pizza\",\n  })\n  @IsUrl()\n  @IsOptional()\n  public url?: string;\n\n  @ApiPropertyOptional({\n    description: \"User Profile Twitter Username\",\n    type: String,\n    example: \"saucedopen\",\n  })\n  @IsString()\n  @Matches(/^(?!.*?admin)(?!.*?twitter)\\w{0,15}$/i, {\n    message:\n      \"Twitter username can only contain letters, numbers, and underscores. It also cannot contain reserved Twitter usernames (twitter or admin).\",\n  })\n  @IsOptional()\n  public twitter_username?: string;\n\n  @ApiPropertyOptional({\n    description: \"User Profile Company\",\n    type: String,\n    example: \"OpenSauced\",\n  })\n  @IsString()\n  @IsOptional()\n  public company?: string;\n\n  @ApiPropertyOptional({\n    description: \"User Profile Location\",\n    type: String,\n    example: \"OpenSauced\",\n  })\n  @IsString()\n  @IsOptional()\n  public location?: string;\n\n  @ApiPropertyOptional({\n    description: \"Display user local time in profile\",\n    type: Boolean,\n    example: false,\n  })\n  @IsBoolean()\n  @IsOptional()\n  public display_local_time?: boolean;\n\n  @ApiPropertyOptional({\n    description: \"User timezone in UTC\",\n    type: String,\n    example: \"UTC-5\",\n  })\n  @IsString()\n  @IsOptional()\n  public timezone?: string;\n\n  @ApiPropertyOptional({\n    description: \"LinkedIn URL\",\n    example: \"https://www.linkedin.com/in/brianldouglas\",\n  })\n  @IsUrl()\n  @IsOptional()\n  readonly linkedin_url?: string;\n\n  @ApiPropertyOptional({\n    description: \"GitHub Sponsors URL\",\n    example: \"https://github.com/sponsors/open-sauced\",\n  })\n  @IsUrl()\n  @IsOptional()\n  readonly github_sponsors_url?: string;\n\n  @ApiPropertyOptional({\n    description: \"Discord URL\",\n    example: \"https://discord.gg/opensauced\",\n  })\n  @IsUrl()\n  @IsOptional()\n  readonly discord_url?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserEmailPreferencesDto.html":{"url":"classes/UpdateUserEmailPreferencesDto.html","title":"class - UpdateUserEmailPreferencesDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserEmailPreferencesDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dtos/update-user-email-prefs.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                display_email\n                            \n                            \n                                    Public\n                                receive_collaboration\n                            \n                            \n                                    Public\n                                receive_product_updates\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        display_email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'User Display Public Email', type: Boolean, example: false})@IsBoolean()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/update-user-email-prefs.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        receive_collaboration\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'User Recieve Collaboration Requests', type: Boolean, example: false})@IsBoolean()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/update-user-email-prefs.dto.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        receive_product_updates\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'User Recieve Email Product Updates', type: Boolean, example: false})@IsBoolean()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/update-user-email-prefs.dto.ts:27\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsBoolean } from \"class-validator\";\n\nexport class UpdateUserEmailPreferencesDto {\n  @ApiProperty({\n    description: \"User Display Public Email\",\n    type: Boolean,\n    example: false,\n  })\n  @IsBoolean()\n  public display_email: boolean;\n\n  @ApiProperty({\n    description: \"User Recieve Collaboration Requests\",\n    type: Boolean,\n    example: false,\n  })\n  @IsBoolean()\n  public receive_collaboration: boolean;\n\n  @ApiProperty({\n    description: \"User Recieve Email Product Updates\",\n    type: Boolean,\n    example: false,\n  })\n  @IsBoolean()\n  public receive_product_updates: boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserProfileInterestsDto.html":{"url":"classes/UpdateUserProfileInterestsDto.html","title":"class - UpdateUserProfileInterestsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserProfileInterestsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dtos/update-user-interests.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                interests\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        interests\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'An array of interests', type: 'string', isArray: true, example: undefined})@IsArray()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/update-user-interests.dto.ts:12\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsArray } from \"class-validator\";\n\nexport class UpdateUserProfileInterestsDto {\n  @ApiProperty({\n    description: \"An array of interests\",\n    type: \"string\",\n    isArray: true,\n    example: [\"javascript\", \"react\"],\n  })\n  @IsArray()\n  public interests: string[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserCollaborationController.html":{"url":"controllers/UserCollaborationController.html","title":"controller - UserCollaborationController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserCollaborationController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user-collaboration.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                user/collaborations\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addUserCollaboration\n                            \n                            \n                                    Async\n                                findAllUserCollaborations\n                            \n                            \n                                    Async\n                                removeUserCollaborationById\n                            \n                            \n                                    Async\n                                updateUserCollaboration\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addUserCollaboration\n                        \n                    \n                \n            \n            \n                \n                    \n                    addUserCollaboration(createUserCollaborationDto: CreateUserCollaborationDto, user: SupabaseAuthUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/')@ApiOperation({operationId: 'addUserCollaboration', summary: 'Adds a new collaboration request for the user'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOkResponse({type: DbUserCollaboration})@ApiNotFoundResponse({description: 'Unable to add user collaboration'})@ApiBadRequestResponse({description: 'Invalid request'})@ApiConflictResponse({description: 'The requested user is not accepting collaboration requests'})@ApiBody({type: CreateUserCollaborationDto})\n                \n            \n\n            \n                \n                    Defined in src/user/user-collaboration.controller.ts:74\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createUserCollaborationDto\n                                    \n                                                CreateUserCollaborationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                SupabaseAuthUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllUserCollaborations\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllUserCollaborations(pageOptionsDto: PageOptionsDto, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/')@ApiOperation({operationId: 'findAllUserCollaborations', summary: 'Listing all collaborations for the authenticated user'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiPaginatedResponse(DbUserCollaboration)@ApiOkResponse({type: DbUserCollaboration})\n                \n            \n\n            \n                \n                    Defined in src/user/user-collaboration.controller.ts:55\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        removeUserCollaborationById\n                        \n                    \n                \n            \n            \n                \n                    \n                    removeUserCollaborationById(id: string, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')@ApiOperation({operationId: 'removeUserCollaborationById', summary: 'Removes the user collaboration request'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiNotFoundResponse({description: 'Unable to remove user collaboration'})@ApiBadRequestResponse({description: 'Invalid request'})\n                \n            \n\n            \n                \n                    Defined in src/user/user-collaboration.controller.ts:137\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateUserCollaboration\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateUserCollaboration(id: string, userId: number, updateUserCollaborationDto: UpdateUserCollaborationDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')@ApiOperation({operationId: 'updateUserCollaboration', summary: 'Updates a user collaboration'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOkResponse({type: DbUserCollaboration})@ApiNotFoundResponse({description: 'Unable to find user collaboration'})@ApiBadRequestResponse({description: 'Invalid request'})@ApiBody({type: UpdateUserCollaborationDto})\n                \n            \n\n            \n                \n                    Defined in src/user/user-collaboration.controller.ts:110\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateUserCollaborationDto\n                                    \n                                                UpdateUserCollaborationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  ConflictException,\n  Controller,\n  Delete,\n  Get,\n  Param,\n  Patch,\n  Post,\n  Query,\n  UnauthorizedException,\n  UseGuards,\n} from \"@nestjs/common\";\nimport {\n  ApiOperation,\n  ApiOkResponse,\n  ApiNotFoundResponse,\n  ApiBearerAuth,\n  ApiTags,\n  ApiBadRequestResponse,\n  ApiBody,\n  ApiConflictResponse,\n} from \"@nestjs/swagger\";\nimport { SupabaseAuthUser } from \"nestjs-supabase-auth\";\n\nimport { SupabaseGuard } from \"../auth/supabase.guard\";\nimport { User, UserId } from \"../auth/supabase.user.decorator\";\nimport { ApiPaginatedResponse } from \"../common/decorators/api-paginated-response.decorator\";\nimport { PageDto } from \"../common/dtos/page.dto\";\n\nimport { PageOptionsDto } from \"../common/dtos/page-options.dto\";\nimport { UserService } from \"./services/user.service\";\nimport { UserCollaborationService } from \"./user-collaboration.service\";\nimport { CreateUserCollaborationDto } from \"./dtos/create-user-collaboration.dto\";\nimport { DbUserCollaboration } from \"./entities/user-collaboration.entity\";\nimport { UpdateUserCollaborationDto } from \"./dtos/update-user-collaboration.dto\";\n\n@Controller(\"user/collaborations\")\n@ApiTags(\"User Collaborations service\")\nexport class UserCollaborationController {\n  constructor(\n    private readonly userCollaborationService: UserCollaborationService,\n    private readonly userService: UserService\n  ) {}\n\n  @Get(\"/\")\n  @ApiOperation({\n    operationId: \"findAllUserCollaborations\",\n    summary: \"Listing all collaborations for the authenticated user\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiPaginatedResponse(DbUserCollaboration)\n  @ApiOkResponse({ type: DbUserCollaboration })\n  async findAllUserCollaborations(\n    @Query() pageOptionsDto: PageOptionsDto,\n    @UserId() userId: number\n  ): Promise> {\n    return this.userCollaborationService.findAllUserCollaborations(pageOptionsDto, userId);\n  }\n\n  @Post(\"/\")\n  @ApiOperation({\n    operationId: \"addUserCollaboration\",\n    summary: \"Adds a new collaboration request for the user\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOkResponse({ type: DbUserCollaboration })\n  @ApiNotFoundResponse({ description: \"Unable to add user collaboration\" })\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  @ApiConflictResponse({ description: \"The requested user is not accepting collaboration requests\" })\n  @ApiBody({ type: CreateUserCollaborationDto })\n  async addUserCollaboration(\n    @Body() createUserCollaborationDto: CreateUserCollaborationDto,\n    @User() user: SupabaseAuthUser\n  ): Promise {\n    const recipient = await this.userService.findOneByUsername(createUserCollaborationDto.username);\n    const requester = await this.userService.findOneById(user.user_metadata.sub as number);\n\n    if (requester.role  {\n    const collaboration = await this.userCollaborationService.findOneById(id);\n\n    if (collaboration.user_id !== userId) {\n      throw new UnauthorizedException();\n    }\n\n    const updatedUserCollaboration: Partial = { status: updateUserCollaborationDto.status };\n\n    await this.userCollaborationService.updateUserCollaboration(id, updatedUserCollaboration);\n\n    return this.userCollaborationService.findOneById(id);\n  }\n\n  @Delete(\":id\")\n  @ApiOperation({\n    operationId: \"removeUserCollaborationById\",\n    summary: \"Removes the user collaboration request\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiNotFoundResponse({ description: \"Unable to remove user collaboration\" })\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  async removeUserCollaborationById(@Param(\"id\") id: string, @UserId() userId: number): Promise {\n    const userCollaboration = await this.userCollaborationService.findOneById(id);\n\n    if (userCollaboration.user_id !== userId) {\n      throw new UnauthorizedException();\n    }\n\n    await this.userCollaborationService.removeUserCollaboration(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserCollaborationService.html":{"url":"injectables/UserCollaborationService.html","title":"injectable - UserCollaborationService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserCollaborationService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user-collaboration.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addUserCollaboration\n                            \n                            \n                                baseQueryBuilder\n                            \n                            \n                                    Async\n                                findAllUserCollaborations\n                            \n                            \n                                    Async\n                                findOneById\n                            \n                            \n                                    Async\n                                removeUserCollaboration\n                            \n                            \n                                    Async\n                                updateUserCollaboration\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userCollaborationRepository: Repository, pagerService: PagerService)\n                    \n                \n                        \n                            \n                                Defined in src/user/user-collaboration.service.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userCollaborationRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        pagerService\n                                                  \n                                                        \n                                                                        PagerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addUserCollaboration\n                        \n                    \n                \n            \n            \n                \n                    \n                    addUserCollaboration(userCollaboration: Partial)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-collaboration.service.ts:39\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userCollaboration\n                                    \n                                                Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        baseQueryBuilder\n                        \n                    \n                \n            \n            \n                \nbaseQueryBuilder()\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-collaboration.service.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         SelectQueryBuilder\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllUserCollaborations\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllUserCollaborations(pageOptionsDto: PageOptionsDto, userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-collaboration.service.ts:51\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneById(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-collaboration.service.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        removeUserCollaboration\n                        \n                    \n                \n            \n            \n                \n                    \n                    removeUserCollaboration(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-collaboration.service.ts:47\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateUserCollaboration\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateUserCollaboration(id: string, userCollaboration: Partial)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-collaboration.service.ts:43\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userCollaboration\n                                    \n                                                Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from \"@nestjs/common\";\nimport { Repository, SelectQueryBuilder } from \"typeorm\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\n\nimport { PageDto } from \"../common/dtos/page.dto\";\n\nimport { PageOptionsDto } from \"../common/dtos/page-options.dto\";\nimport { PagerService } from \"../common/services/pager.service\";\nimport { DbUserCollaboration } from \"./entities/user-collaboration.entity\";\n\n@Injectable()\nexport class UserCollaborationService {\n  constructor(\n    @InjectRepository(DbUserCollaboration, \"ApiConnection\")\n    private userCollaborationRepository: Repository,\n    private pagerService: PagerService\n  ) {}\n\n  baseQueryBuilder(): SelectQueryBuilder {\n    const builder = this.userCollaborationRepository.createQueryBuilder(\"user_collaborations\");\n\n    return builder;\n  }\n\n  async findOneById(id: string): Promise {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder.where(\"user_collaborations.id = :id\", { id });\n\n    const item: DbUserCollaboration | null = await queryBuilder.getOne();\n\n    if (!item) {\n      throw new NotFoundException();\n    }\n\n    return item;\n  }\n\n  async addUserCollaboration(userCollaboration: Partial) {\n    return this.userCollaborationRepository.save(userCollaboration);\n  }\n\n  async updateUserCollaboration(id: string, userCollaboration: Partial) {\n    return this.userCollaborationRepository.update(id, userCollaboration);\n  }\n\n  async removeUserCollaboration(id: string) {\n    return this.userCollaborationRepository.softDelete(id);\n  }\n\n  async findAllUserCollaborations(\n    pageOptionsDto: PageOptionsDto,\n    userId: number\n  ): Promise> {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .innerJoinAndSelect(\"user_collaborations.user\", \"user\")\n      .innerJoinAndSelect(\"user_collaborations.request_user\", \"request_user\")\n      .where(\"user_collaborations.user_id = :userId\", { userId })\n      .orderBy(\"user_collaborations.updated_at\", \"DESC\");\n\n    return this.pagerService.applyPagination({\n      pageOptionsDto,\n      queryBuilder,\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserController.html":{"url":"controllers/UserController.html","title":"controller - UserController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                findAllHighlightsByUsername\n                            \n                            \n                                    Async\n                                findAllOrgsByUsername\n                            \n                            \n                                    Async\n                                findAllTopReposByUsername\n                            \n                            \n                                    Async\n                                findContributorPullRequestGitHubEvents\n                            \n                            \n                                    Async\n                                findContributorPullRequests\n                            \n                            \n                                    Async\n                                findOneUserById\n                            \n                            \n                                    Async\n                                getTopUsers\n                            \n                            \n                                    Async\n                                getUsersByFilter\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllHighlightsByUsername\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllHighlightsByUsername(username: string, pageOptionsDto: PageOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:username/highlights')@ApiOperation({operationId: 'findAllHighlightsByUsername', summary: 'Listing all Highlights for a user and paginate them'})@ApiPaginatedResponse(DbUserHighlight)@ApiOkResponse({type: DbUserHighlight})@ApiNotFoundResponse({description: 'Highlights not found'})\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:87\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllOrgsByUsername\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllOrgsByUsername(username: string, pageOptionsDto: PageOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:username/organizations')@ApiOperation({operationId: 'findAllOrgsByUsername', summary: 'Listing public orgs for a user and paginate them'})@ApiPaginatedResponse(DbUserOrganization)@ApiOkResponse({type: DbUserOrganization})@ApiNotFoundResponse({description: 'Top repos not found'})\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:121\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllTopReposByUsername\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllTopReposByUsername(username: string, pageOptionsDto: PageOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:username/top-repos')@ApiOperation({operationId: 'findAllTopReposByUsername', summary: 'Listing all Top Repos for a user and paginate them'})@ApiPaginatedResponse(DbRepo)@ApiOkResponse({type: DbRepo})@ApiNotFoundResponse({description: 'Top repos not found'})\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:104\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findContributorPullRequestGitHubEvents\n                        \n                    \n                \n            \n            \n                \n                    \n                    findContributorPullRequestGitHubEvents(username: string, pageOptionsDto: PageOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Version('2')@Get('/:username/prs')@ApiOperation({operationId: 'findContributorPullRequestGitHubEvents', summary: 'Finds pull requests by :username'})@ApiPaginatedResponse(DbPullRequestGitHubEvents)@ApiOkResponse({type: DbPullRequestGitHubEvents})@ApiNotFoundResponse({description: 'User not found'})\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:72\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findContributorPullRequests\n                        \n                    \n                \n            \n            \n                \n                    \n                    findContributorPullRequests(username: string, pageOptionsDto: ContributorPullRequestsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:username/prs')@ApiOperation({operationId: 'findContributorPullRequests', summary: 'Finds pull requests by :username'})@ApiPaginatedResponse(DbPullRequest)@ApiOkResponse({type: DbPullRequest})@ApiNotFoundResponse({description: 'User not found'})\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:56\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                ContributorPullRequestsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneUserById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneUserById(username: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:username')@ApiOperation({operationId: 'findOneUserByUserame', summary: 'Finds a user by :username'})@ApiOkResponse({type: DbUser})@ApiNotFoundResponse({description: 'User not found'})\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:44\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getTopUsers\n                        \n                    \n                \n            \n            \n                \n                    \n                    getTopUsers(pageOptionsDto: TopUsersDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/top')@ApiOperation({operationId: 'getTop10Highlights', summary: 'List top users'})@ApiOkResponse({type: DbTopUser})\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:136\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                TopUsersDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getUsersByFilter\n                        \n                    \n                \n            \n            \n                \n                    \n                    getUsersByFilter(pageOptionsDto: FilteredUsersDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/search')@ApiOperation({operationId: 'getUsersByFilter', summary: 'Search users'})@ApiOkResponse({type: DbFilteredUser})@ApiBadRequestResponse({description: 'Username is required'})\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:147\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                FilteredUsersDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Param, Query, Version } from \"@nestjs/common\";\nimport { ApiBadRequestResponse, ApiNotFoundResponse, ApiOkResponse, ApiOperation, ApiTags } from \"@nestjs/swagger\";\n\nimport { PageOptionsDto } from \"../common/dtos/page-options.dto\";\nimport { PageDto } from \"../common/dtos/page.dto\";\nimport { ApiPaginatedResponse } from \"../common/decorators/api-paginated-response.decorator\";\nimport { PullRequestService } from \"../pull-requests/pull-request.service\";\nimport { DbPullRequest } from \"../pull-requests/entities/pull-request.entity\";\nimport { RepoService } from \"../repo/repo.service\";\nimport { DbRepo } from \"../repo/entities/repo.entity\";\nimport { DbPullRequestGitHubEvents } from \"../timescale/entities/pull_request_github_event\";\nimport { PullRequestGithubEventsService } from \"../timescale/pull_request_github_events.service\";\nimport { DbUserHighlight } from \"./entities/user-highlight.entity\";\nimport { UserHighlightsService } from \"./user-highlights.service\";\nimport { DbUser } from \"./user.entity\";\nimport { UserService } from \"./services/user.service\";\nimport { DbTopUser } from \"./entities/top-users.entity\";\nimport { TopUsersDto } from \"./dtos/top-users.dto\";\nimport { DbFilteredUser } from \"./entities/filtered-users.entity\";\nimport { FilteredUsersDto } from \"./dtos/filtered-users.dto\";\nimport { DbUserOrganization } from \"./entities/user-organization.entity\";\nimport { UserOrganizationService } from \"./user-organization.service\";\nimport { ContributorPullRequestsDto } from \"./dtos/contributor-prs.dto\";\n\n@Controller(\"users\")\n@ApiTags(\"User service\")\nexport class UserController {\n  constructor(\n    private userService: UserService,\n    private pullRequestService: PullRequestService,\n    private pullRequestGitHubEventsService: PullRequestGithubEventsService,\n    private userHighlightsService: UserHighlightsService,\n    private repoService: RepoService,\n    private userOrganizationService: UserOrganizationService\n  ) {}\n\n  @Get(\"/:username\")\n  @ApiOperation({\n    operationId: \"findOneUserByUserame\",\n    summary: \"Finds a user by :username\",\n  })\n  @ApiOkResponse({ type: DbUser })\n  @ApiNotFoundResponse({ description: \"User not found\" })\n  async findOneUserById(@Param(\"username\") username: string): Promise {\n    return this.userService.findOneByUsername(username);\n  }\n\n  @Get(\"/:username/prs\")\n  @ApiOperation({\n    operationId: \"findContributorPullRequests\",\n    summary: \"Finds pull requests by :username\",\n  })\n  @ApiPaginatedResponse(DbPullRequest)\n  @ApiOkResponse({ type: DbPullRequest })\n  @ApiNotFoundResponse({ description: \"User not found\" })\n  async findContributorPullRequests(\n    @Param(\"username\") username: string,\n    @Query() pageOptionsDto: ContributorPullRequestsDto\n  ): Promise> {\n    return this.pullRequestService.findAllByContributor(username, pageOptionsDto);\n  }\n\n  @Version(\"2\")\n  @Get(\"/:username/prs\")\n  @ApiOperation({\n    operationId: \"findContributorPullRequestGitHubEvents\",\n    summary: \"Finds pull requests by :username\",\n  })\n  @ApiPaginatedResponse(DbPullRequestGitHubEvents)\n  @ApiOkResponse({ type: DbPullRequestGitHubEvents })\n  @ApiNotFoundResponse({ description: \"User not found\" })\n  async findContributorPullRequestGitHubEvents(\n    @Param(\"username\") username: string,\n    @Query() pageOptionsDto: PageOptionsDto\n  ): Promise> {\n    return this.pullRequestGitHubEventsService.findAllByPrAuthor(username, pageOptionsDto);\n  }\n\n  @Get(\"/:username/highlights\")\n  @ApiOperation({\n    operationId: \"findAllHighlightsByUsername\",\n    summary: \"Listing all Highlights for a user and paginate them\",\n  })\n  @ApiPaginatedResponse(DbUserHighlight)\n  @ApiOkResponse({ type: DbUserHighlight })\n  @ApiNotFoundResponse({ description: \"Highlights not found\" })\n  async findAllHighlightsByUsername(\n    @Param(\"username\") username: string,\n    @Query() pageOptionsDto: PageOptionsDto\n  ): Promise> {\n    const user = await this.userService.findOneByUsername(username);\n\n    return this.userHighlightsService.findAllByUserId(pageOptionsDto, user.id);\n  }\n\n  @Get(\"/:username/top-repos\")\n  @ApiOperation({\n    operationId: \"findAllTopReposByUsername\",\n    summary: \"Listing all Top Repos for a user and paginate them\",\n  })\n  @ApiPaginatedResponse(DbRepo)\n  @ApiOkResponse({ type: DbRepo })\n  @ApiNotFoundResponse({ description: \"Top repos not found\" })\n  async findAllTopReposByUsername(\n    @Param(\"username\") username: string,\n    @Query() pageOptionsDto: PageOptionsDto\n  ): Promise> {\n    const user = await this.userService.findOneByUsername(username);\n\n    return this.repoService.findAll(pageOptionsDto, user.id, [\"TopRepos\"]);\n  }\n\n  @Get(\"/:username/organizations\")\n  @ApiOperation({\n    operationId: \"findAllOrgsByUsername\",\n    summary: \"Listing public orgs for a user and paginate them\",\n  })\n  @ApiPaginatedResponse(DbUserOrganization)\n  @ApiOkResponse({ type: DbUserOrganization })\n  @ApiNotFoundResponse({ description: \"Top repos not found\" })\n  async findAllOrgsByUsername(\n    @Param(\"username\") username: string,\n    @Query() pageOptionsDto: PageOptionsDto\n  ): Promise> {\n    const user = await this.userService.findOneByUsername(username);\n\n    return this.userOrganizationService.findAllByUserId(user.id, pageOptionsDto);\n  }\n\n  @Get(\"/top\")\n  @ApiOperation({\n    operationId: \"getTop10Highlights\",\n    summary: \"List top users\",\n  })\n  @ApiOkResponse({ type: DbTopUser })\n  async getTopUsers(@Query() pageOptionsDto: TopUsersDto): Promise> {\n    return this.userService.findTopUsers(pageOptionsDto);\n  }\n\n  @Get(\"/search\")\n  @ApiOperation({\n    operationId: \"getUsersByFilter\",\n    summary: \"Search users\",\n  })\n  @ApiOkResponse({ type: DbFilteredUser })\n  @ApiBadRequestResponse({ description: \"Username is required\" })\n  async getUsersByFilter(@Query() pageOptionsDto: FilteredUsersDto): Promise> {\n    return this.userService.findUsersByFilter(pageOptionsDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserEndorsementController.html":{"url":"controllers/UserEndorsementController.html","title":"controller - UserEndorsementController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserEndorsementController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user-endorsement.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                user/endorsements\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                findAllUserCreatedEndorsements\n                            \n                            \n                                    Async\n                                findAllUserReceivedEndorsements\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllUserCreatedEndorsements\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllUserCreatedEndorsements(userId: number, pageOptionsDto: PageOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/created')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'findAllUserCreatedEndorsements', summary: 'Finds all endorsements created by the authenticated user and paginates them'})@ApiPaginatedResponse(DbEndorsement)@ApiOkResponse({type: DbEndorsement})\n                \n            \n\n            \n                \n                    Defined in src/user/user-endorsement.controller.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllUserReceivedEndorsements\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllUserReceivedEndorsements(userId: number, pageOptionsDto: PageOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/received')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'findAllUserReceivedEndorsements', summary: 'Finds all endorsements received by the authenticated user and paginates them'})@ApiPaginatedResponse(DbEndorsement)@ApiOkResponse({type: DbEndorsement})\n                \n            \n\n            \n                \n                    Defined in src/user/user-endorsement.controller.ts:38\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Query, UseGuards } from \"@nestjs/common\";\nimport { ApiBearerAuth, ApiOkResponse, ApiOperation, ApiTags } from \"@nestjs/swagger\";\nimport { SupabaseGuard } from \"../auth/supabase.guard\";\nimport { UserId } from \"../auth/supabase.user.decorator\";\nimport { ApiPaginatedResponse } from \"../common/decorators/api-paginated-response.decorator\";\n\nimport { PageOptionsDto } from \"../common/dtos/page-options.dto\";\nimport { EndorsementService } from \"../endorsement/endorsement.service\";\nimport { DbEndorsement } from \"../endorsement/entities/endorsement.entity\";\n\n@Controller(\"user/endorsements\")\n@ApiTags(\"Endorsements service\")\nexport class UserEndorsementController {\n  constructor(private readonly endorsementService: EndorsementService) {}\n\n  @Get(\"/created\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"findAllUserCreatedEndorsements\",\n    summary: \"Finds all endorsements created by the authenticated user and paginates them\",\n  })\n  @ApiPaginatedResponse(DbEndorsement)\n  @ApiOkResponse({ type: DbEndorsement })\n  async findAllUserCreatedEndorsements(@UserId() userId: number, @Query() pageOptionsDto: PageOptionsDto) {\n    return this.endorsementService.findAllByCreatorUserId(userId, pageOptionsDto);\n  }\n\n  @Get(\"/received\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"findAllUserReceivedEndorsements\",\n    summary: \"Finds all endorsements received by the authenticated user and paginates them\",\n  })\n  @ApiPaginatedResponse(DbEndorsement)\n  @ApiOkResponse({ type: DbEndorsement })\n  async findAllUserReceivedEndorsements(@UserId() userId: number, @Query() pageOptionsDto: PageOptionsDto) {\n    return this.endorsementService.findAllByRecipientUserId(userId, pageOptionsDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserFollowService.html":{"url":"injectables/UserFollowService.html","title":"injectable - UserFollowService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserFollowService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user-follow.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addUserFollowerByUserId\n                            \n                            \n                                baseQueryBuilder\n                            \n                            \n                                    Async\n                                findAllFollowers\n                            \n                            \n                                    Async\n                                findAllFollowingList\n                            \n                            \n                                    Async\n                                findUserFollowerById\n                            \n                            \n                                    Async\n                                removeUserFollowerById\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userFollowRepository: Repository, userService: UserService, userNotificationService: UserNotificationService)\n                    \n                \n                        \n                            \n                                Defined in src/user/user-follow.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userFollowRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userNotificationService\n                                                  \n                                                        \n                                                                        UserNotificationService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addUserFollowerByUserId\n                        \n                    \n                \n            \n            \n                \n                    \n                    addUserFollowerByUserId(userId: number, followedUserId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-follow.service.ts:63\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    followedUserId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        baseQueryBuilder\n                        \n                    \n                \n            \n            \n                \nbaseQueryBuilder()\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-follow.service.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllFollowers\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllFollowers(userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-follow.service.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllFollowingList\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllFollowingList(userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-follow.service.ts:37\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findUserFollowerById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findUserFollowerById(userId: number, followerUserId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-follow.service.ts:47\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    followerUserId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        removeUserFollowerById\n                        \n                    \n                \n            \n            \n                \n                    \n                    removeUserFollowerById(userId: number, followerUserId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-follow.service.ts:92\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    followerUserId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ConflictException, Injectable, NotFoundException } from \"@nestjs/common\";\nimport { Repository } from \"typeorm\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\n\nimport { DbUserToUserFollows } from \"./entities/user-follows.entity\";\nimport { UserNotificationService } from \"./user-notifcation.service\";\nimport { UserService } from \"./services/user.service\";\n\n@Injectable()\nexport class UserFollowService {\n  constructor(\n    @InjectRepository(DbUserToUserFollows, \"ApiConnection\")\n    private userFollowRepository: Repository,\n    private userService: UserService,\n    private userNotificationService: UserNotificationService\n  ) {}\n\n  baseQueryBuilder() {\n    const builder = this.userFollowRepository.createQueryBuilder(\"user_follows\").withDeleted();\n\n    return builder;\n  }\n\n  async findAllFollowers(userId: number) {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .innerJoin(\"users\", \"users\", \"user_follows.user_id=users.id\")\n      .where(\"user_follows.following_user_id = :userId\", { userId })\n      .andWhere(\"user_follows.deleted_at IS NULL\");\n\n    const entities = await queryBuilder.getMany();\n\n    return entities;\n  }\n\n  async findAllFollowingList(userId: number): Promise {\n    const queryBuilder = this.baseQueryBuilder();\n\n    return queryBuilder\n      .innerJoin(\"users\", \"users\", \"user_follows.user_id=users.id\")\n      .where(\"user_follows.user_id = :userId\", { userId })\n      .andWhere(\"user_follows.deleted_at IS NULL\")\n      .getMany();\n  }\n\n  async findUserFollowerById(userId: number, followerUserId: number): Promise {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .where(\"user_follows.user_id = :userId\", { userId })\n      .andWhere(\"user_follows.following_user_id = :followerUserId\", { followerUserId })\n      .andWhere(\"user_follows.deleted_at IS NULL\");\n    const followExists = await queryBuilder.getOne();\n\n    if (!followExists) {\n      throw new NotFoundException(\"You are not following this user\");\n    }\n\n    return followExists;\n  }\n\n  async addUserFollowerByUserId(userId: number, followedUserId: number): Promise {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .addSelect(\"user_follows.deleted_at\", \"user_follows_deleted_at\")\n      .where(\"user_follows.user_id = :userId\", { userId })\n      .andWhere(\"user_follows.following_user_id = :followedUserId\", { followedUserId });\n\n    const followExists = await queryBuilder.getOne();\n\n    if (followExists) {\n      if (!followExists.deleted_at) {\n        throw new ConflictException(`You have already followed this user: ${followedUserId}`);\n      }\n\n      await this.userFollowRepository.restore(followExists.id);\n      await this.userNotificationService.addUserFollowerNotification(userId, followedUserId);\n\n      return followExists;\n    }\n\n    await this.userNotificationService.addUserFollowerNotification(userId, followedUserId);\n\n    return this.userFollowRepository.save({\n      user_id: userId,\n      following_user_id: followedUserId,\n    });\n  }\n\n  async removeUserFollowerById(userId: number, followerUserId: number): Promise {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .addSelect(\"user_follows.deleted_at\", \"user_follows_deleted_at\")\n      .where(\"user_follows.user_id = :userId\", { userId })\n      .andWhere(\"user_follows.following_user_id = :followerUserId\", { followerUserId });\n\n    const followExists = await queryBuilder.getOne();\n\n    if (!followExists) {\n      throw new NotFoundException(\"You have not followed this user\");\n    }\n\n    if (followExists.deleted_at) {\n      throw new ConflictException(\"You are not following this user\");\n    }\n\n    await this.userFollowRepository.softDelete(followExists.id);\n\n    return queryBuilder.getOneOrFail();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserFollowingController.html":{"url":"controllers/UserFollowingController.html","title":"controller - UserFollowingController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserFollowingController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user-following.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getFollowingListByUsername\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getFollowingListByUsername\n                        \n                    \n                \n            \n            \n                \n                    \n                    getFollowingListByUsername(username: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:username/following')@ApiOperation({operationId: 'getFollowingListByUsername', summary: 'Get list of following users by the provided username'})@ApiNotFoundResponse({description: 'User not found'})\n                \n            \n\n            \n                \n                    Defined in src/user/user-following.controller.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Param } from \"@nestjs/common\";\nimport { ApiNotFoundResponse, ApiOperation, ApiTags } from \"@nestjs/swagger\";\nimport { UserService } from \"./services/user.service\";\nimport { DbUser } from \"./user.entity\";\nimport { UserFollowService } from \"./user-follow.service\";\nimport { DbUserToUserFollows } from \"./entities/user-follows.entity\";\n\n@Controller(\"users\")\n@ApiTags(\"User service\")\nexport class UserFollowingController {\n  constructor(private readonly userService: UserService, private readonly userFollowService: UserFollowService) {}\n\n  @Get(\"/:username/following\")\n  @ApiOperation({\n    operationId: \"getFollowingListByUsername\",\n    summary: \"Get list of following users by the provided username\",\n  })\n  @ApiNotFoundResponse({ description: \"User not found\" })\n  async getFollowingListByUsername(@Param(\"username\") username: string): Promise {\n    const user: DbUser = await this.userService.findOneByUsername(username);\n\n    return this.userFollowService.findAllFollowingList(user.id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserFollowsController.html":{"url":"controllers/UserFollowsController.html","title":"controller - UserFollowsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserFollowsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user-follow.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                followUserByUsername\n                            \n                            \n                                    Async\n                                followUsersByUsernames\n                            \n                            \n                                    Async\n                                getFollowStatusByUsername\n                            \n                            \n                                    Async\n                                unfollowUserByUserId\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        followUserByUsername\n                        \n                    \n                \n            \n            \n                \n                    \n                    followUserByUsername(username: string, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('/:username/follow')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'followUserById', summary: 'Follows a user by username'})@ApiNotFoundResponse({description: 'User not found'})@ApiConflictResponse({description: 'You have already followed this user'})\n                \n            \n\n            \n                \n                    Defined in src/user/user-follow.controller.ts:50\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        followUsersByUsernames\n                        \n                    \n                \n            \n            \n                \n                    \n                    followUsersByUsernames(bulkFollow: FollowManyUsersDto, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('/:username/follows')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'followUsersByUsernames', summary: 'Follows a number of users by username'})@ApiNotFoundResponse({description: 'Users not found'})@ApiConflictResponse({description: 'You have already followed this user'})@ApiBody({type: FollowManyUsersDto})\n                \n            \n\n            \n                \n                    Defined in src/user/user-follow.controller.ts:69\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    bulkFollow\n                                    \n                                                FollowManyUsersDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getFollowStatusByUsername\n                        \n                    \n                \n            \n            \n                \n                    \n                    getFollowStatusByUsername(username: string, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:username/follow')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'getFollowStatusByUsername', summary: 'Checks if the authenticated user follows the provided username'})@ApiNotFoundResponse({description: 'User follow not found'})\n                \n            \n\n            \n                \n                    Defined in src/user/user-follow.controller.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        unfollowUserByUserId\n                        \n                    \n                \n            \n            \n                \n                    \n                    unfollowUserByUserId(username: string, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/:username/follow')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'unfollowUserByUsername', summary: 'Unfollows a user by username'})@ApiOkResponse({description: 'Returns the user follow', type: DbUserToUserFollows})@ApiNotFoundResponse({description: 'User not found'})@ApiConflictResponse({description: 'You are now following this user'})\n                \n            \n\n            \n                \n                    Defined in src/user/user-follow.controller.ts:108\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Delete, Get, Param, Put, UseGuards } from \"@nestjs/common\";\nimport {\n  ApiBearerAuth,\n  ApiBody,\n  ApiConflictResponse,\n  ApiNotFoundResponse,\n  ApiOkResponse,\n  ApiOperation,\n  ApiTags,\n} from \"@nestjs/swagger\";\n\nimport { SupabaseGuard } from \"../auth/supabase.guard\";\nimport { UserId } from \"../auth/supabase.user.decorator\";\nimport { DbUserToUserFollows } from \"./entities/user-follows.entity\";\nimport { UserFollowService } from \"./user-follow.service\";\nimport { UserService } from \"./services/user.service\";\nimport { FollowManyUsersDto } from \"./dtos/follow-many-users.dto\";\n\n@Controller(\"users\")\n@ApiTags(\"User service\")\nexport class UserFollowsController {\n  constructor(private readonly userService: UserService, private readonly userFollowService: UserFollowService) {}\n\n  @Get(\"/:username/follow\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"getFollowStatusByUsername\",\n    summary: \"Checks if the authenticated user follows the provided username\",\n  })\n  @ApiNotFoundResponse({ description: \"User follow not found\" })\n  async getFollowStatusByUsername(\n    @Param(\"username\") username: string,\n    @UserId() userId: number\n  ): Promise {\n    const user = await this.userService.findOneByUsername(username);\n\n    return this.userFollowService.findUserFollowerById(userId, user.id);\n  }\n\n  @Put(\"/:username/follow\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"followUserById\",\n    summary: \"Follows a user by username\",\n  })\n  @ApiNotFoundResponse({ description: \"User not found\" })\n  @ApiConflictResponse({ description: \"You have already followed this user\" })\n  async followUserByUsername(\n    @Param(\"username\") username: string,\n    @UserId() userId: number\n  ): Promise {\n    const user = await this.userService.findOneByUsername(username);\n\n    return this.userFollowService.addUserFollowerByUserId(userId, user.id);\n  }\n\n  @Put(\"/:username/follows\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"followUsersByUsernames\",\n    summary: \"Follows a number of users by username\",\n  })\n  @ApiNotFoundResponse({ description: \"Users not found\" })\n  @ApiConflictResponse({ description: \"You have already followed this user\" })\n  @ApiBody({ type: FollowManyUsersDto })\n  async followUsersByUsernames(\n    @Body() bulkFollow: FollowManyUsersDto,\n    @UserId() userId: number\n  ): Promise {\n    const users = await this.userService.findManyByUsernames(bulkFollow.usernames);\n    const allErrs: Error[] = [];\n\n    const promises = users.map(async (user) => {\n      try {\n        return await this.userFollowService.addUserFollowerByUserId(userId, user.id);\n      } catch (e: unknown) {\n        if (e instanceof Error) {\n          allErrs.push(e);\n        }\n      }\n    });\n\n    const results = await Promise.all(promises);\n    const validResults = results.filter(Boolean);\n\n    return {\n      follows: validResults as DbUserToUserFollows[],\n      errors: allErrs,\n    };\n  }\n\n  @Delete(\"/:username/follow\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"unfollowUserByUsername\",\n    summary: \"Unfollows a user by username\",\n  })\n  @ApiOkResponse({\n    description: \"Returns the user follow\",\n    type: DbUserToUserFollows,\n  })\n  @ApiNotFoundResponse({ description: \"User not found\" })\n  @ApiConflictResponse({ description: \"You are now following this user\" })\n  async unfollowUserByUserId(\n    @Param(\"username\") username: string,\n    @UserId() userId: number\n  ): Promise {\n    const user = await this.userService.findOneByUsername(username);\n\n    return this.userFollowService.removeUserFollowerById(userId, user.id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserHighlightsController.html":{"url":"controllers/UserHighlightsController.html","title":"controller - UserHighlightsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserHighlightsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user-highlight.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                user/highlights\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addHighlightReactionForUser\n                            \n                            \n                                    Async\n                                addInsightForUser\n                            \n                            \n                                    Async\n                                deleteHighlightForUser\n                            \n                            \n                                    Async\n                                deleteHighlightReactionForUser\n                            \n                            \n                                    Async\n                                getAllHighlightUserReactions\n                            \n                            \n                                    Async\n                                getFollowingHighlightRepos\n                            \n                            \n                                    Async\n                                getFollowingHighlights\n                            \n                            \n                                    Async\n                                getUserHighlight\n                            \n                            \n                                    Async\n                                updateHighlightForUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addHighlightReactionForUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    addHighlightReactionForUser(highlightId: number, emojiId: string, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/:id/reactions/:emojiId')@ApiOperation({operationId: 'addHighlightReactionForUser', summary: 'Adds a new highlight reaction for the authenticated user'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOkResponse({type: DbUserHighlightReaction})@ApiNotFoundResponse({description: 'Highlight does not exist'})@ApiBadRequestResponse({description: 'Invalid request'})@ApiConflictResponse({description: 'Unable to add user highlight reaction'})@ApiParam({name: 'id', type: 'integer'})\n                \n            \n\n            \n                \n                    Defined in src/user/user-highlight.controller.ts:153\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    highlightId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    emojiId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addInsightForUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    addInsightForUser(createHighlightDto: CreateUserHighlightDto, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/')@ApiOperation({operationId: 'addHighlightForUser', summary: 'Adds a new highlight for the authenticated user'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOkResponse({type: undefined})@ApiNotFoundResponse({description: 'Unable to add user highlight'})@ApiBadRequestResponse({description: 'Invalid request'})@ApiBody({type: CreateUserHighlightDto})\n                \n            \n\n            \n                \n                    Defined in src/user/user-highlight.controller.ts:53\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createHighlightDto\n                                    \n                                                CreateUserHighlightDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteHighlightForUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteHighlightForUser(userId: number, highlightId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/:id')@ApiOperation({operationId: 'deleteHighlightForUser', summary: 'Deletes the highlight for the authenticated user'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiNotFoundResponse({description: 'Unable to delete user highlight'})@ApiBadRequestResponse({description: 'Invalid request'})@ApiParam({name: 'id', type: 'integer'})\n                \n            \n\n            \n                \n                    Defined in src/user/user-highlight.controller.ts:114\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    highlightId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteHighlightReactionForUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteHighlightReactionForUser(userId: number, highlightId: number, emojiId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/:id/reactions/:emojiId')@ApiOperation({operationId: 'deleteHighlightReactionForUser', summary: 'Deletes the highlight reaction for the authenticated user'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiNotFoundResponse({description: 'Unable to delete user highlight reaction'})@ApiBadRequestResponse({description: 'Invalid request'})@ApiParam({name: 'id', type: 'integer'})\n                \n            \n\n            \n                \n                    Defined in src/user/user-highlight.controller.ts:177\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    highlightId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    emojiId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAllHighlightUserReactions\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllHighlightUserReactions(id: number, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:id/reactions')@ApiOperation({operationId: 'getAllHighlightUserReactions', summary: 'Retrieves a highlight reactions for the authenticated user'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOkResponse({type: DbUserHighlightReactionResponse})@ApiNotFoundResponse({description: 'Unable to get user highlight reactions'})@ApiBadRequestResponse({description: 'Invalid request'})@ApiParam({name: 'id', type: 'integer'})\n                \n            \n\n            \n                \n                    Defined in src/user/user-highlight.controller.ts:134\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getFollowingHighlightRepos\n                        \n                    \n                \n            \n            \n                \n                    \n                    getFollowingHighlightRepos(pageOptionsDto: HighlightOptionsDto, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/following/repos')@ApiOperation({operationId: 'getFollowingHighlightRepos', summary: 'Fetches highlight repos for users the authenticated user follows'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOkResponse({type: DbUserHighlightRepo})@ApiBadRequestResponse({description: 'Invalid request'})\n                \n            \n\n            \n                \n                    Defined in src/user/user-highlight.controller.ts:215\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                HighlightOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getFollowingHighlights\n                        \n                    \n                \n            \n            \n                \n                    \n                    getFollowingHighlights(pageOptionsDto: HighlightOptionsDto, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/following')@ApiOperation({operationId: 'getFollowingHighlights', summary: 'Fetches highlights for users the authenticated user follows'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOkResponse({type: DbUserHighlight})\n                \n            \n\n            \n                \n                    Defined in src/user/user-highlight.controller.ts:199\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                HighlightOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getUserHighlight\n                        \n                    \n                \n            \n            \n                \n                    \n                    getUserHighlight(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:id')@ApiOperation({operationId: 'getUserHighlight', summary: 'Retrieves a highlight'})@ApiOkResponse({type: DbUserHighlight})@ApiNotFoundResponse({description: 'Unable to get user highlight'})@ApiBadRequestResponse({description: 'Invalid request'})@ApiParam({name: 'id', type: 'integer'})\n                \n            \n\n            \n                \n                    Defined in src/user/user-highlight.controller.ts:69\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateHighlightForUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateHighlightForUser(updateHighlightDto: CreateUserHighlightDto, userId: number, highlightId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch('/:id')@ApiOperation({operationId: 'updateHighlightForUser', summary: 'Updates the highlight for the authenticated user'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOkResponse({type: DbUserHighlight})@ApiNotFoundResponse({description: 'Unable to update user highlight'})@ApiBadRequestResponse({description: 'Invalid request'})@ApiBody({type: CreateUserHighlightDto})@ApiParam({name: 'id', type: 'integer'})\n                \n            \n\n            \n                \n                    Defined in src/user/user-highlight.controller.ts:85\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    updateHighlightDto\n                                    \n                                                CreateUserHighlightDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    highlightId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  ConflictException,\n  Controller,\n  Delete,\n  Get,\n  Param,\n  ParseIntPipe,\n  Patch,\n  Post,\n  Query,\n  UseGuards,\n} from \"@nestjs/common\";\nimport {\n  ApiOperation,\n  ApiOkResponse,\n  ApiNotFoundResponse,\n  ApiBearerAuth,\n  ApiTags,\n  ApiBadRequestResponse,\n  ApiBody,\n  ApiConflictResponse,\n  OmitType,\n  ApiParam,\n} from \"@nestjs/swagger\";\nimport { PageDto } from \"../common/dtos/page.dto\";\n\nimport { SupabaseGuard } from \"../auth/supabase.guard\";\nimport { UserId } from \"../auth/supabase.user.decorator\";\nimport { DbUserHighlightReactionResponse, HighlightOptionsDto } from \"../highlight/dtos/highlight-options.dto\";\nimport { DbUserHighlightRepo } from \"../highlight/entities/user-highlight-repo.entity\";\nimport { CreateUserHighlightDto } from \"./dtos/create-user-highlight.dto\";\nimport { DbUserHighlightReaction } from \"./entities/user-highlight-reaction.entity\";\nimport { DbUserHighlight } from \"./entities/user-highlight.entity\";\nimport { UserHighlightsService } from \"./user-highlights.service\";\n\n@Controller(\"user/highlights\")\n@ApiTags(\"User Highlights service\")\nexport class UserHighlightsController {\n  constructor(private readonly userHighlightsService: UserHighlightsService) {}\n\n  @Post(\"/\")\n  @ApiOperation({\n    operationId: \"addHighlightForUser\",\n    summary: \"Adds a new highlight for the authenticated user\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOkResponse({ type: OmitType(DbUserHighlight, [\"id\"]) })\n  @ApiNotFoundResponse({ description: \"Unable to add user highlight\" })\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  @ApiBody({ type: CreateUserHighlightDto })\n  async addInsightForUser(\n    @Body() createHighlightDto: CreateUserHighlightDto,\n    @UserId() userId: number\n  ): Promise {\n    return this.userHighlightsService.addUserHighlight(userId, createHighlightDto);\n  }\n\n  @Get(\"/:id\")\n  @ApiOperation({\n    operationId: \"getUserHighlight\",\n    summary: \"Retrieves a highlight\",\n  })\n  @ApiOkResponse({ type: DbUserHighlight })\n  @ApiNotFoundResponse({ description: \"Unable to get user highlight\" })\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  @ApiParam({ name: \"id\", type: \"integer\" })\n  async getUserHighlight(@Param(\"id\", ParseIntPipe) id: number): Promise {\n    return this.userHighlightsService.findOneById(id);\n  }\n\n  @Patch(\"/:id\")\n  @ApiOperation({\n    operationId: \"updateHighlightForUser\",\n    summary: \"Updates the highlight for the authenticated user\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOkResponse({ type: DbUserHighlight })\n  @ApiNotFoundResponse({ description: \"Unable to update user highlight\" })\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  @ApiBody({ type: CreateUserHighlightDto })\n  @ApiParam({ name: \"id\", type: \"integer\" })\n  async updateHighlightForUser(\n    @Body() updateHighlightDto: CreateUserHighlightDto,\n    @UserId() userId: number,\n    @Param(\"id\", ParseIntPipe) highlightId: number\n  ): Promise {\n    const highlight = await this.userHighlightsService.findOneById(highlightId, userId);\n\n    await this.userHighlightsService.updateUserHighlight(highlight.id, {\n      title: updateHighlightDto.title,\n      highlight: updateHighlightDto.highlight,\n      url: updateHighlightDto.url,\n      type: updateHighlightDto.type,\n      shipped_at: updateHighlightDto.shipped_at ? new Date(updateHighlightDto.shipped_at) : highlight.created_at,\n      tagged_repos: updateHighlightDto.taggedRepos,\n    });\n\n    return this.userHighlightsService.findOneById(highlight.id, userId);\n  }\n\n  @Delete(\"/:id\")\n  @ApiOperation({\n    operationId: \"deleteHighlightForUser\",\n    summary: \"Deletes the highlight for the authenticated user\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiNotFoundResponse({ description: \"Unable to delete user highlight\" })\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  @ApiParam({ name: \"id\", type: \"integer\" })\n  async deleteHighlightForUser(\n    @UserId() userId: number,\n    @Param(\"id\", ParseIntPipe) highlightId: number\n  ): Promise {\n    const highlight = await this.userHighlightsService.findOneById(highlightId, userId);\n\n    await this.userHighlightsService.deleteUserHighlight(highlight.id);\n  }\n\n  @Get(\"/:id/reactions\")\n  @ApiOperation({\n    operationId: \"getAllHighlightUserReactions\",\n    summary: \"Retrieves a highlight reactions for the authenticated user\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOkResponse({ type: DbUserHighlightReactionResponse })\n  @ApiNotFoundResponse({ description: \"Unable to get user highlight reactions\" })\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  @ApiParam({ name: \"id\", type: \"integer\" })\n  async getAllHighlightUserReactions(\n    @Param(\"id\", ParseIntPipe) id: number,\n    @UserId() userId: number\n  ): Promise {\n    return this.userHighlightsService.findAllHighlightReactions(id, userId);\n  }\n\n  @Post(\"/:id/reactions/:emojiId\")\n  @ApiOperation({\n    operationId: \"addHighlightReactionForUser\",\n    summary: \"Adds a new highlight reaction for the authenticated user\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOkResponse({ type: DbUserHighlightReaction })\n  @ApiNotFoundResponse({ description: \"Highlight does not exist\" })\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  @ApiConflictResponse({ description: \"Unable to add user highlight reaction\" })\n  @ApiParam({ name: \"id\", type: \"integer\" })\n  async addHighlightReactionForUser(\n    @Param(\"id\", ParseIntPipe) highlightId: number,\n    @Param(\"emojiId\") emojiId: string,\n    @UserId() userId: number\n  ): Promise {\n    const highlight = await this.userHighlightsService.findOneById(highlightId);\n\n    if (Number(highlight.user_id) === userId) {\n      throw new ConflictException(\"You cannot react to your own highlight\");\n    }\n\n    await this.userHighlightsService.addUserHighlightReaction(userId, highlightId, emojiId, highlight.user_id);\n  }\n\n  @Delete(\"/:id/reactions/:emojiId\")\n  @ApiOperation({\n    operationId: \"deleteHighlightReactionForUser\",\n    summary: \"Deletes the highlight reaction for the authenticated user\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiNotFoundResponse({ description: \"Unable to delete user highlight reaction\" })\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  @ApiParam({ name: \"id\", type: \"integer\" })\n  async deleteHighlightReactionForUser(\n    @UserId() userId: number,\n    @Param(\"id\", ParseIntPipe) highlightId: number,\n    @Param(\"emojiId\") emojiId: string\n  ): Promise {\n    const userHighlightReaction = await this.userHighlightsService.findOneUserHighlightReaction(\n      highlightId,\n      userId,\n      emojiId\n    );\n\n    await this.userHighlightsService.deleteUserHighlightReaction(userHighlightReaction.id);\n  }\n\n  @Get(\"/following\")\n  @ApiOperation({\n    operationId: \"getFollowingHighlights\",\n    summary: \"Fetches highlights for users the authenticated user follows\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOkResponse({ type: DbUserHighlight })\n  async getFollowingHighlights(\n    @Query() pageOptionsDto: HighlightOptionsDto,\n    @UserId() userId: number\n  ): Promise> {\n    return this.userHighlightsService.findAll(pageOptionsDto, userId);\n  }\n\n  @Get(\"/following/repos\")\n  @ApiOperation({\n    operationId: \"getFollowingHighlightRepos\",\n    summary: \"Fetches highlight repos for users the authenticated user follows\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOkResponse({ type: DbUserHighlightRepo })\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  async getFollowingHighlightRepos(\n    @Query() pageOptionsDto: HighlightOptionsDto,\n    @UserId() userId: number\n  ): Promise> {\n    return this.userHighlightsService.findAllHighlightRepos(pageOptionsDto, userId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserHighlightsService.html":{"url":"injectables/UserHighlightsService.html","title":"injectable - UserHighlightsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserHighlightsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user-highlights.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addFeatured\n                            \n                            \n                                    Async\n                                addUserHighlight\n                            \n                            \n                                    Async\n                                addUserHighlightReaction\n                            \n                            \n                                baseQueryBuilder\n                            \n                            \n                                    Async\n                                deleteUserHighlight\n                            \n                            \n                                    Async\n                                deleteUserHighlightReaction\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findAllByUserId\n                            \n                            \n                                    Async\n                                findAllFeatured\n                            \n                            \n                                    Async\n                                findAllHighlightReactions\n                            \n                            \n                                    Async\n                                findAllHighlightRepos\n                            \n                            \n                                    Async\n                                findOneById\n                            \n                            \n                                    Async\n                                findOneUserHighlightReaction\n                            \n                            \n                                    Async\n                                findTop\n                            \n                            \n                                    Async\n                                removeFeatured\n                            \n                            \n                                    Async\n                                updateUserHighlight\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userHighlightRepository: Repository, userHighlightReactionRepository: Repository, userNotificationService: UserNotificationService, userService: UserService, userFollowService: UserFollowService, pagerService: PagerService)\n                    \n                \n                        \n                            \n                                Defined in src/user/user-highlights.service.ts:19\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userHighlightRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userHighlightReactionRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userNotificationService\n                                                  \n                                                        \n                                                                        UserNotificationService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userFollowService\n                                                  \n                                                        \n                                                                        UserFollowService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        pagerService\n                                                  \n                                                        \n                                                                        PagerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addFeatured\n                        \n                    \n                \n            \n            \n                \n                    \n                    addFeatured(highlightId: number, userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-highlights.service.ts:138\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    highlightId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addUserHighlight\n                        \n                    \n                \n            \n            \n                \n                    \n                    addUserHighlight(userId: number, highlight: CreateUserHighlightDto)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-highlights.service.ts:228\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    highlight\n                                    \n                                                CreateUserHighlightDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addUserHighlightReaction\n                        \n                    \n                \n            \n            \n                \n                    \n                    addUserHighlightReaction(userId: number, highlightId: number, emojiId: string, highlightUserId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-highlights.service.ts:299\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    highlightId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    emojiId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    highlightUserId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        baseQueryBuilder\n                        \n                    \n                \n            \n            \n                \nbaseQueryBuilder()\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-highlights.service.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         SelectQueryBuilder\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteUserHighlight\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteUserHighlight(highlightId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-highlights.service.ts:256\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    highlightId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteUserHighlightReaction\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteUserHighlightReaction(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-highlights.service.ts:331\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll(pageOptionsDto: HighlightOptionsDto, followerUserId?: number)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-highlights.service.ts:58\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                HighlightOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    followerUserId\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllByUserId\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllByUserId(pageOptionsDto: PageOptionsDto, userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-highlights.service.ts:217\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllFeatured\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllFeatured(pageOptionsDto: PageOptionsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-highlights.service.ts:102\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllHighlightReactions\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllHighlightReactions(highlightId: number, userId?: number)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-highlights.service.ts:260\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    highlightId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllHighlightRepos\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllHighlightRepos(pageOptionsDto: PageOptionsDto, follwerUserId?: number)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-highlights.service.ts:177\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    follwerUserId\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneById(id: number, userId?: number)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-highlights.service.ts:37\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneUserHighlightReaction\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneUserHighlightReaction(highlightId: number, userId: number, emojiId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-highlights.service.ts:282\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    highlightId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    emojiId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findTop\n                        \n                    \n                \n            \n            \n                \n                    \n                    findTop(pageOptionsDto: PageOptionsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-highlights.service.ts:113\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        removeFeatured\n                        \n                    \n                \n            \n            \n                \n                    \n                    removeFeatured(highlightId: number, userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-highlights.service.ts:157\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    highlightId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateUserHighlight\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateUserHighlight(highlightId: number, highlight: Partial)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-highlights.service.ts:252\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    highlightId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    highlight\n                                    \n                                                Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ConflictException, Injectable, NotFoundException, UnauthorizedException } from \"@nestjs/common\";\nimport { Repository, SelectQueryBuilder } from \"typeorm\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\n\nimport { GetPrevDateISOString } from \"../common/util/datetimes\";\nimport { PageOptionsDto } from \"../common/dtos/page-options.dto\";\nimport { PageDto } from \"../common/dtos/page.dto\";\nimport { PageMetaDto } from \"../common/dtos/page-meta.dto\";\nimport { DbUserHighlightReactionResponse, HighlightOptionsDto } from \"../highlight/dtos/highlight-options.dto\";\nimport { PagerService } from \"../common/services/pager.service\";\nimport { DbUserHighlight } from \"./entities/user-highlight.entity\";\nimport { CreateUserHighlightDto } from \"./dtos/create-user-highlight.dto\";\nimport { DbUserHighlightReaction } from \"./entities/user-highlight-reaction.entity\";\nimport { UserNotificationService } from \"./user-notifcation.service\";\nimport { UserService } from \"./services/user.service\";\nimport { UserFollowService } from \"./user-follow.service\";\n\n@Injectable()\nexport class UserHighlightsService {\n  constructor(\n    @InjectRepository(DbUserHighlight, \"ApiConnection\")\n    private userHighlightRepository: Repository,\n    @InjectRepository(DbUserHighlightReaction, \"ApiConnection\")\n    private userHighlightReactionRepository: Repository,\n    private userNotificationService: UserNotificationService,\n    private userService: UserService,\n    private userFollowService: UserFollowService,\n    private pagerService: PagerService\n  ) {}\n\n  baseQueryBuilder(): SelectQueryBuilder {\n    const builder = this.userHighlightRepository.createQueryBuilder(\"user_highlights\");\n\n    return builder;\n  }\n\n  async findOneById(id: number, userId?: number): Promise {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .innerJoin(\"users\", \"users\", \"user_highlights.user_id=users.id\")\n      .addSelect(\"users.login\", \"user_highlights_login\")\n      .where(\"user_highlights.id = :id\", { id });\n\n    if (userId) {\n      queryBuilder.andWhere(\"user_highlights.user_id = :userId\", { userId });\n    }\n\n    const item: DbUserHighlight | null = await queryBuilder.getOne();\n\n    if (!item) {\n      throw new NotFoundException();\n    }\n\n    return item;\n  }\n\n  async findAll(pageOptionsDto: HighlightOptionsDto, followerUserId?: number): Promise> {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .innerJoin(\"users\", \"users\", \"user_highlights.user_id=users.id\")\n      .addSelect(\"users.name\", \"user_highlights_name\")\n      .addSelect(\"users.login\", \"user_highlights_login\")\n      .orderBy(\"user_highlights.updated_at\", \"DESC\");\n\n    const filters: [string, object][] = [];\n\n    if (followerUserId) {\n      filters.push([\n        `user_highlights.user_id IN (\n        SELECT following_user_id FROM users_to_users_followers\n        WHERE user_id=:userId\n        AND deleted_at IS NULL\n      )`,\n        { userId: followerUserId },\n      ]);\n    }\n\n    if (pageOptionsDto.repo) {\n      filters.push([\n        // eslint-disable-next-line no-useless-escape\n        `REGEXP_REPLACE(REGEXP_REPLACE(user_highlights.url, '(^(http(s)?:\\/\\/)?([\\w]+\\.)?github\\.com\\/)', ''), '/pull/.*', '')=:repo`,\n        { repo: decodeURIComponent(pageOptionsDto.repo) },\n      ]);\n    }\n\n    filters.forEach(([sql, data], index) => {\n      if (index === 0) {\n        queryBuilder.where(sql, data);\n      } else {\n        queryBuilder.andWhere(sql, data);\n      }\n    });\n\n    return this.pagerService.applyPagination({\n      pageOptionsDto,\n      queryBuilder,\n    });\n  }\n\n  async findAllFeatured(pageOptionsDto: PageOptionsDto): Promise> {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder.where(`user_highlights.featured = true`).orderBy(\"user_highlights.updated_at\", \"DESC\");\n\n    return this.pagerService.applyPagination({\n      pageOptionsDto,\n      queryBuilder,\n    });\n  }\n\n  async findTop(pageOptionsDto: PageOptionsDto): Promise> {\n    const queryBuilder = this.baseQueryBuilder();\n    const startDate = GetPrevDateISOString(pageOptionsDto.prev_days_start_date);\n    const range = pageOptionsDto.range!;\n\n    queryBuilder\n      .addSelect(\n        `\n        (SELECT COUNT(id) FROM user_highlight_reactions\n        WHERE highlight_id=user_highlights.id\n        AND deleted_at IS NULL)\n      `,\n        \"reactions\"\n      )\n      .where(`'${startDate}'::TIMESTAMP >= user_highlights.created_at`)\n      .andWhere(`'${startDate}'::TIMESTAMP - INTERVAL '${range} days' ({\n      pageOptionsDto,\n      queryBuilder,\n    });\n  }\n\n  async addFeatured(highlightId: number, userId: number): Promise {\n    const user = await this.userService.findOneById(userId);\n\n    if (user.role  {\n    const user = await this.userService.findOneById(userId);\n\n    if (user.role ();\n    const itemCount = parseInt(`${countQueryResult?.count ?? \"0\"}`, 10);\n    const entities = DbUserHighlight.create(await queryBuilder.getRawMany());\n\n    const pageMetaDto = new PageMetaDto({ itemCount, pageOptionsDto });\n\n    return new PageDto(entities, pageMetaDto);\n  }\n\n  async findAllByUserId(pageOptionsDto: PageOptionsDto, userId: number): Promise> {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder.where(\"user_highlights.user_id = :userId\", { userId }).orderBy(\"user_highlights.updated_at\", \"DESC\");\n\n    return this.pagerService.applyPagination({\n      pageOptionsDto,\n      queryBuilder,\n    });\n  }\n\n  async addUserHighlight(userId: number, highlight: CreateUserHighlightDto) {\n    const newUserHighlight = this.userHighlightRepository.create({\n      user_id: userId,\n      url: highlight.url,\n      highlight: highlight.highlight,\n      title: highlight.title ?? \"\",\n      shipped_at: highlight.shipped_at ? new Date(highlight.shipped_at) : new Date(),\n      type: highlight.type,\n      tagged_repos: highlight.taggedRepos,\n    });\n\n    const newHighlight = await this.userHighlightRepository.save(newUserHighlight);\n\n    const followers = await this.userFollowService.findAllFollowers(userId);\n\n    const notifications = followers.map(async (follower) =>\n      this.userNotificationService.addUserHighlightNotification(newHighlight.id, userId, follower.user_id)\n    );\n\n    await Promise.all(notifications);\n\n    return newHighlight;\n  }\n\n  async updateUserHighlight(highlightId: number, highlight: Partial) {\n    return this.userHighlightRepository.update(highlightId, highlight);\n  }\n\n  async deleteUserHighlight(highlightId: number) {\n    return this.userHighlightRepository.softDelete(highlightId);\n  }\n\n  async findAllHighlightReactions(highlightId: number, userId?: number) {\n    const queryBuilder = this.userHighlightReactionRepository.createQueryBuilder(\"user_highlight_reactions\");\n\n    queryBuilder\n      .select(\"emoji_id\", \"emoji_id\")\n      .addSelect(\"COUNT(emoji_id)\", \"reaction_count\")\n      .addSelect(\"ARRAY_AGG(users.login)\", \"reaction_users\")\n      .innerJoin(\"users\", \"users\", \"user_highlight_reactions.user_id=users.id\")\n      .where(\"user_highlight_reactions.highlight_id = :highlightId\", { highlightId })\n      .addGroupBy(\"emoji_id\");\n\n    if (userId) {\n      queryBuilder.andWhere(\"user_highlight_reactions.user_id = :userId\", { userId });\n    }\n\n    queryBuilder.addGroupBy(\"emoji_id\");\n\n    const entities: DbUserHighlightReactionResponse[] = await queryBuilder.getRawMany();\n\n    return entities;\n  }\n\n  async findOneUserHighlightReaction(highlightId: number, userId: number, emojiId: string) {\n    const queryBuilder = this.userHighlightReactionRepository.createQueryBuilder(\"user_highlight_reactions\");\n\n    queryBuilder\n      .where(\"user_highlight_reactions.highlight_id = :highlightId\", { highlightId })\n      .andWhere(\"user_highlight_reactions.user_id = :userId\", { userId })\n      .andWhere(\"user_highlight_reactions.emoji_id = :emojiId\", { emojiId });\n\n    const item: DbUserHighlightReaction | null = await queryBuilder.getOne();\n\n    if (!item) {\n      throw new NotFoundException();\n    }\n\n    return item;\n  }\n\n  async addUserHighlightReaction(userId: number, highlightId: number, emojiId: string, highlightUserId: number) {\n    const queryBuilder = this.userHighlightReactionRepository\n      .createQueryBuilder(\"user_highlight_reactions\")\n      .withDeleted();\n\n    queryBuilder\n      .where(\"user_highlight_reactions.highlight_id = :highlightId\", { highlightId })\n      .andWhere(\"user_highlight_reactions.user_id = :userId\", { userId })\n      .andWhere(\"user_highlight_reactions.emoji_id = :emojiId\", { emojiId });\n\n    const reactionExists = await queryBuilder.getOne();\n\n    if (reactionExists) {\n      if (!reactionExists.deleted_at) {\n        throw new ConflictException(\"You have already added this reaction for this highlight\");\n      }\n\n      await this.userHighlightReactionRepository.restore(reactionExists.id);\n      await this.userNotificationService.addUserHighlightReactionNotification(userId, highlightUserId, highlightId);\n\n      return reactionExists;\n    }\n\n    await this.userNotificationService.addUserHighlightReactionNotification(userId, highlightUserId, highlightId);\n\n    return this.userHighlightReactionRepository.save({\n      user_id: userId,\n      highlight_id: highlightId,\n      emoji_id: emojiId,\n    });\n  }\n\n  async deleteUserHighlightReaction(id: string) {\n    return this.userHighlightReactionRepository.softDelete(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserInsightMemberController.html":{"url":"controllers/UserInsightMemberController.html","title":"controller - UserInsightMemberController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserInsightMemberController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/insight/user-insight-member.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                user/insights\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addInsightMember\n                            \n                            \n                                    Async\n                                findAllInsightsByUserId\n                            \n                            \n                                    Async\n                                removeInsightMemberById\n                            \n                            \n                                    Async\n                                updateInsightMember\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addInsightMember\n                        \n                    \n                \n            \n            \n                \n                    \n                    addInsightMember(createInsightMemberDto: CreateInsightMemberDto, insightId: number, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post(':id/members')@ApiOperation({operationId: 'addMemberForInsight', summary: 'Adds a new member for the insight'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOkResponse({type: DbInsightMember})@ApiNotFoundResponse({description: 'Unable to add insight member'})@ApiBadRequestResponse({description: 'Invalid request'})@ApiBody({type: CreateInsightMemberDto})@ApiParam({name: 'id', type: 'integer'})\n                \n            \n\n            \n                \n                    Defined in src/insight/user-insight-member.controller.ts:92\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createInsightMemberDto\n                                    \n                                                CreateInsightMemberDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    insightId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllInsightsByUserId\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllInsightsByUserId(pageOptionsDto: InsightPageOptionsDto, insightId: number, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id/members')@ApiOperation({operationId: 'findAllInsightMembers', summary: 'Listing all members for an insight and paginate them'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiPaginatedResponse(DbInsightMember)@ApiOkResponse({type: DbInsightMember})@ApiNotFoundResponse({description: 'Insight not found'})@ApiParam({name: 'id', type: 'integer'})\n                \n            \n\n            \n                \n                    Defined in src/insight/user-insight-member.controller.ts:61\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                InsightPageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    insightId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        removeInsightMemberById\n                        \n                    \n                \n            \n            \n                \n                    \n                    removeInsightMemberById(id: number, memberId: string, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id/members/:memberId')@ApiOperation({operationId: 'removeInsightMemberById', summary: 'Removes a member from an insight'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOkResponse({type: DbInsight})@ApiNotFoundResponse({description: 'Unable to remove insight member'})@ApiBadRequestResponse({description: 'Invalid request'})@ApiParam({name: 'id', type: 'integer'})\n                \n            \n\n            \n                \n                    Defined in src/insight/user-insight-member.controller.ts:178\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    memberId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateInsightMember\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateInsightMember(id: number, memberId: string, userId: number, updateInsightMemberDto: UpdateInsightMemberDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id/members/:memberId')@ApiOperation({operationId: 'updateInsightMember', summary: 'Updates an insight member information'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOkResponse({type: DbInsight})@ApiNotFoundResponse({description: 'Unable to find insight member'})@ApiBadRequestResponse({description: 'Invalid request'})@ApiUnprocessableEntityResponse({description: 'Unable to unable insight member'})@ApiBody({type: UpdateInsightMemberDto})@ApiParam({name: 'id', type: 'integer'})\n                \n            \n\n            \n                \n                    Defined in src/insight/user-insight-member.controller.ts:140\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    memberId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateInsightMemberDto\n                                    \n                                                UpdateInsightMemberDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  ConflictException,\n  Controller,\n  Delete,\n  Get,\n  Param,\n  ParseIntPipe,\n  Patch,\n  Post,\n  Query,\n  UnauthorizedException,\n  UseGuards,\n} from \"@nestjs/common\";\nimport {\n  ApiOperation,\n  ApiOkResponse,\n  ApiNotFoundResponse,\n  ApiBearerAuth,\n  ApiTags,\n  ApiBadRequestResponse,\n  ApiBody,\n  ApiUnprocessableEntityResponse,\n  ApiParam,\n} from \"@nestjs/swagger\";\n\nimport { SupabaseGuard } from \"../auth/supabase.guard\";\nimport { UserId } from \"../auth/supabase.user.decorator\";\nimport { ApiPaginatedResponse } from \"../common/decorators/api-paginated-response.decorator\";\nimport { PageDto } from \"../common/dtos/page.dto\";\nimport { UserService } from \"../user/services/user.service\";\nimport { CreateInsightMemberDto } from \"./dtos/create-insight-member.dto\";\n\nimport { InsightPageOptionsDto } from \"./dtos/insight-page-options.dto\";\nimport { UpdateInsightMemberDto } from \"./dtos/update-insight-member.dto\";\nimport { DbInsightMember } from \"./entities/insight-member.entity\";\nimport { DbInsight } from \"./entities/insight.entity\";\nimport { InsightMemberService } from \"./insight-member.service\";\nimport { InsightsService } from \"./insights.service\";\n\n@Controller(\"user/insights\")\n@ApiTags(\"Insights service\")\nexport class UserInsightMemberController {\n  constructor(\n    private readonly insightsService: InsightsService,\n    private readonly insightMemberService: InsightMemberService,\n    private userService: UserService\n  ) {}\n\n  @Get(\":id/members\")\n  @ApiOperation({\n    operationId: \"findAllInsightMembers\",\n    summary: \"Listing all members for an insight and paginate them\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiPaginatedResponse(DbInsightMember)\n  @ApiOkResponse({ type: DbInsightMember })\n  @ApiNotFoundResponse({ description: \"Insight not found\" })\n  @ApiParam({ name: \"id\", type: \"integer\" })\n  async findAllInsightsByUserId(\n    @Query() pageOptionsDto: InsightPageOptionsDto,\n    @Param(\"id\", ParseIntPipe) insightId: number,\n    @UserId() userId: number\n  ): Promise> {\n    const insight = await this.insightsService.findOneById(insightId);\n    const canAccess = await this.insightMemberService.canUserManageInsight(userId, insight.id, [\n      \"admin\",\n      \"edit\",\n      \"view\",\n    ]);\n\n    if (!canAccess) {\n      throw new UnauthorizedException();\n    }\n\n    return this.insightMemberService.findAllInsightMembers(pageOptionsDto, insightId);\n  }\n\n  @Post(\":id/members\")\n  @ApiOperation({\n    operationId: \"addMemberForInsight\",\n    summary: \"Adds a new member for the insight\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOkResponse({ type: DbInsightMember })\n  @ApiNotFoundResponse({ description: \"Unable to add insight member\" })\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  @ApiBody({ type: CreateInsightMemberDto })\n  @ApiParam({ name: \"id\", type: \"integer\" })\n  async addInsightMember(\n    @Body() createInsightMemberDto: CreateInsightMemberDto,\n    @Param(\"id\", ParseIntPipe) insightId: number,\n    @UserId() userId: number\n  ): Promise {\n    const insight = await this.insightsService.findOneById(insightId);\n    const canUpdate = await this.insightMemberService.canUserManageInsight(userId, insight.id, [\"admin\", \"edit\"]);\n\n    if (!canUpdate) {\n      throw new UnauthorizedException();\n    }\n\n    const isMember = await this.insightMemberService.canUserManageInsight(\n      userId,\n      insight.id,\n      [\"admin\", \"edit\", \"view\"],\n      false\n    );\n\n    if (isMember) {\n      throw new ConflictException(\"The user is already a team member of this insight\");\n    }\n\n    const existingUser = await this.userService.findOneByEmail(createInsightMemberDto.email);\n\n    const newInsightMember = await this.insightMemberService.addInsightMember({\n      insight_id: insightId,\n      user_id: existingUser?.id,\n      invitation_email: existingUser?.email ?? createInsightMemberDto.email,\n      access: \"pending\",\n    });\n\n    return newInsightMember;\n  }\n\n  @Patch(\":id/members/:memberId\")\n  @ApiOperation({\n    operationId: \"updateInsightMember\",\n    summary: \"Updates an insight member information\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOkResponse({ type: DbInsight })\n  @ApiNotFoundResponse({ description: \"Unable to find insight member\" })\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  @ApiUnprocessableEntityResponse({ description: \"Unable to unable insight member\" })\n  @ApiBody({ type: UpdateInsightMemberDto })\n  @ApiParam({ name: \"id\", type: \"integer\" })\n  async updateInsightMember(\n    @Param(\"id\", ParseIntPipe) id: number,\n    @Param(\"memberId\") memberId: string,\n    @UserId() userId: number,\n    @Body() updateInsightMemberDto: UpdateInsightMemberDto\n  ): Promise {\n    const insight = await this.insightsService.findOneById(id);\n    const canUpdate = await this.insightMemberService.canUserManageInsight(userId, insight.id, [\"admin\", \"edit\"]);\n    const insightMember = await this.insightMemberService.findOneById(memberId);\n\n    if (!canUpdate && insightMember.access !== \"pending\") {\n      throw new UnauthorizedException();\n    }\n\n    const updatedInsightMember: Partial = { access: updateInsightMemberDto.access };\n\n    if (insightMember.access === \"pending\") {\n      // the user is accepting the invitation, update the user_id\n      updatedInsightMember.user_id = userId;\n      updatedInsightMember.access = \"view\";\n    }\n\n    await this.insightMemberService.updateInsightMember(memberId, updatedInsightMember);\n\n    return this.insightMemberService.findOneById(memberId);\n  }\n\n  @Delete(\":id/members/:memberId\")\n  @ApiOperation({\n    operationId: \"removeInsightMemberById\",\n    summary: \"Removes a member from an insight\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOkResponse({ type: DbInsight })\n  @ApiNotFoundResponse({ description: \"Unable to remove insight member\" })\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  @ApiParam({ name: \"id\", type: \"integer\" })\n  async removeInsightMemberById(\n    @Param(\"id\", ParseIntPipe) id: number,\n    @Param(\"memberId\") memberId: string,\n    @UserId() userId: number\n  ): Promise {\n    const insight = await this.insightsService.findOneById(id);\n    const canUpdate = await this.insightMemberService.canUserManageInsight(userId, insight.id, [\"admin\", \"edit\"]);\n\n    if (!canUpdate) {\n      throw new UnauthorizedException();\n    }\n\n    await this.insightMemberService.removeInsightMember(memberId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserInsightsController.html":{"url":"controllers/UserInsightsController.html","title":"controller - UserInsightsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserInsightsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/insight/user-insight.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                user/insights\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addInsightForUser\n                            \n                            \n                                    Async\n                                findAllInsightsByUserId\n                            \n                            \n                                    Async\n                                updateInsightForUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addInsightForUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    addInsightForUser(createInsightDto: CreateInsightDto, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/')@ApiOperation({operationId: 'addInsightForUser', summary: 'Adds a new insight page for the authenticated user'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOkResponse({type: DbInsight})@ApiNotFoundResponse({description: 'Unable to add user insight'})@ApiBadRequestResponse({description: 'Invalid request'})@ApiBody({type: CreateInsightDto})\n                \n            \n\n            \n                \n                    Defined in src/insight/user-insight.controller.ts:77\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createInsightDto\n                                    \n                                                CreateInsightDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllInsightsByUserId\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllInsightsByUserId(pageOptionsDto: InsightPageOptionsDto, userId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/')@ApiOperation({operationId: 'findAllInsightsByUserId', summary: 'Listing all insights for a user and paginate them'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiPaginatedResponse(DbInsight)@ApiOkResponse({type: DbInsight})@ApiNotFoundResponse({description: 'Insights not found'})\n                \n            \n\n            \n                \n                    Defined in src/insight/user-insight.controller.ts:59\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                InsightPageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateInsightForUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateInsightForUser(id: number, updateInsightDto: UpdateInsightDto, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch('/:id')@ApiOperation({operationId: 'updateInsightForUser', summary: 'Updates an insight page for the authenticated user'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOkResponse({type: DbInsight})@ApiNotFoundResponse({description: 'Unable to update user insight'})@ApiBadRequestResponse({description: 'Invalid request'})@ApiUnprocessableEntityResponse({description: 'Unable to unable insight repos'})@ApiBody({type: UpdateInsightDto})@ApiParam({name: 'id', type: 'integer'})\n                \n            \n\n            \n                \n                    Defined in src/insight/user-insight.controller.ts:108\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateInsightDto\n                                    \n                                                UpdateInsightDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  BadRequestException,\n  Body,\n  Controller,\n  Get,\n  Param,\n  ParseIntPipe,\n  Patch,\n  Post,\n  Query,\n  UnauthorizedException,\n  UnprocessableEntityException,\n  UseGuards,\n} from \"@nestjs/common\";\nimport {\n  ApiOperation,\n  ApiOkResponse,\n  ApiNotFoundResponse,\n  ApiBearerAuth,\n  ApiTags,\n  ApiBadRequestResponse,\n  ApiBody,\n  ApiUnprocessableEntityResponse,\n  ApiParam,\n} from \"@nestjs/swagger\";\n\nimport { SupabaseGuard } from \"../auth/supabase.guard\";\nimport { UserId } from \"../auth/supabase.user.decorator\";\nimport { ApiPaginatedResponse } from \"../common/decorators/api-paginated-response.decorator\";\nimport { PageDto } from \"../common/dtos/page.dto\";\nimport { CreateInsightDto } from \"./dtos/create-insight.dto\";\n\nimport { InsightPageOptionsDto } from \"./dtos/insight-page-options.dto\";\nimport { UpdateInsightDto } from \"./dtos/update-insight.dto\";\nimport { DbInsight } from \"./entities/insight.entity\";\nimport { InsightMemberService } from \"./insight-member.service\";\nimport { InsightRepoService } from \"./insight-repo.service\";\nimport { InsightsService } from \"./insights.service\";\n\n@Controller(\"user/insights\")\n@ApiTags(\"Insights service\")\nexport class UserInsightsController {\n  constructor(\n    private readonly insightsService: InsightsService,\n    private readonly insightsRepoService: InsightRepoService,\n    private insightMemberService: InsightMemberService\n  ) {}\n\n  @Get(\"/\")\n  @ApiOperation({\n    operationId: \"findAllInsightsByUserId\",\n    summary: \"Listing all insights for a user and paginate them\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiPaginatedResponse(DbInsight)\n  @ApiOkResponse({ type: DbInsight })\n  @ApiNotFoundResponse({ description: \"Insights not found\" })\n  async findAllInsightsByUserId(\n    @Query() pageOptionsDto: InsightPageOptionsDto,\n    @UserId() userId: string\n  ): Promise> {\n    return this.insightsService.findAllByUserId(pageOptionsDto, userId);\n  }\n\n  @Post(\"/\")\n  @ApiOperation({\n    operationId: \"addInsightForUser\",\n    summary: \"Adds a new insight page for the authenticated user\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOkResponse({ type: DbInsight })\n  @ApiNotFoundResponse({ description: \"Unable to add user insight\" })\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  @ApiBody({ type: CreateInsightDto })\n  async addInsightForUser(@Body() createInsightDto: CreateInsightDto, @UserId() userId: number): Promise {\n    if (!createInsightDto.name || !Array.isArray(createInsightDto.repos)) {\n      throw new BadRequestException();\n    }\n\n    const newInsight = await this.insightsService.addInsight({\n      name: createInsightDto.name,\n      is_public: createInsightDto.is_public,\n      user_id: userId,\n    });\n\n    createInsightDto.repos.forEach(async (repo) => {\n      await this.insightsRepoService.addInsightRepo(newInsight.id, repo);\n    });\n\n    return newInsight;\n  }\n\n  @Patch(\"/:id\")\n  @ApiOperation({\n    operationId: \"updateInsightForUser\",\n    summary: \"Updates an insight page for the authenticated user\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOkResponse({ type: DbInsight })\n  @ApiNotFoundResponse({ description: \"Unable to update user insight\" })\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  @ApiUnprocessableEntityResponse({ description: \"Unable to unable insight repos\" })\n  @ApiBody({ type: UpdateInsightDto })\n  @ApiParam({ name: \"id\", type: \"integer\" })\n  async updateInsightForUser(\n    @Param(\"id\", ParseIntPipe) id: number,\n    @Body() updateInsightDto: UpdateInsightDto,\n    @UserId() userId: number\n  ): Promise {\n    const insight = await this.insightsService.findOneById(id);\n\n    const canUpdate = await this.insightMemberService.canUserManageInsight(userId, insight.id, [\"admin\", \"edit\"]);\n\n    if (!canUpdate) {\n      throw new UnauthorizedException();\n    }\n\n    // update insight\n    await this.insightsService.updateInsight(id, {\n      name: updateInsightDto.name,\n      is_public: updateInsightDto.is_public,\n    });\n\n    try {\n      // current set of insight repos\n      const currentRepos = insight.repos.filter((insightRepo) => !insightRepo.deleted_at);\n\n      // remove deleted repos\n      const reposToRemove = currentRepos.filter(\n        (repo) => !updateInsightDto.repos.find((repoInfo) => `${repoInfo.id}` === `${repo.repo_id}`)\n      );\n\n      const reposToRemoveRequests = reposToRemove.map(async (insightRepo) =>\n        this.insightsRepoService.removeInsightRepo(insightRepo.id)\n      );\n\n      await Promise.all(reposToRemoveRequests);\n\n      // add new repos\n      const currentRepoIds = currentRepos.map((cr) => cr.repo_id);\n      const reposToAdd = updateInsightDto.repos.filter(\n        (repoInfo) => !currentRepoIds.find((id) => `${id}` === `${repoInfo.id}`)\n      );\n\n      const repoToAddRequests = reposToAdd.map(async (repo) =>\n        this.insightsRepoService.addInsightRepo(insight.id, repo)\n      );\n\n      await Promise.all(repoToAddRequests);\n    } catch (e) {\n      throw new UnprocessableEntityException();\n    }\n\n    return this.insightsService.findOneById(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserListController.html":{"url":"controllers/UserListController.html","title":"controller - UserListController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserListController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user-lists/user-list.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                lists\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addListForUser\n                            \n                            \n                                    Async\n                                deleteListForUser\n                            \n                            \n                                    Async\n                                deleteUserListContributors\n                            \n                            \n                                    Async\n                                getContributors\n                            \n                            \n                                    Async\n                                getFeaturedLists\n                            \n                            \n                                    Async\n                                getListsForUser\n                            \n                            \n                                    Async\n                                getTimezones\n                            \n                            \n                                    Async\n                                getUserList\n                            \n                            \n                                    Async\n                                getUserListContributorHighlightedRepos\n                            \n                            \n                                    Async\n                                getUserListContributorHighlights\n                            \n                            \n                                    Async\n                                getUserListContributors\n                            \n                            \n                                    Async\n                                postUserListContributors\n                            \n                            \n                                    Async\n                                updateListForUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addListForUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    addListForUser(createUserListDto: CreateUserListDto, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/')@ApiOperation({operationId: 'addListForUser', summary: 'Adds a new list for the authenticated user'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOkResponse({type: DbUserList})@ApiNotFoundResponse({description: 'Unable to add user list'})@ApiBadRequestResponse({description: 'Invalid request'})@ApiBody({type: CreateUserListDto})\n                \n            \n\n            \n                \n                    Defined in src/user-lists/user-list.controller.ts:74\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createUserListDto\n                                    \n                                                CreateUserListDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteListForUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteListForUser(userId: number, listId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/:id')@ApiOperation({operationId: 'deleteListForUser', summary: 'Deletes the list for the authenticated user'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiNotFoundResponse({description: 'Unable to delete user list'})@ApiBadRequestResponse({description: 'Invalid request'})@ApiParam({name: 'id', type: 'string'})\n                \n            \n\n            \n                \n                    Defined in src/user-lists/user-list.controller.ts:136\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    listId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteUserListContributors\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteUserListContributors(id: string, userListContributorId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/:id/contributors/:userListContributorId')@ApiOperation({operationId: 'deleteUserListContributor', summary: 'Delete contributor from an individual user list'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiNotFoundResponse({description: 'Unable to delete user from user list contributors'})@ApiBadRequestResponse({description: 'Invalid request'})@ApiParam({name: 'id', type: 'string'})@ApiParam({name: 'userListContributorId', type: 'integer'})\n                \n            \n\n            \n                \n                    Defined in src/user-lists/user-list.controller.ts:208\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userListContributorId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getContributors\n                        \n                    \n                \n            \n            \n                \n                    \n                    getContributors(pageOptionsDto: FilterListContributorsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/contributors')@ApiOperation({operationId: 'getContributors', summary: 'Retrieves paginated contributors'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiPaginatedResponse(DbUser)@ApiOkResponse({type: DbUser})@ApiNotFoundResponse({description: 'Unable to get contributors'})@ApiBadRequestResponse({description: 'Invalid request'})\n                \n            \n\n            \n                \n                    Defined in src/user-lists/user-list.controller.ts:153\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                FilterListContributorsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getFeaturedLists\n                        \n                    \n                \n            \n            \n                \n                    \n                    getFeaturedLists(pageOptionsDto: PageOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/featured')@ApiOperation({operationId: 'getFeaturedLists', summary: 'Gets public featured lists'})@ApiOkResponse({type: DbUserList})\n                \n            \n\n            \n                \n                    Defined in src/user-lists/user-list.controller.ts:59\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getListsForUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    getListsForUser(userId: number, pageOptionsDto: PageOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/')@ApiOperation({operationId: 'getListsForUser', summary: 'Gets lists for the authenticated user'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOkResponse({type: DbUserList})@ApiNotFoundResponse({description: 'Unable to get user lists'})@ApiBadRequestResponse({description: 'Invalid request'})\n                \n            \n\n            \n                \n                    Defined in src/user-lists/user-list.controller.ts:46\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getTimezones\n                        \n                    \n                \n            \n            \n                \n                    \n                    getTimezones()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/timezones')@ApiOperation({operationId: 'getTimezones', summary: 'Retrieves all users timezones'})@ApiOkResponse({type: DbTimezone})@ApiNotFoundResponse({description: 'Unable to get timezones'})\n                \n            \n\n            \n                \n                    Defined in src/user-lists/user-list.controller.ts:256\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getUserList\n                        \n                    \n                \n            \n            \n                \n                    \n                    getUserList(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:id')@ApiOperation({operationId: 'getUserList', summary: 'Retrieves an individual user list'})@ApiOkResponse({type: DbUserList})@ApiNotFoundResponse({description: 'Unable to get user list'})@ApiBadRequestResponse({description: 'Invalid request'})@ApiParam({name: 'id', type: 'string'})\n                \n            \n\n            \n                \n                    Defined in src/user-lists/user-list.controller.ts:95\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getUserListContributorHighlightedRepos\n                        \n                    \n                \n            \n            \n                \n                    \n                    getUserListContributorHighlightedRepos(pageOptionsDto: PageOptionsDto, id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:id/contributors/highlights/tagged-repos')@ApiOperation({operationId: 'getUserListContributorHighlightedRepos', summary: 'Retrieves highlighted repos for contributors for an individual user list'})@ApiPaginatedResponse(DbUserHighlightRepo)@ApiOkResponse({type: DbUserHighlightRepo})@ApiNotFoundResponse({description: 'Unable to get user list contributor highlights'})@ApiBadRequestResponse({description: 'Invalid request'})@ApiParam({name: 'id', type: 'string'})\n                \n            \n\n            \n                \n                    Defined in src/user-lists/user-list.controller.ts:242\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getUserListContributorHighlights\n                        \n                    \n                \n            \n            \n                \n                    \n                    getUserListContributorHighlights(pageOptionsDto: HighlightOptionsDto, id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:id/contributors/highlights')@ApiOperation({operationId: 'getUserListContributorHighlights', summary: 'Retrieves highlights for contributors for an individual user list'})@ApiPaginatedResponse(DbUserHighlight)@ApiOkResponse({type: DbUserHighlight})@ApiNotFoundResponse({description: 'Unable to get user list contributor highlights'})@ApiBadRequestResponse({description: 'Invalid request'})@ApiParam({name: 'id', type: 'string'})\n                \n            \n\n            \n                \n                    Defined in src/user-lists/user-list.controller.ts:225\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                HighlightOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getUserListContributors\n                        \n                    \n                \n            \n            \n                \n                    \n                    getUserListContributors(pageOptionsDto: FilterListContributorsDto, id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:id/contributors')@ApiOperation({operationId: 'getUserListContributors', summary: 'Retrieves contributors for an individual user list'})@ApiPaginatedResponse(DbUserListContributor)@ApiOkResponse({type: DbUserListContributor})@ApiNotFoundResponse({description: 'Unable to get user list contributors'})@ApiBadRequestResponse({description: 'Invalid request'})@ApiParam({name: 'id', type: 'string'})\n                \n            \n\n            \n                \n                    Defined in src/user-lists/user-list.controller.ts:169\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                FilterListContributorsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        postUserListContributors\n                        \n                    \n                \n            \n            \n                \n                    \n                    postUserListContributors(updateCollaboratorsDto: CollaboratorsDto, id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/:id/contributors')@ApiOperation({operationId: 'postUserListContributors', summary: 'Add new contributors to an individual user list'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiNotFoundResponse({description: 'Unable to add to user list contributors'})@ApiBadRequestResponse({description: 'Invalid request'})@ApiParam({name: 'id', type: 'string'})\n                \n            \n\n            \n                \n                    Defined in src/user-lists/user-list.controller.ts:186\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    updateCollaboratorsDto\n                                    \n                                                CollaboratorsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateListForUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateListForUser(updateListDto: CreateUserListDto, userId: number, listId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch('/:id')@ApiOperation({operationId: 'updateListForUser', summary: 'Updates the list for the authenticated user'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOkResponse({type: DbUserList})@ApiNotFoundResponse({description: 'Unable to update user list'})@ApiBadRequestResponse({description: 'Invalid request'})@ApiBody({type: CreateUserListDto})@ApiParam({name: 'id', type: 'string'})\n                \n            \n\n            \n                \n                    Defined in src/user-lists/user-list.controller.ts:111\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    updateListDto\n                                    \n                                                CreateUserListDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    listId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Delete, Get, Param, Patch, Post, Query, UseGuards, ValidationPipe } from \"@nestjs/common\";\nimport {\n  ApiOperation,\n  ApiOkResponse,\n  ApiNotFoundResponse,\n  ApiBearerAuth,\n  ApiTags,\n  ApiBadRequestResponse,\n  ApiBody,\n  ApiParam,\n} from \"@nestjs/swagger\";\n\nimport { DbUserHighlightRepo } from \"../highlight/entities/user-highlight-repo.entity\";\nimport { DbUserHighlight } from \"../user/entities/user-highlight.entity\";\nimport { DbUser } from \"../user/user.entity\";\nimport { PageOptionsDto } from \"../common/dtos/page-options.dto\";\nimport { ApiPaginatedResponse } from \"../common/decorators/api-paginated-response.decorator\";\nimport { PageDto } from \"../common/dtos/page.dto\";\nimport { UserId } from \"../auth/supabase.user.decorator\";\nimport { SupabaseGuard } from \"../auth/supabase.guard\";\n\nimport { HighlightOptionsDto } from \"../highlight/dtos/highlight-options.dto\";\nimport { CreateUserListDto } from \"./dtos/create-user-list.dto\";\nimport { DbUserList } from \"./entities/user-list.entity\";\nimport { UserListService } from \"./user-list.service\";\nimport { DbUserListContributor } from \"./entities/user-list-contributor.entity\";\nimport { CollaboratorsDto } from \"./dtos/collaborators.dto\";\nimport { FilterListContributorsDto } from \"./dtos/filter-contributors.dto\";\nimport { DbTimezone } from \"./entities/timezones.entity\";\n\n@Controller(\"lists\")\n@ApiTags(\"User Lists service\")\nexport class UserListController {\n  constructor(private readonly userListService: UserListService) {}\n\n  @Get(\"/\")\n  @ApiOperation({\n    operationId: \"getListsForUser\",\n    summary: \"Gets lists for the authenticated user\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOkResponse({ type: DbUserList })\n  @ApiNotFoundResponse({ description: \"Unable to get user lists\" })\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  async getListsForUser(\n    @UserId() userId: number,\n    @Query() pageOptionsDto: PageOptionsDto\n  ): Promise> {\n    return this.userListService.findAllByUserId(pageOptionsDto, userId);\n  }\n\n  @Get(\"/featured\")\n  @ApiOperation({\n    operationId: \"getFeaturedLists\",\n    summary: \"Gets public featured lists\",\n  })\n  @ApiOkResponse({ type: DbUserList })\n  async getFeaturedLists(@Query() pageOptionsDto: PageOptionsDto): Promise> {\n    return this.userListService.findAllFeatured(pageOptionsDto);\n  }\n\n  @Post(\"/\")\n  @ApiOperation({\n    operationId: \"addListForUser\",\n    summary: \"Adds a new list for the authenticated user\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOkResponse({ type: DbUserList })\n  @ApiNotFoundResponse({ description: \"Unable to add user list\" })\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  @ApiBody({ type: CreateUserListDto })\n  async addListForUser(@Body() createUserListDto: CreateUserListDto, @UserId() userId: number): Promise {\n    const newList = await this.userListService.addUserList(userId, createUserListDto);\n\n    const listContributors = createUserListDto.contributors.map(async (contributor) =>\n      this.userListService.addUserListContributor(newList.id, contributor.id, contributor.login)\n    );\n\n    await Promise.allSettled(listContributors);\n\n    return newList;\n  }\n\n  @Get(\"/:id\")\n  @ApiOperation({\n    operationId: \"getUserList\",\n    summary: \"Retrieves an individual user list\",\n  })\n  @ApiOkResponse({ type: DbUserList })\n  @ApiNotFoundResponse({ description: \"Unable to get user list\" })\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  @ApiParam({ name: \"id\", type: \"string\" })\n  async getUserList(@Param(\"id\") id: string): Promise {\n    return this.userListService.findPublicOneById(id);\n  }\n\n  @Patch(\"/:id\")\n  @ApiOperation({\n    operationId: \"updateListForUser\",\n    summary: \"Updates the list for the authenticated user\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOkResponse({ type: DbUserList })\n  @ApiNotFoundResponse({ description: \"Unable to update user list\" })\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  @ApiBody({ type: CreateUserListDto })\n  @ApiParam({ name: \"id\", type: \"string\" })\n  async updateListForUser(\n    @Body() updateListDto: CreateUserListDto,\n    @UserId() userId: number,\n    @Param(\"id\") listId: string\n  ): Promise {\n    const list = await this.userListService.findOneById(listId, userId);\n\n    await this.userListService.updateUserList(list.id, {\n      name: updateListDto.name,\n      is_public: updateListDto.is_public,\n    });\n\n    return this.userListService.findOneById(list.id, userId);\n  }\n\n  @Delete(\"/:id\")\n  @ApiOperation({\n    operationId: \"deleteListForUser\",\n    summary: \"Deletes the list for the authenticated user\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiNotFoundResponse({ description: \"Unable to delete user list\" })\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  @ApiParam({ name: \"id\", type: \"string\" })\n  async deleteListForUser(@UserId() userId: number, @Param(\"id\") listId: string): Promise {\n    const list = await this.userListService.findOneById(listId, userId);\n\n    await this.userListService.deleteUserList(list.id);\n  }\n\n  @Get(\"/contributors\")\n  @ApiOperation({\n    operationId: \"getContributors\",\n    summary: \"Retrieves paginated contributors\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiPaginatedResponse(DbUser)\n  @ApiOkResponse({ type: DbUser })\n  @ApiNotFoundResponse({ description: \"Unable to get contributors\" })\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  async getContributors(\n    @Query(new ValidationPipe({ transform: true, forbidUnknownValues: true })) pageOptionsDto: FilterListContributorsDto\n  ): Promise> {\n    return this.userListService.findContributorsByFilter(pageOptionsDto);\n  }\n\n  @Get(\"/:id/contributors\")\n  @ApiOperation({\n    operationId: \"getUserListContributors\",\n    summary: \"Retrieves contributors for an individual user list\",\n  })\n  @ApiPaginatedResponse(DbUserListContributor)\n  @ApiOkResponse({ type: DbUserListContributor })\n  @ApiNotFoundResponse({ description: \"Unable to get user list contributors\" })\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  @ApiParam({ name: \"id\", type: \"string\" })\n  async getUserListContributors(\n    @Query() pageOptionsDto: FilterListContributorsDto,\n    @Param(\"id\") id: string\n  ): Promise> {\n    return this.userListService.findContributorsByListId(pageOptionsDto, id);\n  }\n\n  @Post(\"/:id/contributors\")\n  @ApiOperation({\n    operationId: \"postUserListContributors\",\n    summary: \"Add new contributors to an individual user list\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiNotFoundResponse({ description: \"Unable to add to user list contributors\" })\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  @ApiParam({ name: \"id\", type: \"string\" })\n  async postUserListContributors(\n    @Body() updateCollaboratorsDto: CollaboratorsDto,\n    @Param(\"id\") id: string\n  ): Promise {\n    const contributors = updateCollaboratorsDto.contributors.map(async (contributorId) =>\n      this.userListService.addUserListContributor(id, contributorId)\n    );\n\n    return Promise.all(contributors);\n  }\n\n  @Delete(\"/:id/contributors/:userListContributorId\")\n  @ApiOperation({\n    operationId: \"deleteUserListContributor\",\n    summary: \"Delete contributor from an individual user list\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiNotFoundResponse({ description: \"Unable to delete user from user list contributors\" })\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  @ApiParam({ name: \"id\", type: \"string\" })\n  @ApiParam({ name: \"userListContributorId\", type: \"integer\" })\n  async deleteUserListContributors(\n    @Param(\"id\") id: string,\n    @Param(\"userListContributorId\") userListContributorId: string\n  ): Promise {\n    await this.userListService.deleteUserListContributor(id, userListContributorId);\n  }\n\n  @Get(\"/:id/contributors/highlights\")\n  @ApiOperation({\n    operationId: \"getUserListContributorHighlights\",\n    summary: \"Retrieves highlights for contributors for an individual user list\",\n  })\n  @ApiPaginatedResponse(DbUserHighlight)\n  @ApiOkResponse({ type: DbUserHighlight })\n  @ApiNotFoundResponse({ description: \"Unable to get user list contributor highlights\" })\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  @ApiParam({ name: \"id\", type: \"string\" })\n  async getUserListContributorHighlights(\n    @Query() pageOptionsDto: HighlightOptionsDto,\n    @Param(\"id\") id: string\n  ): Promise> {\n    return this.userListService.findListContributorsHighlights(pageOptionsDto, id);\n  }\n\n  @Get(\"/:id/contributors/highlights/tagged-repos\")\n  @ApiOperation({\n    operationId: \"getUserListContributorHighlightedRepos\",\n    summary: \"Retrieves highlighted repos for contributors for an individual user list\",\n  })\n  @ApiPaginatedResponse(DbUserHighlightRepo)\n  @ApiOkResponse({ type: DbUserHighlightRepo })\n  @ApiNotFoundResponse({ description: \"Unable to get user list contributor highlights\" })\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  @ApiParam({ name: \"id\", type: \"string\" })\n  async getUserListContributorHighlightedRepos(\n    @Query() pageOptionsDto: PageOptionsDto,\n    @Param(\"id\") id: string\n  ): Promise> {\n    return this.userListService.findListContributorsHighlightedRepos(pageOptionsDto, id);\n  }\n\n  @Get(\"/timezones\")\n  @ApiOperation({\n    operationId: \"getTimezones\",\n    summary: \"Retrieves all users timezones\",\n  })\n  @ApiOkResponse({ type: DbTimezone })\n  @ApiNotFoundResponse({ description: \"Unable to get timezones\" })\n  async getTimezones(): Promise {\n    return this.userListService.getAllTimezones();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UserListModule.html":{"url":"modules/UserListModule.html","title":"module - UserListModule","body":"\n                   \n\n\n\n\n    Modules\n    UserListModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_UserListModule\n\n\n\ncluster_UserListModule_exports\n\n\n\ncluster_UserListModule_imports\n\n\n\ncluster_UserListModule_providers\n\n\n\n\nApiServicesModule\n\nApiServicesModule\n\n\n\nUserListModule\n\nUserListModule\n\nUserListModule -->\n\nApiServicesModule->UserListModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nUserListModule -->\n\nUserModule->UserListModule\n\n\n\n\n\nUserListService \n\nUserListService \n\nUserListService  -->\n\nUserListModule->UserListService \n\n\n\n\n\nUserListStatsService \n\nUserListStatsService \n\nUserListStatsService  -->\n\nUserListModule->UserListStatsService \n\n\n\n\n\nUserListService\n\nUserListService\n\nUserListModule -->\n\nUserListService->UserListModule\n\n\n\n\n\nUserListStatsService\n\nUserListStatsService\n\nUserListModule -->\n\nUserListStatsService->UserListModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/user-lists/user-list.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UserListService\n                        \n                        \n                            UserListStatsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UserListController\n                        \n                        \n                            UserListStatsController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            ApiServicesModule\n                        \n                        \n                            UserModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UserListService\n                        \n                        \n                            UserListStatsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\n\nimport { UserModule } from \"../user/user.module\";\nimport { ApiServicesModule } from \"../common/services/api-services.module\";\nimport { DbUser } from \"../user/user.entity\";\nimport { DbPullRequest } from \"../pull-requests/entities/pull-request.entity\";\nimport { DbUserHighlight } from \"../user/entities/user-highlight.entity\";\nimport { DbUserListContributor } from \"./entities/user-list-contributor.entity\";\nimport { DbUserList } from \"./entities/user-list.entity\";\nimport { UserListService } from \"./user-list.service\";\nimport { UserListController } from \"./user-list.controller\";\nimport { UserListStatsService } from \"./user-list-stat.service\";\nimport { UserListStatsController } from \"./user-list-stats.controller\";\nimport { DbUserListContributorStat } from \"./entities/user-list-contributor-stats.entity\";\nimport { DbContributionStatTimeframe } from \"./entities/contributions-timeframe.entity\";\nimport { DbContributorCategoryTimeframe } from \"./entities/contributors-timeframe.entity\";\n\n@Module({\n  imports: [\n    ApiServicesModule,\n    UserModule,\n    TypeOrmModule.forFeature(\n      [\n        DbUser,\n        DbUserList,\n        DbUserHighlight,\n        DbPullRequest,\n        DbUserListContributor,\n        DbUserListContributorStat,\n        DbContributionStatTimeframe,\n        DbContributorCategoryTimeframe,\n      ],\n      \"ApiConnection\"\n    ),\n  ],\n  controllers: [UserListController, UserListStatsController],\n  providers: [UserListService, UserListStatsService],\n  exports: [UserListService, UserListStatsService],\n})\nexport class UserListModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserListMostActiveContributorsDto.html":{"url":"classes/UserListMostActiveContributorsDto.html","title":"class - UserListMostActiveContributorsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserListMostActiveContributorsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user-lists/dtos/most-active-contributors.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PageOptionsDto\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                contributorType\n                            \n                            \n                                    Readonly\n                                    Optional\n                                orderBy\n                            \n                            \n                                    Readonly\n                                    Optional\n                                limit\n                            \n                            \n                                    Readonly\n                                    Optional\n                                orderDirection\n                            \n                            \n                                    Readonly\n                                    Optional\n                                page\n                            \n                            \n                                    Readonly\n                                    Optional\n                                prev_days_start_date\n                            \n                            \n                                    Readonly\n                                    Optional\n                                range\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        contributorType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserListContributorStatsTypeEnum\n\n                    \n                \n                \n                    \n                        Default value : UserListContributorStatsTypeEnum.all\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: UserListContributorStatsTypeEnum, enumName: 'UserListContributorStatsTypeEnum', default: undefined})@IsEnum(UserListContributorStatsTypeEnum)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-lists/dtos/most-active-contributors.dto.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        orderBy\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserListContributorStatsOrderEnum\n\n                    \n                \n                \n                    \n                        Default value : UserListContributorStatsOrderEnum.commits\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: UserListContributorStatsOrderEnum, enumName: 'UserListContributorStatsOrderEnum', default: undefined})@IsEnum(UserListContributorStatsOrderEnum)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-lists/dtos/most-active-contributors.dto.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 50\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, maximum: 1000, default: 10, type: 'integer'})@Type(undefined)@IsInt()@Min(1)@Max(10000)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:30\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        orderDirection\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OrderDirectionEnum\n\n                    \n                \n                \n                    \n                        Default value : OrderDirectionEnum.DESC\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: OrderDirectionEnum, enumName: 'OrderDirectionEnum', default: undefined})@IsEnum(OrderDirectionEnum)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:35\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, default: 1, type: 'integer'})@Type(undefined)@IsInt()@Min(1)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:17\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        prev_days_start_date\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 0\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Number of days in the past to start range block', default: 0, type: 'integer'})@Type(undefined)@IsIn(['0', '7', '30', '90'])@IsInt()@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:57\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        range\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 30\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Range in days', default: 30, type: 'integer'})@Type(undefined)@IsIn(['7', '30', '90'])@IsInt()@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:46\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEnum, IsOptional } from \"class-validator\";\n\nimport { ApiPropertyOptional } from \"@nestjs/swagger\";\nimport { PageOptionsDto } from \"../../common/dtos/page-options.dto\";\n\nexport enum UserListContributorStatsOrderEnum {\n  commits = \"commits\",\n  prs_created = \"prs_created\",\n  total_contributions = \"total_contributions\",\n}\n\nexport enum UserListContributorStatsTypeEnum {\n  all = \"all\",\n  active = \"active\",\n  new = \"new\",\n  alumni = \"alumni\",\n}\n\nexport class UserListMostActiveContributorsDto extends PageOptionsDto {\n  @ApiPropertyOptional({\n    enum: UserListContributorStatsTypeEnum,\n    enumName: \"UserListContributorStatsTypeEnum\",\n    default: UserListContributorStatsTypeEnum.all,\n  })\n  @IsEnum(UserListContributorStatsTypeEnum)\n  @IsOptional()\n  contributorType?: UserListContributorStatsTypeEnum = UserListContributorStatsTypeEnum.all;\n\n  @ApiPropertyOptional({\n    enum: UserListContributorStatsOrderEnum,\n    enumName: \"UserListContributorStatsOrderEnum\",\n    default: UserListContributorStatsOrderEnum.commits,\n  })\n  @IsEnum(UserListContributorStatsOrderEnum)\n  @IsOptional()\n  readonly orderBy?: UserListContributorStatsOrderEnum = UserListContributorStatsOrderEnum.commits;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserListService.html":{"url":"injectables/UserListService.html","title":"injectable - UserListService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserListService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user-lists/user-list.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addUserList\n                            \n                            \n                                    Async\n                                addUserListContributor\n                            \n                            \n                                baseListContributorQueryBuilder\n                            \n                            \n                                baseQueryBuilder\n                            \n                            \n                                baseUserQueryBuilder\n                            \n                            \n                                    Async\n                                deleteUserList\n                            \n                            \n                                    Async\n                                deleteUserListContributor\n                            \n                            \n                                    Async\n                                findAllByUserId\n                            \n                            \n                                    Async\n                                findAllFeatured\n                            \n                            \n                                    Async\n                                findContributorsByFilter\n                            \n                            \n                                    Async\n                                findContributorsByListId\n                            \n                            \n                                    Async\n                                findListContributorsHighlightedRepos\n                            \n                            \n                                    Async\n                                findListContributorsHighlights\n                            \n                            \n                                    Async\n                                findOneById\n                            \n                            \n                                    Async\n                                findPublicOneById\n                            \n                            \n                                    Async\n                                getAllTimezones\n                            \n                            \n                                    Async\n                                updateUserList\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userListRepository: Repository, userListContributorRepository: Repository, userHighlightRepository: Repository, userRepository: Repository, pagerService: PagerService)\n                    \n                \n                        \n                            \n                                Defined in src/user-lists/user-list.service.ts:22\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userListRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userListContributorRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userHighlightRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        pagerService\n                                                  \n                                                        \n                                                                        PagerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addUserList\n                        \n                    \n                \n            \n            \n                \n                    \n                    addUserList(userId: number, list: CreateUserListDto)\n                \n            \n\n\n            \n                \n                    Defined in src/user-lists/user-list.service.ts:117\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    list\n                                    \n                                                CreateUserListDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addUserListContributor\n                        \n                    \n                \n            \n            \n                \n                    \n                    addUserListContributor(listId: string, userId: number, username?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/user-lists/user-list.service.ts:127\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    listId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        baseListContributorQueryBuilder\n                        \n                    \n                \n            \n            \n                \nbaseListContributorQueryBuilder()\n                \n            \n\n\n            \n                \n                    Defined in src/user-lists/user-list.service.ts:41\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         SelectQueryBuilder\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        baseQueryBuilder\n                        \n                    \n                \n            \n            \n                \nbaseQueryBuilder()\n                \n            \n\n\n            \n                \n                    Defined in src/user-lists/user-list.service.ts:35\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         SelectQueryBuilder\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        baseUserQueryBuilder\n                        \n                    \n                \n            \n            \n                \nbaseUserQueryBuilder()\n                \n            \n\n\n            \n                \n                    Defined in src/user-lists/user-list.service.ts:47\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         SelectQueryBuilder\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteUserList\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteUserList(listId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/user-lists/user-list.service.ts:167\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    listId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteUserListContributor\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteUserListContributor(id: string, userListContributorId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/user-lists/user-list.service.ts:148\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userListContributorId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllByUserId\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllByUserId(pageOptionsDto: PageOptionsDto, userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/user-lists/user-list.service.ts:95\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllFeatured\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllFeatured(pageOptionsDto: PageOptionsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/user-lists/user-list.service.ts:106\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findContributorsByFilter\n                        \n                    \n                \n            \n            \n                \n                    \n                    findContributorsByFilter(pageOptionsDto: FilterListContributorsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/user-lists/user-list.service.ts:171\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                FilterListContributorsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findContributorsByListId\n                        \n                    \n                \n            \n            \n                \n                    \n                    findContributorsByListId(pageOptionsDto: FilterListContributorsDto, listId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/user-lists/user-list.service.ts:219\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                FilterListContributorsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    listId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findListContributorsHighlightedRepos\n                        \n                    \n                \n            \n            \n                \n                    \n                    findListContributorsHighlightedRepos(pageOptionsDto: PageOptionsDto, listId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/user-lists/user-list.service.ts:290\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    listId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findListContributorsHighlights\n                        \n                    \n                \n            \n            \n                \n                    \n                    findListContributorsHighlights(pageOptionsDto: HighlightOptionsDto, listId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/user-lists/user-list.service.ts:242\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                HighlightOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    listId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneById(id: string, userId?: number)\n                \n            \n\n\n            \n                \n                    Defined in src/user-lists/user-list.service.ts:53\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findPublicOneById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findPublicOneById(id: string, userId?: number)\n                \n            \n\n\n            \n                \n                    Defined in src/user-lists/user-list.service.ts:74\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAllTimezones\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllTimezones()\n                \n            \n\n\n            \n                \n                    Defined in src/user-lists/user-list.service.ts:319\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateUserList\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateUserList(listId: string, highlight: Partial)\n                \n            \n\n\n            \n                \n                    Defined in src/user-lists/user-list.service.ts:163\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    listId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    highlight\n                                    \n                                                Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException, UnauthorizedException } from \"@nestjs/common\";\nimport { Repository, SelectQueryBuilder } from \"typeorm\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\n\nimport { DbUserHighlightRepo } from \"../highlight/entities/user-highlight-repo.entity\";\nimport { DbPullRequest } from \"../pull-requests/entities/pull-request.entity\";\nimport { PageOptionsDto } from \"../common/dtos/page-options.dto\";\nimport { PageDto } from \"../common/dtos/page.dto\";\nimport { PagerService } from \"../common/services/pager.service\";\nimport { DbUser } from \"../user/user.entity\";\nimport { PageMetaDto } from \"../common/dtos/page-meta.dto\";\nimport { HighlightOptionsDto } from \"../highlight/dtos/highlight-options.dto\";\nimport { DbUserHighlight } from \"../user/entities/user-highlight.entity\";\nimport { GetPrevDateISOString } from \"../common/util/datetimes\";\nimport { CreateUserListDto } from \"./dtos/create-user-list.dto\";\nimport { DbUserList } from \"./entities/user-list.entity\";\nimport { DbUserListContributor } from \"./entities/user-list-contributor.entity\";\nimport { FilterListContributorsDto } from \"./dtos/filter-contributors.dto\";\nimport { DbTimezone } from \"./entities/timezones.entity\";\n\n@Injectable()\nexport class UserListService {\n  constructor(\n    @InjectRepository(DbUserList, \"ApiConnection\")\n    private userListRepository: Repository,\n    @InjectRepository(DbUserListContributor, \"ApiConnection\")\n    private userListContributorRepository: Repository,\n    @InjectRepository(DbUserHighlight, \"ApiConnection\")\n    private userHighlightRepository: Repository,\n    @InjectRepository(DbUser, \"ApiConnection\")\n    private userRepository: Repository,\n    private pagerService: PagerService\n  ) {}\n\n  baseQueryBuilder(): SelectQueryBuilder {\n    const builder = this.userListRepository.createQueryBuilder(\"user_lists\");\n\n    return builder;\n  }\n\n  baseListContributorQueryBuilder(): SelectQueryBuilder {\n    const builder = this.userListContributorRepository.createQueryBuilder(\"user_list_contributors\");\n\n    return builder;\n  }\n\n  baseUserQueryBuilder(): SelectQueryBuilder {\n    const builder = this.userRepository.createQueryBuilder(\"users\");\n\n    return builder;\n  }\n\n  async findOneById(id: string, userId?: number): Promise {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .innerJoin(\"users\", \"users\", \"user_lists.user_id=users.id\")\n      .addSelect(\"users.login\", \"user_lists_login\")\n      .where(\"user_lists.id = :id\", { id });\n\n    if (userId) {\n      queryBuilder.andWhere(\"user_lists.user_id = :userId\", { userId });\n    }\n\n    const item: DbUserList | null = await queryBuilder.getOne();\n\n    if (!item) {\n      throw new NotFoundException();\n    }\n\n    return item;\n  }\n\n  async findPublicOneById(id: string, userId?: number): Promise {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .innerJoin(\"users\", \"users\", \"user_lists.user_id=users.id\")\n      .addSelect(\"users.login\", \"user_lists_login\")\n      .where(\"user_lists.id = :id\", { id });\n\n    const item: DbUserList | null = await queryBuilder.getOne();\n\n    if (!item) {\n      throw new NotFoundException();\n    }\n\n    if (!item.is_public && userId && userId !== item.user_id) {\n      throw new UnauthorizedException(\"You're not authorized to view this list\");\n    }\n\n    return item;\n  }\n\n  async findAllByUserId(pageOptionsDto: PageOptionsDto, userId: number): Promise> {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder.where(\"user_lists.user_id = :userId\", { userId }).orderBy(\"user_lists.updated_at\", \"DESC\");\n\n    return this.pagerService.applyPagination({\n      pageOptionsDto,\n      queryBuilder,\n    });\n  }\n\n  async findAllFeatured(pageOptionsDto: PageOptionsDto): Promise> {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder.where(\"is_featured=true\").andWhere(\"is_public=true\").orderBy(\"user_lists.updated_at\", \"DESC\");\n\n    return this.pagerService.applyPagination({\n      pageOptionsDto,\n      queryBuilder,\n    });\n  }\n\n  async addUserList(userId: number, list: CreateUserListDto) {\n    const newUserList = this.userListRepository.create({\n      user_id: userId,\n      name: list.name,\n      is_public: list.is_public,\n    });\n\n    return this.userListRepository.save(newUserList);\n  }\n\n  async addUserListContributor(listId: string, userId: number, username?: string) {\n    const existingContributor = await this.userListContributorRepository.findOne({\n      where: {\n        list_id: listId,\n        user_id: userId,\n      },\n    });\n\n    if (existingContributor) {\n      return existingContributor;\n    }\n\n    const newUserListContributor = this.userListContributorRepository.create({\n      list_id: listId,\n      user_id: userId,\n      username,\n    });\n\n    return this.userListContributorRepository.save(newUserListContributor);\n  }\n\n  async deleteUserListContributor(id: string, userListContributorId: string) {\n    const contributor = await this.userListContributorRepository.findOne({\n      where: {\n        id: userListContributorId,\n        list_id: id,\n      },\n    });\n\n    if (contributor) {\n      return this.userListContributorRepository.softDelete(userListContributorId);\n    }\n\n    throw new NotFoundException(\"User list contributor not found for given list ID\");\n  }\n\n  async updateUserList(listId: string, highlight: Partial) {\n    return this.userListRepository.update(listId, highlight);\n  }\n\n  async deleteUserList(listId: string) {\n    return this.userListRepository.softDelete(listId);\n  }\n\n  async findContributorsByFilter(pageOptionsDto: FilterListContributorsDto): Promise> {\n    const queryBuilder = this.userRepository.createQueryBuilder(\"user\");\n\n    queryBuilder.leftJoin(\n      (qb) =>\n        qb\n          .select(\"author_login\")\n          .addSelect(\n            \"COALESCE(AVG((pull_requests.merged_at::DATE - pull_requests.created_at::DATE)), 0)\",\n            \"avg_merge_time\"\n          )\n          .from(DbPullRequest, \"pull_requests\")\n          .where(\"now() - INTERVAL '30 days' > {\n    const queryBuilder = this.userListContributorRepository.createQueryBuilder(\"user_list_contributors\");\n\n    queryBuilder\n      .leftJoin(\"users\", \"users\", \"user_list_contributors.user_id=users.id\")\n      .addSelect(\"users.login\", \"user_list_contributors_login\")\n      .where(\"user_list_contributors.list_id = :listId\", { listId });\n\n    if (pageOptionsDto.contributor) {\n      queryBuilder.andWhere(\"LOWER(users.login) LIKE :contributor\", {\n        contributor: `%${pageOptionsDto.contributor.toLowerCase()}%`,\n      });\n    }\n\n    return this.pagerService.applyPagination({\n      pageOptionsDto,\n      queryBuilder,\n    });\n  }\n\n  async findListContributorsHighlights(\n    pageOptionsDto: HighlightOptionsDto,\n    listId: string\n  ): Promise> {\n    const startDate = GetPrevDateISOString(pageOptionsDto.prev_days_start_date);\n    const range = pageOptionsDto.range ?? 30;\n    const orderBy = pageOptionsDto.orderDirection ?? \"DESC\";\n    const queryBuilder = this.userHighlightRepository.createQueryBuilder(\"user_highlights\");\n\n    // return all highlights that belongs to a contributor of the list id\n    queryBuilder\n      .innerJoin(\n        \"user_list_contributors\",\n        \"user_list_contributors\",\n        \"user_list_contributors.user_id = user_highlights.user_id\"\n      )\n      .innerJoin(\"users\", \"users\", \"user_highlights.user_id=users.id\")\n      .addSelect(\"users.name\", \"user_highlights_name\")\n      .addSelect(\"users.login\", \"user_highlights_login\")\n      .where(\"user_list_contributors.list_id = :listId\", { listId })\n      .andWhere(`'${startDate}'::TIMESTAMP - INTERVAL '${range} days' > {\n    const startDate = GetPrevDateISOString(pageOptionsDto.prev_days_start_date);\n    const range = pageOptionsDto.range ?? 30;\n    const orderBy = pageOptionsDto.orderDirection ?? \"DESC\";\n    const queryBuilder = this.userHighlightRepository.createQueryBuilder(\"user_highlights\");\n\n    queryBuilder.select(\"DISTINCT UNNEST(user_highlights.tagged_repos) AS full_name\");\n\n    queryBuilder\n      .innerJoin(\n        \"user_list_contributors\",\n        \"user_list_contributors\",\n        \"user_list_contributors.user_id = user_highlights.user_id\"\n      )\n      .where(\"user_list_contributors.list_id = :listId\", { listId })\n      .andWhere(`'${startDate}'::TIMESTAMP - INTERVAL '${range} days'  {\n    const queryBuilder = this.baseUserQueryBuilder();\n\n    queryBuilder\n      .select(\"DISTINCT users.timezone as timezone\")\n      .where(\"users.timezone IS NOT NULL\")\n      .andWhere(\"users.timezone != ''\");\n\n    const timezones: DbTimezone[] = await queryBuilder.getRawMany();\n\n    return timezones;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserListStatsController.html":{"url":"controllers/UserListStatsController.html","title":"controller - UserListStatsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserListStatsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user-lists/user-list-stats.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                lists\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getContributionsByProject\n                            \n                            \n                                    Async\n                                getContributionsByTimeframe\n                            \n                            \n                                    Async\n                                getContributionsByTimeFrame\n                            \n                            \n                                    Async\n                                getContributorContributionsByProject\n                            \n                            \n                                    Async\n                                getMostActiveContributors\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getContributionsByProject\n                        \n                    \n                \n            \n            \n                \n                    \n                    getContributionsByProject(id: string, options: ContributionsByProjectDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id/stats/contributions-by-project')@ApiOperation({operationId: 'getContributionsByProject', summary: 'Gets contributions in a given timeframe'})@ApiOkResponse({type: DbContributionsProjects})@ApiNotFoundResponse({description: 'Unable to get contributions by project'})@ApiBadRequestResponse({description: 'Invalid request'})@ApiParam({name: 'id', type: 'string'})@ApiQuery({name: 'range', type: 'integer', required: false})\n                \n            \n\n            \n                \n                    Defined in src/user-lists/user-list-stats.controller.ts:73\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                ContributionsByProjectDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getContributionsByTimeframe\n                        \n                    \n                \n            \n            \n                \n                    \n                    getContributionsByTimeframe(id: string, options: ContributionsTimeframeDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id/stats/contributions-evolution-by-contributor-type')@ApiOperation({operationId: 'getContributorsByTimeframe', summary: 'Gets contributions by category within timeframe'})@ApiOkResponse({type: DbContributorCategoryTimeframe})@ApiNotFoundResponse({description: 'Unable to get contributions'})@ApiBadRequestResponse({description: 'Invalid request'})@ApiParam({name: 'id', type: 'string'})\n                \n            \n\n            \n                \n                    Defined in src/user-lists/user-list-stats.controller.ts:105\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                ContributionsTimeframeDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getContributionsByTimeFrame\n                        \n                    \n                \n            \n            \n                \n                    \n                    getContributionsByTimeFrame(id: string, options: ContributionsTimeframeDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id/stats/contributions-evolution-by-type')@ApiOperation({operationId: 'getContributionsByTimeFrame', summary: 'Gets contributions in a given timeframe'})@ApiOkResponse({type: DbContributionStatTimeframe})@ApiNotFoundResponse({description: 'Unable to get contributions'})@ApiBadRequestResponse({description: 'Invalid request'})@ApiParam({name: 'id', type: 'string'})\n                \n            \n\n            \n                \n                    Defined in src/user-lists/user-list-stats.controller.ts:56\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                ContributionsTimeframeDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getContributorContributionsByProject\n                        \n                    \n                \n            \n            \n                \n                    \n                    getContributorContributionsByProject(id: string, options: TopProjectsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id/stats/top-project-contributions-by-contributor/')@ApiOperation({operationId: 'getContributorContributionsByProject', summary: 'Gets top 20 contributor stats in a list by a given project'})@ApiOkResponse({type: DbUserListContributorStat})@ApiNotFoundResponse({description: 'Unable to get contributions'})@ApiBadRequestResponse({description: 'Invalid request'})@ApiParam({name: 'id', type: 'string'})\n                \n            \n\n            \n                \n                    Defined in src/user-lists/user-list-stats.controller.ts:89\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                TopProjectsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getMostActiveContributors\n                        \n                    \n                \n            \n            \n                \n                    \n                    getMostActiveContributors(id: string, pageOptionsDto: UserListMostActiveContributorsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id/stats/most-active-contributors')@ApiOperation({operationId: 'getMostActiveContributors', summary: 'Gets most active contributors for a given list'})@ApiPaginatedResponse(DbUserListContributorStat)@ApiOkResponse({type: DbUserListContributorStat})@ApiNotFoundResponse({description: 'Unable to get list most active contributors'})@ApiBadRequestResponse({description: 'Invalid request'})@ApiParam({name: 'id', type: 'string'})\n                \n            \n\n            \n                \n                    Defined in src/user-lists/user-list-stats.controller.ts:40\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                UserListMostActiveContributorsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Param, Query } from \"@nestjs/common\";\nimport {\n  ApiOperation,\n  ApiOkResponse,\n  ApiNotFoundResponse,\n  ApiTags,\n  ApiBadRequestResponse,\n  ApiParam,\n  ApiQuery,\n} from \"@nestjs/swagger\";\n\nimport { PageDto } from \"../common/dtos/page.dto\";\n\nimport { ApiPaginatedResponse } from \"../common/decorators/api-paginated-response.decorator\";\nimport { UserListMostActiveContributorsDto } from \"./dtos/most-active-contributors.dto\";\nimport { DbUserListContributorStat } from \"./entities/user-list-contributor-stats.entity\";\nimport { UserListStatsService } from \"./user-list-stat.service\";\nimport { DbContributionStatTimeframe } from \"./entities/contributions-timeframe.entity\";\nimport { ContributionsTimeframeDto } from \"./dtos/contributions-timeframe.dto\";\nimport { DbContributionsProjects } from \"./entities/contributions-projects.entity\";\nimport { DbContributorCategoryTimeframe } from \"./entities/contributors-timeframe.entity\";\nimport { ContributionsByProjectDto } from \"./dtos/contributions-by-project.dto\";\nimport { TopProjectsDto } from \"./dtos/top-projects.dto\";\n\n@Controller(\"lists\")\n@ApiTags(\"User Lists service\")\nexport class UserListStatsController {\n  constructor(private readonly userListStatsService: UserListStatsService) {}\n\n  @Get(\":id/stats/most-active-contributors\")\n  @ApiOperation({\n    operationId: \"getMostActiveContributors\",\n    summary: \"Gets most active contributors for a given list\",\n  })\n  @ApiPaginatedResponse(DbUserListContributorStat)\n  @ApiOkResponse({ type: DbUserListContributorStat })\n  @ApiNotFoundResponse({ description: \"Unable to get list most active contributors\" })\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  @ApiParam({ name: \"id\", type: \"string\" })\n  async getMostActiveContributors(\n    @Param(\"id\") id: string,\n    @Query() pageOptionsDto: UserListMostActiveContributorsDto\n  ): Promise> {\n    return this.userListStatsService.findAllListContributorStats(pageOptionsDto, id);\n  }\n\n  @Get(\":id/stats/contributions-evolution-by-type\")\n  @ApiOperation({\n    operationId: \"getContributionsByTimeFrame\",\n    summary: \"Gets contributions in a given timeframe\",\n  })\n  @ApiOkResponse({ type: DbContributionStatTimeframe })\n  @ApiNotFoundResponse({ description: \"Unable to get contributions\" })\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  @ApiParam({ name: \"id\", type: \"string\" })\n  async getContributionsByTimeFrame(\n    @Param(\"id\") id: string,\n    @Query() options: ContributionsTimeframeDto\n  ): Promise {\n    return this.userListStatsService.findContributionsInTimeframe(options, id);\n  }\n\n  @Get(\":id/stats/contributions-by-project\")\n  @ApiOperation({\n    operationId: \"getContributionsByProject\",\n    summary: \"Gets contributions in a given timeframe\",\n  })\n  @ApiOkResponse({ type: DbContributionsProjects })\n  @ApiNotFoundResponse({ description: \"Unable to get contributions by project\" })\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  @ApiParam({ name: \"id\", type: \"string\" })\n  @ApiQuery({ name: \"range\", type: \"integer\", required: false })\n  async getContributionsByProject(\n    @Param(\"id\") id: string,\n    @Query() options: ContributionsByProjectDto\n  ): Promise {\n    return this.userListStatsService.findContributionsByProject(id, options);\n  }\n\n  @Get(\":id/stats/top-project-contributions-by-contributor/\")\n  @ApiOperation({\n    operationId: \"getContributorContributionsByProject\",\n    summary: \"Gets top 20 contributor stats in a list by a given project\",\n  })\n  @ApiOkResponse({ type: DbUserListContributorStat })\n  @ApiNotFoundResponse({ description: \"Unable to get contributions\" })\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  @ApiParam({ name: \"id\", type: \"string\" })\n  async getContributorContributionsByProject(\n    @Param(\"id\") id: string,\n    @Query() options: TopProjectsDto\n  ): Promise {\n    return this.userListStatsService.findListContributorStatsByProject(options, id);\n  }\n\n  @Get(\":id/stats/contributions-evolution-by-contributor-type\")\n  @ApiOperation({\n    operationId: \"getContributorsByTimeframe\",\n    summary: \"Gets contributions by category within timeframe\",\n  })\n  @ApiOkResponse({ type: DbContributorCategoryTimeframe })\n  @ApiNotFoundResponse({ description: \"Unable to get contributions\" })\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  @ApiParam({ name: \"id\", type: \"string\" })\n  async getContributionsByTimeframe(\n    @Param(\"id\") id: string,\n    @Query() options: ContributionsTimeframeDto\n  ): Promise {\n    return this.userListStatsService.findContributorCategoriesByTimeframe(options, id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserListStatsService.html":{"url":"injectables/UserListStatsService.html","title":"injectable - UserListStatsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserListStatsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user-lists/user-list-stat.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                applyActiveContributorsFilter\n                            \n                            \n                                    Private\n                                applyAlumniContributorsFilter\n                            \n                            \n                                    Private\n                                applyNewContributorsFilter\n                            \n                            \n                                baseQueryBuilder\n                            \n                            \n                                    Async\n                                findAllListContributorStats\n                            \n                            \n                                    Async\n                                findContributionsByProject\n                            \n                            \n                                    Async\n                                findContributionsInTimeframe\n                            \n                            \n                                    Async\n                                findContributionsInTimeframeHelper\n                            \n                            \n                                    Async\n                                findContributorCategoriesByTimeframe\n                            \n                            \n                                    Async\n                                findContributorCategoriesInTimeframeHelper\n                            \n                            \n                                    Async\n                                findListContributorStatsByProject\n                            \n                            \n                                getDateFrames\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userListContributorRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/user-lists/user-list-stat.service.ts:27\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userListContributorRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        applyActiveContributorsFilter\n                        \n                    \n                \n            \n            \n                \n                    \n                    applyActiveContributorsFilter(queryBuilder: SelectQueryBuilder, startDate: string, range: number)\n                \n            \n\n\n            \n                \n                    Defined in src/user-lists/user-list-stat.service.ts:402\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    queryBuilder\n                                    \n                                                SelectQueryBuilder\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    startDate\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    range\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        30\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        applyAlumniContributorsFilter\n                        \n                    \n                \n            \n            \n                \n                    \n                    applyAlumniContributorsFilter(queryBuilder: SelectQueryBuilder, startDate: string, range: number)\n                \n            \n\n\n            \n                \n                    Defined in src/user-lists/user-list-stat.service.ts:462\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    queryBuilder\n                                    \n                                                SelectQueryBuilder\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    startDate\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    range\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        30\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        applyNewContributorsFilter\n                        \n                    \n                \n            \n            \n                \n                    \n                    applyNewContributorsFilter(queryBuilder: SelectQueryBuilder, startDate: string, range: number)\n                \n            \n\n\n            \n                \n                    Defined in src/user-lists/user-list-stat.service.ts:432\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    queryBuilder\n                                    \n                                                SelectQueryBuilder\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    startDate\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    range\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        30\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        baseQueryBuilder\n                        \n                    \n                \n            \n            \n                \nbaseQueryBuilder()\n                \n            \n\n\n            \n                \n                    Defined in src/user-lists/user-list-stat.service.ts:33\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         SelectQueryBuilder\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllListContributorStats\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllListContributorStats(pageOptionsDto: UserListMostActiveContributorsDto, listId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/user-lists/user-list-stat.service.ts:82\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                UserListMostActiveContributorsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    listId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findContributionsByProject\n                        \n                    \n                \n            \n            \n                \n                    \n                    findContributionsByProject(listId: string, options: ContributionsByProjectDto)\n                \n            \n\n\n            \n                \n                    Defined in src/user-lists/user-list-stat.service.ts:363\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    listId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                ContributionsByProjectDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findContributionsInTimeframe\n                        \n                    \n                \n            \n            \n                \n                    \n                    findContributionsInTimeframe(options: ContributionsTimeframeDto, listId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/user-lists/user-list-stat.service.ts:206\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                ContributionsTimeframeDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    listId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findContributionsInTimeframeHelper\n                        \n                    \n                \n            \n            \n                \n                    \n                    findContributionsInTimeframeHelper(startDate: string, range: number, contributorType: string, listId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/user-lists/user-list-stat.service.ts:236\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    startDate\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    range\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    contributorType\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    listId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findContributorCategoriesByTimeframe\n                        \n                    \n                \n            \n            \n                \n                    \n                    findContributorCategoriesByTimeframe(options: ContributionsTimeframeDto, listId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/user-lists/user-list-stat.service.ts:191\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                ContributionsTimeframeDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    listId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findContributorCategoriesInTimeframeHelper\n                        \n                    \n                \n            \n            \n                \n                    \n                    findContributorCategoriesInTimeframeHelper(startDate: string, range: number, listId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/user-lists/user-list-stat.service.ts:312\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    startDate\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    range\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    listId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findListContributorStatsByProject\n                        \n                    \n                \n            \n            \n                \n                    \n                    findListContributorStatsByProject(options: TopProjectsDto, listId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/user-lists/user-list-stat.service.ts:39\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                TopProjectsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    listId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getDateFrames\n                        \n                    \n                \n            \n            \n                \ngetDateFrames(range: number, denominator: number)\n                \n            \n\n\n            \n                \n                    Defined in src/user-lists/user-list-stat.service.ts:221\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    range\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        30\n                                    \n\n                                \n                                \n                                    denominator\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        7\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Date[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from \"@nestjs/common\";\nimport { Repository, SelectQueryBuilder } from \"typeorm\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\n\nimport { PageDto } from \"../common/dtos/page.dto\";\nimport { DbUserListContributor } from \"./entities/user-list-contributor.entity\";\nimport { DbUserListContributorStat } from \"./entities/user-list-contributor-stats.entity\";\nimport {\n  UserListContributorStatsOrderEnum,\n  UserListContributorStatsTypeEnum,\n  UserListMostActiveContributorsDto,\n} from \"./dtos/most-active-contributors.dto\";\nimport { ContributionsTimeframeDto } from \"./dtos/contributions-timeframe.dto\";\nimport { DbContributionStatTimeframe } from \"./entities/contributions-timeframe.entity\";\nimport { DbContributionsProjects } from \"./entities/contributions-projects.entity\";\nimport { DbContributorCategoryTimeframe } from \"./entities/contributors-timeframe.entity\";\nimport { ContributionPageMetaDto as ContributionsPageMetaDto } from \"./dtos/contributions-pagemeta.dto\";\nimport { ContributionsPageDto } from \"./dtos/contributions-page.dto\";\nimport { ContributionsByProjectDto } from \"./dtos/contributions-by-project.dto\";\nimport { TopProjectsDto } from \"./dtos/top-projects.dto\";\n\ninterface AllContributionsCount {\n  all_contributions: number;\n}\n\n@Injectable()\nexport class UserListStatsService {\n  constructor(\n    @InjectRepository(DbUserListContributor, \"ApiConnection\")\n    private userListContributorRepository: Repository\n  ) {}\n\n  baseQueryBuilder(): SelectQueryBuilder {\n    const builder = this.userListContributorRepository.createQueryBuilder(\"user_list_contributors\");\n\n    return builder;\n  }\n\n  async findListContributorStatsByProject(\n    options: TopProjectsDto,\n    listId: string\n  ): Promise {\n    const range = options.range!;\n    const repoId = options.repo_id;\n\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder.innerJoin(\"users\", \"users\", \"user_list_contributors.user_id=users.id\");\n\n    queryBuilder\n      .select(\"users.login\", \"login\")\n      .andWhere(\"user_list_contributors.list_id = :listId\", { listId })\n      .addSelect(\n        `(\n          SELECT COALESCE(SUM(\"pull_requests\".\"commits\"), 0)\n          FROM \"pull_requests\"\n          WHERE \"pull_requests\".\"author_login\" = \"users\".\"login\"\n            AND \"pull_requests\".\"repo_id\" = ${repoId}\n            AND now() - INTERVAL '${range} days' > {\n    const range = pageOptionsDto.range!;\n    const now = new Date().toISOString();\n\n    const cteBuilder = this.baseQueryBuilder();\n\n    cteBuilder.innerJoin(\"users\", \"users\", \"user_list_contributors.user_id=users.id\");\n\n    switch (pageOptionsDto.contributorType) {\n      case UserListContributorStatsTypeEnum.all:\n        break;\n\n      case UserListContributorStatsTypeEnum.active:\n        this.applyActiveContributorsFilter(cteBuilder, now, range);\n        break;\n\n      case UserListContributorStatsTypeEnum.new:\n        this.applyNewContributorsFilter(cteBuilder, now, range);\n        break;\n\n      case UserListContributorStatsTypeEnum.alumni: {\n        this.applyAlumniContributorsFilter(cteBuilder, now, range);\n        break;\n      }\n\n      default:\n        break;\n    }\n\n    cteBuilder\n      .select(\"users.login\", \"login\")\n      .andWhere(\"user_list_contributors.list_id = :listId\", { listId })\n      .addSelect(\n        `(\n          SELECT COALESCE(SUM(\"pull_requests\".\"commits\"), 0)\n          FROM \"pull_requests\"\n          WHERE \"pull_requests\".\"author_login\" = \"users\".\"login\"\n            AND now() - INTERVAL '${range} days' (),\n        new ContributionsPageMetaDto({ itemCount, pageOptionsDto }, 0)\n      );\n    }\n\n    const allContributionsCount = allContributionsResult.all_contributions;\n\n    const entities: DbUserListContributorStat[] = await entityQb.getRawMany();\n\n    const pageMetaDto = new ContributionsPageMetaDto({ itemCount, pageOptionsDto }, allContributionsCount);\n\n    return new ContributionsPageDto(entities, pageMetaDto);\n  }\n\n  async findContributorCategoriesByTimeframe(\n    options: ContributionsTimeframeDto,\n    listId: string\n  ): Promise {\n    const denominator = 82;\n    const range = options.range!;\n    const dates = this.getDateFrames(range, denominator);\n\n    const framePromises = dates.map(async (frameStartDate) =>\n      this.findContributorCategoriesInTimeframeHelper(frameStartDate.toISOString(), range / denominator, listId)\n    );\n\n    return Promise.all(framePromises);\n  }\n\n  async findContributionsInTimeframe(\n    options: ContributionsTimeframeDto,\n    listId: string\n  ): Promise {\n    const range = options.range!;\n    const contributorType = options.contributorType!;\n    const dates = this.getDateFrames(range);\n\n    const framePromises = dates.map(async (frameStartDate) =>\n      this.findContributionsInTimeframeHelper(frameStartDate.toISOString(), range / 7, contributorType, listId)\n    );\n\n    return Promise.all(framePromises);\n  }\n\n  getDateFrames(range = 30, denominator = 7): Date[] {\n    const currentDate = new Date();\n    const frameDuration = range / denominator;\n    const dates: Date[] = [];\n\n    // eslint-disable-next-line no-loops/no-loops\n    for (let i = 0; i  {\n    const subQueryBuilder = this.baseQueryBuilder();\n\n    subQueryBuilder.innerJoin(\n      \"users\",\n      \"users\",\n      `user_list_contributors.user_id=users.id AND user_list_contributors.list_id='${listId}'`\n    );\n\n    switch (contributorType) {\n      case UserListContributorStatsTypeEnum.all:\n        break;\n\n      case UserListContributorStatsTypeEnum.active:\n        this.applyActiveContributorsFilter(subQueryBuilder, startDate, range);\n        break;\n\n      case UserListContributorStatsTypeEnum.new:\n        this.applyNewContributorsFilter(subQueryBuilder, startDate, range);\n        break;\n\n      case UserListContributorStatsTypeEnum.alumni: {\n        this.applyAlumniContributorsFilter(subQueryBuilder, startDate, range);\n        break;\n      }\n\n      default:\n        break;\n    }\n\n    subQueryBuilder\n      .addSelect(\n        `(\n          SELECT COALESCE(SUM(\"pull_requests\".\"commits\"), 0)\n          FROM \"pull_requests\"\n          WHERE \"pull_requests\".\"author_login\" = \"users\".\"login\"\n            AND \"pull_requests\".\"updated_at\" > '${startDate}'::TIMESTAMP - INTERVAL '${range} days'\n            AND \"pull_requests\".\"updated_at\"  '${startDate}'::TIMESTAMP - INTERVAL '${range} days'\n            AND \"pull_requests\".\"updated_at\"  {\n    const activeCountQueryBuilder = this.baseQueryBuilder();\n\n    activeCountQueryBuilder.innerJoin(\n      \"users\",\n      \"users\",\n      `user_list_contributors.user_id=users.id AND user_list_contributors.list_id='${listId}'`\n    );\n\n    this.applyActiveContributorsFilter(activeCountQueryBuilder, startDate, range);\n\n    const activeCount = await activeCountQueryBuilder.getCount();\n\n    const newCountQueryBuilder = this.baseQueryBuilder();\n\n    newCountQueryBuilder.innerJoin(\n      \"users\",\n      \"users\",\n      `user_list_contributors.user_id=users.id AND user_list_contributors.list_id='${listId}'`\n    );\n\n    this.applyNewContributorsFilter(newCountQueryBuilder, startDate, range);\n\n    const newCount = await newCountQueryBuilder.getCount();\n\n    const alumniCountQueryBuilder = this.baseQueryBuilder();\n\n    alumniCountQueryBuilder.innerJoin(\n      \"users\",\n      \"users\",\n      `user_list_contributors.user_id=users.id AND user_list_contributors.list_id='${listId}'`\n    );\n\n    this.applyAlumniContributorsFilter(alumniCountQueryBuilder, startDate, range);\n\n    const alumniCount = await alumniCountQueryBuilder.getCount();\n\n    return {\n      time_start: startDate,\n      time_end: `${new Date(new Date(startDate).getTime() + range * 86400000).toISOString()}`,\n      active: activeCount,\n      new: newCount,\n      alumni: alumniCount,\n      all: activeCount + newCount + alumniCount,\n    };\n  }\n\n  async findContributionsByProject(\n    listId: string,\n    options: ContributionsByProjectDto\n  ): Promise {\n    const range = options.range!;\n\n    const queryBuilder = this.userListContributorRepository.manager\n      .createQueryBuilder()\n      .select(\"split_part(repos.full_name, '/', 1)\", \"org_id\")\n      .addSelect(\"split_part(repos.full_name, '/', 2)\", \"project_id\")\n      .addSelect(\"repos.id\", \"repo_id\")\n      .addSelect(\"COUNT(pr.id)\", \"contributions\")\n\n      // grab pull requests first\n      .from(\"pull_requests\", \"pr\")\n\n      // and join them with repos\n      .innerJoin(\"repos\", \"repos\", 'pr.\"repo_id\" = \"repos\".\"id\"')\n\n      // join with filtered users from the user list\n      .innerJoin(\n        (subQuery) =>\n          subQuery\n            .select(\"users.login\", \"user_login\")\n            .from(\"user_list_contributors\", \"user_list_contributors\")\n            .innerJoin(\"users\", \"users\", '\"user_list_contributors\".\"user_id\" = \"users\".\"id\"')\n            .where(`\"user_list_contributors\".\"list_id\" = '${listId}'`),\n        \"filtered_users\",\n        'pr.\"author_login\" = \"filtered_users\".\"user_login\"'\n      )\n\n      .where(`pr.\"updated_at\" BETWEEN NOW() - INTERVAL '${range} days' AND NOW()`)\n      .groupBy(\"repos.full_name, repos.id\");\n\n    const entities: DbContributionsProjects[] = await queryBuilder.getRawMany();\n\n    return entities;\n  }\n\n  private applyActiveContributorsFilter(\n    queryBuilder: SelectQueryBuilder,\n    startDate: string,\n    range = 30\n  ) {\n    queryBuilder\n      .leftJoin(\n        `(\n        SELECT DISTINCT \"author_login\"\n        FROM \"pull_requests\"\n        WHERE \"pull_requests\".\"updated_at\" BETWEEN '${startDate}'::TIMESTAMP - INTERVAL '${range} days'\n          AND '${startDate}'::TIMESTAMP\n      )`,\n        \"current_month_prs\",\n        `\"users\".\"login\" = \"current_month_prs\".\"author_login\"`\n      )\n      .leftJoin(\n        `(\n        SELECT DISTINCT \"author_login\"\n        FROM \"pull_requests\"\n        WHERE \"pull_requests\".\"updated_at\" BETWEEN '${startDate}'::TIMESTAMP - INTERVAL '${range + range} days'\n          AND '${startDate}'::TIMESTAMP - INTERVAL '${range} days'\n      )`,\n        \"previous_month_prs\",\n        `\"users\".\"login\" = \"previous_month_prs\".\"author_login\"`\n      )\n      .where(`\"previous_month_prs\".\"author_login\" IS NOT NULL`)\n      .andWhere(`\"current_month_prs\".\"author_login\" IS NOT NULL`);\n  }\n\n  private applyNewContributorsFilter(\n    queryBuilder: SelectQueryBuilder,\n    startDate: string,\n    range = 30\n  ) {\n    queryBuilder\n      .leftJoin(\n        `(\n            SELECT DISTINCT \"author_login\"\n            FROM \"pull_requests\"\n            WHERE \"pull_requests\".\"updated_at\" BETWEEN NOW() - INTERVAL '${range} days'\n              AND '${startDate}'::TIMESTAMP\n          )`,\n        \"current_month_prs\",\n        `\"users\".\"login\" = \"current_month_prs\".\"author_login\"`\n      )\n      .leftJoin(\n        `(\n            SELECT DISTINCT \"author_login\"\n            FROM \"pull_requests\"\n            WHERE \"pull_requests\".\"updated_at\" BETWEEN NOW() - INTERVAL '${range + range} days'\n              AND '${startDate}'::TIMESTAMP - INTERVAL '${range} days'\n          )`,\n        \"previous_month_prs\",\n        `\"users\".\"login\" = \"previous_month_prs\".\"author_login\"`\n      )\n      .where(`\"previous_month_prs\".\"author_login\" IS NULL`)\n      .andWhere(`\"current_month_prs\".\"author_login\" IS NOT NULL`);\n  }\n\n  private applyAlumniContributorsFilter(\n    queryBuilder: SelectQueryBuilder,\n    startDate: string,\n    range = 30\n  ) {\n    queryBuilder\n      .leftJoin(\n        `(\n            SELECT DISTINCT \"author_login\"\n            FROM \"pull_requests\"\n            WHERE \"pull_requests\".\"updated_at\" BETWEEN '${startDate}'::TIMESTAMP - INTERVAL '${range} days'\n              AND '${startDate}'::TIMESTAMP\n          )`,\n        \"current_month_prs\",\n        `\"users\".\"login\" = \"current_month_prs\".\"author_login\"`\n      )\n      .leftJoin(\n        `(\n            SELECT DISTINCT \"author_login\"\n            FROM \"pull_requests\"\n            WHERE \"pull_requests\".\"updated_at\" BETWEEN '${startDate}'::TIMESTAMP - INTERVAL '${range + range} days'\n              AND '${startDate}'::TIMESTAMP - INTERVAL '${range} days'\n          )`,\n        \"previous_month_prs\",\n        `\"users\".\"login\" = \"previous_month_prs\".\"author_login\"`\n      )\n      .where(`\"previous_month_prs\".\"author_login\" IS NOT NULL`)\n      .andWhere(`\"current_month_prs\".\"author_login\" IS NULL`);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UserModule.html":{"url":"modules/UserModule.html","title":"module - UserModule","body":"\n                   \n\n\n\n\n    Modules\n    UserModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_UserModule\n\n\n\ncluster_UserModule_imports\n\n\n\ncluster_UserModule_providers\n\n\n\ncluster_UserModule_exports\n\n\n\n\nApiServicesModule\n\nApiServicesModule\n\n\n\nUserModule\n\nUserModule\n\nUserModule -->\n\nApiServicesModule->UserModule\n\n\n\n\n\nPullRequestModule\n\nPullRequestModule\n\nUserModule -->\n\nPullRequestModule->UserModule\n\n\n\n\n\nRepoModule\n\nRepoModule\n\nUserModule -->\n\nRepoModule->UserModule\n\n\n\n\n\nTierModule\n\nTierModule\n\nUserModule -->\n\nTierModule->UserModule\n\n\n\n\n\nTimescaleModule\n\nTimescaleModule\n\nUserModule -->\n\nTimescaleModule->UserModule\n\n\n\n\n\nEndorsementService \n\nEndorsementService \n\nEndorsementService  -->\n\nUserModule->EndorsementService \n\n\n\n\n\nRepoService \n\nRepoService \n\nRepoService  -->\n\nUserModule->RepoService \n\n\n\n\n\nUserFollowService \n\nUserFollowService \n\nUserFollowService  -->\n\nUserModule->UserFollowService \n\n\n\n\n\nUserHighlightsService \n\nUserHighlightsService \n\nUserHighlightsService  -->\n\nUserModule->UserHighlightsService \n\n\n\n\n\nUserOrganizationService \n\nUserOrganizationService \n\nUserOrganizationService  -->\n\nUserModule->UserOrganizationService \n\n\n\n\n\nUserService \n\nUserService \n\nUserService  -->\n\nUserModule->UserService \n\n\n\n\n\nEndorsementService\n\nEndorsementService\n\nUserModule -->\n\nEndorsementService->UserModule\n\n\n\n\n\nRepoFilterService\n\nRepoFilterService\n\nUserModule -->\n\nRepoFilterService->UserModule\n\n\n\n\n\nRepoService\n\nRepoService\n\nUserModule -->\n\nRepoService->UserModule\n\n\n\n\n\nUserCollaborationService\n\nUserCollaborationService\n\nUserModule -->\n\nUserCollaborationService->UserModule\n\n\n\n\n\nUserFollowService\n\nUserFollowService\n\nUserModule -->\n\nUserFollowService->UserModule\n\n\n\n\n\nUserHighlightsService\n\nUserHighlightsService\n\nUserModule -->\n\nUserHighlightsService->UserModule\n\n\n\n\n\nUserNotificationService\n\nUserNotificationService\n\nUserModule -->\n\nUserNotificationService->UserModule\n\n\n\n\n\nUserOrganizationService\n\nUserOrganizationService\n\nUserModule -->\n\nUserOrganizationService->UserModule\n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/user/user.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            EndorsementService\n                        \n                        \n                            RepoFilterService\n                        \n                        \n                            RepoService\n                        \n                        \n                            UserCollaborationService\n                        \n                        \n                            UserFollowService\n                        \n                        \n                            UserHighlightsService\n                        \n                        \n                            UserNotificationService\n                        \n                        \n                            UserOrganizationService\n                        \n                        \n                            UserService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UserController\n                        \n                        \n                            UserHighlightsController\n                        \n                        \n                            UserFollowsController\n                        \n                        \n                            UserNotificationController\n                        \n                        \n                            UserCollaborationController\n                        \n                        \n                            UserEndorsementController\n                        \n                        \n                            UserRecommendationController\n                        \n                        \n                            UserFollowingController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            ApiServicesModule\n                        \n                        \n                            PullRequestModule\n                        \n                        \n                            RepoModule\n                        \n                        \n                            TierModule\n                        \n                        \n                            TimescaleModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            EndorsementService\n                        \n                        \n                            RepoService\n                        \n                        \n                            UserFollowService\n                        \n                        \n                            UserHighlightsService\n                        \n                        \n                            UserOrganizationService\n                        \n                        \n                            UserService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\n\nimport { DbPullRequestGitHubEvents } from \"../timescale/entities/pull_request_github_event\";\nimport { TimescaleModule } from \"../timescale/timescale.module\";\nimport { PullRequestModule } from \"../pull-requests/pull-request.module\";\nimport { RepoModule } from \"../repo/repo.module\";\n\nimport { DbRepo } from \"../repo/entities/repo.entity\";\nimport { RepoService } from \"../repo/repo.service\";\nimport { RepoFilterService } from \"../common/filters/repo-filter.service\";\nimport { EndorsementService } from \"../endorsement/endorsement.service\";\nimport { DbEndorsement } from \"../endorsement/entities/endorsement.entity\";\nimport { ApiServicesModule } from \"../common/services/api-services.module\";\nimport { DbUserList } from \"../user-lists/entities/user-list.entity\";\nimport { DbInsight } from \"../insight/entities/insight.entity\";\nimport { TierModule } from \"../tier/tier.module\";\nimport { DbUser } from \"./user.entity\";\nimport { UserService } from \"./services/user.service\";\nimport { UserController } from \"./user.controller\";\nimport { DbUserHighlight } from \"./entities/user-highlight.entity\";\nimport { UserHighlightsController } from \"./user-highlight.controller\";\nimport { UserHighlightsService } from \"./user-highlights.service\";\nimport { UserFollowsController } from \"./user-follow.controller\";\nimport { UserFollowService } from \"./user-follow.service\";\nimport { DbUserToUserFollows } from \"./entities/user-follows.entity\";\nimport { DbUserHighlightReaction } from \"./entities/user-highlight-reaction.entity\";\nimport { DbUserTopRepo } from \"./entities/user-top-repo.entity\";\nimport { DbUserNotification } from \"./entities/user-notification.entity\";\nimport { DbUserCollaboration } from \"./entities/user-collaboration.entity\";\nimport { UserNotificationService } from \"./user-notifcation.service\";\nimport { UserNotificationController } from \"./user-notification.controller\";\nimport { UserCollaborationService } from \"./user-collaboration.service\";\nimport { UserCollaborationController } from \"./user-collaboration.controller\";\nimport { UserEndorsementController } from \"./user-endorsement.controller\";\n\nimport { UserRecommendationController } from \"./user-recommendation.controller\";\nimport { DbUserOrganization } from \"./entities/user-organization.entity\";\nimport { UserFollowingController } from \"./user-following.controller\";\nimport { UserOrganizationService } from \"./user-organization.service\";\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature(\n      [\n        DbUser,\n        DbUserHighlight,\n        DbUserHighlightReaction,\n        DbUserToUserFollows,\n        DbUserTopRepo,\n        DbUserNotification,\n        DbUserCollaboration,\n        DbRepo,\n        DbEndorsement,\n        DbUserOrganization,\n        DbInsight,\n        DbUserList,\n      ],\n      \"ApiConnection\"\n    ),\n    TypeOrmModule.forFeature([DbPullRequestGitHubEvents], \"TimescaleConnection\"),\n    PullRequestModule,\n    RepoModule,\n    ApiServicesModule,\n    TierModule,\n    TimescaleModule,\n  ],\n  controllers: [\n    UserController,\n    UserHighlightsController,\n    UserFollowsController,\n    UserNotificationController,\n    UserCollaborationController,\n    UserEndorsementController,\n    UserRecommendationController,\n    UserFollowingController,\n  ],\n  providers: [\n    UserService,\n    UserController,\n    UserHighlightsService,\n    UserHighlightsController,\n    UserFollowService,\n    RepoService,\n    RepoFilterService,\n    UserNotificationService,\n    UserCollaborationService,\n    EndorsementService,\n    UserOrganizationService,\n  ],\n  exports: [\n    UserService,\n    UserHighlightsService,\n    UserFollowService,\n    RepoService,\n    EndorsementService,\n    UserOrganizationService,\n  ],\n})\nexport class UserModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserNotificationController.html":{"url":"controllers/UserNotificationController.html","title":"controller - UserNotificationController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserNotificationController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user-notification.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                user/notifications\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getUserNotifications\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getUserNotifications\n                        \n                    \n                \n            \n            \n                \n                    \n                    getUserNotifications(userId: number, pageOptionsDto: PageOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/')@ApiOperation({operationId: 'getUserNotifications', summary: 'Retrieves notifications for the authenticated user'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOkResponse({type: undefined})@ApiNotFoundResponse({description: 'Unable to get user notifications'})\n                \n            \n\n            \n                \n                    Defined in src/user/user-notification.controller.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Query, UseGuards } from \"@nestjs/common\";\nimport { ApiBearerAuth, ApiNotFoundResponse, ApiOkResponse, ApiOperation, ApiTags, OmitType } from \"@nestjs/swagger\";\n\nimport { PageOptionsDto } from \"../common/dtos/page-options.dto\";\nimport { PageDto } from \"../common/dtos/page.dto\";\nimport { UserId } from \"../auth/supabase.user.decorator\";\nimport { SupabaseGuard } from \"../auth/supabase.guard\";\nimport { DbUserNotification } from \"./entities/user-notification.entity\";\nimport { UserNotificationService } from \"./user-notifcation.service\";\n\n@Controller(\"user/notifications\")\n@ApiTags(\"User service\")\nexport class UserNotificationController {\n  constructor(private userNotificationService: UserNotificationService) {}\n\n  @Get(\"/\")\n  @ApiOperation({\n    operationId: \"getUserNotifications\",\n    summary: \"Retrieves notifications for the authenticated user\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOkResponse({ type: OmitType(DbUserNotification, [\"read_at\"]) })\n  @ApiNotFoundResponse({ description: \"Unable to get user notifications\" })\n  async getUserNotifications(\n    @UserId() userId: number,\n    @Query() pageOptionsDto: PageOptionsDto\n  ): Promise> {\n    return this.userNotificationService.findAllByUserId(userId, pageOptionsDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserNotificationService.html":{"url":"injectables/UserNotificationService.html","title":"injectable - UserNotificationService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserNotificationService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user-notifcation.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addUserFollowerNotification\n                            \n                            \n                                    Async\n                                addUserHighlightNotification\n                            \n                            \n                                    Async\n                                addUserHighlightReactionNotification\n                            \n                            \n                                    Async\n                                addUserNotification\n                            \n                            \n                                baseQueryBuilder\n                            \n                            \n                                    Async\n                                findAllByUserId\n                            \n                            \n                                    Async\n                                markNotificationsAsRead\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userNotificationRepository: Repository, userService: UserService)\n                    \n                \n                        \n                            \n                                Defined in src/user/user-notifcation.service.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userNotificationRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addUserFollowerNotification\n                        \n                    \n                \n            \n            \n                \n                    \n                    addUserFollowerNotification(userId: number, followedUserId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-notifcation.service.ts:63\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    followedUserId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addUserHighlightNotification\n                        \n                    \n                \n            \n            \n                \n                    \n                    addUserHighlightNotification(highlightId: number, userId: number, highlightUserId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-notifcation.service.ts:87\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    highlightId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    highlightUserId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addUserHighlightReactionNotification\n                        \n                    \n                \n            \n            \n                \n                    \n                    addUserHighlightReactionNotification(userId: number, highlightUserId: number, highlightId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-notifcation.service.ts:75\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    highlightUserId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    highlightId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addUserNotification\n                        \n                    \n                \n            \n            \n                \n                    \n                    addUserNotification(userNotification: Partial)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-notifcation.service.ts:52\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userNotification\n                                    \n                                                Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        baseQueryBuilder\n                        \n                    \n                \n            \n            \n                \nbaseQueryBuilder()\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-notifcation.service.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         SelectQueryBuilder\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllByUserId\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllByUserId(userId: number, pageOptionsDto: PageOptionsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-notifcation.service.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        markNotificationsAsRead\n                        \n                    \n                \n            \n            \n                \n                    \n                    markNotificationsAsRead(notificationIds: number[])\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-notifcation.service.ts:99\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    notificationIds\n                                    \n                                            number[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { Repository, SelectQueryBuilder } from \"typeorm\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\n\nimport { PageMetaDto } from \"../common/dtos/page-meta.dto\";\nimport { PageDto } from \"../common/dtos/page.dto\";\nimport { PageOptionsDto } from \"../common/dtos/page-options.dto\";\nimport { DbUserNotification } from \"./entities/user-notification.entity\";\nimport { UserNotificationTypes, userNotificationTypes } from \"./entities/user-notification.constants\";\nimport { UserService } from \"./services/user.service\";\n\n@Injectable()\nexport class UserNotificationService {\n  constructor(\n    @InjectRepository(DbUserNotification, \"ApiConnection\")\n    private userNotificationRepository: Repository,\n    private userService: UserService\n  ) {}\n\n  baseQueryBuilder(): SelectQueryBuilder {\n    const builder = this.userNotificationRepository.createQueryBuilder(\"user_notifications\");\n\n    return builder;\n  }\n\n  async findAllByUserId(userId: number, pageOptionsDto: PageOptionsDto) {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .innerJoin(\"users\", \"users\", \"user_notifications.user_id=users.id\")\n      .innerJoinAndSelect(\"user_notifications.from_user\", \"from_user\")\n      .where(\"user_id = :userId\", { userId })\n      .andWhere(\"user_notifications.type IN (:...userNotificationTypes)\", { userNotificationTypes })\n      .orderBy(\"user_notifications.notified_at\", \"DESC\");\n\n    queryBuilder.offset(pageOptionsDto.skip).limit(pageOptionsDto.limit);\n\n    const entities = await queryBuilder.getMany();\n    const itemCount = await queryBuilder.getCount();\n\n    const notificationIds = entities\n      .filter((notification) => !notification.read_at)\n      .map((notification) => notification.id);\n\n    await this.markNotificationsAsRead(notificationIds);\n\n    const pageMetaDto = new PageMetaDto({ itemCount, pageOptionsDto });\n\n    return new PageDto(entities, pageMetaDto);\n  }\n\n  async addUserNotification(userNotification: Partial) {\n    return this.userNotificationRepository.save({\n      type: userNotification.type,\n      notified_at: new Date(),\n      user_id: userNotification.user_id,\n      message: userNotification.message,\n      from_user_id: userNotification.from_user_id,\n      meta_id: userNotification.meta_id,\n    });\n  }\n\n  async addUserFollowerNotification(userId: number, followedUserId: number) {\n    const followUser = await this.userService.findOneById(userId);\n\n    return this.addUserNotification({\n      type: UserNotificationTypes.Follow,\n      user_id: followedUserId,\n      from_user_id: userId,\n      message: `${followUser.login} followed you`,\n      meta_id: followUser.login,\n    });\n  }\n\n  async addUserHighlightReactionNotification(userId: number, highlightUserId: number, highlightId: number) {\n    const followUser = await this.userService.findOneById(userId);\n\n    return this.addUserNotification({\n      type: UserNotificationTypes.HighlightReaction,\n      user_id: highlightUserId,\n      from_user_id: userId,\n      message: `${followUser.login} reacted to your highlight`,\n      meta_id: `${highlightId}`,\n    });\n  }\n\n  async addUserHighlightNotification(highlightId: number, userId: number, highlightUserId: number) {\n    const followUser = await this.userService.findOneById(userId);\n\n    return this.addUserNotification({\n      type: UserNotificationTypes.HighlightCreated,\n      user_id: highlightUserId,\n      from_user_id: userId,\n      message: `${followUser.login} created a new highlight`,\n      meta_id: `${highlightId}`,\n    });\n  }\n\n  async markNotificationsAsRead(notificationIds: number[]) {\n    const updates = notificationIds.map(async (id) =>\n      this.userNotificationRepository.update(id, { read_at: new Date() })\n    );\n\n    await Promise.all(updates);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserOnboardingDto.html":{"url":"classes/UserOnboardingDto.html","title":"class - UserOnboardingDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserOnboardingDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dtos/user-onboarding.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                interests\n                            \n                            \n                                    Public\n                                timezone\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        interests\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'An array of interests', type: 'string', isArray: true, example: undefined})@IsArray()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/user-onboarding.dto.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        timezone\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'User timezone in UTC', type: String, example: 'UTC-5'})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/user-onboarding.dto.ts:20\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsArray, IsString } from \"class-validator\";\n\nexport class UserOnboardingDto {\n  @ApiProperty({\n    description: \"An array of interests\",\n    type: \"string\",\n    isArray: true,\n    example: [\"javascript\", \"react\"],\n  })\n  @IsArray()\n  public interests: string[];\n\n  @ApiProperty({\n    description: \"User timezone in UTC\",\n    type: String,\n    example: \"UTC-5\",\n  })\n  @IsString()\n  public timezone: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserOrganizationService.html":{"url":"injectables/UserOrganizationService.html","title":"injectable - UserOrganizationService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserOrganizationService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user-organization.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                baseQueryBuilder\n                            \n                            \n                                    Async\n                                findAllByUserId\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userOrganizationRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/user/user-organization.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userOrganizationRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        baseQueryBuilder\n                        \n                    \n                \n            \n            \n                \nbaseQueryBuilder()\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-organization.service.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         SelectQueryBuilder\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllByUserId\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllByUserId(userId: number, pageOptionsDto: PageOptionsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-organization.service.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { Repository, SelectQueryBuilder } from \"typeorm\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\n\nimport { PageMetaDto } from \"../common/dtos/page-meta.dto\";\nimport { PageDto } from \"../common/dtos/page.dto\";\nimport { PageOptionsDto } from \"../common/dtos/page-options.dto\";\nimport { DbUserOrganization } from \"./entities/user-organization.entity\";\n\n@Injectable()\nexport class UserOrganizationService {\n  constructor(\n    @InjectRepository(DbUserOrganization, \"ApiConnection\")\n    private userOrganizationRepository: Repository\n  ) {}\n\n  baseQueryBuilder(): SelectQueryBuilder {\n    const builder = this.userOrganizationRepository.createQueryBuilder(\"user_organizations\");\n\n    return builder;\n  }\n\n  async findAllByUserId(userId: number, pageOptionsDto: PageOptionsDto) {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .innerJoinAndSelect(\"user_organizations.user\", \"user\")\n      .innerJoinAndSelect(\"user_organizations.organization_user\", \"organization_user\")\n      .where(\"user_id = :userId\", { userId })\n      .orderBy(\"user_organizations.created_at\", \"DESC\");\n\n    queryBuilder.offset(pageOptionsDto.skip).limit(pageOptionsDto.limit);\n\n    const entities = await queryBuilder.getMany();\n    const itemCount = await queryBuilder.getCount();\n\n    const pageMetaDto = new PageMetaDto({ itemCount, pageOptionsDto });\n\n    return new PageDto(entities, pageMetaDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserRecommendationController.html":{"url":"controllers/UserRecommendationController.html","title":"controller - UserRecommendationController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserRecommendationController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user-recommendation.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                user/recommendations\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                findUserOrgsRepoRecommendations\n                            \n                            \n                                    Async\n                                findUserRepoRecommendations\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findUserOrgsRepoRecommendations\n                        \n                    \n                \n            \n            \n                \n                    \n                    findUserOrgsRepoRecommendations(userId: number, pageOptionsDto: PageOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/orgs')@ApiOperation({operationId: 'findUserOrgsRepoRecommendations', summary: 'Listing recommended repos for the authenticated user based on their orgs'})@ApiBearerAuth()@ApiPaginatedResponse(DbRepo)@ApiOkResponse({type: DbRepo})@UseGuards(SupabaseGuard)\n                \n            \n\n            \n                \n                    Defined in src/user/user-recommendation.controller.ts:43\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findUserRepoRecommendations\n                        \n                    \n                \n            \n            \n                \n                    \n                    findUserRepoRecommendations(userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/repos')@ApiOperation({operationId: 'findUserRepoRecommendations', summary: 'Listing recommended repos for the authenticated user'})@ApiBearerAuth()@ApiPaginatedResponse(DbRepo)@ApiOkResponse({type: DbRepo})@UseGuards(SupabaseGuard)\n                \n            \n\n            \n                \n                    Defined in src/user/user-recommendation.controller.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Query, UseGuards } from \"@nestjs/common\";\nimport { ApiOperation, ApiBearerAuth, ApiTags, ApiOkResponse } from \"@nestjs/swagger\";\n\nimport { SupabaseGuard } from \"../auth/supabase.guard\";\nimport { UserId } from \"../auth/supabase.user.decorator\";\n\nimport { RepoService } from \"../repo/repo.service\";\nimport { PageOptionsDto } from \"../common/dtos/page-options.dto\";\nimport { ApiPaginatedResponse } from \"../common/decorators/api-paginated-response.decorator\";\nimport { DbRepo } from \"../repo/entities/repo.entity\";\nimport { UserService } from \"./services/user.service\";\n\n@Controller(\"user/recommendations\")\n@ApiTags(\"User Recommendations service\")\nexport class UserRecommendationController {\n  constructor(private readonly repoService: RepoService, private readonly userService: UserService) {}\n\n  @Get(\"/repos\")\n  @ApiOperation({\n    operationId: \"findUserRepoRecommendations\",\n    summary: \"Listing recommended repos for the authenticated user\",\n  })\n  @ApiBearerAuth()\n  @ApiPaginatedResponse(DbRepo)\n  @ApiOkResponse({ type: DbRepo })\n  @UseGuards(SupabaseGuard)\n  async findUserRepoRecommendations(@UserId() userId: number) {\n    const user = await this.userService.findOneById(userId);\n    const interests = user.interests?.split(\",\").filter(Boolean) ?? [];\n\n    return this.repoService.findRecommendations(interests);\n  }\n\n  @Get(\"/orgs\")\n  @ApiOperation({\n    operationId: \"findUserOrgsRepoRecommendations\",\n    summary: \"Listing recommended repos for the authenticated user based on their orgs\",\n  })\n  @ApiBearerAuth()\n  @ApiPaginatedResponse(DbRepo)\n  @ApiOkResponse({ type: DbRepo })\n  @UseGuards(SupabaseGuard)\n  async findUserOrgsRepoRecommendations(@UserId() userId: number, @Query() pageOptionsDto: PageOptionsDto) {\n    return this.repoService.findOrgsRecommendations(userId, pageOptionsDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserRepoOptionsDto.html":{"url":"classes/UserRepoOptionsDto.html","title":"class - UserRepoOptionsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserRepoOptionsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user-repo/dtos/user-repo-options.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PageOptionsDto\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                    Optional\n                                limit\n                            \n                            \n                                    Readonly\n                                    Optional\n                                orderDirection\n                            \n                            \n                                    Readonly\n                                    Optional\n                                page\n                            \n                            \n                                    Readonly\n                                    Optional\n                                prev_days_start_date\n                            \n                            \n                                    Readonly\n                                    Optional\n                                range\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 50\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, maximum: 1000, default: 10, type: 'integer'})@Type(undefined)@IsInt()@Min(1)@Max(10000)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:30\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        orderDirection\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OrderDirectionEnum\n\n                    \n                \n                \n                    \n                        Default value : OrderDirectionEnum.DESC\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: OrderDirectionEnum, enumName: 'OrderDirectionEnum', default: undefined})@IsEnum(OrderDirectionEnum)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:35\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, default: 1, type: 'integer'})@Type(undefined)@IsInt()@Min(1)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:17\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        prev_days_start_date\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 0\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Number of days in the past to start range block', default: 0, type: 'integer'})@Type(undefined)@IsIn(['0', '7', '30', '90'])@IsInt()@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:57\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        range\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 30\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Range in days', default: 30, type: 'integer'})@Type(undefined)@IsIn(['7', '30', '90'])@IsInt()@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:46\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PageOptionsDto } from \"../../common/dtos/page-options.dto\";\n\nexport class UserRepoOptionsDto extends PageOptionsDto {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserRepoOptionsDto-1.html":{"url":"classes/UserRepoOptionsDto-1.html","title":"class - UserRepoOptionsDto-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserRepoOptionsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user-repo/dtos/user-repos.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                ids\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        ids\n                        \n                    \n                \n            \n                \n                    \n                        Type :     number[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The repos to add to onboarding', type: 'integer', isArray: true, example: undefined})@IsArray()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-repo/dtos/user-repos.dto.ts:13\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsArray, IsBoolean, IsOptional } from \"class-validator\";\nimport { DbRepoToUserVotes } from \"../../repo/entities/repo.to.user.votes.entity\";\n\nexport class UserRepoOptionsDto {\n  @ApiProperty({\n    description: \"The repos to add to onboarding\",\n    type: \"integer\",\n    isArray: true,\n    example: [71359796, 426820139],\n  })\n  @IsArray()\n  readonly ids: number[];\n}\n\nexport class VotedRepoDto {\n  @ApiProperty({\n    description: \"If the user has voted for the repo\",\n    type: Boolean,\n    example: true,\n  })\n  @IsBoolean()\n  voted: boolean;\n\n  @IsOptional()\n  data: DbRepoToUserVotes | null;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UserReposModule.html":{"url":"modules/UserReposModule.html","title":"module - UserReposModule","body":"\n                   \n\n\n\n\n    Modules\n    UserReposModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_UserReposModule\n\n\n\ncluster_UserReposModule_imports\n\n\n\ncluster_UserReposModule_exports\n\n\n\ncluster_UserReposModule_providers\n\n\n\n\nApiServicesModule\n\nApiServicesModule\n\n\n\nUserReposModule\n\nUserReposModule\n\nUserReposModule -->\n\nApiServicesModule->UserReposModule\n\n\n\n\n\nUserReposService \n\nUserReposService \n\nUserReposService  -->\n\nUserReposModule->UserReposService \n\n\n\n\n\nUserReposService\n\nUserReposService\n\nUserReposModule -->\n\nUserReposService->UserReposModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/user-repo/user-repos.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UserReposService\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            ApiServicesModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UserReposService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\n\nimport { ApiServicesModule } from \"../common/services/api-services.module\";\nimport { DbUserRepo } from \"./user-repo.entity\";\nimport { UserReposService } from \"./user-repos.service\";\n\n@Module({\n  imports: [TypeOrmModule.forFeature([DbUserRepo], \"ApiConnection\"), ApiServicesModule],\n  providers: [UserReposService],\n  exports: [UserReposService],\n})\nexport class UserReposModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserReposService.html":{"url":"injectables/UserReposService.html","title":"injectable - UserReposService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserReposService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user-repo/user-repos.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addUserRepo\n                            \n                            \n                                baseQueryBuilder\n                            \n                            \n                                    Async\n                                findAllByUserId\n                            \n                            \n                                    Async\n                                findOneById\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userRepoRepository: Repository, pagerService: PagerService)\n                    \n                \n                        \n                            \n                                Defined in src/user-repo/user-repos.service.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userRepoRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        pagerService\n                                                  \n                                                        \n                                                                        PagerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addUserRepo\n                        \n                    \n                \n            \n            \n                \n                    \n                    addUserRepo(userId: number, repo: RepoInfo)\n                \n            \n\n\n            \n                \n                    Defined in src/user-repo/user-repos.service.ts:40\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    repo\n                                    \n                                                RepoInfo\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        baseQueryBuilder\n                        \n                    \n                \n            \n            \n                \nbaseQueryBuilder()\n                \n            \n\n\n            \n                \n                    Defined in src/user-repo/user-repos.service.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         SelectQueryBuilder\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllByUserId\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllByUserId(pageOptionsDto: UserRepoOptionsDto, userId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/user-repo/user-repos.service.ts:50\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                UserRepoOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneById(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/user-repo/user-repos.service.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from \"@nestjs/common\";\nimport { Repository, SelectQueryBuilder } from \"typeorm\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\n\nimport { PageDto } from \"../common/dtos/page.dto\";\n\nimport { RepoInfo } from \"../repo/dtos/repo-info.dto\";\nimport { PagerService } from \"../common/services/pager.service\";\nimport { DbUserRepo } from \"./user-repo.entity\";\nimport { UserRepoOptionsDto } from \"./dtos/user-repo-options.dto\";\n\n@Injectable()\nexport class UserReposService {\n  constructor(\n    @InjectRepository(DbUserRepo, \"ApiConnection\")\n    private userRepoRepository: Repository,\n    private pagerService: PagerService\n  ) {}\n\n  baseQueryBuilder(): SelectQueryBuilder {\n    const builder = this.userRepoRepository.createQueryBuilder(\"user_repos\");\n\n    return builder;\n  }\n\n  async findOneById(id: number): Promise {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder.where(\"id = :id\", { id });\n\n    const item: DbUserRepo | null = await queryBuilder.getOne();\n\n    if (!item) {\n      throw new NotFoundException();\n    }\n\n    return item;\n  }\n\n  async addUserRepo(userId: number, repo: RepoInfo) {\n    const newUserRepo = this.userRepoRepository.create({\n      user_id: userId,\n      repo_id: repo.id,\n      full_name: repo.fullName,\n    });\n\n    return this.userRepoRepository.save(newUserRepo);\n  }\n\n  async findAllByUserId(pageOptionsDto: UserRepoOptionsDto, userId: string): Promise> {\n    const queryBuilder = this.userRepoRepository.createQueryBuilder(\"user_repos\");\n\n    queryBuilder.where(\"user_repos.user_id = :userId\", { userId });\n\n    return this.pagerService.applyPagination({\n      queryBuilder,\n      pageOptionsDto,\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/VoteModule.html":{"url":"modules/VoteModule.html","title":"module - VoteModule","body":"\n                   \n\n\n\n\n    Modules\n    VoteModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_VoteModule\n\n\n\ncluster_VoteModule_imports\n\n\n\ncluster_VoteModule_providers\n\n\n\ncluster_VoteModule_exports\n\n\n\n\nRepoModule\n\nRepoModule\n\n\n\nVoteModule\n\nVoteModule\n\nVoteModule -->\n\nRepoModule->VoteModule\n\n\n\n\n\nVoteService \n\nVoteService \n\nVoteService  -->\n\nVoteModule->VoteService \n\n\n\n\n\nVoteService\n\nVoteService\n\nVoteModule -->\n\nVoteService->VoteModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/vote/vote.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            VoteService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            RepoVoteController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            RepoModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            VoteService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\n\nimport { DbRepo } from \"../repo/entities/repo.entity\";\nimport { DbRepoToUserVotes } from \"../repo/entities/repo.to.user.votes.entity\";\nimport { RepoModule } from \"../repo/repo.module\";\nimport { VoteService } from \"./vote.service\";\nimport { RepoVoteController } from \"./repo-vote.controller\";\n\n@Module({\n  imports: [TypeOrmModule.forFeature([DbRepo, DbRepoToUserVotes], \"ApiConnection\"), RepoModule],\n  controllers: [RepoVoteController],\n  providers: [VoteService],\n  exports: [VoteService],\n})\nexport class VoteModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/VoteService.html":{"url":"injectables/VoteService.html","title":"injectable - VoteService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  VoteService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/vote/vote.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                baseQueryBuilder\n                            \n                            \n                                    Async\n                                downVoteByRepoId\n                            \n                            \n                                    Async\n                                findOneByRepoId\n                            \n                            \n                                    Private\n                                    Async\n                                getVoteQuery\n                            \n                            \n                                    Async\n                                voteByRepoId\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(repoVoteRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/vote/vote.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        repoVoteRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        baseQueryBuilder\n                        \n                    \n                \n            \n            \n                \nbaseQueryBuilder()\n                \n            \n\n\n            \n                \n                    Defined in src/vote/vote.service.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        downVoteByRepoId\n                        \n                    \n                \n            \n            \n                \n                    \n                    downVoteByRepoId(repoId: number, userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/vote/vote.service.ts:61\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    repoId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneByRepoId\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneByRepoId(repoId: number, userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/vote/vote.service.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    repoId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        Async\n                        getVoteQuery\n                        \n                    \n                \n            \n            \n                \n                    \n                    getVoteQuery(repoId: number, userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/vote/vote.service.ts:77\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    repoId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        voteByRepoId\n                        \n                    \n                \n            \n            \n                \n                    \n                    voteByRepoId(repoId: number, userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/vote/vote.service.ts:42\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    repoId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ConflictException, Injectable, NotFoundException } from \"@nestjs/common\";\nimport { Repository } from \"typeorm\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { DbRepoToUserVotes } from \"../repo/entities/repo.to.user.votes.entity\";\n\n@Injectable()\nexport class VoteService {\n  constructor(\n    @InjectRepository(DbRepoToUserVotes, \"ApiConnection\")\n    private repoVoteRepository: Repository\n  ) {}\n\n  baseQueryBuilder() {\n    const builder = this.repoVoteRepository.createQueryBuilder(\"r2votes\").withDeleted();\n\n    return builder;\n  }\n\n  async findOneByRepoId(repoId: number, userId: number) {\n    const voteExists = await this.getVoteQuery(repoId, userId);\n\n    if (!voteExists) {\n      return {\n        voted: false,\n        data: null,\n      };\n    }\n\n    if (voteExists.deleted_at) {\n      return {\n        voted: false,\n        data: null,\n      };\n    }\n\n    return {\n      voted: true,\n      data: voteExists,\n    };\n  }\n\n  async voteByRepoId(repoId: number, userId: number): Promise {\n    const voteExists = await this.getVoteQuery(repoId, userId);\n\n    if (voteExists) {\n      if (!voteExists.deleted_at) {\n        throw new ConflictException(\"You have already voted for this repo\");\n      }\n\n      await this.repoVoteRepository.restore(voteExists.id);\n\n      return voteExists;\n    }\n\n    return this.repoVoteRepository.save({\n      repo_id: repoId,\n      user_id: userId,\n    });\n  }\n\n  async downVoteByRepoId(repoId: number, userId: number): Promise {\n    const voteExists = await this.getVoteQuery(repoId, userId);\n\n    if (!voteExists) {\n      throw new NotFoundException(\"You have not voted for this repo\");\n    }\n\n    if (voteExists.deleted_at) {\n      throw new ConflictException(\"You have already removed your vote\");\n    }\n\n    await this.repoVoteRepository.softDelete(voteExists.id);\n\n    return voteExists;\n  }\n\n  private async getVoteQuery(repoId: number, userId: number) {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .addSelect(\"r2votes.deleted_at\")\n      .where(\"r2votes.repo_id = :repoId\", { repoId })\n      .andWhere(\"r2votes.user_id = :userId\", { userId });\n\n    return queryBuilder.getOne();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/VotedRepoDto.html":{"url":"classes/VotedRepoDto.html","title":"class - VotedRepoDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  VotedRepoDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user-repo/dtos/user-repos.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                data\n                            \n                            \n                                voted\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        data\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbRepoToUserVotes | null\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-repo/dtos/user-repos.dto.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        voted\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'If the user has voted for the repo', type: Boolean, example: true})@IsBoolean()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-repo/dtos/user-repos.dto.ts:23\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsArray, IsBoolean, IsOptional } from \"class-validator\";\nimport { DbRepoToUserVotes } from \"../../repo/entities/repo.to.user.votes.entity\";\n\nexport class UserRepoOptionsDto {\n  @ApiProperty({\n    description: \"The repos to add to onboarding\",\n    type: \"integer\",\n    isArray: true,\n    example: [71359796, 426820139],\n  })\n  @IsArray()\n  readonly ids: number[];\n}\n\nexport class VotedRepoDto {\n  @ApiProperty({\n    description: \"If the user has voted for the repo\",\n    type: Boolean,\n    example: true,\n  })\n  @IsBoolean()\n  voted: boolean;\n\n  @IsOptional()\n  data: DbRepoToUserVotes | null;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ContributionOrderFieldsEnum   (src/.../contribution-page-options.dto.ts)\n                        \n                        \n                            InsightFilterFieldsEnum   (src/.../insight-options.dto.ts)\n                        \n                        \n                            OrderDirectionEnum   (src/.../order-direction.constant.ts)\n                        \n                        \n                            PullRequestOrderFieldsEnum   (src/.../pull-request-page-options.dto.ts)\n                        \n                        \n                            PullRequestStatusEnum   (src/.../pull-request-page-options.dto.ts)\n                        \n                        \n                            RangeTypeEnum   (src/.../contributor-prs.dto.ts)\n                        \n                        \n                            RepoFilterFieldsEnum   (src/.../repo-page-options.dto.ts)\n                        \n                        \n                            RepoOrderFieldsEnum   (src/.../repo-page-options.dto.ts)\n                        \n                        \n                            UserListContributorStatsOrderEnum   (src/.../most-active-contributors.dto.ts)\n                        \n                        \n                            UserListContributorStatsTypeEnum   (src/.../most-active-contributors.dto.ts)\n                        \n                        \n                            UserNotificationTypes   (src/.../user-notification.constants.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/contribution/dtos/contribution-page-options.dto.ts\n    \n        \n            \n                \n                    \n                        \n                        ContributionOrderFieldsEnum\n                    \n                \n                        \n                            \n                                 count\n                            \n                        \n                        \n                            \n                                Value : count\n                            \n                        \n                        \n                            \n                                 last_merged_at\n                            \n                        \n                        \n                            \n                                Value : last_merged_at\n                            \n                        \n                        \n                            \n                                 created_at\n                            \n                        \n                        \n                            \n                                Value : created_at\n                            \n                        \n                        \n                            \n                                 updated_at\n                            \n                        \n                        \n                            \n                                Value : updated_at\n                            \n                        \n                        \n                            \n                                 contributor\n                            \n                        \n                        \n                            \n                                Value : contributor\n                            \n                        \n            \n        \n\n    src/insight/dtos/insight-options.dto.ts\n    \n        \n            \n                \n                    \n                        \n                        InsightFilterFieldsEnum\n                    \n                \n                        \n                            \n                                 Recent\n                            \n                        \n                        \n                            \n                                Value : recent\n                            \n                        \n                        \n                            \n                                 Top100\n                            \n                        \n                        \n                            \n                                Value : top-100-repos\n                            \n                        \n                        \n                            \n                                 MinimumContributors\n                            \n                        \n                        \n                            \n                                Value : minimum-5-contributors\n                            \n                        \n                        \n                            \n                                 MostActive\n                            \n                        \n                        \n                            \n                                Value : most-active\n                            \n                        \n                        \n                            \n                                 MostSpammed\n                            \n                        \n                        \n                            \n                                Value : most-spammed\n                            \n                        \n            \n        \n\n    src/common/constants/order-direction.constant.ts\n    \n        \n            \n                \n                    \n                        \n                        OrderDirectionEnum\n                    \n                \n                        \n                            \n                                 ASC\n                            \n                        \n                        \n                            \n                                Value : ASC\n                            \n                        \n                        \n                            \n                                 DESC\n                            \n                        \n                        \n                            \n                                Value : DESC\n                            \n                        \n            \n        \n\n    src/pull-requests/dtos/pull-request-page-options.dto.ts\n    \n        \n            \n                \n                    \n                        \n                        PullRequestOrderFieldsEnum\n                    \n                \n                        \n                            \n                                 created_at\n                            \n                        \n                        \n                            \n                                Value : created_at\n                            \n                        \n                        \n                            \n                                 closed_at\n                            \n                        \n                        \n                            \n                                Value : closed_at\n                            \n                        \n                        \n                            \n                                 merged_at\n                            \n                        \n                        \n                            \n                                Value : merged_at\n                            \n                        \n                        \n                            \n                                 updated_at\n                            \n                        \n                        \n                            \n                                Value : updated_at\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        PullRequestStatusEnum\n                    \n                \n                        \n                            \n                                 open\n                            \n                        \n                        \n                            \n                                Value : open\n                            \n                        \n                        \n                            \n                                 closed\n                            \n                        \n                        \n                            \n                                Value : closed\n                            \n                        \n            \n        \n\n    src/user/dtos/contributor-prs.dto.ts\n    \n        \n            \n                \n                    \n                        \n                        RangeTypeEnum\n                    \n                \n                        \n                            \n                                 All\n                            \n                        \n                        \n                            \n                                Value : all\n                            \n                        \n                        \n                            \n                                 Recent\n                            \n                        \n                        \n                            \n                                Value : recent\n                            \n                        \n            \n        \n\n    src/repo/dtos/repo-page-options.dto.ts\n    \n        \n            \n                \n                    \n                        \n                        RepoFilterFieldsEnum\n                    \n                \n                        \n                            \n                                 Recent\n                            \n                        \n                        \n                            \n                                Value : recent\n                            \n                        \n                        \n                            \n                                 Top100\n                            \n                        \n                        \n                            \n                                Value : top-100-repos\n                            \n                        \n                        \n                            \n                                 MinimumContributors\n                            \n                        \n                        \n                            \n                                Value : minimum-5-contributors\n                            \n                        \n                        \n                            \n                                 MostActive\n                            \n                        \n                        \n                            \n                                Value : most-active\n                            \n                        \n                        \n                            \n                                 MostSpammed\n                            \n                        \n                        \n                            \n                                Value : most-spammed\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        RepoOrderFieldsEnum\n                    \n                \n                        \n                            \n                                 issues\n                            \n                        \n                        \n                            \n                                Value : issues\n                            \n                        \n                        \n                            \n                                 stars\n                            \n                        \n                        \n                            \n                                Value : stars\n                            \n                        \n                        \n                            \n                                 watchers\n                            \n                        \n                        \n                            \n                                Value : watchers\n                            \n                        \n                        \n                            \n                                 subscribers\n                            \n                        \n                        \n                            \n                                Value : subscribers\n                            \n                        \n                        \n                            \n                                 created_at\n                            \n                        \n                        \n                            \n                                Value : created_at\n                            \n                        \n                        \n                            \n                                 updated_at\n                            \n                        \n                        \n                            \n                                Value : updated_at\n                            \n                        \n                        \n                            \n                                 name\n                            \n                        \n                        \n                            \n                                Value : name\n                            \n                        \n                        \n                            \n                                 contributionsCount\n                            \n                        \n                        \n                            \n                                Value : contributionsCount\n                            \n                        \n                        \n                            \n                                 votesCount\n                            \n                        \n                        \n                            \n                                Value : votesCount\n                            \n                        \n                        \n                            \n                                 submissionsCount\n                            \n                        \n                        \n                            \n                                Value : submissionsCount\n                            \n                        \n                        \n                            \n                                 stargazersCount\n                            \n                        \n                        \n                            \n                                Value : stargazersCount\n                            \n                        \n                        \n                            \n                                 starsCount\n                            \n                        \n                        \n                            \n                                Value : starsCount\n                            \n                        \n            \n        \n\n    src/user-lists/dtos/most-active-contributors.dto.ts\n    \n        \n            \n                \n                    \n                        \n                        UserListContributorStatsOrderEnum\n                    \n                \n                        \n                            \n                                 commits\n                            \n                        \n                        \n                            \n                                Value : commits\n                            \n                        \n                        \n                            \n                                 prs_created\n                            \n                        \n                        \n                            \n                                Value : prs_created\n                            \n                        \n                        \n                            \n                                 total_contributions\n                            \n                        \n                        \n                            \n                                Value : total_contributions\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        UserListContributorStatsTypeEnum\n                    \n                \n                        \n                            \n                                 all\n                            \n                        \n                        \n                            \n                                Value : all\n                            \n                        \n                        \n                            \n                                 active\n                            \n                        \n                        \n                            \n                                Value : active\n                            \n                        \n                        \n                            \n                                 new\n                            \n                        \n                        \n                            \n                                Value : new\n                            \n                        \n                        \n                            \n                                 alumni\n                            \n                        \n                        \n                            \n                                Value : alumni\n                            \n                        \n            \n        \n\n    src/user/entities/user-notification.constants.ts\n    \n        \n            \n                \n                    \n                        \n                        UserNotificationTypes\n                    \n                \n                        \n                            \n                                 Welcome\n                            \n                        \n                        \n                            \n                                Value : welcome\n                            \n                        \n                        \n                            \n                                 HighlightReaction\n                            \n                        \n                        \n                            \n                                Value : highlight_reaction\n                            \n                        \n                        \n                            \n                                 HighlightCreated\n                            \n                        \n                        \n                            \n                                Value : highlight_created\n                            \n                        \n                        \n                            \n                                 Follow\n                            \n                        \n                        \n                            \n                                Value : follow\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n  \n  🍕 Open Sauced Insights API 🍕\n  The path to your next Open Source contribution\n  \n  \n  \n\n\n\n  \n  \n  \n    \n  \n  \n    \n  \n  \n    \n  \n  \n    \n  \n\n\n🚀 Live release environments\n\napi.opensauced.pizza\nbeta.api.opensauced.pizza\n\n📖 Prerequisites\nIn order to run the project we need the following software binaries installed on our development machines:\n\nnode>=16.7.0\nnpm>=8.0.0\ndocker>=20.10.12\n\n🖥️ Local development\n📡 Setting Up Your Supabase Instance\nBefore setting up your local PostgreSQL database, a Supabase instance should be created. To do this, follow these steps:\n1. Create a new Supabase project: Visit Supabase and create a new project.\n2. Set Environment Variables in .env file: Once your project is created, Supabase will provide a URL and an API key. Set these in your project's .env file:\nSUPABASE_URL=your_supabase_url\nSUPABASE_API_KEY=your_supabase_api_key\nSUPABASE_JWT_SECRET=your_supabase_jwt_secret\nAPI_DOMAIN=your_api_domainReplace your_supabase_url, your_supabase_api_key, your_supabase_jwt_secret, and your_api_domain with the actual values provided by Supabase and your project's settings.\n🗄️ Setting Up A PostgreSQL Database Locally\nA PostgreSQL Docker container has been set up to facilitate local development. After navigating to the dev/ directory, this container can be set up as follows:\n1. Obtain SSL Certificates:For secure SSL communication, you need a pair of SSL certificates: server.crt and server.key. You can generate self-signed certificates by using OpenSSL:\nopenssl req -x509 -newkey rsa:4096 -keyout server.key -out server.crt -days 365 -nodes -subj \"/CN=localhost\"Please note that this generates self-signed certificates which should only be used for local development.\n2.Build the Docker image:\ndocker build -t my_postgres_image -f Dockerfile.local-postgres .This command will build the Docker image using the Dockerfile in the current directory. The previously generated SSL certificates will need to be in the same directory as the Dockerfile.\n3.Run the Docker container:\ndocker run --name my_postgres_container -p 25060:5432 -d my_postgres_image:latestThis command will start a new Docker container named my_postgres_container, mapping port 25060 on your local machine to port 5432 on the Docker container.\nOnce the database is stood up,\ncan use the dev/apply-migrations.sh script to apply all the migrations in\nthe migrations/ directory.\n🛠️ Installation\nTo install the application:\nnpm ciTo start a local copy of the app on port 3001:\nnpm run start:dev🧪 Test\nFor running the test suite, use the following command. Since the tests run in watch mode by default, some users may encounter errors about too many files being open. In this case, it may be beneficial to install watchman.\nnpm testYou can request a coverage report by running the following command:\nnpm run test:coverageFor writing tests, the rule is move business or service logic to the lib folder and write unit tests. Logic that needs to be in a React component, then leverage tools like Cypress or Vitest mocking to write tests.\n📦 Docker builds\nA development preview can also be run from docker:\ndocker build -t api.opensauced.pizza .\ndocker run -p 8080:3001 api.opensauced.pizzaAlternatively you can pull the production container and skip all builds:\ndocker run -dit -p 8080:3001 ghcr.io/open-sauced/api.opensauced.pizza🎨 Code linting\nTo check the code and styles quality, use the following command:\nnpm run lintThis will also display during development, but not break on errors.\nTo fix the linting errors, use the following command:\nnpm run formatIt is advised to run this command before committing or opening a pull request.\n🕺 OpenAPI Swagger Doc\nWhen making API changes, make sure to run npm run generate:swagger to generate any new Swagger document bits.\n📕 Types\nWe have a couple of scripts to check and adjust missing types.\nIn order to dry run what types would be added to package.json:\nnpm run types:auto-checkIn order to add any missing types to package.json:\nnpm run types:auto-add🚀 Production deployment\nA production deployment is a complete build of the project, including the build of the static assets.\nnpm run build🍕 Pizza service integration\nThis API integrates with the pizza service\nto accept requests for ingesting commits to the database.\nThe environment variables for this are:\nPIZZA_OVEN_HOST=\"http://example.com\"\nPIZZA_OVEN_API=80🔑 Database structure\nClick the image to see the schema diagram full documentation.\n\n🤝 Contributing\nWe encourage you to contribute to Open Sauced! Please check out the Contributing guide for guidelines about how to proceed.\n\n\n🍕 Community\nGot Questions? Join the conversation in our Discord.Find Open Sauced videos and release overviews on our YouTube Channel.\n🎦 Repository Visualization\nBelow is visual representation of our code repository. It is generated by Octo Repo Visualizer.\nThis visualization is being updated on release to our default branch by our release workflow.\n\n\n⚖️ LICENSE\nMIT © Open Sauced\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\nMIT License\nCopyright (c) 2023 Open Sauced\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        ApiServicesModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        BlogSummaryModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ContributionModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ContributorModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CouponModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CustomerModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        EmojiModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        EndorsementModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        HealthModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        HighlightModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        InsightsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        IssueSummaryModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        LogModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        OpenAiModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PizzaOvenModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PullRequestModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        RepoFilterModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        RepoModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        StargazeModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        StarModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        StripeModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        StripeSubscriptionModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        StripeWebHookModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        SubmitModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        TierModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        TimescaleModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UserListModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UserModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UserReposModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        VoteModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_ApiServicesModule\n\n\n\ncluster_ApiServicesModule_exports\n\n\n\ncluster_ApiServicesModule_providers\n\n\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_BlogSummaryModule\n\n\n\ncluster_BlogSummaryModule_exports\n\n\n\ncluster_BlogSummaryModule_providers\n\n\n\ncluster_ContributionModule\n\n\n\ncluster_ContributionModule_exports\n\n\n\ncluster_ContributionModule_providers\n\n\n\ncluster_CouponModule\n\n\n\ncluster_CouponModule_exports\n\n\n\ncluster_CouponModule_providers\n\n\n\ncluster_CustomerModule\n\n\n\ncluster_CustomerModule_exports\n\n\n\ncluster_CustomerModule_providers\n\n\n\ncluster_EmojiModule\n\n\n\ncluster_EmojiModule_providers\n\n\n\ncluster_EndorsementModule\n\n\n\ncluster_EndorsementModule_exports\n\n\n\ncluster_EndorsementModule_providers\n\n\n\ncluster_InsightsModule\n\n\n\ncluster_InsightsModule_exports\n\n\n\ncluster_InsightsModule_providers\n\n\n\ncluster_IssueSummaryModule\n\n\n\ncluster_IssueSummaryModule_exports\n\n\n\ncluster_IssueSummaryModule_providers\n\n\n\ncluster_LogModule\n\n\n\ncluster_LogModule_exports\n\n\n\ncluster_LogModule_providers\n\n\n\ncluster_OpenAiModule\n\n\n\ncluster_OpenAiModule_exports\n\n\n\ncluster_OpenAiModule_providers\n\n\n\ncluster_PizzaOvenModule\n\n\n\ncluster_PizzaOvenModule_exports\n\n\n\ncluster_PizzaOvenModule_providers\n\n\n\ncluster_PullRequestModule\n\n\n\ncluster_PullRequestModule_imports\n\n\n\ncluster_PullRequestModule_exports\n\n\n\ncluster_PullRequestModule_providers\n\n\n\ncluster_RepoFilterModule\n\n\n\ncluster_RepoFilterModule_exports\n\n\n\ncluster_RepoFilterModule_providers\n\n\n\ncluster_RepoModule\n\n\n\ncluster_RepoModule_exports\n\n\n\ncluster_RepoModule_providers\n\n\n\ncluster_StargazeModule\n\n\n\ncluster_StargazeModule_exports\n\n\n\ncluster_StargazeModule_providers\n\n\n\ncluster_StarModule\n\n\n\ncluster_StarModule_exports\n\n\n\ncluster_StarModule_providers\n\n\n\ncluster_StripeModule\n\n\n\ncluster_StripeModule_exports\n\n\n\ncluster_StripeModule_providers\n\n\n\ncluster_StripeSubscriptionModule\n\n\n\ncluster_StripeSubscriptionModule_exports\n\n\n\ncluster_StripeSubscriptionModule_providers\n\n\n\ncluster_StripeWebHookModule\n\n\n\ncluster_StripeWebHookModule_exports\n\n\n\ncluster_SubmitModule\n\n\n\ncluster_SubmitModule_exports\n\n\n\ncluster_SubmitModule_providers\n\n\n\ncluster_TierModule\n\n\n\ncluster_TierModule_exports\n\n\n\ncluster_TierModule_providers\n\n\n\ncluster_TimescaleModule\n\n\n\ncluster_TimescaleModule_exports\n\n\n\ncluster_TimescaleModule_providers\n\n\n\ncluster_UserListModule\n\n\n\ncluster_UserListModule_exports\n\n\n\ncluster_UserListModule_providers\n\n\n\ncluster_UserModule\n\n\n\ncluster_UserModule_exports\n\n\n\ncluster_UserModule_providers\n\n\n\ncluster_UserReposModule\n\n\n\ncluster_UserReposModule_exports\n\n\n\ncluster_UserReposModule_providers\n\n\n\ncluster_VoteModule\n\n\n\ncluster_VoteModule_exports\n\n\n\ncluster_VoteModule_providers\n\n\n\n\nPagerService \n\nPagerService \n\n\n\nApiServicesModule\n\nApiServicesModule\n\nPagerService  -->\n\nApiServicesModule->PagerService \n\n\n\n\n\nEndorsementModule\n\nEndorsementModule\n\nEndorsementModule -->\n\nApiServicesModule->EndorsementModule\n\n\n\n\n\nInsightsModule\n\nInsightsModule\n\nInsightsModule -->\n\nApiServicesModule->InsightsModule\n\n\n\n\n\nPizzaOvenModule\n\nPizzaOvenModule\n\nPizzaOvenModule -->\n\nApiServicesModule->PizzaOvenModule\n\n\n\n\n\nUserListModule\n\nUserListModule\n\nUserListModule -->\n\nApiServicesModule->UserListModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nUserModule -->\n\nApiServicesModule->UserModule\n\n\n\n\n\nUserReposModule\n\nUserReposModule\n\nUserReposModule -->\n\nApiServicesModule->UserReposModule\n\n\n\n\n\nPagerService\n\nPagerService\n\nApiServicesModule -->\n\nPagerService->ApiServicesModule\n\n\n\n\n\nAuthModule\n\nAuthModule\n\nEndorsementModule -->\n\nAuthModule->EndorsementModule\n\n\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nSupabaseGuard \n\nSupabaseGuard \n\nSupabaseGuard  -->\n\nAuthModule->SupabaseGuard \n\n\n\n\n\nSupabaseStrategy \n\nSupabaseStrategy \n\nSupabaseStrategy  -->\n\nAuthModule->SupabaseStrategy \n\n\n\n\n\nBlogSummaryModule\n\nBlogSummaryModule\n\nAppModule -->\n\nBlogSummaryModule->AppModule\n\n\n\n\n\nBlogSummaryService \n\nBlogSummaryService \n\nBlogSummaryService  -->\n\nBlogSummaryModule->BlogSummaryService \n\n\n\n\n\nContributionModule\n\nContributionModule\n\nAppModule -->\n\nContributionModule->AppModule\n\n\n\n\n\nContributionService \n\nContributionService \n\nContributionService  -->\n\nContributionModule->ContributionService \n\n\n\n\n\nContributorModule\n\nContributorModule\n\nAppModule -->\n\nContributorModule->AppModule\n\n\n\n\n\nCouponModule\n\nCouponModule\n\nAuthModule -->\n\nCouponModule->AuthModule\n\n\n\nAppModule -->\n\nCouponModule->AppModule\n\n\n\n\n\nCouponService \n\nCouponService \n\nCouponService  -->\n\nCouponModule->CouponService \n\n\n\n\n\nCustomerModule\n\nCustomerModule\n\nAuthModule -->\n\nCustomerModule->AuthModule\n\n\n\n\n\nStripeWebHookModule\n\nStripeWebHookModule\n\nStripeWebHookModule -->\n\nCustomerModule->StripeWebHookModule\n\n\n\nAppModule -->\n\nCustomerModule->AppModule\n\n\n\n\n\nCustomerService \n\nCustomerService \n\nCustomerService  -->\n\nCustomerModule->CustomerService \n\n\n\n\n\nEmojiModule\n\nEmojiModule\n\nAppModule -->\n\nEmojiModule->AppModule\n\n\n\nAppModule -->\n\nEndorsementModule->AppModule\n\n\n\n\n\nEndorsementService \n\nEndorsementService \n\nEndorsementService  -->\n\nEndorsementModule->EndorsementService \n\n\n\n\n\nHealthModule\n\nHealthModule\n\nAppModule -->\n\nHealthModule->AppModule\n\n\n\n\n\nHighlightModule\n\nHighlightModule\n\nAppModule -->\n\nHighlightModule->AppModule\n\n\n\nAppModule -->\n\nInsightsModule->AppModule\n\n\n\n\n\nInsightRepoService \n\nInsightRepoService \n\nInsightRepoService  -->\n\nInsightsModule->InsightRepoService \n\n\n\n\n\nInsightsService \n\nInsightsService \n\nInsightsService  -->\n\nInsightsModule->InsightsService \n\n\n\n\n\nIssueSummaryModule\n\nIssueSummaryModule\n\nAppModule -->\n\nIssueSummaryModule->AppModule\n\n\n\n\n\nIssueSummaryService \n\nIssueSummaryService \n\nIssueSummaryService  -->\n\nIssueSummaryModule->IssueSummaryService \n\n\n\n\n\nLogModule\n\nLogModule\n\nAppModule -->\n\nLogModule->AppModule\n\n\n\n\n\nCustomLogger \n\nCustomLogger \n\nCustomLogger  -->\n\nLogModule->CustomLogger \n\n\n\n\n\nOpenAiModule\n\nOpenAiModule\n\nBlogSummaryModule -->\n\nOpenAiModule->BlogSummaryModule\n\n\n\nIssueSummaryModule -->\n\nOpenAiModule->IssueSummaryModule\n\n\n\n\n\nPullRequestModule\n\nPullRequestModule\n\nPullRequestModule -->\n\nOpenAiModule->PullRequestModule\n\n\n\nAppModule -->\n\nOpenAiModule->AppModule\n\n\n\n\n\nOpenAiService \n\nOpenAiService \n\nOpenAiService  -->\n\nOpenAiModule->OpenAiService \n\n\n\nInsightsModule -->\n\nPizzaOvenModule->InsightsModule\n\n\n\nAppModule -->\n\nPizzaOvenModule->AppModule\n\n\n\n\n\nCommitAuthorsService \n\nCommitAuthorsService \n\nCommitAuthorsService  -->\n\nPizzaOvenModule->CommitAuthorsService \n\n\n\n\n\nCommitsService \n\nCommitsService \n\nCommitsService  -->\n\nPizzaOvenModule->CommitsService \n\n\n\n\n\nPizzaOvenService \n\nPizzaOvenService \n\nPizzaOvenService  -->\n\nPizzaOvenModule->PizzaOvenService \n\n\n\nContributorModule -->\n\nPullRequestModule->ContributorModule\n\n\n\nUserModule -->\n\nPullRequestModule->UserModule\n\n\n\nAppModule -->\n\nPullRequestModule->AppModule\n\n\n\n\n\nPullRequestReviewService \n\nPullRequestReviewService \n\nPullRequestReviewService  -->\n\nPullRequestModule->PullRequestReviewService \n\n\n\n\n\nPullRequestService \n\nPullRequestService \n\nPullRequestService  -->\n\nPullRequestModule->PullRequestService \n\n\n\n\n\nRepoModule\n\nRepoModule\n\nContributionModule -->\n\nRepoModule->ContributionModule\n\n\n\n\n\nStarModule\n\nStarModule\n\nStarModule -->\n\nRepoModule->StarModule\n\n\n\n\n\nStargazeModule\n\nStargazeModule\n\nStargazeModule -->\n\nRepoModule->StargazeModule\n\n\n\n\n\nSubmitModule\n\nSubmitModule\n\nSubmitModule -->\n\nRepoModule->SubmitModule\n\n\n\nUserModule -->\n\nRepoModule->UserModule\n\n\n\n\n\nVoteModule\n\nVoteModule\n\nVoteModule -->\n\nRepoModule->VoteModule\n\n\n\nAppModule -->\n\nRepoModule->AppModule\n\n\n\n\n\nRepoService \n\nRepoService \n\nRepoService  -->\n\nRepoModule->RepoService \n\n\n\nAppModule -->\n\nStarModule->AppModule\n\n\n\n\n\nStarService \n\nStarService \n\nStarService  -->\n\nStarModule->StarService \n\n\n\nAppModule -->\n\nStargazeModule->AppModule\n\n\n\n\n\nStargazeService \n\nStargazeService \n\nStargazeService  -->\n\nStargazeModule->StargazeService \n\n\n\n\n\nStripeSubscriptionModule\n\nStripeSubscriptionModule\n\nStripeWebHookModule -->\n\nStripeSubscriptionModule->StripeWebHookModule\n\n\n\nAppModule -->\n\nStripeSubscriptionModule->AppModule\n\n\n\n\n\nStripeSubscriptionService \n\nStripeSubscriptionService \n\nStripeSubscriptionService  -->\n\nStripeSubscriptionModule->StripeSubscriptionService \n\n\n\nAppModule -->\n\nStripeWebHookModule->AppModule\n\n\n\n\n\nStripeWebhookController \n\nStripeWebhookController \n\nStripeWebhookController  -->\n\nStripeWebHookModule->StripeWebhookController \n\n\n\nAppModule -->\n\nSubmitModule->AppModule\n\n\n\n\n\nSubmitService \n\nSubmitService \n\nSubmitService  -->\n\nSubmitModule->SubmitService \n\n\n\n\n\nTimescaleModule\n\nTimescaleModule\n\nUserModule -->\n\nTimescaleModule->UserModule\n\n\n\nAppModule -->\n\nTimescaleModule->AppModule\n\n\n\n\n\nPullRequestGithubEventsService \n\nPullRequestGithubEventsService \n\nPullRequestGithubEventsService  -->\n\nTimescaleModule->PullRequestGithubEventsService \n\n\n\nAppModule -->\n\nUserListModule->AppModule\n\n\n\n\n\nUserListService \n\nUserListService \n\nUserListService  -->\n\nUserListModule->UserListService \n\n\n\n\n\nUserListStatsService \n\nUserListStatsService \n\nUserListStatsService  -->\n\nUserListModule->UserListStatsService \n\n\n\nAuthModule -->\n\nUserModule->AuthModule\n\n\n\nEndorsementModule -->\n\nUserModule->EndorsementModule\n\n\n\nHighlightModule -->\n\nUserModule->HighlightModule\n\n\n\nInsightsModule -->\n\nUserModule->InsightsModule\n\n\n\nStripeWebHookModule -->\n\nUserModule->StripeWebHookModule\n\n\n\nUserListModule -->\n\nUserModule->UserListModule\n\n\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\nEndorsementService  -->\n\nUserModule->EndorsementService \n\n\n\nRepoService  -->\n\nUserModule->RepoService \n\n\n\n\n\nUserFollowService \n\nUserFollowService \n\nUserFollowService  -->\n\nUserModule->UserFollowService \n\n\n\n\n\nUserHighlightsService \n\nUserHighlightsService \n\nUserHighlightsService  -->\n\nUserModule->UserHighlightsService \n\n\n\n\n\nUserOrganizationService \n\nUserOrganizationService \n\nUserOrganizationService  -->\n\nUserModule->UserOrganizationService \n\n\n\n\n\nUserService \n\nUserService \n\nUserService  -->\n\nUserModule->UserService \n\n\n\nAuthModule -->\n\nUserReposModule->AuthModule\n\n\n\nAppModule -->\n\nUserReposModule->AppModule\n\n\n\n\n\nUserReposService \n\nUserReposService \n\nUserReposService  -->\n\nUserReposModule->UserReposService \n\n\n\nAppModule -->\n\nVoteModule->AppModule\n\n\n\n\n\nVoteService \n\nVoteService \n\nVoteService  -->\n\nVoteModule->VoteService \n\n\n\n\n\nStripeModule\n\nStripeModule\n\nAuthModule -->\n\nStripeModule->AuthModule\n\n\n\nStripeWebHookModule -->\n\nStripeModule->StripeWebHookModule\n\n\n\n\n\nStripeService \n\nStripeService \n\nStripeService  -->\n\nStripeModule->StripeService \n\n\n\n\n\nSupabaseGuard\n\nSupabaseGuard\n\nAuthModule -->\n\nSupabaseGuard->AuthModule\n\n\n\n\n\nSupabaseStrategy\n\nSupabaseStrategy\n\nAuthModule -->\n\nSupabaseStrategy->AuthModule\n\n\n\n\n\nBlogSummaryService\n\nBlogSummaryService\n\nBlogSummaryModule -->\n\nBlogSummaryService->BlogSummaryModule\n\n\n\n\n\nContributionService\n\nContributionService\n\nContributionModule -->\n\nContributionService->ContributionModule\n\n\n\n\n\nCouponService\n\nCouponService\n\nCouponModule -->\n\nCouponService->CouponModule\n\n\n\n\n\nCustomerService\n\nCustomerService\n\nCustomerModule -->\n\nCustomerService->CustomerModule\n\n\n\n\n\nEmojiService\n\nEmojiService\n\nEmojiModule -->\n\nEmojiService->EmojiModule\n\n\n\n\n\nEndorsementService\n\nEndorsementService\n\nEndorsementModule -->\n\nEndorsementService->EndorsementModule\n\n\n\nUserModule -->\n\nEndorsementService->UserModule\n\n\n\n\n\nInsightMemberService\n\nInsightMemberService\n\nInsightsModule -->\n\nInsightMemberService->InsightsModule\n\n\n\n\n\nInsightRepoService\n\nInsightRepoService\n\nInsightsModule -->\n\nInsightRepoService->InsightsModule\n\n\n\n\n\nInsightsService\n\nInsightsService\n\nInsightsModule -->\n\nInsightsService->InsightsModule\n\n\n\n\n\nIssueSummaryService\n\nIssueSummaryService\n\nIssueSummaryModule -->\n\nIssueSummaryService->IssueSummaryModule\n\n\n\n\n\nCustomLogger\n\nCustomLogger\n\nLogModule -->\n\nCustomLogger->LogModule\n\n\n\n\n\nLogService\n\nLogService\n\nLogModule -->\n\nLogService->LogModule\n\n\n\n\n\nOpenAiService\n\nOpenAiService\n\nOpenAiModule -->\n\nOpenAiService->OpenAiModule\n\n\n\n\n\nCommitAuthorsService\n\nCommitAuthorsService\n\nPizzaOvenModule -->\n\nCommitAuthorsService->PizzaOvenModule\n\n\n\n\n\nCommitsService\n\nCommitsService\n\nPizzaOvenModule -->\n\nCommitsService->PizzaOvenModule\n\n\n\n\n\nPizzaOvenService\n\nPizzaOvenService\n\nPizzaOvenModule -->\n\nPizzaOvenService->PizzaOvenModule\n\n\n\n\n\nRepoFilterModule\n\nRepoFilterModule\n\nPullRequestModule -->\n\nRepoFilterModule->PullRequestModule\n\n\n\nRepoModule -->\n\nRepoFilterModule->RepoModule\n\n\n\n\n\nRepoFilterService \n\nRepoFilterService \n\nRepoFilterService  -->\n\nRepoFilterModule->RepoFilterService \n\n\n\n\n\nCodeExplanationService\n\nCodeExplanationService\n\nPullRequestModule -->\n\nCodeExplanationService->PullRequestModule\n\n\n\n\n\nCodeRefactorSuggestionService\n\nCodeRefactorSuggestionService\n\nPullRequestModule -->\n\nCodeRefactorSuggestionService->PullRequestModule\n\n\n\n\n\nCodeTestSuggestionService\n\nCodeTestSuggestionService\n\nPullRequestModule -->\n\nCodeTestSuggestionService->PullRequestModule\n\n\n\n\n\nPullRequestDescriptionService\n\nPullRequestDescriptionService\n\nPullRequestModule -->\n\nPullRequestDescriptionService->PullRequestModule\n\n\n\n\n\nPullRequestInsightsService\n\nPullRequestInsightsService\n\nPullRequestModule -->\n\nPullRequestInsightsService->PullRequestModule\n\n\n\n\n\nPullRequestReviewService\n\nPullRequestReviewService\n\nPullRequestModule -->\n\nPullRequestReviewService->PullRequestModule\n\n\n\n\n\nPullRequestService\n\nPullRequestService\n\nPullRequestModule -->\n\nPullRequestService->PullRequestModule\n\n\n\n\n\nRepoFilterService\n\nRepoFilterService\n\nUserModule -->\n\nRepoFilterService->UserModule\n\n\n\nRepoFilterModule -->\n\nRepoFilterService->RepoFilterModule\n\n\n\n\n\nRepoService\n\nRepoService\n\nRepoModule -->\n\nRepoService->RepoModule\n\n\n\nUserModule -->\n\nRepoService->UserModule\n\n\n\n\n\nStargazeService\n\nStargazeService\n\nStargazeModule -->\n\nStargazeService->StargazeModule\n\n\n\n\n\nStarService\n\nStarService\n\nStarModule -->\n\nStarService->StarModule\n\n\n\n\n\nStripeService\n\nStripeService\n\nStripeModule -->\n\nStripeService->StripeModule\n\n\n\n\n\nStripeSubscriptionService\n\nStripeSubscriptionService\n\nStripeSubscriptionModule -->\n\nStripeSubscriptionService->StripeSubscriptionModule\n\n\n\n\n\nSubmitService\n\nSubmitService\n\nSubmitModule -->\n\nSubmitService->SubmitModule\n\n\n\n\n\nTierService \n\nTierService \n\n\n\nTierModule\n\nTierModule\n\nUserModule -->\n\nTierModule->UserModule\n\n\n\nTierService  -->\n\nTierModule->TierService \n\n\n\n\n\nTierService\n\nTierService\n\nTierModule -->\n\nTierService->TierModule\n\n\n\n\n\nPullRequestGithubEventsService\n\nPullRequestGithubEventsService\n\nTimescaleModule -->\n\nPullRequestGithubEventsService->TimescaleModule\n\n\n\n\n\nUserListService\n\nUserListService\n\nUserListModule -->\n\nUserListService->UserListModule\n\n\n\n\n\nUserListStatsService\n\nUserListStatsService\n\nUserListModule -->\n\nUserListStatsService->UserListModule\n\n\n\n\n\nUserCollaborationService\n\nUserCollaborationService\n\nUserModule -->\n\nUserCollaborationService->UserModule\n\n\n\n\n\nUserFollowService\n\nUserFollowService\n\nUserModule -->\n\nUserFollowService->UserModule\n\n\n\n\n\nUserHighlightsService\n\nUserHighlightsService\n\nUserModule -->\n\nUserHighlightsService->UserModule\n\n\n\n\n\nUserNotificationService\n\nUserNotificationService\n\nUserModule -->\n\nUserNotificationService->UserModule\n\n\n\n\n\nUserOrganizationService\n\nUserOrganizationService\n\nUserModule -->\n\nUserOrganizationService->UserModule\n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\nUserReposService\n\nUserReposService\n\nUserReposModule -->\n\nUserReposService->UserReposModule\n\n\n\n\n\nVoteService\n\nVoteService\n\nVoteModule -->\n\nVoteService->VoteModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        32 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    35 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    39 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    46 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    63 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Guard\n                \n            \n        \n        \n            \n                \n                    \n                    4 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 1.59.0\n        \n            Description : API dot Open Sauced is NestJS and SupaBase powered OAS3 backend designed to remove client complexity and provide a structured graph of all @open-sauced integrations\n        \n            Keywords : \n        \n            Homepage : https://github.com/open-sauced/api.opensauced.pizza#readme\n        \n            Bugs : https://github.com/open-sauced/api.opensauced.pizza/issues\n        \n            License : MIT\n        \n            Repository : git+https://github.com/open-sauced/api.opensauced.pizza.git\n        \n            Author : TED Vortex \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            SupabaseAuthRequest   (src/.../supabase.user.decorator.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/auth/supabase.user.decorator.ts\n    \n    \n        \n            \n                \n                    \n                    SupabaseAuthRequest\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ApiConfig   (src/.../api.config.ts)\n                        \n                        \n                            ApiPaginatedResponse   (src/.../api-paginated-response.decorator.ts)\n                        \n                        \n                            cliDuration   (src/.../cli-duration.ts)\n                        \n                        \n                            DbApiConfig   (src/.../db-api.config.ts)\n                        \n                        \n                            DbLoggingConfig   (src/.../db-logging.config.ts)\n                        \n                        \n                            DbTimescaleConfig   (src/.../timescale.config.ts)\n                        \n                        \n                            EndpointConfig   (src/.../endpoint.config.ts)\n                        \n                        \n                            generateSwaggerJson   (src/.../generate-swagger.ts)\n                        \n                        \n                            getDomain   (src/.../endpoint.config.ts)\n                        \n                        \n                            GetPrevDateISOString   (src/.../datetimes.ts)\n                        \n                        \n                            HacktoberfestConfig   (src/.../hacktoberfest.config.ts)\n                        \n                        \n                            OpenAIConfig   (src/.../openai.config.ts)\n                        \n                        \n                            PizzaConfig   (src/.../pizza.config.ts)\n                        \n                        \n                            relevantEvents   (src/.../stripe-webhook.controller.ts)\n                        \n                        \n                            StripeConfig   (src/.../stripe.config.ts)\n                        \n                        \n                            swaggerMarkdownDescription   (src/.../swagger.ts)\n                        \n                        \n                            TierConfig   (src/.../tier.config.ts)\n                        \n                        \n                            toDateTime   (src/.../utils.ts)\n                        \n                        \n                            User   (src/.../supabase.user.decorator.ts)\n                        \n                        \n                            UserId   (src/.../supabase.user.decorator.ts)\n                        \n                        \n                            userNotificationTypes   (src/.../user-notification.constants.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/config/api.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ApiConfig\n                        \n                    \n                \n            \n                \n                    \n                        Default value : registerAs(\"api\", () => ({\n  codename: String(process.env.API_CODENAME ?? \"api-local\"),\n  logging: process.env.NODE_ENV !== \"production\" ? \"debug\" : \"info\",\n  host: String(process.env.API_HOST ?? \"0.0.0.0\"),\n  port: String(process.env.API_PORT ?? \"3001\"),\n  domain: String(process.env.API_DOMAIN ?? \"api.opensauced.pizza\"),\n  development: !process.env.CI,\n  memory_heap: Number(parseInt(process.env.MEMORY_HEAP ?? \"200\", 10) * 1024 * 1024),\n  memory_rss: Number(parseInt(process.env.MEMORY_RSS ?? \"3000\", 10) * 1024 * 1024),\n  disk_percentage: Number(parseFloat(process.env.DISK_PERCENGATE ?? \"0.7\")),\n  disk_size: Number(parseInt(process.env.DISK_SIZE ?? \"100\", 10) * 1024 * 1024 * 1024),\n  endorsementServiceToken: String(process.env.ENDORSEMENT_SERVICE_TOKEN ?? \"\"),\n}))\n                    \n                \n\n\n        \n    \n\n    src/common/decorators/api-paginated-response.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ApiPaginatedResponse\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (model: TModel) =>\n  applyDecorators(\n    ApiExtraModels(PageDto, model),\n    ApiOkResponse({\n      description: \"Successfully received model list\",\n      schema: {\n        allOf: [\n          { $ref: getSchemaPath(PageDto) },\n          {\n            properties: {\n              data: {\n                type: \"array\",\n                items: { $ref: getSchemaPath(model) },\n              },\n            },\n          },\n        ],\n      },\n    })\n  )\n                    \n                \n\n\n        \n    \n\n    src/common/util/cli-duration.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        cliDuration\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (startTime: number, text: string) =>\n  `${text} ${clc.yellow(`+${String(Date.now() - startTime)}ms`)}`\n                    \n                \n\n\n        \n    \n\n    src/config/db-api.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        DbApiConfig\n                        \n                    \n                \n            \n                \n                    \n                        Default value : registerAs(\"db-api\", () => ({\n  connection: String(process.env.TYPEORM_CONNECTION_API ?? \"postgres\"),\n  host: String(process.env.TYPEORM_HOST_API ?? \"localhost\"),\n  port: String(process.env.TYPEORM_PORT_API ?? \"25060\"),\n  username: String(process.env.TYPEORM_USERNAME_API ?? \"doadmin\"),\n  password: String(process.env.TYPEORM_PASSWORD_API ?? \"UCN2zrH2WGxKck7tT2JG4MY6wbHkeX9s\"),\n  database: String(process.env.TYPEORM_DATABASE_API ?? \"defaultdb\"),\n  certificate: String(process.env.TYPEORM_SSL_CERT_API ?? \"-----------------------------\"),\n  maxQueryExecutionTime: Number(parseInt(process.env.TYPEORM_MAX_QUERY_EXECUTION_TIME_API ?? \"10000\", 10)),\n}))\n                    \n                \n\n\n        \n    \n\n    src/config/db-logging.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        DbLoggingConfig\n                        \n                    \n                \n            \n                \n                    \n                        Default value : registerAs(\"db-logging\", () => ({\n  connection: String(process.env.TYPEORM_CONNECTION_LOGGING ?? \"postgres\"),\n  host: String(process.env.TYPEORM_HOST_LOGGING ?? \"localhost\"),\n  port: String(process.env.TYPEORM_PORT_LOGGING ?? \"25060\"),\n  username: String(process.env.TYPEORM_USERNAME_LOGGING ?? \"doadmin\"),\n  password: String(process.env.TYPEORM_PASSWORD_LOGGING ?? \"UCN2zrH2WGxKck7tT2JG4MY6wbHkeX9s\"),\n  database: String(process.env.TYPEORM_DATABASE_LOGGING ?? \"defaultdb\"),\n  certificate: String(process.env.TYPEORM_SSL_CERT_LOGGING ?? \"-----------------------------\"),\n  maxQueryExecutionTime: Number(parseInt(process.env.TYPEORM_MAX_QUERY_EXECUTION_TIME_LOGGING ?? \"10000\", 10)),\n}))\n                    \n                \n\n\n        \n    \n\n    src/config/timescale.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        DbTimescaleConfig\n                        \n                    \n                \n            \n                \n                    \n                        Default value : registerAs(\"db-timescale\", () => ({\n  connection: String(process.env.TYPEORM_CONNECTION_TIMESCALE ?? \"postgres\"),\n  host: String(process.env.TYPEORM_HOST_TIMESCALE ?? \"localhost\"),\n  port: String(process.env.TYPEORM_PORT_TIMESCALE ?? \"5432\"),\n  username: String(process.env.TYPEORM_USERNAME_TIMESCALE ?? \"tsdbadmin\"),\n  password: String(process.env.TYPEORM_PASSWORD_TIMESCALE ?? \"password\"),\n  database: String(process.env.TYPEORM_DATABASE_TIMESCALE ?? \"tsdb\"),\n  certificate: String(process.env.TYPEORM_SSL_CERT_TIMESCALE ?? \"-----------------------------\"),\n}))\n                    \n                \n\n\n        \n    \n\n    src/config/endpoint.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        EndpointConfig\n                        \n                    \n                \n            \n                \n                    \n                        Default value : registerAs(\"endpoint\", () => ({\n  landing: getDomain(),\n  app: getDomain(\"app\"),\n  hot: getDomain(\"hot\"),\n  docs: getDomain(\"docs\"),\n  explore: getDomain(\"explore\"),\n  admin: getDomain(\"admin\"),\n}))\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getDomain\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (subdomain?: string) =>\n  new URL(`https://${subdomain ? `${subdomain}.` : \"\"}${process.env.DOMAIN ?? \"opensauced.pizza\"}`).toString()\n                    \n                \n\n\n        \n    \n\n    src/generate-swagger.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        generateSwaggerJson\n                        \n                    \n                \n            \n                \n                    \n                        Default value : async () => {\n  const app = await NestFactory.create(AppModule, new FastifyAdapter({ logger: false }), {\n    bufferLogs: true,\n    rawBody: true,\n  });\n\n  const apiDomain = \"api.opensauced.pizza\";\n\n  const markdownDescription = swaggerMarkdownDescription(apiDomain);\n\n  app.useLogger(app.get(Logger));\n  app.flushLogs();\n  app.enableCors();\n  app.enableVersioning({\n    type: VersioningType.URI,\n    defaultVersion: String(major(\"1.8.0\", { loose: false })),\n  });\n\n  const options = new DocumentBuilder();\n\n  options\n    .addServer(`https://${apiDomain}`, \"Production\", {})\n    .addServer(`https://beta.${apiDomain}`, \"Beta\", {})\n    .addServer(`https://alpha.${apiDomain}`, \"Alpha\", {})\n    .setTitle(`@open-sauced/api.opensauced.pizza`)\n    .setDescription(markdownDescription)\n    .setVersion(`1`)\n    .setContact(\"Open Sauced\", \"https://opensauced.pizza\", \"hello@opensauced.pizza\")\n    .setTermsOfService(\"https://github.com/open-sauced/code-of-conduct\")\n    .setLicense(`The MIT License`, `https://opensource.org/licenses/mit`)\n    .addBearerAuth();\n\n  const document = SwaggerModule.createDocument(app, options.build(), {\n    operationIdFactory: (controllerKey: string, methodKey: string) => methodKey,\n  });\n\n  const yamlSwaggerDoc = yaml.stringify(document);\n\n  // write the yaml swagger doc to the root project directory anytime the server starts\n  await writeFile(path.resolve(process.cwd(), \"swagger.yaml\"), yamlSwaggerDoc, \"utf8\");\n\n  await app.close();\n}\n                    \n                \n\n\n        \n    \n\n    src/common/util/datetimes.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        GetPrevDateISOString\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (prev_start_date = 0): string =>\n  new Date(Date.now() - prev_start_date * 24 * 60 * 60 * 1000).toISOString()\n                    \n                \n\n\n        \n    \n\n    src/config/hacktoberfest.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        HacktoberfestConfig\n                        \n                    \n                \n            \n                \n                    \n                        Default value : registerAs(\"hacktoberfest\", () => ({\n  year: String(process.env.HACKTOBERFEST_YEAR ?? `${new Date().getFullYear()}`),\n}))\n                    \n                \n\n\n        \n    \n\n    src/config/openai.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        OpenAIConfig\n                        \n                    \n                \n            \n                \n                    \n                        Default value : registerAs(\"openai\", () => ({\n  APIKey: String(process.env.OPENAI_API_KEY ?? \"apikey\"),\n  modelName: String(process.env.OPENAI_MODEL_NAME ?? \"gpt-3.5-turbo\"),\n  completionsURL: String(process.env.OPENAI_COMPLETIONS_API_URL ?? \"\"),\n}))\n                    \n                \n\n\n        \n    \n\n    src/config/pizza.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        PizzaConfig\n                        \n                    \n                \n            \n                \n                    \n                        Default value : registerAs(\"pizza\", () => ({\n  host: String(process.env.PIZZA_OVEN_HOST ?? \"0.0.0.0\"),\n  port: String(process.env.PIZZA_OVEN_PORT ?? \"80\"),\n}))\n                    \n                \n\n\n        \n    \n\n    src/stripe-webhook/stripe-webhook.controller.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        relevantEvents\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Set([\n  \"checkout.session.completed\",\n  \"customer.subscription.created\",\n  \"customer.subscription.updated\",\n  \"customer.subscription.deleted\",\n])\n                    \n                \n\n\n        \n    \n\n    src/config/stripe.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        StripeConfig\n                        \n                    \n                \n            \n                \n                    \n                        Default value : registerAs(\"stripe\", () => ({\n  secretKey: String(process.env.STRIPE_SECRET_KEY ?? \"\"),\n  webhookSecret: String(process.env.STRIPE_WEBHOOK_SECRET_LIVE ?? process.env.STRIPE_WEBHOOK_SECRET ?? \"\"),\n  subscriptionPriceID: String(process.env.STRIPE_SUBSCRIPTION_PRICE_ID ?? \"\"),\n  subscriptionSessionCheckoutSuccessURL: String(process.env.STRIPE_CHECKOUT_SESSION_SUCCESS_URL ?? \"\"),\n  subscriptionSessionCancelURL: String(process.env.STRIPE_CHECKOUT_SESSION_CANCEL_URL ?? \"\"),\n}))\n                    \n                \n\n\n        \n    \n\n    src/common/util/swagger.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        swaggerMarkdownDescription\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (apiDomain: string) => `\n## Swagger-UI API Documentation\n\nThis REST API can be used to create, read, update or delete data from the Open Sauced community platform.\nThe Swagger-UI provides useful information to get started and an overview of all available resources.\nEach API route is clickable and has their own detailed description on how to use it.\nThe base URL for the API is [${apiDomain}](https://${apiDomain}).\n\n[comment]: # (TODO: add bearer auth information)\n\n## Rate limiting\n\nEvery IP address is allowed to perform 5000 requests per hour.\nThis is measured by saving the date of the initial request and counting all requests in the next hour.\nWhen an IP address goes over the limit, HTTP status code 429 is returned.\nThe returned HTTP headers of any API request show the current rate limit status:\n\nheader | description\n--- | ---\n\\`X-RateLimit-Limit\\` | The maximum number of requests allowed per hour\n\\`X-RateLimit-Remaining\\` | The number of requests remaining in the current rate limit window\n\\`X-RateLimit-Reset\\` | The date and time at which the current rate limit window resets in [UTC epoch seconds](https://en.wikipedia.org/wiki/Unix_time)\n\n[comment]: # (TODO: add pagination information)\n\n## Common response codes\n\nEach route shows for each method which data they expect and which they will respond when the call succeeds.\nThe table below shows most common response codes you can receive from our endpoints.\n\ncode | condition\n--- | ---\n[\\`200\\`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/200) | The [\\`GET\\`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/GET) request was handled successfully. The response provides the requested data.\n[\\`201\\`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/201) | The [\\`POST\\`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/POST) request was handled successfully. The response provides the created data.\n[\\`204\\`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/204) | The [\\`PATCH\\`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/PATCH) or [\\`DELETE\\`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/DELETE) request was handled successfully. The response provides no data, generally.\n[\\`400\\`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/400) | The server will not process the request due to something that is perceived to be a client error. Check the provided error for mote information.\n[\\`401\\`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/401) | The request requires user authentication. Check the provided error for more information.\n[\\`403\\`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/403) | The request was valid, but the server is refusing user access. Check the provided error for more information.\n[\\`404\\`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/404) | The requested resource could not be found. Check the provided error for more information.\n[\\`429\\`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/429) | The current API Key made too many requests in the last hour. Check [Rate limiting](#ratelimiting) for more information.\n\n## Additional links`\n                    \n                \n\n\n        \n    \n\n    src/config/tier.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        TierConfig\n                        \n                    \n                \n            \n                \n                    \n                        Default value : registerAs(\"tier\", () => ({\n  freePlan: String(process.env.TIER_PLAN_FREE ?? \"plan:free@1\"),\n}))\n                    \n                \n\n\n        \n    \n\n    src/stripe-webhook/utils.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        toDateTime\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (secs: number) => {\n  // unix epoch start\n  const t = new Date(\"1970-01-01T00:30:00Z\");\n\n  t.setSeconds(secs);\n  return t;\n}\n                    \n                \n\n\n        \n    \n\n    src/auth/supabase.user.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        User\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createParamDecorator((_data: unknown, context: ExecutionContext) => {\n  const request = context.switchToHttp().getRequest();\n\n  return request.user;\n})\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        UserId\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createParamDecorator((_data: unknown, context: ExecutionContext) => {\n  const request = context.switchToHttp().getRequest();\n\n  return parseInt(request.user?.user_metadata.sub as string, 10);\n})\n                    \n                \n\n\n        \n    \n\n    src/user/entities/user-notification.constants.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        userNotificationTypes\n                        \n                    \n                \n            \n                \n                    \n                        Default value : [\"highlight_reaction\", \"highlight_created\", \"follow\"] as const\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
